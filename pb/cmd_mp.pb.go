// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: cmd/cmd_mp.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlayerApplyEnterMpNotify_CmdId int32

const (
	PlayerApplyEnterMpNotify_NONE             PlayerApplyEnterMpNotify_CmdId = 0
	PlayerApplyEnterMpNotify_CMD_ID           PlayerApplyEnterMpNotify_CmdId = 1826
	PlayerApplyEnterMpNotify_ENET_CHANNEL_ID  PlayerApplyEnterMpNotify_CmdId = 0
	PlayerApplyEnterMpNotify_ENET_IS_RELIABLE PlayerApplyEnterMpNotify_CmdId = 1
)

// Enum value maps for PlayerApplyEnterMpNotify_CmdId.
var (
	PlayerApplyEnterMpNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		1826: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	PlayerApplyEnterMpNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1826,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x PlayerApplyEnterMpNotify_CmdId) Enum() *PlayerApplyEnterMpNotify_CmdId {
	p := new(PlayerApplyEnterMpNotify_CmdId)
	*p = x
	return p
}

func (x PlayerApplyEnterMpNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerApplyEnterMpNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[0].Descriptor()
}

func (PlayerApplyEnterMpNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[0]
}

func (x PlayerApplyEnterMpNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerApplyEnterMpNotify_CmdId.Descriptor instead.
func (PlayerApplyEnterMpNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{0, 0}
}

type PlayerApplyEnterMpReq_CmdId int32

const (
	PlayerApplyEnterMpReq_NONE             PlayerApplyEnterMpReq_CmdId = 0
	PlayerApplyEnterMpReq_CMD_ID           PlayerApplyEnterMpReq_CmdId = 1818
	PlayerApplyEnterMpReq_ENET_CHANNEL_ID  PlayerApplyEnterMpReq_CmdId = 0
	PlayerApplyEnterMpReq_ENET_IS_RELIABLE PlayerApplyEnterMpReq_CmdId = 1
	PlayerApplyEnterMpReq_IS_ALLOW_CLIENT  PlayerApplyEnterMpReq_CmdId = 1
)

// Enum value maps for PlayerApplyEnterMpReq_CmdId.
var (
	PlayerApplyEnterMpReq_CmdId_name = map[int32]string{
		0:    "NONE",
		1818: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	PlayerApplyEnterMpReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1818,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x PlayerApplyEnterMpReq_CmdId) Enum() *PlayerApplyEnterMpReq_CmdId {
	p := new(PlayerApplyEnterMpReq_CmdId)
	*p = x
	return p
}

func (x PlayerApplyEnterMpReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerApplyEnterMpReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[1].Descriptor()
}

func (PlayerApplyEnterMpReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[1]
}

func (x PlayerApplyEnterMpReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerApplyEnterMpReq_CmdId.Descriptor instead.
func (PlayerApplyEnterMpReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{1, 0}
}

type PlayerApplyEnterMpRsp_CmdId int32

const (
	PlayerApplyEnterMpRsp_NONE             PlayerApplyEnterMpRsp_CmdId = 0
	PlayerApplyEnterMpRsp_CMD_ID           PlayerApplyEnterMpRsp_CmdId = 1825
	PlayerApplyEnterMpRsp_ENET_CHANNEL_ID  PlayerApplyEnterMpRsp_CmdId = 0
	PlayerApplyEnterMpRsp_ENET_IS_RELIABLE PlayerApplyEnterMpRsp_CmdId = 1
)

// Enum value maps for PlayerApplyEnterMpRsp_CmdId.
var (
	PlayerApplyEnterMpRsp_CmdId_name = map[int32]string{
		0:    "NONE",
		1825: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	PlayerApplyEnterMpRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1825,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x PlayerApplyEnterMpRsp_CmdId) Enum() *PlayerApplyEnterMpRsp_CmdId {
	p := new(PlayerApplyEnterMpRsp_CmdId)
	*p = x
	return p
}

func (x PlayerApplyEnterMpRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerApplyEnterMpRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[2].Descriptor()
}

func (PlayerApplyEnterMpRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[2]
}

func (x PlayerApplyEnterMpRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerApplyEnterMpRsp_CmdId.Descriptor instead.
func (PlayerApplyEnterMpRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{2, 0}
}

type PlayerApplyEnterMpResultNotify_CmdId int32

const (
	PlayerApplyEnterMpResultNotify_NONE             PlayerApplyEnterMpResultNotify_CmdId = 0
	PlayerApplyEnterMpResultNotify_CMD_ID           PlayerApplyEnterMpResultNotify_CmdId = 1807
	PlayerApplyEnterMpResultNotify_ENET_CHANNEL_ID  PlayerApplyEnterMpResultNotify_CmdId = 0
	PlayerApplyEnterMpResultNotify_ENET_IS_RELIABLE PlayerApplyEnterMpResultNotify_CmdId = 1
)

// Enum value maps for PlayerApplyEnterMpResultNotify_CmdId.
var (
	PlayerApplyEnterMpResultNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		1807: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	PlayerApplyEnterMpResultNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1807,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x PlayerApplyEnterMpResultNotify_CmdId) Enum() *PlayerApplyEnterMpResultNotify_CmdId {
	p := new(PlayerApplyEnterMpResultNotify_CmdId)
	*p = x
	return p
}

func (x PlayerApplyEnterMpResultNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerApplyEnterMpResultNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[3].Descriptor()
}

func (PlayerApplyEnterMpResultNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[3]
}

func (x PlayerApplyEnterMpResultNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerApplyEnterMpResultNotify_CmdId.Descriptor instead.
func (PlayerApplyEnterMpResultNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{3, 0}
}

type PlayerApplyEnterMpResultNotify_Reason int32

const (
	PlayerApplyEnterMpResultNotify_PLAYER_JUDGE                  PlayerApplyEnterMpResultNotify_Reason = 0
	PlayerApplyEnterMpResultNotify_SCENE_CANNOT_ENTER            PlayerApplyEnterMpResultNotify_Reason = 1
	PlayerApplyEnterMpResultNotify_PLAYER_CANNOT_ENTER_MP        PlayerApplyEnterMpResultNotify_Reason = 2
	PlayerApplyEnterMpResultNotify_SYSTEM_JUDGE                  PlayerApplyEnterMpResultNotify_Reason = 3
	PlayerApplyEnterMpResultNotify_ALLOW_ENTER_PLAYER_FULL       PlayerApplyEnterMpResultNotify_Reason = 4
	PlayerApplyEnterMpResultNotify_WORLD_LEVEL_LOWER_THAN_HOST   PlayerApplyEnterMpResultNotify_Reason = 5
	PlayerApplyEnterMpResultNotify_HOST_IN_MATCH                 PlayerApplyEnterMpResultNotify_Reason = 6
	PlayerApplyEnterMpResultNotify_PLAYER_IN_BLACKLIST           PlayerApplyEnterMpResultNotify_Reason = 7
	PlayerApplyEnterMpResultNotify_PS_PLAYER_NOT_ACCEPT_OTHERS   PlayerApplyEnterMpResultNotify_Reason = 8
	PlayerApplyEnterMpResultNotify_HOST_IS_BLOCKED               PlayerApplyEnterMpResultNotify_Reason = 9
	PlayerApplyEnterMpResultNotify_OTHER_DATA_VERSION_NOT_LATEST PlayerApplyEnterMpResultNotify_Reason = 10
	PlayerApplyEnterMpResultNotify_DATA_VERSION_NOT_LATEST       PlayerApplyEnterMpResultNotify_Reason = 11
	PlayerApplyEnterMpResultNotify_PLAYER_NOT_IN_PLAYER_WORLD    PlayerApplyEnterMpResultNotify_Reason = 12
	PlayerApplyEnterMpResultNotify_MAX_PLAYER                    PlayerApplyEnterMpResultNotify_Reason = 13
)

// Enum value maps for PlayerApplyEnterMpResultNotify_Reason.
var (
	PlayerApplyEnterMpResultNotify_Reason_name = map[int32]string{
		0:  "PLAYER_JUDGE",
		1:  "SCENE_CANNOT_ENTER",
		2:  "PLAYER_CANNOT_ENTER_MP",
		3:  "SYSTEM_JUDGE",
		4:  "ALLOW_ENTER_PLAYER_FULL",
		5:  "WORLD_LEVEL_LOWER_THAN_HOST",
		6:  "HOST_IN_MATCH",
		7:  "PLAYER_IN_BLACKLIST",
		8:  "PS_PLAYER_NOT_ACCEPT_OTHERS",
		9:  "HOST_IS_BLOCKED",
		10: "OTHER_DATA_VERSION_NOT_LATEST",
		11: "DATA_VERSION_NOT_LATEST",
		12: "PLAYER_NOT_IN_PLAYER_WORLD",
		13: "MAX_PLAYER",
	}
	PlayerApplyEnterMpResultNotify_Reason_value = map[string]int32{
		"PLAYER_JUDGE":                  0,
		"SCENE_CANNOT_ENTER":            1,
		"PLAYER_CANNOT_ENTER_MP":        2,
		"SYSTEM_JUDGE":                  3,
		"ALLOW_ENTER_PLAYER_FULL":       4,
		"WORLD_LEVEL_LOWER_THAN_HOST":   5,
		"HOST_IN_MATCH":                 6,
		"PLAYER_IN_BLACKLIST":           7,
		"PS_PLAYER_NOT_ACCEPT_OTHERS":   8,
		"HOST_IS_BLOCKED":               9,
		"OTHER_DATA_VERSION_NOT_LATEST": 10,
		"DATA_VERSION_NOT_LATEST":       11,
		"PLAYER_NOT_IN_PLAYER_WORLD":    12,
		"MAX_PLAYER":                    13,
	}
)

func (x PlayerApplyEnterMpResultNotify_Reason) Enum() *PlayerApplyEnterMpResultNotify_Reason {
	p := new(PlayerApplyEnterMpResultNotify_Reason)
	*p = x
	return p
}

func (x PlayerApplyEnterMpResultNotify_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerApplyEnterMpResultNotify_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[4].Descriptor()
}

func (PlayerApplyEnterMpResultNotify_Reason) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[4]
}

func (x PlayerApplyEnterMpResultNotify_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerApplyEnterMpResultNotify_Reason.Descriptor instead.
func (PlayerApplyEnterMpResultNotify_Reason) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{3, 1}
}

type PlayerApplyEnterMpResultReq_CmdId int32

const (
	PlayerApplyEnterMpResultReq_NONE             PlayerApplyEnterMpResultReq_CmdId = 0
	PlayerApplyEnterMpResultReq_CMD_ID           PlayerApplyEnterMpResultReq_CmdId = 1802
	PlayerApplyEnterMpResultReq_ENET_CHANNEL_ID  PlayerApplyEnterMpResultReq_CmdId = 0
	PlayerApplyEnterMpResultReq_ENET_IS_RELIABLE PlayerApplyEnterMpResultReq_CmdId = 1
	PlayerApplyEnterMpResultReq_IS_ALLOW_CLIENT  PlayerApplyEnterMpResultReq_CmdId = 1
)

// Enum value maps for PlayerApplyEnterMpResultReq_CmdId.
var (
	PlayerApplyEnterMpResultReq_CmdId_name = map[int32]string{
		0:    "NONE",
		1802: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	PlayerApplyEnterMpResultReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1802,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x PlayerApplyEnterMpResultReq_CmdId) Enum() *PlayerApplyEnterMpResultReq_CmdId {
	p := new(PlayerApplyEnterMpResultReq_CmdId)
	*p = x
	return p
}

func (x PlayerApplyEnterMpResultReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerApplyEnterMpResultReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[5].Descriptor()
}

func (PlayerApplyEnterMpResultReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[5]
}

func (x PlayerApplyEnterMpResultReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerApplyEnterMpResultReq_CmdId.Descriptor instead.
func (PlayerApplyEnterMpResultReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{4, 0}
}

type PlayerApplyEnterMpResultRsp_CmdId int32

const (
	PlayerApplyEnterMpResultRsp_NONE             PlayerApplyEnterMpResultRsp_CmdId = 0
	PlayerApplyEnterMpResultRsp_CMD_ID           PlayerApplyEnterMpResultRsp_CmdId = 1831
	PlayerApplyEnterMpResultRsp_ENET_CHANNEL_ID  PlayerApplyEnterMpResultRsp_CmdId = 0
	PlayerApplyEnterMpResultRsp_ENET_IS_RELIABLE PlayerApplyEnterMpResultRsp_CmdId = 1
)

// Enum value maps for PlayerApplyEnterMpResultRsp_CmdId.
var (
	PlayerApplyEnterMpResultRsp_CmdId_name = map[int32]string{
		0:    "NONE",
		1831: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	PlayerApplyEnterMpResultRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1831,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x PlayerApplyEnterMpResultRsp_CmdId) Enum() *PlayerApplyEnterMpResultRsp_CmdId {
	p := new(PlayerApplyEnterMpResultRsp_CmdId)
	*p = x
	return p
}

func (x PlayerApplyEnterMpResultRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerApplyEnterMpResultRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[6].Descriptor()
}

func (PlayerApplyEnterMpResultRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[6]
}

func (x PlayerApplyEnterMpResultRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerApplyEnterMpResultRsp_CmdId.Descriptor instead.
func (PlayerApplyEnterMpResultRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{5, 0}
}

type PlayerQuitFromMpNotify_CmdId int32

const (
	PlayerQuitFromMpNotify_NONE             PlayerQuitFromMpNotify_CmdId = 0
	PlayerQuitFromMpNotify_CMD_ID           PlayerQuitFromMpNotify_CmdId = 1829
	PlayerQuitFromMpNotify_ENET_CHANNEL_ID  PlayerQuitFromMpNotify_CmdId = 0
	PlayerQuitFromMpNotify_ENET_IS_RELIABLE PlayerQuitFromMpNotify_CmdId = 1
)

// Enum value maps for PlayerQuitFromMpNotify_CmdId.
var (
	PlayerQuitFromMpNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		1829: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	PlayerQuitFromMpNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1829,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x PlayerQuitFromMpNotify_CmdId) Enum() *PlayerQuitFromMpNotify_CmdId {
	p := new(PlayerQuitFromMpNotify_CmdId)
	*p = x
	return p
}

func (x PlayerQuitFromMpNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerQuitFromMpNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[7].Descriptor()
}

func (PlayerQuitFromMpNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[7]
}

func (x PlayerQuitFromMpNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerQuitFromMpNotify_CmdId.Descriptor instead.
func (PlayerQuitFromMpNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{6, 0}
}

type PlayerQuitFromMpNotify_QuitReason int32

const (
	PlayerQuitFromMpNotify_INVALID                                   PlayerQuitFromMpNotify_QuitReason = 0
	PlayerQuitFromMpNotify_HOST_NO_OTHER_PLAYER                      PlayerQuitFromMpNotify_QuitReason = 1
	PlayerQuitFromMpNotify_KICK_BY_HOST                              PlayerQuitFromMpNotify_QuitReason = 2
	PlayerQuitFromMpNotify_BACK_TO_MY_WORLD                          PlayerQuitFromMpNotify_QuitReason = 3
	PlayerQuitFromMpNotify_KICK_BY_HOST_LOGOUT                       PlayerQuitFromMpNotify_QuitReason = 4
	PlayerQuitFromMpNotify_KICK_BY_HOST_BLOCK                        PlayerQuitFromMpNotify_QuitReason = 5
	PlayerQuitFromMpNotify_BE_BLOCKED                                PlayerQuitFromMpNotify_QuitReason = 6
	PlayerQuitFromMpNotify_KICK_BY_HOST_ENTER_HOME                   PlayerQuitFromMpNotify_QuitReason = 7
	PlayerQuitFromMpNotify_HOST_SCENE_INVALID                        PlayerQuitFromMpNotify_QuitReason = 8
	PlayerQuitFromMpNotify_KICK_BY_PLAY                              PlayerQuitFromMpNotify_QuitReason = 9
	PlayerQuitFromMpNotify_KICK_BY_ISLAND_PARTY_GALLERY_START_FAILED PlayerQuitFromMpNotify_QuitReason = 10
)

// Enum value maps for PlayerQuitFromMpNotify_QuitReason.
var (
	PlayerQuitFromMpNotify_QuitReason_name = map[int32]string{
		0:  "INVALID",
		1:  "HOST_NO_OTHER_PLAYER",
		2:  "KICK_BY_HOST",
		3:  "BACK_TO_MY_WORLD",
		4:  "KICK_BY_HOST_LOGOUT",
		5:  "KICK_BY_HOST_BLOCK",
		6:  "BE_BLOCKED",
		7:  "KICK_BY_HOST_ENTER_HOME",
		8:  "HOST_SCENE_INVALID",
		9:  "KICK_BY_PLAY",
		10: "KICK_BY_ISLAND_PARTY_GALLERY_START_FAILED",
	}
	PlayerQuitFromMpNotify_QuitReason_value = map[string]int32{
		"INVALID":                 0,
		"HOST_NO_OTHER_PLAYER":    1,
		"KICK_BY_HOST":            2,
		"BACK_TO_MY_WORLD":        3,
		"KICK_BY_HOST_LOGOUT":     4,
		"KICK_BY_HOST_BLOCK":      5,
		"BE_BLOCKED":              6,
		"KICK_BY_HOST_ENTER_HOME": 7,
		"HOST_SCENE_INVALID":      8,
		"KICK_BY_PLAY":            9,
		"KICK_BY_ISLAND_PARTY_GALLERY_START_FAILED": 10,
	}
)

func (x PlayerQuitFromMpNotify_QuitReason) Enum() *PlayerQuitFromMpNotify_QuitReason {
	p := new(PlayerQuitFromMpNotify_QuitReason)
	*p = x
	return p
}

func (x PlayerQuitFromMpNotify_QuitReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerQuitFromMpNotify_QuitReason) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[8].Descriptor()
}

func (PlayerQuitFromMpNotify_QuitReason) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[8]
}

func (x PlayerQuitFromMpNotify_QuitReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerQuitFromMpNotify_QuitReason.Descriptor instead.
func (PlayerQuitFromMpNotify_QuitReason) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{6, 1}
}

type PlayerPreEnterMpNotify_CmdId int32

const (
	PlayerPreEnterMpNotify_NONE             PlayerPreEnterMpNotify_CmdId = 0
	PlayerPreEnterMpNotify_CMD_ID           PlayerPreEnterMpNotify_CmdId = 1822
	PlayerPreEnterMpNotify_ENET_CHANNEL_ID  PlayerPreEnterMpNotify_CmdId = 0
	PlayerPreEnterMpNotify_ENET_IS_RELIABLE PlayerPreEnterMpNotify_CmdId = 1
)

// Enum value maps for PlayerPreEnterMpNotify_CmdId.
var (
	PlayerPreEnterMpNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		1822: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	PlayerPreEnterMpNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1822,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x PlayerPreEnterMpNotify_CmdId) Enum() *PlayerPreEnterMpNotify_CmdId {
	p := new(PlayerPreEnterMpNotify_CmdId)
	*p = x
	return p
}

func (x PlayerPreEnterMpNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerPreEnterMpNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[9].Descriptor()
}

func (PlayerPreEnterMpNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[9]
}

func (x PlayerPreEnterMpNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerPreEnterMpNotify_CmdId.Descriptor instead.
func (PlayerPreEnterMpNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{7, 0}
}

type PlayerPreEnterMpNotify_State int32

const (
	PlayerPreEnterMpNotify_INVALID PlayerPreEnterMpNotify_State = 0
	PlayerPreEnterMpNotify_START   PlayerPreEnterMpNotify_State = 1
	PlayerPreEnterMpNotify_TIMEOUT PlayerPreEnterMpNotify_State = 2
)

// Enum value maps for PlayerPreEnterMpNotify_State.
var (
	PlayerPreEnterMpNotify_State_name = map[int32]string{
		0: "INVALID",
		1: "START",
		2: "TIMEOUT",
	}
	PlayerPreEnterMpNotify_State_value = map[string]int32{
		"INVALID": 0,
		"START":   1,
		"TIMEOUT": 2,
	}
)

func (x PlayerPreEnterMpNotify_State) Enum() *PlayerPreEnterMpNotify_State {
	p := new(PlayerPreEnterMpNotify_State)
	*p = x
	return p
}

func (x PlayerPreEnterMpNotify_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerPreEnterMpNotify_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[10].Descriptor()
}

func (PlayerPreEnterMpNotify_State) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[10]
}

func (x PlayerPreEnterMpNotify_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerPreEnterMpNotify_State.Descriptor instead.
func (PlayerPreEnterMpNotify_State) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{7, 1}
}

type GetPlayerMpModeAvailabilityReq_CmdId int32

const (
	GetPlayerMpModeAvailabilityReq_NONE             GetPlayerMpModeAvailabilityReq_CmdId = 0
	GetPlayerMpModeAvailabilityReq_CMD_ID           GetPlayerMpModeAvailabilityReq_CmdId = 1844
	GetPlayerMpModeAvailabilityReq_ENET_CHANNEL_ID  GetPlayerMpModeAvailabilityReq_CmdId = 0
	GetPlayerMpModeAvailabilityReq_ENET_IS_RELIABLE GetPlayerMpModeAvailabilityReq_CmdId = 1
	GetPlayerMpModeAvailabilityReq_IS_ALLOW_CLIENT  GetPlayerMpModeAvailabilityReq_CmdId = 1
)

// Enum value maps for GetPlayerMpModeAvailabilityReq_CmdId.
var (
	GetPlayerMpModeAvailabilityReq_CmdId_name = map[int32]string{
		0:    "NONE",
		1844: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	GetPlayerMpModeAvailabilityReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1844,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x GetPlayerMpModeAvailabilityReq_CmdId) Enum() *GetPlayerMpModeAvailabilityReq_CmdId {
	p := new(GetPlayerMpModeAvailabilityReq_CmdId)
	*p = x
	return p
}

func (x GetPlayerMpModeAvailabilityReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetPlayerMpModeAvailabilityReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[11].Descriptor()
}

func (GetPlayerMpModeAvailabilityReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[11]
}

func (x GetPlayerMpModeAvailabilityReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetPlayerMpModeAvailabilityReq_CmdId.Descriptor instead.
func (GetPlayerMpModeAvailabilityReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{8, 0}
}

type GetPlayerMpModeAvailabilityRsp_CmdId int32

const (
	GetPlayerMpModeAvailabilityRsp_NONE             GetPlayerMpModeAvailabilityRsp_CmdId = 0
	GetPlayerMpModeAvailabilityRsp_CMD_ID           GetPlayerMpModeAvailabilityRsp_CmdId = 1849
	GetPlayerMpModeAvailabilityRsp_ENET_CHANNEL_ID  GetPlayerMpModeAvailabilityRsp_CmdId = 0
	GetPlayerMpModeAvailabilityRsp_ENET_IS_RELIABLE GetPlayerMpModeAvailabilityRsp_CmdId = 1
)

// Enum value maps for GetPlayerMpModeAvailabilityRsp_CmdId.
var (
	GetPlayerMpModeAvailabilityRsp_CmdId_name = map[int32]string{
		0:    "NONE",
		1849: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	GetPlayerMpModeAvailabilityRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1849,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x GetPlayerMpModeAvailabilityRsp_CmdId) Enum() *GetPlayerMpModeAvailabilityRsp_CmdId {
	p := new(GetPlayerMpModeAvailabilityRsp_CmdId)
	*p = x
	return p
}

func (x GetPlayerMpModeAvailabilityRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetPlayerMpModeAvailabilityRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[12].Descriptor()
}

func (GetPlayerMpModeAvailabilityRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[12]
}

func (x GetPlayerMpModeAvailabilityRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetPlayerMpModeAvailabilityRsp_CmdId.Descriptor instead.
func (GetPlayerMpModeAvailabilityRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{9, 0}
}

type PlayerSetOnlyMPWithPSPlayerReq_CmdId int32

const (
	PlayerSetOnlyMPWithPSPlayerReq_NONE             PlayerSetOnlyMPWithPSPlayerReq_CmdId = 0
	PlayerSetOnlyMPWithPSPlayerReq_CMD_ID           PlayerSetOnlyMPWithPSPlayerReq_CmdId = 1820
	PlayerSetOnlyMPWithPSPlayerReq_ENET_CHANNEL_ID  PlayerSetOnlyMPWithPSPlayerReq_CmdId = 0
	PlayerSetOnlyMPWithPSPlayerReq_ENET_IS_RELIABLE PlayerSetOnlyMPWithPSPlayerReq_CmdId = 1
	PlayerSetOnlyMPWithPSPlayerReq_IS_ALLOW_CLIENT  PlayerSetOnlyMPWithPSPlayerReq_CmdId = 1
)

// Enum value maps for PlayerSetOnlyMPWithPSPlayerReq_CmdId.
var (
	PlayerSetOnlyMPWithPSPlayerReq_CmdId_name = map[int32]string{
		0:    "NONE",
		1820: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	PlayerSetOnlyMPWithPSPlayerReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1820,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x PlayerSetOnlyMPWithPSPlayerReq_CmdId) Enum() *PlayerSetOnlyMPWithPSPlayerReq_CmdId {
	p := new(PlayerSetOnlyMPWithPSPlayerReq_CmdId)
	*p = x
	return p
}

func (x PlayerSetOnlyMPWithPSPlayerReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerSetOnlyMPWithPSPlayerReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[13].Descriptor()
}

func (PlayerSetOnlyMPWithPSPlayerReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[13]
}

func (x PlayerSetOnlyMPWithPSPlayerReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerSetOnlyMPWithPSPlayerReq_CmdId.Descriptor instead.
func (PlayerSetOnlyMPWithPSPlayerReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{10, 0}
}

type PlayerSetOnlyMPWithPSPlayerRsp_CmdId int32

const (
	PlayerSetOnlyMPWithPSPlayerRsp_NONE             PlayerSetOnlyMPWithPSPlayerRsp_CmdId = 0
	PlayerSetOnlyMPWithPSPlayerRsp_CMD_ID           PlayerSetOnlyMPWithPSPlayerRsp_CmdId = 1845
	PlayerSetOnlyMPWithPSPlayerRsp_ENET_CHANNEL_ID  PlayerSetOnlyMPWithPSPlayerRsp_CmdId = 0
	PlayerSetOnlyMPWithPSPlayerRsp_ENET_IS_RELIABLE PlayerSetOnlyMPWithPSPlayerRsp_CmdId = 1
)

// Enum value maps for PlayerSetOnlyMPWithPSPlayerRsp_CmdId.
var (
	PlayerSetOnlyMPWithPSPlayerRsp_CmdId_name = map[int32]string{
		0:    "NONE",
		1845: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	PlayerSetOnlyMPWithPSPlayerRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1845,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x PlayerSetOnlyMPWithPSPlayerRsp_CmdId) Enum() *PlayerSetOnlyMPWithPSPlayerRsp_CmdId {
	p := new(PlayerSetOnlyMPWithPSPlayerRsp_CmdId)
	*p = x
	return p
}

func (x PlayerSetOnlyMPWithPSPlayerRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerSetOnlyMPWithPSPlayerRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[14].Descriptor()
}

func (PlayerSetOnlyMPWithPSPlayerRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[14]
}

func (x PlayerSetOnlyMPWithPSPlayerRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerSetOnlyMPWithPSPlayerRsp_CmdId.Descriptor instead.
func (PlayerSetOnlyMPWithPSPlayerRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{11, 0}
}

type PSPlayerApplyEnterMpReq_CmdId int32

const (
	PSPlayerApplyEnterMpReq_NONE             PSPlayerApplyEnterMpReq_CmdId = 0
	PSPlayerApplyEnterMpReq_CMD_ID           PSPlayerApplyEnterMpReq_CmdId = 1841
	PSPlayerApplyEnterMpReq_ENET_CHANNEL_ID  PSPlayerApplyEnterMpReq_CmdId = 0
	PSPlayerApplyEnterMpReq_ENET_IS_RELIABLE PSPlayerApplyEnterMpReq_CmdId = 1
	PSPlayerApplyEnterMpReq_IS_ALLOW_CLIENT  PSPlayerApplyEnterMpReq_CmdId = 1
)

// Enum value maps for PSPlayerApplyEnterMpReq_CmdId.
var (
	PSPlayerApplyEnterMpReq_CmdId_name = map[int32]string{
		0:    "NONE",
		1841: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	PSPlayerApplyEnterMpReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1841,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x PSPlayerApplyEnterMpReq_CmdId) Enum() *PSPlayerApplyEnterMpReq_CmdId {
	p := new(PSPlayerApplyEnterMpReq_CmdId)
	*p = x
	return p
}

func (x PSPlayerApplyEnterMpReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PSPlayerApplyEnterMpReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[15].Descriptor()
}

func (PSPlayerApplyEnterMpReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[15]
}

func (x PSPlayerApplyEnterMpReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PSPlayerApplyEnterMpReq_CmdId.Descriptor instead.
func (PSPlayerApplyEnterMpReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{12, 0}
}

type PSPlayerApplyEnterMpRsp_CmdId int32

const (
	PSPlayerApplyEnterMpRsp_NONE             PSPlayerApplyEnterMpRsp_CmdId = 0
	PSPlayerApplyEnterMpRsp_CMD_ID           PSPlayerApplyEnterMpRsp_CmdId = 1842
	PSPlayerApplyEnterMpRsp_ENET_CHANNEL_ID  PSPlayerApplyEnterMpRsp_CmdId = 0
	PSPlayerApplyEnterMpRsp_ENET_IS_RELIABLE PSPlayerApplyEnterMpRsp_CmdId = 1
)

// Enum value maps for PSPlayerApplyEnterMpRsp_CmdId.
var (
	PSPlayerApplyEnterMpRsp_CmdId_name = map[int32]string{
		0:    "NONE",
		1842: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	PSPlayerApplyEnterMpRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1842,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x PSPlayerApplyEnterMpRsp_CmdId) Enum() *PSPlayerApplyEnterMpRsp_CmdId {
	p := new(PSPlayerApplyEnterMpRsp_CmdId)
	*p = x
	return p
}

func (x PSPlayerApplyEnterMpRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PSPlayerApplyEnterMpRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[16].Descriptor()
}

func (PSPlayerApplyEnterMpRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[16]
}

func (x PSPlayerApplyEnterMpRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PSPlayerApplyEnterMpRsp_CmdId.Descriptor instead.
func (PSPlayerApplyEnterMpRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{13, 0}
}

type MpPlayOwnerCheckReq_CmdId int32

const (
	MpPlayOwnerCheckReq_NONE             MpPlayOwnerCheckReq_CmdId = 0
	MpPlayOwnerCheckReq_CMD_ID           MpPlayOwnerCheckReq_CmdId = 1814
	MpPlayOwnerCheckReq_ENET_CHANNEL_ID  MpPlayOwnerCheckReq_CmdId = 0
	MpPlayOwnerCheckReq_ENET_IS_RELIABLE MpPlayOwnerCheckReq_CmdId = 1
	MpPlayOwnerCheckReq_IS_ALLOW_CLIENT  MpPlayOwnerCheckReq_CmdId = 1
)

// Enum value maps for MpPlayOwnerCheckReq_CmdId.
var (
	MpPlayOwnerCheckReq_CmdId_name = map[int32]string{
		0:    "NONE",
		1814: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	MpPlayOwnerCheckReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1814,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x MpPlayOwnerCheckReq_CmdId) Enum() *MpPlayOwnerCheckReq_CmdId {
	p := new(MpPlayOwnerCheckReq_CmdId)
	*p = x
	return p
}

func (x MpPlayOwnerCheckReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MpPlayOwnerCheckReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[17].Descriptor()
}

func (MpPlayOwnerCheckReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[17]
}

func (x MpPlayOwnerCheckReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MpPlayOwnerCheckReq_CmdId.Descriptor instead.
func (MpPlayOwnerCheckReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{14, 0}
}

type MpPlayOwnerCheckRsp_CmdId int32

const (
	MpPlayOwnerCheckRsp_NONE             MpPlayOwnerCheckRsp_CmdId = 0
	MpPlayOwnerCheckRsp_CMD_ID           MpPlayOwnerCheckRsp_CmdId = 1847
	MpPlayOwnerCheckRsp_ENET_CHANNEL_ID  MpPlayOwnerCheckRsp_CmdId = 0
	MpPlayOwnerCheckRsp_ENET_IS_RELIABLE MpPlayOwnerCheckRsp_CmdId = 1
)

// Enum value maps for MpPlayOwnerCheckRsp_CmdId.
var (
	MpPlayOwnerCheckRsp_CmdId_name = map[int32]string{
		0:    "NONE",
		1847: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	MpPlayOwnerCheckRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1847,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x MpPlayOwnerCheckRsp_CmdId) Enum() *MpPlayOwnerCheckRsp_CmdId {
	p := new(MpPlayOwnerCheckRsp_CmdId)
	*p = x
	return p
}

func (x MpPlayOwnerCheckRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MpPlayOwnerCheckRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[18].Descriptor()
}

func (MpPlayOwnerCheckRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[18]
}

func (x MpPlayOwnerCheckRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MpPlayOwnerCheckRsp_CmdId.Descriptor instead.
func (MpPlayOwnerCheckRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{15, 0}
}

type MpPlayOwnerStartInviteReq_CmdId int32

const (
	MpPlayOwnerStartInviteReq_NONE             MpPlayOwnerStartInviteReq_CmdId = 0
	MpPlayOwnerStartInviteReq_CMD_ID           MpPlayOwnerStartInviteReq_CmdId = 1837
	MpPlayOwnerStartInviteReq_ENET_CHANNEL_ID  MpPlayOwnerStartInviteReq_CmdId = 0
	MpPlayOwnerStartInviteReq_ENET_IS_RELIABLE MpPlayOwnerStartInviteReq_CmdId = 1
	MpPlayOwnerStartInviteReq_IS_ALLOW_CLIENT  MpPlayOwnerStartInviteReq_CmdId = 1
)

// Enum value maps for MpPlayOwnerStartInviteReq_CmdId.
var (
	MpPlayOwnerStartInviteReq_CmdId_name = map[int32]string{
		0:    "NONE",
		1837: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	MpPlayOwnerStartInviteReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1837,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x MpPlayOwnerStartInviteReq_CmdId) Enum() *MpPlayOwnerStartInviteReq_CmdId {
	p := new(MpPlayOwnerStartInviteReq_CmdId)
	*p = x
	return p
}

func (x MpPlayOwnerStartInviteReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MpPlayOwnerStartInviteReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[19].Descriptor()
}

func (MpPlayOwnerStartInviteReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[19]
}

func (x MpPlayOwnerStartInviteReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MpPlayOwnerStartInviteReq_CmdId.Descriptor instead.
func (MpPlayOwnerStartInviteReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{16, 0}
}

type MpPlayOwnerStartInviteRsp_CmdId int32

const (
	MpPlayOwnerStartInviteRsp_NONE             MpPlayOwnerStartInviteRsp_CmdId = 0
	MpPlayOwnerStartInviteRsp_CMD_ID           MpPlayOwnerStartInviteRsp_CmdId = 1823
	MpPlayOwnerStartInviteRsp_ENET_CHANNEL_ID  MpPlayOwnerStartInviteRsp_CmdId = 0
	MpPlayOwnerStartInviteRsp_ENET_IS_RELIABLE MpPlayOwnerStartInviteRsp_CmdId = 1
)

// Enum value maps for MpPlayOwnerStartInviteRsp_CmdId.
var (
	MpPlayOwnerStartInviteRsp_CmdId_name = map[int32]string{
		0:    "NONE",
		1823: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	MpPlayOwnerStartInviteRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1823,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x MpPlayOwnerStartInviteRsp_CmdId) Enum() *MpPlayOwnerStartInviteRsp_CmdId {
	p := new(MpPlayOwnerStartInviteRsp_CmdId)
	*p = x
	return p
}

func (x MpPlayOwnerStartInviteRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MpPlayOwnerStartInviteRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[20].Descriptor()
}

func (MpPlayOwnerStartInviteRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[20]
}

func (x MpPlayOwnerStartInviteRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MpPlayOwnerStartInviteRsp_CmdId.Descriptor instead.
func (MpPlayOwnerStartInviteRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{17, 0}
}

type MpPlayOwnerInviteNotify_CmdId int32

const (
	MpPlayOwnerInviteNotify_NONE             MpPlayOwnerInviteNotify_CmdId = 0
	MpPlayOwnerInviteNotify_CMD_ID           MpPlayOwnerInviteNotify_CmdId = 1835
	MpPlayOwnerInviteNotify_ENET_CHANNEL_ID  MpPlayOwnerInviteNotify_CmdId = 0
	MpPlayOwnerInviteNotify_ENET_IS_RELIABLE MpPlayOwnerInviteNotify_CmdId = 1
)

// Enum value maps for MpPlayOwnerInviteNotify_CmdId.
var (
	MpPlayOwnerInviteNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		1835: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	MpPlayOwnerInviteNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1835,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x MpPlayOwnerInviteNotify_CmdId) Enum() *MpPlayOwnerInviteNotify_CmdId {
	p := new(MpPlayOwnerInviteNotify_CmdId)
	*p = x
	return p
}

func (x MpPlayOwnerInviteNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MpPlayOwnerInviteNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[21].Descriptor()
}

func (MpPlayOwnerInviteNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[21]
}

func (x MpPlayOwnerInviteNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MpPlayOwnerInviteNotify_CmdId.Descriptor instead.
func (MpPlayOwnerInviteNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{18, 0}
}

type MpPlayGuestReplyInviteReq_CmdId int32

const (
	MpPlayGuestReplyInviteReq_NONE             MpPlayGuestReplyInviteReq_CmdId = 0
	MpPlayGuestReplyInviteReq_CMD_ID           MpPlayGuestReplyInviteReq_CmdId = 1848
	MpPlayGuestReplyInviteReq_ENET_CHANNEL_ID  MpPlayGuestReplyInviteReq_CmdId = 0
	MpPlayGuestReplyInviteReq_ENET_IS_RELIABLE MpPlayGuestReplyInviteReq_CmdId = 1
	MpPlayGuestReplyInviteReq_IS_ALLOW_CLIENT  MpPlayGuestReplyInviteReq_CmdId = 1
)

// Enum value maps for MpPlayGuestReplyInviteReq_CmdId.
var (
	MpPlayGuestReplyInviteReq_CmdId_name = map[int32]string{
		0:    "NONE",
		1848: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	MpPlayGuestReplyInviteReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1848,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x MpPlayGuestReplyInviteReq_CmdId) Enum() *MpPlayGuestReplyInviteReq_CmdId {
	p := new(MpPlayGuestReplyInviteReq_CmdId)
	*p = x
	return p
}

func (x MpPlayGuestReplyInviteReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MpPlayGuestReplyInviteReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[22].Descriptor()
}

func (MpPlayGuestReplyInviteReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[22]
}

func (x MpPlayGuestReplyInviteReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MpPlayGuestReplyInviteReq_CmdId.Descriptor instead.
func (MpPlayGuestReplyInviteReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{19, 0}
}

type MpPlayGuestReplyInviteRsp_CmdId int32

const (
	MpPlayGuestReplyInviteRsp_NONE             MpPlayGuestReplyInviteRsp_CmdId = 0
	MpPlayGuestReplyInviteRsp_CMD_ID           MpPlayGuestReplyInviteRsp_CmdId = 1850
	MpPlayGuestReplyInviteRsp_ENET_CHANNEL_ID  MpPlayGuestReplyInviteRsp_CmdId = 0
	MpPlayGuestReplyInviteRsp_ENET_IS_RELIABLE MpPlayGuestReplyInviteRsp_CmdId = 1
)

// Enum value maps for MpPlayGuestReplyInviteRsp_CmdId.
var (
	MpPlayGuestReplyInviteRsp_CmdId_name = map[int32]string{
		0:    "NONE",
		1850: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	MpPlayGuestReplyInviteRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1850,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x MpPlayGuestReplyInviteRsp_CmdId) Enum() *MpPlayGuestReplyInviteRsp_CmdId {
	p := new(MpPlayGuestReplyInviteRsp_CmdId)
	*p = x
	return p
}

func (x MpPlayGuestReplyInviteRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MpPlayGuestReplyInviteRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[23].Descriptor()
}

func (MpPlayGuestReplyInviteRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[23]
}

func (x MpPlayGuestReplyInviteRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MpPlayGuestReplyInviteRsp_CmdId.Descriptor instead.
func (MpPlayGuestReplyInviteRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{20, 0}
}

type MpPlayGuestReplyNotify_CmdId int32

const (
	MpPlayGuestReplyNotify_NONE             MpPlayGuestReplyNotify_CmdId = 0
	MpPlayGuestReplyNotify_CMD_ID           MpPlayGuestReplyNotify_CmdId = 1812
	MpPlayGuestReplyNotify_ENET_CHANNEL_ID  MpPlayGuestReplyNotify_CmdId = 0
	MpPlayGuestReplyNotify_ENET_IS_RELIABLE MpPlayGuestReplyNotify_CmdId = 1
)

// Enum value maps for MpPlayGuestReplyNotify_CmdId.
var (
	MpPlayGuestReplyNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		1812: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	MpPlayGuestReplyNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1812,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x MpPlayGuestReplyNotify_CmdId) Enum() *MpPlayGuestReplyNotify_CmdId {
	p := new(MpPlayGuestReplyNotify_CmdId)
	*p = x
	return p
}

func (x MpPlayGuestReplyNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MpPlayGuestReplyNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[24].Descriptor()
}

func (MpPlayGuestReplyNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[24]
}

func (x MpPlayGuestReplyNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MpPlayGuestReplyNotify_CmdId.Descriptor instead.
func (MpPlayGuestReplyNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{21, 0}
}

type MpPlayPrepareNotify_CmdId int32

const (
	MpPlayPrepareNotify_NONE             MpPlayPrepareNotify_CmdId = 0
	MpPlayPrepareNotify_CMD_ID           MpPlayPrepareNotify_CmdId = 1833
	MpPlayPrepareNotify_ENET_CHANNEL_ID  MpPlayPrepareNotify_CmdId = 0
	MpPlayPrepareNotify_ENET_IS_RELIABLE MpPlayPrepareNotify_CmdId = 1
)

// Enum value maps for MpPlayPrepareNotify_CmdId.
var (
	MpPlayPrepareNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		1833: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	MpPlayPrepareNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1833,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x MpPlayPrepareNotify_CmdId) Enum() *MpPlayPrepareNotify_CmdId {
	p := new(MpPlayPrepareNotify_CmdId)
	*p = x
	return p
}

func (x MpPlayPrepareNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MpPlayPrepareNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[25].Descriptor()
}

func (MpPlayPrepareNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[25]
}

func (x MpPlayPrepareNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MpPlayPrepareNotify_CmdId.Descriptor instead.
func (MpPlayPrepareNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{22, 0}
}

type MpPlayInviteResultNotify_CmdId int32

const (
	MpPlayInviteResultNotify_NONE             MpPlayInviteResultNotify_CmdId = 0
	MpPlayInviteResultNotify_CMD_ID           MpPlayInviteResultNotify_CmdId = 1815
	MpPlayInviteResultNotify_ENET_CHANNEL_ID  MpPlayInviteResultNotify_CmdId = 0
	MpPlayInviteResultNotify_ENET_IS_RELIABLE MpPlayInviteResultNotify_CmdId = 1
)

// Enum value maps for MpPlayInviteResultNotify_CmdId.
var (
	MpPlayInviteResultNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		1815: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	MpPlayInviteResultNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1815,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x MpPlayInviteResultNotify_CmdId) Enum() *MpPlayInviteResultNotify_CmdId {
	p := new(MpPlayInviteResultNotify_CmdId)
	*p = x
	return p
}

func (x MpPlayInviteResultNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MpPlayInviteResultNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[26].Descriptor()
}

func (MpPlayInviteResultNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[26]
}

func (x MpPlayInviteResultNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MpPlayInviteResultNotify_CmdId.Descriptor instead.
func (MpPlayInviteResultNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{23, 0}
}

type MpPlayPrepareInterruptNotify_CmdId int32

const (
	MpPlayPrepareInterruptNotify_NONE             MpPlayPrepareInterruptNotify_CmdId = 0
	MpPlayPrepareInterruptNotify_CMD_ID           MpPlayPrepareInterruptNotify_CmdId = 1813
	MpPlayPrepareInterruptNotify_ENET_CHANNEL_ID  MpPlayPrepareInterruptNotify_CmdId = 0
	MpPlayPrepareInterruptNotify_ENET_IS_RELIABLE MpPlayPrepareInterruptNotify_CmdId = 1
)

// Enum value maps for MpPlayPrepareInterruptNotify_CmdId.
var (
	MpPlayPrepareInterruptNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		1813: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	MpPlayPrepareInterruptNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1813,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x MpPlayPrepareInterruptNotify_CmdId) Enum() *MpPlayPrepareInterruptNotify_CmdId {
	p := new(MpPlayPrepareInterruptNotify_CmdId)
	*p = x
	return p
}

func (x MpPlayPrepareInterruptNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MpPlayPrepareInterruptNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[27].Descriptor()
}

func (MpPlayPrepareInterruptNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[27]
}

func (x MpPlayPrepareInterruptNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MpPlayPrepareInterruptNotify_CmdId.Descriptor instead.
func (MpPlayPrepareInterruptNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{24, 0}
}

type MpBlockNotify_CmdId int32

const (
	MpBlockNotify_NONE             MpBlockNotify_CmdId = 0
	MpBlockNotify_CMD_ID           MpBlockNotify_CmdId = 1801
	MpBlockNotify_ENET_CHANNEL_ID  MpBlockNotify_CmdId = 0
	MpBlockNotify_ENET_IS_RELIABLE MpBlockNotify_CmdId = 1
)

// Enum value maps for MpBlockNotify_CmdId.
var (
	MpBlockNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		1801: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	MpBlockNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1801,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x MpBlockNotify_CmdId) Enum() *MpBlockNotify_CmdId {
	p := new(MpBlockNotify_CmdId)
	*p = x
	return p
}

func (x MpBlockNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MpBlockNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_mp_proto_enumTypes[28].Descriptor()
}

func (MpBlockNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_mp_proto_enumTypes[28]
}

func (x MpBlockNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MpBlockNotify_CmdId.Descriptor instead.
func (MpBlockNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{25, 0}
}

type PlayerApplyEnterMpNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcThreadIndex uint32            `protobuf:"varint,5,opt,name=src_thread_index,json=srcThreadIndex,proto3" json:"src_thread_index,omitempty"`
	SrcAppId       uint32            `protobuf:"varint,6,opt,name=src_app_id,json=srcAppId,proto3" json:"src_app_id,omitempty"`
	SrcPlayerInfo  *OnlinePlayerInfo `protobuf:"bytes,2,opt,name=src_player_info,json=srcPlayerInfo,proto3" json:"src_player_info,omitempty"`
}

func (x *PlayerApplyEnterMpNotify) Reset() {
	*x = PlayerApplyEnterMpNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerApplyEnterMpNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerApplyEnterMpNotify) ProtoMessage() {}

func (x *PlayerApplyEnterMpNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerApplyEnterMpNotify.ProtoReflect.Descriptor instead.
func (*PlayerApplyEnterMpNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerApplyEnterMpNotify) GetSrcThreadIndex() uint32 {
	if x != nil {
		return x.SrcThreadIndex
	}
	return 0
}

func (x *PlayerApplyEnterMpNotify) GetSrcAppId() uint32 {
	if x != nil {
		return x.SrcAppId
	}
	return 0
}

func (x *PlayerApplyEnterMpNotify) GetSrcPlayerInfo() *OnlinePlayerInfo {
	if x != nil {
		return x.SrcPlayerInfo
	}
	return nil
}

type PlayerApplyEnterMpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetUid uint32 `protobuf:"varint,4,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
}

func (x *PlayerApplyEnterMpReq) Reset() {
	*x = PlayerApplyEnterMpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerApplyEnterMpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerApplyEnterMpReq) ProtoMessage() {}

func (x *PlayerApplyEnterMpReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerApplyEnterMpReq.ProtoReflect.Descriptor instead.
func (*PlayerApplyEnterMpReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerApplyEnterMpReq) GetTargetUid() uint32 {
	if x != nil {
		return x.TargetUid
	}
	return 0
}

type PlayerApplyEnterMpRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode   int32  `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
	TargetUid uint32 `protobuf:"varint,3,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
	Param     uint32 `protobuf:"varint,4,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *PlayerApplyEnterMpRsp) Reset() {
	*x = PlayerApplyEnterMpRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerApplyEnterMpRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerApplyEnterMpRsp) ProtoMessage() {}

func (x *PlayerApplyEnterMpRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerApplyEnterMpRsp.ProtoReflect.Descriptor instead.
func (*PlayerApplyEnterMpRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerApplyEnterMpRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *PlayerApplyEnterMpRsp) GetTargetUid() uint32 {
	if x != nil {
		return x.TargetUid
	}
	return 0
}

func (x *PlayerApplyEnterMpRsp) GetParam() uint32 {
	if x != nil {
		return x.Param
	}
	return 0
}

type PlayerApplyEnterMpResultNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAgreed       bool                                  `protobuf:"varint,2,opt,name=is_agreed,json=isAgreed,proto3" json:"is_agreed,omitempty"`
	TargetNickname string                                `protobuf:"bytes,12,opt,name=target_nickname,json=targetNickname,proto3" json:"target_nickname,omitempty"`
	Reason         PlayerApplyEnterMpResultNotify_Reason `protobuf:"varint,13,opt,name=reason,proto3,enum=proto.PlayerApplyEnterMpResultNotify_Reason" json:"reason,omitempty"`
	TargetUid      uint32                                `protobuf:"varint,1,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
}

func (x *PlayerApplyEnterMpResultNotify) Reset() {
	*x = PlayerApplyEnterMpResultNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerApplyEnterMpResultNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerApplyEnterMpResultNotify) ProtoMessage() {}

func (x *PlayerApplyEnterMpResultNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerApplyEnterMpResultNotify.ProtoReflect.Descriptor instead.
func (*PlayerApplyEnterMpResultNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{3}
}

func (x *PlayerApplyEnterMpResultNotify) GetIsAgreed() bool {
	if x != nil {
		return x.IsAgreed
	}
	return false
}

func (x *PlayerApplyEnterMpResultNotify) GetTargetNickname() string {
	if x != nil {
		return x.TargetNickname
	}
	return ""
}

func (x *PlayerApplyEnterMpResultNotify) GetReason() PlayerApplyEnterMpResultNotify_Reason {
	if x != nil {
		return x.Reason
	}
	return PlayerApplyEnterMpResultNotify_PLAYER_JUDGE
}

func (x *PlayerApplyEnterMpResultNotify) GetTargetUid() uint32 {
	if x != nil {
		return x.TargetUid
	}
	return 0
}

type PlayerApplyEnterMpResultReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplyUid uint32 `protobuf:"varint,2,opt,name=apply_uid,json=applyUid,proto3" json:"apply_uid,omitempty"`
	IsAgreed bool   `protobuf:"varint,12,opt,name=is_agreed,json=isAgreed,proto3" json:"is_agreed,omitempty"`
}

func (x *PlayerApplyEnterMpResultReq) Reset() {
	*x = PlayerApplyEnterMpResultReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerApplyEnterMpResultReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerApplyEnterMpResultReq) ProtoMessage() {}

func (x *PlayerApplyEnterMpResultReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerApplyEnterMpResultReq.ProtoReflect.Descriptor instead.
func (*PlayerApplyEnterMpResultReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{4}
}

func (x *PlayerApplyEnterMpResultReq) GetApplyUid() uint32 {
	if x != nil {
		return x.ApplyUid
	}
	return 0
}

func (x *PlayerApplyEnterMpResultReq) GetIsAgreed() bool {
	if x != nil {
		return x.IsAgreed
	}
	return false
}

type PlayerApplyEnterMpResultRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode  int32  `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	IsAgreed bool   `protobuf:"varint,3,opt,name=is_agreed,json=isAgreed,proto3" json:"is_agreed,omitempty"`
	ApplyUid uint32 `protobuf:"varint,10,opt,name=apply_uid,json=applyUid,proto3" json:"apply_uid,omitempty"`
	Param    uint32 `protobuf:"varint,12,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *PlayerApplyEnterMpResultRsp) Reset() {
	*x = PlayerApplyEnterMpResultRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerApplyEnterMpResultRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerApplyEnterMpResultRsp) ProtoMessage() {}

func (x *PlayerApplyEnterMpResultRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerApplyEnterMpResultRsp.ProtoReflect.Descriptor instead.
func (*PlayerApplyEnterMpResultRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{5}
}

func (x *PlayerApplyEnterMpResultRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *PlayerApplyEnterMpResultRsp) GetIsAgreed() bool {
	if x != nil {
		return x.IsAgreed
	}
	return false
}

func (x *PlayerApplyEnterMpResultRsp) GetApplyUid() uint32 {
	if x != nil {
		return x.ApplyUid
	}
	return 0
}

func (x *PlayerApplyEnterMpResultRsp) GetParam() uint32 {
	if x != nil {
		return x.Param
	}
	return 0
}

type PlayerQuitFromMpNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason PlayerQuitFromMpNotify_QuitReason `protobuf:"varint,11,opt,name=reason,proto3,enum=proto.PlayerQuitFromMpNotify_QuitReason" json:"reason,omitempty"`
}

func (x *PlayerQuitFromMpNotify) Reset() {
	*x = PlayerQuitFromMpNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQuitFromMpNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQuitFromMpNotify) ProtoMessage() {}

func (x *PlayerQuitFromMpNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQuitFromMpNotify.ProtoReflect.Descriptor instead.
func (*PlayerQuitFromMpNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{6}
}

func (x *PlayerQuitFromMpNotify) GetReason() PlayerQuitFromMpNotify_QuitReason {
	if x != nil {
		return x.Reason
	}
	return PlayerQuitFromMpNotify_INVALID
}

type PlayerPreEnterMpNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    PlayerPreEnterMpNotify_State `protobuf:"varint,2,opt,name=state,proto3,enum=proto.PlayerPreEnterMpNotify_State" json:"state,omitempty"`
	Uid      uint32                       `protobuf:"varint,14,opt,name=uid,proto3" json:"uid,omitempty"`
	Nickname string                       `protobuf:"bytes,6,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (x *PlayerPreEnterMpNotify) Reset() {
	*x = PlayerPreEnterMpNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerPreEnterMpNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerPreEnterMpNotify) ProtoMessage() {}

func (x *PlayerPreEnterMpNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerPreEnterMpNotify.ProtoReflect.Descriptor instead.
func (*PlayerPreEnterMpNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{7}
}

func (x *PlayerPreEnterMpNotify) GetState() PlayerPreEnterMpNotify_State {
	if x != nil {
		return x.State
	}
	return PlayerPreEnterMpNotify_INVALID
}

func (x *PlayerPreEnterMpNotify) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlayerPreEnterMpNotify) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type GetPlayerMpModeAvailabilityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPlayerMpModeAvailabilityReq) Reset() {
	*x = GetPlayerMpModeAvailabilityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerMpModeAvailabilityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerMpModeAvailabilityReq) ProtoMessage() {}

func (x *GetPlayerMpModeAvailabilityReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerMpModeAvailabilityReq.ProtoReflect.Descriptor instead.
func (*GetPlayerMpModeAvailabilityReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{8}
}

type GetPlayerMpModeAvailabilityRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MpRet     int32    `protobuf:"varint,15,opt,name=mp_ret,json=mpRet,proto3" json:"mp_ret,omitempty"`
	Retcode   int32    `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ParamList []uint32 `protobuf:"varint,8,rep,packed,name=param_list,json=paramList,proto3" json:"param_list,omitempty"`
}

func (x *GetPlayerMpModeAvailabilityRsp) Reset() {
	*x = GetPlayerMpModeAvailabilityRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerMpModeAvailabilityRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerMpModeAvailabilityRsp) ProtoMessage() {}

func (x *GetPlayerMpModeAvailabilityRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerMpModeAvailabilityRsp.ProtoReflect.Descriptor instead.
func (*GetPlayerMpModeAvailabilityRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{9}
}

func (x *GetPlayerMpModeAvailabilityRsp) GetMpRet() int32 {
	if x != nil {
		return x.MpRet
	}
	return 0
}

func (x *GetPlayerMpModeAvailabilityRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GetPlayerMpModeAvailabilityRsp) GetParamList() []uint32 {
	if x != nil {
		return x.ParamList
	}
	return nil
}

type PlayerSetOnlyMPWithPSPlayerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOnly bool `protobuf:"varint,13,opt,name=is_only,json=isOnly,proto3" json:"is_only,omitempty"`
}

func (x *PlayerSetOnlyMPWithPSPlayerReq) Reset() {
	*x = PlayerSetOnlyMPWithPSPlayerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetOnlyMPWithPSPlayerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetOnlyMPWithPSPlayerReq) ProtoMessage() {}

func (x *PlayerSetOnlyMPWithPSPlayerReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetOnlyMPWithPSPlayerReq.ProtoReflect.Descriptor instead.
func (*PlayerSetOnlyMPWithPSPlayerReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{10}
}

func (x *PlayerSetOnlyMPWithPSPlayerReq) GetIsOnly() bool {
	if x != nil {
		return x.IsOnly
	}
	return false
}

type PlayerSetOnlyMPWithPSPlayerRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
	IsOnly  bool  `protobuf:"varint,8,opt,name=is_only,json=isOnly,proto3" json:"is_only,omitempty"`
}

func (x *PlayerSetOnlyMPWithPSPlayerRsp) Reset() {
	*x = PlayerSetOnlyMPWithPSPlayerRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetOnlyMPWithPSPlayerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetOnlyMPWithPSPlayerRsp) ProtoMessage() {}

func (x *PlayerSetOnlyMPWithPSPlayerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetOnlyMPWithPSPlayerRsp.ProtoReflect.Descriptor instead.
func (*PlayerSetOnlyMPWithPSPlayerRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{11}
}

func (x *PlayerSetOnlyMPWithPSPlayerRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *PlayerSetOnlyMPWithPSPlayerRsp) GetIsOnly() bool {
	if x != nil {
		return x.IsOnly
	}
	return false
}

type PSPlayerApplyEnterMpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPsnId string `protobuf:"bytes,5,opt,name=target_psn_id,json=targetPsnId,proto3" json:"target_psn_id,omitempty"`
}

func (x *PSPlayerApplyEnterMpReq) Reset() {
	*x = PSPlayerApplyEnterMpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PSPlayerApplyEnterMpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PSPlayerApplyEnterMpReq) ProtoMessage() {}

func (x *PSPlayerApplyEnterMpReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PSPlayerApplyEnterMpReq.ProtoReflect.Descriptor instead.
func (*PSPlayerApplyEnterMpReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{12}
}

func (x *PSPlayerApplyEnterMpReq) GetTargetPsnId() string {
	if x != nil {
		return x.TargetPsnId
	}
	return ""
}

type PSPlayerApplyEnterMpRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPsnId string `protobuf:"bytes,2,opt,name=target_psn_id,json=targetPsnId,proto3" json:"target_psn_id,omitempty"`
	Retcode     int32  `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
	Param       uint32 `protobuf:"varint,10,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *PSPlayerApplyEnterMpRsp) Reset() {
	*x = PSPlayerApplyEnterMpRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PSPlayerApplyEnterMpRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PSPlayerApplyEnterMpRsp) ProtoMessage() {}

func (x *PSPlayerApplyEnterMpRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PSPlayerApplyEnterMpRsp.ProtoReflect.Descriptor instead.
func (*PSPlayerApplyEnterMpRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{13}
}

func (x *PSPlayerApplyEnterMpRsp) GetTargetPsnId() string {
	if x != nil {
		return x.TargetPsnId
	}
	return ""
}

func (x *PSPlayerApplyEnterMpRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *PSPlayerApplyEnterMpRsp) GetParam() uint32 {
	if x != nil {
		return x.Param
	}
	return 0
}

type MpPlayOwnerCheckReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MpPlayId    uint32 `protobuf:"varint,9,opt,name=mp_play_id,json=mpPlayId,proto3" json:"mp_play_id,omitempty"`
	IsSkipMatch bool   `protobuf:"varint,3,opt,name=is_skip_match,json=isSkipMatch,proto3" json:"is_skip_match,omitempty"`
}

func (x *MpPlayOwnerCheckReq) Reset() {
	*x = MpPlayOwnerCheckReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MpPlayOwnerCheckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MpPlayOwnerCheckReq) ProtoMessage() {}

func (x *MpPlayOwnerCheckReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MpPlayOwnerCheckReq.ProtoReflect.Descriptor instead.
func (*MpPlayOwnerCheckReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{14}
}

func (x *MpPlayOwnerCheckReq) GetMpPlayId() uint32 {
	if x != nil {
		return x.MpPlayId
	}
	return 0
}

func (x *MpPlayOwnerCheckReq) GetIsSkipMatch() bool {
	if x != nil {
		return x.IsSkipMatch
	}
	return false
}

type MpPlayOwnerCheckRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WrongUid    uint32 `protobuf:"varint,4,opt,name=wrong_uid,json=wrongUid,proto3" json:"wrong_uid,omitempty"`
	IsSkipMatch bool   `protobuf:"varint,15,opt,name=is_skip_match,json=isSkipMatch,proto3" json:"is_skip_match,omitempty"`
	MpPlayId    uint32 `protobuf:"varint,10,opt,name=mp_play_id,json=mpPlayId,proto3" json:"mp_play_id,omitempty"`
	Retcode     int32  `protobuf:"varint,12,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *MpPlayOwnerCheckRsp) Reset() {
	*x = MpPlayOwnerCheckRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MpPlayOwnerCheckRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MpPlayOwnerCheckRsp) ProtoMessage() {}

func (x *MpPlayOwnerCheckRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MpPlayOwnerCheckRsp.ProtoReflect.Descriptor instead.
func (*MpPlayOwnerCheckRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{15}
}

func (x *MpPlayOwnerCheckRsp) GetWrongUid() uint32 {
	if x != nil {
		return x.WrongUid
	}
	return 0
}

func (x *MpPlayOwnerCheckRsp) GetIsSkipMatch() bool {
	if x != nil {
		return x.IsSkipMatch
	}
	return false
}

func (x *MpPlayOwnerCheckRsp) GetMpPlayId() uint32 {
	if x != nil {
		return x.MpPlayId
	}
	return 0
}

func (x *MpPlayOwnerCheckRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type MpPlayOwnerStartInviteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MpPlayId    uint32 `protobuf:"varint,3,opt,name=mp_play_id,json=mpPlayId,proto3" json:"mp_play_id,omitempty"`
	IsSkipMatch bool   `protobuf:"varint,6,opt,name=is_skip_match,json=isSkipMatch,proto3" json:"is_skip_match,omitempty"`
}

func (x *MpPlayOwnerStartInviteReq) Reset() {
	*x = MpPlayOwnerStartInviteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MpPlayOwnerStartInviteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MpPlayOwnerStartInviteReq) ProtoMessage() {}

func (x *MpPlayOwnerStartInviteReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MpPlayOwnerStartInviteReq.ProtoReflect.Descriptor instead.
func (*MpPlayOwnerStartInviteReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{16}
}

func (x *MpPlayOwnerStartInviteReq) GetMpPlayId() uint32 {
	if x != nil {
		return x.MpPlayId
	}
	return 0
}

func (x *MpPlayOwnerStartInviteReq) GetIsSkipMatch() bool {
	if x != nil {
		return x.IsSkipMatch
	}
	return false
}

type MpPlayOwnerStartInviteRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode     int32  `protobuf:"varint,14,opt,name=retcode,proto3" json:"retcode,omitempty"`
	MpPlayId    uint32 `protobuf:"varint,3,opt,name=mp_play_id,json=mpPlayId,proto3" json:"mp_play_id,omitempty"`
	IsSkipMatch bool   `protobuf:"varint,9,opt,name=is_skip_match,json=isSkipMatch,proto3" json:"is_skip_match,omitempty"`
}

func (x *MpPlayOwnerStartInviteRsp) Reset() {
	*x = MpPlayOwnerStartInviteRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MpPlayOwnerStartInviteRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MpPlayOwnerStartInviteRsp) ProtoMessage() {}

func (x *MpPlayOwnerStartInviteRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MpPlayOwnerStartInviteRsp.ProtoReflect.Descriptor instead.
func (*MpPlayOwnerStartInviteRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{17}
}

func (x *MpPlayOwnerStartInviteRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *MpPlayOwnerStartInviteRsp) GetMpPlayId() uint32 {
	if x != nil {
		return x.MpPlayId
	}
	return 0
}

func (x *MpPlayOwnerStartInviteRsp) GetIsSkipMatch() bool {
	if x != nil {
		return x.IsSkipMatch
	}
	return false
}

type MpPlayOwnerInviteNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cd             uint32 `protobuf:"varint,12,opt,name=cd,proto3" json:"cd,omitempty"`
	MpPlayId       uint32 `protobuf:"varint,13,opt,name=mp_play_id,json=mpPlayId,proto3" json:"mp_play_id,omitempty"`
	IsRemainReward bool   `protobuf:"varint,10,opt,name=is_remain_reward,json=isRemainReward,proto3" json:"is_remain_reward,omitempty"`
}

func (x *MpPlayOwnerInviteNotify) Reset() {
	*x = MpPlayOwnerInviteNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MpPlayOwnerInviteNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MpPlayOwnerInviteNotify) ProtoMessage() {}

func (x *MpPlayOwnerInviteNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MpPlayOwnerInviteNotify.ProtoReflect.Descriptor instead.
func (*MpPlayOwnerInviteNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{18}
}

func (x *MpPlayOwnerInviteNotify) GetCd() uint32 {
	if x != nil {
		return x.Cd
	}
	return 0
}

func (x *MpPlayOwnerInviteNotify) GetMpPlayId() uint32 {
	if x != nil {
		return x.MpPlayId
	}
	return 0
}

func (x *MpPlayOwnerInviteNotify) GetIsRemainReward() bool {
	if x != nil {
		return x.IsRemainReward
	}
	return false
}

type MpPlayGuestReplyInviteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MpPlayId uint32 `protobuf:"varint,3,opt,name=mp_play_id,json=mpPlayId,proto3" json:"mp_play_id,omitempty"`
	IsAgree  bool   `protobuf:"varint,15,opt,name=is_agree,json=isAgree,proto3" json:"is_agree,omitempty"`
}

func (x *MpPlayGuestReplyInviteReq) Reset() {
	*x = MpPlayGuestReplyInviteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MpPlayGuestReplyInviteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MpPlayGuestReplyInviteReq) ProtoMessage() {}

func (x *MpPlayGuestReplyInviteReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MpPlayGuestReplyInviteReq.ProtoReflect.Descriptor instead.
func (*MpPlayGuestReplyInviteReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{19}
}

func (x *MpPlayGuestReplyInviteReq) GetMpPlayId() uint32 {
	if x != nil {
		return x.MpPlayId
	}
	return 0
}

func (x *MpPlayGuestReplyInviteReq) GetIsAgree() bool {
	if x != nil {
		return x.IsAgree
	}
	return false
}

type MpPlayGuestReplyInviteRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode  int32  `protobuf:"varint,4,opt,name=retcode,proto3" json:"retcode,omitempty"`
	MpPlayId uint32 `protobuf:"varint,10,opt,name=mp_play_id,json=mpPlayId,proto3" json:"mp_play_id,omitempty"`
}

func (x *MpPlayGuestReplyInviteRsp) Reset() {
	*x = MpPlayGuestReplyInviteRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MpPlayGuestReplyInviteRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MpPlayGuestReplyInviteRsp) ProtoMessage() {}

func (x *MpPlayGuestReplyInviteRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MpPlayGuestReplyInviteRsp.ProtoReflect.Descriptor instead.
func (*MpPlayGuestReplyInviteRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{20}
}

func (x *MpPlayGuestReplyInviteRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *MpPlayGuestReplyInviteRsp) GetMpPlayId() uint32 {
	if x != nil {
		return x.MpPlayId
	}
	return 0
}

type MpPlayGuestReplyNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      uint32 `protobuf:"varint,7,opt,name=uid,proto3" json:"uid,omitempty"`
	IsAgree  bool   `protobuf:"varint,4,opt,name=is_agree,json=isAgree,proto3" json:"is_agree,omitempty"`
	MpPlayId uint32 `protobuf:"varint,14,opt,name=mp_play_id,json=mpPlayId,proto3" json:"mp_play_id,omitempty"`
}

func (x *MpPlayGuestReplyNotify) Reset() {
	*x = MpPlayGuestReplyNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MpPlayGuestReplyNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MpPlayGuestReplyNotify) ProtoMessage() {}

func (x *MpPlayGuestReplyNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MpPlayGuestReplyNotify.ProtoReflect.Descriptor instead.
func (*MpPlayGuestReplyNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{21}
}

func (x *MpPlayGuestReplyNotify) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MpPlayGuestReplyNotify) GetIsAgree() bool {
	if x != nil {
		return x.IsAgree
	}
	return false
}

func (x *MpPlayGuestReplyNotify) GetMpPlayId() uint32 {
	if x != nil {
		return x.MpPlayId
	}
	return 0
}

type MpPlayPrepareNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MpPlayId       uint32 `protobuf:"varint,9,opt,name=mp_play_id,json=mpPlayId,proto3" json:"mp_play_id,omitempty"`
	PrepareEndTime uint32 `protobuf:"varint,11,opt,name=prepare_end_time,json=prepareEndTime,proto3" json:"prepare_end_time,omitempty"`
}

func (x *MpPlayPrepareNotify) Reset() {
	*x = MpPlayPrepareNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MpPlayPrepareNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MpPlayPrepareNotify) ProtoMessage() {}

func (x *MpPlayPrepareNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MpPlayPrepareNotify.ProtoReflect.Descriptor instead.
func (*MpPlayPrepareNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{22}
}

func (x *MpPlayPrepareNotify) GetMpPlayId() uint32 {
	if x != nil {
		return x.MpPlayId
	}
	return 0
}

func (x *MpPlayPrepareNotify) GetPrepareEndTime() uint32 {
	if x != nil {
		return x.PrepareEndTime
	}
	return 0
}

type MpPlayInviteResultNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MpPlayId uint32 `protobuf:"varint,11,opt,name=mp_play_id,json=mpPlayId,proto3" json:"mp_play_id,omitempty"`
	AllArgee bool   `protobuf:"varint,10,opt,name=all_argee,json=allArgee,proto3" json:"all_argee,omitempty"`
}

func (x *MpPlayInviteResultNotify) Reset() {
	*x = MpPlayInviteResultNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MpPlayInviteResultNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MpPlayInviteResultNotify) ProtoMessage() {}

func (x *MpPlayInviteResultNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MpPlayInviteResultNotify.ProtoReflect.Descriptor instead.
func (*MpPlayInviteResultNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{23}
}

func (x *MpPlayInviteResultNotify) GetMpPlayId() uint32 {
	if x != nil {
		return x.MpPlayId
	}
	return 0
}

func (x *MpPlayInviteResultNotify) GetAllArgee() bool {
	if x != nil {
		return x.AllArgee
	}
	return false
}

type MpPlayPrepareInterruptNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MpPlayId uint32 `protobuf:"varint,12,opt,name=mp_play_id,json=mpPlayId,proto3" json:"mp_play_id,omitempty"`
}

func (x *MpPlayPrepareInterruptNotify) Reset() {
	*x = MpPlayPrepareInterruptNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MpPlayPrepareInterruptNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MpPlayPrepareInterruptNotify) ProtoMessage() {}

func (x *MpPlayPrepareInterruptNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MpPlayPrepareInterruptNotify.ProtoReflect.Descriptor instead.
func (*MpPlayPrepareInterruptNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{24}
}

func (x *MpPlayPrepareInterruptNotify) GetMpPlayId() uint32 {
	if x != nil {
		return x.MpPlayId
	}
	return 0
}

type MpBlockNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTime uint32 `protobuf:"varint,13,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *MpBlockNotify) Reset() {
	*x = MpBlockNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_mp_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MpBlockNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MpBlockNotify) ProtoMessage() {}

func (x *MpBlockNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_mp_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MpBlockNotify.ProtoReflect.Descriptor instead.
func (*MpBlockNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_mp_proto_rawDescGZIP(), []int{25}
}

func (x *MpBlockNotify) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

var File_cmd_cmd_mp_proto protoreflect.FileDescriptor

var file_cmd_cmd_mp_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x6d, 0x64, 0x5f, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x01, 0x0a, 0x18, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x70, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x73, 0x72, 0x63, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c,
	0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x73, 0x72, 0x63, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0f,
	0x73, 0x72, 0x63, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d,
	0x73, 0x72, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4d, 0x0a,
	0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xa2, 0x0e, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45,
	0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x9a, 0x01, 0x0a,
	0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x4d, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x55, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x10, 0x9a, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xb5, 0x01, 0x0a, 0x15, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x70,
	0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10,
	0xa1, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f,
	0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10,
	0x01, 0x22, 0x8d, 0x05, 0x0a, 0x1e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x67, 0x72, 0x65, 0x65,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x4d, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69, 0x64, 0x22,
	0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x8f, 0x0e, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xf0,
	0x02, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x4a, 0x55, 0x44, 0x47, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x43, 0x41,
	0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x50, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4a, 0x55, 0x44, 0x47, 0x45, 0x10,
	0x03, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x04, 0x12, 0x1f,
	0x0a, 0x1b, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x4f,
	0x57, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x05, 0x12,
	0x11, 0x0a, 0x0d, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f,
	0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x50,
	0x53, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x50, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x53, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f,
	0x48, 0x4f, 0x53, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10,
	0x09, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45,
	0x53, 0x54, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x10,
	0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x49, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x10,
	0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10,
	0x0d, 0x22, 0xbb, 0x01, 0x0a, 0x1b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x67, 0x72, 0x65, 0x65, 0x64, 0x22, 0x62, 0x0a, 0x05, 0x43,
	0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x8a, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22,
	0xd6, 0x01, 0x0a, 0x1b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x4d, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x41, 0x67, 0x72, 0x65, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64,
	0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06,
	0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xa7, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xbe, 0x03, 0x0a, 0x16, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x51, 0x75, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x70, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x51, 0x75, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x70, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2e, 0x51, 0x75, 0x69, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x10, 0xa5, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x1a, 0x02, 0x10, 0x01, 0x22, 0x92, 0x02, 0x0a, 0x0a, 0x51, 0x75, 0x69, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x49,
	0x43, 0x4b, 0x5f, 0x42, 0x59, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x42, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x59, 0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44,
	0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x42, 0x59, 0x5f, 0x48, 0x4f,
	0x53, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x4b,
	0x49, 0x43, 0x4b, 0x5f, 0x42, 0x59, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45,
	0x44, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x42, 0x59, 0x5f, 0x48,
	0x4f, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x07,
	0x12, 0x16, 0x0a, 0x12, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x49, 0x43, 0x4b,
	0x5f, 0x42, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x09, 0x12, 0x2d, 0x0a, 0x29, 0x4b, 0x49,
	0x43, 0x4b, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x53, 0x4c, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x59, 0x5f, 0x47, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0a, 0x22, 0xfe, 0x01, 0x0a, 0x16, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x70, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x50, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x70, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4d, 0x0a,
	0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x9e, 0x0e, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45,
	0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x2c, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x22, 0x84, 0x01, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x22, 0x62, 0x0a,
	0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xb4, 0x0e, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45,
	0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10,
	0x01, 0x22, 0xbf, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d,
	0x70, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x73, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x70, 0x52, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49,
	0x44, 0x10, 0xb9, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45,
	0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a,
	0x02, 0x10, 0x01, 0x22, 0x9d, 0x01, 0x0a, 0x1e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x4d, 0x50, 0x57, 0x69, 0x74, 0x68, 0x50, 0x53, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22,
	0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x9c, 0x0e, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53,
	0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a,
	0x02, 0x10, 0x01, 0x22, 0xa2, 0x01, 0x0a, 0x1e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x4d, 0x50, 0x57, 0x69, 0x74, 0x68, 0x50, 0x53, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64,
	0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06,
	0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xb5, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xa1, 0x01, 0x0a, 0x17, 0x50, 0x53, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d,
	0x70, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70,
	0x73, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x73, 0x6e, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49,
	0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43,
	0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xb1, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xbc, 0x01, 0x0a,
	0x17, 0x50, 0x53, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x4d, 0x70, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x73, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x73, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x4d, 0x0a, 0x05,
	0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xb2, 0x0e, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c,
	0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xbb, 0x01, 0x0a, 0x13,
	0x4d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x6b, 0x69, 0x70,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x10, 0x96, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xdd, 0x01, 0x0a, 0x13, 0x4d, 0x70,
	0x50, 0x6c, 0x61, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x73,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x55, 0x69, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d,
	0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xb7, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xc1, 0x01, 0x0a, 0x19, 0x4d, 0x70,
	0x50, 0x6c, 0x61, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x70, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x70, 0x50,
	0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x53, 0x6b, 0x69, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64,
	0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06,
	0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xad, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xc6, 0x01,
	0x0a, 0x19, 0x4d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x70, 0x50, 0x6c, 0x61,
	0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x6b,
	0x69, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d,
	0x44, 0x5f, 0x49, 0x44, 0x10, 0x9f, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xc0, 0x01, 0x0a, 0x17, 0x4d, 0x70, 0x50, 0x6c, 0x61,
	0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x63, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d,
	0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xab, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xb8, 0x01, 0x0a, 0x19, 0x4d, 0x70,
	0x50, 0x6c, 0x61, 0x79, 0x47, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x70, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x70, 0x50,
	0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x72, 0x65,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x67, 0x72, 0x65, 0x65,
	0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xb8, 0x0e,
	0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53,
	0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49,
	0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01,
	0x1a, 0x02, 0x10, 0x01, 0x22, 0xa2, 0x01, 0x0a, 0x19, 0x4d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x47,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x0a,
	0x6d, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d,
	0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xba, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xb2, 0x01, 0x0a, 0x16, 0x4d, 0x70,
	0x50, 0x6c, 0x61, 0x79, 0x47, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x72,
	0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x67, 0x72, 0x65,
	0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x22,
	0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x94, 0x0e, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xac,
	0x01, 0x0a, 0x13, 0x4d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x70, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x70, 0x50, 0x6c,
	0x61, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4d,
	0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xa9, 0x0e, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52,
	0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xa4, 0x01,
	0x0a, 0x18, 0x4d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x70,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x5f,
	0x61, 0x72, 0x67, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x6c, 0x6c,
	0x41, 0x72, 0x67, 0x65, 0x65, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x10, 0x97, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x1a, 0x02, 0x10, 0x01, 0x22, 0x8b, 0x01, 0x0a, 0x1c, 0x4d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x70, 0x50, 0x6c, 0x61,
	0x79, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44,
	0x10, 0x95, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02,
	0x10, 0x01, 0x22, 0x79, 0x0a, 0x0d, 0x4d, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4d,
	0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x89, 0x0e, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52,
	0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x42, 0x28, 0x5a,
	0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x79, 0x76,
	0x61, 0x74, 0x2d, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2f, 0x68, 0x6b, 0x34, 0x65, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cmd_cmd_mp_proto_rawDescOnce sync.Once
	file_cmd_cmd_mp_proto_rawDescData = file_cmd_cmd_mp_proto_rawDesc
)

func file_cmd_cmd_mp_proto_rawDescGZIP() []byte {
	file_cmd_cmd_mp_proto_rawDescOnce.Do(func() {
		file_cmd_cmd_mp_proto_rawDescData = protoimpl.X.CompressGZIP(file_cmd_cmd_mp_proto_rawDescData)
	})
	return file_cmd_cmd_mp_proto_rawDescData
}

var file_cmd_cmd_mp_proto_enumTypes = make([]protoimpl.EnumInfo, 29)
var file_cmd_cmd_mp_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_cmd_cmd_mp_proto_goTypes = []interface{}{
	(PlayerApplyEnterMpNotify_CmdId)(0),        // 0: proto.PlayerApplyEnterMpNotify.CmdId
	(PlayerApplyEnterMpReq_CmdId)(0),           // 1: proto.PlayerApplyEnterMpReq.CmdId
	(PlayerApplyEnterMpRsp_CmdId)(0),           // 2: proto.PlayerApplyEnterMpRsp.CmdId
	(PlayerApplyEnterMpResultNotify_CmdId)(0),  // 3: proto.PlayerApplyEnterMpResultNotify.CmdId
	(PlayerApplyEnterMpResultNotify_Reason)(0), // 4: proto.PlayerApplyEnterMpResultNotify.Reason
	(PlayerApplyEnterMpResultReq_CmdId)(0),     // 5: proto.PlayerApplyEnterMpResultReq.CmdId
	(PlayerApplyEnterMpResultRsp_CmdId)(0),     // 6: proto.PlayerApplyEnterMpResultRsp.CmdId
	(PlayerQuitFromMpNotify_CmdId)(0),          // 7: proto.PlayerQuitFromMpNotify.CmdId
	(PlayerQuitFromMpNotify_QuitReason)(0),     // 8: proto.PlayerQuitFromMpNotify.QuitReason
	(PlayerPreEnterMpNotify_CmdId)(0),          // 9: proto.PlayerPreEnterMpNotify.CmdId
	(PlayerPreEnterMpNotify_State)(0),          // 10: proto.PlayerPreEnterMpNotify.State
	(GetPlayerMpModeAvailabilityReq_CmdId)(0),  // 11: proto.GetPlayerMpModeAvailabilityReq.CmdId
	(GetPlayerMpModeAvailabilityRsp_CmdId)(0),  // 12: proto.GetPlayerMpModeAvailabilityRsp.CmdId
	(PlayerSetOnlyMPWithPSPlayerReq_CmdId)(0),  // 13: proto.PlayerSetOnlyMPWithPSPlayerReq.CmdId
	(PlayerSetOnlyMPWithPSPlayerRsp_CmdId)(0),  // 14: proto.PlayerSetOnlyMPWithPSPlayerRsp.CmdId
	(PSPlayerApplyEnterMpReq_CmdId)(0),         // 15: proto.PSPlayerApplyEnterMpReq.CmdId
	(PSPlayerApplyEnterMpRsp_CmdId)(0),         // 16: proto.PSPlayerApplyEnterMpRsp.CmdId
	(MpPlayOwnerCheckReq_CmdId)(0),             // 17: proto.MpPlayOwnerCheckReq.CmdId
	(MpPlayOwnerCheckRsp_CmdId)(0),             // 18: proto.MpPlayOwnerCheckRsp.CmdId
	(MpPlayOwnerStartInviteReq_CmdId)(0),       // 19: proto.MpPlayOwnerStartInviteReq.CmdId
	(MpPlayOwnerStartInviteRsp_CmdId)(0),       // 20: proto.MpPlayOwnerStartInviteRsp.CmdId
	(MpPlayOwnerInviteNotify_CmdId)(0),         // 21: proto.MpPlayOwnerInviteNotify.CmdId
	(MpPlayGuestReplyInviteReq_CmdId)(0),       // 22: proto.MpPlayGuestReplyInviteReq.CmdId
	(MpPlayGuestReplyInviteRsp_CmdId)(0),       // 23: proto.MpPlayGuestReplyInviteRsp.CmdId
	(MpPlayGuestReplyNotify_CmdId)(0),          // 24: proto.MpPlayGuestReplyNotify.CmdId
	(MpPlayPrepareNotify_CmdId)(0),             // 25: proto.MpPlayPrepareNotify.CmdId
	(MpPlayInviteResultNotify_CmdId)(0),        // 26: proto.MpPlayInviteResultNotify.CmdId
	(MpPlayPrepareInterruptNotify_CmdId)(0),    // 27: proto.MpPlayPrepareInterruptNotify.CmdId
	(MpBlockNotify_CmdId)(0),                   // 28: proto.MpBlockNotify.CmdId
	(*PlayerApplyEnterMpNotify)(nil),           // 29: proto.PlayerApplyEnterMpNotify
	(*PlayerApplyEnterMpReq)(nil),              // 30: proto.PlayerApplyEnterMpReq
	(*PlayerApplyEnterMpRsp)(nil),              // 31: proto.PlayerApplyEnterMpRsp
	(*PlayerApplyEnterMpResultNotify)(nil),     // 32: proto.PlayerApplyEnterMpResultNotify
	(*PlayerApplyEnterMpResultReq)(nil),        // 33: proto.PlayerApplyEnterMpResultReq
	(*PlayerApplyEnterMpResultRsp)(nil),        // 34: proto.PlayerApplyEnterMpResultRsp
	(*PlayerQuitFromMpNotify)(nil),             // 35: proto.PlayerQuitFromMpNotify
	(*PlayerPreEnterMpNotify)(nil),             // 36: proto.PlayerPreEnterMpNotify
	(*GetPlayerMpModeAvailabilityReq)(nil),     // 37: proto.GetPlayerMpModeAvailabilityReq
	(*GetPlayerMpModeAvailabilityRsp)(nil),     // 38: proto.GetPlayerMpModeAvailabilityRsp
	(*PlayerSetOnlyMPWithPSPlayerReq)(nil),     // 39: proto.PlayerSetOnlyMPWithPSPlayerReq
	(*PlayerSetOnlyMPWithPSPlayerRsp)(nil),     // 40: proto.PlayerSetOnlyMPWithPSPlayerRsp
	(*PSPlayerApplyEnterMpReq)(nil),            // 41: proto.PSPlayerApplyEnterMpReq
	(*PSPlayerApplyEnterMpRsp)(nil),            // 42: proto.PSPlayerApplyEnterMpRsp
	(*MpPlayOwnerCheckReq)(nil),                // 43: proto.MpPlayOwnerCheckReq
	(*MpPlayOwnerCheckRsp)(nil),                // 44: proto.MpPlayOwnerCheckRsp
	(*MpPlayOwnerStartInviteReq)(nil),          // 45: proto.MpPlayOwnerStartInviteReq
	(*MpPlayOwnerStartInviteRsp)(nil),          // 46: proto.MpPlayOwnerStartInviteRsp
	(*MpPlayOwnerInviteNotify)(nil),            // 47: proto.MpPlayOwnerInviteNotify
	(*MpPlayGuestReplyInviteReq)(nil),          // 48: proto.MpPlayGuestReplyInviteReq
	(*MpPlayGuestReplyInviteRsp)(nil),          // 49: proto.MpPlayGuestReplyInviteRsp
	(*MpPlayGuestReplyNotify)(nil),             // 50: proto.MpPlayGuestReplyNotify
	(*MpPlayPrepareNotify)(nil),                // 51: proto.MpPlayPrepareNotify
	(*MpPlayInviteResultNotify)(nil),           // 52: proto.MpPlayInviteResultNotify
	(*MpPlayPrepareInterruptNotify)(nil),       // 53: proto.MpPlayPrepareInterruptNotify
	(*MpBlockNotify)(nil),                      // 54: proto.MpBlockNotify
	(*OnlinePlayerInfo)(nil),                   // 55: proto.OnlinePlayerInfo
}
var file_cmd_cmd_mp_proto_depIdxs = []int32{
	55, // 0: proto.PlayerApplyEnterMpNotify.src_player_info:type_name -> proto.OnlinePlayerInfo
	4,  // 1: proto.PlayerApplyEnterMpResultNotify.reason:type_name -> proto.PlayerApplyEnterMpResultNotify.Reason
	8,  // 2: proto.PlayerQuitFromMpNotify.reason:type_name -> proto.PlayerQuitFromMpNotify.QuitReason
	10, // 3: proto.PlayerPreEnterMpNotify.state:type_name -> proto.PlayerPreEnterMpNotify.State
	4,  // [4:4] is the sub-list for method output_type
	4,  // [4:4] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_cmd_cmd_mp_proto_init() }
func file_cmd_cmd_mp_proto_init() {
	if File_cmd_cmd_mp_proto != nil {
		return
	}
	file_define_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cmd_cmd_mp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerApplyEnterMpNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerApplyEnterMpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerApplyEnterMpRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerApplyEnterMpResultNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerApplyEnterMpResultReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerApplyEnterMpResultRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQuitFromMpNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerPreEnterMpNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlayerMpModeAvailabilityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlayerMpModeAvailabilityRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetOnlyMPWithPSPlayerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetOnlyMPWithPSPlayerRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PSPlayerApplyEnterMpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PSPlayerApplyEnterMpRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MpPlayOwnerCheckReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MpPlayOwnerCheckRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MpPlayOwnerStartInviteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MpPlayOwnerStartInviteRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MpPlayOwnerInviteNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MpPlayGuestReplyInviteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MpPlayGuestReplyInviteRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MpPlayGuestReplyNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MpPlayPrepareNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MpPlayInviteResultNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MpPlayPrepareInterruptNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_mp_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MpBlockNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cmd_cmd_mp_proto_rawDesc,
			NumEnums:      29,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cmd_cmd_mp_proto_goTypes,
		DependencyIndexes: file_cmd_cmd_mp_proto_depIdxs,
		EnumInfos:         file_cmd_cmd_mp_proto_enumTypes,
		MessageInfos:      file_cmd_cmd_mp_proto_msgTypes,
	}.Build()
	File_cmd_cmd_mp_proto = out.File
	file_cmd_cmd_mp_proto_rawDesc = nil
	file_cmd_cmd_mp_proto_goTypes = nil
	file_cmd_cmd_mp_proto_depIdxs = nil
}
