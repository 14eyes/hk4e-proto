// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: cmd/cmd_gacha.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetGachaInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetGachaInfoReq) Reset() {
	*x = GetGachaInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gacha_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGachaInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGachaInfoReq) ProtoMessage() {}

func (x *GetGachaInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gacha_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGachaInfoReq.ProtoReflect.Descriptor instead.
func (*GetGachaInfoReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gacha_proto_rawDescGZIP(), []int{0}
}

type GachaUpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemParentType uint32   `protobuf:"varint,7,opt,name=item_parent_type,json=itemParentType,proto3" json:"item_parent_type,omitempty"`
	ItemIdList     []uint32 `protobuf:"varint,15,rep,packed,name=item_id_list,json=itemIdList,proto3" json:"item_id_list,omitempty"`
}

func (x *GachaUpInfo) Reset() {
	*x = GachaUpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gacha_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaUpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaUpInfo) ProtoMessage() {}

func (x *GachaUpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gacha_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaUpInfo.ProtoReflect.Descriptor instead.
func (*GachaUpInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gacha_proto_rawDescGZIP(), []int{1}
}

func (x *GachaUpInfo) GetItemParentType() uint32 {
	if x != nil {
		return x.ItemParentType
	}
	return 0
}

func (x *GachaUpInfo) GetItemIdList() []uint32 {
	if x != nil {
		return x.ItemIdList
	}
	return nil
}

type GachaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenCostItemId              uint32         `protobuf:"varint,2,opt,name=ten_cost_item_id,json=tenCostItemId,proto3" json:"ten_cost_item_id,omitempty"`
	EndTime                    uint32         `protobuf:"varint,14,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	DisplayUp4ItemList         []uint32       `protobuf:"varint,1875,rep,packed,name=display_up4_item_list,json=displayUp4ItemList,proto3" json:"display_up4_item_list,omitempty"`
	CurScheduleDailyGachaTimes uint32         `protobuf:"varint,469,opt,name=cur_schedule_daily_gacha_times,json=curScheduleDailyGachaTimes,proto3" json:"cur_schedule_daily_gacha_times,omitempty"`
	GachaUpInfoList            []*GachaUpInfo `protobuf:"bytes,1233,rep,name=gacha_up_info_list,json=gachaUpInfoList,proto3" json:"gacha_up_info_list,omitempty"`
	GachaProbUrl               string         `protobuf:"bytes,8,opt,name=gacha_prob_url,json=gachaProbUrl,proto3" json:"gacha_prob_url,omitempty"`
	GachaPrefabPath            string         `protobuf:"bytes,15,opt,name=gacha_prefab_path,json=gachaPrefabPath,proto3" json:"gacha_prefab_path,omitempty"`
	WishItemId                 uint32         `protobuf:"varint,1637,opt,name=wish_item_id,json=wishItemId,proto3" json:"wish_item_id,omitempty"`
	BeginTime                  uint32         `protobuf:"varint,1,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	WishMaxProgress            uint32         `protobuf:"varint,1222,opt,name=wish_max_progress,json=wishMaxProgress,proto3" json:"wish_max_progress,omitempty"`
	ScheduleId                 uint32         `protobuf:"varint,10,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	GachaProbUrlOversea        string         `protobuf:"bytes,1481,opt,name=gacha_prob_url_oversea,json=gachaProbUrlOversea,proto3" json:"gacha_prob_url_oversea,omitempty"`
	GachaType                  uint32         `protobuf:"varint,13,opt,name=gacha_type,json=gachaType,proto3" json:"gacha_type,omitempty"`
	LeftGachaTimes             uint32         `protobuf:"varint,5,opt,name=left_gacha_times,json=leftGachaTimes,proto3" json:"left_gacha_times,omitempty"`
	DisplayUp5ItemList         []uint32       `protobuf:"varint,2006,rep,packed,name=display_up5_item_list,json=displayUp5ItemList,proto3" json:"display_up5_item_list,omitempty"`
	GachaTimesLimit            uint32         `protobuf:"varint,11,opt,name=gacha_times_limit,json=gachaTimesLimit,proto3" json:"gacha_times_limit,omitempty"`
	CostItemNum                uint32         `protobuf:"varint,3,opt,name=cost_item_num,json=costItemNum,proto3" json:"cost_item_num,omitempty"`
	IsNewWish                  bool           `protobuf:"varint,733,opt,name=is_new_wish,json=isNewWish,proto3" json:"is_new_wish,omitempty"`
	CostItemId                 uint32         `protobuf:"varint,9,opt,name=cost_item_id,json=costItemId,proto3" json:"cost_item_id,omitempty"`
	TenCostItemNum             uint32         `protobuf:"varint,6,opt,name=ten_cost_item_num,json=tenCostItemNum,proto3" json:"ten_cost_item_num,omitempty"`
	GachaPreviewPrefabPath     string         `protobuf:"bytes,4,opt,name=gacha_preview_prefab_path,json=gachaPreviewPrefabPath,proto3" json:"gacha_preview_prefab_path,omitempty"`
	WishProgress               uint32         `protobuf:"varint,1819,opt,name=wish_progress,json=wishProgress,proto3" json:"wish_progress,omitempty"`
	TitleTextmap               string         `protobuf:"bytes,736,opt,name=title_textmap,json=titleTextmap,proto3" json:"title_textmap,omitempty"`
	GachaRecordUrlOversea      string         `protobuf:"bytes,1854,opt,name=gacha_record_url_oversea,json=gachaRecordUrlOversea,proto3" json:"gacha_record_url_oversea,omitempty"`
	GachaSortId                uint32         `protobuf:"varint,7,opt,name=gacha_sort_id,json=gachaSortId,proto3" json:"gacha_sort_id,omitempty"`
	GachaRecordUrl             string         `protobuf:"bytes,12,opt,name=gacha_record_url,json=gachaRecordUrl,proto3" json:"gacha_record_url,omitempty"`
}

func (x *GachaInfo) Reset() {
	*x = GachaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gacha_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaInfo) ProtoMessage() {}

func (x *GachaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gacha_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaInfo.ProtoReflect.Descriptor instead.
func (*GachaInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gacha_proto_rawDescGZIP(), []int{2}
}

func (x *GachaInfo) GetTenCostItemId() uint32 {
	if x != nil {
		return x.TenCostItemId
	}
	return 0
}

func (x *GachaInfo) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GachaInfo) GetDisplayUp4ItemList() []uint32 {
	if x != nil {
		return x.DisplayUp4ItemList
	}
	return nil
}

func (x *GachaInfo) GetCurScheduleDailyGachaTimes() uint32 {
	if x != nil {
		return x.CurScheduleDailyGachaTimes
	}
	return 0
}

func (x *GachaInfo) GetGachaUpInfoList() []*GachaUpInfo {
	if x != nil {
		return x.GachaUpInfoList
	}
	return nil
}

func (x *GachaInfo) GetGachaProbUrl() string {
	if x != nil {
		return x.GachaProbUrl
	}
	return ""
}

func (x *GachaInfo) GetGachaPrefabPath() string {
	if x != nil {
		return x.GachaPrefabPath
	}
	return ""
}

func (x *GachaInfo) GetWishItemId() uint32 {
	if x != nil {
		return x.WishItemId
	}
	return 0
}

func (x *GachaInfo) GetBeginTime() uint32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *GachaInfo) GetWishMaxProgress() uint32 {
	if x != nil {
		return x.WishMaxProgress
	}
	return 0
}

func (x *GachaInfo) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *GachaInfo) GetGachaProbUrlOversea() string {
	if x != nil {
		return x.GachaProbUrlOversea
	}
	return ""
}

func (x *GachaInfo) GetGachaType() uint32 {
	if x != nil {
		return x.GachaType
	}
	return 0
}

func (x *GachaInfo) GetLeftGachaTimes() uint32 {
	if x != nil {
		return x.LeftGachaTimes
	}
	return 0
}

func (x *GachaInfo) GetDisplayUp5ItemList() []uint32 {
	if x != nil {
		return x.DisplayUp5ItemList
	}
	return nil
}

func (x *GachaInfo) GetGachaTimesLimit() uint32 {
	if x != nil {
		return x.GachaTimesLimit
	}
	return 0
}

func (x *GachaInfo) GetCostItemNum() uint32 {
	if x != nil {
		return x.CostItemNum
	}
	return 0
}

func (x *GachaInfo) GetIsNewWish() bool {
	if x != nil {
		return x.IsNewWish
	}
	return false
}

func (x *GachaInfo) GetCostItemId() uint32 {
	if x != nil {
		return x.CostItemId
	}
	return 0
}

func (x *GachaInfo) GetTenCostItemNum() uint32 {
	if x != nil {
		return x.TenCostItemNum
	}
	return 0
}

func (x *GachaInfo) GetGachaPreviewPrefabPath() string {
	if x != nil {
		return x.GachaPreviewPrefabPath
	}
	return ""
}

func (x *GachaInfo) GetWishProgress() uint32 {
	if x != nil {
		return x.WishProgress
	}
	return 0
}

func (x *GachaInfo) GetTitleTextmap() string {
	if x != nil {
		return x.TitleTextmap
	}
	return ""
}

func (x *GachaInfo) GetGachaRecordUrlOversea() string {
	if x != nil {
		return x.GachaRecordUrlOversea
	}
	return ""
}

func (x *GachaInfo) GetGachaSortId() uint32 {
	if x != nil {
		return x.GachaSortId
	}
	return 0
}

func (x *GachaInfo) GetGachaRecordUrl() string {
	if x != nil {
		return x.GachaRecordUrl
	}
	return ""
}

type GetGachaInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsUnderGeneralRestrict bool         `protobuf:"varint,6,opt,name=is_under_general_restrict,json=isUnderGeneralRestrict,proto3" json:"is_under_general_restrict,omitempty"`
	GachaRandom            uint32       `protobuf:"varint,9,opt,name=gacha_random,json=gachaRandom,proto3" json:"gacha_random,omitempty"`
	Retcode                int32        `protobuf:"varint,10,opt,name=retcode,proto3" json:"retcode,omitempty"`
	IsUnderMinorsRestrict  bool         `protobuf:"varint,2,opt,name=is_under_minors_restrict,json=isUnderMinorsRestrict,proto3" json:"is_under_minors_restrict,omitempty"`
	DailyGachaTimes        uint32       `protobuf:"varint,5,opt,name=daily_gacha_times,json=dailyGachaTimes,proto3" json:"daily_gacha_times,omitempty"`
	GachaInfoList          []*GachaInfo `protobuf:"bytes,13,rep,name=gacha_info_list,json=gachaInfoList,proto3" json:"gacha_info_list,omitempty"`
}

func (x *GetGachaInfoRsp) Reset() {
	*x = GetGachaInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gacha_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGachaInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGachaInfoRsp) ProtoMessage() {}

func (x *GetGachaInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gacha_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGachaInfoRsp.ProtoReflect.Descriptor instead.
func (*GetGachaInfoRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gacha_proto_rawDescGZIP(), []int{3}
}

func (x *GetGachaInfoRsp) GetIsUnderGeneralRestrict() bool {
	if x != nil {
		return x.IsUnderGeneralRestrict
	}
	return false
}

func (x *GetGachaInfoRsp) GetGachaRandom() uint32 {
	if x != nil {
		return x.GachaRandom
	}
	return 0
}

func (x *GetGachaInfoRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GetGachaInfoRsp) GetIsUnderMinorsRestrict() bool {
	if x != nil {
		return x.IsUnderMinorsRestrict
	}
	return false
}

func (x *GetGachaInfoRsp) GetDailyGachaTimes() uint32 {
	if x != nil {
		return x.DailyGachaTimes
	}
	return 0
}

func (x *GetGachaInfoRsp) GetGachaInfoList() []*GachaInfo {
	if x != nil {
		return x.GachaInfoList
	}
	return nil
}

type DoGachaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GachaTimes      uint32 `protobuf:"varint,10,opt,name=gacha_times,json=gachaTimes,proto3" json:"gacha_times,omitempty"`
	GachaScheduleId uint32 `protobuf:"varint,7,opt,name=gacha_schedule_id,json=gachaScheduleId,proto3" json:"gacha_schedule_id,omitempty"`
	GachaType       uint32 `protobuf:"varint,14,opt,name=gacha_type,json=gachaType,proto3" json:"gacha_type,omitempty"`
	GachaRandom     uint32 `protobuf:"varint,13,opt,name=gacha_random,json=gachaRandom,proto3" json:"gacha_random,omitempty"`
	GachaTag        string `protobuf:"bytes,4,opt,name=gacha_tag,json=gachaTag,proto3" json:"gacha_tag,omitempty"`
}

func (x *DoGachaReq) Reset() {
	*x = DoGachaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gacha_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoGachaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoGachaReq) ProtoMessage() {}

func (x *DoGachaReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gacha_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoGachaReq.ProtoReflect.Descriptor instead.
func (*DoGachaReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gacha_proto_rawDescGZIP(), []int{4}
}

func (x *DoGachaReq) GetGachaTimes() uint32 {
	if x != nil {
		return x.GachaTimes
	}
	return 0
}

func (x *DoGachaReq) GetGachaScheduleId() uint32 {
	if x != nil {
		return x.GachaScheduleId
	}
	return 0
}

func (x *DoGachaReq) GetGachaType() uint32 {
	if x != nil {
		return x.GachaType
	}
	return 0
}

func (x *DoGachaReq) GetGachaRandom() uint32 {
	if x != nil {
		return x.GachaRandom
	}
	return 0
}

func (x *DoGachaReq) GetGachaTag() string {
	if x != nil {
		return x.GachaTag
	}
	return ""
}

type GachaTransferItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item              *ItemParam `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
	IsTransferItemNew bool       `protobuf:"varint,1,opt,name=is_transfer_item_new,json=isTransferItemNew,proto3" json:"is_transfer_item_new,omitempty"`
}

func (x *GachaTransferItem) Reset() {
	*x = GachaTransferItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gacha_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaTransferItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaTransferItem) ProtoMessage() {}

func (x *GachaTransferItem) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gacha_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaTransferItem.ProtoReflect.Descriptor instead.
func (*GachaTransferItem) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gacha_proto_rawDescGZIP(), []int{5}
}

func (x *GachaTransferItem) GetItem() *ItemParam {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *GachaTransferItem) GetIsTransferItemNew() bool {
	if x != nil {
		return x.IsTransferItemNew
	}
	return false
}

type GachaItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GachaItem      *ItemParam           `protobuf:"bytes,7,opt,name=gacha_item,json=gachaItem,proto3" json:"gacha_item,omitempty"`
	IsGachaItemNew bool                 `protobuf:"varint,6,opt,name=is_gacha_item_new,json=isGachaItemNew,proto3" json:"is_gacha_item_new,omitempty"`
	IsFlashCard    bool                 `protobuf:"varint,8,opt,name=is_flash_card,json=isFlashCard,proto3" json:"is_flash_card,omitempty"`
	TokenItemList  []*ItemParam         `protobuf:"bytes,9,rep,name=token_item_list,json=tokenItemList,proto3" json:"token_item_list,omitempty"`
	TransferItems  []*GachaTransferItem `protobuf:"bytes,12,rep,name=transfer_items,json=transferItems,proto3" json:"transfer_items,omitempty"`
}

func (x *GachaItem) Reset() {
	*x = GachaItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gacha_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaItem) ProtoMessage() {}

func (x *GachaItem) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gacha_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaItem.ProtoReflect.Descriptor instead.
func (*GachaItem) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gacha_proto_rawDescGZIP(), []int{6}
}

func (x *GachaItem) GetGachaItem() *ItemParam {
	if x != nil {
		return x.GachaItem
	}
	return nil
}

func (x *GachaItem) GetIsGachaItemNew() bool {
	if x != nil {
		return x.IsGachaItemNew
	}
	return false
}

func (x *GachaItem) GetIsFlashCard() bool {
	if x != nil {
		return x.IsFlashCard
	}
	return false
}

func (x *GachaItem) GetTokenItemList() []*ItemParam {
	if x != nil {
		return x.TokenItemList
	}
	return nil
}

func (x *GachaItem) GetTransferItems() []*GachaTransferItem {
	if x != nil {
		return x.TransferItems
	}
	return nil
}

type DoGachaRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurScheduleDailyGachaTimes uint32       `protobuf:"varint,155,opt,name=cur_schedule_daily_gacha_times,json=curScheduleDailyGachaTimes,proto3" json:"cur_schedule_daily_gacha_times,omitempty"`
	CostItemNum                uint32       `protobuf:"varint,10,opt,name=cost_item_num,json=costItemNum,proto3" json:"cost_item_num,omitempty"`
	WishMaxProgress            uint32       `protobuf:"varint,9,opt,name=wish_max_progress,json=wishMaxProgress,proto3" json:"wish_max_progress,omitempty"`
	WishItemId                 uint32       `protobuf:"varint,8,opt,name=wish_item_id,json=wishItemId,proto3" json:"wish_item_id,omitempty"`
	Retcode                    int32        `protobuf:"varint,13,opt,name=retcode,proto3" json:"retcode,omitempty"`
	TenCostItemNum             uint32       `protobuf:"varint,3,opt,name=ten_cost_item_num,json=tenCostItemNum,proto3" json:"ten_cost_item_num,omitempty"`
	WishProgress               uint32       `protobuf:"varint,2,opt,name=wish_progress,json=wishProgress,proto3" json:"wish_progress,omitempty"`
	GachaItemList              []*GachaItem `protobuf:"bytes,15,rep,name=gacha_item_list,json=gachaItemList,proto3" json:"gacha_item_list,omitempty"`
	TenCostItemId              uint32       `protobuf:"varint,7,opt,name=ten_cost_item_id,json=tenCostItemId,proto3" json:"ten_cost_item_id,omitempty"`
	GachaTimes                 uint32       `protobuf:"varint,4,opt,name=gacha_times,json=gachaTimes,proto3" json:"gacha_times,omitempty"`
	IsUnderMinorsRestrict      bool         `protobuf:"varint,1435,opt,name=is_under_minors_restrict,json=isUnderMinorsRestrict,proto3" json:"is_under_minors_restrict,omitempty"`
	IsUnderGeneralRestrict     bool         `protobuf:"varint,1868,opt,name=is_under_general_restrict,json=isUnderGeneralRestrict,proto3" json:"is_under_general_restrict,omitempty"`
	GachaType                  uint32       `protobuf:"varint,12,opt,name=gacha_type,json=gachaType,proto3" json:"gacha_type,omitempty"`
	GachaTimesLimit            uint32       `protobuf:"varint,1,opt,name=gacha_times_limit,json=gachaTimesLimit,proto3" json:"gacha_times_limit,omitempty"`
	CostItemId                 uint32       `protobuf:"varint,14,opt,name=cost_item_id,json=costItemId,proto3" json:"cost_item_id,omitempty"`
	DailyGachaTimes            uint32       `protobuf:"varint,1240,opt,name=daily_gacha_times,json=dailyGachaTimes,proto3" json:"daily_gacha_times,omitempty"`
	LeftGachaTimes             uint32       `protobuf:"varint,6,opt,name=left_gacha_times,json=leftGachaTimes,proto3" json:"left_gacha_times,omitempty"`
	NewGachaRandom             uint32       `protobuf:"varint,11,opt,name=new_gacha_random,json=newGachaRandom,proto3" json:"new_gacha_random,omitempty"`
	GachaScheduleId            uint32       `protobuf:"varint,5,opt,name=gacha_schedule_id,json=gachaScheduleId,proto3" json:"gacha_schedule_id,omitempty"`
}

func (x *DoGachaRsp) Reset() {
	*x = DoGachaRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gacha_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoGachaRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoGachaRsp) ProtoMessage() {}

func (x *DoGachaRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gacha_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoGachaRsp.ProtoReflect.Descriptor instead.
func (*DoGachaRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gacha_proto_rawDescGZIP(), []int{7}
}

func (x *DoGachaRsp) GetCurScheduleDailyGachaTimes() uint32 {
	if x != nil {
		return x.CurScheduleDailyGachaTimes
	}
	return 0
}

func (x *DoGachaRsp) GetCostItemNum() uint32 {
	if x != nil {
		return x.CostItemNum
	}
	return 0
}

func (x *DoGachaRsp) GetWishMaxProgress() uint32 {
	if x != nil {
		return x.WishMaxProgress
	}
	return 0
}

func (x *DoGachaRsp) GetWishItemId() uint32 {
	if x != nil {
		return x.WishItemId
	}
	return 0
}

func (x *DoGachaRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *DoGachaRsp) GetTenCostItemNum() uint32 {
	if x != nil {
		return x.TenCostItemNum
	}
	return 0
}

func (x *DoGachaRsp) GetWishProgress() uint32 {
	if x != nil {
		return x.WishProgress
	}
	return 0
}

func (x *DoGachaRsp) GetGachaItemList() []*GachaItem {
	if x != nil {
		return x.GachaItemList
	}
	return nil
}

func (x *DoGachaRsp) GetTenCostItemId() uint32 {
	if x != nil {
		return x.TenCostItemId
	}
	return 0
}

func (x *DoGachaRsp) GetGachaTimes() uint32 {
	if x != nil {
		return x.GachaTimes
	}
	return 0
}

func (x *DoGachaRsp) GetIsUnderMinorsRestrict() bool {
	if x != nil {
		return x.IsUnderMinorsRestrict
	}
	return false
}

func (x *DoGachaRsp) GetIsUnderGeneralRestrict() bool {
	if x != nil {
		return x.IsUnderGeneralRestrict
	}
	return false
}

func (x *DoGachaRsp) GetGachaType() uint32 {
	if x != nil {
		return x.GachaType
	}
	return 0
}

func (x *DoGachaRsp) GetGachaTimesLimit() uint32 {
	if x != nil {
		return x.GachaTimesLimit
	}
	return 0
}

func (x *DoGachaRsp) GetCostItemId() uint32 {
	if x != nil {
		return x.CostItemId
	}
	return 0
}

func (x *DoGachaRsp) GetDailyGachaTimes() uint32 {
	if x != nil {
		return x.DailyGachaTimes
	}
	return 0
}

func (x *DoGachaRsp) GetLeftGachaTimes() uint32 {
	if x != nil {
		return x.LeftGachaTimes
	}
	return 0
}

func (x *DoGachaRsp) GetNewGachaRandom() uint32 {
	if x != nil {
		return x.NewGachaRandom
	}
	return 0
}

func (x *DoGachaRsp) GetGachaScheduleId() uint32 {
	if x != nil {
		return x.GachaScheduleId
	}
	return 0
}

type GachaWishReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GachaScheduleId uint32 `protobuf:"varint,14,opt,name=gacha_schedule_id,json=gachaScheduleId,proto3" json:"gacha_schedule_id,omitempty"`
	GachaType       uint32 `protobuf:"varint,13,opt,name=gacha_type,json=gachaType,proto3" json:"gacha_type,omitempty"`
	ItemId          uint32 `protobuf:"varint,4,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *GachaWishReq) Reset() {
	*x = GachaWishReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gacha_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaWishReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaWishReq) ProtoMessage() {}

func (x *GachaWishReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gacha_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaWishReq.ProtoReflect.Descriptor instead.
func (*GachaWishReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gacha_proto_rawDescGZIP(), []int{8}
}

func (x *GachaWishReq) GetGachaScheduleId() uint32 {
	if x != nil {
		return x.GachaScheduleId
	}
	return 0
}

func (x *GachaWishReq) GetGachaType() uint32 {
	if x != nil {
		return x.GachaType
	}
	return 0
}

func (x *GachaWishReq) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

type GachaWishRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GachaType       uint32 `protobuf:"varint,8,opt,name=gacha_type,json=gachaType,proto3" json:"gacha_type,omitempty"`
	GachaScheduleId uint32 `protobuf:"varint,7,opt,name=gacha_schedule_id,json=gachaScheduleId,proto3" json:"gacha_schedule_id,omitempty"`
	WishMaxProgress uint32 `protobuf:"varint,2,opt,name=wish_max_progress,json=wishMaxProgress,proto3" json:"wish_max_progress,omitempty"`
	WishProgress    uint32 `protobuf:"varint,5,opt,name=wish_progress,json=wishProgress,proto3" json:"wish_progress,omitempty"`
	WishItemId      uint32 `protobuf:"varint,3,opt,name=wish_item_id,json=wishItemId,proto3" json:"wish_item_id,omitempty"`
	Retcode         int32  `protobuf:"varint,14,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GachaWishRsp) Reset() {
	*x = GachaWishRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gacha_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaWishRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaWishRsp) ProtoMessage() {}

func (x *GachaWishRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gacha_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaWishRsp.ProtoReflect.Descriptor instead.
func (*GachaWishRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gacha_proto_rawDescGZIP(), []int{9}
}

func (x *GachaWishRsp) GetGachaType() uint32 {
	if x != nil {
		return x.GachaType
	}
	return 0
}

func (x *GachaWishRsp) GetGachaScheduleId() uint32 {
	if x != nil {
		return x.GachaScheduleId
	}
	return 0
}

func (x *GachaWishRsp) GetWishMaxProgress() uint32 {
	if x != nil {
		return x.WishMaxProgress
	}
	return 0
}

func (x *GachaWishRsp) GetWishProgress() uint32 {
	if x != nil {
		return x.WishProgress
	}
	return 0
}

func (x *GachaWishRsp) GetWishItemId() uint32 {
	if x != nil {
		return x.WishItemId
	}
	return 0
}

func (x *GachaWishRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type GachaOpenWishNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GachaType       uint32 `protobuf:"varint,2,opt,name=gacha_type,json=gachaType,proto3" json:"gacha_type,omitempty"`
	GachaScheduleId uint32 `protobuf:"varint,9,opt,name=gacha_schedule_id,json=gachaScheduleId,proto3" json:"gacha_schedule_id,omitempty"`
}

func (x *GachaOpenWishNotify) Reset() {
	*x = GachaOpenWishNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gacha_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaOpenWishNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaOpenWishNotify) ProtoMessage() {}

func (x *GachaOpenWishNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gacha_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaOpenWishNotify.ProtoReflect.Descriptor instead.
func (*GachaOpenWishNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gacha_proto_rawDescGZIP(), []int{10}
}

func (x *GachaOpenWishNotify) GetGachaType() uint32 {
	if x != nil {
		return x.GachaType
	}
	return 0
}

func (x *GachaOpenWishNotify) GetGachaScheduleId() uint32 {
	if x != nil {
		return x.GachaScheduleId
	}
	return 0
}

type GachaSimpleInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNew bool `protobuf:"varint,5,opt,name=is_new,json=isNew,proto3" json:"is_new,omitempty"`
}

func (x *GachaSimpleInfoNotify) Reset() {
	*x = GachaSimpleInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gacha_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaSimpleInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaSimpleInfoNotify) ProtoMessage() {}

func (x *GachaSimpleInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gacha_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaSimpleInfoNotify.ProtoReflect.Descriptor instead.
func (*GachaSimpleInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gacha_proto_rawDescGZIP(), []int{11}
}

func (x *GachaSimpleInfoNotify) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

var File_cmd_cmd_gacha_proto protoreflect.FileDescriptor

var file_cmd_cmd_gacha_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x6d, 0x64, 0x5f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x47, 0x61, 0x63, 0x68, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x22, 0x59, 0x0a,
	0x0b, 0x47, 0x61, 0x63, 0x68, 0x61, 0x55, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xec, 0x08, 0x0a, 0x09, 0x47, 0x61, 0x63,
	0x68, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x10, 0x74, 0x65, 0x6e, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x74, 0x65, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x75, 0x70, 0x34, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0xd3, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x55, 0x70, 0x34, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43,
	0x0a, 0x1e, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0xd5, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x63, 0x75, 0x72, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x47, 0x61, 0x63, 0x68, 0x61, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x12, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x75, 0x70, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xd1, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x55, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x55, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67,
	0x61, 0x63, 0x68, 0x61, 0x50, 0x72, 0x6f, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x67,
	0x61, 0x63, 0x68, 0x61, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x50, 0x72, 0x65,
	0x66, 0x61, 0x62, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x73, 0x68, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0xe5, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x77, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x69, 0x73,
	0x68, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0xc6,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x77, 0x69, 0x73, 0x68, 0x4d, 0x61, 0x78, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x67, 0x61, 0x63, 0x68, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x61, 0x18, 0xc9, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x67, 0x61, 0x63, 0x68, 0x61, 0x50,
	0x72, 0x6f, 0x62, 0x55, 0x72, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x65, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x67, 0x61, 0x63, 0x68, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x6c, 0x65, 0x66, 0x74, 0x5f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x65, 0x66, 0x74, 0x47, 0x61, 0x63, 0x68,
	0x61, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x75, 0x70, 0x35, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0xd6, 0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x55,
	0x70, 0x35, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x61,
	0x63, 0x68, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63,
	0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x18, 0xdd, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x57, 0x69, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x11, 0x74, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x65, 0x6e, 0x43, 0x6f, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x39, 0x0a, 0x19, 0x67, 0x61, 0x63, 0x68,
	0x61, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x67, 0x61, 0x63,
	0x68, 0x61, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x65, 0x66, 0x61, 0x62, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x9b, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x69, 0x73,
	0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x6d, 0x61, 0x70, 0x18, 0xe0, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x6d, 0x61, 0x70, 0x12,
	0x38, 0x0a, 0x18, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x75, 0x72, 0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x65, 0x61, 0x18, 0xbe, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x67, 0x61, 0x63, 0x68, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55,
	0x72, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x65, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x61, 0x63,
	0x68, 0x61, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x67, 0x61, 0x63, 0x68, 0x61, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x61, 0x63, 0x68, 0x61, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x55, 0x72, 0x6c, 0x22, 0xa8, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47,
	0x61, 0x63, 0x68, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x19, 0x69,
	0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x69, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x61,
	0x63, 0x68, 0x61, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x69,
	0x6e, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x47, 0x61,
	0x63, 0x68, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0f, 0x67, 0x61, 0x63, 0x68,
	0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x67, 0x61, 0x63, 0x68, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x0a, 0x44, 0x6f, 0x47, 0x61, 0x63, 0x68, 0x61, 0x52, 0x65,
	0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x61, 0x63, 0x68, 0x61, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67,
	0x61, 0x63, 0x68, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x63, 0x68, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x61, 0x63, 0x68, 0x61, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x63, 0x68, 0x61, 0x54, 0x61, 0x67, 0x22, 0x6a, 0x0a,
	0x11, 0x47, 0x61, 0x63, 0x68, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x24, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x65, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x65, 0x77, 0x22, 0x86, 0x02, 0x0a, 0x09, 0x47, 0x61,
	0x63, 0x68, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x0a, 0x67, 0x61, 0x63, 0x68, 0x61,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x09, 0x67,
	0x61, 0x63, 0x68, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x67,
	0x61, 0x63, 0x68, 0x61, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x47, 0x61, 0x63, 0x68, 0x61, 0x49, 0x74, 0x65, 0x6d,
	0x4e, 0x65, 0x77, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x6c,
	0x61, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0xc1, 0x06, 0x0a, 0x0a, 0x44, 0x6f, 0x47, 0x61, 0x63, 0x68, 0x61, 0x52, 0x73,
	0x70, 0x12, 0x43, 0x0a, 0x1e, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x63, 0x75, 0x72, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x47, 0x61, 0x63, 0x68,
	0x61, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63,
	0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x69,
	0x73, 0x68, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x77, 0x69, 0x73, 0x68, 0x4d, 0x61, 0x78, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x77, 0x69,
	0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x74, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74,
	0x65, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x23, 0x0a,
	0x0d, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x69, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x38, 0x0a, 0x0f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x67,
	0x61, 0x63, 0x68, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x10,
	0x74, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x65, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x61, 0x63, 0x68,
	0x61, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x18, 0x9b, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x55, 0x6e, 0x64,
	0x65, 0x72, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x12, 0x3a, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0xcc, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x67, 0x61, 0x63, 0x68, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x67,
	0x61, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63,
	0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x5f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0xd8,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x47, 0x61, 0x63, 0x68,
	0x61, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x67,
	0x61, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x6c, 0x65, 0x66, 0x74, 0x47, 0x61, 0x63, 0x68, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x47,
	0x61, 0x63, 0x68, 0x61, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x61,
	0x63, 0x68, 0x61, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x0c, 0x47, 0x61, 0x63, 0x68, 0x61, 0x57,
	0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x63, 0x68, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xe6, 0x01, 0x0a, 0x0c, 0x47,
	0x61, 0x63, 0x68, 0x61, 0x57, 0x69, 0x73, 0x68, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x61, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x67, 0x61, 0x63, 0x68, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x61,
	0x63, 0x68, 0x61, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x77, 0x69, 0x73, 0x68, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x69, 0x73, 0x68, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x69, 0x73, 0x68, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x77,
	0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x60, 0x0a, 0x13, 0x47, 0x61, 0x63, 0x68, 0x61, 0x4f, 0x70, 0x65, 0x6e,
	0x57, 0x69, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61,
	0x63, 0x68, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x67, 0x61, 0x63, 0x68, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x61, 0x63,
	0x68, 0x61, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x15, 0x47, 0x61, 0x63, 0x68, 0x61, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x15,
	0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x4e, 0x65, 0x77, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x79, 0x76, 0x61, 0x74, 0x2d, 0x68, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x2f, 0x68, 0x6b, 0x34, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cmd_cmd_gacha_proto_rawDescOnce sync.Once
	file_cmd_cmd_gacha_proto_rawDescData = file_cmd_cmd_gacha_proto_rawDesc
)

func file_cmd_cmd_gacha_proto_rawDescGZIP() []byte {
	file_cmd_cmd_gacha_proto_rawDescOnce.Do(func() {
		file_cmd_cmd_gacha_proto_rawDescData = protoimpl.X.CompressGZIP(file_cmd_cmd_gacha_proto_rawDescData)
	})
	return file_cmd_cmd_gacha_proto_rawDescData
}

var file_cmd_cmd_gacha_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_cmd_cmd_gacha_proto_goTypes = []interface{}{
	(*GetGachaInfoReq)(nil),       // 0: proto.GetGachaInfoReq
	(*GachaUpInfo)(nil),           // 1: proto.GachaUpInfo
	(*GachaInfo)(nil),             // 2: proto.GachaInfo
	(*GetGachaInfoRsp)(nil),       // 3: proto.GetGachaInfoRsp
	(*DoGachaReq)(nil),            // 4: proto.DoGachaReq
	(*GachaTransferItem)(nil),     // 5: proto.GachaTransferItem
	(*GachaItem)(nil),             // 6: proto.GachaItem
	(*DoGachaRsp)(nil),            // 7: proto.DoGachaRsp
	(*GachaWishReq)(nil),          // 8: proto.GachaWishReq
	(*GachaWishRsp)(nil),          // 9: proto.GachaWishRsp
	(*GachaOpenWishNotify)(nil),   // 10: proto.GachaOpenWishNotify
	(*GachaSimpleInfoNotify)(nil), // 11: proto.GachaSimpleInfoNotify
	(*ItemParam)(nil),             // 12: proto.ItemParam
}
var file_cmd_cmd_gacha_proto_depIdxs = []int32{
	1,  // 0: proto.GachaInfo.gacha_up_info_list:type_name -> proto.GachaUpInfo
	2,  // 1: proto.GetGachaInfoRsp.gacha_info_list:type_name -> proto.GachaInfo
	12, // 2: proto.GachaTransferItem.item:type_name -> proto.ItemParam
	12, // 3: proto.GachaItem.gacha_item:type_name -> proto.ItemParam
	12, // 4: proto.GachaItem.token_item_list:type_name -> proto.ItemParam
	5,  // 5: proto.GachaItem.transfer_items:type_name -> proto.GachaTransferItem
	6,  // 6: proto.DoGachaRsp.gacha_item_list:type_name -> proto.GachaItem
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_cmd_cmd_gacha_proto_init() }
func file_cmd_cmd_gacha_proto_init() {
	if File_cmd_cmd_gacha_proto != nil {
		return
	}
	file_define_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cmd_cmd_gacha_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGachaInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gacha_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaUpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gacha_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gacha_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGachaInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gacha_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoGachaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gacha_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaTransferItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gacha_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gacha_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoGachaRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gacha_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaWishReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gacha_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaWishRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gacha_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaOpenWishNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gacha_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaSimpleInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cmd_cmd_gacha_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cmd_cmd_gacha_proto_goTypes,
		DependencyIndexes: file_cmd_cmd_gacha_proto_depIdxs,
		MessageInfos:      file_cmd_cmd_gacha_proto_msgTypes,
	}.Build()
	File_cmd_cmd_gacha_proto = out.File
	file_cmd_cmd_gacha_proto_rawDesc = nil
	file_cmd_cmd_gacha_proto_goTypes = nil
	file_cmd_cmd_gacha_proto_depIdxs = nil
}
