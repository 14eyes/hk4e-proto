// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: server_only/bin_common.server.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GroupBinOperation int32

const (
	GroupBinOperation_GROUP_OP_NONE              GroupBinOperation = 0
	GroupBinOperation_GROUP_OP_GADGET_MAP_DEL    GroupBinOperation = 1
	GroupBinOperation_GROUP_OP_DEL_GADGET_LIST   GroupBinOperation = 2
	GroupBinOperation_GROUP_OP_MONSTER_MAP_DEL   GroupBinOperation = 3
	GroupBinOperation_GROUP_OP_DEL_MONSTER_LIST  GroupBinOperation = 4
	GroupBinOperation_GORUP_OP_DEL_TRIGGER       GroupBinOperation = 5
	GroupBinOperation_GROUP_OP_SET_TRIGGER_COUNT GroupBinOperation = 6
	GroupBinOperation_GROUP_OP_SET_VARIABLE_VAL  GroupBinOperation = 7
	GroupBinOperation_GROUP_OP_SET_TARGET_SUITE  GroupBinOperation = 8
	GroupBinOperation_GROUP_OP_SET_GADGET_STATE  GroupBinOperation = 9
	GroupBinOperation_GROUP_OP_SET_DEAD          GroupBinOperation = 10
	GroupBinOperation_GROUP_OP_SET_UNREGISTER    GroupBinOperation = 11
)

// Enum value maps for GroupBinOperation.
var (
	GroupBinOperation_name = map[int32]string{
		0:  "GROUP_OP_NONE",
		1:  "GROUP_OP_GADGET_MAP_DEL",
		2:  "GROUP_OP_DEL_GADGET_LIST",
		3:  "GROUP_OP_MONSTER_MAP_DEL",
		4:  "GROUP_OP_DEL_MONSTER_LIST",
		5:  "GORUP_OP_DEL_TRIGGER",
		6:  "GROUP_OP_SET_TRIGGER_COUNT",
		7:  "GROUP_OP_SET_VARIABLE_VAL",
		8:  "GROUP_OP_SET_TARGET_SUITE",
		9:  "GROUP_OP_SET_GADGET_STATE",
		10: "GROUP_OP_SET_DEAD",
		11: "GROUP_OP_SET_UNREGISTER",
	}
	GroupBinOperation_value = map[string]int32{
		"GROUP_OP_NONE":              0,
		"GROUP_OP_GADGET_MAP_DEL":    1,
		"GROUP_OP_DEL_GADGET_LIST":   2,
		"GROUP_OP_MONSTER_MAP_DEL":   3,
		"GROUP_OP_DEL_MONSTER_LIST":  4,
		"GORUP_OP_DEL_TRIGGER":       5,
		"GROUP_OP_SET_TRIGGER_COUNT": 6,
		"GROUP_OP_SET_VARIABLE_VAL":  7,
		"GROUP_OP_SET_TARGET_SUITE":  8,
		"GROUP_OP_SET_GADGET_STATE":  9,
		"GROUP_OP_SET_DEAD":          10,
		"GROUP_OP_SET_UNREGISTER":    11,
	}
)

func (x GroupBinOperation) Enum() *GroupBinOperation {
	p := new(GroupBinOperation)
	*p = x
	return p
}

func (x GroupBinOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupBinOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_server_only_bin_common_server_proto_enumTypes[0].Descriptor()
}

func (GroupBinOperation) Type() protoreflect.EnumType {
	return &file_server_only_bin_common_server_proto_enumTypes[0]
}

func (x GroupBinOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupBinOperation.Descriptor instead.
func (GroupBinOperation) EnumDescriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{0}
}

type GroupLinkOpType int32

const (
	GroupLinkOpType_GROUP_LINK_OP_NONE              GroupLinkOpType = 0
	GroupLinkOpType_GROUP_LINK_OP_BUNDLE_REGISTER   GroupLinkOpType = 1
	GroupLinkOpType_GROUP_LINK_OP_BUNDLE_FINISH     GroupLinkOpType = 2
	GroupLinkOpType_GROUP_LINK_OP_BUNDLE_UNREGISTER GroupLinkOpType = 3
)

// Enum value maps for GroupLinkOpType.
var (
	GroupLinkOpType_name = map[int32]string{
		0: "GROUP_LINK_OP_NONE",
		1: "GROUP_LINK_OP_BUNDLE_REGISTER",
		2: "GROUP_LINK_OP_BUNDLE_FINISH",
		3: "GROUP_LINK_OP_BUNDLE_UNREGISTER",
	}
	GroupLinkOpType_value = map[string]int32{
		"GROUP_LINK_OP_NONE":              0,
		"GROUP_LINK_OP_BUNDLE_REGISTER":   1,
		"GROUP_LINK_OP_BUNDLE_FINISH":     2,
		"GROUP_LINK_OP_BUNDLE_UNREGISTER": 3,
	}
)

func (x GroupLinkOpType) Enum() *GroupLinkOpType {
	p := new(GroupLinkOpType)
	*p = x
	return p
}

func (x GroupLinkOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupLinkOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_only_bin_common_server_proto_enumTypes[1].Descriptor()
}

func (GroupLinkOpType) Type() protoreflect.EnumType {
	return &file_server_only_bin_common_server_proto_enumTypes[1]
}

func (x GroupLinkOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupLinkOpType.Descriptor instead.
func (GroupLinkOpType) EnumDescriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{1}
}

type SceneTagOpType int32

const (
	SceneTagOpType_SCENE_TAG_OP_NONE SceneTagOpType = 0
	SceneTagOpType_SCENE_TAG_OP_ADD  SceneTagOpType = 1
	SceneTagOpType_SCENE_TAG_OP_DEL  SceneTagOpType = 2
)

// Enum value maps for SceneTagOpType.
var (
	SceneTagOpType_name = map[int32]string{
		0: "SCENE_TAG_OP_NONE",
		1: "SCENE_TAG_OP_ADD",
		2: "SCENE_TAG_OP_DEL",
	}
	SceneTagOpType_value = map[string]int32{
		"SCENE_TAG_OP_NONE": 0,
		"SCENE_TAG_OP_ADD":  1,
		"SCENE_TAG_OP_DEL":  2,
	}
)

func (x SceneTagOpType) Enum() *SceneTagOpType {
	p := new(SceneTagOpType)
	*p = x
	return p
}

func (x SceneTagOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SceneTagOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_only_bin_common_server_proto_enumTypes[2].Descriptor()
}

func (SceneTagOpType) Type() protoreflect.EnumType {
	return &file_server_only_bin_common_server_proto_enumTypes[2]
}

func (x SceneTagOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SceneTagOpType.Descriptor instead.
func (SceneTagOpType) EnumDescriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{2}
}

type OfflineOpType int32

const (
	OfflineOpType_OFFLINE_OP_NONE                              OfflineOpType = 0
	OfflineOpType_OFFLINE_OP_TEST                              OfflineOpType = 1
	OfflineOpType_OFFLINE_OP_FURNITURE_MAKE_HELP               OfflineOpType = 2
	OfflineOpType_OFFLINE_OP_PLANT_FLOWER_ACTIVITY_GIVE_FLOWER OfflineOpType = 3
	OfflineOpType_OFFLINE_OP_WINTER_CAMP_GIVE_ITEM             OfflineOpType = 4
	OfflineOpType_OFFLINE_OP_ACTIVITY_GIVE_GIFT                OfflineOpType = 5
	OfflineOpType_OFFLINE_OP_VINTAGE_ACTIVITY_DIVIDEND         OfflineOpType = 6
	OfflineOpType_OFFLINE_OP_GCG_SETTLE                        OfflineOpType = 7
)

// Enum value maps for OfflineOpType.
var (
	OfflineOpType_name = map[int32]string{
		0: "OFFLINE_OP_NONE",
		1: "OFFLINE_OP_TEST",
		2: "OFFLINE_OP_FURNITURE_MAKE_HELP",
		3: "OFFLINE_OP_PLANT_FLOWER_ACTIVITY_GIVE_FLOWER",
		4: "OFFLINE_OP_WINTER_CAMP_GIVE_ITEM",
		5: "OFFLINE_OP_ACTIVITY_GIVE_GIFT",
		6: "OFFLINE_OP_VINTAGE_ACTIVITY_DIVIDEND",
		7: "OFFLINE_OP_GCG_SETTLE",
	}
	OfflineOpType_value = map[string]int32{
		"OFFLINE_OP_NONE":                              0,
		"OFFLINE_OP_TEST":                              1,
		"OFFLINE_OP_FURNITURE_MAKE_HELP":               2,
		"OFFLINE_OP_PLANT_FLOWER_ACTIVITY_GIVE_FLOWER": 3,
		"OFFLINE_OP_WINTER_CAMP_GIVE_ITEM":             4,
		"OFFLINE_OP_ACTIVITY_GIVE_GIFT":                5,
		"OFFLINE_OP_VINTAGE_ACTIVITY_DIVIDEND":         6,
		"OFFLINE_OP_GCG_SETTLE":                        7,
	}
)

func (x OfflineOpType) Enum() *OfflineOpType {
	p := new(OfflineOpType)
	*p = x
	return p
}

func (x OfflineOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OfflineOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_only_bin_common_server_proto_enumTypes[3].Descriptor()
}

func (OfflineOpType) Type() protoreflect.EnumType {
	return &file_server_only_bin_common_server_proto_enumTypes[3]
}

func (x OfflineOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OfflineOpType.Descriptor instead.
func (OfflineOpType) EnumDescriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{3}
}

type VectorBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *VectorBin) Reset() {
	*x = VectorBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorBin) ProtoMessage() {}

func (x *VectorBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorBin.ProtoReflect.Descriptor instead.
func (*VectorBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{0}
}

func (x *VectorBin) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *VectorBin) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *VectorBin) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type Uint32PairBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   uint32 `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Value uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Uint32PairBin) Reset() {
	*x = Uint32PairBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint32PairBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32PairBin) ProtoMessage() {}

func (x *Uint32PairBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32PairBin.ProtoReflect.Descriptor instead.
func (*Uint32PairBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{1}
}

func (x *Uint32PairBin) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *Uint32PairBin) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Uint32ToInt32PairBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   uint32 `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Value int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Uint32ToInt32PairBin) Reset() {
	*x = Uint32ToInt32PairBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint32ToInt32PairBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32ToInt32PairBin) ProtoMessage() {}

func (x *Uint32ToInt32PairBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32ToInt32PairBin.ProtoReflect.Descriptor instead.
func (*Uint32ToInt32PairBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{2}
}

func (x *Uint32ToInt32PairBin) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *Uint32ToInt32PairBin) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type FloatPairBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First  float32 `protobuf:"fixed32,1,opt,name=first,proto3" json:"first,omitempty"`
	Second float32 `protobuf:"fixed32,2,opt,name=second,proto3" json:"second,omitempty"`
}

func (x *FloatPairBin) Reset() {
	*x = FloatPairBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatPairBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatPairBin) ProtoMessage() {}

func (x *FloatPairBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatPairBin.ProtoReflect.Descriptor instead.
func (*FloatPairBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{3}
}

func (x *FloatPairBin) GetFirst() float32 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *FloatPairBin) GetSecond() float32 {
	if x != nil {
		return x.Second
	}
	return 0
}

type Uint32List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uint32List []uint32 `protobuf:"varint,1,rep,packed,name=uint32_list,json=uint32List,proto3" json:"uint32_list,omitempty"`
}

func (x *Uint32List) Reset() {
	*x = Uint32List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint32List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32List) ProtoMessage() {}

func (x *Uint32List) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32List.ProtoReflect.Descriptor instead.
func (*Uint32List) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{4}
}

func (x *Uint32List) GetUint32List() []uint32 {
	if x != nil {
		return x.Uint32List
	}
	return nil
}

type Int32List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int32List []int32 `protobuf:"varint,1,rep,packed,name=int32_list,json=int32List,proto3" json:"int32_list,omitempty"`
}

func (x *Int32List) Reset() {
	*x = Int32List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32List) ProtoMessage() {}

func (x *Int32List) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32List.ProtoReflect.Descriptor instead.
func (*Int32List) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{5}
}

func (x *Int32List) GetInt32List() []int32 {
	if x != nil {
		return x.Int32List
	}
	return nil
}

type ReliquaryBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level            uint32   `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Exp              uint32   `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
	MainPropId       uint32   `protobuf:"varint,4,opt,name=main_prop_id,json=mainPropId,proto3" json:"main_prop_id,omitempty"`
	AppendPropIdList []uint32 `protobuf:"varint,5,rep,packed,name=append_prop_id_list,json=appendPropIdList,proto3" json:"append_prop_id_list,omitempty"`
}

func (x *ReliquaryBin) Reset() {
	*x = ReliquaryBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReliquaryBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReliquaryBin) ProtoMessage() {}

func (x *ReliquaryBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReliquaryBin.ProtoReflect.Descriptor instead.
func (*ReliquaryBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{6}
}

func (x *ReliquaryBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ReliquaryBin) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *ReliquaryBin) GetMainPropId() uint32 {
	if x != nil {
		return x.MainPropId
	}
	return 0
}

func (x *ReliquaryBin) GetAppendPropIdList() []uint32 {
	if x != nil {
		return x.AppendPropIdList
	}
	return nil
}

type WeaponBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level        uint32            `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Exp          uint32            `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
	PromoteLevel uint32            `protobuf:"varint,3,opt,name=promote_level,json=promoteLevel,proto3" json:"promote_level,omitempty"`
	AffixMap     map[uint32]uint32 `protobuf:"bytes,4,rep,name=affix_map,json=affixMap,proto3" json:"affix_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *WeaponBin) Reset() {
	*x = WeaponBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaponBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaponBin) ProtoMessage() {}

func (x *WeaponBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaponBin.ProtoReflect.Descriptor instead.
func (*WeaponBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{7}
}

func (x *WeaponBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *WeaponBin) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *WeaponBin) GetPromoteLevel() uint32 {
	if x != nil {
		return x.PromoteLevel
	}
	return 0
}

func (x *WeaponBin) GetAffixMap() map[uint32]uint32 {
	if x != nil {
		return x.AffixMap
	}
	return nil
}

type ItemParamBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId       uint32 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Count        uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Level        uint32 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	PromoteLevel uint32 `protobuf:"varint,4,opt,name=promote_level,json=promoteLevel,proto3" json:"promote_level,omitempty"`
}

func (x *ItemParamBin) Reset() {
	*x = ItemParamBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemParamBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemParamBin) ProtoMessage() {}

func (x *ItemParamBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemParamBin.ProtoReflect.Descriptor instead.
func (*ItemParamBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{8}
}

func (x *ItemParamBin) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *ItemParamBin) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ItemParamBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ItemParamBin) GetPromoteLevel() uint32 {
	if x != nil {
		return x.PromoteLevel
	}
	return 0
}

type MailBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title         string          `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content       string          `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Sender        string          `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	ItemParamList []*ItemParamBin `protobuf:"bytes,4,rep,name=item_param_list,json=itemParamList,proto3" json:"item_param_list,omitempty"`
	SendTime      uint32          `protobuf:"fixed32,5,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`
	ExpireTime    uint32          `protobuf:"fixed32,6,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	Importance    uint32          `protobuf:"varint,7,opt,name=importance,proto3" json:"importance,omitempty"`
	ConfigId      uint32          `protobuf:"varint,8,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	ArgumentList  []string        `protobuf:"bytes,9,rep,name=argument_list,json=argumentList,proto3" json:"argument_list,omitempty"`
	ItemLimitType uint32          `protobuf:"varint,10,opt,name=item_limit_type,json=itemLimitType,proto3" json:"item_limit_type,omitempty"`
	SourceType    uint32          `protobuf:"varint,11,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	Tag           string          `protobuf:"bytes,12,opt,name=tag,proto3" json:"tag,omitempty"`
	ReasonType    uint32          `protobuf:"varint,13,opt,name=reason_type,json=reasonType,proto3" json:"reason_type,omitempty"`
	CollectState  uint32          `protobuf:"varint,14,opt,name=collect_state,json=collectState,proto3" json:"collect_state,omitempty"`
}

func (x *MailBin) Reset() {
	*x = MailBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailBin) ProtoMessage() {}

func (x *MailBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailBin.ProtoReflect.Descriptor instead.
func (*MailBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{9}
}

func (x *MailBin) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MailBin) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MailBin) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *MailBin) GetItemParamList() []*ItemParamBin {
	if x != nil {
		return x.ItemParamList
	}
	return nil
}

func (x *MailBin) GetSendTime() uint32 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *MailBin) GetExpireTime() uint32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *MailBin) GetImportance() uint32 {
	if x != nil {
		return x.Importance
	}
	return 0
}

func (x *MailBin) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *MailBin) GetArgumentList() []string {
	if x != nil {
		return x.ArgumentList
	}
	return nil
}

func (x *MailBin) GetItemLimitType() uint32 {
	if x != nil {
		return x.ItemLimitType
	}
	return 0
}

func (x *MailBin) GetSourceType() uint32 {
	if x != nil {
		return x.SourceType
	}
	return 0
}

func (x *MailBin) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *MailBin) GetReasonType() uint32 {
	if x != nil {
		return x.ReasonType
	}
	return 0
}

func (x *MailBin) GetCollectState() uint32 {
	if x != nil {
		return x.CollectState
	}
	return 0
}

type DelItemOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId  uint32 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ItemNum uint32 `protobuf:"varint,2,opt,name=item_num,json=itemNum,proto3" json:"item_num,omitempty"`
}

func (x *DelItemOp) Reset() {
	*x = DelItemOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelItemOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelItemOp) ProtoMessage() {}

func (x *DelItemOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelItemOp.ProtoReflect.Descriptor instead.
func (*DelItemOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{10}
}

func (x *DelItemOp) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *DelItemOp) GetItemNum() uint32 {
	if x != nil {
		return x.ItemNum
	}
	return 0
}

type DelItemNegativeOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId    uint32 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ItemNum   uint32 `protobuf:"varint,2,opt,name=item_num,json=itemNum,proto3" json:"item_num,omitempty"`
	RemainNum uint32 `protobuf:"varint,3,opt,name=remain_num,json=remainNum,proto3" json:"remain_num,omitempty"`
}

func (x *DelItemNegativeOp) Reset() {
	*x = DelItemNegativeOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelItemNegativeOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelItemNegativeOp) ProtoMessage() {}

func (x *DelItemNegativeOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelItemNegativeOp.ProtoReflect.Descriptor instead.
func (*DelItemNegativeOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{11}
}

func (x *DelItemNegativeOp) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *DelItemNegativeOp) GetItemNum() uint32 {
	if x != nil {
		return x.ItemNum
	}
	return 0
}

func (x *DelItemNegativeOp) GetRemainNum() uint32 {
	if x != nil {
		return x.RemainNum
	}
	return 0
}

type DelEquipOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid uint64 `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
}

func (x *DelEquipOp) Reset() {
	*x = DelEquipOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelEquipOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelEquipOp) ProtoMessage() {}

func (x *DelEquipOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelEquipOp.ProtoReflect.Descriptor instead.
func (*DelEquipOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{12}
}

func (x *DelEquipOp) GetGuid() uint64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

type PlayerGotoOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId uint32     `protobuf:"varint,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	Pos     *VectorBin `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *PlayerGotoOp) Reset() {
	*x = PlayerGotoOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGotoOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGotoOp) ProtoMessage() {}

func (x *PlayerGotoOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGotoOp.ProtoReflect.Descriptor instead.
func (*PlayerGotoOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{13}
}

func (x *PlayerGotoOp) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *PlayerGotoOp) GetPos() *VectorBin {
	if x != nil {
		return x.Pos
	}
	return nil
}

type ResetParentQuestOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentQuestId uint32 `protobuf:"varint,3,opt,name=parent_quest_id,json=parentQuestId,proto3" json:"parent_quest_id,omitempty"`
}

func (x *ResetParentQuestOp) Reset() {
	*x = ResetParentQuestOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetParentQuestOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetParentQuestOp) ProtoMessage() {}

func (x *ResetParentQuestOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetParentQuestOp.ProtoReflect.Descriptor instead.
func (*ResetParentQuestOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{14}
}

func (x *ResetParentQuestOp) GetParentQuestId() uint32 {
	if x != nil {
		return x.ParentQuestId
	}
	return 0
}

type RefreshGroupOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId uint32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	SuiteId uint32 `protobuf:"varint,2,opt,name=suite_id,json=suiteId,proto3" json:"suite_id,omitempty"`
	SceneId uint32 `protobuf:"varint,3,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
}

func (x *RefreshGroupOp) Reset() {
	*x = RefreshGroupOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshGroupOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshGroupOp) ProtoMessage() {}

func (x *RefreshGroupOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshGroupOp.ProtoReflect.Descriptor instead.
func (*RefreshGroupOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{15}
}

func (x *RefreshGroupOp) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *RefreshGroupOp) GetSuiteId() uint32 {
	if x != nil {
		return x.SuiteId
	}
	return 0
}

func (x *RefreshGroupOp) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

type SetScenePointLockStatusOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId  uint32 `protobuf:"varint,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	PointId  uint32 `protobuf:"varint,2,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
	IsLocked bool   `protobuf:"varint,3,opt,name=is_locked,json=isLocked,proto3" json:"is_locked,omitempty"`
}

func (x *SetScenePointLockStatusOp) Reset() {
	*x = SetScenePointLockStatusOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetScenePointLockStatusOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetScenePointLockStatusOp) ProtoMessage() {}

func (x *SetScenePointLockStatusOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetScenePointLockStatusOp.ProtoReflect.Descriptor instead.
func (*SetScenePointLockStatusOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{16}
}

func (x *SetScenePointLockStatusOp) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *SetScenePointLockStatusOp) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

func (x *SetScenePointLockStatusOp) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

type SetPlayerNickNameOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NickName string `protobuf:"bytes,1,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
}

func (x *SetPlayerNickNameOp) Reset() {
	*x = SetPlayerNickNameOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPlayerNickNameOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPlayerNickNameOp) ProtoMessage() {}

func (x *SetPlayerNickNameOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPlayerNickNameOp.ProtoReflect.Descriptor instead.
func (*SetPlayerNickNameOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{17}
}

func (x *SetPlayerNickNameOp) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

type RefreshShopOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefreshShopOp) Reset() {
	*x = RefreshShopOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshShopOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshShopOp) ProtoMessage() {}

func (x *RefreshShopOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshShopOp.ProtoReflect.Descriptor instead.
func (*RefreshShopOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{18}
}

type UnlockTalentOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId     uint32 `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	SkillDepotId uint32 `protobuf:"varint,2,opt,name=skill_depot_id,json=skillDepotId,proto3" json:"skill_depot_id,omitempty"`
	TalentId     uint32 `protobuf:"varint,3,opt,name=talent_id,json=talentId,proto3" json:"talent_id,omitempty"`
}

func (x *UnlockTalentOp) Reset() {
	*x = UnlockTalentOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockTalentOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockTalentOp) ProtoMessage() {}

func (x *UnlockTalentOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockTalentOp.ProtoReflect.Descriptor instead.
func (*UnlockTalentOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{19}
}

func (x *UnlockTalentOp) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *UnlockTalentOp) GetSkillDepotId() uint32 {
	if x != nil {
		return x.SkillDepotId
	}
	return 0
}

func (x *UnlockTalentOp) GetTalentId() uint32 {
	if x != nil {
		return x.TalentId
	}
	return 0
}

type TakeOffEquipOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId  uint32 `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	EquipType uint32 `protobuf:"varint,2,opt,name=equip_type,json=equipType,proto3" json:"equip_type,omitempty"`
}

func (x *TakeOffEquipOp) Reset() {
	*x = TakeOffEquipOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeOffEquipOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeOffEquipOp) ProtoMessage() {}

func (x *TakeOffEquipOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeOffEquipOp.ProtoReflect.Descriptor instead.
func (*TakeOffEquipOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{20}
}

func (x *TakeOffEquipOp) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *TakeOffEquipOp) GetEquipType() uint32 {
	if x != nil {
		return x.EquipType
	}
	return 0
}

type DelMailOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailIdList []uint32 `protobuf:"varint,1,rep,packed,name=mail_id_list,json=mailIdList,proto3" json:"mail_id_list,omitempty"`
}

func (x *DelMailOp) Reset() {
	*x = DelMailOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelMailOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelMailOp) ProtoMessage() {}

func (x *DelMailOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelMailOp.ProtoReflect.Descriptor instead.
func (*DelMailOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{21}
}

func (x *DelMailOp) GetMailIdList() []uint32 {
	if x != nil {
		return x.MailIdList
	}
	return nil
}

type UnlockAreaOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaId uint32 `protobuf:"varint,1,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
}

func (x *UnlockAreaOp) Reset() {
	*x = UnlockAreaOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockAreaOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockAreaOp) ProtoMessage() {}

func (x *UnlockAreaOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockAreaOp.ProtoReflect.Descriptor instead.
func (*UnlockAreaOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{22}
}

func (x *UnlockAreaOp) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

type FinishDailyTaskOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DailyTaskId uint32 `protobuf:"varint,1,opt,name=daily_task_id,json=dailyTaskId,proto3" json:"daily_task_id,omitempty"`
	DailyTime   uint32 `protobuf:"varint,2,opt,name=daily_time,json=dailyTime,proto3" json:"daily_time,omitempty"`
}

func (x *FinishDailyTaskOp) Reset() {
	*x = FinishDailyTaskOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishDailyTaskOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishDailyTaskOp) ProtoMessage() {}

func (x *FinishDailyTaskOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishDailyTaskOp.ProtoReflect.Descriptor instead.
func (*FinishDailyTaskOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{23}
}

func (x *FinishDailyTaskOp) GetDailyTaskId() uint32 {
	if x != nil {
		return x.DailyTaskId
	}
	return 0
}

func (x *FinishDailyTaskOp) GetDailyTime() uint32 {
	if x != nil {
		return x.DailyTime
	}
	return 0
}

type AddItemOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId    uint32 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ItemCount uint32 `protobuf:"varint,2,opt,name=item_count,json=itemCount,proto3" json:"item_count,omitempty"`
	// Types that are assignable to Detail:
	//
	//	*AddItemOp_Reliquary
	//	*AddItemOp_Weapon
	Detail isAddItemOp_Detail `protobuf_oneof:"detail"`
}

func (x *AddItemOp) Reset() {
	*x = AddItemOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddItemOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddItemOp) ProtoMessage() {}

func (x *AddItemOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddItemOp.ProtoReflect.Descriptor instead.
func (*AddItemOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{24}
}

func (x *AddItemOp) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *AddItemOp) GetItemCount() uint32 {
	if x != nil {
		return x.ItemCount
	}
	return 0
}

func (m *AddItemOp) GetDetail() isAddItemOp_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *AddItemOp) GetReliquary() *ReliquaryBin {
	if x, ok := x.GetDetail().(*AddItemOp_Reliquary); ok {
		return x.Reliquary
	}
	return nil
}

func (x *AddItemOp) GetWeapon() *WeaponBin {
	if x, ok := x.GetDetail().(*AddItemOp_Weapon); ok {
		return x.Weapon
	}
	return nil
}

type isAddItemOp_Detail interface {
	isAddItemOp_Detail()
}

type AddItemOp_Reliquary struct {
	Reliquary *ReliquaryBin `protobuf:"bytes,101,opt,name=reliquary,proto3,oneof"`
}

type AddItemOp_Weapon struct {
	Weapon *WeaponBin `protobuf:"bytes,102,opt,name=weapon,proto3,oneof"`
}

func (*AddItemOp_Reliquary) isAddItemOp_Detail() {}

func (*AddItemOp_Weapon) isAddItemOp_Detail() {}

type ModifyBornPosOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId uint32     `protobuf:"varint,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	Pos     *VectorBin `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *ModifyBornPosOp) Reset() {
	*x = ModifyBornPosOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyBornPosOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyBornPosOp) ProtoMessage() {}

func (x *ModifyBornPosOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyBornPosOp.ProtoReflect.Descriptor instead.
func (*ModifyBornPosOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{25}
}

func (x *ModifyBornPosOp) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *ModifyBornPosOp) GetPos() *VectorBin {
	if x != nil {
		return x.Pos
	}
	return nil
}

type SubCoinNegativeOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scoin        uint32       `protobuf:"varint,1,opt,name=scoin,proto3" json:"scoin,omitempty"`
	Hcoin        uint32       `protobuf:"varint,2,opt,name=hcoin,proto3" json:"hcoin,omitempty"`
	Mcoin        uint32       `protobuf:"varint,3,opt,name=mcoin,proto3" json:"mcoin,omitempty"`
	HomeCoin     uint32       `protobuf:"varint,4,opt,name=home_coin,json=homeCoin,proto3" json:"home_coin,omitempty"`
	PlatformType PlatformType `protobuf:"varint,5,opt,name=platform_type,json=platformType,proto3,enum=proto.PlatformType" json:"platform_type,omitempty"`
}

func (x *SubCoinNegativeOp) Reset() {
	*x = SubCoinNegativeOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubCoinNegativeOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubCoinNegativeOp) ProtoMessage() {}

func (x *SubCoinNegativeOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubCoinNegativeOp.ProtoReflect.Descriptor instead.
func (*SubCoinNegativeOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{26}
}

func (x *SubCoinNegativeOp) GetScoin() uint32 {
	if x != nil {
		return x.Scoin
	}
	return 0
}

func (x *SubCoinNegativeOp) GetHcoin() uint32 {
	if x != nil {
		return x.Hcoin
	}
	return 0
}

func (x *SubCoinNegativeOp) GetMcoin() uint32 {
	if x != nil {
		return x.Mcoin
	}
	return 0
}

func (x *SubCoinNegativeOp) GetHomeCoin() uint32 {
	if x != nil {
		return x.HomeCoin
	}
	return 0
}

func (x *SubCoinNegativeOp) GetPlatformType() PlatformType {
	if x != nil {
		return x.PlatformType
	}
	return PlatformType_EDITOR
}

type SetQuestContentProgressOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestId           uint32            `protobuf:"varint,1,opt,name=quest_id,json=questId,proto3" json:"quest_id,omitempty"`
	FinishProgressMap map[uint32]uint32 `protobuf:"bytes,2,rep,name=finish_progress_map,json=finishProgressMap,proto3" json:"finish_progress_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FailProgressMap   map[uint32]uint32 `protobuf:"bytes,3,rep,name=fail_progress_map,json=failProgressMap,proto3" json:"fail_progress_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *SetQuestContentProgressOp) Reset() {
	*x = SetQuestContentProgressOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetQuestContentProgressOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetQuestContentProgressOp) ProtoMessage() {}

func (x *SetQuestContentProgressOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetQuestContentProgressOp.ProtoReflect.Descriptor instead.
func (*SetQuestContentProgressOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{27}
}

func (x *SetQuestContentProgressOp) GetQuestId() uint32 {
	if x != nil {
		return x.QuestId
	}
	return 0
}

func (x *SetQuestContentProgressOp) GetFinishProgressMap() map[uint32]uint32 {
	if x != nil {
		return x.FinishProgressMap
	}
	return nil
}

func (x *SetQuestContentProgressOp) GetFailProgressMap() map[uint32]uint32 {
	if x != nil {
		return x.FailProgressMap
	}
	return nil
}

type FinishOrderOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId uint32 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *FinishOrderOp) Reset() {
	*x = FinishOrderOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishOrderOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishOrderOp) ProtoMessage() {}

func (x *FinishOrderOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishOrderOp.ProtoReflect.Descriptor instead.
func (*FinishOrderOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{28}
}

func (x *FinishOrderOp) GetOrderId() uint32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

type AddOrModifyWatcherOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WatcherId uint32 `protobuf:"varint,1,opt,name=watcher_id,json=watcherId,proto3" json:"watcher_id,omitempty"`
	Progress  uint32 `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *AddOrModifyWatcherOp) Reset() {
	*x = AddOrModifyWatcherOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrModifyWatcherOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrModifyWatcherOp) ProtoMessage() {}

func (x *AddOrModifyWatcherOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrModifyWatcherOp.ProtoReflect.Descriptor instead.
func (*AddOrModifyWatcherOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{29}
}

func (x *AddOrModifyWatcherOp) GetWatcherId() uint32 {
	if x != nil {
		return x.WatcherId
	}
	return 0
}

func (x *AddOrModifyWatcherOp) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type DelWatcherOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WatcherId uint32 `protobuf:"varint,1,opt,name=watcher_id,json=watcherId,proto3" json:"watcher_id,omitempty"`
}

func (x *DelWatcherOp) Reset() {
	*x = DelWatcherOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelWatcherOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelWatcherOp) ProtoMessage() {}

func (x *DelWatcherOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelWatcherOp.ProtoReflect.Descriptor instead.
func (*DelWatcherOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{30}
}

func (x *DelWatcherOp) GetWatcherId() uint32 {
	if x != nil {
		return x.WatcherId
	}
	return 0
}

type SetSignatureOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature string `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SetSignatureOp) Reset() {
	*x = SetSignatureOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSignatureOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSignatureOp) ProtoMessage() {}

func (x *SetSignatureOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSignatureOp.ProtoReflect.Descriptor instead.
func (*SetSignatureOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{31}
}

func (x *SetSignatureOp) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type AddOrSubResinOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeltaCount uint32 `protobuf:"varint,1,opt,name=delta_count,json=deltaCount,proto3" json:"delta_count,omitempty"`
	IsSub      bool   `protobuf:"varint,2,opt,name=is_sub,json=isSub,proto3" json:"is_sub,omitempty"`
}

func (x *AddOrSubResinOp) Reset() {
	*x = AddOrSubResinOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrSubResinOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrSubResinOp) ProtoMessage() {}

func (x *AddOrSubResinOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrSubResinOp.ProtoReflect.Descriptor instead.
func (*AddOrSubResinOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{32}
}

func (x *AddOrSubResinOp) GetDeltaCount() uint32 {
	if x != nil {
		return x.DeltaCount
	}
	return 0
}

func (x *AddOrSubResinOp) GetIsSub() bool {
	if x != nil {
		return x.IsSub
	}
	return false
}

type SetQuestGlobalVarValueOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SetQuestGlobalVarValueOp) Reset() {
	*x = SetQuestGlobalVarValueOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetQuestGlobalVarValueOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetQuestGlobalVarValueOp) ProtoMessage() {}

func (x *SetQuestGlobalVarValueOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetQuestGlobalVarValueOp.ProtoReflect.Descriptor instead.
func (*SetQuestGlobalVarValueOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{33}
}

func (x *SetQuestGlobalVarValueOp) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetQuestGlobalVarValueOp) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type AddMcoinVipPointOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mcoin        uint32       `protobuf:"varint,1,opt,name=mcoin,proto3" json:"mcoin,omitempty"`
	VipPoint     uint32       `protobuf:"varint,2,opt,name=vip_point,json=vipPoint,proto3" json:"vip_point,omitempty"`
	PlatformType PlatformType `protobuf:"varint,3,opt,name=platform_type,json=platformType,proto3,enum=proto.PlatformType" json:"platform_type,omitempty"`
}

func (x *AddMcoinVipPointOp) Reset() {
	*x = AddMcoinVipPointOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMcoinVipPointOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMcoinVipPointOp) ProtoMessage() {}

func (x *AddMcoinVipPointOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMcoinVipPointOp.ProtoReflect.Descriptor instead.
func (*AddMcoinVipPointOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{34}
}

func (x *AddMcoinVipPointOp) GetMcoin() uint32 {
	if x != nil {
		return x.Mcoin
	}
	return 0
}

func (x *AddMcoinVipPointOp) GetVipPoint() uint32 {
	if x != nil {
		return x.VipPoint
	}
	return 0
}

func (x *AddMcoinVipPointOp) GetPlatformType() PlatformType {
	if x != nil {
		return x.PlatformType
	}
	return PlatformType_EDITOR
}

type ExchangeMcoinOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num          uint32            `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	ExchangeType ExchangeMcoinType `protobuf:"varint,2,opt,name=exchange_type,json=exchangeType,proto3,enum=proto.ExchangeMcoinType" json:"exchange_type,omitempty"`
}

func (x *ExchangeMcoinOp) Reset() {
	*x = ExchangeMcoinOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeMcoinOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeMcoinOp) ProtoMessage() {}

func (x *ExchangeMcoinOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeMcoinOp.ProtoReflect.Descriptor instead.
func (*ExchangeMcoinOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{35}
}

func (x *ExchangeMcoinOp) GetNum() uint32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ExchangeMcoinOp) GetExchangeType() ExchangeMcoinType {
	if x != nil {
		return x.ExchangeType
	}
	return ExchangeMcoinType_EXCHANGEMCOIN_NONE
}

type GroupBinOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpType        GroupBinOperation `protobuf:"varint,1,opt,name=op_type,json=opType,proto3,enum=proto.GroupBinOperation" json:"op_type,omitempty"`
	GroupId       uint32            `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ConfigId      uint32            `protobuf:"varint,3,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	IsAdd         bool              `protobuf:"varint,4,opt,name=is_add,json=isAdd,proto3" json:"is_add,omitempty"`
	State         uint32            `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
	IsCreate      bool              `protobuf:"varint,6,opt,name=is_create,json=isCreate,proto3" json:"is_create,omitempty"`
	TriggerName   string            `protobuf:"bytes,7,opt,name=trigger_name,json=triggerName,proto3" json:"trigger_name,omitempty"`
	TriggerCount  uint32            `protobuf:"varint,8,opt,name=trigger_count,json=triggerCount,proto3" json:"trigger_count,omitempty"`
	VariableName  string            `protobuf:"bytes,9,opt,name=variable_name,json=variableName,proto3" json:"variable_name,omitempty"`
	VariableValue int32             `protobuf:"varint,10,opt,name=variable_value,json=variableValue,proto3" json:"variable_value,omitempty"`
	TargetSuite   uint32            `protobuf:"varint,11,opt,name=target_suite,json=targetSuite,proto3" json:"target_suite,omitempty"`
	SceneId       uint32            `protobuf:"varint,12,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
}

func (x *GroupBinOp) Reset() {
	*x = GroupBinOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupBinOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupBinOp) ProtoMessage() {}

func (x *GroupBinOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupBinOp.ProtoReflect.Descriptor instead.
func (*GroupBinOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{36}
}

func (x *GroupBinOp) GetOpType() GroupBinOperation {
	if x != nil {
		return x.OpType
	}
	return GroupBinOperation_GROUP_OP_NONE
}

func (x *GroupBinOp) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GroupBinOp) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *GroupBinOp) GetIsAdd() bool {
	if x != nil {
		return x.IsAdd
	}
	return false
}

func (x *GroupBinOp) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *GroupBinOp) GetIsCreate() bool {
	if x != nil {
		return x.IsCreate
	}
	return false
}

func (x *GroupBinOp) GetTriggerName() string {
	if x != nil {
		return x.TriggerName
	}
	return ""
}

func (x *GroupBinOp) GetTriggerCount() uint32 {
	if x != nil {
		return x.TriggerCount
	}
	return 0
}

func (x *GroupBinOp) GetVariableName() string {
	if x != nil {
		return x.VariableName
	}
	return ""
}

func (x *GroupBinOp) GetVariableValue() int32 {
	if x != nil {
		return x.VariableValue
	}
	return 0
}

func (x *GroupBinOp) GetTargetSuite() uint32 {
	if x != nil {
		return x.TargetSuite
	}
	return 0
}

func (x *GroupBinOp) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

type DelOneOffOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   uint32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ConfigId  uint32 `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	IsMonster bool   `protobuf:"varint,3,opt,name=is_monster,json=isMonster,proto3" json:"is_monster,omitempty"`
	SceneId   uint32 `protobuf:"varint,4,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
}

func (x *DelOneOffOp) Reset() {
	*x = DelOneOffOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOneOffOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOneOffOp) ProtoMessage() {}

func (x *DelOneOffOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOneOffOp.ProtoReflect.Descriptor instead.
func (*DelOneOffOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{37}
}

func (x *DelOneOffOp) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *DelOneOffOp) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *DelOneOffOp) GetIsMonster() bool {
	if x != nil {
		return x.IsMonster
	}
	return false
}

func (x *DelOneOffOp) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

type FinishRoutineOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoutineId uint32 `protobuf:"varint,1,opt,name=routine_id,json=routineId,proto3" json:"routine_id,omitempty"`
}

func (x *FinishRoutineOp) Reset() {
	*x = FinishRoutineOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishRoutineOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishRoutineOp) ProtoMessage() {}

func (x *FinishRoutineOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishRoutineOp.ProtoReflect.Descriptor instead.
func (*FinishRoutineOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{38}
}

func (x *FinishRoutineOp) GetRoutineId() uint32 {
	if x != nil {
		return x.RoutineId
	}
	return 0
}

type FinishDailyTaskUnloadGroupOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DailyTaskId uint32 `protobuf:"varint,1,opt,name=daily_task_id,json=dailyTaskId,proto3" json:"daily_task_id,omitempty"`
	DailyTime   uint32 `protobuf:"varint,2,opt,name=daily_time,json=dailyTime,proto3" json:"daily_time,omitempty"`
}

func (x *FinishDailyTaskUnloadGroupOp) Reset() {
	*x = FinishDailyTaskUnloadGroupOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishDailyTaskUnloadGroupOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishDailyTaskUnloadGroupOp) ProtoMessage() {}

func (x *FinishDailyTaskUnloadGroupOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishDailyTaskUnloadGroupOp.ProtoReflect.Descriptor instead.
func (*FinishDailyTaskUnloadGroupOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{39}
}

func (x *FinishDailyTaskUnloadGroupOp) GetDailyTaskId() uint32 {
	if x != nil {
		return x.DailyTaskId
	}
	return 0
}

func (x *FinishDailyTaskUnloadGroupOp) GetDailyTime() uint32 {
	if x != nil {
		return x.DailyTime
	}
	return 0
}

type RefreshBlossomCircleCampOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshId    uint32 `protobuf:"varint,1,opt,name=refresh_id,json=refreshId,proto3" json:"refresh_id,omitempty"`
	CircleCampId uint32 `protobuf:"varint,2,opt,name=circle_camp_id,json=circleCampId,proto3" json:"circle_camp_id,omitempty"`
}

func (x *RefreshBlossomCircleCampOp) Reset() {
	*x = RefreshBlossomCircleCampOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshBlossomCircleCampOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshBlossomCircleCampOp) ProtoMessage() {}

func (x *RefreshBlossomCircleCampOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshBlossomCircleCampOp.ProtoReflect.Descriptor instead.
func (*RefreshBlossomCircleCampOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{40}
}

func (x *RefreshBlossomCircleCampOp) GetRefreshId() uint32 {
	if x != nil {
		return x.RefreshId
	}
	return 0
}

func (x *RefreshBlossomCircleCampOp) GetCircleCampId() uint32 {
	if x != nil {
		return x.CircleCampId
	}
	return 0
}

type BlessingActivityGivePicOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUid uint32 `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	TargetUid uint32 `protobuf:"varint,2,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
	PicId     uint32 `protobuf:"varint,3,opt,name=pic_id,json=picId,proto3" json:"pic_id,omitempty"`
}

func (x *BlessingActivityGivePicOp) Reset() {
	*x = BlessingActivityGivePicOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlessingActivityGivePicOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlessingActivityGivePicOp) ProtoMessage() {}

func (x *BlessingActivityGivePicOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlessingActivityGivePicOp.ProtoReflect.Descriptor instead.
func (*BlessingActivityGivePicOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{41}
}

func (x *BlessingActivityGivePicOp) GetSourceUid() uint32 {
	if x != nil {
		return x.SourceUid
	}
	return 0
}

func (x *BlessingActivityGivePicOp) GetTargetUid() uint32 {
	if x != nil {
		return x.TargetUid
	}
	return 0
}

func (x *BlessingActivityGivePicOp) GetPicId() uint32 {
	if x != nil {
		return x.PicId
	}
	return 0
}

type ExpeditionActivityAssistOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId       uint32 `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	AssistTime     uint32 `protobuf:"varint,2,opt,name=assist_time,json=assistTime,proto3" json:"assist_time,omitempty"`
	TargetUid      uint32 `protobuf:"varint,3,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
	TargetNickName string `protobuf:"bytes,4,opt,name=target_nick_name,json=targetNickName,proto3" json:"target_nick_name,omitempty"`
	OnlineId       string `protobuf:"bytes,5,opt,name=online_id,json=onlineId,proto3" json:"online_id,omitempty"`
	AssistUid      uint32 `protobuf:"varint,6,opt,name=assist_uid,json=assistUid,proto3" json:"assist_uid,omitempty"`
}

func (x *ExpeditionActivityAssistOp) Reset() {
	*x = ExpeditionActivityAssistOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpeditionActivityAssistOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpeditionActivityAssistOp) ProtoMessage() {}

func (x *ExpeditionActivityAssistOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpeditionActivityAssistOp.ProtoReflect.Descriptor instead.
func (*ExpeditionActivityAssistOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{42}
}

func (x *ExpeditionActivityAssistOp) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *ExpeditionActivityAssistOp) GetAssistTime() uint32 {
	if x != nil {
		return x.AssistTime
	}
	return 0
}

func (x *ExpeditionActivityAssistOp) GetTargetUid() uint32 {
	if x != nil {
		return x.TargetUid
	}
	return 0
}

func (x *ExpeditionActivityAssistOp) GetTargetNickName() string {
	if x != nil {
		return x.TargetNickName
	}
	return ""
}

func (x *ExpeditionActivityAssistOp) GetOnlineId() string {
	if x != nil {
		return x.OnlineId
	}
	return ""
}

func (x *ExpeditionActivityAssistOp) GetAssistUid() uint32 {
	if x != nil {
		return x.AssistUid
	}
	return 0
}

type RecoverWorldLevelOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecoverWorldLevelOp) Reset() {
	*x = RecoverWorldLevelOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverWorldLevelOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverWorldLevelOp) ProtoMessage() {}

func (x *RecoverWorldLevelOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverWorldLevelOp.ProtoReflect.Descriptor instead.
func (*RecoverWorldLevelOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{43}
}

type AddRegionSearchProgressOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId    uint32 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	AddRecycle  uint32 `protobuf:"varint,2,opt,name=add_recycle,json=addRecycle,proto3" json:"add_recycle,omitempty"`
	AddProgress uint32 `protobuf:"varint,3,opt,name=add_progress,json=addProgress,proto3" json:"add_progress,omitempty"`
}

func (x *AddRegionSearchProgressOp) Reset() {
	*x = AddRegionSearchProgressOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRegionSearchProgressOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRegionSearchProgressOp) ProtoMessage() {}

func (x *AddRegionSearchProgressOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRegionSearchProgressOp.ProtoReflect.Descriptor instead.
func (*AddRegionSearchProgressOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{44}
}

func (x *AddRegionSearchProgressOp) GetRegionId() uint32 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *AddRegionSearchProgressOp) GetAddRecycle() uint32 {
	if x != nil {
		return x.AddRecycle
	}
	return 0
}

func (x *AddRegionSearchProgressOp) GetAddProgress() uint32 {
	if x != nil {
		return x.AddProgress
	}
	return 0
}

type SetMatchPunishTimesOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId     uint32 `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	PunishTimes uint32 `protobuf:"varint,2,opt,name=punish_times,json=punishTimes,proto3" json:"punish_times,omitempty"`
}

func (x *SetMatchPunishTimesOp) Reset() {
	*x = SetMatchPunishTimesOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMatchPunishTimesOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMatchPunishTimesOp) ProtoMessage() {}

func (x *SetMatchPunishTimesOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMatchPunishTimesOp.ProtoReflect.Descriptor instead.
func (*SetMatchPunishTimesOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{45}
}

func (x *SetMatchPunishTimesOp) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *SetMatchPunishTimesOp) GetPunishTimes() uint32 {
	if x != nil {
		return x.PunishTimes
	}
	return 0
}

type ResetChannellerSlabCampGroupOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	RoundId uint32 `protobuf:"varint,2,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
}

func (x *ResetChannellerSlabCampGroupOp) Reset() {
	*x = ResetChannellerSlabCampGroupOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetChannellerSlabCampGroupOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetChannellerSlabCampGroupOp) ProtoMessage() {}

func (x *ResetChannellerSlabCampGroupOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetChannellerSlabCampGroupOp.ProtoReflect.Descriptor instead.
func (*ResetChannellerSlabCampGroupOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{46}
}

func (x *ResetChannellerSlabCampGroupOp) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *ResetChannellerSlabCampGroupOp) GetRoundId() uint32 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

type ForceAcceptQuestOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestId uint32 `protobuf:"varint,1,opt,name=quest_id,json=questId,proto3" json:"quest_id,omitempty"`
}

func (x *ForceAcceptQuestOp) Reset() {
	*x = ForceAcceptQuestOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceAcceptQuestOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceAcceptQuestOp) ProtoMessage() {}

func (x *ForceAcceptQuestOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceAcceptQuestOp.ProtoReflect.Descriptor instead.
func (*ForceAcceptQuestOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{47}
}

func (x *ForceAcceptQuestOp) GetQuestId() uint32 {
	if x != nil {
		return x.QuestId
	}
	return 0
}

type SetMainCoopConfidenceOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Confidence uint32 `protobuf:"varint,1,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (x *SetMainCoopConfidenceOp) Reset() {
	*x = SetMainCoopConfidenceOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMainCoopConfidenceOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMainCoopConfidenceOp) ProtoMessage() {}

func (x *SetMainCoopConfidenceOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMainCoopConfidenceOp.ProtoReflect.Descriptor instead.
func (*SetMainCoopConfidenceOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{48}
}

func (x *SetMainCoopConfidenceOp) GetConfidence() uint32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

type AddCoopPointSavePointListOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoopPointId   uint32   `protobuf:"varint,1,opt,name=coop_point_id,json=coopPointId,proto3" json:"coop_point_id,omitempty"`
	SavePointList []uint32 `protobuf:"varint,2,rep,packed,name=save_point_list,json=savePointList,proto3" json:"save_point_list,omitempty"`
}

func (x *AddCoopPointSavePointListOp) Reset() {
	*x = AddCoopPointSavePointListOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCoopPointSavePointListOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCoopPointSavePointListOp) ProtoMessage() {}

func (x *AddCoopPointSavePointListOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCoopPointSavePointListOp.ProtoReflect.Descriptor instead.
func (*AddCoopPointSavePointListOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{49}
}

func (x *AddCoopPointSavePointListOp) GetCoopPointId() uint32 {
	if x != nil {
		return x.CoopPointId
	}
	return 0
}

func (x *AddCoopPointSavePointListOp) GetSavePointList() []uint32 {
	if x != nil {
		return x.SavePointList
	}
	return nil
}

type SetClimateAreaTypeOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId       uint32 `protobuf:"varint,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	ClimateAreaId uint32 `protobuf:"varint,2,opt,name=climate_area_id,json=climateAreaId,proto3" json:"climate_area_id,omitempty"`
	ClimateType   uint32 `protobuf:"varint,3,opt,name=climate_type,json=climateType,proto3" json:"climate_type,omitempty"`
}

func (x *SetClimateAreaTypeOp) Reset() {
	*x = SetClimateAreaTypeOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetClimateAreaTypeOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetClimateAreaTypeOp) ProtoMessage() {}

func (x *SetClimateAreaTypeOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetClimateAreaTypeOp.ProtoReflect.Descriptor instead.
func (*SetClimateAreaTypeOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{50}
}

func (x *SetClimateAreaTypeOp) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *SetClimateAreaTypeOp) GetClimateAreaId() uint32 {
	if x != nil {
		return x.ClimateAreaId
	}
	return 0
}

func (x *SetClimateAreaTypeOp) GetClimateType() uint32 {
	if x != nil {
		return x.ClimateType
	}
	return 0
}

type ProcSceneTagOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId    uint32         `protobuf:"varint,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	SceneTagId uint32         `protobuf:"varint,2,opt,name=scene_tag_id,json=sceneTagId,proto3" json:"scene_tag_id,omitempty"`
	OpType     SceneTagOpType `protobuf:"varint,3,opt,name=op_type,json=opType,proto3,enum=proto.SceneTagOpType" json:"op_type,omitempty"`
}

func (x *ProcSceneTagOp) Reset() {
	*x = ProcSceneTagOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcSceneTagOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcSceneTagOp) ProtoMessage() {}

func (x *ProcSceneTagOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcSceneTagOp.ProtoReflect.Descriptor instead.
func (*ProcSceneTagOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{51}
}

func (x *ProcSceneTagOp) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *ProcSceneTagOp) GetSceneTagId() uint32 {
	if x != nil {
		return x.SceneTagId
	}
	return 0
}

func (x *ProcSceneTagOp) GetOpType() SceneTagOpType {
	if x != nil {
		return x.OpType
	}
	return SceneTagOpType_SCENE_TAG_OP_NONE
}

type SetFinishedParentQuestChildStateOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestId uint32 `protobuf:"varint,1,opt,name=quest_id,json=questId,proto3" json:"quest_id,omitempty"`
	State   uint32 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *SetFinishedParentQuestChildStateOp) Reset() {
	*x = SetFinishedParentQuestChildStateOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFinishedParentQuestChildStateOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFinishedParentQuestChildStateOp) ProtoMessage() {}

func (x *SetFinishedParentQuestChildStateOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFinishedParentQuestChildStateOp.ProtoReflect.Descriptor instead.
func (*SetFinishedParentQuestChildStateOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{52}
}

func (x *SetFinishedParentQuestChildStateOp) GetQuestId() uint32 {
	if x != nil {
		return x.QuestId
	}
	return 0
}

func (x *SetFinishedParentQuestChildStateOp) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

type ChangeMapAreaInfoOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapAreaId uint32 `protobuf:"varint,1,opt,name=map_area_id,json=mapAreaId,proto3" json:"map_area_id,omitempty"`
	IsOpen    bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *ChangeMapAreaInfoOp) Reset() {
	*x = ChangeMapAreaInfoOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeMapAreaInfoOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMapAreaInfoOp) ProtoMessage() {}

func (x *ChangeMapAreaInfoOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMapAreaInfoOp.ProtoReflect.Descriptor instead.
func (*ChangeMapAreaInfoOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{53}
}

func (x *ChangeMapAreaInfoOp) GetMapAreaId() uint32 {
	if x != nil {
		return x.MapAreaId
	}
	return 0
}

func (x *ChangeMapAreaInfoOp) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type SetLevel1AreaExplorePointOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId      uint32 `protobuf:"varint,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	Level1AreaId uint32 `protobuf:"varint,2,opt,name=level1_area_id,json=level1AreaId,proto3" json:"level1_area_id,omitempty"`
	ExplorePoint uint32 `protobuf:"varint,3,opt,name=explore_point,json=explorePoint,proto3" json:"explore_point,omitempty"`
}

func (x *SetLevel1AreaExplorePointOp) Reset() {
	*x = SetLevel1AreaExplorePointOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLevel1AreaExplorePointOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLevel1AreaExplorePointOp) ProtoMessage() {}

func (x *SetLevel1AreaExplorePointOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLevel1AreaExplorePointOp.ProtoReflect.Descriptor instead.
func (*SetLevel1AreaExplorePointOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{54}
}

func (x *SetLevel1AreaExplorePointOp) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *SetLevel1AreaExplorePointOp) GetLevel1AreaId() uint32 {
	if x != nil {
		return x.Level1AreaId
	}
	return 0
}

func (x *SetLevel1AreaExplorePointOp) GetExplorePoint() uint32 {
	if x != nil {
		return x.ExplorePoint
	}
	return 0
}

type SetCodexOpenOrCloseOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodexType uint32 `protobuf:"varint,1,opt,name=codex_type,json=codexType,proto3" json:"codex_type,omitempty"`
	CodexId   uint32 `protobuf:"varint,2,opt,name=codex_id,json=codexId,proto3" json:"codex_id,omitempty"`
	IsOpen    bool   `protobuf:"varint,3,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *SetCodexOpenOrCloseOp) Reset() {
	*x = SetCodexOpenOrCloseOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCodexOpenOrCloseOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCodexOpenOrCloseOp) ProtoMessage() {}

func (x *SetCodexOpenOrCloseOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCodexOpenOrCloseOp.ProtoReflect.Descriptor instead.
func (*SetCodexOpenOrCloseOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{55}
}

func (x *SetCodexOpenOrCloseOp) GetCodexType() uint32 {
	if x != nil {
		return x.CodexType
	}
	return 0
}

func (x *SetCodexOpenOrCloseOp) GetCodexId() uint32 {
	if x != nil {
		return x.CodexId
	}
	return 0
}

func (x *SetCodexOpenOrCloseOp) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type GroupLinkOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpType        GroupLinkOpType `protobuf:"varint,1,opt,name=op_type,json=opType,proto3,enum=proto.GroupLinkOpType" json:"op_type,omitempty"`
	GroupBundleId uint32          `protobuf:"varint,2,opt,name=group_bundle_id,json=groupBundleId,proto3" json:"group_bundle_id,omitempty"`
	ActivityId    uint32          `protobuf:"varint,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *GroupLinkOp) Reset() {
	*x = GroupLinkOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupLinkOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupLinkOp) ProtoMessage() {}

func (x *GroupLinkOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupLinkOp.ProtoReflect.Descriptor instead.
func (*GroupLinkOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{56}
}

func (x *GroupLinkOp) GetOpType() GroupLinkOpType {
	if x != nil {
		return x.OpType
	}
	return GroupLinkOpType_GROUP_LINK_OP_NONE
}

func (x *GroupLinkOp) GetGroupBundleId() uint32 {
	if x != nil {
		return x.GroupBundleId
	}
	return 0
}

func (x *GroupLinkOp) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type SetWatcherCompRecordValueOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OptionalMaxCriticalDamage:
	//
	//	*SetWatcherCompRecordValueOp_MaxCriticalDamage
	OptionalMaxCriticalDamage isSetWatcherCompRecordValueOp_OptionalMaxCriticalDamage `protobuf_oneof:"optional_max_critical_damage"`
	// Types that are assignable to OptionalMaxFlyMapDistance:
	//
	//	*SetWatcherCompRecordValueOp_MaxFlyMapDistance
	OptionalMaxFlyMapDistance isSetWatcherCompRecordValueOp_OptionalMaxFlyMapDistance `protobuf_oneof:"optional_max_fly_map_distance"`
	// Types that are assignable to OptionalMaxFlyTime:
	//
	//	*SetWatcherCompRecordValueOp_MaxFlyTime
	OptionalMaxFlyTime isSetWatcherCompRecordValueOp_OptionalMaxFlyTime `protobuf_oneof:"optional_max_fly_time"`
	// Types that are assignable to OptionalMaxDashTime:
	//
	//	*SetWatcherCompRecordValueOp_MaxDashTime
	OptionalMaxDashTime isSetWatcherCompRecordValueOp_OptionalMaxDashTime `protobuf_oneof:"optional_max_dash_time"`
}

func (x *SetWatcherCompRecordValueOp) Reset() {
	*x = SetWatcherCompRecordValueOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWatcherCompRecordValueOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWatcherCompRecordValueOp) ProtoMessage() {}

func (x *SetWatcherCompRecordValueOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWatcherCompRecordValueOp.ProtoReflect.Descriptor instead.
func (*SetWatcherCompRecordValueOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{57}
}

func (m *SetWatcherCompRecordValueOp) GetOptionalMaxCriticalDamage() isSetWatcherCompRecordValueOp_OptionalMaxCriticalDamage {
	if m != nil {
		return m.OptionalMaxCriticalDamage
	}
	return nil
}

func (x *SetWatcherCompRecordValueOp) GetMaxCriticalDamage() float32 {
	if x, ok := x.GetOptionalMaxCriticalDamage().(*SetWatcherCompRecordValueOp_MaxCriticalDamage); ok {
		return x.MaxCriticalDamage
	}
	return 0
}

func (m *SetWatcherCompRecordValueOp) GetOptionalMaxFlyMapDistance() isSetWatcherCompRecordValueOp_OptionalMaxFlyMapDistance {
	if m != nil {
		return m.OptionalMaxFlyMapDistance
	}
	return nil
}

func (x *SetWatcherCompRecordValueOp) GetMaxFlyMapDistance() float32 {
	if x, ok := x.GetOptionalMaxFlyMapDistance().(*SetWatcherCompRecordValueOp_MaxFlyMapDistance); ok {
		return x.MaxFlyMapDistance
	}
	return 0
}

func (m *SetWatcherCompRecordValueOp) GetOptionalMaxFlyTime() isSetWatcherCompRecordValueOp_OptionalMaxFlyTime {
	if m != nil {
		return m.OptionalMaxFlyTime
	}
	return nil
}

func (x *SetWatcherCompRecordValueOp) GetMaxFlyTime() float32 {
	if x, ok := x.GetOptionalMaxFlyTime().(*SetWatcherCompRecordValueOp_MaxFlyTime); ok {
		return x.MaxFlyTime
	}
	return 0
}

func (m *SetWatcherCompRecordValueOp) GetOptionalMaxDashTime() isSetWatcherCompRecordValueOp_OptionalMaxDashTime {
	if m != nil {
		return m.OptionalMaxDashTime
	}
	return nil
}

func (x *SetWatcherCompRecordValueOp) GetMaxDashTime() float32 {
	if x, ok := x.GetOptionalMaxDashTime().(*SetWatcherCompRecordValueOp_MaxDashTime); ok {
		return x.MaxDashTime
	}
	return 0
}

type isSetWatcherCompRecordValueOp_OptionalMaxCriticalDamage interface {
	isSetWatcherCompRecordValueOp_OptionalMaxCriticalDamage()
}

type SetWatcherCompRecordValueOp_MaxCriticalDamage struct {
	MaxCriticalDamage float32 `protobuf:"fixed32,1,opt,name=max_critical_damage,json=maxCriticalDamage,proto3,oneof"`
}

func (*SetWatcherCompRecordValueOp_MaxCriticalDamage) isSetWatcherCompRecordValueOp_OptionalMaxCriticalDamage() {
}

type isSetWatcherCompRecordValueOp_OptionalMaxFlyMapDistance interface {
	isSetWatcherCompRecordValueOp_OptionalMaxFlyMapDistance()
}

type SetWatcherCompRecordValueOp_MaxFlyMapDistance struct {
	MaxFlyMapDistance float32 `protobuf:"fixed32,2,opt,name=max_fly_map_distance,json=maxFlyMapDistance,proto3,oneof"`
}

func (*SetWatcherCompRecordValueOp_MaxFlyMapDistance) isSetWatcherCompRecordValueOp_OptionalMaxFlyMapDistance() {
}

type isSetWatcherCompRecordValueOp_OptionalMaxFlyTime interface {
	isSetWatcherCompRecordValueOp_OptionalMaxFlyTime()
}

type SetWatcherCompRecordValueOp_MaxFlyTime struct {
	MaxFlyTime float32 `protobuf:"fixed32,3,opt,name=max_fly_time,json=maxFlyTime,proto3,oneof"`
}

func (*SetWatcherCompRecordValueOp_MaxFlyTime) isSetWatcherCompRecordValueOp_OptionalMaxFlyTime() {}

type isSetWatcherCompRecordValueOp_OptionalMaxDashTime interface {
	isSetWatcherCompRecordValueOp_OptionalMaxDashTime()
}

type SetWatcherCompRecordValueOp_MaxDashTime struct {
	MaxDashTime float32 `protobuf:"fixed32,4,opt,name=max_dash_time,json=maxDashTime,proto3,oneof"`
}

func (*SetWatcherCompRecordValueOp_MaxDashTime) isSetWatcherCompRecordValueOp_OptionalMaxDashTime() {}

type AddFriendOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetUid uint32 `protobuf:"varint,1,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
}

func (x *AddFriendOp) Reset() {
	*x = AddFriendOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFriendOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFriendOp) ProtoMessage() {}

func (x *AddFriendOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFriendOp.ProtoReflect.Descriptor instead.
func (*AddFriendOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{58}
}

func (x *AddFriendOp) GetTargetUid() uint32 {
	if x != nil {
		return x.TargetUid
	}
	return 0
}

type DelFriendOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetUid uint32 `protobuf:"varint,1,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
}

func (x *DelFriendOp) Reset() {
	*x = DelFriendOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelFriendOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelFriendOp) ProtoMessage() {}

func (x *DelFriendOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelFriendOp.ProtoReflect.Descriptor instead.
func (*DelFriendOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{59}
}

func (x *DelFriendOp) GetTargetUid() uint32 {
	if x != nil {
		return x.TargetUid
	}
	return 0
}

type AddFriendAskOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetUid uint32 `protobuf:"varint,1,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
}

func (x *AddFriendAskOp) Reset() {
	*x = AddFriendAskOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFriendAskOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFriendAskOp) ProtoMessage() {}

func (x *AddFriendAskOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFriendAskOp.ProtoReflect.Descriptor instead.
func (*AddFriendAskOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{60}
}

func (x *AddFriendAskOp) GetTargetUid() uint32 {
	if x != nil {
		return x.TargetUid
	}
	return 0
}

type DelFriendAskOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetUid uint32 `protobuf:"varint,1,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
}

func (x *DelFriendAskOp) Reset() {
	*x = DelFriendAskOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelFriendAskOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelFriendAskOp) ProtoMessage() {}

func (x *DelFriendAskOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelFriendAskOp.ProtoReflect.Descriptor instead.
func (*DelFriendAskOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{61}
}

func (x *DelFriendAskOp) GetTargetUid() uint32 {
	if x != nil {
		return x.TargetUid
	}
	return 0
}

type BanCustomDungeonOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BanExpireTime uint32 `protobuf:"varint,1,opt,name=ban_expire_time,json=banExpireTime,proto3" json:"ban_expire_time,omitempty"`
}

func (x *BanCustomDungeonOp) Reset() {
	*x = BanCustomDungeonOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanCustomDungeonOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanCustomDungeonOp) ProtoMessage() {}

func (x *BanCustomDungeonOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanCustomDungeonOp.ProtoReflect.Descriptor instead.
func (*BanCustomDungeonOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{62}
}

func (x *BanCustomDungeonOp) GetBanExpireTime() uint32 {
	if x != nil {
		return x.BanExpireTime
	}
	return 0
}

type RemoveInvalidMapMarksOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId uint32        `protobuf:"varint,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	XRange  *FloatPairBin `protobuf:"bytes,2,opt,name=x_range,json=xRange,proto3" json:"x_range,omitempty"`
	ZRange  *FloatPairBin `protobuf:"bytes,3,opt,name=z_range,json=zRange,proto3" json:"z_range,omitempty"`
}

func (x *RemoveInvalidMapMarksOp) Reset() {
	*x = RemoveInvalidMapMarksOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveInvalidMapMarksOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveInvalidMapMarksOp) ProtoMessage() {}

func (x *RemoveInvalidMapMarksOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveInvalidMapMarksOp.ProtoReflect.Descriptor instead.
func (*RemoveInvalidMapMarksOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{63}
}

func (x *RemoveInvalidMapMarksOp) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *RemoveInvalidMapMarksOp) GetXRange() *FloatPairBin {
	if x != nil {
		return x.XRange
	}
	return nil
}

func (x *RemoveInvalidMapMarksOp) GetZRange() *FloatPairBin {
	if x != nil {
		return x.ZRange
	}
	return nil
}

type RecalculateAreaExplorePointOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaId    uint32 `protobuf:"varint,1,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	OldExp    uint32 `protobuf:"varint,2,opt,name=old_exp,json=oldExp,proto3" json:"old_exp,omitempty"`
	RecalcExp uint32 `protobuf:"varint,3,opt,name=recalc_exp,json=recalcExp,proto3" json:"recalc_exp,omitempty"`
	NewExp    uint32 `protobuf:"varint,4,opt,name=new_exp,json=newExp,proto3" json:"new_exp,omitempty"`
}

func (x *RecalculateAreaExplorePointOp) Reset() {
	*x = RecalculateAreaExplorePointOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecalculateAreaExplorePointOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecalculateAreaExplorePointOp) ProtoMessage() {}

func (x *RecalculateAreaExplorePointOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecalculateAreaExplorePointOp.ProtoReflect.Descriptor instead.
func (*RecalculateAreaExplorePointOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{64}
}

func (x *RecalculateAreaExplorePointOp) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *RecalculateAreaExplorePointOp) GetOldExp() uint32 {
	if x != nil {
		return x.OldExp
	}
	return 0
}

func (x *RecalculateAreaExplorePointOp) GetRecalcExp() uint32 {
	if x != nil {
		return x.RecalcExp
	}
	return 0
}

func (x *RecalculateAreaExplorePointOp) GetNewExp() uint32 {
	if x != nil {
		return x.NewExp
	}
	return 0
}

type NicknameAuditResultOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname string `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	IsOk     bool   `protobuf:"varint,2,opt,name=is_ok,json=isOk,proto3" json:"is_ok,omitempty"`
}

func (x *NicknameAuditResultOp) Reset() {
	*x = NicknameAuditResultOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NicknameAuditResultOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NicknameAuditResultOp) ProtoMessage() {}

func (x *NicknameAuditResultOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NicknameAuditResultOp.ProtoReflect.Descriptor instead.
func (*NicknameAuditResultOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{65}
}

func (x *NicknameAuditResultOp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *NicknameAuditResultOp) GetIsOk() bool {
	if x != nil {
		return x.IsOk
	}
	return false
}

type SignatureAuditResultOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature string `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	IsOk      bool   `protobuf:"varint,2,opt,name=is_ok,json=isOk,proto3" json:"is_ok,omitempty"`
}

func (x *SignatureAuditResultOp) Reset() {
	*x = SignatureAuditResultOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureAuditResultOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureAuditResultOp) ProtoMessage() {}

func (x *SignatureAuditResultOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureAuditResultOp.ProtoReflect.Descriptor instead.
func (*SignatureAuditResultOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{66}
}

func (x *SignatureAuditResultOp) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *SignatureAuditResultOp) GetIsOk() bool {
	if x != nil {
		return x.IsOk
	}
	return false
}

type PassHomeSceneArrangementAuditOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleId uint32 `protobuf:"varint,1,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	SceneId  uint32 `protobuf:"varint,2,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	Version  uint32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *PassHomeSceneArrangementAuditOp) Reset() {
	*x = PassHomeSceneArrangementAuditOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassHomeSceneArrangementAuditOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassHomeSceneArrangementAuditOp) ProtoMessage() {}

func (x *PassHomeSceneArrangementAuditOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassHomeSceneArrangementAuditOp.ProtoReflect.Descriptor instead.
func (*PassHomeSceneArrangementAuditOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{67}
}

func (x *PassHomeSceneArrangementAuditOp) GetModuleId() uint32 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

func (x *PassHomeSceneArrangementAuditOp) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *PassHomeSceneArrangementAuditOp) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type FailHomeSceneArrangementAuditOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleId uint32 `protobuf:"varint,1,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	SceneId  uint32 `protobuf:"varint,2,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	Version  uint32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *FailHomeSceneArrangementAuditOp) Reset() {
	*x = FailHomeSceneArrangementAuditOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailHomeSceneArrangementAuditOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailHomeSceneArrangementAuditOp) ProtoMessage() {}

func (x *FailHomeSceneArrangementAuditOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailHomeSceneArrangementAuditOp.ProtoReflect.Descriptor instead.
func (*FailHomeSceneArrangementAuditOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{68}
}

func (x *FailHomeSceneArrangementAuditOp) GetModuleId() uint32 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

func (x *FailHomeSceneArrangementAuditOp) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *FailHomeSceneArrangementAuditOp) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type FailHomeModulesArrangementAuditOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAllModule  bool     `protobuf:"varint,1,opt,name=is_all_module,json=isAllModule,proto3" json:"is_all_module,omitempty"`
	ModuleIdList []uint32 `protobuf:"varint,2,rep,packed,name=module_id_list,json=moduleIdList,proto3" json:"module_id_list,omitempty"`
	Version      uint32   `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *FailHomeModulesArrangementAuditOp) Reset() {
	*x = FailHomeModulesArrangementAuditOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailHomeModulesArrangementAuditOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailHomeModulesArrangementAuditOp) ProtoMessage() {}

func (x *FailHomeModulesArrangementAuditOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailHomeModulesArrangementAuditOp.ProtoReflect.Descriptor instead.
func (*FailHomeModulesArrangementAuditOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{69}
}

func (x *FailHomeModulesArrangementAuditOp) GetIsAllModule() bool {
	if x != nil {
		return x.IsAllModule
	}
	return false
}

func (x *FailHomeModulesArrangementAuditOp) GetModuleIdList() []uint32 {
	if x != nil {
		return x.ModuleIdList
	}
	return nil
}

func (x *FailHomeModulesArrangementAuditOp) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type BanUgcPublishOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BanPublishExpireTime uint32 `protobuf:"varint,1,opt,name=ban_publish_expire_time,json=banPublishExpireTime,proto3" json:"ban_publish_expire_time,omitempty"`
}

func (x *BanUgcPublishOp) Reset() {
	*x = BanUgcPublishOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanUgcPublishOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanUgcPublishOp) ProtoMessage() {}

func (x *BanUgcPublishOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanUgcPublishOp.ProtoReflect.Descriptor instead.
func (*BanUgcPublishOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{70}
}

func (x *BanUgcPublishOp) GetBanPublishExpireTime() uint32 {
	if x != nil {
		return x.BanPublishExpireTime
	}
	return 0
}

type ResetPlayerPersistentDungeonOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId uint32 `protobuf:"varint,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
}

func (x *ResetPlayerPersistentDungeonOp) Reset() {
	*x = ResetPlayerPersistentDungeonOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPlayerPersistentDungeonOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPlayerPersistentDungeonOp) ProtoMessage() {}

func (x *ResetPlayerPersistentDungeonOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPlayerPersistentDungeonOp.ProtoReflect.Descriptor instead.
func (*ResetPlayerPersistentDungeonOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{71}
}

func (x *ResetPlayerPersistentDungeonOp) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

type ResetPlayerPosInPersistentDungeonOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId uint32 `protobuf:"varint,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
}

func (x *ResetPlayerPosInPersistentDungeonOp) Reset() {
	*x = ResetPlayerPosInPersistentDungeonOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPlayerPosInPersistentDungeonOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPlayerPosInPersistentDungeonOp) ProtoMessage() {}

func (x *ResetPlayerPosInPersistentDungeonOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPlayerPosInPersistentDungeonOp.ProtoReflect.Descriptor instead.
func (*ResetPlayerPosInPersistentDungeonOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{72}
}

func (x *ResetPlayerPosInPersistentDungeonOp) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

type LevelTagChangeOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelTagId uint32 `protobuf:"varint,1,opt,name=level_tag_id,json=levelTagId,proto3" json:"level_tag_id,omitempty"`
}

func (x *LevelTagChangeOp) Reset() {
	*x = LevelTagChangeOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LevelTagChangeOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelTagChangeOp) ProtoMessage() {}

func (x *LevelTagChangeOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelTagChangeOp.ProtoReflect.Descriptor instead.
func (*LevelTagChangeOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{73}
}

func (x *LevelTagChangeOp) GetLevelTagId() uint32 {
	if x != nil {
		return x.LevelTagId
	}
	return 0
}

type ResetPlayerWayPointInPersistentDungeonOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId    uint32 `protobuf:"varint,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	WayPointId uint32 `protobuf:"varint,2,opt,name=way_point_id,json=wayPointId,proto3" json:"way_point_id,omitempty"`
}

func (x *ResetPlayerWayPointInPersistentDungeonOp) Reset() {
	*x = ResetPlayerWayPointInPersistentDungeonOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPlayerWayPointInPersistentDungeonOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPlayerWayPointInPersistentDungeonOp) ProtoMessage() {}

func (x *ResetPlayerWayPointInPersistentDungeonOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPlayerWayPointInPersistentDungeonOp.ProtoReflect.Descriptor instead.
func (*ResetPlayerWayPointInPersistentDungeonOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{74}
}

func (x *ResetPlayerWayPointInPersistentDungeonOp) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *ResetPlayerWayPointInPersistentDungeonOp) GetWayPointId() uint32 {
	if x != nil {
		return x.WayPointId
	}
	return 0
}

type ExhibitionSetOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExhibitionId uint32 `protobuf:"varint,1,opt,name=exhibition_id,json=exhibitionId,proto3" json:"exhibition_id,omitempty"`
	// Types that are assignable to OptionalAccumulableVal:
	//
	//	*ExhibitionSetOp_AccumulableVal
	OptionalAccumulableVal isExhibitionSetOp_OptionalAccumulableVal `protobuf_oneof:"optional_accumulable_val"`
	// Types that are assignable to OptionalReplaceableVal:
	//
	//	*ExhibitionSetOp_ReplaceableVal
	OptionalReplaceableVal isExhibitionSetOp_OptionalReplaceableVal `protobuf_oneof:"optional_replaceable_val"`
}

func (x *ExhibitionSetOp) Reset() {
	*x = ExhibitionSetOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExhibitionSetOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExhibitionSetOp) ProtoMessage() {}

func (x *ExhibitionSetOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExhibitionSetOp.ProtoReflect.Descriptor instead.
func (*ExhibitionSetOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{75}
}

func (x *ExhibitionSetOp) GetExhibitionId() uint32 {
	if x != nil {
		return x.ExhibitionId
	}
	return 0
}

func (m *ExhibitionSetOp) GetOptionalAccumulableVal() isExhibitionSetOp_OptionalAccumulableVal {
	if m != nil {
		return m.OptionalAccumulableVal
	}
	return nil
}

func (x *ExhibitionSetOp) GetAccumulableVal() uint32 {
	if x, ok := x.GetOptionalAccumulableVal().(*ExhibitionSetOp_AccumulableVal); ok {
		return x.AccumulableVal
	}
	return 0
}

func (m *ExhibitionSetOp) GetOptionalReplaceableVal() isExhibitionSetOp_OptionalReplaceableVal {
	if m != nil {
		return m.OptionalReplaceableVal
	}
	return nil
}

func (x *ExhibitionSetOp) GetReplaceableVal() uint32 {
	if x, ok := x.GetOptionalReplaceableVal().(*ExhibitionSetOp_ReplaceableVal); ok {
		return x.ReplaceableVal
	}
	return 0
}

type isExhibitionSetOp_OptionalAccumulableVal interface {
	isExhibitionSetOp_OptionalAccumulableVal()
}

type ExhibitionSetOp_AccumulableVal struct {
	AccumulableVal uint32 `protobuf:"varint,2,opt,name=accumulable_val,json=accumulableVal,proto3,oneof"`
}

func (*ExhibitionSetOp_AccumulableVal) isExhibitionSetOp_OptionalAccumulableVal() {}

type isExhibitionSetOp_OptionalReplaceableVal interface {
	isExhibitionSetOp_OptionalReplaceableVal()
}

type ExhibitionSetOp_ReplaceableVal struct {
	ReplaceableVal uint32 `protobuf:"varint,3,opt,name=replaceable_val,json=replaceableVal,proto3,oneof"`
}

func (*ExhibitionSetOp_ReplaceableVal) isExhibitionSetOp_OptionalReplaceableVal() {}

type SetAvatarExtraPropOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId       uint32 `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	ExtraPropId    uint32 `protobuf:"varint,2,opt,name=extra_prop_id,json=extraPropId,proto3" json:"extra_prop_id,omitempty"`
	ExtraPropCount uint32 `protobuf:"varint,3,opt,name=extra_prop_count,json=extraPropCount,proto3" json:"extra_prop_count,omitempty"`
}

func (x *SetAvatarExtraPropOp) Reset() {
	*x = SetAvatarExtraPropOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAvatarExtraPropOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAvatarExtraPropOp) ProtoMessage() {}

func (x *SetAvatarExtraPropOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAvatarExtraPropOp.ProtoReflect.Descriptor instead.
func (*SetAvatarExtraPropOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{76}
}

func (x *SetAvatarExtraPropOp) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *SetAvatarExtraPropOp) GetExtraPropId() uint32 {
	if x != nil {
		return x.ExtraPropId
	}
	return 0
}

func (x *SetAvatarExtraPropOp) GetExtraPropCount() uint32 {
	if x != nil {
		return x.ExtraPropCount
	}
	return 0
}

type AddItemWithLimitOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddItemOp    *AddItemOp `protobuf:"bytes,1,opt,name=add_item_op,json=addItemOp,proto3" json:"add_item_op,omitempty"`
	MaxItemCount uint32     `protobuf:"varint,2,opt,name=max_item_count,json=maxItemCount,proto3" json:"max_item_count,omitempty"`
}

func (x *AddItemWithLimitOp) Reset() {
	*x = AddItemWithLimitOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddItemWithLimitOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddItemWithLimitOp) ProtoMessage() {}

func (x *AddItemWithLimitOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddItemWithLimitOp.ProtoReflect.Descriptor instead.
func (*AddItemWithLimitOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{77}
}

func (x *AddItemWithLimitOp) GetAddItemOp() *AddItemOp {
	if x != nil {
		return x.AddItemOp
	}
	return nil
}

func (x *AddItemWithLimitOp) GetMaxItemCount() uint32 {
	if x != nil {
		return x.MaxItemCount
	}
	return 0
}

type SetGadgetChainLevelOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GadgetchainId    uint32 `protobuf:"varint,1,opt,name=gadgetchain_id,json=gadgetchainId,proto3" json:"gadgetchain_id,omitempty"`
	GadgetchainLevel uint32 `protobuf:"varint,2,opt,name=gadgetchain_level,json=gadgetchainLevel,proto3" json:"gadgetchain_level,omitempty"`
}

func (x *SetGadgetChainLevelOp) Reset() {
	*x = SetGadgetChainLevelOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGadgetChainLevelOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGadgetChainLevelOp) ProtoMessage() {}

func (x *SetGadgetChainLevelOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGadgetChainLevelOp.ProtoReflect.Descriptor instead.
func (*SetGadgetChainLevelOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{78}
}

func (x *SetGadgetChainLevelOp) GetGadgetchainId() uint32 {
	if x != nil {
		return x.GadgetchainId
	}
	return 0
}

func (x *SetGadgetChainLevelOp) GetGadgetchainLevel() uint32 {
	if x != nil {
		return x.GadgetchainLevel
	}
	return 0
}

type SetDailyTaskVarOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId uint32 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Index  uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Value  int32  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SetDailyTaskVarOp) Reset() {
	*x = SetDailyTaskVarOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDailyTaskVarOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDailyTaskVarOp) ProtoMessage() {}

func (x *SetDailyTaskVarOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDailyTaskVarOp.ProtoReflect.Descriptor instead.
func (*SetDailyTaskVarOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{79}
}

func (x *SetDailyTaskVarOp) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *SetDailyTaskVarOp) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SetDailyTaskVarOp) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type AvatarRenameAuditResultOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RenameId   uint32 `protobuf:"varint,1,opt,name=rename_id,json=renameId,proto3" json:"rename_id,omitempty"`
	TargetName string `protobuf:"bytes,2,opt,name=target_name,json=targetName,proto3" json:"target_name,omitempty"`
	IsSucc     bool   `protobuf:"varint,3,opt,name=is_succ,json=isSucc,proto3" json:"is_succ,omitempty"`
	SourceType uint32 `protobuf:"varint,4,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
}

func (x *AvatarRenameAuditResultOp) Reset() {
	*x = AvatarRenameAuditResultOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarRenameAuditResultOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarRenameAuditResultOp) ProtoMessage() {}

func (x *AvatarRenameAuditResultOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarRenameAuditResultOp.ProtoReflect.Descriptor instead.
func (*AvatarRenameAuditResultOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{80}
}

func (x *AvatarRenameAuditResultOp) GetRenameId() uint32 {
	if x != nil {
		return x.RenameId
	}
	return 0
}

func (x *AvatarRenameAuditResultOp) GetTargetName() string {
	if x != nil {
		return x.TargetName
	}
	return ""
}

func (x *AvatarRenameAuditResultOp) GetIsSucc() bool {
	if x != nil {
		return x.IsSucc
	}
	return false
}

func (x *AvatarRenameAuditResultOp) GetSourceType() uint32 {
	if x != nil {
		return x.SourceType
	}
	return 0
}

type ResetAvatarRenameOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId uint32 `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	Reason   uint32 `protobuf:"varint,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ResetAvatarRenameOp) Reset() {
	*x = ResetAvatarRenameOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetAvatarRenameOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetAvatarRenameOp) ProtoMessage() {}

func (x *ResetAvatarRenameOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetAvatarRenameOp.ProtoReflect.Descriptor instead.
func (*ResetAvatarRenameOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{81}
}

func (x *ResetAvatarRenameOp) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *ResetAvatarRenameOp) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

type AddFinishedTalkOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkId uint32 `protobuf:"varint,1,opt,name=talk_id,json=talkId,proto3" json:"talk_id,omitempty"`
}

func (x *AddFinishedTalkOp) Reset() {
	*x = AddFinishedTalkOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFinishedTalkOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFinishedTalkOp) ProtoMessage() {}

func (x *AddFinishedTalkOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFinishedTalkOp.ProtoReflect.Descriptor instead.
func (*AddFinishedTalkOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{82}
}

func (x *AddFinishedTalkOp) GetTalkId() uint32 {
	if x != nil {
		return x.TalkId
	}
	return 0
}

type DelFinishedTalkOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkId uint32 `protobuf:"varint,1,opt,name=talk_id,json=talkId,proto3" json:"talk_id,omitempty"`
}

func (x *DelFinishedTalkOp) Reset() {
	*x = DelFinishedTalkOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelFinishedTalkOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelFinishedTalkOp) ProtoMessage() {}

func (x *DelFinishedTalkOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelFinishedTalkOp.ProtoReflect.Descriptor instead.
func (*DelFinishedTalkOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{83}
}

func (x *DelFinishedTalkOp) GetTalkId() uint32 {
	if x != nil {
		return x.TalkId
	}
	return 0
}

type SetPlayerGCGMatchScoreOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId uint32 `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Score   uint32 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *SetPlayerGCGMatchScoreOp) Reset() {
	*x = SetPlayerGCGMatchScoreOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPlayerGCGMatchScoreOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPlayerGCGMatchScoreOp) ProtoMessage() {}

func (x *SetPlayerGCGMatchScoreOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPlayerGCGMatchScoreOp.ProtoReflect.Descriptor instead.
func (*SetPlayerGCGMatchScoreOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{84}
}

func (x *SetPlayerGCGMatchScoreOp) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *SetPlayerGCGMatchScoreOp) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type SetPushTipsStateOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PushTipsId    uint32 `protobuf:"varint,1,opt,name=push_tips_id,json=pushTipsId,proto3" json:"push_tips_id,omitempty"`
	PushTipsState uint32 `protobuf:"varint,2,opt,name=push_tips_state,json=pushTipsState,proto3" json:"push_tips_state,omitempty"`
}

func (x *SetPushTipsStateOp) Reset() {
	*x = SetPushTipsStateOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPushTipsStateOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPushTipsStateOp) ProtoMessage() {}

func (x *SetPushTipsStateOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPushTipsStateOp.ProtoReflect.Descriptor instead.
func (*SetPushTipsStateOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{85}
}

func (x *SetPushTipsStateOp) GetPushTipsId() uint32 {
	if x != nil {
		return x.PushTipsId
	}
	return 0
}

func (x *SetPushTipsStateOp) GetPushTipsState() uint32 {
	if x != nil {
		return x.PushTipsState
	}
	return 0
}

type DeletePlayerGCGCardOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	DelNum uint32 `protobuf:"varint,2,opt,name=del_num,json=delNum,proto3" json:"del_num,omitempty"`
}

func (x *DeletePlayerGCGCardOp) Reset() {
	*x = DeletePlayerGCGCardOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlayerGCGCardOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlayerGCGCardOp) ProtoMessage() {}

func (x *DeletePlayerGCGCardOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlayerGCGCardOp.ProtoReflect.Descriptor instead.
func (*DeletePlayerGCGCardOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{86}
}

func (x *DeletePlayerGCGCardOp) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *DeletePlayerGCGCardOp) GetDelNum() uint32 {
	if x != nil {
		return x.DelNum
	}
	return 0
}

type DeletePlayerGCGCardFaceOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardFaceId uint32 `protobuf:"varint,1,opt,name=card_face_id,json=cardFaceId,proto3" json:"card_face_id,omitempty"`
}

func (x *DeletePlayerGCGCardFaceOp) Reset() {
	*x = DeletePlayerGCGCardFaceOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlayerGCGCardFaceOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlayerGCGCardFaceOp) ProtoMessage() {}

func (x *DeletePlayerGCGCardFaceOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlayerGCGCardFaceOp.ProtoReflect.Descriptor instead.
func (*DeletePlayerGCGCardFaceOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{87}
}

func (x *DeletePlayerGCGCardFaceOp) GetCardFaceId() uint32 {
	if x != nil {
		return x.CardFaceId
	}
	return 0
}

type DeletePlayerGCGCardBackOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardBackId uint32 `protobuf:"varint,1,opt,name=card_back_id,json=cardBackId,proto3" json:"card_back_id,omitempty"`
}

func (x *DeletePlayerGCGCardBackOp) Reset() {
	*x = DeletePlayerGCGCardBackOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlayerGCGCardBackOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlayerGCGCardBackOp) ProtoMessage() {}

func (x *DeletePlayerGCGCardBackOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlayerGCGCardBackOp.ProtoReflect.Descriptor instead.
func (*DeletePlayerGCGCardBackOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{88}
}

func (x *DeletePlayerGCGCardBackOp) GetCardBackId() uint32 {
	if x != nil {
		return x.CardBackId
	}
	return 0
}

type DeletePlayerGCGDeckFieldOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckFieldId uint32 `protobuf:"varint,1,opt,name=deck_field_id,json=deckFieldId,proto3" json:"deck_field_id,omitempty"`
}

func (x *DeletePlayerGCGDeckFieldOp) Reset() {
	*x = DeletePlayerGCGDeckFieldOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlayerGCGDeckFieldOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlayerGCGDeckFieldOp) ProtoMessage() {}

func (x *DeletePlayerGCGDeckFieldOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlayerGCGDeckFieldOp.ProtoReflect.Descriptor instead.
func (*DeletePlayerGCGDeckFieldOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{89}
}

func (x *DeletePlayerGCGDeckFieldOp) GetDeckFieldId() uint32 {
	if x != nil {
		return x.DeckFieldId
	}
	return 0
}

type BanPlayerGCGMatchOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpireTime uint32 `protobuf:"varint,1,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (x *BanPlayerGCGMatchOp) Reset() {
	*x = BanPlayerGCGMatchOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanPlayerGCGMatchOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanPlayerGCGMatchOp) ProtoMessage() {}

func (x *BanPlayerGCGMatchOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanPlayerGCGMatchOp.ProtoReflect.Descriptor instead.
func (*BanPlayerGCGMatchOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{90}
}

func (x *BanPlayerGCGMatchOp) GetExpireTime() uint32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

type BanPlayerGCGPVPOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpireTime uint32 `protobuf:"varint,1,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (x *BanPlayerGCGPVPOp) Reset() {
	*x = BanPlayerGCGPVPOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanPlayerGCGPVPOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanPlayerGCGPVPOp) ProtoMessage() {}

func (x *BanPlayerGCGPVPOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanPlayerGCGPVPOp.ProtoReflect.Descriptor instead.
func (*BanPlayerGCGPVPOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{91}
}

func (x *BanPlayerGCGPVPOp) GetExpireTime() uint32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

type OfflineMsgBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnqueTime uint32 `protobuf:"fixed32,1,opt,name=enque_time,json=enqueTime,proto3" json:"enque_time,omitempty"`
	Ticket    string `protobuf:"bytes,2,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Index     uint32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	// Types that are assignable to Detail:
	//
	//	*OfflineMsgBin_DelItemOp
	//	*OfflineMsgBin_GotoOp
	//	*OfflineMsgBin_ResetParentQuestOp
	//	*OfflineMsgBin_RefreshGroupOp
	//	*OfflineMsgBin_SetScenePointLockStatusOp
	//	*OfflineMsgBin_SetNickNameOp
	//	*OfflineMsgBin_RefreshShopOp
	//	*OfflineMsgBin_UnlockTalentOp
	//	*OfflineMsgBin_TakeOffEquipOp
	//	*OfflineMsgBin_DelMailOp
	//	*OfflineMsgBin_FinishDailyTaskOp
	//	*OfflineMsgBin_UnlockAreaOp
	//	*OfflineMsgBin_DelItemNegativeOp
	//	*OfflineMsgBin_DelEquipOp
	//	*OfflineMsgBin_AddItemOp
	//	*OfflineMsgBin_ModifyBornPosOp
	//	*OfflineMsgBin_SubCoinNegativeOp
	//	*OfflineMsgBin_SetQuestContentProgressOp
	//	*OfflineMsgBin_FinishOrderOp
	//	*OfflineMsgBin_AddOrModifyWatcherOp
	//	*OfflineMsgBin_DelWatcherOp
	//	*OfflineMsgBin_SetSignatureOp
	//	*OfflineMsgBin_AddOrSubResinOp
	//	*OfflineMsgBin_SetQuestGlobalVarValueOp
	//	*OfflineMsgBin_AddMcoinOp
	//	*OfflineMsgBin_GroupBinOp
	//	*OfflineMsgBin_DelOneOffOp
	//	*OfflineMsgBin_FinishRoutineOp
	//	*OfflineMsgBin_FinishDailyTaskGroupOp
	//	*OfflineMsgBin_RefreshBlossomCircleCampOp
	//	*OfflineMsgBin_BlessingGivePicOp
	//	*OfflineMsgBin_ExpeditionAssistOp
	//	*OfflineMsgBin_RecoverWorldLevelOp
	//	*OfflineMsgBin_ForceAcceptQuestOp
	//	*OfflineMsgBin_SetMainCoopConfidenceOp
	//	*OfflineMsgBin_AddCoopPointSavePointListOp
	//	*OfflineMsgBin_AddRegionSearchProgressOp
	//	*OfflineMsgBin_SetMatchPunishTimesOp
	//	*OfflineMsgBin_ResetChannellerSlabCampGroupOp
	//	*OfflineMsgBin_ProcSceneTagOp
	//	*OfflineMsgBin_SetClimateAreaTypeOp
	//	*OfflineMsgBin_ExchangeMcoinOp
	//	*OfflineMsgBin_SetFinishedParentQuestChildStateOp
	//	*OfflineMsgBin_SetLevel1AreaExplorePointOp
	//	*OfflineMsgBin_SetCodexOpenOrCloseOp
	//	*OfflineMsgBin_ChangeMapAreaInfoOp
	//	*OfflineMsgBin_GroupLinkOp
	//	*OfflineMsgBin_SetWatcherCompRecordValueOp
	//	*OfflineMsgBin_AddFriendOp
	//	*OfflineMsgBin_DelFriendOp
	//	*OfflineMsgBin_AddFriendAskOp
	//	*OfflineMsgBin_DelFriendAskOp
	//	*OfflineMsgBin_BanCustomDungeonOp
	//	*OfflineMsgBin_RemoveInvalidMapMarksOp
	//	*OfflineMsgBin_RecalculateAreaExplorePointOp
	//	*OfflineMsgBin_NicknameAuditResultOp
	//	*OfflineMsgBin_SignatureAuditResultOp
	//	*OfflineMsgBin_PassHomeSceneArrangementAuditOp
	//	*OfflineMsgBin_FailHomeSceneArrangementAuditOp
	//	*OfflineMsgBin_FailHomeModulesArrangementAuditOp
	//	*OfflineMsgBin_BanUgcPublishOp
	//	*OfflineMsgBin_ResetPlayerPersistentDungeonOp
	//	*OfflineMsgBin_ResetPlayerPosInPersistentDungeonOp
	//	*OfflineMsgBin_LevelTagChangeOp
	//	*OfflineMsgBin_ResetPlayerWayPointInPersistentDungeonOp
	//	*OfflineMsgBin_ExhibitionSetOp
	//	*OfflineMsgBin_SetAvatarExtraPropOp
	//	*OfflineMsgBin_AddItemWithLimitOp
	//	*OfflineMsgBin_SetGadgetChainLevelOp
	//	*OfflineMsgBin_SetDailyTaskVarOp
	//	*OfflineMsgBin_AvatarRenameAuditResultOp
	//	*OfflineMsgBin_ResetAvatarRenameOp
	//	*OfflineMsgBin_AddFinishedTalkOp
	//	*OfflineMsgBin_DelFinishedTalkOp
	//	*OfflineMsgBin_SetPlayerGcgMatchScoreOp
	//	*OfflineMsgBin_SetPushTipsStateOp
	//	*OfflineMsgBin_DeletePlayerGcgCardOp
	//	*OfflineMsgBin_DeletePlayerGcgCardFaceOp
	//	*OfflineMsgBin_DeletePlayerGcgCardBackOp
	//	*OfflineMsgBin_DeletePlayerGcgDeckFieldOp
	//	*OfflineMsgBin_BanPlayerGcgMatchOp
	//	*OfflineMsgBin_BanPlayerGcgPvpOp
	Detail isOfflineMsgBin_Detail `protobuf_oneof:"detail"`
}

func (x *OfflineMsgBin) Reset() {
	*x = OfflineMsgBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineMsgBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineMsgBin) ProtoMessage() {}

func (x *OfflineMsgBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineMsgBin.ProtoReflect.Descriptor instead.
func (*OfflineMsgBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{92}
}

func (x *OfflineMsgBin) GetEnqueTime() uint32 {
	if x != nil {
		return x.EnqueTime
	}
	return 0
}

func (x *OfflineMsgBin) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *OfflineMsgBin) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (m *OfflineMsgBin) GetDetail() isOfflineMsgBin_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *OfflineMsgBin) GetDelItemOp() *DelItemOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_DelItemOp); ok {
		return x.DelItemOp
	}
	return nil
}

func (x *OfflineMsgBin) GetGotoOp() *PlayerGotoOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_GotoOp); ok {
		return x.GotoOp
	}
	return nil
}

func (x *OfflineMsgBin) GetResetParentQuestOp() *ResetParentQuestOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_ResetParentQuestOp); ok {
		return x.ResetParentQuestOp
	}
	return nil
}

func (x *OfflineMsgBin) GetRefreshGroupOp() *RefreshGroupOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_RefreshGroupOp); ok {
		return x.RefreshGroupOp
	}
	return nil
}

func (x *OfflineMsgBin) GetSetScenePointLockStatusOp() *SetScenePointLockStatusOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_SetScenePointLockStatusOp); ok {
		return x.SetScenePointLockStatusOp
	}
	return nil
}

func (x *OfflineMsgBin) GetSetNickNameOp() *SetPlayerNickNameOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_SetNickNameOp); ok {
		return x.SetNickNameOp
	}
	return nil
}

func (x *OfflineMsgBin) GetRefreshShopOp() *RefreshShopOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_RefreshShopOp); ok {
		return x.RefreshShopOp
	}
	return nil
}

func (x *OfflineMsgBin) GetUnlockTalentOp() *UnlockTalentOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_UnlockTalentOp); ok {
		return x.UnlockTalentOp
	}
	return nil
}

func (x *OfflineMsgBin) GetTakeOffEquipOp() *TakeOffEquipOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_TakeOffEquipOp); ok {
		return x.TakeOffEquipOp
	}
	return nil
}

func (x *OfflineMsgBin) GetDelMailOp() *DelMailOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_DelMailOp); ok {
		return x.DelMailOp
	}
	return nil
}

func (x *OfflineMsgBin) GetFinishDailyTaskOp() *FinishDailyTaskOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_FinishDailyTaskOp); ok {
		return x.FinishDailyTaskOp
	}
	return nil
}

func (x *OfflineMsgBin) GetUnlockAreaOp() *UnlockAreaOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_UnlockAreaOp); ok {
		return x.UnlockAreaOp
	}
	return nil
}

func (x *OfflineMsgBin) GetDelItemNegativeOp() *DelItemNegativeOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_DelItemNegativeOp); ok {
		return x.DelItemNegativeOp
	}
	return nil
}

func (x *OfflineMsgBin) GetDelEquipOp() *DelEquipOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_DelEquipOp); ok {
		return x.DelEquipOp
	}
	return nil
}

func (x *OfflineMsgBin) GetAddItemOp() *AddItemOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_AddItemOp); ok {
		return x.AddItemOp
	}
	return nil
}

func (x *OfflineMsgBin) GetModifyBornPosOp() *ModifyBornPosOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_ModifyBornPosOp); ok {
		return x.ModifyBornPosOp
	}
	return nil
}

func (x *OfflineMsgBin) GetSubCoinNegativeOp() *SubCoinNegativeOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_SubCoinNegativeOp); ok {
		return x.SubCoinNegativeOp
	}
	return nil
}

func (x *OfflineMsgBin) GetSetQuestContentProgressOp() *SetQuestContentProgressOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_SetQuestContentProgressOp); ok {
		return x.SetQuestContentProgressOp
	}
	return nil
}

func (x *OfflineMsgBin) GetFinishOrderOp() *FinishOrderOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_FinishOrderOp); ok {
		return x.FinishOrderOp
	}
	return nil
}

func (x *OfflineMsgBin) GetAddOrModifyWatcherOp() *AddOrModifyWatcherOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_AddOrModifyWatcherOp); ok {
		return x.AddOrModifyWatcherOp
	}
	return nil
}

func (x *OfflineMsgBin) GetDelWatcherOp() *DelWatcherOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_DelWatcherOp); ok {
		return x.DelWatcherOp
	}
	return nil
}

func (x *OfflineMsgBin) GetSetSignatureOp() *SetSignatureOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_SetSignatureOp); ok {
		return x.SetSignatureOp
	}
	return nil
}

func (x *OfflineMsgBin) GetAddOrSubResinOp() *AddOrSubResinOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_AddOrSubResinOp); ok {
		return x.AddOrSubResinOp
	}
	return nil
}

func (x *OfflineMsgBin) GetSetQuestGlobalVarValueOp() *SetQuestGlobalVarValueOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_SetQuestGlobalVarValueOp); ok {
		return x.SetQuestGlobalVarValueOp
	}
	return nil
}

func (x *OfflineMsgBin) GetAddMcoinOp() *AddMcoinVipPointOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_AddMcoinOp); ok {
		return x.AddMcoinOp
	}
	return nil
}

func (x *OfflineMsgBin) GetGroupBinOp() *GroupBinOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_GroupBinOp); ok {
		return x.GroupBinOp
	}
	return nil
}

func (x *OfflineMsgBin) GetDelOneOffOp() *DelOneOffOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_DelOneOffOp); ok {
		return x.DelOneOffOp
	}
	return nil
}

func (x *OfflineMsgBin) GetFinishRoutineOp() *FinishRoutineOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_FinishRoutineOp); ok {
		return x.FinishRoutineOp
	}
	return nil
}

func (x *OfflineMsgBin) GetFinishDailyTaskGroupOp() *FinishDailyTaskUnloadGroupOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_FinishDailyTaskGroupOp); ok {
		return x.FinishDailyTaskGroupOp
	}
	return nil
}

func (x *OfflineMsgBin) GetRefreshBlossomCircleCampOp() *RefreshBlossomCircleCampOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_RefreshBlossomCircleCampOp); ok {
		return x.RefreshBlossomCircleCampOp
	}
	return nil
}

func (x *OfflineMsgBin) GetBlessingGivePicOp() *BlessingActivityGivePicOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_BlessingGivePicOp); ok {
		return x.BlessingGivePicOp
	}
	return nil
}

func (x *OfflineMsgBin) GetExpeditionAssistOp() *ExpeditionActivityAssistOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_ExpeditionAssistOp); ok {
		return x.ExpeditionAssistOp
	}
	return nil
}

func (x *OfflineMsgBin) GetRecoverWorldLevelOp() *RecoverWorldLevelOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_RecoverWorldLevelOp); ok {
		return x.RecoverWorldLevelOp
	}
	return nil
}

func (x *OfflineMsgBin) GetForceAcceptQuestOp() *ForceAcceptQuestOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_ForceAcceptQuestOp); ok {
		return x.ForceAcceptQuestOp
	}
	return nil
}

func (x *OfflineMsgBin) GetSetMainCoopConfidenceOp() *SetMainCoopConfidenceOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_SetMainCoopConfidenceOp); ok {
		return x.SetMainCoopConfidenceOp
	}
	return nil
}

func (x *OfflineMsgBin) GetAddCoopPointSavePointListOp() *AddCoopPointSavePointListOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_AddCoopPointSavePointListOp); ok {
		return x.AddCoopPointSavePointListOp
	}
	return nil
}

func (x *OfflineMsgBin) GetAddRegionSearchProgressOp() *AddRegionSearchProgressOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_AddRegionSearchProgressOp); ok {
		return x.AddRegionSearchProgressOp
	}
	return nil
}

func (x *OfflineMsgBin) GetSetMatchPunishTimesOp() *SetMatchPunishTimesOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_SetMatchPunishTimesOp); ok {
		return x.SetMatchPunishTimesOp
	}
	return nil
}

func (x *OfflineMsgBin) GetResetChannellerSlabCampGroupOp() *ResetChannellerSlabCampGroupOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_ResetChannellerSlabCampGroupOp); ok {
		return x.ResetChannellerSlabCampGroupOp
	}
	return nil
}

func (x *OfflineMsgBin) GetProcSceneTagOp() *ProcSceneTagOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_ProcSceneTagOp); ok {
		return x.ProcSceneTagOp
	}
	return nil
}

func (x *OfflineMsgBin) GetSetClimateAreaTypeOp() *SetClimateAreaTypeOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_SetClimateAreaTypeOp); ok {
		return x.SetClimateAreaTypeOp
	}
	return nil
}

func (x *OfflineMsgBin) GetExchangeMcoinOp() *ExchangeMcoinOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_ExchangeMcoinOp); ok {
		return x.ExchangeMcoinOp
	}
	return nil
}

func (x *OfflineMsgBin) GetSetFinishedParentQuestChildStateOp() *SetFinishedParentQuestChildStateOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_SetFinishedParentQuestChildStateOp); ok {
		return x.SetFinishedParentQuestChildStateOp
	}
	return nil
}

func (x *OfflineMsgBin) GetSetLevel1AreaExplorePointOp() *SetLevel1AreaExplorePointOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_SetLevel1AreaExplorePointOp); ok {
		return x.SetLevel1AreaExplorePointOp
	}
	return nil
}

func (x *OfflineMsgBin) GetSetCodexOpenOrCloseOp() *SetCodexOpenOrCloseOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_SetCodexOpenOrCloseOp); ok {
		return x.SetCodexOpenOrCloseOp
	}
	return nil
}

func (x *OfflineMsgBin) GetChangeMapAreaInfoOp() *ChangeMapAreaInfoOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_ChangeMapAreaInfoOp); ok {
		return x.ChangeMapAreaInfoOp
	}
	return nil
}

func (x *OfflineMsgBin) GetGroupLinkOp() *GroupLinkOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_GroupLinkOp); ok {
		return x.GroupLinkOp
	}
	return nil
}

func (x *OfflineMsgBin) GetSetWatcherCompRecordValueOp() *SetWatcherCompRecordValueOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_SetWatcherCompRecordValueOp); ok {
		return x.SetWatcherCompRecordValueOp
	}
	return nil
}

func (x *OfflineMsgBin) GetAddFriendOp() *AddFriendOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_AddFriendOp); ok {
		return x.AddFriendOp
	}
	return nil
}

func (x *OfflineMsgBin) GetDelFriendOp() *DelFriendOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_DelFriendOp); ok {
		return x.DelFriendOp
	}
	return nil
}

func (x *OfflineMsgBin) GetAddFriendAskOp() *AddFriendAskOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_AddFriendAskOp); ok {
		return x.AddFriendAskOp
	}
	return nil
}

func (x *OfflineMsgBin) GetDelFriendAskOp() *DelFriendAskOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_DelFriendAskOp); ok {
		return x.DelFriendAskOp
	}
	return nil
}

func (x *OfflineMsgBin) GetBanCustomDungeonOp() *BanCustomDungeonOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_BanCustomDungeonOp); ok {
		return x.BanCustomDungeonOp
	}
	return nil
}

func (x *OfflineMsgBin) GetRemoveInvalidMapMarksOp() *RemoveInvalidMapMarksOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_RemoveInvalidMapMarksOp); ok {
		return x.RemoveInvalidMapMarksOp
	}
	return nil
}

func (x *OfflineMsgBin) GetRecalculateAreaExplorePointOp() *RecalculateAreaExplorePointOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_RecalculateAreaExplorePointOp); ok {
		return x.RecalculateAreaExplorePointOp
	}
	return nil
}

func (x *OfflineMsgBin) GetNicknameAuditResultOp() *NicknameAuditResultOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_NicknameAuditResultOp); ok {
		return x.NicknameAuditResultOp
	}
	return nil
}

func (x *OfflineMsgBin) GetSignatureAuditResultOp() *SignatureAuditResultOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_SignatureAuditResultOp); ok {
		return x.SignatureAuditResultOp
	}
	return nil
}

func (x *OfflineMsgBin) GetPassHomeSceneArrangementAuditOp() *PassHomeSceneArrangementAuditOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_PassHomeSceneArrangementAuditOp); ok {
		return x.PassHomeSceneArrangementAuditOp
	}
	return nil
}

func (x *OfflineMsgBin) GetFailHomeSceneArrangementAuditOp() *FailHomeSceneArrangementAuditOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_FailHomeSceneArrangementAuditOp); ok {
		return x.FailHomeSceneArrangementAuditOp
	}
	return nil
}

func (x *OfflineMsgBin) GetFailHomeModulesArrangementAuditOp() *FailHomeModulesArrangementAuditOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_FailHomeModulesArrangementAuditOp); ok {
		return x.FailHomeModulesArrangementAuditOp
	}
	return nil
}

func (x *OfflineMsgBin) GetBanUgcPublishOp() *BanUgcPublishOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_BanUgcPublishOp); ok {
		return x.BanUgcPublishOp
	}
	return nil
}

func (x *OfflineMsgBin) GetResetPlayerPersistentDungeonOp() *ResetPlayerPersistentDungeonOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_ResetPlayerPersistentDungeonOp); ok {
		return x.ResetPlayerPersistentDungeonOp
	}
	return nil
}

func (x *OfflineMsgBin) GetResetPlayerPosInPersistentDungeonOp() *ResetPlayerPosInPersistentDungeonOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_ResetPlayerPosInPersistentDungeonOp); ok {
		return x.ResetPlayerPosInPersistentDungeonOp
	}
	return nil
}

func (x *OfflineMsgBin) GetLevelTagChangeOp() *LevelTagChangeOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_LevelTagChangeOp); ok {
		return x.LevelTagChangeOp
	}
	return nil
}

func (x *OfflineMsgBin) GetResetPlayerWayPointInPersistentDungeonOp() *ResetPlayerWayPointInPersistentDungeonOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_ResetPlayerWayPointInPersistentDungeonOp); ok {
		return x.ResetPlayerWayPointInPersistentDungeonOp
	}
	return nil
}

func (x *OfflineMsgBin) GetExhibitionSetOp() *ExhibitionSetOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_ExhibitionSetOp); ok {
		return x.ExhibitionSetOp
	}
	return nil
}

func (x *OfflineMsgBin) GetSetAvatarExtraPropOp() *SetAvatarExtraPropOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_SetAvatarExtraPropOp); ok {
		return x.SetAvatarExtraPropOp
	}
	return nil
}

func (x *OfflineMsgBin) GetAddItemWithLimitOp() *AddItemWithLimitOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_AddItemWithLimitOp); ok {
		return x.AddItemWithLimitOp
	}
	return nil
}

func (x *OfflineMsgBin) GetSetGadgetChainLevelOp() *SetGadgetChainLevelOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_SetGadgetChainLevelOp); ok {
		return x.SetGadgetChainLevelOp
	}
	return nil
}

func (x *OfflineMsgBin) GetSetDailyTaskVarOp() *SetDailyTaskVarOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_SetDailyTaskVarOp); ok {
		return x.SetDailyTaskVarOp
	}
	return nil
}

func (x *OfflineMsgBin) GetAvatarRenameAuditResultOp() *AvatarRenameAuditResultOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_AvatarRenameAuditResultOp); ok {
		return x.AvatarRenameAuditResultOp
	}
	return nil
}

func (x *OfflineMsgBin) GetResetAvatarRenameOp() *ResetAvatarRenameOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_ResetAvatarRenameOp); ok {
		return x.ResetAvatarRenameOp
	}
	return nil
}

func (x *OfflineMsgBin) GetAddFinishedTalkOp() *AddFinishedTalkOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_AddFinishedTalkOp); ok {
		return x.AddFinishedTalkOp
	}
	return nil
}

func (x *OfflineMsgBin) GetDelFinishedTalkOp() *DelFinishedTalkOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_DelFinishedTalkOp); ok {
		return x.DelFinishedTalkOp
	}
	return nil
}

func (x *OfflineMsgBin) GetSetPlayerGcgMatchScoreOp() *SetPlayerGCGMatchScoreOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_SetPlayerGcgMatchScoreOp); ok {
		return x.SetPlayerGcgMatchScoreOp
	}
	return nil
}

func (x *OfflineMsgBin) GetSetPushTipsStateOp() *SetPushTipsStateOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_SetPushTipsStateOp); ok {
		return x.SetPushTipsStateOp
	}
	return nil
}

func (x *OfflineMsgBin) GetDeletePlayerGcgCardOp() *DeletePlayerGCGCardOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_DeletePlayerGcgCardOp); ok {
		return x.DeletePlayerGcgCardOp
	}
	return nil
}

func (x *OfflineMsgBin) GetDeletePlayerGcgCardFaceOp() *DeletePlayerGCGCardFaceOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_DeletePlayerGcgCardFaceOp); ok {
		return x.DeletePlayerGcgCardFaceOp
	}
	return nil
}

func (x *OfflineMsgBin) GetDeletePlayerGcgCardBackOp() *DeletePlayerGCGCardBackOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_DeletePlayerGcgCardBackOp); ok {
		return x.DeletePlayerGcgCardBackOp
	}
	return nil
}

func (x *OfflineMsgBin) GetDeletePlayerGcgDeckFieldOp() *DeletePlayerGCGDeckFieldOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_DeletePlayerGcgDeckFieldOp); ok {
		return x.DeletePlayerGcgDeckFieldOp
	}
	return nil
}

func (x *OfflineMsgBin) GetBanPlayerGcgMatchOp() *BanPlayerGCGMatchOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_BanPlayerGcgMatchOp); ok {
		return x.BanPlayerGcgMatchOp
	}
	return nil
}

func (x *OfflineMsgBin) GetBanPlayerGcgPvpOp() *BanPlayerGCGPVPOp {
	if x, ok := x.GetDetail().(*OfflineMsgBin_BanPlayerGcgPvpOp); ok {
		return x.BanPlayerGcgPvpOp
	}
	return nil
}

type isOfflineMsgBin_Detail interface {
	isOfflineMsgBin_Detail()
}

type OfflineMsgBin_DelItemOp struct {
	DelItemOp *DelItemOp `protobuf:"bytes,4,opt,name=del_item_op,json=delItemOp,proto3,oneof"`
}

type OfflineMsgBin_GotoOp struct {
	GotoOp *PlayerGotoOp `protobuf:"bytes,5,opt,name=goto_op,json=gotoOp,proto3,oneof"`
}

type OfflineMsgBin_ResetParentQuestOp struct {
	ResetParentQuestOp *ResetParentQuestOp `protobuf:"bytes,6,opt,name=reset_parent_quest_op,json=resetParentQuestOp,proto3,oneof"`
}

type OfflineMsgBin_RefreshGroupOp struct {
	RefreshGroupOp *RefreshGroupOp `protobuf:"bytes,7,opt,name=refresh_group_op,json=refreshGroupOp,proto3,oneof"`
}

type OfflineMsgBin_SetScenePointLockStatusOp struct {
	SetScenePointLockStatusOp *SetScenePointLockStatusOp `protobuf:"bytes,8,opt,name=set_scene_point_lock_status_op,json=setScenePointLockStatusOp,proto3,oneof"`
}

type OfflineMsgBin_SetNickNameOp struct {
	SetNickNameOp *SetPlayerNickNameOp `protobuf:"bytes,9,opt,name=set_nick_name_op,json=setNickNameOp,proto3,oneof"`
}

type OfflineMsgBin_RefreshShopOp struct {
	RefreshShopOp *RefreshShopOp `protobuf:"bytes,10,opt,name=refresh_shop_op,json=refreshShopOp,proto3,oneof"`
}

type OfflineMsgBin_UnlockTalentOp struct {
	UnlockTalentOp *UnlockTalentOp `protobuf:"bytes,11,opt,name=unlock_talent_op,json=unlockTalentOp,proto3,oneof"`
}

type OfflineMsgBin_TakeOffEquipOp struct {
	TakeOffEquipOp *TakeOffEquipOp `protobuf:"bytes,12,opt,name=take_off_equip_op,json=takeOffEquipOp,proto3,oneof"`
}

type OfflineMsgBin_DelMailOp struct {
	DelMailOp *DelMailOp `protobuf:"bytes,13,opt,name=del_mail_op,json=delMailOp,proto3,oneof"`
}

type OfflineMsgBin_FinishDailyTaskOp struct {
	FinishDailyTaskOp *FinishDailyTaskOp `protobuf:"bytes,14,opt,name=finish_daily_task_op,json=finishDailyTaskOp,proto3,oneof"`
}

type OfflineMsgBin_UnlockAreaOp struct {
	UnlockAreaOp *UnlockAreaOp `protobuf:"bytes,15,opt,name=unlock_area_op,json=unlockAreaOp,proto3,oneof"`
}

type OfflineMsgBin_DelItemNegativeOp struct {
	DelItemNegativeOp *DelItemNegativeOp `protobuf:"bytes,16,opt,name=del_item_negative_op,json=delItemNegativeOp,proto3,oneof"`
}

type OfflineMsgBin_DelEquipOp struct {
	DelEquipOp *DelEquipOp `protobuf:"bytes,17,opt,name=del_equip_op,json=delEquipOp,proto3,oneof"`
}

type OfflineMsgBin_AddItemOp struct {
	AddItemOp *AddItemOp `protobuf:"bytes,18,opt,name=add_item_op,json=addItemOp,proto3,oneof"`
}

type OfflineMsgBin_ModifyBornPosOp struct {
	ModifyBornPosOp *ModifyBornPosOp `protobuf:"bytes,19,opt,name=modify_born_pos_op,json=modifyBornPosOp,proto3,oneof"`
}

type OfflineMsgBin_SubCoinNegativeOp struct {
	SubCoinNegativeOp *SubCoinNegativeOp `protobuf:"bytes,20,opt,name=sub_coin_negative_op,json=subCoinNegativeOp,proto3,oneof"`
}

type OfflineMsgBin_SetQuestContentProgressOp struct {
	SetQuestContentProgressOp *SetQuestContentProgressOp `protobuf:"bytes,21,opt,name=set_quest_content_progress_op,json=setQuestContentProgressOp,proto3,oneof"`
}

type OfflineMsgBin_FinishOrderOp struct {
	FinishOrderOp *FinishOrderOp `protobuf:"bytes,22,opt,name=finish_order_op,json=finishOrderOp,proto3,oneof"`
}

type OfflineMsgBin_AddOrModifyWatcherOp struct {
	AddOrModifyWatcherOp *AddOrModifyWatcherOp `protobuf:"bytes,23,opt,name=add_or_modify_watcher_op,json=addOrModifyWatcherOp,proto3,oneof"`
}

type OfflineMsgBin_DelWatcherOp struct {
	DelWatcherOp *DelWatcherOp `protobuf:"bytes,24,opt,name=del_watcher_op,json=delWatcherOp,proto3,oneof"`
}

type OfflineMsgBin_SetSignatureOp struct {
	SetSignatureOp *SetSignatureOp `protobuf:"bytes,25,opt,name=set_signature_op,json=setSignatureOp,proto3,oneof"`
}

type OfflineMsgBin_AddOrSubResinOp struct {
	AddOrSubResinOp *AddOrSubResinOp `protobuf:"bytes,26,opt,name=add_or_sub_resin_op,json=addOrSubResinOp,proto3,oneof"`
}

type OfflineMsgBin_SetQuestGlobalVarValueOp struct {
	SetQuestGlobalVarValueOp *SetQuestGlobalVarValueOp `protobuf:"bytes,27,opt,name=set_quest_global_var_value_op,json=setQuestGlobalVarValueOp,proto3,oneof"`
}

type OfflineMsgBin_AddMcoinOp struct {
	AddMcoinOp *AddMcoinVipPointOp `protobuf:"bytes,28,opt,name=add_mcoin_op,json=addMcoinOp,proto3,oneof"`
}

type OfflineMsgBin_GroupBinOp struct {
	GroupBinOp *GroupBinOp `protobuf:"bytes,29,opt,name=group_bin_op,json=groupBinOp,proto3,oneof"`
}

type OfflineMsgBin_DelOneOffOp struct {
	DelOneOffOp *DelOneOffOp `protobuf:"bytes,30,opt,name=del_one_off_op,json=delOneOffOp,proto3,oneof"`
}

type OfflineMsgBin_FinishRoutineOp struct {
	FinishRoutineOp *FinishRoutineOp `protobuf:"bytes,31,opt,name=finish_routine_op,json=finishRoutineOp,proto3,oneof"`
}

type OfflineMsgBin_FinishDailyTaskGroupOp struct {
	FinishDailyTaskGroupOp *FinishDailyTaskUnloadGroupOp `protobuf:"bytes,32,opt,name=finish_daily_task_group_op,json=finishDailyTaskGroupOp,proto3,oneof"`
}

type OfflineMsgBin_RefreshBlossomCircleCampOp struct {
	RefreshBlossomCircleCampOp *RefreshBlossomCircleCampOp `protobuf:"bytes,33,opt,name=refresh_blossom_circle_camp_op,json=refreshBlossomCircleCampOp,proto3,oneof"`
}

type OfflineMsgBin_BlessingGivePicOp struct {
	BlessingGivePicOp *BlessingActivityGivePicOp `protobuf:"bytes,34,opt,name=blessing_give_pic_op,json=blessingGivePicOp,proto3,oneof"`
}

type OfflineMsgBin_ExpeditionAssistOp struct {
	ExpeditionAssistOp *ExpeditionActivityAssistOp `protobuf:"bytes,35,opt,name=expedition_assist_op,json=expeditionAssistOp,proto3,oneof"`
}

type OfflineMsgBin_RecoverWorldLevelOp struct {
	RecoverWorldLevelOp *RecoverWorldLevelOp `protobuf:"bytes,36,opt,name=recover_world_level_op,json=recoverWorldLevelOp,proto3,oneof"`
}

type OfflineMsgBin_ForceAcceptQuestOp struct {
	ForceAcceptQuestOp *ForceAcceptQuestOp `protobuf:"bytes,37,opt,name=force_accept_quest_op,json=forceAcceptQuestOp,proto3,oneof"`
}

type OfflineMsgBin_SetMainCoopConfidenceOp struct {
	SetMainCoopConfidenceOp *SetMainCoopConfidenceOp `protobuf:"bytes,38,opt,name=set_main_coop_confidence_op,json=setMainCoopConfidenceOp,proto3,oneof"`
}

type OfflineMsgBin_AddCoopPointSavePointListOp struct {
	AddCoopPointSavePointListOp *AddCoopPointSavePointListOp `protobuf:"bytes,39,opt,name=add_coop_point_save_point_list_op,json=addCoopPointSavePointListOp,proto3,oneof"`
}

type OfflineMsgBin_AddRegionSearchProgressOp struct {
	AddRegionSearchProgressOp *AddRegionSearchProgressOp `protobuf:"bytes,40,opt,name=add_region_search_progress_op,json=addRegionSearchProgressOp,proto3,oneof"`
}

type OfflineMsgBin_SetMatchPunishTimesOp struct {
	SetMatchPunishTimesOp *SetMatchPunishTimesOp `protobuf:"bytes,41,opt,name=set_match_punish_times_op,json=setMatchPunishTimesOp,proto3,oneof"`
}

type OfflineMsgBin_ResetChannellerSlabCampGroupOp struct {
	ResetChannellerSlabCampGroupOp *ResetChannellerSlabCampGroupOp `protobuf:"bytes,42,opt,name=reset_channeller_slab_camp_group_op,json=resetChannellerSlabCampGroupOp,proto3,oneof"`
}

type OfflineMsgBin_ProcSceneTagOp struct {
	ProcSceneTagOp *ProcSceneTagOp `protobuf:"bytes,43,opt,name=proc_scene_tag_op,json=procSceneTagOp,proto3,oneof"`
}

type OfflineMsgBin_SetClimateAreaTypeOp struct {
	SetClimateAreaTypeOp *SetClimateAreaTypeOp `protobuf:"bytes,44,opt,name=set_climate_area_type_op,json=setClimateAreaTypeOp,proto3,oneof"`
}

type OfflineMsgBin_ExchangeMcoinOp struct {
	ExchangeMcoinOp *ExchangeMcoinOp `protobuf:"bytes,45,opt,name=exchange_mcoin_op,json=exchangeMcoinOp,proto3,oneof"`
}

type OfflineMsgBin_SetFinishedParentQuestChildStateOp struct {
	SetFinishedParentQuestChildStateOp *SetFinishedParentQuestChildStateOp `protobuf:"bytes,46,opt,name=set_finished_parent_quest_child_state_op,json=setFinishedParentQuestChildStateOp,proto3,oneof"`
}

type OfflineMsgBin_SetLevel1AreaExplorePointOp struct {
	SetLevel1AreaExplorePointOp *SetLevel1AreaExplorePointOp `protobuf:"bytes,47,opt,name=set_level1_area_explore_point_op,json=setLevel1AreaExplorePointOp,proto3,oneof"`
}

type OfflineMsgBin_SetCodexOpenOrCloseOp struct {
	SetCodexOpenOrCloseOp *SetCodexOpenOrCloseOp `protobuf:"bytes,48,opt,name=set_codex_open_or_close_op,json=setCodexOpenOrCloseOp,proto3,oneof"`
}

type OfflineMsgBin_ChangeMapAreaInfoOp struct {
	ChangeMapAreaInfoOp *ChangeMapAreaInfoOp `protobuf:"bytes,49,opt,name=change_map_area_info_op,json=changeMapAreaInfoOp,proto3,oneof"`
}

type OfflineMsgBin_GroupLinkOp struct {
	GroupLinkOp *GroupLinkOp `protobuf:"bytes,50,opt,name=group_link_op,json=groupLinkOp,proto3,oneof"`
}

type OfflineMsgBin_SetWatcherCompRecordValueOp struct {
	SetWatcherCompRecordValueOp *SetWatcherCompRecordValueOp `protobuf:"bytes,51,opt,name=set_watcher_comp_record_value_op,json=setWatcherCompRecordValueOp,proto3,oneof"`
}

type OfflineMsgBin_AddFriendOp struct {
	AddFriendOp *AddFriendOp `protobuf:"bytes,52,opt,name=add_friend_op,json=addFriendOp,proto3,oneof"`
}

type OfflineMsgBin_DelFriendOp struct {
	DelFriendOp *DelFriendOp `protobuf:"bytes,53,opt,name=del_friend_op,json=delFriendOp,proto3,oneof"`
}

type OfflineMsgBin_AddFriendAskOp struct {
	AddFriendAskOp *AddFriendAskOp `protobuf:"bytes,54,opt,name=add_friend_ask_op,json=addFriendAskOp,proto3,oneof"`
}

type OfflineMsgBin_DelFriendAskOp struct {
	DelFriendAskOp *DelFriendAskOp `protobuf:"bytes,55,opt,name=del_friend_ask_op,json=delFriendAskOp,proto3,oneof"`
}

type OfflineMsgBin_BanCustomDungeonOp struct {
	BanCustomDungeonOp *BanCustomDungeonOp `protobuf:"bytes,56,opt,name=ban_custom_dungeon_op,json=banCustomDungeonOp,proto3,oneof"`
}

type OfflineMsgBin_RemoveInvalidMapMarksOp struct {
	RemoveInvalidMapMarksOp *RemoveInvalidMapMarksOp `protobuf:"bytes,57,opt,name=remove_invalid_map_marks_op,json=removeInvalidMapMarksOp,proto3,oneof"`
}

type OfflineMsgBin_RecalculateAreaExplorePointOp struct {
	RecalculateAreaExplorePointOp *RecalculateAreaExplorePointOp `protobuf:"bytes,58,opt,name=recalculate_area_explore_point_op,json=recalculateAreaExplorePointOp,proto3,oneof"`
}

type OfflineMsgBin_NicknameAuditResultOp struct {
	NicknameAuditResultOp *NicknameAuditResultOp `protobuf:"bytes,59,opt,name=nickname_audit_result_op,json=nicknameAuditResultOp,proto3,oneof"`
}

type OfflineMsgBin_SignatureAuditResultOp struct {
	SignatureAuditResultOp *SignatureAuditResultOp `protobuf:"bytes,60,opt,name=signature_audit_result_op,json=signatureAuditResultOp,proto3,oneof"`
}

type OfflineMsgBin_PassHomeSceneArrangementAuditOp struct {
	PassHomeSceneArrangementAuditOp *PassHomeSceneArrangementAuditOp `protobuf:"bytes,61,opt,name=pass_home_scene_arrangement_audit_op,json=passHomeSceneArrangementAuditOp,proto3,oneof"`
}

type OfflineMsgBin_FailHomeSceneArrangementAuditOp struct {
	FailHomeSceneArrangementAuditOp *FailHomeSceneArrangementAuditOp `protobuf:"bytes,62,opt,name=fail_home_scene_arrangement_audit_op,json=failHomeSceneArrangementAuditOp,proto3,oneof"`
}

type OfflineMsgBin_FailHomeModulesArrangementAuditOp struct {
	FailHomeModulesArrangementAuditOp *FailHomeModulesArrangementAuditOp `protobuf:"bytes,63,opt,name=fail_home_modules_arrangement_audit_op,json=failHomeModulesArrangementAuditOp,proto3,oneof"`
}

type OfflineMsgBin_BanUgcPublishOp struct {
	BanUgcPublishOp *BanUgcPublishOp `protobuf:"bytes,64,opt,name=ban_ugc_publish_op,json=banUgcPublishOp,proto3,oneof"`
}

type OfflineMsgBin_ResetPlayerPersistentDungeonOp struct {
	ResetPlayerPersistentDungeonOp *ResetPlayerPersistentDungeonOp `protobuf:"bytes,28001,opt,name=reset_player_persistent_dungeon_op,json=resetPlayerPersistentDungeonOp,proto3,oneof"`
}

type OfflineMsgBin_ResetPlayerPosInPersistentDungeonOp struct {
	ResetPlayerPosInPersistentDungeonOp *ResetPlayerPosInPersistentDungeonOp `protobuf:"bytes,28002,opt,name=reset_player_pos_in_persistent_dungeon_op,json=resetPlayerPosInPersistentDungeonOp,proto3,oneof"`
}

type OfflineMsgBin_LevelTagChangeOp struct {
	LevelTagChangeOp *LevelTagChangeOp `protobuf:"bytes,28003,opt,name=level_tag_change_op,json=levelTagChangeOp,proto3,oneof"`
}

type OfflineMsgBin_ResetPlayerWayPointInPersistentDungeonOp struct {
	ResetPlayerWayPointInPersistentDungeonOp *ResetPlayerWayPointInPersistentDungeonOp `protobuf:"bytes,28004,opt,name=reset_player_way_point_in_persistent_dungeon_op,json=resetPlayerWayPointInPersistentDungeonOp,proto3,oneof"`
}

type OfflineMsgBin_ExhibitionSetOp struct {
	ExhibitionSetOp *ExhibitionSetOp `protobuf:"bytes,30000,opt,name=exhibition_set_op,json=exhibitionSetOp,proto3,oneof"`
}

type OfflineMsgBin_SetAvatarExtraPropOp struct {
	SetAvatarExtraPropOp *SetAvatarExtraPropOp `protobuf:"bytes,30001,opt,name=set_avatar_extra_prop_op,json=setAvatarExtraPropOp,proto3,oneof"`
}

type OfflineMsgBin_AddItemWithLimitOp struct {
	AddItemWithLimitOp *AddItemWithLimitOp `protobuf:"bytes,30002,opt,name=add_item_with_limit_op,json=addItemWithLimitOp,proto3,oneof"`
}

type OfflineMsgBin_SetGadgetChainLevelOp struct {
	SetGadgetChainLevelOp *SetGadgetChainLevelOp `protobuf:"bytes,31001,opt,name=set_gadget_chain_level_op,json=setGadgetChainLevelOp,proto3,oneof"`
}

type OfflineMsgBin_SetDailyTaskVarOp struct {
	SetDailyTaskVarOp *SetDailyTaskVarOp `protobuf:"bytes,32001,opt,name=set_daily_task_var_op,json=setDailyTaskVarOp,proto3,oneof"`
}

type OfflineMsgBin_AvatarRenameAuditResultOp struct {
	AvatarRenameAuditResultOp *AvatarRenameAuditResultOp `protobuf:"bytes,33001,opt,name=avatar_rename_audit_result_op,json=avatarRenameAuditResultOp,proto3,oneof"`
}

type OfflineMsgBin_ResetAvatarRenameOp struct {
	ResetAvatarRenameOp *ResetAvatarRenameOp `protobuf:"bytes,33002,opt,name=reset_avatar_rename_op,json=resetAvatarRenameOp,proto3,oneof"`
}

type OfflineMsgBin_AddFinishedTalkOp struct {
	AddFinishedTalkOp *AddFinishedTalkOp `protobuf:"bytes,33003,opt,name=add_finished_talk_op,json=addFinishedTalkOp,proto3,oneof"`
}

type OfflineMsgBin_DelFinishedTalkOp struct {
	DelFinishedTalkOp *DelFinishedTalkOp `protobuf:"bytes,33004,opt,name=del_finished_talk_op,json=delFinishedTalkOp,proto3,oneof"`
}

type OfflineMsgBin_SetPlayerGcgMatchScoreOp struct {
	SetPlayerGcgMatchScoreOp *SetPlayerGCGMatchScoreOp `protobuf:"bytes,33005,opt,name=set_player_gcg_match_score_op,json=setPlayerGcgMatchScoreOp,proto3,oneof"`
}

type OfflineMsgBin_SetPushTipsStateOp struct {
	SetPushTipsStateOp *SetPushTipsStateOp `protobuf:"bytes,33006,opt,name=set_push_tips_state_op,json=setPushTipsStateOp,proto3,oneof"`
}

type OfflineMsgBin_DeletePlayerGcgCardOp struct {
	DeletePlayerGcgCardOp *DeletePlayerGCGCardOp `protobuf:"bytes,33007,opt,name=delete_player_gcg_card_op,json=deletePlayerGcgCardOp,proto3,oneof"`
}

type OfflineMsgBin_DeletePlayerGcgCardFaceOp struct {
	DeletePlayerGcgCardFaceOp *DeletePlayerGCGCardFaceOp `protobuf:"bytes,33008,opt,name=delete_player_gcg_card_face_op,json=deletePlayerGcgCardFaceOp,proto3,oneof"`
}

type OfflineMsgBin_DeletePlayerGcgCardBackOp struct {
	DeletePlayerGcgCardBackOp *DeletePlayerGCGCardBackOp `protobuf:"bytes,33009,opt,name=delete_player_gcg_card_back_op,json=deletePlayerGcgCardBackOp,proto3,oneof"`
}

type OfflineMsgBin_DeletePlayerGcgDeckFieldOp struct {
	DeletePlayerGcgDeckFieldOp *DeletePlayerGCGDeckFieldOp `protobuf:"bytes,33010,opt,name=delete_player_gcg_deck_field_op,json=deletePlayerGcgDeckFieldOp,proto3,oneof"`
}

type OfflineMsgBin_BanPlayerGcgMatchOp struct {
	BanPlayerGcgMatchOp *BanPlayerGCGMatchOp `protobuf:"bytes,33011,opt,name=ban_player_gcg_match_op,json=banPlayerGcgMatchOp,proto3,oneof"`
}

type OfflineMsgBin_BanPlayerGcgPvpOp struct {
	BanPlayerGcgPvpOp *BanPlayerGCGPVPOp `protobuf:"bytes,33012,opt,name=ban_player_gcg_pvp_op,json=banPlayerGcgPvpOp,proto3,oneof"`
}

func (*OfflineMsgBin_DelItemOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_GotoOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_ResetParentQuestOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_RefreshGroupOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_SetScenePointLockStatusOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_SetNickNameOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_RefreshShopOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_UnlockTalentOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_TakeOffEquipOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_DelMailOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_FinishDailyTaskOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_UnlockAreaOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_DelItemNegativeOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_DelEquipOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_AddItemOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_ModifyBornPosOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_SubCoinNegativeOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_SetQuestContentProgressOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_FinishOrderOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_AddOrModifyWatcherOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_DelWatcherOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_SetSignatureOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_AddOrSubResinOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_SetQuestGlobalVarValueOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_AddMcoinOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_GroupBinOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_DelOneOffOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_FinishRoutineOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_FinishDailyTaskGroupOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_RefreshBlossomCircleCampOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_BlessingGivePicOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_ExpeditionAssistOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_RecoverWorldLevelOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_ForceAcceptQuestOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_SetMainCoopConfidenceOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_AddCoopPointSavePointListOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_AddRegionSearchProgressOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_SetMatchPunishTimesOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_ResetChannellerSlabCampGroupOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_ProcSceneTagOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_SetClimateAreaTypeOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_ExchangeMcoinOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_SetFinishedParentQuestChildStateOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_SetLevel1AreaExplorePointOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_SetCodexOpenOrCloseOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_ChangeMapAreaInfoOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_GroupLinkOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_SetWatcherCompRecordValueOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_AddFriendOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_DelFriendOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_AddFriendAskOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_DelFriendAskOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_BanCustomDungeonOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_RemoveInvalidMapMarksOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_RecalculateAreaExplorePointOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_NicknameAuditResultOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_SignatureAuditResultOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_PassHomeSceneArrangementAuditOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_FailHomeSceneArrangementAuditOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_FailHomeModulesArrangementAuditOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_BanUgcPublishOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_ResetPlayerPersistentDungeonOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_ResetPlayerPosInPersistentDungeonOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_LevelTagChangeOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_ResetPlayerWayPointInPersistentDungeonOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_ExhibitionSetOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_SetAvatarExtraPropOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_AddItemWithLimitOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_SetGadgetChainLevelOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_SetDailyTaskVarOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_AvatarRenameAuditResultOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_ResetAvatarRenameOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_AddFinishedTalkOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_DelFinishedTalkOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_SetPlayerGcgMatchScoreOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_SetPushTipsStateOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_DeletePlayerGcgCardOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_DeletePlayerGcgCardFaceOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_DeletePlayerGcgCardBackOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_DeletePlayerGcgDeckFieldOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_BanPlayerGcgMatchOp) isOfflineMsgBin_Detail() {}

func (*OfflineMsgBin_BanPlayerGcgPvpOp) isOfflineMsgBin_Detail() {}

type HomeTestOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val uint32 `protobuf:"varint,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *HomeTestOp) Reset() {
	*x = HomeTestOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeTestOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeTestOp) ProtoMessage() {}

func (x *HomeTestOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeTestOp.ProtoReflect.Descriptor instead.
func (*HomeTestOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{93}
}

func (x *HomeTestOp) GetVal() uint32 {
	if x != nil {
		return x.Val
	}
	return 0
}

type HomeRestoreDefaultsArrangementOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAllModule  bool     `protobuf:"varint,1,opt,name=is_all_module,json=isAllModule,proto3" json:"is_all_module,omitempty"`
	ModuleIdList []uint32 `protobuf:"varint,2,rep,packed,name=module_id_list,json=moduleIdList,proto3" json:"module_id_list,omitempty"`
	Version      uint32   `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *HomeRestoreDefaultsArrangementOp) Reset() {
	*x = HomeRestoreDefaultsArrangementOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeRestoreDefaultsArrangementOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeRestoreDefaultsArrangementOp) ProtoMessage() {}

func (x *HomeRestoreDefaultsArrangementOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeRestoreDefaultsArrangementOp.ProtoReflect.Descriptor instead.
func (*HomeRestoreDefaultsArrangementOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{94}
}

func (x *HomeRestoreDefaultsArrangementOp) GetIsAllModule() bool {
	if x != nil {
		return x.IsAllModule
	}
	return false
}

func (x *HomeRestoreDefaultsArrangementOp) GetModuleIdList() []uint32 {
	if x != nil {
		return x.ModuleIdList
	}
	return nil
}

func (x *HomeRestoreDefaultsArrangementOp) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type HomeRestoreDefaultsSceneArrangementOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleId uint32 `protobuf:"varint,1,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	SceneId  uint32 `protobuf:"varint,2,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	Version  uint32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *HomeRestoreDefaultsSceneArrangementOp) Reset() {
	*x = HomeRestoreDefaultsSceneArrangementOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeRestoreDefaultsSceneArrangementOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeRestoreDefaultsSceneArrangementOp) ProtoMessage() {}

func (x *HomeRestoreDefaultsSceneArrangementOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeRestoreDefaultsSceneArrangementOp.ProtoReflect.Descriptor instead.
func (*HomeRestoreDefaultsSceneArrangementOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{95}
}

func (x *HomeRestoreDefaultsSceneArrangementOp) GetModuleId() uint32 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

func (x *HomeRestoreDefaultsSceneArrangementOp) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *HomeRestoreDefaultsSceneArrangementOp) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type HomeOfflineMsgBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnqueTime uint32 `protobuf:"fixed32,1,opt,name=enque_time,json=enqueTime,proto3" json:"enque_time,omitempty"`
	Ticket    string `protobuf:"bytes,2,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Index     uint32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	// Types that are assignable to Detail:
	//
	//	*HomeOfflineMsgBin_TestOp
	//	*HomeOfflineMsgBin_RestoreDefaultsArrangementOp
	//	*HomeOfflineMsgBin_RestoreDefaultsSceneArrangementOp
	Detail isHomeOfflineMsgBin_Detail `protobuf_oneof:"detail"`
}

func (x *HomeOfflineMsgBin) Reset() {
	*x = HomeOfflineMsgBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeOfflineMsgBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeOfflineMsgBin) ProtoMessage() {}

func (x *HomeOfflineMsgBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeOfflineMsgBin.ProtoReflect.Descriptor instead.
func (*HomeOfflineMsgBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{96}
}

func (x *HomeOfflineMsgBin) GetEnqueTime() uint32 {
	if x != nil {
		return x.EnqueTime
	}
	return 0
}

func (x *HomeOfflineMsgBin) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *HomeOfflineMsgBin) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (m *HomeOfflineMsgBin) GetDetail() isHomeOfflineMsgBin_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *HomeOfflineMsgBin) GetTestOp() *HomeTestOp {
	if x, ok := x.GetDetail().(*HomeOfflineMsgBin_TestOp); ok {
		return x.TestOp
	}
	return nil
}

func (x *HomeOfflineMsgBin) GetRestoreDefaultsArrangementOp() *HomeRestoreDefaultsArrangementOp {
	if x, ok := x.GetDetail().(*HomeOfflineMsgBin_RestoreDefaultsArrangementOp); ok {
		return x.RestoreDefaultsArrangementOp
	}
	return nil
}

func (x *HomeOfflineMsgBin) GetRestoreDefaultsSceneArrangementOp() *HomeRestoreDefaultsSceneArrangementOp {
	if x, ok := x.GetDetail().(*HomeOfflineMsgBin_RestoreDefaultsSceneArrangementOp); ok {
		return x.RestoreDefaultsSceneArrangementOp
	}
	return nil
}

type isHomeOfflineMsgBin_Detail interface {
	isHomeOfflineMsgBin_Detail()
}

type HomeOfflineMsgBin_TestOp struct {
	TestOp *HomeTestOp `protobuf:"bytes,101,opt,name=test_op,json=testOp,proto3,oneof"`
}

type HomeOfflineMsgBin_RestoreDefaultsArrangementOp struct {
	RestoreDefaultsArrangementOp *HomeRestoreDefaultsArrangementOp `protobuf:"bytes,102,opt,name=restore_defaults_arrangement_op,json=restoreDefaultsArrangementOp,proto3,oneof"`
}

type HomeOfflineMsgBin_RestoreDefaultsSceneArrangementOp struct {
	RestoreDefaultsSceneArrangementOp *HomeRestoreDefaultsSceneArrangementOp `protobuf:"bytes,103,opt,name=restore_defaults_scene_arrangement_op,json=restoreDefaultsSceneArrangementOp,proto3,oneof"`
}

func (*HomeOfflineMsgBin_TestOp) isHomeOfflineMsgBin_Detail() {}

func (*HomeOfflineMsgBin_RestoreDefaultsArrangementOp) isHomeOfflineMsgBin_Detail() {}

func (*HomeOfflineMsgBin_RestoreDefaultsSceneArrangementOp) isHomeOfflineMsgBin_Detail() {}

type GroupVariableBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GroupVariableBin) Reset() {
	*x = GroupVariableBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupVariableBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupVariableBin) ProtoMessage() {}

func (x *GroupVariableBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupVariableBin.ProtoReflect.Descriptor instead.
func (*GroupVariableBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{97}
}

func (x *GroupVariableBin) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GroupVariableConfigIdBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId uint32 `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	Value    int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GroupVariableConfigIdBin) Reset() {
	*x = GroupVariableConfigIdBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupVariableConfigIdBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupVariableConfigIdBin) ProtoMessage() {}

func (x *GroupVariableConfigIdBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupVariableConfigIdBin.ProtoReflect.Descriptor instead.
func (*GroupVariableConfigIdBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{98}
}

func (x *GroupVariableConfigIdBin) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *GroupVariableConfigIdBin) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GroupProductBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GadgetOneOffMap  map[uint32]uint32 `protobuf:"bytes,1,rep,name=gadget_one_off_map,json=gadgetOneOffMap,proto3" json:"gadget_one_off_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MonsterOneOffMap map[uint32]uint32 `protobuf:"bytes,2,rep,name=monster_one_off_map,json=monsterOneOffMap,proto3" json:"monster_one_off_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GroupProductBin) Reset() {
	*x = GroupProductBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupProductBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupProductBin) ProtoMessage() {}

func (x *GroupProductBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupProductBin.ProtoReflect.Descriptor instead.
func (*GroupProductBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{99}
}

func (x *GroupProductBin) GetGadgetOneOffMap() map[uint32]uint32 {
	if x != nil {
		return x.GadgetOneOffMap
	}
	return nil
}

func (x *GroupProductBin) GetMonsterOneOffMap() map[uint32]uint32 {
	if x != nil {
		return x.MonsterOneOffMap
	}
	return nil
}

type InteractGadget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  uint32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ConfigId uint32 `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
}

func (x *InteractGadget) Reset() {
	*x = InteractGadget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractGadget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractGadget) ProtoMessage() {}

func (x *InteractGadget) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractGadget.ProtoReflect.Descriptor instead.
func (*InteractGadget) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{100}
}

func (x *InteractGadget) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *InteractGadget) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

type AreaBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExploreNum         uint32            `protobuf:"varint,1,opt,name=explore_num,json=exploreNum,proto3" json:"explore_num,omitempty"`
	ExplorePoint       uint32            `protobuf:"varint,2,opt,name=explore_point,json=explorePoint,proto3" json:"explore_point,omitempty"`
	UnlockPointList    []uint32          `protobuf:"varint,3,rep,packed,name=unlock_point_list,json=unlockPointList,proto3" json:"unlock_point_list,omitempty"`
	InteractGadgetList []*InteractGadget `protobuf:"bytes,4,rep,name=interact_gadget_list,json=interactGadgetList,proto3" json:"interact_gadget_list,omitempty"`
}

func (x *AreaBin) Reset() {
	*x = AreaBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaBin) ProtoMessage() {}

func (x *AreaBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaBin.ProtoReflect.Descriptor instead.
func (*AreaBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{101}
}

func (x *AreaBin) GetExploreNum() uint32 {
	if x != nil {
		return x.ExploreNum
	}
	return 0
}

func (x *AreaBin) GetExplorePoint() uint32 {
	if x != nil {
		return x.ExplorePoint
	}
	return 0
}

func (x *AreaBin) GetUnlockPointList() []uint32 {
	if x != nil {
		return x.UnlockPointList
	}
	return nil
}

func (x *AreaBin) GetInteractGadgetList() []*InteractGadget {
	if x != nil {
		return x.InteractGadgetList
	}
	return nil
}

type CityBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level      uint32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	CrystalNum uint32 `protobuf:"varint,2,opt,name=crystal_num,json=crystalNum,proto3" json:"crystal_num,omitempty"`
}

func (x *CityBin) Reset() {
	*x = CityBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityBin) ProtoMessage() {}

func (x *CityBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityBin.ProtoReflect.Descriptor instead.
func (*CityBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{102}
}

func (x *CityBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CityBin) GetCrystalNum() uint32 {
	if x != nil {
		return x.CrystalNum
	}
	return 0
}

type ScenePlayerLocationBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurPos       *VectorBin `protobuf:"bytes,1,opt,name=cur_pos,json=curPos,proto3" json:"cur_pos,omitempty"`
	CurRot       *VectorBin `protobuf:"bytes,2,opt,name=cur_rot,json=curRot,proto3" json:"cur_rot,omitempty"`
	LastValidPos *VectorBin `protobuf:"bytes,3,opt,name=last_valid_pos,json=lastValidPos,proto3" json:"last_valid_pos,omitempty"`
	LastValidRot *VectorBin `protobuf:"bytes,4,opt,name=last_valid_rot,json=lastValidRot,proto3" json:"last_valid_rot,omitempty"`
}

func (x *ScenePlayerLocationBin) Reset() {
	*x = ScenePlayerLocationBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlayerLocationBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlayerLocationBin) ProtoMessage() {}

func (x *ScenePlayerLocationBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlayerLocationBin.ProtoReflect.Descriptor instead.
func (*ScenePlayerLocationBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{103}
}

func (x *ScenePlayerLocationBin) GetCurPos() *VectorBin {
	if x != nil {
		return x.CurPos
	}
	return nil
}

func (x *ScenePlayerLocationBin) GetCurRot() *VectorBin {
	if x != nil {
		return x.CurRot
	}
	return nil
}

func (x *ScenePlayerLocationBin) GetLastValidPos() *VectorBin {
	if x != nil {
		return x.LastValidPos
	}
	return nil
}

func (x *ScenePlayerLocationBin) GetLastValidRot() *VectorBin {
	if x != nil {
		return x.LastValidRot
	}
	return nil
}

type EnvZoneInfoBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastRefreshTime uint32 `protobuf:"fixed32,1,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	AnimalNum       uint32 `protobuf:"varint,2,opt,name=animal_num,json=animalNum,proto3" json:"animal_num,omitempty"`
}

func (x *EnvZoneInfoBin) Reset() {
	*x = EnvZoneInfoBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvZoneInfoBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvZoneInfoBin) ProtoMessage() {}

func (x *EnvZoneInfoBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvZoneInfoBin.ProtoReflect.Descriptor instead.
func (*EnvZoneInfoBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{104}
}

func (x *EnvZoneInfoBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

func (x *EnvZoneInfoBin) GetAnimalNum() uint32 {
	if x != nil {
		return x.AnimalNum
	}
	return 0
}

type SceneEnvAnimalCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneInfoMap map[uint32]*EnvZoneInfoBin `protobuf:"bytes,1,rep,name=zone_info_map,json=zoneInfoMap,proto3" json:"zone_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SceneEnvAnimalCompBin) Reset() {
	*x = SceneEnvAnimalCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneEnvAnimalCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneEnvAnimalCompBin) ProtoMessage() {}

func (x *SceneEnvAnimalCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneEnvAnimalCompBin.ProtoReflect.Descriptor instead.
func (*SceneEnvAnimalCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{105}
}

func (x *SceneEnvAnimalCompBin) GetZoneInfoMap() map[uint32]*EnvZoneInfoBin {
	if x != nil {
		return x.ZoneInfoMap
	}
	return nil
}

type SceneWeatherInfoBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeightAreaId       uint32   `protobuf:"varint,1,opt,name=height_area_id,json=heightAreaId,proto3" json:"height_area_id,omitempty"`
	ClimateType        uint32   `protobuf:"varint,2,opt,name=climate_type,json=climateType,proto3" json:"climate_type,omitempty"`
	NextClimateTime    uint64   `protobuf:"varint,3,opt,name=next_climate_time,json=nextClimateTime,proto3" json:"next_climate_time,omitempty"`
	ForcastClimateList []uint32 `protobuf:"varint,4,rep,packed,name=forcast_climate_list,json=forcastClimateList,proto3" json:"forcast_climate_list,omitempty"`
}

func (x *SceneWeatherInfoBin) Reset() {
	*x = SceneWeatherInfoBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneWeatherInfoBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneWeatherInfoBin) ProtoMessage() {}

func (x *SceneWeatherInfoBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneWeatherInfoBin.ProtoReflect.Descriptor instead.
func (*SceneWeatherInfoBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{106}
}

func (x *SceneWeatherInfoBin) GetHeightAreaId() uint32 {
	if x != nil {
		return x.HeightAreaId
	}
	return 0
}

func (x *SceneWeatherInfoBin) GetClimateType() uint32 {
	if x != nil {
		return x.ClimateType
	}
	return 0
}

func (x *SceneWeatherInfoBin) GetNextClimateTime() uint64 {
	if x != nil {
		return x.NextClimateTime
	}
	return 0
}

func (x *SceneWeatherInfoBin) GetForcastClimateList() []uint32 {
	if x != nil {
		return x.ForcastClimateList
	}
	return nil
}

type SceneClimateAreaInfoBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClimateAreaId   uint32 `protobuf:"varint,1,opt,name=climate_area_id,json=climateAreaId,proto3" json:"climate_area_id,omitempty"`
	JsonClimateType uint32 `protobuf:"varint,2,opt,name=json_climate_type,json=jsonClimateType,proto3" json:"json_climate_type,omitempty"`
}

func (x *SceneClimateAreaInfoBin) Reset() {
	*x = SceneClimateAreaInfoBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneClimateAreaInfoBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneClimateAreaInfoBin) ProtoMessage() {}

func (x *SceneClimateAreaInfoBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneClimateAreaInfoBin.ProtoReflect.Descriptor instead.
func (*SceneClimateAreaInfoBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{107}
}

func (x *SceneClimateAreaInfoBin) GetClimateAreaId() uint32 {
	if x != nil {
		return x.ClimateAreaId
	}
	return 0
}

func (x *SceneClimateAreaInfoBin) GetJsonClimateType() uint32 {
	if x != nil {
		return x.JsonClimateType
	}
	return 0
}

type SceneAllWeatherInfoBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WeatherInfoList       []*SceneWeatherInfoBin     `protobuf:"bytes,1,rep,name=weather_info_list,json=weatherInfoList,proto3" json:"weather_info_list,omitempty"`
	ClosedWeatherAreaList []uint32                   `protobuf:"varint,2,rep,packed,name=closed_weather_area_list,json=closedWeatherAreaList,proto3" json:"closed_weather_area_list,omitempty"`
	ClimateAreaInfoList   []*SceneClimateAreaInfoBin `protobuf:"bytes,3,rep,name=climate_area_info_list,json=climateAreaInfoList,proto3" json:"climate_area_info_list,omitempty"`
	ClosedClimateAreaList []uint32                   `protobuf:"varint,4,rep,packed,name=closed_climate_area_list,json=closedClimateAreaList,proto3" json:"closed_climate_area_list,omitempty"`
}

func (x *SceneAllWeatherInfoBin) Reset() {
	*x = SceneAllWeatherInfoBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneAllWeatherInfoBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneAllWeatherInfoBin) ProtoMessage() {}

func (x *SceneAllWeatherInfoBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneAllWeatherInfoBin.ProtoReflect.Descriptor instead.
func (*SceneAllWeatherInfoBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{108}
}

func (x *SceneAllWeatherInfoBin) GetWeatherInfoList() []*SceneWeatherInfoBin {
	if x != nil {
		return x.WeatherInfoList
	}
	return nil
}

func (x *SceneAllWeatherInfoBin) GetClosedWeatherAreaList() []uint32 {
	if x != nil {
		return x.ClosedWeatherAreaList
	}
	return nil
}

func (x *SceneAllWeatherInfoBin) GetClimateAreaInfoList() []*SceneClimateAreaInfoBin {
	if x != nil {
		return x.ClimateAreaInfoList
	}
	return nil
}

func (x *SceneAllWeatherInfoBin) GetClosedClimateAreaList() []uint32 {
	if x != nil {
		return x.ClosedClimateAreaList
	}
	return nil
}

type BackupGroupBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelMonsterList  []uint32                     `protobuf:"varint,1,rep,packed,name=del_monster_list,json=delMonsterList,proto3" json:"del_monster_list,omitempty"`
	VariableMap     map[string]*GroupVariableBin `protobuf:"bytes,2,rep,name=variable_map,json=variableMap,proto3" json:"variable_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ReviseLevel     uint32                       `protobuf:"varint,3,opt,name=revise_level,json=reviseLevel,proto3" json:"revise_level,omitempty"`
	LastRefreshTime uint32                       `protobuf:"fixed32,4,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
}

func (x *BackupGroupBin) Reset() {
	*x = BackupGroupBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupGroupBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupGroupBin) ProtoMessage() {}

func (x *BackupGroupBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupGroupBin.ProtoReflect.Descriptor instead.
func (*BackupGroupBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{109}
}

func (x *BackupGroupBin) GetDelMonsterList() []uint32 {
	if x != nil {
		return x.DelMonsterList
	}
	return nil
}

func (x *BackupGroupBin) GetVariableMap() map[string]*GroupVariableBin {
	if x != nil {
		return x.VariableMap
	}
	return nil
}

func (x *BackupGroupBin) GetReviseLevel() uint32 {
	if x != nil {
		return x.ReviseLevel
	}
	return 0
}

func (x *BackupGroupBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

type SceneBlockGroupCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeadGroupList       []uint32                   `protobuf:"varint,1,rep,packed,name=dead_group_list,json=deadGroupList,proto3" json:"dead_group_list,omitempty"`
	BackupGroupMap      map[uint32]*BackupGroupBin `protobuf:"bytes,2,rep,name=backup_group_map,json=backupGroupMap,proto3" json:"backup_group_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsSceneGroupAllDead bool                       `protobuf:"varint,3,opt,name=is_scene_group_all_dead,json=isSceneGroupAllDead,proto3" json:"is_scene_group_all_dead,omitempty"`
}

func (x *SceneBlockGroupCompBin) Reset() {
	*x = SceneBlockGroupCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneBlockGroupCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneBlockGroupCompBin) ProtoMessage() {}

func (x *SceneBlockGroupCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneBlockGroupCompBin.ProtoReflect.Descriptor instead.
func (*SceneBlockGroupCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{110}
}

func (x *SceneBlockGroupCompBin) GetDeadGroupList() []uint32 {
	if x != nil {
		return x.DeadGroupList
	}
	return nil
}

func (x *SceneBlockGroupCompBin) GetBackupGroupMap() map[uint32]*BackupGroupBin {
	if x != nil {
		return x.BackupGroupMap
	}
	return nil
}

func (x *SceneBlockGroupCompBin) GetIsSceneGroupAllDead() bool {
	if x != nil {
		return x.IsSceneGroupAllDead
	}
	return false
}

type SceneAreaCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnlockedAreaList []uint32            `protobuf:"varint,1,rep,packed,name=unlocked_area_list,json=unlockedAreaList,proto3" json:"unlocked_area_list,omitempty"`
	AreaMap          map[uint32]*AreaBin `protobuf:"bytes,2,rep,name=area_map,json=areaMap,proto3" json:"area_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CityMap          map[uint32]*CityBin `protobuf:"bytes,3,rep,name=city_map,json=cityMap,proto3" json:"city_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SceneAreaCompBin) Reset() {
	*x = SceneAreaCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneAreaCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneAreaCompBin) ProtoMessage() {}

func (x *SceneAreaCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneAreaCompBin.ProtoReflect.Descriptor instead.
func (*SceneAreaCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{111}
}

func (x *SceneAreaCompBin) GetUnlockedAreaList() []uint32 {
	if x != nil {
		return x.UnlockedAreaList
	}
	return nil
}

func (x *SceneAreaCompBin) GetAreaMap() map[uint32]*AreaBin {
	if x != nil {
		return x.AreaMap
	}
	return nil
}

func (x *SceneAreaCompBin) GetCityMap() map[uint32]*CityBin {
	if x != nil {
		return x.CityMap
	}
	return nil
}

type SceneEncounterCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentQuestIdList []uint32 `protobuf:"varint,1,rep,packed,name=parent_quest_id_list,json=parentQuestIdList,proto3" json:"parent_quest_id_list,omitempty"`
}

func (x *SceneEncounterCompBin) Reset() {
	*x = SceneEncounterCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneEncounterCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneEncounterCompBin) ProtoMessage() {}

func (x *SceneEncounterCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneEncounterCompBin.ProtoReflect.Descriptor instead.
func (*SceneEncounterCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{112}
}

func (x *SceneEncounterCompBin) GetParentQuestIdList() []uint32 {
	if x != nil {
		return x.ParentQuestIdList
	}
	return nil
}

type ActivitySceneBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen bool `protobuf:"varint,1,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *ActivitySceneBin) Reset() {
	*x = ActivitySceneBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivitySceneBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivitySceneBin) ProtoMessage() {}

func (x *ActivitySceneBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivitySceneBin.ProtoReflect.Descriptor instead.
func (*ActivitySceneBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{113}
}

func (x *ActivitySceneBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type SceneVehicleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId uint32     `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	CurPos   *VectorBin `protobuf:"bytes,2,opt,name=cur_pos,json=curPos,proto3" json:"cur_pos,omitempty"`
	CurRot   *VectorBin `protobuf:"bytes,3,opt,name=cur_rot,json=curRot,proto3" json:"cur_rot,omitempty"`
}

func (x *SceneVehicleBin) Reset() {
	*x = SceneVehicleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneVehicleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneVehicleBin) ProtoMessage() {}

func (x *SceneVehicleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneVehicleBin.ProtoReflect.Descriptor instead.
func (*SceneVehicleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{114}
}

func (x *SceneVehicleBin) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *SceneVehicleBin) GetCurPos() *VectorBin {
	if x != nil {
		return x.CurPos
	}
	return nil
}

func (x *SceneVehicleBin) GetCurRot() *VectorBin {
	if x != nil {
		return x.CurRot
	}
	return nil
}

type SceneTagOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OpType SceneTagOpType `protobuf:"varint,2,opt,name=op_type,json=opType,proto3,enum=proto.SceneTagOpType" json:"op_type,omitempty"`
}

func (x *SceneTagOp) Reset() {
	*x = SceneTagOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneTagOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneTagOp) ProtoMessage() {}

func (x *SceneTagOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneTagOp.ProtoReflect.Descriptor instead.
func (*SceneTagOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{115}
}

func (x *SceneTagOp) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SceneTagOp) GetOpType() SceneTagOpType {
	if x != nil {
		return x.OpType
	}
	return SceneTagOpType_SCENE_TAG_OP_NONE
}

type WayPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointId      uint32 `protobuf:"varint,1,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
	ActivateTime uint32 `protobuf:"varint,2,opt,name=activate_time,json=activateTime,proto3" json:"activate_time,omitempty"`
}

func (x *WayPoint) Reset() {
	*x = WayPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WayPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WayPoint) ProtoMessage() {}

func (x *WayPoint) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WayPoint.ProtoReflect.Descriptor instead.
func (*WayPoint) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{116}
}

func (x *WayPoint) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

func (x *WayPoint) GetActivateTime() uint32 {
	if x != nil {
		return x.ActivateTime
	}
	return 0
}

type DungeonSceneBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivatedWayPointList   []*WayPoint `protobuf:"bytes,1,rep,name=activated_way_point_list,json=activatedWayPointList,proto3" json:"activated_way_point_list,omitempty"`
	ActivatedSlipReviveList []*WayPoint `protobuf:"bytes,2,rep,name=activated_slip_revive_list,json=activatedSlipReviveList,proto3" json:"activated_slip_revive_list,omitempty"`
}

func (x *DungeonSceneBin) Reset() {
	*x = DungeonSceneBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonSceneBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonSceneBin) ProtoMessage() {}

func (x *DungeonSceneBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonSceneBin.ProtoReflect.Descriptor instead.
func (*DungeonSceneBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{117}
}

func (x *DungeonSceneBin) GetActivatedWayPointList() []*WayPoint {
	if x != nil {
		return x.ActivatedWayPointList
	}
	return nil
}

func (x *DungeonSceneBin) GetActivatedSlipReviveList() []*WayPoint {
	if x != nil {
		return x.ActivatedSlipReviveList
	}
	return nil
}

type SceneBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnlockedPointList               []uint32                `protobuf:"varint,1,rep,packed,name=unlocked_point_list,json=unlockedPointList,proto3" json:"unlocked_point_list,omitempty"`
	UnlockedForceList               []uint32                `protobuf:"varint,2,rep,packed,name=unlocked_force_list,json=unlockedForceList,proto3" json:"unlocked_force_list,omitempty"`
	LockedPointList                 []uint32                `protobuf:"varint,3,rep,packed,name=locked_point_list,json=lockedPointList,proto3" json:"locked_point_list,omitempty"`
	AllWeatherInfo                  *SceneAllWeatherInfoBin `protobuf:"bytes,4,opt,name=all_weather_info,json=allWeatherInfo,proto3" json:"all_weather_info,omitempty"`
	OwnerPlayerLocation             *ScenePlayerLocationBin `protobuf:"bytes,5,opt,name=owner_player_location,json=ownerPlayerLocation,proto3" json:"owner_player_location,omitempty"`
	BlockGroupBin                   *SceneBlockGroupCompBin `protobuf:"bytes,6,opt,name=block_group_bin,json=blockGroupBin,proto3" json:"block_group_bin,omitempty"`
	EnvAnimalBin                    *SceneEnvAnimalCompBin  `protobuf:"bytes,7,opt,name=env_animal_bin,json=envAnimalBin,proto3" json:"env_animal_bin,omitempty"`
	AreaCompBin                     *SceneAreaCompBin       `protobuf:"bytes,8,opt,name=area_comp_bin,json=areaCompBin,proto3" json:"area_comp_bin,omitempty"`
	EncounterCompBin                *SceneEncounterCompBin  `protobuf:"bytes,9,opt,name=encounter_comp_bin,json=encounterCompBin,proto3" json:"encounter_comp_bin,omitempty"`
	LastSpringRecoverTimeMs         uint64                  `protobuf:"varint,10,opt,name=last_spring_recover_time_ms,json=lastSpringRecoverTimeMs,proto3" json:"last_spring_recover_time_ms,omitempty"`
	GroupUnlimitPointList           []uint32                `protobuf:"varint,11,rep,packed,name=group_unlimit_point_list,json=groupUnlimitPointList,proto3" json:"group_unlimit_point_list,omitempty"`
	InteractedToBeExploredPointList []uint32                `protobuf:"varint,12,rep,packed,name=interacted_to_be_explored_point_list,json=interactedToBeExploredPointList,proto3" json:"interacted_to_be_explored_point_list,omitempty"`
	CurSpringVolume                 float32                 `protobuf:"fixed32,13,opt,name=cur_spring_volume,json=curSpringVolume,proto3" json:"cur_spring_volume,omitempty"`
	IsLocked                        bool                    `protobuf:"varint,14,opt,name=is_locked,json=isLocked,proto3" json:"is_locked,omitempty"`
	VehicleList                     []*SceneVehicleBin      `protobuf:"bytes,15,rep,name=vehicle_list,json=vehicleList,proto3" json:"vehicle_list,omitempty"`
	SceneTagOpList                  []*SceneTagOp           `protobuf:"bytes,16,rep,name=scene_tag_op_list,json=sceneTagOpList,proto3" json:"scene_tag_op_list,omitempty"`
	HidePointList                   []uint32                `protobuf:"varint,17,rep,packed,name=hide_point_list,json=hidePointList,proto3" json:"hide_point_list,omitempty"`
	UnhidePointList                 []uint32                `protobuf:"varint,18,rep,packed,name=unhide_point_list,json=unhidePointList,proto3" json:"unhide_point_list,omitempty"`
	// Types that are assignable to Detail:
	//
	//	*SceneBin_ActivitySceneBin
	//	*SceneBin_DungeonSceneBin
	Detail isSceneBin_Detail `protobuf_oneof:"detail"`
}

func (x *SceneBin) Reset() {
	*x = SceneBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneBin) ProtoMessage() {}

func (x *SceneBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneBin.ProtoReflect.Descriptor instead.
func (*SceneBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{118}
}

func (x *SceneBin) GetUnlockedPointList() []uint32 {
	if x != nil {
		return x.UnlockedPointList
	}
	return nil
}

func (x *SceneBin) GetUnlockedForceList() []uint32 {
	if x != nil {
		return x.UnlockedForceList
	}
	return nil
}

func (x *SceneBin) GetLockedPointList() []uint32 {
	if x != nil {
		return x.LockedPointList
	}
	return nil
}

func (x *SceneBin) GetAllWeatherInfo() *SceneAllWeatherInfoBin {
	if x != nil {
		return x.AllWeatherInfo
	}
	return nil
}

func (x *SceneBin) GetOwnerPlayerLocation() *ScenePlayerLocationBin {
	if x != nil {
		return x.OwnerPlayerLocation
	}
	return nil
}

func (x *SceneBin) GetBlockGroupBin() *SceneBlockGroupCompBin {
	if x != nil {
		return x.BlockGroupBin
	}
	return nil
}

func (x *SceneBin) GetEnvAnimalBin() *SceneEnvAnimalCompBin {
	if x != nil {
		return x.EnvAnimalBin
	}
	return nil
}

func (x *SceneBin) GetAreaCompBin() *SceneAreaCompBin {
	if x != nil {
		return x.AreaCompBin
	}
	return nil
}

func (x *SceneBin) GetEncounterCompBin() *SceneEncounterCompBin {
	if x != nil {
		return x.EncounterCompBin
	}
	return nil
}

func (x *SceneBin) GetLastSpringRecoverTimeMs() uint64 {
	if x != nil {
		return x.LastSpringRecoverTimeMs
	}
	return 0
}

func (x *SceneBin) GetGroupUnlimitPointList() []uint32 {
	if x != nil {
		return x.GroupUnlimitPointList
	}
	return nil
}

func (x *SceneBin) GetInteractedToBeExploredPointList() []uint32 {
	if x != nil {
		return x.InteractedToBeExploredPointList
	}
	return nil
}

func (x *SceneBin) GetCurSpringVolume() float32 {
	if x != nil {
		return x.CurSpringVolume
	}
	return 0
}

func (x *SceneBin) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

func (x *SceneBin) GetVehicleList() []*SceneVehicleBin {
	if x != nil {
		return x.VehicleList
	}
	return nil
}

func (x *SceneBin) GetSceneTagOpList() []*SceneTagOp {
	if x != nil {
		return x.SceneTagOpList
	}
	return nil
}

func (x *SceneBin) GetHidePointList() []uint32 {
	if x != nil {
		return x.HidePointList
	}
	return nil
}

func (x *SceneBin) GetUnhidePointList() []uint32 {
	if x != nil {
		return x.UnhidePointList
	}
	return nil
}

func (m *SceneBin) GetDetail() isSceneBin_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *SceneBin) GetActivitySceneBin() *ActivitySceneBin {
	if x, ok := x.GetDetail().(*SceneBin_ActivitySceneBin); ok {
		return x.ActivitySceneBin
	}
	return nil
}

func (x *SceneBin) GetDungeonSceneBin() *DungeonSceneBin {
	if x, ok := x.GetDetail().(*SceneBin_DungeonSceneBin); ok {
		return x.DungeonSceneBin
	}
	return nil
}

type isSceneBin_Detail interface {
	isSceneBin_Detail()
}

type SceneBin_ActivitySceneBin struct {
	ActivitySceneBin *ActivitySceneBin `protobuf:"bytes,101,opt,name=activity_scene_bin,json=activitySceneBin,proto3,oneof"`
}

type SceneBin_DungeonSceneBin struct {
	DungeonSceneBin *DungeonSceneBin `protobuf:"bytes,102,opt,name=dungeon_scene_bin,json=dungeonSceneBin,proto3,oneof"`
}

func (*SceneBin_ActivitySceneBin) isSceneBin_Detail() {}

func (*SceneBin_DungeonSceneBin) isSceneBin_Detail() {}

type GCGSettleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId                     uint32            `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ThreadIndex               uint32            `protobuf:"varint,2,opt,name=thread_index,json=threadIndex,proto3" json:"thread_index,omitempty"`
	GameId                    uint32            `protobuf:"varint,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	GameUid                   uint32            `protobuf:"varint,4,opt,name=game_uid,json=gameUid,proto3" json:"game_uid,omitempty"`
	VerifyCode                uint32            `protobuf:"varint,5,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`
	Reason                    uint32            `protobuf:"varint,6,opt,name=reason,proto3" json:"reason,omitempty"`
	BusinessType              uint32            `protobuf:"varint,7,opt,name=business_type,json=businessType,proto3" json:"business_type,omitempty"`
	UidMap                    map[uint32]uint32 `protobuf:"bytes,8,rep,name=uid_map,json=uidMap,proto3" json:"uid_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	WinnerController          uint32            `protobuf:"varint,9,opt,name=winner_controller,json=winnerController,proto3" json:"winner_controller,omitempty"`
	ChallengeProgressMap      map[uint32]uint32 `protobuf:"bytes,10,rep,name=challenge_progress_map,json=challengeProgressMap,proto3" json:"challenge_progress_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CardIdList                []uint32          `protobuf:"varint,11,rep,packed,name=card_id_list,json=cardIdList,proto3" json:"card_id_list,omitempty"`
	CardGroupId               uint32            `protobuf:"varint,12,opt,name=card_group_id,json=cardGroupId,proto3" json:"card_group_id,omitempty"`
	ScoreMap                  map[uint32]uint32 `protobuf:"bytes,13,rep,name=score_map,json=scoreMap,proto3" json:"score_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MatchId                   uint32            `protobuf:"varint,14,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	CustomParamList           []uint32          `protobuf:"varint,15,rep,packed,name=custom_param_list,json=customParamList,proto3" json:"custom_param_list,omitempty"`
	ForbidFinishChallengeList []uint32          `protobuf:"varint,16,rep,packed,name=forbid_finish_challenge_list,json=forbidFinishChallengeList,proto3" json:"forbid_finish_challenge_list,omitempty"`
}

func (x *GCGSettleData) Reset() {
	*x = GCGSettleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGSettleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGSettleData) ProtoMessage() {}

func (x *GCGSettleData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGSettleData.ProtoReflect.Descriptor instead.
func (*GCGSettleData) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{119}
}

func (x *GCGSettleData) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *GCGSettleData) GetThreadIndex() uint32 {
	if x != nil {
		return x.ThreadIndex
	}
	return 0
}

func (x *GCGSettleData) GetGameId() uint32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *GCGSettleData) GetGameUid() uint32 {
	if x != nil {
		return x.GameUid
	}
	return 0
}

func (x *GCGSettleData) GetVerifyCode() uint32 {
	if x != nil {
		return x.VerifyCode
	}
	return 0
}

func (x *GCGSettleData) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

func (x *GCGSettleData) GetBusinessType() uint32 {
	if x != nil {
		return x.BusinessType
	}
	return 0
}

func (x *GCGSettleData) GetUidMap() map[uint32]uint32 {
	if x != nil {
		return x.UidMap
	}
	return nil
}

func (x *GCGSettleData) GetWinnerController() uint32 {
	if x != nil {
		return x.WinnerController
	}
	return 0
}

func (x *GCGSettleData) GetChallengeProgressMap() map[uint32]uint32 {
	if x != nil {
		return x.ChallengeProgressMap
	}
	return nil
}

func (x *GCGSettleData) GetCardIdList() []uint32 {
	if x != nil {
		return x.CardIdList
	}
	return nil
}

func (x *GCGSettleData) GetCardGroupId() uint32 {
	if x != nil {
		return x.CardGroupId
	}
	return 0
}

func (x *GCGSettleData) GetScoreMap() map[uint32]uint32 {
	if x != nil {
		return x.ScoreMap
	}
	return nil
}

func (x *GCGSettleData) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *GCGSettleData) GetCustomParamList() []uint32 {
	if x != nil {
		return x.CustomParamList
	}
	return nil
}

func (x *GCGSettleData) GetForbidFinishChallengeList() []uint32 {
	if x != nil {
		return x.ForbidFinishChallengeList
	}
	return nil
}

type OfflineOpTestOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *OfflineOpTestOp) Reset() {
	*x = OfflineOpTestOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineOpTestOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineOpTestOp) ProtoMessage() {}

func (x *OfflineOpTestOp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineOpTestOp.ProtoReflect.Descriptor instead.
func (*OfflineOpTestOp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{120}
}

func (x *OfflineOpTestOp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type OfflineOpFurnitureMakeHelp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerName        string             `protobuf:"bytes,1,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	Time              uint32             `protobuf:"fixed32,2,opt,name=time,proto3" json:"time,omitempty"`
	Uid               uint32             `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Icon              uint32             `protobuf:"varint,4,opt,name=icon,proto3" json:"icon,omitempty"`
	ProfilePictureBin *ProfilePictureBin `protobuf:"bytes,5,opt,name=profile_picture_bin,json=profilePictureBin,proto3" json:"profile_picture_bin,omitempty"`
}

func (x *OfflineOpFurnitureMakeHelp) Reset() {
	*x = OfflineOpFurnitureMakeHelp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineOpFurnitureMakeHelp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineOpFurnitureMakeHelp) ProtoMessage() {}

func (x *OfflineOpFurnitureMakeHelp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineOpFurnitureMakeHelp.ProtoReflect.Descriptor instead.
func (*OfflineOpFurnitureMakeHelp) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{121}
}

func (x *OfflineOpFurnitureMakeHelp) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *OfflineOpFurnitureMakeHelp) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *OfflineOpFurnitureMakeHelp) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *OfflineOpFurnitureMakeHelp) GetIcon() uint32 {
	if x != nil {
		return x.Icon
	}
	return 0
}

func (x *OfflineOpFurnitureMakeHelp) GetProfilePictureBin() *ProfilePictureBin {
	if x != nil {
		return x.ProfilePictureBin
	}
	return nil
}

type OfflineOpPlantFlowerActivityGiveFlower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          uint32            `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	FlowerNumMap map[uint32]uint32 `protobuf:"bytes,2,rep,name=flower_num_map,json=flowerNumMap,proto3" json:"flower_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ScheduleId   uint32            `protobuf:"varint,3,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *OfflineOpPlantFlowerActivityGiveFlower) Reset() {
	*x = OfflineOpPlantFlowerActivityGiveFlower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineOpPlantFlowerActivityGiveFlower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineOpPlantFlowerActivityGiveFlower) ProtoMessage() {}

func (x *OfflineOpPlantFlowerActivityGiveFlower) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineOpPlantFlowerActivityGiveFlower.ProtoReflect.Descriptor instead.
func (*OfflineOpPlantFlowerActivityGiveFlower) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{122}
}

func (x *OfflineOpPlantFlowerActivityGiveFlower) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *OfflineOpPlantFlowerActivityGiveFlower) GetFlowerNumMap() map[uint32]uint32 {
	if x != nil {
		return x.FlowerNumMap
	}
	return nil
}

func (x *OfflineOpPlantFlowerActivityGiveFlower) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type OfflineOpWinterCampActivityGiveItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         uint32          `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ItemBinList []*ItemParamBin `protobuf:"bytes,2,rep,name=item_bin_list,json=itemBinList,proto3" json:"item_bin_list,omitempty"`
	ScheduleId  uint32          `protobuf:"varint,3,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *OfflineOpWinterCampActivityGiveItem) Reset() {
	*x = OfflineOpWinterCampActivityGiveItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineOpWinterCampActivityGiveItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineOpWinterCampActivityGiveItem) ProtoMessage() {}

func (x *OfflineOpWinterCampActivityGiveItem) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineOpWinterCampActivityGiveItem.ProtoReflect.Descriptor instead.
func (*OfflineOpWinterCampActivityGiveItem) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{123}
}

func (x *OfflineOpWinterCampActivityGiveItem) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *OfflineOpWinterCampActivityGiveItem) GetItemBinList() []*ItemParamBin {
	if x != nil {
		return x.ItemBinList
	}
	return nil
}

func (x *OfflineOpWinterCampActivityGiveItem) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type OfflineOpGCGSettle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettleData *GCGSettleData `protobuf:"bytes,1,opt,name=settle_data,json=settleData,proto3" json:"settle_data,omitempty"`
}

func (x *OfflineOpGCGSettle) Reset() {
	*x = OfflineOpGCGSettle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineOpGCGSettle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineOpGCGSettle) ProtoMessage() {}

func (x *OfflineOpGCGSettle) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineOpGCGSettle.ProtoReflect.Descriptor instead.
func (*OfflineOpGCGSettle) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{124}
}

func (x *OfflineOpGCGSettle) GetSettleData() *GCGSettleData {
	if x != nil {
		return x.SettleData
	}
	return nil
}

type OfflineOpActivityGiveGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        uint32            `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	GiftNumMap map[uint32]uint32 `protobuf:"bytes,2,rep,name=gift_num_map,json=giftNumMap,proto3" json:"gift_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ScheduleId uint32            `protobuf:"varint,3,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *OfflineOpActivityGiveGift) Reset() {
	*x = OfflineOpActivityGiveGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineOpActivityGiveGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineOpActivityGiveGift) ProtoMessage() {}

func (x *OfflineOpActivityGiveGift) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineOpActivityGiveGift.ProtoReflect.Descriptor instead.
func (*OfflineOpActivityGiveGift) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{125}
}

func (x *OfflineOpActivityGiveGift) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *OfflineOpActivityGiveGift) GetGiftNumMap() map[uint32]uint32 {
	if x != nil {
		return x.GiftNumMap
	}
	return nil
}

func (x *OfflineOpActivityGiveGift) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type OfflineOpVintageActivityDividend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ScheduleId uint32 `protobuf:"varint,2,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *OfflineOpVintageActivityDividend) Reset() {
	*x = OfflineOpVintageActivityDividend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineOpVintageActivityDividend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineOpVintageActivityDividend) ProtoMessage() {}

func (x *OfflineOpVintageActivityDividend) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineOpVintageActivityDividend.ProtoReflect.Descriptor instead.
func (*OfflineOpVintageActivityDividend) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{126}
}

func (x *OfflineOpVintageActivityDividend) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *OfflineOpVintageActivityDividend) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type OfflineOpBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Detail:
	//
	//	*OfflineOpBin_TestOp
	//	*OfflineOpBin_FurnitureMakeHelpOp
	//	*OfflineOpBin_PlantFlowerGiveFlowerOp
	//	*OfflineOpBin_WinterCampGiveItemOp
	//	*OfflineOpBin_ActivityGiveGiftOp
	//	*OfflineOpBin_VintageDividendOp
	//	*OfflineOpBin_GcgSettleOp
	Detail isOfflineOpBin_Detail `protobuf_oneof:"detail"`
}

func (x *OfflineOpBin) Reset() {
	*x = OfflineOpBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineOpBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineOpBin) ProtoMessage() {}

func (x *OfflineOpBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineOpBin.ProtoReflect.Descriptor instead.
func (*OfflineOpBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{127}
}

func (m *OfflineOpBin) GetDetail() isOfflineOpBin_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *OfflineOpBin) GetTestOp() *OfflineOpTestOp {
	if x, ok := x.GetDetail().(*OfflineOpBin_TestOp); ok {
		return x.TestOp
	}
	return nil
}

func (x *OfflineOpBin) GetFurnitureMakeHelpOp() *OfflineOpFurnitureMakeHelp {
	if x, ok := x.GetDetail().(*OfflineOpBin_FurnitureMakeHelpOp); ok {
		return x.FurnitureMakeHelpOp
	}
	return nil
}

func (x *OfflineOpBin) GetPlantFlowerGiveFlowerOp() *OfflineOpPlantFlowerActivityGiveFlower {
	if x, ok := x.GetDetail().(*OfflineOpBin_PlantFlowerGiveFlowerOp); ok {
		return x.PlantFlowerGiveFlowerOp
	}
	return nil
}

func (x *OfflineOpBin) GetWinterCampGiveItemOp() *OfflineOpWinterCampActivityGiveItem {
	if x, ok := x.GetDetail().(*OfflineOpBin_WinterCampGiveItemOp); ok {
		return x.WinterCampGiveItemOp
	}
	return nil
}

func (x *OfflineOpBin) GetActivityGiveGiftOp() *OfflineOpActivityGiveGift {
	if x, ok := x.GetDetail().(*OfflineOpBin_ActivityGiveGiftOp); ok {
		return x.ActivityGiveGiftOp
	}
	return nil
}

func (x *OfflineOpBin) GetVintageDividendOp() *OfflineOpVintageActivityDividend {
	if x, ok := x.GetDetail().(*OfflineOpBin_VintageDividendOp); ok {
		return x.VintageDividendOp
	}
	return nil
}

func (x *OfflineOpBin) GetGcgSettleOp() *OfflineOpGCGSettle {
	if x, ok := x.GetDetail().(*OfflineOpBin_GcgSettleOp); ok {
		return x.GcgSettleOp
	}
	return nil
}

type isOfflineOpBin_Detail interface {
	isOfflineOpBin_Detail()
}

type OfflineOpBin_TestOp struct {
	TestOp *OfflineOpTestOp `protobuf:"bytes,1,opt,name=test_op,json=testOp,proto3,oneof"`
}

type OfflineOpBin_FurnitureMakeHelpOp struct {
	FurnitureMakeHelpOp *OfflineOpFurnitureMakeHelp `protobuf:"bytes,2,opt,name=furniture_make_help_op,json=furnitureMakeHelpOp,proto3,oneof"`
}

type OfflineOpBin_PlantFlowerGiveFlowerOp struct {
	PlantFlowerGiveFlowerOp *OfflineOpPlantFlowerActivityGiveFlower `protobuf:"bytes,3,opt,name=plant_flower_give_flower_op,json=plantFlowerGiveFlowerOp,proto3,oneof"`
}

type OfflineOpBin_WinterCampGiveItemOp struct {
	WinterCampGiveItemOp *OfflineOpWinterCampActivityGiveItem `protobuf:"bytes,4,opt,name=winter_camp_give_item_op,json=winterCampGiveItemOp,proto3,oneof"`
}

type OfflineOpBin_ActivityGiveGiftOp struct {
	ActivityGiveGiftOp *OfflineOpActivityGiveGift `protobuf:"bytes,5,opt,name=activity_give_gift_op,json=activityGiveGiftOp,proto3,oneof"`
}

type OfflineOpBin_VintageDividendOp struct {
	VintageDividendOp *OfflineOpVintageActivityDividend `protobuf:"bytes,6,opt,name=vintage_dividend_op,json=vintageDividendOp,proto3,oneof"`
}

type OfflineOpBin_GcgSettleOp struct {
	GcgSettleOp *OfflineOpGCGSettle `protobuf:"bytes,7,opt,name=gcg_settle_op,json=gcgSettleOp,proto3,oneof"`
}

func (*OfflineOpBin_TestOp) isOfflineOpBin_Detail() {}

func (*OfflineOpBin_FurnitureMakeHelpOp) isOfflineOpBin_Detail() {}

func (*OfflineOpBin_PlantFlowerGiveFlowerOp) isOfflineOpBin_Detail() {}

func (*OfflineOpBin_WinterCampGiveItemOp) isOfflineOpBin_Detail() {}

func (*OfflineOpBin_ActivityGiveGiftOp) isOfflineOpBin_Detail() {}

func (*OfflineOpBin_VintageDividendOp) isOfflineOpBin_Detail() {}

func (*OfflineOpBin_GcgSettleOp) isOfflineOpBin_Detail() {}

type FurnitureMakeSlotsBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MakeId          uint32 `protobuf:"varint,1,opt,name=make_id,json=makeId,proto3" json:"make_id,omitempty"`
	BeginTime       uint32 `protobuf:"fixed32,2,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	DurTime         uint32 `protobuf:"varint,3,opt,name=dur_time,json=durTime,proto3" json:"dur_time,omitempty"`
	AccelerateTime  uint32 `protobuf:"fixed32,4,opt,name=accelerate_time,json=accelerateTime,proto3" json:"accelerate_time,omitempty"`
	AccelerateCount uint32 `protobuf:"varint,6,opt,name=accelerate_count,json=accelerateCount,proto3" json:"accelerate_count,omitempty"`
	AvatarId        uint32 `protobuf:"varint,7,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
}

func (x *FurnitureMakeSlotsBin) Reset() {
	*x = FurnitureMakeSlotsBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FurnitureMakeSlotsBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FurnitureMakeSlotsBin) ProtoMessage() {}

func (x *FurnitureMakeSlotsBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FurnitureMakeSlotsBin.ProtoReflect.Descriptor instead.
func (*FurnitureMakeSlotsBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{128}
}

func (x *FurnitureMakeSlotsBin) GetMakeId() uint32 {
	if x != nil {
		return x.MakeId
	}
	return 0
}

func (x *FurnitureMakeSlotsBin) GetBeginTime() uint32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *FurnitureMakeSlotsBin) GetDurTime() uint32 {
	if x != nil {
		return x.DurTime
	}
	return 0
}

func (x *FurnitureMakeSlotsBin) GetAccelerateTime() uint32 {
	if x != nil {
		return x.AccelerateTime
	}
	return 0
}

func (x *FurnitureMakeSlotsBin) GetAccelerateCount() uint32 {
	if x != nil {
		return x.AccelerateCount
	}
	return 0
}

func (x *FurnitureMakeSlotsBin) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

type ProfilePictureBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId  uint32 `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	CostumeId uint32 `protobuf:"varint,2,opt,name=costume_id,json=costumeId,proto3" json:"costume_id,omitempty"`
}

func (x *ProfilePictureBin) Reset() {
	*x = ProfilePictureBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfilePictureBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfilePictureBin) ProtoMessage() {}

func (x *ProfilePictureBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfilePictureBin.ProtoReflect.Descriptor instead.
func (*ProfilePictureBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{129}
}

func (x *ProfilePictureBin) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *ProfilePictureBin) GetCostumeId() uint32 {
	if x != nil {
		return x.CostumeId
	}
	return 0
}

type CustomDungeonSettingBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsArriveFinish bool     `protobuf:"varint,1,opt,name=is_arrive_finish,json=isArriveFinish,proto3" json:"is_arrive_finish,omitempty"`
	CoinLimit      uint32   `protobuf:"varint,2,opt,name=coin_limit,json=coinLimit,proto3" json:"coin_limit,omitempty"`
	TimeLimit      uint32   `protobuf:"varint,3,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`
	IsForbidSkill  bool     `protobuf:"varint,4,opt,name=is_forbid_skill,json=isForbidSkill,proto3" json:"is_forbid_skill,omitempty"`
	OpenRoomList   []uint32 `protobuf:"varint,5,rep,packed,name=open_room_list,json=openRoomList,proto3" json:"open_room_list,omitempty"`
	StartRoomId    uint32   `protobuf:"varint,6,opt,name=start_room_id,json=startRoomId,proto3" json:"start_room_id,omitempty"`
	LifeNum        uint32   `protobuf:"varint,7,opt,name=life_num,json=lifeNum,proto3" json:"life_num,omitempty"`
}

func (x *CustomDungeonSettingBin) Reset() {
	*x = CustomDungeonSettingBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDungeonSettingBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDungeonSettingBin) ProtoMessage() {}

func (x *CustomDungeonSettingBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDungeonSettingBin.ProtoReflect.Descriptor instead.
func (*CustomDungeonSettingBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{130}
}

func (x *CustomDungeonSettingBin) GetIsArriveFinish() bool {
	if x != nil {
		return x.IsArriveFinish
	}
	return false
}

func (x *CustomDungeonSettingBin) GetCoinLimit() uint32 {
	if x != nil {
		return x.CoinLimit
	}
	return 0
}

func (x *CustomDungeonSettingBin) GetTimeLimit() uint32 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *CustomDungeonSettingBin) GetIsForbidSkill() bool {
	if x != nil {
		return x.IsForbidSkill
	}
	return false
}

func (x *CustomDungeonSettingBin) GetOpenRoomList() []uint32 {
	if x != nil {
		return x.OpenRoomList
	}
	return nil
}

func (x *CustomDungeonSettingBin) GetStartRoomId() uint32 {
	if x != nil {
		return x.StartRoomId
	}
	return 0
}

func (x *CustomDungeonSettingBin) GetLifeNum() uint32 {
	if x != nil {
		return x.LifeNum
	}
	return 0
}

type CustomDungeonAbstractBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinishRoomId       uint32            `protobuf:"varint,1,opt,name=finish_room_id,json=finishRoomId,proto3" json:"finish_room_id,omitempty"`
	TotalCoinNum       uint32            `protobuf:"varint,2,opt,name=total_coin_num,json=totalCoinNum,proto3" json:"total_coin_num,omitempty"`
	FirstPublishTime   uint32            `protobuf:"varint,3,opt,name=first_publish_time,json=firstPublishTime,proto3" json:"first_publish_time,omitempty"`
	LastPublishTime    uint32            `protobuf:"varint,4,opt,name=last_publish_time,json=lastPublishTime,proto3" json:"last_publish_time,omitempty"`
	BrickStatisticsMap map[uint32]uint32 `protobuf:"bytes,5,rep,name=brick_statistics_map,json=brickStatisticsMap,proto3" json:"brick_statistics_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *CustomDungeonAbstractBin) Reset() {
	*x = CustomDungeonAbstractBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_common_server_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDungeonAbstractBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDungeonAbstractBin) ProtoMessage() {}

func (x *CustomDungeonAbstractBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_common_server_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDungeonAbstractBin.ProtoReflect.Descriptor instead.
func (*CustomDungeonAbstractBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_common_server_proto_rawDescGZIP(), []int{131}
}

func (x *CustomDungeonAbstractBin) GetFinishRoomId() uint32 {
	if x != nil {
		return x.FinishRoomId
	}
	return 0
}

func (x *CustomDungeonAbstractBin) GetTotalCoinNum() uint32 {
	if x != nil {
		return x.TotalCoinNum
	}
	return 0
}

func (x *CustomDungeonAbstractBin) GetFirstPublishTime() uint32 {
	if x != nil {
		return x.FirstPublishTime
	}
	return 0
}

func (x *CustomDungeonAbstractBin) GetLastPublishTime() uint32 {
	if x != nil {
		return x.LastPublishTime
	}
	return 0
}

func (x *CustomDungeonAbstractBin) GetBrickStatisticsMap() map[uint32]uint32 {
	if x != nil {
		return x.BrickStatisticsMap
	}
	return nil
}

var File_server_only_bin_common_server_proto protoreflect.FileDescriptor

var file_server_only_bin_common_server_proto_rawDesc = []byte{
	0x0a, 0x23, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x2f, 0x62, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x35, 0x0a, 0x09, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x7a, 0x22, 0x37, 0x0a, 0x0d, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x69, 0x72, 0x42,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3e, 0x0a, 0x14, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x69, 0x72, 0x42,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3c, 0x0a, 0x0c, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x50, 0x61, 0x69, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x2d, 0x0a, 0x0a, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2a, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72,
	0x79, 0x42, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x20, 0x0a, 0x0c,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x13, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd2, 0x01,
	0x0a, 0x09, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x65, 0x78, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x09, 0x61, 0x66, 0x66, 0x69,
	0x78, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x2e, 0x41, 0x66,
	0x66, 0x69, 0x78, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x66, 0x66,
	0x69, 0x78, 0x4d, 0x61, 0x70, 0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x66, 0x66, 0x69, 0x78, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x78, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42,
	0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xcf, 0x03, 0x0a,
	0x07, 0x4d, 0x61, 0x69, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x3b, 0x0a, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x52, 0x0d,
	0x69, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x3f,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x22,
	0x66, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x4f, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x22, 0x20, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x4f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x0c, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x47, 0x6f, 0x74, 0x6f, 0x4f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x42, 0x69, 0x6e, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0x3c, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x12, 0x26,
	0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x75, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x19, 0x53, 0x65, 0x74,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x32, 0x0a, 0x13, 0x53, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x0f, 0x0a,
	0x0d, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x68, 0x6f, 0x70, 0x4f, 0x70, 0x22, 0x70,
	0x0a, 0x0e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x4c, 0x0a, 0x0e, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x4f, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2d,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x4d, 0x61, 0x69, 0x6c, 0x4f, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x27, 0x0a,
	0x0c, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x72, 0x65, 0x61, 0x4f, 0x70, 0x12, 0x17, 0x0a,
	0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xae,
	0x01, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72,
	0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x09,
	0x72, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x77, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x77,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22,
	0x50, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x42, 0x6f, 0x72, 0x6e, 0x50, 0x6f, 0x73,
	0x4f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x03, 0x70, 0x6f,
	0x73, 0x22, 0xac, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x68, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x68, 0x63,
	0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6d, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6d,
	0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f,
	0x6d, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x8c, 0x03, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x12, 0x19,
	0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x13, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x11, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d,
	0x61, 0x70, 0x12, 0x61, 0x0a, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x2e,
	0x46, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0x44, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x46,
	0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x2a, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x70,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x14, 0x41,
	0x64, 0x64, 0x4f, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x4f, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2d,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x4f, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2e, 0x0a,
	0x0e, 0x53, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x49, 0x0a,
	0x0f, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x53, 0x75, 0x62, 0x52, 0x65, 0x73, 0x69, 0x6e, 0x4f, 0x70,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x73, 0x53, 0x75, 0x62, 0x22, 0x40, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4f, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x41,
	0x64, 0x64, 0x4d, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x69, 0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6d, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x70, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x69, 0x70, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x62,
	0x0a, 0x0f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x63, 0x6f, 0x69, 0x6e, 0x4f,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x12, 0x3d, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x63, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x93, 0x03, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x4f,
	0x70, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x69, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73,
	0x41, 0x64, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x4f,
	0x6e, 0x65, 0x4f, 0x66, 0x66, 0x4f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x0f, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x1c, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x61,
	0x0a, 0x1a, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x42, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d,
	0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x4f, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x49,
	0x64, 0x22, 0x70, 0x0a, 0x19, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x69, 0x76, 0x65, 0x50, 0x69, 0x63, 0x4f, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x69,
	0x63, 0x49, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x1a, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x4f, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x55, 0x69, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x70, 0x22, 0x7c, 0x0a, 0x19,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x64, 0x64,
	0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61,
	0x64, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x55, 0x0a, 0x15, 0x53, 0x65,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x4f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x22, 0x56, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x43, 0x61, 0x6d, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x12, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x12,
	0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x17, 0x53, 0x65,
	0x74, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x4f, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x69, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6f, 0x70,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x61, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6f,
	0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x61, 0x76, 0x65,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x61, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x7c, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x41, 0x72,
	0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7d,
	0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x61, 0x67, 0x4f, 0x70,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x61, 0x67, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x61, 0x67, 0x4f,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x55, 0x0a,
	0x22, 0x53, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x4e, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61,
	0x70, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x6d,
	0x61, 0x70, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6d, 0x61, 0x70, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x4f, 0x70, 0x65, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x31, 0x41, 0x72, 0x65, 0x61, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x4f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x41,
	0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x6a, 0x0a, 0x15, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x4f, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x78, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x69, 0x6e, 0x6b, 0x4f, 0x70, 0x12, 0x2f, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x22, 0xc0, 0x02, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70,
	0x12, 0x30, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52,
	0x11, 0x6d, 0x61, 0x78, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x6d, 0x61,
	0x70, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x46, 0x6c, 0x79, 0x4d, 0x61, 0x70, 0x44, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x6c, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x46, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x1e, 0x0a, 0x1c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x42,
	0x1f, 0x0a, 0x1d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x66, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x42, 0x17, 0x0a, 0x15, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x4f, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69,
	0x64, 0x22, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69, 0x64, 0x22,
	0x2f, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x6b, 0x4f,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69, 0x64,
	0x22, 0x2f, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x6b,
	0x4f, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69,
	0x64, 0x22, 0x3c, 0x0a, 0x12, 0x42, 0x61, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4f, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x62, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x90, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x4f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x78, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x50, 0x61, 0x69, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x06, 0x78, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x7a, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x50, 0x61, 0x69, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x06, 0x7a, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x4f, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x6f, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6f, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x63,
	0x5f, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x63, 0x61,
	0x6c, 0x63, 0x45, 0x78, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x78, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x45, 0x78, 0x70, 0x22, 0x48,
	0x0a, 0x15, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x6f, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6b, 0x22, 0x4b, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4f, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x6f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x69, 0x73, 0x4f, 0x6b, 0x22, 0x73, 0x0a, 0x1f, 0x50, 0x61, 0x73, 0x73, 0x48, 0x6f, 0x6d,
	0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4f, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a, 0x1f, 0x46, 0x61,
	0x69, 0x6c, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x41, 0x72, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4f, 0x70, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x87, 0x01, 0x0a, 0x21, 0x46, 0x61, 0x69, 0x6c, 0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4f, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x5f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x41, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x0f, 0x42, 0x61, 0x6e,
	0x55, 0x67, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4f, 0x70, 0x12, 0x35, 0x0a, 0x17,
	0x62, 0x61, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x62,
	0x61, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x4f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64,
	0x22, 0x40, 0x0a, 0x23, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50,
	0x6f, 0x73, 0x49, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x49, 0x64, 0x22, 0x34, 0x0a, 0x10, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x28, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x61, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x6e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x4f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x77, 0x61, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0xc4, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x4f, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x78,
	0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0f, 0x61, 0x63,
	0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x42, 0x1a, 0x0a, 0x18, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x42, 0x1a, 0x0a, 0x18,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x70, 0x4f,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x70,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x12,
	0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4f, 0x70, 0x12, 0x30, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6f,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x52, 0x09, 0x61, 0x64, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x4f, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6b, 0x0a, 0x15, 0x53, 0x65,
	0x74, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x4f, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x67, 0x61, 0x64,
	0x67, 0x65, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x67, 0x61,
	0x64, 0x67, 0x65, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x58, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x61, 0x72, 0x4f, 0x70, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x70, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x54, 0x61, 0x6c, 0x6b, 0x4f, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x6c, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x6c, 0x6b, 0x49,
	0x64, 0x22, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x54, 0x61, 0x6c, 0x6b, 0x4f, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x6c, 0x6b, 0x49, 0x64, 0x22,
	0x4b, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x43, 0x47, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x5e, 0x0a, 0x12,
	0x53, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4f, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x54, 0x69,
	0x70, 0x73, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x70,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70,
	0x75, 0x73, 0x68, 0x54, 0x69, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x49, 0x0a, 0x15,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x43, 0x47, 0x43,
	0x61, 0x72, 0x64, 0x4f, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x64, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x22, 0x3d, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x43, 0x47, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61,
	0x63, 0x65, 0x4f, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64,
	0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x43, 0x47, 0x43, 0x61, 0x72, 0x64, 0x42, 0x61, 0x63,
	0x6b, 0x4f, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x42,
	0x61, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x43, 0x47, 0x44, 0x65, 0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4f, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6b,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x13, 0x42, 0x61, 0x6e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x47, 0x43, 0x47, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x34, 0x0a, 0x11, 0x42, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x43, 0x47, 0x50,
	0x56, 0x50, 0x4f, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa7, 0x37, 0x0a, 0x0d, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x4d, 0x73, 0x67, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x71, 0x75, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x65, 0x6e, 0x71,
	0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x12, 0x2e, 0x0a, 0x07, 0x67, 0x6f, 0x74, 0x6f,
	0x5f, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x6f, 0x74, 0x6f, 0x4f, 0x70, 0x48, 0x00,
	0x52, 0x06, 0x67, 0x6f, 0x74, 0x6f, 0x4f, 0x70, 0x12, 0x4e, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x4f, 0x70, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x12, 0x41, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x12, 0x65, 0x0a, 0x1e, 0x73,
	0x65, 0x74, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6f, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x19, 0x73, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4f, 0x70, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x12, 0x3e, 0x0a, 0x0f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6f, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x53, 0x68, 0x6f, 0x70, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x53, 0x68, 0x6f, 0x70, 0x4f, 0x70, 0x12, 0x41, 0x0a, 0x10, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x12, 0x42, 0x0a, 0x11,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x6f,
	0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4f, 0x70, 0x48, 0x00,
	0x52, 0x0e, 0x74, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4f, 0x70,
	0x12, 0x32, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6f, 0x70, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x6c, 0x4d, 0x61, 0x69, 0x6c, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x4d, 0x61,
	0x69, 0x6c, 0x4f, 0x70, 0x12, 0x4b, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x70, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x11,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4f,
	0x70, 0x12, 0x3b, 0x0a, 0x0e, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x6f, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x72, 0x65, 0x61, 0x4f, 0x70, 0x48, 0x00,
	0x52, 0x0c, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x72, 0x65, 0x61, 0x4f, 0x70, 0x12, 0x4b,
	0x0a, 0x14, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x6f, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x12, 0x35, 0x0a, 0x0c, 0x64,
	0x65, 0x6c, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x6f, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x4f, 0x70, 0x12, 0x32, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6f,
	0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x12, 0x45, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x6f, 0x70, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x42, 0x6f, 0x72, 0x6e, 0x50, 0x6f, 0x73, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x42, 0x6f, 0x72, 0x6e, 0x50, 0x6f, 0x73, 0x4f, 0x70, 0x12, 0x4b, 0x0a,
	0x14, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x6f, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x11, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x69, 0x6e,
	0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x12, 0x64, 0x0a, 0x1d, 0x73, 0x65,
	0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x19, 0x73, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70,
	0x12, 0x3e, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6f, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x48,
	0x00, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x70,
	0x12, 0x55, 0x0a, 0x18, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x4f, 0x70, 0x48,
	0x00, 0x52, 0x14, 0x61, 0x64, 0x64, 0x4f, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x4f, 0x70, 0x12, 0x3b, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x5f, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x4f, 0x70, 0x12, 0x41, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x70, 0x12, 0x46, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x5f, 0x6f,
	0x72, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64,
	0x4f, 0x72, 0x53, 0x75, 0x62, 0x52, 0x65, 0x73, 0x69, 0x6e, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0f,
	0x61, 0x64, 0x64, 0x4f, 0x72, 0x53, 0x75, 0x62, 0x52, 0x65, 0x73, 0x69, 0x6e, 0x4f, 0x70, 0x12,
	0x62, 0x0a, 0x1d, 0x73, 0x65, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6f, 0x70,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x56, 0x61, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x18, 0x73, 0x65, 0x74, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4f, 0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x6d, 0x63, 0x6f, 0x69, 0x6e,
	0x5f, 0x6f, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x69, 0x70, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x4d, 0x63, 0x6f, 0x69, 0x6e,
	0x4f, 0x70, 0x12, 0x35, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x69, 0x6e, 0x5f,
	0x6f, 0x70, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x4f, 0x70, 0x12, 0x39, 0x0a, 0x0e, 0x64, 0x65, 0x6c,
	0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x6f, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65,
	0x4f, 0x66, 0x66, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x4f,
	0x66, 0x66, 0x4f, 0x70, 0x12, 0x44, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x70, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x12, 0x61, 0x0a, 0x1a, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6f, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x16, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x12, 0x67, 0x0a,
	0x1e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d,
	0x5f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x6f, 0x70, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x42, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x43, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x1a, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x42, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65,
	0x43, 0x61, 0x6d, 0x70, 0x4f, 0x70, 0x12, 0x53, 0x0a, 0x14, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x69, 0x76,
	0x65, 0x50, 0x69, 0x63, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x11, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x47, 0x69, 0x76, 0x65, 0x50, 0x69, 0x63, 0x4f, 0x70, 0x12, 0x55, 0x0a, 0x14, 0x65,
	0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x5f, 0x6f, 0x70, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x12,
	0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x4f, 0x70, 0x12, 0x51, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x70, 0x48, 0x00,
	0x52, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x4f, 0x70, 0x12, 0x4e, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x48,
	0x00, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x4f, 0x70, 0x12, 0x5e, 0x0a, 0x1b, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6f, 0x70, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6f, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x17, 0x73, 0x65,
	0x74, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x4f, 0x70, 0x12, 0x6c, 0x0a, 0x21, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6f,
	0x70, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6f, 0x70,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x61, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x1b, 0x61, 0x64, 0x64, 0x43, 0x6f, 0x6f, 0x70, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x53, 0x61, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x70, 0x12, 0x64, 0x0a, 0x1d, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x6f, 0x70, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x19,
	0x61, 0x64, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x12, 0x58, 0x0a, 0x19, 0x73, 0x65, 0x74,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x5f, 0x6f, 0x70, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x75, 0x6e,
	0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x15, 0x73, 0x65,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x4f, 0x70, 0x12, 0x74, 0x0a, 0x23, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x61, 0x62, 0x5f, 0x63, 0x61, 0x6d,
	0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6f, 0x70, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x43, 0x61, 0x6d, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x1e, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x43, 0x61,
	0x6d, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x12, 0x42, 0x0a, 0x11, 0x70, 0x72, 0x6f,
	0x63, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6f, 0x70, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x61, 0x67, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x63, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x61, 0x67, 0x4f, 0x70, 0x12, 0x55, 0x0a,
	0x18, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x70, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x14,
	0x73, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x4f, 0x70, 0x12, 0x44, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6d, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x63, 0x6f, 0x69, 0x6e, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x63, 0x6f, 0x69, 0x6e, 0x4f, 0x70, 0x12, 0x81, 0x01, 0x0a, 0x28, 0x73,
	0x65, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x22, 0x73, 0x65, 0x74, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x12, 0x6b,
	0x0a, 0x20, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x6f, 0x70, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x41, 0x72, 0x65, 0x61, 0x45, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x1b,
	0x73, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x41, 0x72, 0x65, 0x61, 0x45, 0x78, 0x70,
	0x6c, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x70, 0x12, 0x59, 0x0a, 0x1a, 0x73,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6f, 0x72,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x6f, 0x70, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x78,
	0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x70, 0x48, 0x00, 0x52,
	0x15, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x70, 0x12, 0x52, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6f,
	0x70, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x70,
	0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x70, 0x12, 0x38, 0x0a, 0x0d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6f, 0x70, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x6e, 0x6b, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69,
	0x6e, 0x6b, 0x4f, 0x70, 0x12, 0x6b, 0x0a, 0x20, 0x73, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6f, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4f, 0x70, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f,
	0x70, 0x12, 0x38, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f,
	0x6f, 0x70, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0b,
	0x61, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x12, 0x38, 0x0a, 0x0d, 0x64,
	0x65, 0x6c, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x4f, 0x70, 0x12, 0x42, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x70, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x41, 0x73, 0x6b, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x6b, 0x4f, 0x70, 0x12, 0x42, 0x0a, 0x11, 0x64, 0x65, 0x6c,
	0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x70, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x6b, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x64,
	0x65, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x6b, 0x4f, 0x70, 0x12, 0x4e, 0x0a,
	0x15, 0x62, 0x61, 0x6e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x12, 0x62, 0x61, 0x6e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4f, 0x70, 0x12, 0x5e, 0x0a,
	0x1b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x5f, 0x6f, 0x70, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x73,
	0x4f, 0x70, 0x48, 0x00, 0x52, 0x17, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x4f, 0x70, 0x12, 0x70, 0x0a,
	0x21, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x6f, 0x70, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x61,
	0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x70, 0x48, 0x00,
	0x52, 0x1d, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x70, 0x12,
	0x57, 0x0a, 0x18, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x70, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x70, 0x48,
	0x00, 0x52, 0x15, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x70, 0x12, 0x5a, 0x0a, 0x19, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x6f, 0x70, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x16, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4f, 0x70, 0x12, 0x77, 0x0a, 0x24, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d,
	0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6f, 0x70, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x48,
	0x6f, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x1f, 0x70, 0x61,
	0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x41, 0x72, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4f, 0x70, 0x12, 0x77, 0x0a,
	0x24, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x5f, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x5f, 0x6f, 0x70, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x1f, 0x66, 0x61, 0x69, 0x6c, 0x48, 0x6f, 0x6d, 0x65, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x4f, 0x70, 0x12, 0x7d, 0x0a, 0x26, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x68,
	0x6f, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6f, 0x70,
	0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x61, 0x69, 0x6c, 0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x41, 0x72,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4f, 0x70,
	0x48, 0x00, 0x52, 0x21, 0x66, 0x61, 0x69, 0x6c, 0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4f, 0x70, 0x12, 0x45, 0x0a, 0x12, 0x62, 0x61, 0x6e, 0x5f, 0x75, 0x67, 0x63,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x6f, 0x70, 0x18, 0x40, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x6e, 0x55, 0x67, 0x63,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x61, 0x6e,
	0x55, 0x67, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4f, 0x70, 0x12, 0x75, 0x0a, 0x22,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f,
	0x6f, 0x70, 0x18, 0xe1, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4f,
	0x70, 0x48, 0x00, 0x52, 0x1e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x4f, 0x70, 0x12, 0x86, 0x01, 0x0a, 0x29, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x6f,
	0x70, 0x18, 0xe2, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x49, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x23, 0x72, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x49, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4f, 0x70, 0x12, 0x4a, 0x0a, 0x13,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6f, 0x70, 0x18, 0xe3, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x67,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x12, 0x96, 0x01, 0x0a, 0x2f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x18, 0xe4, 0xda, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x61, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x28, 0x72, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x57, 0x61, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4f,
	0x70, 0x12, 0x46, 0x0a, 0x11, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x18, 0xb0, 0xea, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x12, 0x57, 0x0a, 0x18, 0x73, 0x65, 0x74,
	0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x5f, 0x6f, 0x70, 0x18, 0xb1, 0xea, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x70, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x14, 0x73, 0x65,
	0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x70,
	0x4f, 0x70, 0x12, 0x51, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x70, 0x18, 0xb2, 0xea, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x48,
	0x00, 0x52, 0x12, 0x61, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x4f, 0x70, 0x12, 0x5a, 0x0a, 0x19, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x61, 0x64,
	0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x6f, 0x70, 0x18, 0x99, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x15, 0x73, 0x65, 0x74, 0x47,
	0x61, 0x64, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f,
	0x70, 0x12, 0x4e, 0x0a, 0x15, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x76, 0x61, 0x72, 0x5f, 0x6f, 0x70, 0x18, 0x81, 0xfa, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x61, 0x72, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x11,
	0x73, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x61, 0x72, 0x4f,
	0x70, 0x12, 0x66, 0x0a, 0x1d, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x6f, 0x70, 0x18, 0xe9, 0x81, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x19,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x70, 0x12, 0x53, 0x0a, 0x16, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x6f, 0x70, 0x18, 0xea, 0x81, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x12, 0x4d,
	0x0a, 0x14, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x74,
	0x61, 0x6c, 0x6b, 0x5f, 0x6f, 0x70, 0x18, 0xeb, 0x81, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x54, 0x61, 0x6c, 0x6b, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x11, 0x61, 0x64, 0x64, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x6c, 0x6b, 0x4f, 0x70, 0x12, 0x4d, 0x0a,
	0x14, 0x64, 0x65, 0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x61,
	0x6c, 0x6b, 0x5f, 0x6f, 0x70, 0x18, 0xec, 0x81, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x54, 0x61, 0x6c, 0x6b, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x6c, 0x6b, 0x4f, 0x70, 0x12, 0x64, 0x0a, 0x1d,
	0x73, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x67, 0x63, 0x67, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x70, 0x18, 0xed, 0x81,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x43, 0x47, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x18, 0x73, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x47, 0x63, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x4f, 0x70, 0x12, 0x51, 0x0a, 0x16, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x70, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x18, 0xee, 0x81, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74,
	0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x48,
	0x00, 0x52, 0x12, 0x73, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x70, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x12, 0x5a, 0x0a, 0x19, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x67, 0x63, 0x67, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6f, 0x70, 0x18, 0xef, 0x81, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47,
	0x43, 0x47, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x63, 0x67, 0x43, 0x61, 0x72, 0x64, 0x4f,
	0x70, 0x12, 0x67, 0x0a, 0x1e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x67, 0x63, 0x67, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6f, 0x70, 0x18, 0xf0, 0x81, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x47, 0x43, 0x47, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61, 0x63, 0x65, 0x4f, 0x70, 0x48, 0x00, 0x52,
	0x19, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x63, 0x67,
	0x43, 0x61, 0x72, 0x64, 0x46, 0x61, 0x63, 0x65, 0x4f, 0x70, 0x12, 0x67, 0x0a, 0x1e, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x67, 0x63, 0x67, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x18, 0xf1, 0x81, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x43, 0x47, 0x43, 0x61, 0x72, 0x64,
	0x42, 0x61, 0x63, 0x6b, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x19, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x63, 0x67, 0x43, 0x61, 0x72, 0x64, 0x42, 0x61, 0x63,
	0x6b, 0x4f, 0x70, 0x12, 0x6a, 0x0a, 0x1f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x67, 0x63, 0x67, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x70, 0x18, 0xf2, 0x81, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x47, 0x43, 0x47, 0x44, 0x65, 0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f,
	0x70, 0x48, 0x00, 0x52, 0x1a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x47, 0x63, 0x67, 0x44, 0x65, 0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x12,
	0x54, 0x0a, 0x17, 0x62, 0x61, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x67, 0x63,
	0x67, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x70, 0x18, 0xf3, 0x81, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x6e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x47, 0x43, 0x47, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x48, 0x00,
	0x52, 0x13, 0x62, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x63, 0x67, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x70, 0x12, 0x4e, 0x0a, 0x15, 0x62, 0x61, 0x6e, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x67, 0x63, 0x67, 0x5f, 0x70, 0x76, 0x70, 0x5f, 0x6f, 0x70, 0x18, 0xf4,
	0x81, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x61, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x43, 0x47, 0x50, 0x56, 0x50, 0x4f, 0x70,
	0x48, 0x00, 0x52, 0x11, 0x62, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x63, 0x67,
	0x50, 0x76, 0x70, 0x4f, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22,
	0x1e, 0x0a, 0x0a, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22,
	0x86, 0x01, 0x0a, 0x20, 0x48, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41,
	0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x25, 0x48, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x03, 0x0a, 0x11, 0x48, 0x6f, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x71,
	0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x65,
	0x6e, 0x71, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6f,
	0x70, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x48, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x06, 0x74, 0x65,
	0x73, 0x74, 0x4f, 0x70, 0x12, 0x70, 0x0a, 0x1f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x1c, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x12, 0x80, 0x01, 0x0a, 0x25, 0x72, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48,
	0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x21, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x41, 0x72, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x22, 0x28, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4d, 0x0a,
	0x18, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd1, 0x02, 0x0a,
	0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x69, 0x6e,
	0x12, 0x58, 0x0a, 0x12, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6f,
	0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x42, 0x69, 0x6e, 0x2e, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x4f, 0x66,
	0x66, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x67, 0x61, 0x64, 0x67, 0x65,
	0x74, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x5b, 0x0a, 0x13, 0x6d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x2e,
	0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e,
	0x65, 0x4f, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x1a, 0x42, 0x0a, 0x14, 0x47, 0x61, 0x64, 0x67, 0x65,
	0x74, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x48, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x47, 0x61, 0x64, 0x67,
	0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x07, 0x41,
	0x72, 0x65, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x6c, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6c, 0x6f,
	0x72, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x52, 0x12, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x40, 0x0a, 0x07, 0x43, 0x69, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x22, 0xde, 0x01, 0x0a, 0x16, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x29,
	0x0a, 0x07, 0x63, 0x75, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69,
	0x6e, 0x52, 0x06, 0x63, 0x75, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x5f, 0x72, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x06, 0x63, 0x75,
	0x72, 0x52, 0x6f, 0x74, 0x12, 0x36, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x6f, 0x73, 0x12, 0x36, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x52, 0x6f, 0x74, 0x22, 0x5b, 0x0a, 0x0e, 0x45, 0x6e, 0x76, 0x5a, 0x6f, 0x6e, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x22, 0xc1, 0x01, 0x0a, 0x15, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x45, 0x6e, 0x76, 0x41, 0x6e,
	0x69, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x51, 0x0a, 0x0d, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x45, 0x6e, 0x76, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e,
	0x2e, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x1a, 0x55,
	0x0a, 0x10, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x76, 0x5a,
	0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbc, 0x01, 0x0a, 0x13, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x57,
	0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x12, 0x24, 0x0a,
	0x0e, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x65,
	0x61, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x6f, 0x72, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x12, 0x66, 0x6f, 0x72, 0x63, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x6d, 0x0a, 0x17, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x43, 0x6c, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x6a, 0x73, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x16, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x41, 0x6c, 0x6c,
	0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x12, 0x46,
	0x0a, 0x11, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x69, 0x6e, 0x52, 0x0f, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x5f, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x53, 0x0a, 0x16, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x43, 0x6c, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x52,
	0x13, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x63,
	0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x43, 0x6c,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xad, 0x02,
	0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e,
	0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0c, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x73, 0x65, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x1a, 0x57, 0x0a, 0x10, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xad, 0x02,
	0x0a, 0x16, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x61, 0x64,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0d, 0x64, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x5b, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x12, 0x34, 0x0a,
	0x17, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x69, 0x73, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6c, 0x6c, 0x44,
	0x65, 0x61, 0x64, 0x1a, 0x58, 0x0a, 0x13, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x02,
	0x0a, 0x10, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x42,
	0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61,
	0x72, 0x65, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x41, 0x72, 0x65, 0x61,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x4d, 0x61,
	0x70, 0x12, 0x3f, 0x0a, 0x08, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x69, 0x74, 0x79, 0x4d,
	0x61, 0x70, 0x1a, 0x4a, 0x0a, 0x0c, 0x41, 0x72, 0x65, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x65, 0x61,
	0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a,
	0x0a, 0x0c, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x48, 0x0a, 0x15, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x42, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x22, 0x84, 0x01, 0x0a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x06, 0x63, 0x75, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x29, 0x0a,
	0x07, 0x63, 0x75, 0x72, 0x5f, 0x72, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e,
	0x52, 0x06, 0x63, 0x75, 0x72, 0x52, 0x6f, 0x74, 0x22, 0x4c, 0x0a, 0x0a, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x54, 0x61, 0x67, 0x4f, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x61, 0x67, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x08, 0x57, 0x61, 0x79, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x0f, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x48, 0x0a, 0x18, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x57, 0x61, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x64, 0x57, 0x61, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x4c, 0x0a, 0x1a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6c,
	0x69, 0x70, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x79,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x17, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xbb,
	0x09, 0x0a, 0x08, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x5f, 0x77,
	0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x41,
	0x6c, 0x6c, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e,
	0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x51, 0x0a, 0x15, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x52, 0x13,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x42, 0x0a, 0x0e, 0x65, 0x6e,
	0x76, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x45, 0x6e, 0x76, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e,
	0x52, 0x0c, 0x65, 0x6e, 0x76, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x3b,
	0x0a, 0x0d, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x62, 0x69, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0b,
	0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x12, 0x65,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x62, 0x69,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x70, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x70, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x75,
	0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x15, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x6e,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d,
	0x0a, 0x24, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x62, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x42, 0x65, 0x45, 0x78, 0x70, 0x6c,
	0x6f, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x53, 0x70, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x11, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6f,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x61, 0x67, 0x4f, 0x70, 0x52,
	0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x61, 0x67, 0x4f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x69, 0x64, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x6e, 0x68, 0x69, 0x64,
	0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0f, 0x75, 0x6e, 0x68, 0x69, 0x64, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x11,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x62, 0x69,
	0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x48,
	0x00, 0x52, 0x0f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x42,
	0x69, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xf9, 0x06, 0x0a,
	0x0d, 0x47, 0x43, 0x47, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x75, 0x69,
	0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x55, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x75,
	0x69, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x12, 0x64, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64,
	0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x19, 0x66, 0x6f,
	0x72, 0x62, 0x69, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x55, 0x69, 0x64, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x23, 0x0a, 0x0f, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x4f, 0x70, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xc1, 0x01,
	0x0a, 0x1a, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x46, 0x75, 0x72, 0x6e, 0x69,
	0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x11,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x69,
	0x6e, 0x22, 0x83, 0x02, 0x0a, 0x26, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x47, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x65,
	0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x69, 0x76, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x1a, 0x3f, 0x0a, 0x11, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x91, 0x01, 0x0a, 0x23, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x4f, 0x70, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x69, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x37, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x69,
	0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x12, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x47, 0x43, 0x47, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x43, 0x47, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xe1, 0x01, 0x0a, 0x19, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x69,
	0x76, 0x65, 0x47, 0x69, 0x66, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x0c, 0x67, 0x69, 0x66, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x69, 0x76, 0x65, 0x47, 0x69, 0x66, 0x74,
	0x2e, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x1a, 0x3d, 0x0a,
	0x0f, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x55, 0x0a, 0x20,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x22, 0xed, 0x04, 0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4f,
	0x70, 0x42, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x48, 0x00, 0x52,
	0x06, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x12, 0x58, 0x0a, 0x16, 0x66, 0x75, 0x72, 0x6e, 0x69,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x6f,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75,
	0x72, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x48, 0x00, 0x52, 0x13, 0x66, 0x75,
	0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x4f,
	0x70, 0x12, 0x6d, 0x0a, 0x1b, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6f, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x69, 0x76, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x48, 0x00, 0x52, 0x17, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x47, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x70,
	0x12, 0x64, 0x0a, 0x18, 0x77, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x5f,
	0x67, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x4f, 0x70, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x69, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00,
	0x52, 0x14, 0x77, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x47, 0x69, 0x76, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x12, 0x55, 0x0a, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6f, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47,
	0x69, 0x76, 0x65, 0x47, 0x69, 0x66, 0x74, 0x48, 0x00, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x47, 0x69, 0x76, 0x65, 0x47, 0x69, 0x66, 0x74, 0x4f, 0x70, 0x12, 0x59, 0x0a,
	0x13, 0x76, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x64, 0x5f, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x56, 0x69, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x11, 0x76, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x44, 0x69,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x67, 0x63, 0x67, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4f,
	0x70, 0x47, 0x43, 0x47, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x63,
	0x67, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4f, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x22, 0xdb, 0x01, 0x0a, 0x15, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x61, 0x6b, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x42, 0x69, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6d, 0x61, 0x6b, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x75, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49,
	0x64, 0x22, 0x4f, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65,
	0x49, 0x64, 0x22, 0x8e, 0x02, 0x0a, 0x17, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x69, 0x6e, 0x12, 0x28,
	0x0a, 0x10, 0x69, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x41, 0x72, 0x72, 0x69,
	0x76, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x69, 0x6e,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f,
	0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x62, 0x69, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x24,
	0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x52, 0x6f, 0x6f, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x69, 0x66, 0x65,
	0x4e, 0x75, 0x6d, 0x22, 0xf2, 0x02, 0x0a, 0x18, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x69, 0x6e,
	0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x12,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x69, 0x0a, 0x14, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x42, 0x69, 0x6e, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x62,
	0x72, 0x69, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4d, 0x61,
	0x70, 0x1a, 0x45, 0x0a, 0x17, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xe9, 0x02, 0x0a, 0x11, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11,
	0x0a, 0x0d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x47, 0x41,
	0x44, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x5f, 0x47,
	0x41, 0x44, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x4f, 0x52,
	0x55, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45,
	0x52, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4f, 0x50, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4f, 0x50, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x56, 0x41, 0x4c,
	0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x45, 0x10,
	0x08, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x47, 0x41, 0x44, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x09,
	0x12, 0x15, 0x0a, 0x11, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x44, 0x45, 0x41, 0x44, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x4f, 0x50, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x45, 0x52, 0x10, 0x0b, 0x2a, 0x92, 0x01, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69,
	0x6e, 0x6b, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x21, 0x0a, 0x1d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4f,
	0x50, 0x5f, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x4f, 0x50, 0x5f, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49,
	0x53, 0x48, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4c, 0x49,
	0x4e, 0x4b, 0x5f, 0x4f, 0x50, 0x5f, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x53, 0x0a, 0x0e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x54, 0x61, 0x67, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x5f,
	0x4f, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x10, 0x02, 0x2a, 0x9d,
	0x02, 0x0a, 0x0d, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x4f, 0x50, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x46,
	0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x5f, 0x48, 0x45, 0x4c, 0x50, 0x10, 0x02, 0x12, 0x30,
	0x0a, 0x2c, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x50, 0x4c, 0x41,
	0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x03,
	0x12, 0x24, 0x0a, 0x20, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x57,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4d, 0x50, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x49,
	0x56, 0x45, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x46, 0x46,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x56, 0x49, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x4e,
	0x44, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4f,
	0x50, 0x5f, 0x47, 0x43, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x07, 0x42, 0x28,
	0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x79,
	0x76, 0x61, 0x74, 0x2d, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2f, 0x68, 0x6b, 0x34, 0x65, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_only_bin_common_server_proto_rawDescOnce sync.Once
	file_server_only_bin_common_server_proto_rawDescData = file_server_only_bin_common_server_proto_rawDesc
)

func file_server_only_bin_common_server_proto_rawDescGZIP() []byte {
	file_server_only_bin_common_server_proto_rawDescOnce.Do(func() {
		file_server_only_bin_common_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_only_bin_common_server_proto_rawDescData)
	})
	return file_server_only_bin_common_server_proto_rawDescData
}

var file_server_only_bin_common_server_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_server_only_bin_common_server_proto_msgTypes = make([]protoimpl.MessageInfo, 148)
var file_server_only_bin_common_server_proto_goTypes = []interface{}{
	(GroupBinOperation)(0),                           // 0: proto.GroupBinOperation
	(GroupLinkOpType)(0),                             // 1: proto.GroupLinkOpType
	(SceneTagOpType)(0),                              // 2: proto.SceneTagOpType
	(OfflineOpType)(0),                               // 3: proto.OfflineOpType
	(*VectorBin)(nil),                                // 4: proto.VectorBin
	(*Uint32PairBin)(nil),                            // 5: proto.Uint32PairBin
	(*Uint32ToInt32PairBin)(nil),                     // 6: proto.Uint32ToInt32PairBin
	(*FloatPairBin)(nil),                             // 7: proto.FloatPairBin
	(*Uint32List)(nil),                               // 8: proto.Uint32List
	(*Int32List)(nil),                                // 9: proto.Int32List
	(*ReliquaryBin)(nil),                             // 10: proto.ReliquaryBin
	(*WeaponBin)(nil),                                // 11: proto.WeaponBin
	(*ItemParamBin)(nil),                             // 12: proto.ItemParamBin
	(*MailBin)(nil),                                  // 13: proto.MailBin
	(*DelItemOp)(nil),                                // 14: proto.DelItemOp
	(*DelItemNegativeOp)(nil),                        // 15: proto.DelItemNegativeOp
	(*DelEquipOp)(nil),                               // 16: proto.DelEquipOp
	(*PlayerGotoOp)(nil),                             // 17: proto.PlayerGotoOp
	(*ResetParentQuestOp)(nil),                       // 18: proto.ResetParentQuestOp
	(*RefreshGroupOp)(nil),                           // 19: proto.RefreshGroupOp
	(*SetScenePointLockStatusOp)(nil),                // 20: proto.SetScenePointLockStatusOp
	(*SetPlayerNickNameOp)(nil),                      // 21: proto.SetPlayerNickNameOp
	(*RefreshShopOp)(nil),                            // 22: proto.RefreshShopOp
	(*UnlockTalentOp)(nil),                           // 23: proto.UnlockTalentOp
	(*TakeOffEquipOp)(nil),                           // 24: proto.TakeOffEquipOp
	(*DelMailOp)(nil),                                // 25: proto.DelMailOp
	(*UnlockAreaOp)(nil),                             // 26: proto.UnlockAreaOp
	(*FinishDailyTaskOp)(nil),                        // 27: proto.FinishDailyTaskOp
	(*AddItemOp)(nil),                                // 28: proto.AddItemOp
	(*ModifyBornPosOp)(nil),                          // 29: proto.ModifyBornPosOp
	(*SubCoinNegativeOp)(nil),                        // 30: proto.SubCoinNegativeOp
	(*SetQuestContentProgressOp)(nil),                // 31: proto.SetQuestContentProgressOp
	(*FinishOrderOp)(nil),                            // 32: proto.FinishOrderOp
	(*AddOrModifyWatcherOp)(nil),                     // 33: proto.AddOrModifyWatcherOp
	(*DelWatcherOp)(nil),                             // 34: proto.DelWatcherOp
	(*SetSignatureOp)(nil),                           // 35: proto.SetSignatureOp
	(*AddOrSubResinOp)(nil),                          // 36: proto.AddOrSubResinOp
	(*SetQuestGlobalVarValueOp)(nil),                 // 37: proto.SetQuestGlobalVarValueOp
	(*AddMcoinVipPointOp)(nil),                       // 38: proto.AddMcoinVipPointOp
	(*ExchangeMcoinOp)(nil),                          // 39: proto.ExchangeMcoinOp
	(*GroupBinOp)(nil),                               // 40: proto.GroupBinOp
	(*DelOneOffOp)(nil),                              // 41: proto.DelOneOffOp
	(*FinishRoutineOp)(nil),                          // 42: proto.FinishRoutineOp
	(*FinishDailyTaskUnloadGroupOp)(nil),             // 43: proto.FinishDailyTaskUnloadGroupOp
	(*RefreshBlossomCircleCampOp)(nil),               // 44: proto.RefreshBlossomCircleCampOp
	(*BlessingActivityGivePicOp)(nil),                // 45: proto.BlessingActivityGivePicOp
	(*ExpeditionActivityAssistOp)(nil),               // 46: proto.ExpeditionActivityAssistOp
	(*RecoverWorldLevelOp)(nil),                      // 47: proto.RecoverWorldLevelOp
	(*AddRegionSearchProgressOp)(nil),                // 48: proto.AddRegionSearchProgressOp
	(*SetMatchPunishTimesOp)(nil),                    // 49: proto.SetMatchPunishTimesOp
	(*ResetChannellerSlabCampGroupOp)(nil),           // 50: proto.ResetChannellerSlabCampGroupOp
	(*ForceAcceptQuestOp)(nil),                       // 51: proto.ForceAcceptQuestOp
	(*SetMainCoopConfidenceOp)(nil),                  // 52: proto.SetMainCoopConfidenceOp
	(*AddCoopPointSavePointListOp)(nil),              // 53: proto.AddCoopPointSavePointListOp
	(*SetClimateAreaTypeOp)(nil),                     // 54: proto.SetClimateAreaTypeOp
	(*ProcSceneTagOp)(nil),                           // 55: proto.ProcSceneTagOp
	(*SetFinishedParentQuestChildStateOp)(nil),       // 56: proto.SetFinishedParentQuestChildStateOp
	(*ChangeMapAreaInfoOp)(nil),                      // 57: proto.ChangeMapAreaInfoOp
	(*SetLevel1AreaExplorePointOp)(nil),              // 58: proto.SetLevel1AreaExplorePointOp
	(*SetCodexOpenOrCloseOp)(nil),                    // 59: proto.SetCodexOpenOrCloseOp
	(*GroupLinkOp)(nil),                              // 60: proto.GroupLinkOp
	(*SetWatcherCompRecordValueOp)(nil),              // 61: proto.SetWatcherCompRecordValueOp
	(*AddFriendOp)(nil),                              // 62: proto.AddFriendOp
	(*DelFriendOp)(nil),                              // 63: proto.DelFriendOp
	(*AddFriendAskOp)(nil),                           // 64: proto.AddFriendAskOp
	(*DelFriendAskOp)(nil),                           // 65: proto.DelFriendAskOp
	(*BanCustomDungeonOp)(nil),                       // 66: proto.BanCustomDungeonOp
	(*RemoveInvalidMapMarksOp)(nil),                  // 67: proto.RemoveInvalidMapMarksOp
	(*RecalculateAreaExplorePointOp)(nil),            // 68: proto.RecalculateAreaExplorePointOp
	(*NicknameAuditResultOp)(nil),                    // 69: proto.NicknameAuditResultOp
	(*SignatureAuditResultOp)(nil),                   // 70: proto.SignatureAuditResultOp
	(*PassHomeSceneArrangementAuditOp)(nil),          // 71: proto.PassHomeSceneArrangementAuditOp
	(*FailHomeSceneArrangementAuditOp)(nil),          // 72: proto.FailHomeSceneArrangementAuditOp
	(*FailHomeModulesArrangementAuditOp)(nil),        // 73: proto.FailHomeModulesArrangementAuditOp
	(*BanUgcPublishOp)(nil),                          // 74: proto.BanUgcPublishOp
	(*ResetPlayerPersistentDungeonOp)(nil),           // 75: proto.ResetPlayerPersistentDungeonOp
	(*ResetPlayerPosInPersistentDungeonOp)(nil),      // 76: proto.ResetPlayerPosInPersistentDungeonOp
	(*LevelTagChangeOp)(nil),                         // 77: proto.LevelTagChangeOp
	(*ResetPlayerWayPointInPersistentDungeonOp)(nil), // 78: proto.ResetPlayerWayPointInPersistentDungeonOp
	(*ExhibitionSetOp)(nil),                          // 79: proto.ExhibitionSetOp
	(*SetAvatarExtraPropOp)(nil),                     // 80: proto.SetAvatarExtraPropOp
	(*AddItemWithLimitOp)(nil),                       // 81: proto.AddItemWithLimitOp
	(*SetGadgetChainLevelOp)(nil),                    // 82: proto.SetGadgetChainLevelOp
	(*SetDailyTaskVarOp)(nil),                        // 83: proto.SetDailyTaskVarOp
	(*AvatarRenameAuditResultOp)(nil),                // 84: proto.AvatarRenameAuditResultOp
	(*ResetAvatarRenameOp)(nil),                      // 85: proto.ResetAvatarRenameOp
	(*AddFinishedTalkOp)(nil),                        // 86: proto.AddFinishedTalkOp
	(*DelFinishedTalkOp)(nil),                        // 87: proto.DelFinishedTalkOp
	(*SetPlayerGCGMatchScoreOp)(nil),                 // 88: proto.SetPlayerGCGMatchScoreOp
	(*SetPushTipsStateOp)(nil),                       // 89: proto.SetPushTipsStateOp
	(*DeletePlayerGCGCardOp)(nil),                    // 90: proto.DeletePlayerGCGCardOp
	(*DeletePlayerGCGCardFaceOp)(nil),                // 91: proto.DeletePlayerGCGCardFaceOp
	(*DeletePlayerGCGCardBackOp)(nil),                // 92: proto.DeletePlayerGCGCardBackOp
	(*DeletePlayerGCGDeckFieldOp)(nil),               // 93: proto.DeletePlayerGCGDeckFieldOp
	(*BanPlayerGCGMatchOp)(nil),                      // 94: proto.BanPlayerGCGMatchOp
	(*BanPlayerGCGPVPOp)(nil),                        // 95: proto.BanPlayerGCGPVPOp
	(*OfflineMsgBin)(nil),                            // 96: proto.OfflineMsgBin
	(*HomeTestOp)(nil),                               // 97: proto.HomeTestOp
	(*HomeRestoreDefaultsArrangementOp)(nil),         // 98: proto.HomeRestoreDefaultsArrangementOp
	(*HomeRestoreDefaultsSceneArrangementOp)(nil),    // 99: proto.HomeRestoreDefaultsSceneArrangementOp
	(*HomeOfflineMsgBin)(nil),                        // 100: proto.HomeOfflineMsgBin
	(*GroupVariableBin)(nil),                         // 101: proto.GroupVariableBin
	(*GroupVariableConfigIdBin)(nil),                 // 102: proto.GroupVariableConfigIdBin
	(*GroupProductBin)(nil),                          // 103: proto.GroupProductBin
	(*InteractGadget)(nil),                           // 104: proto.InteractGadget
	(*AreaBin)(nil),                                  // 105: proto.AreaBin
	(*CityBin)(nil),                                  // 106: proto.CityBin
	(*ScenePlayerLocationBin)(nil),                   // 107: proto.ScenePlayerLocationBin
	(*EnvZoneInfoBin)(nil),                           // 108: proto.EnvZoneInfoBin
	(*SceneEnvAnimalCompBin)(nil),                    // 109: proto.SceneEnvAnimalCompBin
	(*SceneWeatherInfoBin)(nil),                      // 110: proto.SceneWeatherInfoBin
	(*SceneClimateAreaInfoBin)(nil),                  // 111: proto.SceneClimateAreaInfoBin
	(*SceneAllWeatherInfoBin)(nil),                   // 112: proto.SceneAllWeatherInfoBin
	(*BackupGroupBin)(nil),                           // 113: proto.BackupGroupBin
	(*SceneBlockGroupCompBin)(nil),                   // 114: proto.SceneBlockGroupCompBin
	(*SceneAreaCompBin)(nil),                         // 115: proto.SceneAreaCompBin
	(*SceneEncounterCompBin)(nil),                    // 116: proto.SceneEncounterCompBin
	(*ActivitySceneBin)(nil),                         // 117: proto.ActivitySceneBin
	(*SceneVehicleBin)(nil),                          // 118: proto.SceneVehicleBin
	(*SceneTagOp)(nil),                               // 119: proto.SceneTagOp
	(*WayPoint)(nil),                                 // 120: proto.WayPoint
	(*DungeonSceneBin)(nil),                          // 121: proto.DungeonSceneBin
	(*SceneBin)(nil),                                 // 122: proto.SceneBin
	(*GCGSettleData)(nil),                            // 123: proto.GCGSettleData
	(*OfflineOpTestOp)(nil),                          // 124: proto.OfflineOpTestOp
	(*OfflineOpFurnitureMakeHelp)(nil),               // 125: proto.OfflineOpFurnitureMakeHelp
	(*OfflineOpPlantFlowerActivityGiveFlower)(nil),   // 126: proto.OfflineOpPlantFlowerActivityGiveFlower
	(*OfflineOpWinterCampActivityGiveItem)(nil),      // 127: proto.OfflineOpWinterCampActivityGiveItem
	(*OfflineOpGCGSettle)(nil),                       // 128: proto.OfflineOpGCGSettle
	(*OfflineOpActivityGiveGift)(nil),                // 129: proto.OfflineOpActivityGiveGift
	(*OfflineOpVintageActivityDividend)(nil),         // 130: proto.OfflineOpVintageActivityDividend
	(*OfflineOpBin)(nil),                             // 131: proto.OfflineOpBin
	(*FurnitureMakeSlotsBin)(nil),                    // 132: proto.FurnitureMakeSlotsBin
	(*ProfilePictureBin)(nil),                        // 133: proto.ProfilePictureBin
	(*CustomDungeonSettingBin)(nil),                  // 134: proto.CustomDungeonSettingBin
	(*CustomDungeonAbstractBin)(nil),                 // 135: proto.CustomDungeonAbstractBin
	nil,                                              // 136: proto.WeaponBin.AffixMapEntry
	nil,                                              // 137: proto.SetQuestContentProgressOp.FinishProgressMapEntry
	nil,                                              // 138: proto.SetQuestContentProgressOp.FailProgressMapEntry
	nil,                                              // 139: proto.GroupProductBin.GadgetOneOffMapEntry
	nil,                                              // 140: proto.GroupProductBin.MonsterOneOffMapEntry
	nil,                                              // 141: proto.SceneEnvAnimalCompBin.ZoneInfoMapEntry
	nil,                                              // 142: proto.BackupGroupBin.VariableMapEntry
	nil,                                              // 143: proto.SceneBlockGroupCompBin.BackupGroupMapEntry
	nil,                                              // 144: proto.SceneAreaCompBin.AreaMapEntry
	nil,                                              // 145: proto.SceneAreaCompBin.CityMapEntry
	nil,                                              // 146: proto.GCGSettleData.UidMapEntry
	nil,                                              // 147: proto.GCGSettleData.ChallengeProgressMapEntry
	nil,                                              // 148: proto.GCGSettleData.ScoreMapEntry
	nil,                                              // 149: proto.OfflineOpPlantFlowerActivityGiveFlower.FlowerNumMapEntry
	nil,                                              // 150: proto.OfflineOpActivityGiveGift.GiftNumMapEntry
	nil,                                              // 151: proto.CustomDungeonAbstractBin.BrickStatisticsMapEntry
	(PlatformType)(0),                                // 152: proto.PlatformType
	(ExchangeMcoinType)(0),                           // 153: proto.ExchangeMcoinType
}
var file_server_only_bin_common_server_proto_depIdxs = []int32{
	136, // 0: proto.WeaponBin.affix_map:type_name -> proto.WeaponBin.AffixMapEntry
	12,  // 1: proto.MailBin.item_param_list:type_name -> proto.ItemParamBin
	4,   // 2: proto.PlayerGotoOp.pos:type_name -> proto.VectorBin
	10,  // 3: proto.AddItemOp.reliquary:type_name -> proto.ReliquaryBin
	11,  // 4: proto.AddItemOp.weapon:type_name -> proto.WeaponBin
	4,   // 5: proto.ModifyBornPosOp.pos:type_name -> proto.VectorBin
	152, // 6: proto.SubCoinNegativeOp.platform_type:type_name -> proto.PlatformType
	137, // 7: proto.SetQuestContentProgressOp.finish_progress_map:type_name -> proto.SetQuestContentProgressOp.FinishProgressMapEntry
	138, // 8: proto.SetQuestContentProgressOp.fail_progress_map:type_name -> proto.SetQuestContentProgressOp.FailProgressMapEntry
	152, // 9: proto.AddMcoinVipPointOp.platform_type:type_name -> proto.PlatformType
	153, // 10: proto.ExchangeMcoinOp.exchange_type:type_name -> proto.ExchangeMcoinType
	0,   // 11: proto.GroupBinOp.op_type:type_name -> proto.GroupBinOperation
	2,   // 12: proto.ProcSceneTagOp.op_type:type_name -> proto.SceneTagOpType
	1,   // 13: proto.GroupLinkOp.op_type:type_name -> proto.GroupLinkOpType
	7,   // 14: proto.RemoveInvalidMapMarksOp.x_range:type_name -> proto.FloatPairBin
	7,   // 15: proto.RemoveInvalidMapMarksOp.z_range:type_name -> proto.FloatPairBin
	28,  // 16: proto.AddItemWithLimitOp.add_item_op:type_name -> proto.AddItemOp
	14,  // 17: proto.OfflineMsgBin.del_item_op:type_name -> proto.DelItemOp
	17,  // 18: proto.OfflineMsgBin.goto_op:type_name -> proto.PlayerGotoOp
	18,  // 19: proto.OfflineMsgBin.reset_parent_quest_op:type_name -> proto.ResetParentQuestOp
	19,  // 20: proto.OfflineMsgBin.refresh_group_op:type_name -> proto.RefreshGroupOp
	20,  // 21: proto.OfflineMsgBin.set_scene_point_lock_status_op:type_name -> proto.SetScenePointLockStatusOp
	21,  // 22: proto.OfflineMsgBin.set_nick_name_op:type_name -> proto.SetPlayerNickNameOp
	22,  // 23: proto.OfflineMsgBin.refresh_shop_op:type_name -> proto.RefreshShopOp
	23,  // 24: proto.OfflineMsgBin.unlock_talent_op:type_name -> proto.UnlockTalentOp
	24,  // 25: proto.OfflineMsgBin.take_off_equip_op:type_name -> proto.TakeOffEquipOp
	25,  // 26: proto.OfflineMsgBin.del_mail_op:type_name -> proto.DelMailOp
	27,  // 27: proto.OfflineMsgBin.finish_daily_task_op:type_name -> proto.FinishDailyTaskOp
	26,  // 28: proto.OfflineMsgBin.unlock_area_op:type_name -> proto.UnlockAreaOp
	15,  // 29: proto.OfflineMsgBin.del_item_negative_op:type_name -> proto.DelItemNegativeOp
	16,  // 30: proto.OfflineMsgBin.del_equip_op:type_name -> proto.DelEquipOp
	28,  // 31: proto.OfflineMsgBin.add_item_op:type_name -> proto.AddItemOp
	29,  // 32: proto.OfflineMsgBin.modify_born_pos_op:type_name -> proto.ModifyBornPosOp
	30,  // 33: proto.OfflineMsgBin.sub_coin_negative_op:type_name -> proto.SubCoinNegativeOp
	31,  // 34: proto.OfflineMsgBin.set_quest_content_progress_op:type_name -> proto.SetQuestContentProgressOp
	32,  // 35: proto.OfflineMsgBin.finish_order_op:type_name -> proto.FinishOrderOp
	33,  // 36: proto.OfflineMsgBin.add_or_modify_watcher_op:type_name -> proto.AddOrModifyWatcherOp
	34,  // 37: proto.OfflineMsgBin.del_watcher_op:type_name -> proto.DelWatcherOp
	35,  // 38: proto.OfflineMsgBin.set_signature_op:type_name -> proto.SetSignatureOp
	36,  // 39: proto.OfflineMsgBin.add_or_sub_resin_op:type_name -> proto.AddOrSubResinOp
	37,  // 40: proto.OfflineMsgBin.set_quest_global_var_value_op:type_name -> proto.SetQuestGlobalVarValueOp
	38,  // 41: proto.OfflineMsgBin.add_mcoin_op:type_name -> proto.AddMcoinVipPointOp
	40,  // 42: proto.OfflineMsgBin.group_bin_op:type_name -> proto.GroupBinOp
	41,  // 43: proto.OfflineMsgBin.del_one_off_op:type_name -> proto.DelOneOffOp
	42,  // 44: proto.OfflineMsgBin.finish_routine_op:type_name -> proto.FinishRoutineOp
	43,  // 45: proto.OfflineMsgBin.finish_daily_task_group_op:type_name -> proto.FinishDailyTaskUnloadGroupOp
	44,  // 46: proto.OfflineMsgBin.refresh_blossom_circle_camp_op:type_name -> proto.RefreshBlossomCircleCampOp
	45,  // 47: proto.OfflineMsgBin.blessing_give_pic_op:type_name -> proto.BlessingActivityGivePicOp
	46,  // 48: proto.OfflineMsgBin.expedition_assist_op:type_name -> proto.ExpeditionActivityAssistOp
	47,  // 49: proto.OfflineMsgBin.recover_world_level_op:type_name -> proto.RecoverWorldLevelOp
	51,  // 50: proto.OfflineMsgBin.force_accept_quest_op:type_name -> proto.ForceAcceptQuestOp
	52,  // 51: proto.OfflineMsgBin.set_main_coop_confidence_op:type_name -> proto.SetMainCoopConfidenceOp
	53,  // 52: proto.OfflineMsgBin.add_coop_point_save_point_list_op:type_name -> proto.AddCoopPointSavePointListOp
	48,  // 53: proto.OfflineMsgBin.add_region_search_progress_op:type_name -> proto.AddRegionSearchProgressOp
	49,  // 54: proto.OfflineMsgBin.set_match_punish_times_op:type_name -> proto.SetMatchPunishTimesOp
	50,  // 55: proto.OfflineMsgBin.reset_channeller_slab_camp_group_op:type_name -> proto.ResetChannellerSlabCampGroupOp
	55,  // 56: proto.OfflineMsgBin.proc_scene_tag_op:type_name -> proto.ProcSceneTagOp
	54,  // 57: proto.OfflineMsgBin.set_climate_area_type_op:type_name -> proto.SetClimateAreaTypeOp
	39,  // 58: proto.OfflineMsgBin.exchange_mcoin_op:type_name -> proto.ExchangeMcoinOp
	56,  // 59: proto.OfflineMsgBin.set_finished_parent_quest_child_state_op:type_name -> proto.SetFinishedParentQuestChildStateOp
	58,  // 60: proto.OfflineMsgBin.set_level1_area_explore_point_op:type_name -> proto.SetLevel1AreaExplorePointOp
	59,  // 61: proto.OfflineMsgBin.set_codex_open_or_close_op:type_name -> proto.SetCodexOpenOrCloseOp
	57,  // 62: proto.OfflineMsgBin.change_map_area_info_op:type_name -> proto.ChangeMapAreaInfoOp
	60,  // 63: proto.OfflineMsgBin.group_link_op:type_name -> proto.GroupLinkOp
	61,  // 64: proto.OfflineMsgBin.set_watcher_comp_record_value_op:type_name -> proto.SetWatcherCompRecordValueOp
	62,  // 65: proto.OfflineMsgBin.add_friend_op:type_name -> proto.AddFriendOp
	63,  // 66: proto.OfflineMsgBin.del_friend_op:type_name -> proto.DelFriendOp
	64,  // 67: proto.OfflineMsgBin.add_friend_ask_op:type_name -> proto.AddFriendAskOp
	65,  // 68: proto.OfflineMsgBin.del_friend_ask_op:type_name -> proto.DelFriendAskOp
	66,  // 69: proto.OfflineMsgBin.ban_custom_dungeon_op:type_name -> proto.BanCustomDungeonOp
	67,  // 70: proto.OfflineMsgBin.remove_invalid_map_marks_op:type_name -> proto.RemoveInvalidMapMarksOp
	68,  // 71: proto.OfflineMsgBin.recalculate_area_explore_point_op:type_name -> proto.RecalculateAreaExplorePointOp
	69,  // 72: proto.OfflineMsgBin.nickname_audit_result_op:type_name -> proto.NicknameAuditResultOp
	70,  // 73: proto.OfflineMsgBin.signature_audit_result_op:type_name -> proto.SignatureAuditResultOp
	71,  // 74: proto.OfflineMsgBin.pass_home_scene_arrangement_audit_op:type_name -> proto.PassHomeSceneArrangementAuditOp
	72,  // 75: proto.OfflineMsgBin.fail_home_scene_arrangement_audit_op:type_name -> proto.FailHomeSceneArrangementAuditOp
	73,  // 76: proto.OfflineMsgBin.fail_home_modules_arrangement_audit_op:type_name -> proto.FailHomeModulesArrangementAuditOp
	74,  // 77: proto.OfflineMsgBin.ban_ugc_publish_op:type_name -> proto.BanUgcPublishOp
	75,  // 78: proto.OfflineMsgBin.reset_player_persistent_dungeon_op:type_name -> proto.ResetPlayerPersistentDungeonOp
	76,  // 79: proto.OfflineMsgBin.reset_player_pos_in_persistent_dungeon_op:type_name -> proto.ResetPlayerPosInPersistentDungeonOp
	77,  // 80: proto.OfflineMsgBin.level_tag_change_op:type_name -> proto.LevelTagChangeOp
	78,  // 81: proto.OfflineMsgBin.reset_player_way_point_in_persistent_dungeon_op:type_name -> proto.ResetPlayerWayPointInPersistentDungeonOp
	79,  // 82: proto.OfflineMsgBin.exhibition_set_op:type_name -> proto.ExhibitionSetOp
	80,  // 83: proto.OfflineMsgBin.set_avatar_extra_prop_op:type_name -> proto.SetAvatarExtraPropOp
	81,  // 84: proto.OfflineMsgBin.add_item_with_limit_op:type_name -> proto.AddItemWithLimitOp
	82,  // 85: proto.OfflineMsgBin.set_gadget_chain_level_op:type_name -> proto.SetGadgetChainLevelOp
	83,  // 86: proto.OfflineMsgBin.set_daily_task_var_op:type_name -> proto.SetDailyTaskVarOp
	84,  // 87: proto.OfflineMsgBin.avatar_rename_audit_result_op:type_name -> proto.AvatarRenameAuditResultOp
	85,  // 88: proto.OfflineMsgBin.reset_avatar_rename_op:type_name -> proto.ResetAvatarRenameOp
	86,  // 89: proto.OfflineMsgBin.add_finished_talk_op:type_name -> proto.AddFinishedTalkOp
	87,  // 90: proto.OfflineMsgBin.del_finished_talk_op:type_name -> proto.DelFinishedTalkOp
	88,  // 91: proto.OfflineMsgBin.set_player_gcg_match_score_op:type_name -> proto.SetPlayerGCGMatchScoreOp
	89,  // 92: proto.OfflineMsgBin.set_push_tips_state_op:type_name -> proto.SetPushTipsStateOp
	90,  // 93: proto.OfflineMsgBin.delete_player_gcg_card_op:type_name -> proto.DeletePlayerGCGCardOp
	91,  // 94: proto.OfflineMsgBin.delete_player_gcg_card_face_op:type_name -> proto.DeletePlayerGCGCardFaceOp
	92,  // 95: proto.OfflineMsgBin.delete_player_gcg_card_back_op:type_name -> proto.DeletePlayerGCGCardBackOp
	93,  // 96: proto.OfflineMsgBin.delete_player_gcg_deck_field_op:type_name -> proto.DeletePlayerGCGDeckFieldOp
	94,  // 97: proto.OfflineMsgBin.ban_player_gcg_match_op:type_name -> proto.BanPlayerGCGMatchOp
	95,  // 98: proto.OfflineMsgBin.ban_player_gcg_pvp_op:type_name -> proto.BanPlayerGCGPVPOp
	97,  // 99: proto.HomeOfflineMsgBin.test_op:type_name -> proto.HomeTestOp
	98,  // 100: proto.HomeOfflineMsgBin.restore_defaults_arrangement_op:type_name -> proto.HomeRestoreDefaultsArrangementOp
	99,  // 101: proto.HomeOfflineMsgBin.restore_defaults_scene_arrangement_op:type_name -> proto.HomeRestoreDefaultsSceneArrangementOp
	139, // 102: proto.GroupProductBin.gadget_one_off_map:type_name -> proto.GroupProductBin.GadgetOneOffMapEntry
	140, // 103: proto.GroupProductBin.monster_one_off_map:type_name -> proto.GroupProductBin.MonsterOneOffMapEntry
	104, // 104: proto.AreaBin.interact_gadget_list:type_name -> proto.InteractGadget
	4,   // 105: proto.ScenePlayerLocationBin.cur_pos:type_name -> proto.VectorBin
	4,   // 106: proto.ScenePlayerLocationBin.cur_rot:type_name -> proto.VectorBin
	4,   // 107: proto.ScenePlayerLocationBin.last_valid_pos:type_name -> proto.VectorBin
	4,   // 108: proto.ScenePlayerLocationBin.last_valid_rot:type_name -> proto.VectorBin
	141, // 109: proto.SceneEnvAnimalCompBin.zone_info_map:type_name -> proto.SceneEnvAnimalCompBin.ZoneInfoMapEntry
	110, // 110: proto.SceneAllWeatherInfoBin.weather_info_list:type_name -> proto.SceneWeatherInfoBin
	111, // 111: proto.SceneAllWeatherInfoBin.climate_area_info_list:type_name -> proto.SceneClimateAreaInfoBin
	142, // 112: proto.BackupGroupBin.variable_map:type_name -> proto.BackupGroupBin.VariableMapEntry
	143, // 113: proto.SceneBlockGroupCompBin.backup_group_map:type_name -> proto.SceneBlockGroupCompBin.BackupGroupMapEntry
	144, // 114: proto.SceneAreaCompBin.area_map:type_name -> proto.SceneAreaCompBin.AreaMapEntry
	145, // 115: proto.SceneAreaCompBin.city_map:type_name -> proto.SceneAreaCompBin.CityMapEntry
	4,   // 116: proto.SceneVehicleBin.cur_pos:type_name -> proto.VectorBin
	4,   // 117: proto.SceneVehicleBin.cur_rot:type_name -> proto.VectorBin
	2,   // 118: proto.SceneTagOp.op_type:type_name -> proto.SceneTagOpType
	120, // 119: proto.DungeonSceneBin.activated_way_point_list:type_name -> proto.WayPoint
	120, // 120: proto.DungeonSceneBin.activated_slip_revive_list:type_name -> proto.WayPoint
	112, // 121: proto.SceneBin.all_weather_info:type_name -> proto.SceneAllWeatherInfoBin
	107, // 122: proto.SceneBin.owner_player_location:type_name -> proto.ScenePlayerLocationBin
	114, // 123: proto.SceneBin.block_group_bin:type_name -> proto.SceneBlockGroupCompBin
	109, // 124: proto.SceneBin.env_animal_bin:type_name -> proto.SceneEnvAnimalCompBin
	115, // 125: proto.SceneBin.area_comp_bin:type_name -> proto.SceneAreaCompBin
	116, // 126: proto.SceneBin.encounter_comp_bin:type_name -> proto.SceneEncounterCompBin
	118, // 127: proto.SceneBin.vehicle_list:type_name -> proto.SceneVehicleBin
	119, // 128: proto.SceneBin.scene_tag_op_list:type_name -> proto.SceneTagOp
	117, // 129: proto.SceneBin.activity_scene_bin:type_name -> proto.ActivitySceneBin
	121, // 130: proto.SceneBin.dungeon_scene_bin:type_name -> proto.DungeonSceneBin
	146, // 131: proto.GCGSettleData.uid_map:type_name -> proto.GCGSettleData.UidMapEntry
	147, // 132: proto.GCGSettleData.challenge_progress_map:type_name -> proto.GCGSettleData.ChallengeProgressMapEntry
	148, // 133: proto.GCGSettleData.score_map:type_name -> proto.GCGSettleData.ScoreMapEntry
	133, // 134: proto.OfflineOpFurnitureMakeHelp.profile_picture_bin:type_name -> proto.ProfilePictureBin
	149, // 135: proto.OfflineOpPlantFlowerActivityGiveFlower.flower_num_map:type_name -> proto.OfflineOpPlantFlowerActivityGiveFlower.FlowerNumMapEntry
	12,  // 136: proto.OfflineOpWinterCampActivityGiveItem.item_bin_list:type_name -> proto.ItemParamBin
	123, // 137: proto.OfflineOpGCGSettle.settle_data:type_name -> proto.GCGSettleData
	150, // 138: proto.OfflineOpActivityGiveGift.gift_num_map:type_name -> proto.OfflineOpActivityGiveGift.GiftNumMapEntry
	124, // 139: proto.OfflineOpBin.test_op:type_name -> proto.OfflineOpTestOp
	125, // 140: proto.OfflineOpBin.furniture_make_help_op:type_name -> proto.OfflineOpFurnitureMakeHelp
	126, // 141: proto.OfflineOpBin.plant_flower_give_flower_op:type_name -> proto.OfflineOpPlantFlowerActivityGiveFlower
	127, // 142: proto.OfflineOpBin.winter_camp_give_item_op:type_name -> proto.OfflineOpWinterCampActivityGiveItem
	129, // 143: proto.OfflineOpBin.activity_give_gift_op:type_name -> proto.OfflineOpActivityGiveGift
	130, // 144: proto.OfflineOpBin.vintage_dividend_op:type_name -> proto.OfflineOpVintageActivityDividend
	128, // 145: proto.OfflineOpBin.gcg_settle_op:type_name -> proto.OfflineOpGCGSettle
	151, // 146: proto.CustomDungeonAbstractBin.brick_statistics_map:type_name -> proto.CustomDungeonAbstractBin.BrickStatisticsMapEntry
	108, // 147: proto.SceneEnvAnimalCompBin.ZoneInfoMapEntry.value:type_name -> proto.EnvZoneInfoBin
	101, // 148: proto.BackupGroupBin.VariableMapEntry.value:type_name -> proto.GroupVariableBin
	113, // 149: proto.SceneBlockGroupCompBin.BackupGroupMapEntry.value:type_name -> proto.BackupGroupBin
	105, // 150: proto.SceneAreaCompBin.AreaMapEntry.value:type_name -> proto.AreaBin
	106, // 151: proto.SceneAreaCompBin.CityMapEntry.value:type_name -> proto.CityBin
	152, // [152:152] is the sub-list for method output_type
	152, // [152:152] is the sub-list for method input_type
	152, // [152:152] is the sub-list for extension type_name
	152, // [152:152] is the sub-list for extension extendee
	0,   // [0:152] is the sub-list for field type_name
}

func init() { file_server_only_bin_common_server_proto_init() }
func file_server_only_bin_common_server_proto_init() {
	if File_server_only_bin_common_server_proto != nil {
		return
	}
	file_define_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_server_only_bin_common_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint32PairBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint32ToInt32PairBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatPairBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint32List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReliquaryBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaponBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemParamBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelItemOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelItemNegativeOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelEquipOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGotoOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetParentQuestOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshGroupOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetScenePointLockStatusOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPlayerNickNameOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshShopOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockTalentOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeOffEquipOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelMailOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockAreaOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishDailyTaskOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddItemOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyBornPosOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubCoinNegativeOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetQuestContentProgressOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishOrderOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrModifyWatcherOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelWatcherOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSignatureOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrSubResinOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetQuestGlobalVarValueOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMcoinVipPointOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeMcoinOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupBinOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelOneOffOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishRoutineOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishDailyTaskUnloadGroupOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshBlossomCircleCampOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlessingActivityGivePicOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpeditionActivityAssistOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverWorldLevelOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRegionSearchProgressOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMatchPunishTimesOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetChannellerSlabCampGroupOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceAcceptQuestOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMainCoopConfidenceOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCoopPointSavePointListOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetClimateAreaTypeOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcSceneTagOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFinishedParentQuestChildStateOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeMapAreaInfoOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLevel1AreaExplorePointOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCodexOpenOrCloseOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupLinkOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWatcherCompRecordValueOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFriendOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelFriendOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFriendAskOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelFriendAskOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanCustomDungeonOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveInvalidMapMarksOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecalculateAreaExplorePointOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NicknameAuditResultOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureAuditResultOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassHomeSceneArrangementAuditOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailHomeSceneArrangementAuditOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailHomeModulesArrangementAuditOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanUgcPublishOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPlayerPersistentDungeonOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPlayerPosInPersistentDungeonOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LevelTagChangeOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPlayerWayPointInPersistentDungeonOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExhibitionSetOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAvatarExtraPropOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddItemWithLimitOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGadgetChainLevelOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDailyTaskVarOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarRenameAuditResultOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetAvatarRenameOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFinishedTalkOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelFinishedTalkOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPlayerGCGMatchScoreOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPushTipsStateOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlayerGCGCardOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlayerGCGCardFaceOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlayerGCGCardBackOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlayerGCGDeckFieldOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanPlayerGCGMatchOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanPlayerGCGPVPOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineMsgBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeTestOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeRestoreDefaultsArrangementOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeRestoreDefaultsSceneArrangementOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeOfflineMsgBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupVariableBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupVariableConfigIdBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupProductBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractGadget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlayerLocationBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvZoneInfoBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneEnvAnimalCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneWeatherInfoBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneClimateAreaInfoBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneAllWeatherInfoBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupGroupBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneBlockGroupCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneAreaCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneEncounterCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivitySceneBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneVehicleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneTagOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WayPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonSceneBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGSettleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineOpTestOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineOpFurnitureMakeHelp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineOpPlantFlowerActivityGiveFlower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineOpWinterCampActivityGiveItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineOpGCGSettle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineOpActivityGiveGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineOpVintageActivityDividend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineOpBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FurnitureMakeSlotsBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfilePictureBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDungeonSettingBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_common_server_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDungeonAbstractBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_server_only_bin_common_server_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*AddItemOp_Reliquary)(nil),
		(*AddItemOp_Weapon)(nil),
	}
	file_server_only_bin_common_server_proto_msgTypes[57].OneofWrappers = []interface{}{
		(*SetWatcherCompRecordValueOp_MaxCriticalDamage)(nil),
		(*SetWatcherCompRecordValueOp_MaxFlyMapDistance)(nil),
		(*SetWatcherCompRecordValueOp_MaxFlyTime)(nil),
		(*SetWatcherCompRecordValueOp_MaxDashTime)(nil),
	}
	file_server_only_bin_common_server_proto_msgTypes[75].OneofWrappers = []interface{}{
		(*ExhibitionSetOp_AccumulableVal)(nil),
		(*ExhibitionSetOp_ReplaceableVal)(nil),
	}
	file_server_only_bin_common_server_proto_msgTypes[92].OneofWrappers = []interface{}{
		(*OfflineMsgBin_DelItemOp)(nil),
		(*OfflineMsgBin_GotoOp)(nil),
		(*OfflineMsgBin_ResetParentQuestOp)(nil),
		(*OfflineMsgBin_RefreshGroupOp)(nil),
		(*OfflineMsgBin_SetScenePointLockStatusOp)(nil),
		(*OfflineMsgBin_SetNickNameOp)(nil),
		(*OfflineMsgBin_RefreshShopOp)(nil),
		(*OfflineMsgBin_UnlockTalentOp)(nil),
		(*OfflineMsgBin_TakeOffEquipOp)(nil),
		(*OfflineMsgBin_DelMailOp)(nil),
		(*OfflineMsgBin_FinishDailyTaskOp)(nil),
		(*OfflineMsgBin_UnlockAreaOp)(nil),
		(*OfflineMsgBin_DelItemNegativeOp)(nil),
		(*OfflineMsgBin_DelEquipOp)(nil),
		(*OfflineMsgBin_AddItemOp)(nil),
		(*OfflineMsgBin_ModifyBornPosOp)(nil),
		(*OfflineMsgBin_SubCoinNegativeOp)(nil),
		(*OfflineMsgBin_SetQuestContentProgressOp)(nil),
		(*OfflineMsgBin_FinishOrderOp)(nil),
		(*OfflineMsgBin_AddOrModifyWatcherOp)(nil),
		(*OfflineMsgBin_DelWatcherOp)(nil),
		(*OfflineMsgBin_SetSignatureOp)(nil),
		(*OfflineMsgBin_AddOrSubResinOp)(nil),
		(*OfflineMsgBin_SetQuestGlobalVarValueOp)(nil),
		(*OfflineMsgBin_AddMcoinOp)(nil),
		(*OfflineMsgBin_GroupBinOp)(nil),
		(*OfflineMsgBin_DelOneOffOp)(nil),
		(*OfflineMsgBin_FinishRoutineOp)(nil),
		(*OfflineMsgBin_FinishDailyTaskGroupOp)(nil),
		(*OfflineMsgBin_RefreshBlossomCircleCampOp)(nil),
		(*OfflineMsgBin_BlessingGivePicOp)(nil),
		(*OfflineMsgBin_ExpeditionAssistOp)(nil),
		(*OfflineMsgBin_RecoverWorldLevelOp)(nil),
		(*OfflineMsgBin_ForceAcceptQuestOp)(nil),
		(*OfflineMsgBin_SetMainCoopConfidenceOp)(nil),
		(*OfflineMsgBin_AddCoopPointSavePointListOp)(nil),
		(*OfflineMsgBin_AddRegionSearchProgressOp)(nil),
		(*OfflineMsgBin_SetMatchPunishTimesOp)(nil),
		(*OfflineMsgBin_ResetChannellerSlabCampGroupOp)(nil),
		(*OfflineMsgBin_ProcSceneTagOp)(nil),
		(*OfflineMsgBin_SetClimateAreaTypeOp)(nil),
		(*OfflineMsgBin_ExchangeMcoinOp)(nil),
		(*OfflineMsgBin_SetFinishedParentQuestChildStateOp)(nil),
		(*OfflineMsgBin_SetLevel1AreaExplorePointOp)(nil),
		(*OfflineMsgBin_SetCodexOpenOrCloseOp)(nil),
		(*OfflineMsgBin_ChangeMapAreaInfoOp)(nil),
		(*OfflineMsgBin_GroupLinkOp)(nil),
		(*OfflineMsgBin_SetWatcherCompRecordValueOp)(nil),
		(*OfflineMsgBin_AddFriendOp)(nil),
		(*OfflineMsgBin_DelFriendOp)(nil),
		(*OfflineMsgBin_AddFriendAskOp)(nil),
		(*OfflineMsgBin_DelFriendAskOp)(nil),
		(*OfflineMsgBin_BanCustomDungeonOp)(nil),
		(*OfflineMsgBin_RemoveInvalidMapMarksOp)(nil),
		(*OfflineMsgBin_RecalculateAreaExplorePointOp)(nil),
		(*OfflineMsgBin_NicknameAuditResultOp)(nil),
		(*OfflineMsgBin_SignatureAuditResultOp)(nil),
		(*OfflineMsgBin_PassHomeSceneArrangementAuditOp)(nil),
		(*OfflineMsgBin_FailHomeSceneArrangementAuditOp)(nil),
		(*OfflineMsgBin_FailHomeModulesArrangementAuditOp)(nil),
		(*OfflineMsgBin_BanUgcPublishOp)(nil),
		(*OfflineMsgBin_ResetPlayerPersistentDungeonOp)(nil),
		(*OfflineMsgBin_ResetPlayerPosInPersistentDungeonOp)(nil),
		(*OfflineMsgBin_LevelTagChangeOp)(nil),
		(*OfflineMsgBin_ResetPlayerWayPointInPersistentDungeonOp)(nil),
		(*OfflineMsgBin_ExhibitionSetOp)(nil),
		(*OfflineMsgBin_SetAvatarExtraPropOp)(nil),
		(*OfflineMsgBin_AddItemWithLimitOp)(nil),
		(*OfflineMsgBin_SetGadgetChainLevelOp)(nil),
		(*OfflineMsgBin_SetDailyTaskVarOp)(nil),
		(*OfflineMsgBin_AvatarRenameAuditResultOp)(nil),
		(*OfflineMsgBin_ResetAvatarRenameOp)(nil),
		(*OfflineMsgBin_AddFinishedTalkOp)(nil),
		(*OfflineMsgBin_DelFinishedTalkOp)(nil),
		(*OfflineMsgBin_SetPlayerGcgMatchScoreOp)(nil),
		(*OfflineMsgBin_SetPushTipsStateOp)(nil),
		(*OfflineMsgBin_DeletePlayerGcgCardOp)(nil),
		(*OfflineMsgBin_DeletePlayerGcgCardFaceOp)(nil),
		(*OfflineMsgBin_DeletePlayerGcgCardBackOp)(nil),
		(*OfflineMsgBin_DeletePlayerGcgDeckFieldOp)(nil),
		(*OfflineMsgBin_BanPlayerGcgMatchOp)(nil),
		(*OfflineMsgBin_BanPlayerGcgPvpOp)(nil),
	}
	file_server_only_bin_common_server_proto_msgTypes[96].OneofWrappers = []interface{}{
		(*HomeOfflineMsgBin_TestOp)(nil),
		(*HomeOfflineMsgBin_RestoreDefaultsArrangementOp)(nil),
		(*HomeOfflineMsgBin_RestoreDefaultsSceneArrangementOp)(nil),
	}
	file_server_only_bin_common_server_proto_msgTypes[118].OneofWrappers = []interface{}{
		(*SceneBin_ActivitySceneBin)(nil),
		(*SceneBin_DungeonSceneBin)(nil),
	}
	file_server_only_bin_common_server_proto_msgTypes[127].OneofWrappers = []interface{}{
		(*OfflineOpBin_TestOp)(nil),
		(*OfflineOpBin_FurnitureMakeHelpOp)(nil),
		(*OfflineOpBin_PlantFlowerGiveFlowerOp)(nil),
		(*OfflineOpBin_WinterCampGiveItemOp)(nil),
		(*OfflineOpBin_ActivityGiveGiftOp)(nil),
		(*OfflineOpBin_VintageDividendOp)(nil),
		(*OfflineOpBin_GcgSettleOp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_only_bin_common_server_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   148,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_server_only_bin_common_server_proto_goTypes,
		DependencyIndexes: file_server_only_bin_common_server_proto_depIdxs,
		EnumInfos:         file_server_only_bin_common_server_proto_enumTypes,
		MessageInfos:      file_server_only_bin_common_server_proto_msgTypes,
	}.Build()
	File_server_only_bin_common_server_proto = out.File
	file_server_only_bin_common_server_proto_rawDesc = nil
	file_server_only_bin_common_server_proto_goTypes = nil
	file_server_only_bin_common_server_proto_depIdxs = nil
}
