// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: server_only/bin.block.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BlossomChestBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlossomChestId uint32   `protobuf:"varint,1,opt,name=blossom_chest_id,json=blossomChestId,proto3" json:"blossom_chest_id,omitempty"`
	DropId         uint32   `protobuf:"varint,2,opt,name=drop_id,json=dropId,proto3" json:"drop_id,omitempty"`
	DeadTime       uint32   `protobuf:"fixed32,3,opt,name=dead_time,json=deadTime,proto3" json:"dead_time,omitempty"`
	QualifyUidList []uint32 `protobuf:"varint,4,rep,packed,name=qualify_uid_list,json=qualifyUidList,proto3" json:"qualify_uid_list,omitempty"`
	RemainUidList  []uint32 `protobuf:"varint,5,rep,packed,name=remain_uid_list,json=remainUidList,proto3" json:"remain_uid_list,omitempty"`
	ItemLimitType  uint32   `protobuf:"varint,6,opt,name=item_limit_type,json=itemLimitType,proto3" json:"item_limit_type,omitempty"`
	RefreshId      uint32   `protobuf:"varint,7,opt,name=refresh_id,json=refreshId,proto3" json:"refresh_id,omitempty"`
}

func (x *BlossomChestBin) Reset() {
	*x = BlossomChestBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_block_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlossomChestBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlossomChestBin) ProtoMessage() {}

func (x *BlossomChestBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_block_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlossomChestBin.ProtoReflect.Descriptor instead.
func (*BlossomChestBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_block_proto_rawDescGZIP(), []int{0}
}

func (x *BlossomChestBin) GetBlossomChestId() uint32 {
	if x != nil {
		return x.BlossomChestId
	}
	return 0
}

func (x *BlossomChestBin) GetDropId() uint32 {
	if x != nil {
		return x.DropId
	}
	return 0
}

func (x *BlossomChestBin) GetDeadTime() uint32 {
	if x != nil {
		return x.DeadTime
	}
	return 0
}

func (x *BlossomChestBin) GetQualifyUidList() []uint32 {
	if x != nil {
		return x.QualifyUidList
	}
	return nil
}

func (x *BlossomChestBin) GetRemainUidList() []uint32 {
	if x != nil {
		return x.RemainUidList
	}
	return nil
}

func (x *BlossomChestBin) GetItemLimitType() uint32 {
	if x != nil {
		return x.ItemLimitType
	}
	return 0
}

func (x *BlossomChestBin) GetRefreshId() uint32 {
	if x != nil {
		return x.RefreshId
	}
	return 0
}

type GadgetPlatformBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId            uint32 `protobuf:"varint,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	PointIndex         int32  `protobuf:"varint,2,opt,name=point_index,json=pointIndex,proto3" json:"point_index,omitempty"`
	IsStarted          bool   `protobuf:"varint,3,opt,name=is_started,json=isStarted,proto3" json:"is_started,omitempty"`
	PointId            uint32 `protobuf:"varint,4,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
	MovingPlatformType uint32 `protobuf:"varint,5,opt,name=moving_platform_type,json=movingPlatformType,proto3" json:"moving_platform_type,omitempty"`
}

func (x *GadgetPlatformBin) Reset() {
	*x = GadgetPlatformBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_block_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GadgetPlatformBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GadgetPlatformBin) ProtoMessage() {}

func (x *GadgetPlatformBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_block_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GadgetPlatformBin.ProtoReflect.Descriptor instead.
func (*GadgetPlatformBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_block_proto_rawDescGZIP(), []int{1}
}

func (x *GadgetPlatformBin) GetRouteId() uint32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

func (x *GadgetPlatformBin) GetPointIndex() int32 {
	if x != nil {
		return x.PointIndex
	}
	return 0
}

func (x *GadgetPlatformBin) GetIsStarted() bool {
	if x != nil {
		return x.IsStarted
	}
	return false
}

func (x *GadgetPlatformBin) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

func (x *GadgetPlatformBin) GetMovingPlatformType() uint32 {
	if x != nil {
		return x.MovingPlatformType
	}
	return 0
}

type BossChestBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemainUidList  []uint32 `protobuf:"varint,1,rep,packed,name=remain_uid_list,json=remainUidList,proto3" json:"remain_uid_list,omitempty"`
	DeadTime       uint32   `protobuf:"fixed32,2,opt,name=dead_time,json=deadTime,proto3" json:"dead_time,omitempty"`
	DeadLevel      uint32   `protobuf:"varint,3,opt,name=dead_level,json=deadLevel,proto3" json:"dead_level,omitempty"`
	QualifyUidList []uint32 `protobuf:"varint,4,rep,packed,name=qualify_uid_list,json=qualifyUidList,proto3" json:"qualify_uid_list,omitempty"`
}

func (x *BossChestBin) Reset() {
	*x = BossChestBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_block_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BossChestBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BossChestBin) ProtoMessage() {}

func (x *BossChestBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_block_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BossChestBin.ProtoReflect.Descriptor instead.
func (*BossChestBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_block_proto_rawDescGZIP(), []int{2}
}

func (x *BossChestBin) GetRemainUidList() []uint32 {
	if x != nil {
		return x.RemainUidList
	}
	return nil
}

func (x *BossChestBin) GetDeadTime() uint32 {
	if x != nil {
		return x.DeadTime
	}
	return 0
}

func (x *BossChestBin) GetDeadLevel() uint32 {
	if x != nil {
		return x.DeadLevel
	}
	return 0
}

func (x *BossChestBin) GetQualifyUidList() []uint32 {
	if x != nil {
		return x.QualifyUidList
	}
	return nil
}

type ChallengeRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeIndex      uint32 `protobuf:"varint,1,opt,name=challenge_index,json=challengeIndex,proto3" json:"challenge_index,omitempty"`
	ChallengeId         uint32 `protobuf:"varint,2,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	ChallengeRecordType uint32 `protobuf:"varint,3,opt,name=challenge_record_type,json=challengeRecordType,proto3" json:"challenge_record_type,omitempty"`
	BestValue           uint32 `protobuf:"varint,4,opt,name=best_value,json=bestValue,proto3" json:"best_value,omitempty"`
}

func (x *ChallengeRecordBin) Reset() {
	*x = ChallengeRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_block_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeRecordBin) ProtoMessage() {}

func (x *ChallengeRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_block_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeRecordBin.ProtoReflect.Descriptor instead.
func (*ChallengeRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_block_proto_rawDescGZIP(), []int{3}
}

func (x *ChallengeRecordBin) GetChallengeIndex() uint32 {
	if x != nil {
		return x.ChallengeIndex
	}
	return 0
}

func (x *ChallengeRecordBin) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

func (x *ChallengeRecordBin) GetChallengeRecordType() uint32 {
	if x != nil {
		return x.ChallengeRecordType
	}
	return 0
}

func (x *ChallengeRecordBin) GetBestValue() uint32 {
	if x != nil {
		return x.BestValue
	}
	return 0
}

type BossDieInfoBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurroundUidList []uint32 `protobuf:"varint,1,rep,packed,name=surround_uid_list,json=surroundUidList,proto3" json:"surround_uid_list,omitempty"`
	DeadTime        uint32   `protobuf:"fixed32,2,opt,name=dead_time,json=deadTime,proto3" json:"dead_time,omitempty"`
	DeadLevel       uint32   `protobuf:"varint,3,opt,name=dead_level,json=deadLevel,proto3" json:"dead_level,omitempty"`
}

func (x *BossDieInfoBin) Reset() {
	*x = BossDieInfoBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_block_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BossDieInfoBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BossDieInfoBin) ProtoMessage() {}

func (x *BossDieInfoBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_block_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BossDieInfoBin.ProtoReflect.Descriptor instead.
func (*BossDieInfoBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_block_proto_rawDescGZIP(), []int{4}
}

func (x *BossDieInfoBin) GetSurroundUidList() []uint32 {
	if x != nil {
		return x.SurroundUidList
	}
	return nil
}

func (x *BossDieInfoBin) GetDeadTime() uint32 {
	if x != nil {
		return x.DeadTime
	}
	return 0
}

func (x *BossDieInfoBin) GetDeadLevel() uint32 {
	if x != nil {
		return x.DeadLevel
	}
	return 0
}

type GroupTriggerBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerCount uint32 `protobuf:"varint,1,opt,name=trigger_count,json=triggerCount,proto3" json:"trigger_count,omitempty"`
	ConfigId     uint32 `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
}

func (x *GroupTriggerBin) Reset() {
	*x = GroupTriggerBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_block_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupTriggerBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupTriggerBin) ProtoMessage() {}

func (x *GroupTriggerBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_block_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupTriggerBin.ProtoReflect.Descriptor instead.
func (*GroupTriggerBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_block_proto_rawDescGZIP(), []int{5}
}

func (x *GroupTriggerBin) GetTriggerCount() uint32 {
	if x != nil {
		return x.TriggerCount
	}
	return 0
}

func (x *GroupTriggerBin) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

type GeneralRewardBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropId   uint32            `protobuf:"varint,1,opt,name=drop_id,json=dropId,proto3" json:"drop_id,omitempty"`
	RewardId uint32            `protobuf:"varint,2,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	DropNum  uint32            `protobuf:"varint,3,opt,name=drop_num,json=dropNum,proto3" json:"drop_num,omitempty"`
	DropMap  map[uint32]uint32 `protobuf:"bytes,4,rep,name=drop_map,json=dropMap,proto3" json:"drop_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GeneralRewardBin) Reset() {
	*x = GeneralRewardBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_block_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralRewardBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralRewardBin) ProtoMessage() {}

func (x *GeneralRewardBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_block_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralRewardBin.ProtoReflect.Descriptor instead.
func (*GeneralRewardBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_block_proto_rawDescGZIP(), []int{6}
}

func (x *GeneralRewardBin) GetDropId() uint32 {
	if x != nil {
		return x.DropId
	}
	return 0
}

func (x *GeneralRewardBin) GetRewardId() uint32 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

func (x *GeneralRewardBin) GetDropNum() uint32 {
	if x != nil {
		return x.DropNum
	}
	return 0
}

func (x *GeneralRewardBin) GetDropMap() map[uint32]uint32 {
	if x != nil {
		return x.DropMap
	}
	return nil
}

type GadgetGeneralRewardBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resin          uint32                       `protobuf:"varint,2,opt,name=resin,proto3" json:"resin,omitempty"`
	DeadTime       uint32                       `protobuf:"varint,3,opt,name=dead_time,json=deadTime,proto3" json:"dead_time,omitempty"`
	RemainUidList  []uint32                     `protobuf:"varint,5,rep,packed,name=remain_uid_list,json=remainUidList,proto3" json:"remain_uid_list,omitempty"`
	QualifyInfoMap map[uint32]*GeneralRewardBin `protobuf:"bytes,7,rep,name=qualify_info_map,json=qualifyInfoMap,proto3" json:"qualify_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DestroyCd      uint32                       `protobuf:"varint,8,opt,name=destroy_cd,json=destroyCd,proto3" json:"destroy_cd,omitempty"`
	ItemLimitType  uint32                       `protobuf:"varint,9,opt,name=item_limit_type,json=itemLimitType,proto3" json:"item_limit_type,omitempty"`
	ItemParam      *ItemParamBin                `protobuf:"bytes,10,opt,name=item_param,json=itemParam,proto3" json:"item_param,omitempty"`
	OpenStateList  []uint32                     `protobuf:"varint,11,rep,packed,name=open_state_list,json=openStateList,proto3" json:"open_state_list,omitempty"`
}

func (x *GadgetGeneralRewardBin) Reset() {
	*x = GadgetGeneralRewardBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_block_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GadgetGeneralRewardBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GadgetGeneralRewardBin) ProtoMessage() {}

func (x *GadgetGeneralRewardBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_block_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GadgetGeneralRewardBin.ProtoReflect.Descriptor instead.
func (*GadgetGeneralRewardBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_block_proto_rawDescGZIP(), []int{7}
}

func (x *GadgetGeneralRewardBin) GetResin() uint32 {
	if x != nil {
		return x.Resin
	}
	return 0
}

func (x *GadgetGeneralRewardBin) GetDeadTime() uint32 {
	if x != nil {
		return x.DeadTime
	}
	return 0
}

func (x *GadgetGeneralRewardBin) GetRemainUidList() []uint32 {
	if x != nil {
		return x.RemainUidList
	}
	return nil
}

func (x *GadgetGeneralRewardBin) GetQualifyInfoMap() map[uint32]*GeneralRewardBin {
	if x != nil {
		return x.QualifyInfoMap
	}
	return nil
}

func (x *GadgetGeneralRewardBin) GetDestroyCd() uint32 {
	if x != nil {
		return x.DestroyCd
	}
	return 0
}

func (x *GadgetGeneralRewardBin) GetItemLimitType() uint32 {
	if x != nil {
		return x.ItemLimitType
	}
	return 0
}

func (x *GadgetGeneralRewardBin) GetItemParam() *ItemParamBin {
	if x != nil {
		return x.ItemParam
	}
	return nil
}

func (x *GadgetGeneralRewardBin) GetOpenStateList() []uint32 {
	if x != nil {
		return x.OpenStateList
	}
	return nil
}

type FishStockBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockType  uint32 `protobuf:"varint,1,opt,name=stock_type,json=stockType,proto3" json:"stock_type,omitempty"`
	GenFishNum uint32 `protobuf:"varint,2,opt,name=gen_fish_num,json=genFishNum,proto3" json:"gen_fish_num,omitempty"`
	MaxNum     uint32 `protobuf:"varint,3,opt,name=max_num,json=maxNum,proto3" json:"max_num,omitempty"`
}

func (x *FishStockBin) Reset() {
	*x = FishStockBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_block_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishStockBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishStockBin) ProtoMessage() {}

func (x *FishStockBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_block_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishStockBin.ProtoReflect.Descriptor instead.
func (*FishStockBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_block_proto_rawDescGZIP(), []int{8}
}

func (x *FishStockBin) GetStockType() uint32 {
	if x != nil {
		return x.StockType
	}
	return 0
}

func (x *FishStockBin) GetGenFishNum() uint32 {
	if x != nil {
		return x.GenFishNum
	}
	return 0
}

func (x *FishStockBin) GetMaxNum() uint32 {
	if x != nil {
		return x.MaxNum
	}
	return 0
}

type GadgetFishPoolBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishStockList            []*FishStockBin   `protobuf:"bytes,1,rep,name=fish_stock_list,json=fishStockList,proto3" json:"fish_stock_list,omitempty"`
	TodayFishNum             uint32            `protobuf:"varint,2,opt,name=today_fish_num,json=todayFishNum,proto3" json:"today_fish_num,omitempty"`
	LastRefreshTodayFishTime uint32            `protobuf:"varint,3,opt,name=last_refresh_today_fish_time,json=lastRefreshTodayFishTime,proto3" json:"last_refresh_today_fish_time,omitempty"`
	CachedFishMap            map[uint32]uint32 `protobuf:"bytes,4,rep,name=cached_fish_map,json=cachedFishMap,proto3" json:"cached_fish_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GadgetFishPoolBin) Reset() {
	*x = GadgetFishPoolBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_block_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GadgetFishPoolBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GadgetFishPoolBin) ProtoMessage() {}

func (x *GadgetFishPoolBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_block_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GadgetFishPoolBin.ProtoReflect.Descriptor instead.
func (*GadgetFishPoolBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_block_proto_rawDescGZIP(), []int{9}
}

func (x *GadgetFishPoolBin) GetFishStockList() []*FishStockBin {
	if x != nil {
		return x.FishStockList
	}
	return nil
}

func (x *GadgetFishPoolBin) GetTodayFishNum() uint32 {
	if x != nil {
		return x.TodayFishNum
	}
	return 0
}

func (x *GadgetFishPoolBin) GetLastRefreshTodayFishTime() uint32 {
	if x != nil {
		return x.LastRefreshTodayFishTime
	}
	return 0
}

func (x *GadgetFishPoolBin) GetCachedFishMap() map[uint32]uint32 {
	if x != nil {
		return x.CachedFishMap
	}
	return nil
}

type CustomGadgetNodeInfoBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentIndex    int32  `protobuf:"varint,1,opt,name=parent_index,json=parentIndex,proto3" json:"parent_index,omitempty"`
	ConfigId       uint32 `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	SlotIdentifier string `protobuf:"bytes,3,opt,name=slot_identifier,json=slotIdentifier,proto3" json:"slot_identifier,omitempty"`
}

func (x *CustomGadgetNodeInfoBin) Reset() {
	*x = CustomGadgetNodeInfoBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_block_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomGadgetNodeInfoBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomGadgetNodeInfoBin) ProtoMessage() {}

func (x *CustomGadgetNodeInfoBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_block_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomGadgetNodeInfoBin.ProtoReflect.Descriptor instead.
func (*CustomGadgetNodeInfoBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_block_proto_rawDescGZIP(), []int{10}
}

func (x *CustomGadgetNodeInfoBin) GetParentIndex() int32 {
	if x != nil {
		return x.ParentIndex
	}
	return 0
}

func (x *CustomGadgetNodeInfoBin) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *CustomGadgetNodeInfoBin) GetSlotIdentifier() string {
	if x != nil {
		return x.SlotIdentifier
	}
	return ""
}

type CustomGadgetTreeInfoBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeList []*CustomGadgetNodeInfoBin `protobuf:"bytes,1,rep,name=node_list,json=nodeList,proto3" json:"node_list,omitempty"`
}

func (x *CustomGadgetTreeInfoBin) Reset() {
	*x = CustomGadgetTreeInfoBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_block_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomGadgetTreeInfoBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomGadgetTreeInfoBin) ProtoMessage() {}

func (x *CustomGadgetTreeInfoBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_block_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomGadgetTreeInfoBin.ProtoReflect.Descriptor instead.
func (*CustomGadgetTreeInfoBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_block_proto_rawDescGZIP(), []int{11}
}

func (x *CustomGadgetTreeInfoBin) GetNodeList() []*CustomGadgetNodeInfoBin {
	if x != nil {
		return x.NodeList
	}
	return nil
}

type GadgetWorktopBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptionList []uint32 `protobuf:"varint,1,rep,packed,name=option_list,json=optionList,proto3" json:"option_list,omitempty"`
}

func (x *GadgetWorktopBin) Reset() {
	*x = GadgetWorktopBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_block_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GadgetWorktopBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GadgetWorktopBin) ProtoMessage() {}

func (x *GadgetWorktopBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_block_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GadgetWorktopBin.ProtoReflect.Descriptor instead.
func (*GadgetWorktopBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_block_proto_rawDescGZIP(), []int{12}
}

func (x *GadgetWorktopBin) GetOptionList() []uint32 {
	if x != nil {
		return x.OptionList
	}
	return nil
}

type GroupGadgetBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GadgetState      uint32 `protobuf:"varint,1,opt,name=gadget_state,json=gadgetState,proto3" json:"gadget_state,omitempty"`
	IsEnableInteract bool   `protobuf:"varint,2,opt,name=is_enable_interact,json=isEnableInteract,proto3" json:"is_enable_interact,omitempty"`
	GadgetTalkState  uint32 `protobuf:"varint,3,opt,name=gadget_talk_state,json=gadgetTalkState,proto3" json:"gadget_talk_state,omitempty"`
	// Types that are assignable to Component:
	//
	//	*GroupGadgetBin_Platform
	//	*GroupGadgetBin_BossChest
	//	*GroupGadgetBin_BlossomChest
	//	*GroupGadgetBin_GeneralReward
	//	*GroupGadgetBin_FishPool
	//	*GroupGadgetBin_CustomGadgetTreeInfo
	//	*GroupGadgetBin_Worktop
	Component isGroupGadgetBin_Component `protobuf_oneof:"component"`
}

func (x *GroupGadgetBin) Reset() {
	*x = GroupGadgetBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_block_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupGadgetBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupGadgetBin) ProtoMessage() {}

func (x *GroupGadgetBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_block_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupGadgetBin.ProtoReflect.Descriptor instead.
func (*GroupGadgetBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_block_proto_rawDescGZIP(), []int{13}
}

func (x *GroupGadgetBin) GetGadgetState() uint32 {
	if x != nil {
		return x.GadgetState
	}
	return 0
}

func (x *GroupGadgetBin) GetIsEnableInteract() bool {
	if x != nil {
		return x.IsEnableInteract
	}
	return false
}

func (x *GroupGadgetBin) GetGadgetTalkState() uint32 {
	if x != nil {
		return x.GadgetTalkState
	}
	return 0
}

func (m *GroupGadgetBin) GetComponent() isGroupGadgetBin_Component {
	if m != nil {
		return m.Component
	}
	return nil
}

func (x *GroupGadgetBin) GetPlatform() *GadgetPlatformBin {
	if x, ok := x.GetComponent().(*GroupGadgetBin_Platform); ok {
		return x.Platform
	}
	return nil
}

func (x *GroupGadgetBin) GetBossChest() *BossChestBin {
	if x, ok := x.GetComponent().(*GroupGadgetBin_BossChest); ok {
		return x.BossChest
	}
	return nil
}

func (x *GroupGadgetBin) GetBlossomChest() *BlossomChestBin {
	if x, ok := x.GetComponent().(*GroupGadgetBin_BlossomChest); ok {
		return x.BlossomChest
	}
	return nil
}

func (x *GroupGadgetBin) GetGeneralReward() *GadgetGeneralRewardBin {
	if x, ok := x.GetComponent().(*GroupGadgetBin_GeneralReward); ok {
		return x.GeneralReward
	}
	return nil
}

func (x *GroupGadgetBin) GetFishPool() *GadgetFishPoolBin {
	if x, ok := x.GetComponent().(*GroupGadgetBin_FishPool); ok {
		return x.FishPool
	}
	return nil
}

func (x *GroupGadgetBin) GetCustomGadgetTreeInfo() *CustomGadgetTreeInfoBin {
	if x, ok := x.GetComponent().(*GroupGadgetBin_CustomGadgetTreeInfo); ok {
		return x.CustomGadgetTreeInfo
	}
	return nil
}

func (x *GroupGadgetBin) GetWorktop() *GadgetWorktopBin {
	if x, ok := x.GetComponent().(*GroupGadgetBin_Worktop); ok {
		return x.Worktop
	}
	return nil
}

type isGroupGadgetBin_Component interface {
	isGroupGadgetBin_Component()
}

type GroupGadgetBin_Platform struct {
	Platform *GadgetPlatformBin `protobuf:"bytes,101,opt,name=platform,proto3,oneof"`
}

type GroupGadgetBin_BossChest struct {
	BossChest *BossChestBin `protobuf:"bytes,102,opt,name=boss_chest,json=bossChest,proto3,oneof"`
}

type GroupGadgetBin_BlossomChest struct {
	BlossomChest *BlossomChestBin `protobuf:"bytes,103,opt,name=blossom_chest,json=blossomChest,proto3,oneof"`
}

type GroupGadgetBin_GeneralReward struct {
	GeneralReward *GadgetGeneralRewardBin `protobuf:"bytes,104,opt,name=general_reward,json=generalReward,proto3,oneof"`
}

type GroupGadgetBin_FishPool struct {
	FishPool *GadgetFishPoolBin `protobuf:"bytes,105,opt,name=fish_pool,json=fishPool,proto3,oneof"`
}

type GroupGadgetBin_CustomGadgetTreeInfo struct {
	CustomGadgetTreeInfo *CustomGadgetTreeInfoBin `protobuf:"bytes,106,opt,name=custom_gadget_tree_info,json=customGadgetTreeInfo,proto3,oneof"`
}

type GroupGadgetBin_Worktop struct {
	Worktop *GadgetWorktopBin `protobuf:"bytes,107,opt,name=worktop,proto3,oneof"`
}

func (*GroupGadgetBin_Platform) isGroupGadgetBin_Component() {}

func (*GroupGadgetBin_BossChest) isGroupGadgetBin_Component() {}

func (*GroupGadgetBin_BlossomChest) isGroupGadgetBin_Component() {}

func (*GroupGadgetBin_GeneralReward) isGroupGadgetBin_Component() {}

func (*GroupGadgetBin_FishPool) isGroupGadgetBin_Component() {}

func (*GroupGadgetBin_CustomGadgetTreeInfo) isGroupGadgetBin_Component() {}

func (*GroupGadgetBin_Worktop) isGroupGadgetBin_Component() {}

type GroupMonsterBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DroppedHpPercent uint32 `protobuf:"varint,1,opt,name=dropped_hp_percent,json=droppedHpPercent,proto3" json:"dropped_hp_percent,omitempty"`
}

func (x *GroupMonsterBin) Reset() {
	*x = GroupMonsterBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_block_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMonsterBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMonsterBin) ProtoMessage() {}

func (x *GroupMonsterBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_block_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMonsterBin.ProtoReflect.Descriptor instead.
func (*GroupMonsterBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_block_proto_rawDescGZIP(), []int{14}
}

func (x *GroupMonsterBin) GetDroppedHpPercent() uint32 {
	if x != nil {
		return x.DroppedHpPercent
	}
	return 0
}

type GroupGatherBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId        uint32 `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	LastRefreshTime uint32 `protobuf:"fixed32,2,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
}

func (x *GroupGatherBin) Reset() {
	*x = GroupGatherBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_block_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupGatherBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupGatherBin) ProtoMessage() {}

func (x *GroupGatherBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_block_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupGatherBin.ProtoReflect.Descriptor instead.
func (*GroupGatherBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_block_proto_rawDescGZIP(), []int{15}
}

func (x *GroupGatherBin) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *GroupGatherBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

type GroupRefreshTimeBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaveType        uint32 `protobuf:"varint,1,opt,name=save_type,json=saveType,proto3" json:"save_type,omitempty"`
	LastRefreshTime uint32 `protobuf:"fixed32,2,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
}

func (x *GroupRefreshTimeBin) Reset() {
	*x = GroupRefreshTimeBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_block_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRefreshTimeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRefreshTimeBin) ProtoMessage() {}

func (x *GroupRefreshTimeBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_block_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRefreshTimeBin.ProtoReflect.Descriptor instead.
func (*GroupRefreshTimeBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_block_proto_rawDescGZIP(), []int{16}
}

func (x *GroupRefreshTimeBin) GetSaveType() uint32 {
	if x != nil {
		return x.SaveType
	}
	return 0
}

func (x *GroupRefreshTimeBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

type GroupBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterMap              map[uint32]*GroupMonsterBin  `protobuf:"bytes,1,rep,name=monster_map,json=monsterMap,proto3" json:"monster_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DelMonsterList          []uint32                     `protobuf:"varint,2,rep,packed,name=del_monster_list,json=delMonsterList,proto3" json:"del_monster_list,omitempty"`
	GadgetMap               map[uint32]*GroupGadgetBin   `protobuf:"bytes,3,rep,name=gadget_map,json=gadgetMap,proto3" json:"gadget_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DelGadgetList           []uint32                     `protobuf:"varint,4,rep,packed,name=del_gadget_list,json=delGadgetList,proto3" json:"del_gadget_list,omitempty"`
	TriggerMap              map[string]*GroupTriggerBin  `protobuf:"bytes,5,rep,name=trigger_map,json=triggerMap,proto3" json:"trigger_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VariableMap             map[string]*GroupVariableBin `protobuf:"bytes,6,rep,name=variable_map,json=variableMap,proto3" json:"variable_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SuiteIndex              uint32                       `protobuf:"varint,7,opt,name=suite_index,json=suiteIndex,proto3" json:"suite_index,omitempty"`
	ShowCutsceneChestList   []uint32                     `protobuf:"varint,8,rep,packed,name=show_cutscene_chest_list,json=showCutsceneChestList,proto3" json:"show_cutscene_chest_list,omitempty"`
	ChallengeRecordList     []*ChallengeRecordBin        `protobuf:"bytes,9,rep,name=challenge_record_list,json=challengeRecordList,proto3" json:"challenge_record_list,omitempty"`
	ReviseLevel             uint32                       `protobuf:"varint,10,opt,name=revise_level,json=reviseLevel,proto3" json:"revise_level,omitempty"`
	LastRefreshTime         uint32                       `protobuf:"fixed32,11,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	TargetSuiteIndex        uint32                       `protobuf:"varint,12,opt,name=target_suite_index,json=targetSuiteIndex,proto3" json:"target_suite_index,omitempty"`
	BossDieInfoMap          map[uint32]*BossDieInfoBin   `protobuf:"bytes,13,rep,name=boss_die_info_map,json=bossDieInfoMap,proto3" json:"boss_die_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GatherRefreshTimeList   []*GroupGatherBin            `protobuf:"bytes,14,rep,name=gather_refresh_time_list,json=gatherRefreshTimeList,proto3" json:"gather_refresh_time_list,omitempty"`
	IsReplaceable           bool                         `protobuf:"varint,15,opt,name=is_replaceable,json=isReplaceable,proto3" json:"is_replaceable,omitempty"`
	ReplaceableVersion      uint32                       `protobuf:"varint,16,opt,name=replaceable_version,json=replaceableVersion,proto3" json:"replaceable_version,omitempty"`
	TriggerList             []*GroupTriggerBin           `protobuf:"bytes,17,rep,name=trigger_list,json=triggerList,proto3" json:"trigger_list,omitempty"`
	GroupRefreshList        []*GroupRefreshTimeBin       `protobuf:"bytes,18,rep,name=group_refresh_list,json=groupRefreshList,proto3" json:"group_refresh_list,omitempty"`
	VariableConfigIdBinList []*GroupVariableConfigIdBin  `protobuf:"bytes,19,rep,name=variable_config_id_bin_list,json=variableConfigIdBinList,proto3" json:"variable_config_id_bin_list,omitempty"`
}

func (x *GroupBin) Reset() {
	*x = GroupBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_block_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupBin) ProtoMessage() {}

func (x *GroupBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_block_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupBin.ProtoReflect.Descriptor instead.
func (*GroupBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_block_proto_rawDescGZIP(), []int{17}
}

func (x *GroupBin) GetMonsterMap() map[uint32]*GroupMonsterBin {
	if x != nil {
		return x.MonsterMap
	}
	return nil
}

func (x *GroupBin) GetDelMonsterList() []uint32 {
	if x != nil {
		return x.DelMonsterList
	}
	return nil
}

func (x *GroupBin) GetGadgetMap() map[uint32]*GroupGadgetBin {
	if x != nil {
		return x.GadgetMap
	}
	return nil
}

func (x *GroupBin) GetDelGadgetList() []uint32 {
	if x != nil {
		return x.DelGadgetList
	}
	return nil
}

func (x *GroupBin) GetTriggerMap() map[string]*GroupTriggerBin {
	if x != nil {
		return x.TriggerMap
	}
	return nil
}

func (x *GroupBin) GetVariableMap() map[string]*GroupVariableBin {
	if x != nil {
		return x.VariableMap
	}
	return nil
}

func (x *GroupBin) GetSuiteIndex() uint32 {
	if x != nil {
		return x.SuiteIndex
	}
	return 0
}

func (x *GroupBin) GetShowCutsceneChestList() []uint32 {
	if x != nil {
		return x.ShowCutsceneChestList
	}
	return nil
}

func (x *GroupBin) GetChallengeRecordList() []*ChallengeRecordBin {
	if x != nil {
		return x.ChallengeRecordList
	}
	return nil
}

func (x *GroupBin) GetReviseLevel() uint32 {
	if x != nil {
		return x.ReviseLevel
	}
	return 0
}

func (x *GroupBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

func (x *GroupBin) GetTargetSuiteIndex() uint32 {
	if x != nil {
		return x.TargetSuiteIndex
	}
	return 0
}

func (x *GroupBin) GetBossDieInfoMap() map[uint32]*BossDieInfoBin {
	if x != nil {
		return x.BossDieInfoMap
	}
	return nil
}

func (x *GroupBin) GetGatherRefreshTimeList() []*GroupGatherBin {
	if x != nil {
		return x.GatherRefreshTimeList
	}
	return nil
}

func (x *GroupBin) GetIsReplaceable() bool {
	if x != nil {
		return x.IsReplaceable
	}
	return false
}

func (x *GroupBin) GetReplaceableVersion() uint32 {
	if x != nil {
		return x.ReplaceableVersion
	}
	return 0
}

func (x *GroupBin) GetTriggerList() []*GroupTriggerBin {
	if x != nil {
		return x.TriggerList
	}
	return nil
}

func (x *GroupBin) GetGroupRefreshList() []*GroupRefreshTimeBin {
	if x != nil {
		return x.GroupRefreshList
	}
	return nil
}

func (x *GroupBin) GetVariableConfigIdBinList() []*GroupVariableConfigIdBin {
	if x != nil {
		return x.VariableConfigIdBinList
	}
	return nil
}

type BlockBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupMap        map[uint32][]byte           `protobuf:"bytes,1,rep,name=group_map,json=groupMap,proto3" json:"group_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GroupProductMap map[uint32]*GroupProductBin `protobuf:"bytes,2,rep,name=group_product_map,json=groupProductMap,proto3" json:"group_product_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BlockBin) Reset() {
	*x = BlockBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_block_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockBin) ProtoMessage() {}

func (x *BlockBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_block_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockBin.ProtoReflect.Descriptor instead.
func (*BlockBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_block_proto_rawDescGZIP(), []int{18}
}

func (x *BlockBin) GetGroupMap() map[uint32][]byte {
	if x != nil {
		return x.GroupMap
	}
	return nil
}

func (x *BlockBin) GetGroupProductMap() map[uint32]*GroupProductBin {
	if x != nil {
		return x.GroupProductMap
	}
	return nil
}

var File_server_only_bin_block_proto protoreflect.FileDescriptor

var file_server_only_bin_block_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x2f, 0x62, 0x69,
	0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x2f, 0x62, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x02, 0x0a, 0x0f, 0x42, 0x6c,
	0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x43, 0x68, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x28, 0x0a,
	0x10, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d,
	0x43, 0x68, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x72, 0x6f, 0x70, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79,
	0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x49, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x11, 0x47, 0x61, 0x64, 0x67, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x0c, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x65,
	0x73, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65,
	0x61, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x64, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x55, 0x69, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65,
	0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x62, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x78, 0x0a, 0x0e, 0x42, 0x6f, 0x73,
	0x73, 0x44, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x75, 0x72, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x75, 0x72, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x65, 0x61, 0x64, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0x53, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x64, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x4e, 0x75, 0x6d, 0x12, 0x3f,
	0x0a, 0x08, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x1a,
	0x3a, 0x0a, 0x0c, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcf, 0x03, 0x0a, 0x16,
	0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x73, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x64, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x5b, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x63, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x52, 0x09,
	0x69, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x1a, 0x5a, 0x0a, 0x13, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42,
	0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x68, 0x0a,
	0x0c, 0x46, 0x69, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x67, 0x65, 0x6e, 0x5f, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x46, 0x69, 0x73, 0x68, 0x4e, 0x75, 0x6d, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x22, 0xcd, 0x02, 0x0a, 0x11, 0x47, 0x61, 0x64, 0x67,
	0x65, 0x74, 0x46, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x3b, 0x0a,
	0x0f, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x69, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x66, 0x69, 0x73,
	0x68, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f,
	0x64, 0x61, 0x79, 0x5f, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x46, 0x69, 0x73, 0x68, 0x4e, 0x75, 0x6d,
	0x12, 0x3e, 0x0a, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x46, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x53, 0x0a, 0x0f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x73, 0x68, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x46, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x6f, 0x6c,
	0x42, 0x69, 0x6e, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x46, 0x69, 0x73, 0x68, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x73, 0x68, 0x4d, 0x61, 0x70, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x73, 0x68, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x17, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6c,
	0x6f, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x56, 0x0a, 0x17,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x10, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x74, 0x6f, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd6, 0x04, 0x0a, 0x0e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74,
	0x54, 0x61, 0x6c, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x34, 0x0a, 0x0a, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x74, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f,
	0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x73, 0x73,
	0x6f, 0x6d, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x43, 0x68,
	0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f,
	0x6d, 0x43, 0x68, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52,
	0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x37,
	0x0a, 0x09, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74,
	0x46, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x66,
	0x69, 0x73, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x57, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x54, 0x72, 0x65,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x33, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x6f, 0x70, 0x18, 0x6b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x74, 0x6f, 0x70, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x77, 0x6f,
	0x72, 0x6b, 0x74, 0x6f, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x22, 0x3f, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x5f, 0x68, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x48, 0x70, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x22, 0x59, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5e,
	0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x61, 0x76, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9c,
	0x0c, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x6d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69,
	0x6e, 0x2e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x28, 0x0a,
	0x10, 0x64, 0x65, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x4d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x67, 0x61, 0x64, 0x67, 0x65,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x47, 0x61, 0x64,
	0x67, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x67, 0x61, 0x64,
	0x67, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x5f, 0x67, 0x61,
	0x64, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0d, 0x64, 0x65, 0x6c, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x61, 0x70,
	0x12, 0x43, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x75, 0x69, 0x74,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63,
	0x75, 0x74, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x75,
	0x74, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x43, 0x68, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x4d, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x73, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4e, 0x0a, 0x11, 0x62,
	0x6f, 0x73, 0x73, 0x5f, 0x64, 0x69, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x42, 0x6f, 0x73, 0x73, 0x44, 0x69, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x62, 0x6f, 0x73,
	0x73, 0x44, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x12, 0x4e, 0x0a, 0x18, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x42, 0x69, 0x6e, 0x52, 0x15, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x69,
	0x6e, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48,
	0x0a, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x1b, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x5f, 0x62,
	0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x17,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64,
	0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x55, 0x0a, 0x0f, 0x4d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53,
	0x0a, 0x0e, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47,
	0x61, 0x64, 0x67, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x10, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x13, 0x42, 0x6f, 0x73, 0x73, 0x44, 0x69, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x73, 0x73, 0x44, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb1, 0x02,
	0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x6e, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x12, 0x50, 0x0a, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42,
	0x69, 0x6e, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x1a, 0x3b, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x14, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x74, 0x65, 0x79, 0x76, 0x61, 0x74, 0x2d, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2f, 0x68, 0x6b,
	0x34, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_server_only_bin_block_proto_rawDescOnce sync.Once
	file_server_only_bin_block_proto_rawDescData = file_server_only_bin_block_proto_rawDesc
)

func file_server_only_bin_block_proto_rawDescGZIP() []byte {
	file_server_only_bin_block_proto_rawDescOnce.Do(func() {
		file_server_only_bin_block_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_only_bin_block_proto_rawDescData)
	})
	return file_server_only_bin_block_proto_rawDescData
}

var file_server_only_bin_block_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_server_only_bin_block_proto_goTypes = []interface{}{
	(*BlossomChestBin)(nil),          // 0: proto.BlossomChestBin
	(*GadgetPlatformBin)(nil),        // 1: proto.GadgetPlatformBin
	(*BossChestBin)(nil),             // 2: proto.BossChestBin
	(*ChallengeRecordBin)(nil),       // 3: proto.ChallengeRecordBin
	(*BossDieInfoBin)(nil),           // 4: proto.BossDieInfoBin
	(*GroupTriggerBin)(nil),          // 5: proto.GroupTriggerBin
	(*GeneralRewardBin)(nil),         // 6: proto.GeneralRewardBin
	(*GadgetGeneralRewardBin)(nil),   // 7: proto.GadgetGeneralRewardBin
	(*FishStockBin)(nil),             // 8: proto.FishStockBin
	(*GadgetFishPoolBin)(nil),        // 9: proto.GadgetFishPoolBin
	(*CustomGadgetNodeInfoBin)(nil),  // 10: proto.CustomGadgetNodeInfoBin
	(*CustomGadgetTreeInfoBin)(nil),  // 11: proto.CustomGadgetTreeInfoBin
	(*GadgetWorktopBin)(nil),         // 12: proto.GadgetWorktopBin
	(*GroupGadgetBin)(nil),           // 13: proto.GroupGadgetBin
	(*GroupMonsterBin)(nil),          // 14: proto.GroupMonsterBin
	(*GroupGatherBin)(nil),           // 15: proto.GroupGatherBin
	(*GroupRefreshTimeBin)(nil),      // 16: proto.GroupRefreshTimeBin
	(*GroupBin)(nil),                 // 17: proto.GroupBin
	(*BlockBin)(nil),                 // 18: proto.BlockBin
	nil,                              // 19: proto.GeneralRewardBin.DropMapEntry
	nil,                              // 20: proto.GadgetGeneralRewardBin.QualifyInfoMapEntry
	nil,                              // 21: proto.GadgetFishPoolBin.CachedFishMapEntry
	nil,                              // 22: proto.GroupBin.MonsterMapEntry
	nil,                              // 23: proto.GroupBin.GadgetMapEntry
	nil,                              // 24: proto.GroupBin.TriggerMapEntry
	nil,                              // 25: proto.GroupBin.VariableMapEntry
	nil,                              // 26: proto.GroupBin.BossDieInfoMapEntry
	nil,                              // 27: proto.BlockBin.GroupMapEntry
	nil,                              // 28: proto.BlockBin.GroupProductMapEntry
	(*ItemParamBin)(nil),             // 29: proto.ItemParamBin
	(*GroupVariableConfigIdBin)(nil), // 30: proto.GroupVariableConfigIdBin
	(*GroupVariableBin)(nil),         // 31: proto.GroupVariableBin
	(*GroupProductBin)(nil),          // 32: proto.GroupProductBin
}
var file_server_only_bin_block_proto_depIdxs = []int32{
	19, // 0: proto.GeneralRewardBin.drop_map:type_name -> proto.GeneralRewardBin.DropMapEntry
	20, // 1: proto.GadgetGeneralRewardBin.qualify_info_map:type_name -> proto.GadgetGeneralRewardBin.QualifyInfoMapEntry
	29, // 2: proto.GadgetGeneralRewardBin.item_param:type_name -> proto.ItemParamBin
	8,  // 3: proto.GadgetFishPoolBin.fish_stock_list:type_name -> proto.FishStockBin
	21, // 4: proto.GadgetFishPoolBin.cached_fish_map:type_name -> proto.GadgetFishPoolBin.CachedFishMapEntry
	10, // 5: proto.CustomGadgetTreeInfoBin.node_list:type_name -> proto.CustomGadgetNodeInfoBin
	1,  // 6: proto.GroupGadgetBin.platform:type_name -> proto.GadgetPlatformBin
	2,  // 7: proto.GroupGadgetBin.boss_chest:type_name -> proto.BossChestBin
	0,  // 8: proto.GroupGadgetBin.blossom_chest:type_name -> proto.BlossomChestBin
	7,  // 9: proto.GroupGadgetBin.general_reward:type_name -> proto.GadgetGeneralRewardBin
	9,  // 10: proto.GroupGadgetBin.fish_pool:type_name -> proto.GadgetFishPoolBin
	11, // 11: proto.GroupGadgetBin.custom_gadget_tree_info:type_name -> proto.CustomGadgetTreeInfoBin
	12, // 12: proto.GroupGadgetBin.worktop:type_name -> proto.GadgetWorktopBin
	22, // 13: proto.GroupBin.monster_map:type_name -> proto.GroupBin.MonsterMapEntry
	23, // 14: proto.GroupBin.gadget_map:type_name -> proto.GroupBin.GadgetMapEntry
	24, // 15: proto.GroupBin.trigger_map:type_name -> proto.GroupBin.TriggerMapEntry
	25, // 16: proto.GroupBin.variable_map:type_name -> proto.GroupBin.VariableMapEntry
	3,  // 17: proto.GroupBin.challenge_record_list:type_name -> proto.ChallengeRecordBin
	26, // 18: proto.GroupBin.boss_die_info_map:type_name -> proto.GroupBin.BossDieInfoMapEntry
	15, // 19: proto.GroupBin.gather_refresh_time_list:type_name -> proto.GroupGatherBin
	5,  // 20: proto.GroupBin.trigger_list:type_name -> proto.GroupTriggerBin
	16, // 21: proto.GroupBin.group_refresh_list:type_name -> proto.GroupRefreshTimeBin
	30, // 22: proto.GroupBin.variable_config_id_bin_list:type_name -> proto.GroupVariableConfigIdBin
	27, // 23: proto.BlockBin.group_map:type_name -> proto.BlockBin.GroupMapEntry
	28, // 24: proto.BlockBin.group_product_map:type_name -> proto.BlockBin.GroupProductMapEntry
	6,  // 25: proto.GadgetGeneralRewardBin.QualifyInfoMapEntry.value:type_name -> proto.GeneralRewardBin
	14, // 26: proto.GroupBin.MonsterMapEntry.value:type_name -> proto.GroupMonsterBin
	13, // 27: proto.GroupBin.GadgetMapEntry.value:type_name -> proto.GroupGadgetBin
	5,  // 28: proto.GroupBin.TriggerMapEntry.value:type_name -> proto.GroupTriggerBin
	31, // 29: proto.GroupBin.VariableMapEntry.value:type_name -> proto.GroupVariableBin
	4,  // 30: proto.GroupBin.BossDieInfoMapEntry.value:type_name -> proto.BossDieInfoBin
	32, // 31: proto.BlockBin.GroupProductMapEntry.value:type_name -> proto.GroupProductBin
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_server_only_bin_block_proto_init() }
func file_server_only_bin_block_proto_init() {
	if File_server_only_bin_block_proto != nil {
		return
	}
	file_server_only_bin_common_server_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_server_only_bin_block_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlossomChestBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_block_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GadgetPlatformBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_block_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BossChestBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_block_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_block_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BossDieInfoBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_block_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupTriggerBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_block_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralRewardBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_block_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GadgetGeneralRewardBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_block_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishStockBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_block_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GadgetFishPoolBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_block_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomGadgetNodeInfoBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_block_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomGadgetTreeInfoBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_block_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GadgetWorktopBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_block_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupGadgetBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_block_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMonsterBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_block_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupGatherBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_block_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRefreshTimeBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_block_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_block_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_server_only_bin_block_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*GroupGadgetBin_Platform)(nil),
		(*GroupGadgetBin_BossChest)(nil),
		(*GroupGadgetBin_BlossomChest)(nil),
		(*GroupGadgetBin_GeneralReward)(nil),
		(*GroupGadgetBin_FishPool)(nil),
		(*GroupGadgetBin_CustomGadgetTreeInfo)(nil),
		(*GroupGadgetBin_Worktop)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_only_bin_block_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_server_only_bin_block_proto_goTypes,
		DependencyIndexes: file_server_only_bin_block_proto_depIdxs,
		MessageInfos:      file_server_only_bin_block_proto_msgTypes,
	}.Build()
	File_server_only_bin_block_proto = out.File
	file_server_only_bin_block_proto_rawDesc = nil
	file_server_only_bin_block_proto_goTypes = nil
	file_server_only_bin_block_proto_depIdxs = nil
}
