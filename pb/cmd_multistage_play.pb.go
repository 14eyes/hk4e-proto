// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: cmd/cmd_multistage_play.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MultistagePlayType int32

const (
	MultistagePlayType_MULTISTAGE_PLAY_TYPE_NON              MultistagePlayType = 0
	MultistagePlayType_MULTISTAGE_PLAY_TYPE_MECHANICUS       MultistagePlayType = 1
	MultistagePlayType_MULTISTAGE_PLAY_TYPE_FLEUR_FAIR       MultistagePlayType = 2
	MultistagePlayType_MULTISTAGE_PLAY_TYPE_HIDE_AND_SEEK    MultistagePlayType = 3
	MultistagePlayType_MULTISTAGE_PLAY_TYPE_BOUNCE_CONJURING MultistagePlayType = 4
	MultistagePlayType_MULTISTAGE_PLAY_TYPE_CHESS            MultistagePlayType = 5
	MultistagePlayType_MULTISTAGE_PLAY_TYPE_IRODORI_CHESS    MultistagePlayType = 6
	MultistagePlayType_MULTISTAGE_PLAY_TYPE_CHAR_AMUSEMENT   MultistagePlayType = 7
	MultistagePlayType_MULTISTAGE_PLAY_TYPE_BRICK_BREAKER    MultistagePlayType = 8
	MultistagePlayType_MULTISTAGE_PLAY_TYPE_COIN_COLLECT     MultistagePlayType = 9
	MultistagePlayType_MULTISTAGE_PLAY_TYPE_LAN_V3_BOAT      MultistagePlayType = 10
)

// Enum value maps for MultistagePlayType.
var (
	MultistagePlayType_name = map[int32]string{
		0:  "MULTISTAGE_PLAY_TYPE_NON",
		1:  "MULTISTAGE_PLAY_TYPE_MECHANICUS",
		2:  "MULTISTAGE_PLAY_TYPE_FLEUR_FAIR",
		3:  "MULTISTAGE_PLAY_TYPE_HIDE_AND_SEEK",
		4:  "MULTISTAGE_PLAY_TYPE_BOUNCE_CONJURING",
		5:  "MULTISTAGE_PLAY_TYPE_CHESS",
		6:  "MULTISTAGE_PLAY_TYPE_IRODORI_CHESS",
		7:  "MULTISTAGE_PLAY_TYPE_CHAR_AMUSEMENT",
		8:  "MULTISTAGE_PLAY_TYPE_BRICK_BREAKER",
		9:  "MULTISTAGE_PLAY_TYPE_COIN_COLLECT",
		10: "MULTISTAGE_PLAY_TYPE_LAN_V3_BOAT",
	}
	MultistagePlayType_value = map[string]int32{
		"MULTISTAGE_PLAY_TYPE_NON":              0,
		"MULTISTAGE_PLAY_TYPE_MECHANICUS":       1,
		"MULTISTAGE_PLAY_TYPE_FLEUR_FAIR":       2,
		"MULTISTAGE_PLAY_TYPE_HIDE_AND_SEEK":    3,
		"MULTISTAGE_PLAY_TYPE_BOUNCE_CONJURING": 4,
		"MULTISTAGE_PLAY_TYPE_CHESS":            5,
		"MULTISTAGE_PLAY_TYPE_IRODORI_CHESS":    6,
		"MULTISTAGE_PLAY_TYPE_CHAR_AMUSEMENT":   7,
		"MULTISTAGE_PLAY_TYPE_BRICK_BREAKER":    8,
		"MULTISTAGE_PLAY_TYPE_COIN_COLLECT":     9,
		"MULTISTAGE_PLAY_TYPE_LAN_V3_BOAT":      10,
	}
)

func (x MultistagePlayType) Enum() *MultistagePlayType {
	p := new(MultistagePlayType)
	*p = x
	return p
}

func (x MultistagePlayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultistagePlayType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[0].Descriptor()
}

func (MultistagePlayType) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[0]
}

func (x MultistagePlayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultistagePlayType.Descriptor instead.
func (MultistagePlayType) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{0}
}

type InBattleMechanicusStageType int32

const (
	InBattleMechanicusStageType_IN_BATTLE_MECHANICUS_STAGE_NONE      InBattleMechanicusStageType = 0
	InBattleMechanicusStageType_IN_BATTLE_MECHANICUS_STAGE_BUILD     InBattleMechanicusStageType = 1
	InBattleMechanicusStageType_IN_BATTLE_MECHANICUS_STAGE_CARD_FLIP InBattleMechanicusStageType = 2
	InBattleMechanicusStageType_IN_BATTLE_MECHANICUS_STAGE_KILL      InBattleMechanicusStageType = 3
)

// Enum value maps for InBattleMechanicusStageType.
var (
	InBattleMechanicusStageType_name = map[int32]string{
		0: "IN_BATTLE_MECHANICUS_STAGE_NONE",
		1: "IN_BATTLE_MECHANICUS_STAGE_BUILD",
		2: "IN_BATTLE_MECHANICUS_STAGE_CARD_FLIP",
		3: "IN_BATTLE_MECHANICUS_STAGE_KILL",
	}
	InBattleMechanicusStageType_value = map[string]int32{
		"IN_BATTLE_MECHANICUS_STAGE_NONE":      0,
		"IN_BATTLE_MECHANICUS_STAGE_BUILD":     1,
		"IN_BATTLE_MECHANICUS_STAGE_CARD_FLIP": 2,
		"IN_BATTLE_MECHANICUS_STAGE_KILL":      3,
	}
)

func (x InBattleMechanicusStageType) Enum() *InBattleMechanicusStageType {
	p := new(InBattleMechanicusStageType)
	*p = x
	return p
}

func (x InBattleMechanicusStageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InBattleMechanicusStageType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[1].Descriptor()
}

func (InBattleMechanicusStageType) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[1]
}

func (x InBattleMechanicusStageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InBattleMechanicusStageType.Descriptor instead.
func (InBattleMechanicusStageType) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{1}
}

type InBattleMechanicusCardChallengeState int32

const (
	InBattleMechanicusCardChallengeState_IN_BATTLE_MECHANICUS_CARD_CHALLENGE_NONE     InBattleMechanicusCardChallengeState = 0
	InBattleMechanicusCardChallengeState_IN_BATTLE_MECHANICUS_CARD_CHALLENGE_ON_GOING InBattleMechanicusCardChallengeState = 1
	InBattleMechanicusCardChallengeState_IN_BATTLE_MECHANICUS_CARD_CHALLENGE_FAIL     InBattleMechanicusCardChallengeState = 2
	InBattleMechanicusCardChallengeState_IN_BATTLE_MECHANICUS_CARD_CHALLENGE_SUCCESS  InBattleMechanicusCardChallengeState = 3
)

// Enum value maps for InBattleMechanicusCardChallengeState.
var (
	InBattleMechanicusCardChallengeState_name = map[int32]string{
		0: "IN_BATTLE_MECHANICUS_CARD_CHALLENGE_NONE",
		1: "IN_BATTLE_MECHANICUS_CARD_CHALLENGE_ON_GOING",
		2: "IN_BATTLE_MECHANICUS_CARD_CHALLENGE_FAIL",
		3: "IN_BATTLE_MECHANICUS_CARD_CHALLENGE_SUCCESS",
	}
	InBattleMechanicusCardChallengeState_value = map[string]int32{
		"IN_BATTLE_MECHANICUS_CARD_CHALLENGE_NONE":     0,
		"IN_BATTLE_MECHANICUS_CARD_CHALLENGE_ON_GOING": 1,
		"IN_BATTLE_MECHANICUS_CARD_CHALLENGE_FAIL":     2,
		"IN_BATTLE_MECHANICUS_CARD_CHALLENGE_SUCCESS":  3,
	}
)

func (x InBattleMechanicusCardChallengeState) Enum() *InBattleMechanicusCardChallengeState {
	p := new(InBattleMechanicusCardChallengeState)
	*p = x
	return p
}

func (x InBattleMechanicusCardChallengeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InBattleMechanicusCardChallengeState) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[2].Descriptor()
}

func (InBattleMechanicusCardChallengeState) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[2]
}

func (x InBattleMechanicusCardChallengeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InBattleMechanicusCardChallengeState.Descriptor instead.
func (InBattleMechanicusCardChallengeState) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{2}
}

type HideAndSeekStageType int32

const (
	HideAndSeekStageType_HIDE_AND_SEEK_STAGE_PREPARE HideAndSeekStageType = 0
	HideAndSeekStageType_HIDE_AND_SEEK_STAGE_PICK    HideAndSeekStageType = 1
	HideAndSeekStageType_HIDE_AND_SEEK_STAGE_GAME    HideAndSeekStageType = 2
	HideAndSeekStageType_HIDE_AND_SEEK_STAGE_HIDE    HideAndSeekStageType = 3
	HideAndSeekStageType_HIDE_AND_SEEK_STAGE_SEEK    HideAndSeekStageType = 4
	HideAndSeekStageType_HIDE_AND_SEEK_STAGE_SETTLE  HideAndSeekStageType = 5
)

// Enum value maps for HideAndSeekStageType.
var (
	HideAndSeekStageType_name = map[int32]string{
		0: "HIDE_AND_SEEK_STAGE_PREPARE",
		1: "HIDE_AND_SEEK_STAGE_PICK",
		2: "HIDE_AND_SEEK_STAGE_GAME",
		3: "HIDE_AND_SEEK_STAGE_HIDE",
		4: "HIDE_AND_SEEK_STAGE_SEEK",
		5: "HIDE_AND_SEEK_STAGE_SETTLE",
	}
	HideAndSeekStageType_value = map[string]int32{
		"HIDE_AND_SEEK_STAGE_PREPARE": 0,
		"HIDE_AND_SEEK_STAGE_PICK":    1,
		"HIDE_AND_SEEK_STAGE_GAME":    2,
		"HIDE_AND_SEEK_STAGE_HIDE":    3,
		"HIDE_AND_SEEK_STAGE_SEEK":    4,
		"HIDE_AND_SEEK_STAGE_SETTLE":  5,
	}
)

func (x HideAndSeekStageType) Enum() *HideAndSeekStageType {
	p := new(HideAndSeekStageType)
	*p = x
	return p
}

func (x HideAndSeekStageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HideAndSeekStageType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[3].Descriptor()
}

func (HideAndSeekStageType) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[3]
}

func (x HideAndSeekStageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HideAndSeekStageType.Descriptor instead.
func (HideAndSeekStageType) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{3}
}

type BrickBreakerStageType int32

const (
	BrickBreakerStageType_BRICK_BREAKER_STAGE_PREPARE BrickBreakerStageType = 0
	BrickBreakerStageType_BRICK_BREAKER_STAGE_PICK    BrickBreakerStageType = 1
	BrickBreakerStageType_BRICK_BREAKER_STAGE_GAME    BrickBreakerStageType = 2
	BrickBreakerStageType_BRICK_BREAKER_STAGE_PLAY    BrickBreakerStageType = 3
	BrickBreakerStageType_BRICK_BREAKER_STAGE_SETTLE  BrickBreakerStageType = 4
)

// Enum value maps for BrickBreakerStageType.
var (
	BrickBreakerStageType_name = map[int32]string{
		0: "BRICK_BREAKER_STAGE_PREPARE",
		1: "BRICK_BREAKER_STAGE_PICK",
		2: "BRICK_BREAKER_STAGE_GAME",
		3: "BRICK_BREAKER_STAGE_PLAY",
		4: "BRICK_BREAKER_STAGE_SETTLE",
	}
	BrickBreakerStageType_value = map[string]int32{
		"BRICK_BREAKER_STAGE_PREPARE": 0,
		"BRICK_BREAKER_STAGE_PICK":    1,
		"BRICK_BREAKER_STAGE_GAME":    2,
		"BRICK_BREAKER_STAGE_PLAY":    3,
		"BRICK_BREAKER_STAGE_SETTLE":  4,
	}
)

func (x BrickBreakerStageType) Enum() *BrickBreakerStageType {
	p := new(BrickBreakerStageType)
	*p = x
	return p
}

func (x BrickBreakerStageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BrickBreakerStageType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[4].Descriptor()
}

func (BrickBreakerStageType) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[4]
}

func (x BrickBreakerStageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BrickBreakerStageType.Descriptor instead.
func (BrickBreakerStageType) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{4}
}

type LanV3BoatKickReason int32

const (
	LanV3BoatKickReason_LAN_V3_KICK_REASON_NONE         LanV3BoatKickReason = 0
	LanV3BoatKickReason_LAN_V3_KICK_REASON_EXIT_VEHICLE LanV3BoatKickReason = 1
	LanV3BoatKickReason_LAN_V3_KICK_REASON_AVATAR_DIE   LanV3BoatKickReason = 2
	LanV3BoatKickReason_LAN_V3_KICK_REASON_SLOW_ENTER   LanV3BoatKickReason = 3
)

// Enum value maps for LanV3BoatKickReason.
var (
	LanV3BoatKickReason_name = map[int32]string{
		0: "LAN_V3_KICK_REASON_NONE",
		1: "LAN_V3_KICK_REASON_EXIT_VEHICLE",
		2: "LAN_V3_KICK_REASON_AVATAR_DIE",
		3: "LAN_V3_KICK_REASON_SLOW_ENTER",
	}
	LanV3BoatKickReason_value = map[string]int32{
		"LAN_V3_KICK_REASON_NONE":         0,
		"LAN_V3_KICK_REASON_EXIT_VEHICLE": 1,
		"LAN_V3_KICK_REASON_AVATAR_DIE":   2,
		"LAN_V3_KICK_REASON_SLOW_ENTER":   3,
	}
)

func (x LanV3BoatKickReason) Enum() *LanV3BoatKickReason {
	p := new(LanV3BoatKickReason)
	*p = x
	return p
}

func (x LanV3BoatKickReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LanV3BoatKickReason) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[5].Descriptor()
}

func (LanV3BoatKickReason) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[5]
}

func (x LanV3BoatKickReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LanV3BoatKickReason.Descriptor instead.
func (LanV3BoatKickReason) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{5}
}

type MultistagePlayInfoNotify_CmdId int32

const (
	MultistagePlayInfoNotify_NONE             MultistagePlayInfoNotify_CmdId = 0
	MultistagePlayInfoNotify_CMD_ID           MultistagePlayInfoNotify_CmdId = 5372
	MultistagePlayInfoNotify_ENET_CHANNEL_ID  MultistagePlayInfoNotify_CmdId = 0
	MultistagePlayInfoNotify_ENET_IS_RELIABLE MultistagePlayInfoNotify_CmdId = 1
)

// Enum value maps for MultistagePlayInfoNotify_CmdId.
var (
	MultistagePlayInfoNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5372: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	MultistagePlayInfoNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5372,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x MultistagePlayInfoNotify_CmdId) Enum() *MultistagePlayInfoNotify_CmdId {
	p := new(MultistagePlayInfoNotify_CmdId)
	*p = x
	return p
}

func (x MultistagePlayInfoNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultistagePlayInfoNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[6].Descriptor()
}

func (MultistagePlayInfoNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[6]
}

func (x MultistagePlayInfoNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultistagePlayInfoNotify_CmdId.Descriptor instead.
func (MultistagePlayInfoNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{12, 0}
}

type MultistagePlayFinishStageReq_CmdId int32

const (
	MultistagePlayFinishStageReq_NONE             MultistagePlayFinishStageReq_CmdId = 0
	MultistagePlayFinishStageReq_CMD_ID           MultistagePlayFinishStageReq_CmdId = 5398
	MultistagePlayFinishStageReq_ENET_CHANNEL_ID  MultistagePlayFinishStageReq_CmdId = 0
	MultistagePlayFinishStageReq_ENET_IS_RELIABLE MultistagePlayFinishStageReq_CmdId = 1
	MultistagePlayFinishStageReq_IS_ALLOW_CLIENT  MultistagePlayFinishStageReq_CmdId = 1
)

// Enum value maps for MultistagePlayFinishStageReq_CmdId.
var (
	MultistagePlayFinishStageReq_CmdId_name = map[int32]string{
		0:    "NONE",
		5398: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	MultistagePlayFinishStageReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5398,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x MultistagePlayFinishStageReq_CmdId) Enum() *MultistagePlayFinishStageReq_CmdId {
	p := new(MultistagePlayFinishStageReq_CmdId)
	*p = x
	return p
}

func (x MultistagePlayFinishStageReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultistagePlayFinishStageReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[7].Descriptor()
}

func (MultistagePlayFinishStageReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[7]
}

func (x MultistagePlayFinishStageReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultistagePlayFinishStageReq_CmdId.Descriptor instead.
func (MultistagePlayFinishStageReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{13, 0}
}

type InBattleMechanicusExcapeMonsterNotify_CmdId int32

const (
	InBattleMechanicusExcapeMonsterNotify_NONE             InBattleMechanicusExcapeMonsterNotify_CmdId = 0
	InBattleMechanicusExcapeMonsterNotify_CMD_ID           InBattleMechanicusExcapeMonsterNotify_CmdId = 5307
	InBattleMechanicusExcapeMonsterNotify_ENET_CHANNEL_ID  InBattleMechanicusExcapeMonsterNotify_CmdId = 0
	InBattleMechanicusExcapeMonsterNotify_ENET_IS_RELIABLE InBattleMechanicusExcapeMonsterNotify_CmdId = 1
)

// Enum value maps for InBattleMechanicusExcapeMonsterNotify_CmdId.
var (
	InBattleMechanicusExcapeMonsterNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5307: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	InBattleMechanicusExcapeMonsterNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5307,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x InBattleMechanicusExcapeMonsterNotify_CmdId) Enum() *InBattleMechanicusExcapeMonsterNotify_CmdId {
	p := new(InBattleMechanicusExcapeMonsterNotify_CmdId)
	*p = x
	return p
}

func (x InBattleMechanicusExcapeMonsterNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InBattleMechanicusExcapeMonsterNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[8].Descriptor()
}

func (InBattleMechanicusExcapeMonsterNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[8]
}

func (x InBattleMechanicusExcapeMonsterNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InBattleMechanicusExcapeMonsterNotify_CmdId.Descriptor instead.
func (InBattleMechanicusExcapeMonsterNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{14, 0}
}

type InBattleMechanicusLeftMonsterNotify_CmdId int32

const (
	InBattleMechanicusLeftMonsterNotify_NONE             InBattleMechanicusLeftMonsterNotify_CmdId = 0
	InBattleMechanicusLeftMonsterNotify_CMD_ID           InBattleMechanicusLeftMonsterNotify_CmdId = 5321
	InBattleMechanicusLeftMonsterNotify_ENET_CHANNEL_ID  InBattleMechanicusLeftMonsterNotify_CmdId = 0
	InBattleMechanicusLeftMonsterNotify_ENET_IS_RELIABLE InBattleMechanicusLeftMonsterNotify_CmdId = 1
)

// Enum value maps for InBattleMechanicusLeftMonsterNotify_CmdId.
var (
	InBattleMechanicusLeftMonsterNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5321: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	InBattleMechanicusLeftMonsterNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5321,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x InBattleMechanicusLeftMonsterNotify_CmdId) Enum() *InBattleMechanicusLeftMonsterNotify_CmdId {
	p := new(InBattleMechanicusLeftMonsterNotify_CmdId)
	*p = x
	return p
}

func (x InBattleMechanicusLeftMonsterNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InBattleMechanicusLeftMonsterNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[9].Descriptor()
}

func (InBattleMechanicusLeftMonsterNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[9]
}

func (x InBattleMechanicusLeftMonsterNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InBattleMechanicusLeftMonsterNotify_CmdId.Descriptor instead.
func (InBattleMechanicusLeftMonsterNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{15, 0}
}

type InBattleMechanicusBuildingPointsNotify_CmdId int32

const (
	InBattleMechanicusBuildingPointsNotify_NONE             InBattleMechanicusBuildingPointsNotify_CmdId = 0
	InBattleMechanicusBuildingPointsNotify_CMD_ID           InBattleMechanicusBuildingPointsNotify_CmdId = 5303
	InBattleMechanicusBuildingPointsNotify_ENET_CHANNEL_ID  InBattleMechanicusBuildingPointsNotify_CmdId = 0
	InBattleMechanicusBuildingPointsNotify_ENET_IS_RELIABLE InBattleMechanicusBuildingPointsNotify_CmdId = 1
)

// Enum value maps for InBattleMechanicusBuildingPointsNotify_CmdId.
var (
	InBattleMechanicusBuildingPointsNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5303: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	InBattleMechanicusBuildingPointsNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5303,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x InBattleMechanicusBuildingPointsNotify_CmdId) Enum() *InBattleMechanicusBuildingPointsNotify_CmdId {
	p := new(InBattleMechanicusBuildingPointsNotify_CmdId)
	*p = x
	return p
}

func (x InBattleMechanicusBuildingPointsNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InBattleMechanicusBuildingPointsNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[10].Descriptor()
}

func (InBattleMechanicusBuildingPointsNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[10]
}

func (x InBattleMechanicusBuildingPointsNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InBattleMechanicusBuildingPointsNotify_CmdId.Descriptor instead.
func (InBattleMechanicusBuildingPointsNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{16, 0}
}

type InBattleMechanicusPickCardReq_CmdId int32

const (
	InBattleMechanicusPickCardReq_NONE             InBattleMechanicusPickCardReq_CmdId = 0
	InBattleMechanicusPickCardReq_CMD_ID           InBattleMechanicusPickCardReq_CmdId = 5390
	InBattleMechanicusPickCardReq_ENET_CHANNEL_ID  InBattleMechanicusPickCardReq_CmdId = 0
	InBattleMechanicusPickCardReq_ENET_IS_RELIABLE InBattleMechanicusPickCardReq_CmdId = 1
	InBattleMechanicusPickCardReq_IS_ALLOW_CLIENT  InBattleMechanicusPickCardReq_CmdId = 1
)

// Enum value maps for InBattleMechanicusPickCardReq_CmdId.
var (
	InBattleMechanicusPickCardReq_CmdId_name = map[int32]string{
		0:    "NONE",
		5390: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	InBattleMechanicusPickCardReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5390,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x InBattleMechanicusPickCardReq_CmdId) Enum() *InBattleMechanicusPickCardReq_CmdId {
	p := new(InBattleMechanicusPickCardReq_CmdId)
	*p = x
	return p
}

func (x InBattleMechanicusPickCardReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InBattleMechanicusPickCardReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[11].Descriptor()
}

func (InBattleMechanicusPickCardReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[11]
}

func (x InBattleMechanicusPickCardReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InBattleMechanicusPickCardReq_CmdId.Descriptor instead.
func (InBattleMechanicusPickCardReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{17, 0}
}

type InBattleMechanicusPickCardRsp_CmdId int32

const (
	InBattleMechanicusPickCardRsp_NONE             InBattleMechanicusPickCardRsp_CmdId = 0
	InBattleMechanicusPickCardRsp_CMD_ID           InBattleMechanicusPickCardRsp_CmdId = 5373
	InBattleMechanicusPickCardRsp_ENET_CHANNEL_ID  InBattleMechanicusPickCardRsp_CmdId = 0
	InBattleMechanicusPickCardRsp_ENET_IS_RELIABLE InBattleMechanicusPickCardRsp_CmdId = 1
)

// Enum value maps for InBattleMechanicusPickCardRsp_CmdId.
var (
	InBattleMechanicusPickCardRsp_CmdId_name = map[int32]string{
		0:    "NONE",
		5373: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	InBattleMechanicusPickCardRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5373,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x InBattleMechanicusPickCardRsp_CmdId) Enum() *InBattleMechanicusPickCardRsp_CmdId {
	p := new(InBattleMechanicusPickCardRsp_CmdId)
	*p = x
	return p
}

func (x InBattleMechanicusPickCardRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InBattleMechanicusPickCardRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[12].Descriptor()
}

func (InBattleMechanicusPickCardRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[12]
}

func (x InBattleMechanicusPickCardRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InBattleMechanicusPickCardRsp_CmdId.Descriptor instead.
func (InBattleMechanicusPickCardRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{18, 0}
}

type InBattleMechanicusPickCardNotify_CmdId int32

const (
	InBattleMechanicusPickCardNotify_NONE             InBattleMechanicusPickCardNotify_CmdId = 0
	InBattleMechanicusPickCardNotify_CMD_ID           InBattleMechanicusPickCardNotify_CmdId = 5399
	InBattleMechanicusPickCardNotify_ENET_CHANNEL_ID  InBattleMechanicusPickCardNotify_CmdId = 0
	InBattleMechanicusPickCardNotify_ENET_IS_RELIABLE InBattleMechanicusPickCardNotify_CmdId = 1
)

// Enum value maps for InBattleMechanicusPickCardNotify_CmdId.
var (
	InBattleMechanicusPickCardNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5399: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	InBattleMechanicusPickCardNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5399,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x InBattleMechanicusPickCardNotify_CmdId) Enum() *InBattleMechanicusPickCardNotify_CmdId {
	p := new(InBattleMechanicusPickCardNotify_CmdId)
	*p = x
	return p
}

func (x InBattleMechanicusPickCardNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InBattleMechanicusPickCardNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[13].Descriptor()
}

func (InBattleMechanicusPickCardNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[13]
}

func (x InBattleMechanicusPickCardNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InBattleMechanicusPickCardNotify_CmdId.Descriptor instead.
func (InBattleMechanicusPickCardNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{19, 0}
}

type InBattleMechanicusConfirmCardReq_CmdId int32

const (
	InBattleMechanicusConfirmCardReq_NONE             InBattleMechanicusConfirmCardReq_CmdId = 0
	InBattleMechanicusConfirmCardReq_CMD_ID           InBattleMechanicusConfirmCardReq_CmdId = 5331
	InBattleMechanicusConfirmCardReq_ENET_CHANNEL_ID  InBattleMechanicusConfirmCardReq_CmdId = 0
	InBattleMechanicusConfirmCardReq_ENET_IS_RELIABLE InBattleMechanicusConfirmCardReq_CmdId = 1
	InBattleMechanicusConfirmCardReq_IS_ALLOW_CLIENT  InBattleMechanicusConfirmCardReq_CmdId = 1
)

// Enum value maps for InBattleMechanicusConfirmCardReq_CmdId.
var (
	InBattleMechanicusConfirmCardReq_CmdId_name = map[int32]string{
		0:    "NONE",
		5331: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	InBattleMechanicusConfirmCardReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5331,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x InBattleMechanicusConfirmCardReq_CmdId) Enum() *InBattleMechanicusConfirmCardReq_CmdId {
	p := new(InBattleMechanicusConfirmCardReq_CmdId)
	*p = x
	return p
}

func (x InBattleMechanicusConfirmCardReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InBattleMechanicusConfirmCardReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[14].Descriptor()
}

func (InBattleMechanicusConfirmCardReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[14]
}

func (x InBattleMechanicusConfirmCardReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InBattleMechanicusConfirmCardReq_CmdId.Descriptor instead.
func (InBattleMechanicusConfirmCardReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{20, 0}
}

type InBattleMechanicusConfirmCardRsp_CmdId int32

const (
	InBattleMechanicusConfirmCardRsp_NONE             InBattleMechanicusConfirmCardRsp_CmdId = 0
	InBattleMechanicusConfirmCardRsp_CMD_ID           InBattleMechanicusConfirmCardRsp_CmdId = 5375
	InBattleMechanicusConfirmCardRsp_ENET_CHANNEL_ID  InBattleMechanicusConfirmCardRsp_CmdId = 0
	InBattleMechanicusConfirmCardRsp_ENET_IS_RELIABLE InBattleMechanicusConfirmCardRsp_CmdId = 1
)

// Enum value maps for InBattleMechanicusConfirmCardRsp_CmdId.
var (
	InBattleMechanicusConfirmCardRsp_CmdId_name = map[int32]string{
		0:    "NONE",
		5375: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	InBattleMechanicusConfirmCardRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5375,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x InBattleMechanicusConfirmCardRsp_CmdId) Enum() *InBattleMechanicusConfirmCardRsp_CmdId {
	p := new(InBattleMechanicusConfirmCardRsp_CmdId)
	*p = x
	return p
}

func (x InBattleMechanicusConfirmCardRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InBattleMechanicusConfirmCardRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[15].Descriptor()
}

func (InBattleMechanicusConfirmCardRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[15]
}

func (x InBattleMechanicusConfirmCardRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InBattleMechanicusConfirmCardRsp_CmdId.Descriptor instead.
func (InBattleMechanicusConfirmCardRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{21, 0}
}

type InBattleMechanicusConfirmCardNotify_CmdId int32

const (
	InBattleMechanicusConfirmCardNotify_NONE             InBattleMechanicusConfirmCardNotify_CmdId = 0
	InBattleMechanicusConfirmCardNotify_CMD_ID           InBattleMechanicusConfirmCardNotify_CmdId = 5348
	InBattleMechanicusConfirmCardNotify_ENET_CHANNEL_ID  InBattleMechanicusConfirmCardNotify_CmdId = 0
	InBattleMechanicusConfirmCardNotify_ENET_IS_RELIABLE InBattleMechanicusConfirmCardNotify_CmdId = 1
)

// Enum value maps for InBattleMechanicusConfirmCardNotify_CmdId.
var (
	InBattleMechanicusConfirmCardNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5348: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	InBattleMechanicusConfirmCardNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5348,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x InBattleMechanicusConfirmCardNotify_CmdId) Enum() *InBattleMechanicusConfirmCardNotify_CmdId {
	p := new(InBattleMechanicusConfirmCardNotify_CmdId)
	*p = x
	return p
}

func (x InBattleMechanicusConfirmCardNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InBattleMechanicusConfirmCardNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[16].Descriptor()
}

func (InBattleMechanicusConfirmCardNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[16]
}

func (x InBattleMechanicusConfirmCardNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InBattleMechanicusConfirmCardNotify_CmdId.Descriptor instead.
func (InBattleMechanicusConfirmCardNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{22, 0}
}

type InBattleMechanicusCardResultNotify_CmdId int32

const (
	InBattleMechanicusCardResultNotify_NONE             InBattleMechanicusCardResultNotify_CmdId = 0
	InBattleMechanicusCardResultNotify_CMD_ID           InBattleMechanicusCardResultNotify_CmdId = 5397
	InBattleMechanicusCardResultNotify_ENET_CHANNEL_ID  InBattleMechanicusCardResultNotify_CmdId = 0
	InBattleMechanicusCardResultNotify_ENET_IS_RELIABLE InBattleMechanicusCardResultNotify_CmdId = 1
)

// Enum value maps for InBattleMechanicusCardResultNotify_CmdId.
var (
	InBattleMechanicusCardResultNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5397: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	InBattleMechanicusCardResultNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5397,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x InBattleMechanicusCardResultNotify_CmdId) Enum() *InBattleMechanicusCardResultNotify_CmdId {
	p := new(InBattleMechanicusCardResultNotify_CmdId)
	*p = x
	return p
}

func (x InBattleMechanicusCardResultNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InBattleMechanicusCardResultNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[17].Descriptor()
}

func (InBattleMechanicusCardResultNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[17]
}

func (x InBattleMechanicusCardResultNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InBattleMechanicusCardResultNotify_CmdId.Descriptor instead.
func (InBattleMechanicusCardResultNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{23, 0}
}

type MultistagePlayFinishStageRsp_CmdId int32

const (
	MultistagePlayFinishStageRsp_NONE             MultistagePlayFinishStageRsp_CmdId = 0
	MultistagePlayFinishStageRsp_CMD_ID           MultistagePlayFinishStageRsp_CmdId = 5381
	MultistagePlayFinishStageRsp_ENET_CHANNEL_ID  MultistagePlayFinishStageRsp_CmdId = 0
	MultistagePlayFinishStageRsp_ENET_IS_RELIABLE MultistagePlayFinishStageRsp_CmdId = 1
)

// Enum value maps for MultistagePlayFinishStageRsp_CmdId.
var (
	MultistagePlayFinishStageRsp_CmdId_name = map[int32]string{
		0:    "NONE",
		5381: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	MultistagePlayFinishStageRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5381,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x MultistagePlayFinishStageRsp_CmdId) Enum() *MultistagePlayFinishStageRsp_CmdId {
	p := new(MultistagePlayFinishStageRsp_CmdId)
	*p = x
	return p
}

func (x MultistagePlayFinishStageRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultistagePlayFinishStageRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[18].Descriptor()
}

func (MultistagePlayFinishStageRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[18]
}

func (x MultistagePlayFinishStageRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultistagePlayFinishStageRsp_CmdId.Descriptor instead.
func (MultistagePlayFinishStageRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{24, 0}
}

type InBattleMechanicusSettleNotify_CmdId int32

const (
	InBattleMechanicusSettleNotify_NONE             InBattleMechanicusSettleNotify_CmdId = 0
	InBattleMechanicusSettleNotify_CMD_ID           InBattleMechanicusSettleNotify_CmdId = 5305
	InBattleMechanicusSettleNotify_ENET_CHANNEL_ID  InBattleMechanicusSettleNotify_CmdId = 0
	InBattleMechanicusSettleNotify_ENET_IS_RELIABLE InBattleMechanicusSettleNotify_CmdId = 1
)

// Enum value maps for InBattleMechanicusSettleNotify_CmdId.
var (
	InBattleMechanicusSettleNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5305: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	InBattleMechanicusSettleNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5305,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x InBattleMechanicusSettleNotify_CmdId) Enum() *InBattleMechanicusSettleNotify_CmdId {
	p := new(InBattleMechanicusSettleNotify_CmdId)
	*p = x
	return p
}

func (x InBattleMechanicusSettleNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InBattleMechanicusSettleNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[19].Descriptor()
}

func (InBattleMechanicusSettleNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[19]
}

func (x InBattleMechanicusSettleNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InBattleMechanicusSettleNotify_CmdId.Descriptor instead.
func (InBattleMechanicusSettleNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{26, 0}
}

type MultistagePlaySettleNotify_CmdId int32

const (
	MultistagePlaySettleNotify_NONE             MultistagePlaySettleNotify_CmdId = 0
	MultistagePlaySettleNotify_CMD_ID           MultistagePlaySettleNotify_CmdId = 5313
	MultistagePlaySettleNotify_ENET_CHANNEL_ID  MultistagePlaySettleNotify_CmdId = 0
	MultistagePlaySettleNotify_ENET_IS_RELIABLE MultistagePlaySettleNotify_CmdId = 1
)

// Enum value maps for MultistagePlaySettleNotify_CmdId.
var (
	MultistagePlaySettleNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5313: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	MultistagePlaySettleNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5313,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x MultistagePlaySettleNotify_CmdId) Enum() *MultistagePlaySettleNotify_CmdId {
	p := new(MultistagePlaySettleNotify_CmdId)
	*p = x
	return p
}

func (x MultistagePlaySettleNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultistagePlaySettleNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[20].Descriptor()
}

func (MultistagePlaySettleNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[20]
}

func (x MultistagePlaySettleNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultistagePlaySettleNotify_CmdId.Descriptor instead.
func (MultistagePlaySettleNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{28, 0}
}

type MultistagePlayStageEndNotify_CmdId int32

const (
	MultistagePlayStageEndNotify_NONE             MultistagePlayStageEndNotify_CmdId = 0
	MultistagePlayStageEndNotify_CMD_ID           MultistagePlayStageEndNotify_CmdId = 5379
	MultistagePlayStageEndNotify_ENET_CHANNEL_ID  MultistagePlayStageEndNotify_CmdId = 0
	MultistagePlayStageEndNotify_ENET_IS_RELIABLE MultistagePlayStageEndNotify_CmdId = 1
)

// Enum value maps for MultistagePlayStageEndNotify_CmdId.
var (
	MultistagePlayStageEndNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5379: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	MultistagePlayStageEndNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5379,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x MultistagePlayStageEndNotify_CmdId) Enum() *MultistagePlayStageEndNotify_CmdId {
	p := new(MultistagePlayStageEndNotify_CmdId)
	*p = x
	return p
}

func (x MultistagePlayStageEndNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultistagePlayStageEndNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[21].Descriptor()
}

func (MultistagePlayStageEndNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[21]
}

func (x MultistagePlayStageEndNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultistagePlayStageEndNotify_CmdId.Descriptor instead.
func (MultistagePlayStageEndNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{29, 0}
}

type MultistagePlayEndNotify_CmdId int32

const (
	MultistagePlayEndNotify_NONE             MultistagePlayEndNotify_CmdId = 0
	MultistagePlayEndNotify_CMD_ID           MultistagePlayEndNotify_CmdId = 5355
	MultistagePlayEndNotify_ENET_CHANNEL_ID  MultistagePlayEndNotify_CmdId = 0
	MultistagePlayEndNotify_ENET_IS_RELIABLE MultistagePlayEndNotify_CmdId = 1
)

// Enum value maps for MultistagePlayEndNotify_CmdId.
var (
	MultistagePlayEndNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5355: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	MultistagePlayEndNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5355,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x MultistagePlayEndNotify_CmdId) Enum() *MultistagePlayEndNotify_CmdId {
	p := new(MultistagePlayEndNotify_CmdId)
	*p = x
	return p
}

func (x MultistagePlayEndNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultistagePlayEndNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[22].Descriptor()
}

func (MultistagePlayEndNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[22]
}

func (x MultistagePlayEndNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultistagePlayEndNotify_CmdId.Descriptor instead.
func (MultistagePlayEndNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{30, 0}
}

type FleurFairBuffEnergyNotify_CmdId int32

const (
	FleurFairBuffEnergyNotify_NONE             FleurFairBuffEnergyNotify_CmdId = 0
	FleurFairBuffEnergyNotify_CMD_ID           FleurFairBuffEnergyNotify_CmdId = 5324
	FleurFairBuffEnergyNotify_ENET_CHANNEL_ID  FleurFairBuffEnergyNotify_CmdId = 0
	FleurFairBuffEnergyNotify_ENET_IS_RELIABLE FleurFairBuffEnergyNotify_CmdId = 1
)

// Enum value maps for FleurFairBuffEnergyNotify_CmdId.
var (
	FleurFairBuffEnergyNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5324: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	FleurFairBuffEnergyNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5324,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x FleurFairBuffEnergyNotify_CmdId) Enum() *FleurFairBuffEnergyNotify_CmdId {
	p := new(FleurFairBuffEnergyNotify_CmdId)
	*p = x
	return p
}

func (x FleurFairBuffEnergyNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FleurFairBuffEnergyNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[23].Descriptor()
}

func (FleurFairBuffEnergyNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[23]
}

func (x FleurFairBuffEnergyNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FleurFairBuffEnergyNotify_CmdId.Descriptor instead.
func (FleurFairBuffEnergyNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{31, 0}
}

type FleurFairStageSettleNotify_CmdId int32

const (
	FleurFairStageSettleNotify_NONE             FleurFairStageSettleNotify_CmdId = 0
	FleurFairStageSettleNotify_CMD_ID           FleurFairStageSettleNotify_CmdId = 5356
	FleurFairStageSettleNotify_ENET_CHANNEL_ID  FleurFairStageSettleNotify_CmdId = 0
	FleurFairStageSettleNotify_ENET_IS_RELIABLE FleurFairStageSettleNotify_CmdId = 1
)

// Enum value maps for FleurFairStageSettleNotify_CmdId.
var (
	FleurFairStageSettleNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5356: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	FleurFairStageSettleNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5356,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x FleurFairStageSettleNotify_CmdId) Enum() *FleurFairStageSettleNotify_CmdId {
	p := new(FleurFairStageSettleNotify_CmdId)
	*p = x
	return p
}

func (x FleurFairStageSettleNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FleurFairStageSettleNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[24].Descriptor()
}

func (FleurFairStageSettleNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[24]
}

func (x FleurFairStageSettleNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FleurFairStageSettleNotify_CmdId.Descriptor instead.
func (FleurFairStageSettleNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{35, 0}
}

type FleurFairFinishGalleryStageNotify_CmdId int32

const (
	FleurFairFinishGalleryStageNotify_NONE             FleurFairFinishGalleryStageNotify_CmdId = 0
	FleurFairFinishGalleryStageNotify_CMD_ID           FleurFairFinishGalleryStageNotify_CmdId = 5342
	FleurFairFinishGalleryStageNotify_ENET_CHANNEL_ID  FleurFairFinishGalleryStageNotify_CmdId = 0
	FleurFairFinishGalleryStageNotify_ENET_IS_RELIABLE FleurFairFinishGalleryStageNotify_CmdId = 1
)

// Enum value maps for FleurFairFinishGalleryStageNotify_CmdId.
var (
	FleurFairFinishGalleryStageNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5342: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	FleurFairFinishGalleryStageNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5342,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x FleurFairFinishGalleryStageNotify_CmdId) Enum() *FleurFairFinishGalleryStageNotify_CmdId {
	p := new(FleurFairFinishGalleryStageNotify_CmdId)
	*p = x
	return p
}

func (x FleurFairFinishGalleryStageNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FleurFairFinishGalleryStageNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[25].Descriptor()
}

func (FleurFairFinishGalleryStageNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[25]
}

func (x FleurFairFinishGalleryStageNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FleurFairFinishGalleryStageNotify_CmdId.Descriptor instead.
func (FleurFairFinishGalleryStageNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{36, 0}
}

type HideAndSeekSelectAvatarReq_CmdId int32

const (
	HideAndSeekSelectAvatarReq_NONE             HideAndSeekSelectAvatarReq_CmdId = 0
	HideAndSeekSelectAvatarReq_CMD_ID           HideAndSeekSelectAvatarReq_CmdId = 5330
	HideAndSeekSelectAvatarReq_ENET_CHANNEL_ID  HideAndSeekSelectAvatarReq_CmdId = 0
	HideAndSeekSelectAvatarReq_ENET_IS_RELIABLE HideAndSeekSelectAvatarReq_CmdId = 1
	HideAndSeekSelectAvatarReq_IS_ALLOW_CLIENT  HideAndSeekSelectAvatarReq_CmdId = 1
)

// Enum value maps for HideAndSeekSelectAvatarReq_CmdId.
var (
	HideAndSeekSelectAvatarReq_CmdId_name = map[int32]string{
		0:    "NONE",
		5330: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	HideAndSeekSelectAvatarReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5330,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x HideAndSeekSelectAvatarReq_CmdId) Enum() *HideAndSeekSelectAvatarReq_CmdId {
	p := new(HideAndSeekSelectAvatarReq_CmdId)
	*p = x
	return p
}

func (x HideAndSeekSelectAvatarReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HideAndSeekSelectAvatarReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[26].Descriptor()
}

func (HideAndSeekSelectAvatarReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[26]
}

func (x HideAndSeekSelectAvatarReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HideAndSeekSelectAvatarReq_CmdId.Descriptor instead.
func (HideAndSeekSelectAvatarReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{39, 0}
}

type HideAndSeekSelectAvatarRsp_CmdId int32

const (
	HideAndSeekSelectAvatarRsp_NONE             HideAndSeekSelectAvatarRsp_CmdId = 0
	HideAndSeekSelectAvatarRsp_CMD_ID           HideAndSeekSelectAvatarRsp_CmdId = 5367
	HideAndSeekSelectAvatarRsp_ENET_CHANNEL_ID  HideAndSeekSelectAvatarRsp_CmdId = 0
	HideAndSeekSelectAvatarRsp_ENET_IS_RELIABLE HideAndSeekSelectAvatarRsp_CmdId = 1
)

// Enum value maps for HideAndSeekSelectAvatarRsp_CmdId.
var (
	HideAndSeekSelectAvatarRsp_CmdId_name = map[int32]string{
		0:    "NONE",
		5367: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	HideAndSeekSelectAvatarRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5367,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x HideAndSeekSelectAvatarRsp_CmdId) Enum() *HideAndSeekSelectAvatarRsp_CmdId {
	p := new(HideAndSeekSelectAvatarRsp_CmdId)
	*p = x
	return p
}

func (x HideAndSeekSelectAvatarRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HideAndSeekSelectAvatarRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[27].Descriptor()
}

func (HideAndSeekSelectAvatarRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[27]
}

func (x HideAndSeekSelectAvatarRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HideAndSeekSelectAvatarRsp_CmdId.Descriptor instead.
func (HideAndSeekSelectAvatarRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{40, 0}
}

type HideAndSeekSetReadyReq_CmdId int32

const (
	HideAndSeekSetReadyReq_NONE             HideAndSeekSetReadyReq_CmdId = 0
	HideAndSeekSetReadyReq_CMD_ID           HideAndSeekSetReadyReq_CmdId = 5358
	HideAndSeekSetReadyReq_ENET_CHANNEL_ID  HideAndSeekSetReadyReq_CmdId = 0
	HideAndSeekSetReadyReq_ENET_IS_RELIABLE HideAndSeekSetReadyReq_CmdId = 1
	HideAndSeekSetReadyReq_IS_ALLOW_CLIENT  HideAndSeekSetReadyReq_CmdId = 1
)

// Enum value maps for HideAndSeekSetReadyReq_CmdId.
var (
	HideAndSeekSetReadyReq_CmdId_name = map[int32]string{
		0:    "NONE",
		5358: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	HideAndSeekSetReadyReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5358,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x HideAndSeekSetReadyReq_CmdId) Enum() *HideAndSeekSetReadyReq_CmdId {
	p := new(HideAndSeekSetReadyReq_CmdId)
	*p = x
	return p
}

func (x HideAndSeekSetReadyReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HideAndSeekSetReadyReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[28].Descriptor()
}

func (HideAndSeekSetReadyReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[28]
}

func (x HideAndSeekSetReadyReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HideAndSeekSetReadyReq_CmdId.Descriptor instead.
func (HideAndSeekSetReadyReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{41, 0}
}

type HideAndSeekSetReadyRsp_CmdId int32

const (
	HideAndSeekSetReadyRsp_NONE             HideAndSeekSetReadyRsp_CmdId = 0
	HideAndSeekSetReadyRsp_CMD_ID           HideAndSeekSetReadyRsp_CmdId = 5370
	HideAndSeekSetReadyRsp_ENET_CHANNEL_ID  HideAndSeekSetReadyRsp_CmdId = 0
	HideAndSeekSetReadyRsp_ENET_IS_RELIABLE HideAndSeekSetReadyRsp_CmdId = 1
)

// Enum value maps for HideAndSeekSetReadyRsp_CmdId.
var (
	HideAndSeekSetReadyRsp_CmdId_name = map[int32]string{
		0:    "NONE",
		5370: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	HideAndSeekSetReadyRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5370,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x HideAndSeekSetReadyRsp_CmdId) Enum() *HideAndSeekSetReadyRsp_CmdId {
	p := new(HideAndSeekSetReadyRsp_CmdId)
	*p = x
	return p
}

func (x HideAndSeekSetReadyRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HideAndSeekSetReadyRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[29].Descriptor()
}

func (HideAndSeekSetReadyRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[29]
}

func (x HideAndSeekSetReadyRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HideAndSeekSetReadyRsp_CmdId.Descriptor instead.
func (HideAndSeekSetReadyRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{42, 0}
}

type HideAndSeekSettleNotify_CmdId int32

const (
	HideAndSeekSettleNotify_NONE             HideAndSeekSettleNotify_CmdId = 0
	HideAndSeekSettleNotify_CMD_ID           HideAndSeekSettleNotify_CmdId = 5317
	HideAndSeekSettleNotify_ENET_CHANNEL_ID  HideAndSeekSettleNotify_CmdId = 0
	HideAndSeekSettleNotify_ENET_IS_RELIABLE HideAndSeekSettleNotify_CmdId = 1
)

// Enum value maps for HideAndSeekSettleNotify_CmdId.
var (
	HideAndSeekSettleNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5317: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	HideAndSeekSettleNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5317,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x HideAndSeekSettleNotify_CmdId) Enum() *HideAndSeekSettleNotify_CmdId {
	p := new(HideAndSeekSettleNotify_CmdId)
	*p = x
	return p
}

func (x HideAndSeekSettleNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HideAndSeekSettleNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[30].Descriptor()
}

func (HideAndSeekSettleNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[30]
}

func (x HideAndSeekSettleNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HideAndSeekSettleNotify_CmdId.Descriptor instead.
func (HideAndSeekSettleNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{44, 0}
}

type HideAndSeekSettleNotify_SettleReason int32

const (
	HideAndSeekSettleNotify_SETTLE_REASON_TIME_OUT HideAndSeekSettleNotify_SettleReason = 0
	HideAndSeekSettleNotify_SETTLE_PLAY_END        HideAndSeekSettleNotify_SettleReason = 1
	HideAndSeekSettleNotify_SETTLE_PLAYER_QUIT     HideAndSeekSettleNotify_SettleReason = 2
)

// Enum value maps for HideAndSeekSettleNotify_SettleReason.
var (
	HideAndSeekSettleNotify_SettleReason_name = map[int32]string{
		0: "SETTLE_REASON_TIME_OUT",
		1: "SETTLE_PLAY_END",
		2: "SETTLE_PLAYER_QUIT",
	}
	HideAndSeekSettleNotify_SettleReason_value = map[string]int32{
		"SETTLE_REASON_TIME_OUT": 0,
		"SETTLE_PLAY_END":        1,
		"SETTLE_PLAYER_QUIT":     2,
	}
)

func (x HideAndSeekSettleNotify_SettleReason) Enum() *HideAndSeekSettleNotify_SettleReason {
	p := new(HideAndSeekSettleNotify_SettleReason)
	*p = x
	return p
}

func (x HideAndSeekSettleNotify_SettleReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HideAndSeekSettleNotify_SettleReason) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[31].Descriptor()
}

func (HideAndSeekSettleNotify_SettleReason) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[31]
}

func (x HideAndSeekSettleNotify_SettleReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HideAndSeekSettleNotify_SettleReason.Descriptor instead.
func (HideAndSeekSettleNotify_SettleReason) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{44, 1}
}

type HideAndSeekPlayerReadyNotify_CmdId int32

const (
	HideAndSeekPlayerReadyNotify_NONE             HideAndSeekPlayerReadyNotify_CmdId = 0
	HideAndSeekPlayerReadyNotify_CMD_ID           HideAndSeekPlayerReadyNotify_CmdId = 5302
	HideAndSeekPlayerReadyNotify_ENET_CHANNEL_ID  HideAndSeekPlayerReadyNotify_CmdId = 0
	HideAndSeekPlayerReadyNotify_ENET_IS_RELIABLE HideAndSeekPlayerReadyNotify_CmdId = 1
)

// Enum value maps for HideAndSeekPlayerReadyNotify_CmdId.
var (
	HideAndSeekPlayerReadyNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5302: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	HideAndSeekPlayerReadyNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5302,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x HideAndSeekPlayerReadyNotify_CmdId) Enum() *HideAndSeekPlayerReadyNotify_CmdId {
	p := new(HideAndSeekPlayerReadyNotify_CmdId)
	*p = x
	return p
}

func (x HideAndSeekPlayerReadyNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HideAndSeekPlayerReadyNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[32].Descriptor()
}

func (HideAndSeekPlayerReadyNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[32]
}

func (x HideAndSeekPlayerReadyNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HideAndSeekPlayerReadyNotify_CmdId.Descriptor instead.
func (HideAndSeekPlayerReadyNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{45, 0}
}

type HideAndSeekPlayerSetAvatarNotify_CmdId int32

const (
	HideAndSeekPlayerSetAvatarNotify_NONE             HideAndSeekPlayerSetAvatarNotify_CmdId = 0
	HideAndSeekPlayerSetAvatarNotify_CMD_ID           HideAndSeekPlayerSetAvatarNotify_CmdId = 5319
	HideAndSeekPlayerSetAvatarNotify_ENET_CHANNEL_ID  HideAndSeekPlayerSetAvatarNotify_CmdId = 0
	HideAndSeekPlayerSetAvatarNotify_ENET_IS_RELIABLE HideAndSeekPlayerSetAvatarNotify_CmdId = 1
)

// Enum value maps for HideAndSeekPlayerSetAvatarNotify_CmdId.
var (
	HideAndSeekPlayerSetAvatarNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5319: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	HideAndSeekPlayerSetAvatarNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5319,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x HideAndSeekPlayerSetAvatarNotify_CmdId) Enum() *HideAndSeekPlayerSetAvatarNotify_CmdId {
	p := new(HideAndSeekPlayerSetAvatarNotify_CmdId)
	*p = x
	return p
}

func (x HideAndSeekPlayerSetAvatarNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HideAndSeekPlayerSetAvatarNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[33].Descriptor()
}

func (HideAndSeekPlayerSetAvatarNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[33]
}

func (x HideAndSeekPlayerSetAvatarNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HideAndSeekPlayerSetAvatarNotify_CmdId.Descriptor instead.
func (HideAndSeekPlayerSetAvatarNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{46, 0}
}

type ChessPickCardReq_CmdId int32

const (
	ChessPickCardReq_NONE             ChessPickCardReq_CmdId = 0
	ChessPickCardReq_CMD_ID           ChessPickCardReq_CmdId = 5333
	ChessPickCardReq_ENET_CHANNEL_ID  ChessPickCardReq_CmdId = 0
	ChessPickCardReq_ENET_IS_RELIABLE ChessPickCardReq_CmdId = 1
	ChessPickCardReq_IS_ALLOW_CLIENT  ChessPickCardReq_CmdId = 1
)

// Enum value maps for ChessPickCardReq_CmdId.
var (
	ChessPickCardReq_CmdId_name = map[int32]string{
		0:    "NONE",
		5333: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	ChessPickCardReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5333,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x ChessPickCardReq_CmdId) Enum() *ChessPickCardReq_CmdId {
	p := new(ChessPickCardReq_CmdId)
	*p = x
	return p
}

func (x ChessPickCardReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChessPickCardReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[34].Descriptor()
}

func (ChessPickCardReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[34]
}

func (x ChessPickCardReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChessPickCardReq_CmdId.Descriptor instead.
func (ChessPickCardReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{56, 0}
}

type ChessPickCardRsp_CmdId int32

const (
	ChessPickCardRsp_NONE             ChessPickCardRsp_CmdId = 0
	ChessPickCardRsp_CMD_ID           ChessPickCardRsp_CmdId = 5384
	ChessPickCardRsp_ENET_CHANNEL_ID  ChessPickCardRsp_CmdId = 0
	ChessPickCardRsp_ENET_IS_RELIABLE ChessPickCardRsp_CmdId = 1
)

// Enum value maps for ChessPickCardRsp_CmdId.
var (
	ChessPickCardRsp_CmdId_name = map[int32]string{
		0:    "NONE",
		5384: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	ChessPickCardRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5384,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x ChessPickCardRsp_CmdId) Enum() *ChessPickCardRsp_CmdId {
	p := new(ChessPickCardRsp_CmdId)
	*p = x
	return p
}

func (x ChessPickCardRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChessPickCardRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[35].Descriptor()
}

func (ChessPickCardRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[35]
}

func (x ChessPickCardRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChessPickCardRsp_CmdId.Descriptor instead.
func (ChessPickCardRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{57, 0}
}

type ChessPickCardNotify_CmdId int32

const (
	ChessPickCardNotify_NONE             ChessPickCardNotify_CmdId = 0
	ChessPickCardNotify_CMD_ID           ChessPickCardNotify_CmdId = 5380
	ChessPickCardNotify_ENET_CHANNEL_ID  ChessPickCardNotify_CmdId = 0
	ChessPickCardNotify_ENET_IS_RELIABLE ChessPickCardNotify_CmdId = 1
)

// Enum value maps for ChessPickCardNotify_CmdId.
var (
	ChessPickCardNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5380: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	ChessPickCardNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5380,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x ChessPickCardNotify_CmdId) Enum() *ChessPickCardNotify_CmdId {
	p := new(ChessPickCardNotify_CmdId)
	*p = x
	return p
}

func (x ChessPickCardNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChessPickCardNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[36].Descriptor()
}

func (ChessPickCardNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[36]
}

func (x ChessPickCardNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChessPickCardNotify_CmdId.Descriptor instead.
func (ChessPickCardNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{58, 0}
}

type ChessManualRefreshCardsReq_CmdId int32

const (
	ChessManualRefreshCardsReq_NONE             ChessManualRefreshCardsReq_CmdId = 0
	ChessManualRefreshCardsReq_CMD_ID           ChessManualRefreshCardsReq_CmdId = 5389
	ChessManualRefreshCardsReq_ENET_CHANNEL_ID  ChessManualRefreshCardsReq_CmdId = 0
	ChessManualRefreshCardsReq_ENET_IS_RELIABLE ChessManualRefreshCardsReq_CmdId = 1
	ChessManualRefreshCardsReq_IS_ALLOW_CLIENT  ChessManualRefreshCardsReq_CmdId = 1
)

// Enum value maps for ChessManualRefreshCardsReq_CmdId.
var (
	ChessManualRefreshCardsReq_CmdId_name = map[int32]string{
		0:    "NONE",
		5389: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	ChessManualRefreshCardsReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5389,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x ChessManualRefreshCardsReq_CmdId) Enum() *ChessManualRefreshCardsReq_CmdId {
	p := new(ChessManualRefreshCardsReq_CmdId)
	*p = x
	return p
}

func (x ChessManualRefreshCardsReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChessManualRefreshCardsReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[37].Descriptor()
}

func (ChessManualRefreshCardsReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[37]
}

func (x ChessManualRefreshCardsReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChessManualRefreshCardsReq_CmdId.Descriptor instead.
func (ChessManualRefreshCardsReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{59, 0}
}

type ChessManualRefreshCardsRsp_CmdId int32

const (
	ChessManualRefreshCardsRsp_NONE             ChessManualRefreshCardsRsp_CmdId = 0
	ChessManualRefreshCardsRsp_CMD_ID           ChessManualRefreshCardsRsp_CmdId = 5359
	ChessManualRefreshCardsRsp_ENET_CHANNEL_ID  ChessManualRefreshCardsRsp_CmdId = 0
	ChessManualRefreshCardsRsp_ENET_IS_RELIABLE ChessManualRefreshCardsRsp_CmdId = 1
)

// Enum value maps for ChessManualRefreshCardsRsp_CmdId.
var (
	ChessManualRefreshCardsRsp_CmdId_name = map[int32]string{
		0:    "NONE",
		5359: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	ChessManualRefreshCardsRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5359,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x ChessManualRefreshCardsRsp_CmdId) Enum() *ChessManualRefreshCardsRsp_CmdId {
	p := new(ChessManualRefreshCardsRsp_CmdId)
	*p = x
	return p
}

func (x ChessManualRefreshCardsRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChessManualRefreshCardsRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[38].Descriptor()
}

func (ChessManualRefreshCardsRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[38]
}

func (x ChessManualRefreshCardsRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChessManualRefreshCardsRsp_CmdId.Descriptor instead.
func (ChessManualRefreshCardsRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{60, 0}
}

type ChessPlayerInfoNotify_CmdId int32

const (
	ChessPlayerInfoNotify_NONE             ChessPlayerInfoNotify_CmdId = 0
	ChessPlayerInfoNotify_CMD_ID           ChessPlayerInfoNotify_CmdId = 5332
	ChessPlayerInfoNotify_ENET_CHANNEL_ID  ChessPlayerInfoNotify_CmdId = 0
	ChessPlayerInfoNotify_ENET_IS_RELIABLE ChessPlayerInfoNotify_CmdId = 1
)

// Enum value maps for ChessPlayerInfoNotify_CmdId.
var (
	ChessPlayerInfoNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5332: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	ChessPlayerInfoNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5332,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x ChessPlayerInfoNotify_CmdId) Enum() *ChessPlayerInfoNotify_CmdId {
	p := new(ChessPlayerInfoNotify_CmdId)
	*p = x
	return p
}

func (x ChessPlayerInfoNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChessPlayerInfoNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[39].Descriptor()
}

func (ChessPlayerInfoNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[39]
}

func (x ChessPlayerInfoNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChessPlayerInfoNotify_CmdId.Descriptor instead.
func (ChessPlayerInfoNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{61, 0}
}

type ChessLeftMonstersNotify_CmdId int32

const (
	ChessLeftMonstersNotify_NONE             ChessLeftMonstersNotify_CmdId = 0
	ChessLeftMonstersNotify_CMD_ID           ChessLeftMonstersNotify_CmdId = 5360
	ChessLeftMonstersNotify_ENET_CHANNEL_ID  ChessLeftMonstersNotify_CmdId = 0
	ChessLeftMonstersNotify_ENET_IS_RELIABLE ChessLeftMonstersNotify_CmdId = 1
)

// Enum value maps for ChessLeftMonstersNotify_CmdId.
var (
	ChessLeftMonstersNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5360: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	ChessLeftMonstersNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5360,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x ChessLeftMonstersNotify_CmdId) Enum() *ChessLeftMonstersNotify_CmdId {
	p := new(ChessLeftMonstersNotify_CmdId)
	*p = x
	return p
}

func (x ChessLeftMonstersNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChessLeftMonstersNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[40].Descriptor()
}

func (ChessLeftMonstersNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[40]
}

func (x ChessLeftMonstersNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChessLeftMonstersNotify_CmdId.Descriptor instead.
func (ChessLeftMonstersNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{62, 0}
}

type ChessEscapedMonstersNotify_CmdId int32

const (
	ChessEscapedMonstersNotify_NONE             ChessEscapedMonstersNotify_CmdId = 0
	ChessEscapedMonstersNotify_CMD_ID           ChessEscapedMonstersNotify_CmdId = 5314
	ChessEscapedMonstersNotify_ENET_CHANNEL_ID  ChessEscapedMonstersNotify_CmdId = 0
	ChessEscapedMonstersNotify_ENET_IS_RELIABLE ChessEscapedMonstersNotify_CmdId = 1
)

// Enum value maps for ChessEscapedMonstersNotify_CmdId.
var (
	ChessEscapedMonstersNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5314: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	ChessEscapedMonstersNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5314,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x ChessEscapedMonstersNotify_CmdId) Enum() *ChessEscapedMonstersNotify_CmdId {
	p := new(ChessEscapedMonstersNotify_CmdId)
	*p = x
	return p
}

func (x ChessEscapedMonstersNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChessEscapedMonstersNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[41].Descriptor()
}

func (ChessEscapedMonstersNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[41]
}

func (x ChessEscapedMonstersNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChessEscapedMonstersNotify_CmdId.Descriptor instead.
func (ChessEscapedMonstersNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{63, 0}
}

type ChessSelectedCardsNotify_CmdId int32

const (
	ChessSelectedCardsNotify_NONE             ChessSelectedCardsNotify_CmdId = 0
	ChessSelectedCardsNotify_CMD_ID           ChessSelectedCardsNotify_CmdId = 5392
	ChessSelectedCardsNotify_ENET_CHANNEL_ID  ChessSelectedCardsNotify_CmdId = 0
	ChessSelectedCardsNotify_ENET_IS_RELIABLE ChessSelectedCardsNotify_CmdId = 1
)

// Enum value maps for ChessSelectedCardsNotify_CmdId.
var (
	ChessSelectedCardsNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5392: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	ChessSelectedCardsNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5392,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x ChessSelectedCardsNotify_CmdId) Enum() *ChessSelectedCardsNotify_CmdId {
	p := new(ChessSelectedCardsNotify_CmdId)
	*p = x
	return p
}

func (x ChessSelectedCardsNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChessSelectedCardsNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[42].Descriptor()
}

func (ChessSelectedCardsNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[42]
}

func (x ChessSelectedCardsNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChessSelectedCardsNotify_CmdId.Descriptor instead.
func (ChessSelectedCardsNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{64, 0}
}

type GlobalBuildingInfoNotify_CmdId int32

const (
	GlobalBuildingInfoNotify_NONE             GlobalBuildingInfoNotify_CmdId = 0
	GlobalBuildingInfoNotify_CMD_ID           GlobalBuildingInfoNotify_CmdId = 5320
	GlobalBuildingInfoNotify_ENET_CHANNEL_ID  GlobalBuildingInfoNotify_CmdId = 0
	GlobalBuildingInfoNotify_ENET_IS_RELIABLE GlobalBuildingInfoNotify_CmdId = 1
)

// Enum value maps for GlobalBuildingInfoNotify_CmdId.
var (
	GlobalBuildingInfoNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5320: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	GlobalBuildingInfoNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5320,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x GlobalBuildingInfoNotify_CmdId) Enum() *GlobalBuildingInfoNotify_CmdId {
	p := new(GlobalBuildingInfoNotify_CmdId)
	*p = x
	return p
}

func (x GlobalBuildingInfoNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GlobalBuildingInfoNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[43].Descriptor()
}

func (GlobalBuildingInfoNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[43]
}

func (x GlobalBuildingInfoNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GlobalBuildingInfoNotify_CmdId.Descriptor instead.
func (GlobalBuildingInfoNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{65, 0}
}

type IrodoriChessPlayerInfoNotify_CmdId int32

const (
	IrodoriChessPlayerInfoNotify_NONE             IrodoriChessPlayerInfoNotify_CmdId = 0
	IrodoriChessPlayerInfoNotify_CMD_ID           IrodoriChessPlayerInfoNotify_CmdId = 5364
	IrodoriChessPlayerInfoNotify_ENET_CHANNEL_ID  IrodoriChessPlayerInfoNotify_CmdId = 0
	IrodoriChessPlayerInfoNotify_ENET_IS_RELIABLE IrodoriChessPlayerInfoNotify_CmdId = 1
)

// Enum value maps for IrodoriChessPlayerInfoNotify_CmdId.
var (
	IrodoriChessPlayerInfoNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5364: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	IrodoriChessPlayerInfoNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5364,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x IrodoriChessPlayerInfoNotify_CmdId) Enum() *IrodoriChessPlayerInfoNotify_CmdId {
	p := new(IrodoriChessPlayerInfoNotify_CmdId)
	*p = x
	return p
}

func (x IrodoriChessPlayerInfoNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IrodoriChessPlayerInfoNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[44].Descriptor()
}

func (IrodoriChessPlayerInfoNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[44]
}

func (x IrodoriChessPlayerInfoNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IrodoriChessPlayerInfoNotify_CmdId.Descriptor instead.
func (IrodoriChessPlayerInfoNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{73, 0}
}

type IrodoriChessLeftMonsterNotify_CmdId int32

const (
	IrodoriChessLeftMonsterNotify_NONE             IrodoriChessLeftMonsterNotify_CmdId = 0
	IrodoriChessLeftMonsterNotify_CMD_ID           IrodoriChessLeftMonsterNotify_CmdId = 5338
	IrodoriChessLeftMonsterNotify_ENET_CHANNEL_ID  IrodoriChessLeftMonsterNotify_CmdId = 0
	IrodoriChessLeftMonsterNotify_ENET_IS_RELIABLE IrodoriChessLeftMonsterNotify_CmdId = 1
)

// Enum value maps for IrodoriChessLeftMonsterNotify_CmdId.
var (
	IrodoriChessLeftMonsterNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5338: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	IrodoriChessLeftMonsterNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5338,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x IrodoriChessLeftMonsterNotify_CmdId) Enum() *IrodoriChessLeftMonsterNotify_CmdId {
	p := new(IrodoriChessLeftMonsterNotify_CmdId)
	*p = x
	return p
}

func (x IrodoriChessLeftMonsterNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IrodoriChessLeftMonsterNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[45].Descriptor()
}

func (IrodoriChessLeftMonsterNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[45]
}

func (x IrodoriChessLeftMonsterNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IrodoriChessLeftMonsterNotify_CmdId.Descriptor instead.
func (IrodoriChessLeftMonsterNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{74, 0}
}

type BrickBreakerPlayerReadyNotify_CmdId int32

const (
	BrickBreakerPlayerReadyNotify_NONE             BrickBreakerPlayerReadyNotify_CmdId = 0
	BrickBreakerPlayerReadyNotify_CMD_ID           BrickBreakerPlayerReadyNotify_CmdId = 5345
	BrickBreakerPlayerReadyNotify_ENET_CHANNEL_ID  BrickBreakerPlayerReadyNotify_CmdId = 0
	BrickBreakerPlayerReadyNotify_ENET_IS_RELIABLE BrickBreakerPlayerReadyNotify_CmdId = 1
)

// Enum value maps for BrickBreakerPlayerReadyNotify_CmdId.
var (
	BrickBreakerPlayerReadyNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5345: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	BrickBreakerPlayerReadyNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5345,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x BrickBreakerPlayerReadyNotify_CmdId) Enum() *BrickBreakerPlayerReadyNotify_CmdId {
	p := new(BrickBreakerPlayerReadyNotify_CmdId)
	*p = x
	return p
}

func (x BrickBreakerPlayerReadyNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BrickBreakerPlayerReadyNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[46].Descriptor()
}

func (BrickBreakerPlayerReadyNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[46]
}

func (x BrickBreakerPlayerReadyNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BrickBreakerPlayerReadyNotify_CmdId.Descriptor instead.
func (BrickBreakerPlayerReadyNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{76, 0}
}

type BrickBreakerPlayerSetAvatarNotify_CmdId int32

const (
	BrickBreakerPlayerSetAvatarNotify_NONE             BrickBreakerPlayerSetAvatarNotify_CmdId = 0
	BrickBreakerPlayerSetAvatarNotify_CMD_ID           BrickBreakerPlayerSetAvatarNotify_CmdId = 5308
	BrickBreakerPlayerSetAvatarNotify_ENET_CHANNEL_ID  BrickBreakerPlayerSetAvatarNotify_CmdId = 0
	BrickBreakerPlayerSetAvatarNotify_ENET_IS_RELIABLE BrickBreakerPlayerSetAvatarNotify_CmdId = 1
)

// Enum value maps for BrickBreakerPlayerSetAvatarNotify_CmdId.
var (
	BrickBreakerPlayerSetAvatarNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5308: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	BrickBreakerPlayerSetAvatarNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5308,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x BrickBreakerPlayerSetAvatarNotify_CmdId) Enum() *BrickBreakerPlayerSetAvatarNotify_CmdId {
	p := new(BrickBreakerPlayerSetAvatarNotify_CmdId)
	*p = x
	return p
}

func (x BrickBreakerPlayerSetAvatarNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BrickBreakerPlayerSetAvatarNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[47].Descriptor()
}

func (BrickBreakerPlayerSetAvatarNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[47]
}

func (x BrickBreakerPlayerSetAvatarNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BrickBreakerPlayerSetAvatarNotify_CmdId.Descriptor instead.
func (BrickBreakerPlayerSetAvatarNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{77, 0}
}

type BrickBreakerPlayerSetSkillNotify_CmdId int32

const (
	BrickBreakerPlayerSetSkillNotify_NONE             BrickBreakerPlayerSetSkillNotify_CmdId = 0
	BrickBreakerPlayerSetSkillNotify_CMD_ID           BrickBreakerPlayerSetSkillNotify_CmdId = 5309
	BrickBreakerPlayerSetSkillNotify_ENET_CHANNEL_ID  BrickBreakerPlayerSetSkillNotify_CmdId = 0
	BrickBreakerPlayerSetSkillNotify_ENET_IS_RELIABLE BrickBreakerPlayerSetSkillNotify_CmdId = 1
)

// Enum value maps for BrickBreakerPlayerSetSkillNotify_CmdId.
var (
	BrickBreakerPlayerSetSkillNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5309: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	BrickBreakerPlayerSetSkillNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5309,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x BrickBreakerPlayerSetSkillNotify_CmdId) Enum() *BrickBreakerPlayerSetSkillNotify_CmdId {
	p := new(BrickBreakerPlayerSetSkillNotify_CmdId)
	*p = x
	return p
}

func (x BrickBreakerPlayerSetSkillNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BrickBreakerPlayerSetSkillNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[48].Descriptor()
}

func (BrickBreakerPlayerSetSkillNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[48]
}

func (x BrickBreakerPlayerSetSkillNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BrickBreakerPlayerSetSkillNotify_CmdId.Descriptor instead.
func (BrickBreakerPlayerSetSkillNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{78, 0}
}

type BrickBreakerSetReadyReq_CmdId int32

const (
	BrickBreakerSetReadyReq_NONE             BrickBreakerSetReadyReq_CmdId = 0
	BrickBreakerSetReadyReq_CMD_ID           BrickBreakerSetReadyReq_CmdId = 5352
	BrickBreakerSetReadyReq_ENET_CHANNEL_ID  BrickBreakerSetReadyReq_CmdId = 0
	BrickBreakerSetReadyReq_ENET_IS_RELIABLE BrickBreakerSetReadyReq_CmdId = 1
	BrickBreakerSetReadyReq_IS_ALLOW_CLIENT  BrickBreakerSetReadyReq_CmdId = 1
)

// Enum value maps for BrickBreakerSetReadyReq_CmdId.
var (
	BrickBreakerSetReadyReq_CmdId_name = map[int32]string{
		0:    "NONE",
		5352: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	BrickBreakerSetReadyReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5352,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x BrickBreakerSetReadyReq_CmdId) Enum() *BrickBreakerSetReadyReq_CmdId {
	p := new(BrickBreakerSetReadyReq_CmdId)
	*p = x
	return p
}

func (x BrickBreakerSetReadyReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BrickBreakerSetReadyReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[49].Descriptor()
}

func (BrickBreakerSetReadyReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[49]
}

func (x BrickBreakerSetReadyReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BrickBreakerSetReadyReq_CmdId.Descriptor instead.
func (BrickBreakerSetReadyReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{79, 0}
}

type BrickBreakerSetReadyRsp_CmdId int32

const (
	BrickBreakerSetReadyRsp_NONE             BrickBreakerSetReadyRsp_CmdId = 0
	BrickBreakerSetReadyRsp_CMD_ID           BrickBreakerSetReadyRsp_CmdId = 5377
	BrickBreakerSetReadyRsp_ENET_CHANNEL_ID  BrickBreakerSetReadyRsp_CmdId = 0
	BrickBreakerSetReadyRsp_ENET_IS_RELIABLE BrickBreakerSetReadyRsp_CmdId = 1
)

// Enum value maps for BrickBreakerSetReadyRsp_CmdId.
var (
	BrickBreakerSetReadyRsp_CmdId_name = map[int32]string{
		0:    "NONE",
		5377: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	BrickBreakerSetReadyRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5377,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x BrickBreakerSetReadyRsp_CmdId) Enum() *BrickBreakerSetReadyRsp_CmdId {
	p := new(BrickBreakerSetReadyRsp_CmdId)
	*p = x
	return p
}

func (x BrickBreakerSetReadyRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BrickBreakerSetReadyRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[50].Descriptor()
}

func (BrickBreakerSetReadyRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[50]
}

func (x BrickBreakerSetReadyRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BrickBreakerSetReadyRsp_CmdId.Descriptor instead.
func (BrickBreakerSetReadyRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{80, 0}
}

type BrickBreakerSelectAvatarReq_CmdId int32

const (
	BrickBreakerSelectAvatarReq_NONE             BrickBreakerSelectAvatarReq_CmdId = 0
	BrickBreakerSelectAvatarReq_CMD_ID           BrickBreakerSelectAvatarReq_CmdId = 5337
	BrickBreakerSelectAvatarReq_ENET_CHANNEL_ID  BrickBreakerSelectAvatarReq_CmdId = 0
	BrickBreakerSelectAvatarReq_ENET_IS_RELIABLE BrickBreakerSelectAvatarReq_CmdId = 1
	BrickBreakerSelectAvatarReq_IS_ALLOW_CLIENT  BrickBreakerSelectAvatarReq_CmdId = 1
)

// Enum value maps for BrickBreakerSelectAvatarReq_CmdId.
var (
	BrickBreakerSelectAvatarReq_CmdId_name = map[int32]string{
		0:    "NONE",
		5337: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	BrickBreakerSelectAvatarReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5337,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x BrickBreakerSelectAvatarReq_CmdId) Enum() *BrickBreakerSelectAvatarReq_CmdId {
	p := new(BrickBreakerSelectAvatarReq_CmdId)
	*p = x
	return p
}

func (x BrickBreakerSelectAvatarReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BrickBreakerSelectAvatarReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[51].Descriptor()
}

func (BrickBreakerSelectAvatarReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[51]
}

func (x BrickBreakerSelectAvatarReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BrickBreakerSelectAvatarReq_CmdId.Descriptor instead.
func (BrickBreakerSelectAvatarReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{81, 0}
}

type BrickBreakerSelectAvatarRsp_CmdId int32

const (
	BrickBreakerSelectAvatarRsp_NONE             BrickBreakerSelectAvatarRsp_CmdId = 0
	BrickBreakerSelectAvatarRsp_CMD_ID           BrickBreakerSelectAvatarRsp_CmdId = 5385
	BrickBreakerSelectAvatarRsp_ENET_CHANNEL_ID  BrickBreakerSelectAvatarRsp_CmdId = 0
	BrickBreakerSelectAvatarRsp_ENET_IS_RELIABLE BrickBreakerSelectAvatarRsp_CmdId = 1
)

// Enum value maps for BrickBreakerSelectAvatarRsp_CmdId.
var (
	BrickBreakerSelectAvatarRsp_CmdId_name = map[int32]string{
		0:    "NONE",
		5385: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	BrickBreakerSelectAvatarRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5385,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x BrickBreakerSelectAvatarRsp_CmdId) Enum() *BrickBreakerSelectAvatarRsp_CmdId {
	p := new(BrickBreakerSelectAvatarRsp_CmdId)
	*p = x
	return p
}

func (x BrickBreakerSelectAvatarRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BrickBreakerSelectAvatarRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[52].Descriptor()
}

func (BrickBreakerSelectAvatarRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[52]
}

func (x BrickBreakerSelectAvatarRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BrickBreakerSelectAvatarRsp_CmdId.Descriptor instead.
func (BrickBreakerSelectAvatarRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{82, 0}
}

type BrickBreakerSelectSkillReq_CmdId int32

const (
	BrickBreakerSelectSkillReq_NONE             BrickBreakerSelectSkillReq_CmdId = 0
	BrickBreakerSelectSkillReq_CMD_ID           BrickBreakerSelectSkillReq_CmdId = 5325
	BrickBreakerSelectSkillReq_ENET_CHANNEL_ID  BrickBreakerSelectSkillReq_CmdId = 0
	BrickBreakerSelectSkillReq_ENET_IS_RELIABLE BrickBreakerSelectSkillReq_CmdId = 1
	BrickBreakerSelectSkillReq_IS_ALLOW_CLIENT  BrickBreakerSelectSkillReq_CmdId = 1
)

// Enum value maps for BrickBreakerSelectSkillReq_CmdId.
var (
	BrickBreakerSelectSkillReq_CmdId_name = map[int32]string{
		0:    "NONE",
		5325: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	BrickBreakerSelectSkillReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5325,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x BrickBreakerSelectSkillReq_CmdId) Enum() *BrickBreakerSelectSkillReq_CmdId {
	p := new(BrickBreakerSelectSkillReq_CmdId)
	*p = x
	return p
}

func (x BrickBreakerSelectSkillReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BrickBreakerSelectSkillReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[53].Descriptor()
}

func (BrickBreakerSelectSkillReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[53]
}

func (x BrickBreakerSelectSkillReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BrickBreakerSelectSkillReq_CmdId.Descriptor instead.
func (BrickBreakerSelectSkillReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{83, 0}
}

type BrickBreakerSelectSkillRsp_CmdId int32

const (
	BrickBreakerSelectSkillRsp_NONE             BrickBreakerSelectSkillRsp_CmdId = 0
	BrickBreakerSelectSkillRsp_CMD_ID           BrickBreakerSelectSkillRsp_CmdId = 5378
	BrickBreakerSelectSkillRsp_ENET_CHANNEL_ID  BrickBreakerSelectSkillRsp_CmdId = 0
	BrickBreakerSelectSkillRsp_ENET_IS_RELIABLE BrickBreakerSelectSkillRsp_CmdId = 1
)

// Enum value maps for BrickBreakerSelectSkillRsp_CmdId.
var (
	BrickBreakerSelectSkillRsp_CmdId_name = map[int32]string{
		0:    "NONE",
		5378: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	BrickBreakerSelectSkillRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5378,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x BrickBreakerSelectSkillRsp_CmdId) Enum() *BrickBreakerSelectSkillRsp_CmdId {
	p := new(BrickBreakerSelectSkillRsp_CmdId)
	*p = x
	return p
}

func (x BrickBreakerSelectSkillRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BrickBreakerSelectSkillRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[54].Descriptor()
}

func (BrickBreakerSelectSkillRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[54]
}

func (x BrickBreakerSelectSkillRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BrickBreakerSelectSkillRsp_CmdId.Descriptor instead.
func (BrickBreakerSelectSkillRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{84, 0}
}

type BrickBreakerSetChangingReq_CmdId int32

const (
	BrickBreakerSetChangingReq_NONE             BrickBreakerSetChangingReq_CmdId = 0
	BrickBreakerSetChangingReq_CMD_ID           BrickBreakerSetChangingReq_CmdId = 5336
	BrickBreakerSetChangingReq_ENET_CHANNEL_ID  BrickBreakerSetChangingReq_CmdId = 0
	BrickBreakerSetChangingReq_ENET_IS_RELIABLE BrickBreakerSetChangingReq_CmdId = 1
	BrickBreakerSetChangingReq_IS_ALLOW_CLIENT  BrickBreakerSetChangingReq_CmdId = 1
)

// Enum value maps for BrickBreakerSetChangingReq_CmdId.
var (
	BrickBreakerSetChangingReq_CmdId_name = map[int32]string{
		0:    "NONE",
		5336: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	BrickBreakerSetChangingReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5336,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x BrickBreakerSetChangingReq_CmdId) Enum() *BrickBreakerSetChangingReq_CmdId {
	p := new(BrickBreakerSetChangingReq_CmdId)
	*p = x
	return p
}

func (x BrickBreakerSetChangingReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BrickBreakerSetChangingReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[55].Descriptor()
}

func (BrickBreakerSetChangingReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[55]
}

func (x BrickBreakerSetChangingReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BrickBreakerSetChangingReq_CmdId.Descriptor instead.
func (BrickBreakerSetChangingReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{85, 0}
}

type BrickBreakerSetChangingRsp_CmdId int32

const (
	BrickBreakerSetChangingRsp_NONE             BrickBreakerSetChangingRsp_CmdId = 0
	BrickBreakerSetChangingRsp_CMD_ID           BrickBreakerSetChangingRsp_CmdId = 5354
	BrickBreakerSetChangingRsp_ENET_CHANNEL_ID  BrickBreakerSetChangingRsp_CmdId = 0
	BrickBreakerSetChangingRsp_ENET_IS_RELIABLE BrickBreakerSetChangingRsp_CmdId = 1
)

// Enum value maps for BrickBreakerSetChangingRsp_CmdId.
var (
	BrickBreakerSetChangingRsp_CmdId_name = map[int32]string{
		0:    "NONE",
		5354: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	BrickBreakerSetChangingRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5354,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x BrickBreakerSetChangingRsp_CmdId) Enum() *BrickBreakerSetChangingRsp_CmdId {
	p := new(BrickBreakerSetChangingRsp_CmdId)
	*p = x
	return p
}

func (x BrickBreakerSetChangingRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BrickBreakerSetChangingRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[56].Descriptor()
}

func (BrickBreakerSetChangingRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[56]
}

func (x BrickBreakerSetChangingRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BrickBreakerSetChangingRsp_CmdId.Descriptor instead.
func (BrickBreakerSetChangingRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{86, 0}
}

type BrickBreakerPlayerSetChangingNotify_CmdId int32

const (
	BrickBreakerPlayerSetChangingNotify_NONE             BrickBreakerPlayerSetChangingNotify_CmdId = 0
	BrickBreakerPlayerSetChangingNotify_CMD_ID           BrickBreakerPlayerSetChangingNotify_CmdId = 5383
	BrickBreakerPlayerSetChangingNotify_ENET_CHANNEL_ID  BrickBreakerPlayerSetChangingNotify_CmdId = 0
	BrickBreakerPlayerSetChangingNotify_ENET_IS_RELIABLE BrickBreakerPlayerSetChangingNotify_CmdId = 1
)

// Enum value maps for BrickBreakerPlayerSetChangingNotify_CmdId.
var (
	BrickBreakerPlayerSetChangingNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5383: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	BrickBreakerPlayerSetChangingNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5383,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x BrickBreakerPlayerSetChangingNotify_CmdId) Enum() *BrickBreakerPlayerSetChangingNotify_CmdId {
	p := new(BrickBreakerPlayerSetChangingNotify_CmdId)
	*p = x
	return p
}

func (x BrickBreakerPlayerSetChangingNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BrickBreakerPlayerSetChangingNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[57].Descriptor()
}

func (BrickBreakerPlayerSetChangingNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[57]
}

func (x BrickBreakerPlayerSetChangingNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BrickBreakerPlayerSetChangingNotify_CmdId.Descriptor instead.
func (BrickBreakerPlayerSetChangingNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{87, 0}
}

type CoinCollectPrepareStageNotify_CmdId int32

const (
	CoinCollectPrepareStageNotify_NONE             CoinCollectPrepareStageNotify_CmdId = 0
	CoinCollectPrepareStageNotify_CMD_ID           CoinCollectPrepareStageNotify_CmdId = 6536
	CoinCollectPrepareStageNotify_ENET_CHANNEL_ID  CoinCollectPrepareStageNotify_CmdId = 0
	CoinCollectPrepareStageNotify_ENET_IS_RELIABLE CoinCollectPrepareStageNotify_CmdId = 1
)

// Enum value maps for CoinCollectPrepareStageNotify_CmdId.
var (
	CoinCollectPrepareStageNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		6536: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	CoinCollectPrepareStageNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           6536,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x CoinCollectPrepareStageNotify_CmdId) Enum() *CoinCollectPrepareStageNotify_CmdId {
	p := new(CoinCollectPrepareStageNotify_CmdId)
	*p = x
	return p
}

func (x CoinCollectPrepareStageNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoinCollectPrepareStageNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[58].Descriptor()
}

func (CoinCollectPrepareStageNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[58]
}

func (x CoinCollectPrepareStageNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoinCollectPrepareStageNotify_CmdId.Descriptor instead.
func (CoinCollectPrepareStageNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{90, 0}
}

type LanV3BoatSettleNotify_CmdId int32

const (
	LanV3BoatSettleNotify_NONE             LanV3BoatSettleNotify_CmdId = 0
	LanV3BoatSettleNotify_CMD_ID           LanV3BoatSettleNotify_CmdId = 6539
	LanV3BoatSettleNotify_ENET_CHANNEL_ID  LanV3BoatSettleNotify_CmdId = 0
	LanV3BoatSettleNotify_ENET_IS_RELIABLE LanV3BoatSettleNotify_CmdId = 1
)

// Enum value maps for LanV3BoatSettleNotify_CmdId.
var (
	LanV3BoatSettleNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		6539: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	LanV3BoatSettleNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           6539,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x LanV3BoatSettleNotify_CmdId) Enum() *LanV3BoatSettleNotify_CmdId {
	p := new(LanV3BoatSettleNotify_CmdId)
	*p = x
	return p
}

func (x LanV3BoatSettleNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LanV3BoatSettleNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_multistage_play_proto_enumTypes[59].Descriptor()
}

func (LanV3BoatSettleNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_multistage_play_proto_enumTypes[59]
}

func (x LanV3BoatSettleNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LanV3BoatSettleNotify_CmdId.Descriptor instead.
func (LanV3BoatSettleNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{92, 0}
}

type InBattleMechanicusBuildingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildingId   uint32 `protobuf:"varint,8,opt,name=building_id,json=buildingId,proto3" json:"building_id,omitempty"`
	Level        uint32 `protobuf:"varint,7,opt,name=level,proto3" json:"level,omitempty"`
	CostPoints   uint32 `protobuf:"varint,2,opt,name=cost_points,json=costPoints,proto3" json:"cost_points,omitempty"`
	RefundPoints uint32 `protobuf:"varint,11,opt,name=refund_points,json=refundPoints,proto3" json:"refund_points,omitempty"`
}

func (x *InBattleMechanicusBuildingInfo) Reset() {
	*x = InBattleMechanicusBuildingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InBattleMechanicusBuildingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InBattleMechanicusBuildingInfo) ProtoMessage() {}

func (x *InBattleMechanicusBuildingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InBattleMechanicusBuildingInfo.ProtoReflect.Descriptor instead.
func (*InBattleMechanicusBuildingInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{0}
}

func (x *InBattleMechanicusBuildingInfo) GetBuildingId() uint32 {
	if x != nil {
		return x.BuildingId
	}
	return 0
}

func (x *InBattleMechanicusBuildingInfo) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *InBattleMechanicusBuildingInfo) GetCostPoints() uint32 {
	if x != nil {
		return x.CostPoints
	}
	return 0
}

func (x *InBattleMechanicusBuildingInfo) GetRefundPoints() uint32 {
	if x != nil {
		return x.RefundPoints
	}
	return 0
}

type InBattleMechanicusPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PickCardId      uint32                            `protobuf:"varint,5,opt,name=pick_card_id,json=pickCardId,proto3" json:"pick_card_id,omitempty"`
	Uid             uint32                            `protobuf:"varint,14,opt,name=uid,proto3" json:"uid,omitempty"`
	BuildingList    []*InBattleMechanicusBuildingInfo `protobuf:"bytes,4,rep,name=building_list,json=buildingList,proto3" json:"building_list,omitempty"`
	IsCardConfirmed bool                              `protobuf:"varint,13,opt,name=is_card_confirmed,json=isCardConfirmed,proto3" json:"is_card_confirmed,omitempty"`
	BuildingPoints  uint32                            `protobuf:"varint,3,opt,name=building_points,json=buildingPoints,proto3" json:"building_points,omitempty"`
}

func (x *InBattleMechanicusPlayerInfo) Reset() {
	*x = InBattleMechanicusPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InBattleMechanicusPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InBattleMechanicusPlayerInfo) ProtoMessage() {}

func (x *InBattleMechanicusPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InBattleMechanicusPlayerInfo.ProtoReflect.Descriptor instead.
func (*InBattleMechanicusPlayerInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{1}
}

func (x *InBattleMechanicusPlayerInfo) GetPickCardId() uint32 {
	if x != nil {
		return x.PickCardId
	}
	return 0
}

func (x *InBattleMechanicusPlayerInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *InBattleMechanicusPlayerInfo) GetBuildingList() []*InBattleMechanicusBuildingInfo {
	if x != nil {
		return x.BuildingList
	}
	return nil
}

func (x *InBattleMechanicusPlayerInfo) GetIsCardConfirmed() bool {
	if x != nil {
		return x.IsCardConfirmed
	}
	return false
}

func (x *InBattleMechanicusPlayerInfo) GetBuildingPoints() uint32 {
	if x != nil {
		return x.BuildingPoints
	}
	return 0
}

type InBattleMechanicusMonsterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterId uint32 `protobuf:"varint,1,opt,name=monster_id,json=monsterId,proto3" json:"monster_id,omitempty"`
	Level     uint32 `protobuf:"varint,14,opt,name=level,proto3" json:"level,omitempty"`
	Count     uint32 `protobuf:"varint,13,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *InBattleMechanicusMonsterInfo) Reset() {
	*x = InBattleMechanicusMonsterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InBattleMechanicusMonsterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InBattleMechanicusMonsterInfo) ProtoMessage() {}

func (x *InBattleMechanicusMonsterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InBattleMechanicusMonsterInfo.ProtoReflect.Descriptor instead.
func (*InBattleMechanicusMonsterInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{2}
}

func (x *InBattleMechanicusMonsterInfo) GetMonsterId() uint32 {
	if x != nil {
		return x.MonsterId
	}
	return 0
}

func (x *InBattleMechanicusMonsterInfo) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *InBattleMechanicusMonsterInfo) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type InBattleMechanicusCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RandEffectId   uint32                               `protobuf:"varint,12,opt,name=rand_effect_id,json=randEffectId,proto3" json:"rand_effect_id,omitempty"`
	EndRound       uint32                               `protobuf:"varint,3,opt,name=end_round,json=endRound,proto3" json:"end_round,omitempty"`
	ChallengeState InBattleMechanicusCardChallengeState `protobuf:"varint,5,opt,name=challenge_state,json=challengeState,proto3,enum=proto.InBattleMechanicusCardChallengeState" json:"challenge_state,omitempty"`
	CostPoints     uint32                               `protobuf:"varint,1,opt,name=cost_points,json=costPoints,proto3" json:"cost_points,omitempty"`
	CardId         uint32                               `protobuf:"varint,11,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	BeginRound     uint32                               `protobuf:"varint,8,opt,name=begin_round,json=beginRound,proto3" json:"begin_round,omitempty"`
}

func (x *InBattleMechanicusCardInfo) Reset() {
	*x = InBattleMechanicusCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InBattleMechanicusCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InBattleMechanicusCardInfo) ProtoMessage() {}

func (x *InBattleMechanicusCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InBattleMechanicusCardInfo.ProtoReflect.Descriptor instead.
func (*InBattleMechanicusCardInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{3}
}

func (x *InBattleMechanicusCardInfo) GetRandEffectId() uint32 {
	if x != nil {
		return x.RandEffectId
	}
	return 0
}

func (x *InBattleMechanicusCardInfo) GetEndRound() uint32 {
	if x != nil {
		return x.EndRound
	}
	return 0
}

func (x *InBattleMechanicusCardInfo) GetChallengeState() InBattleMechanicusCardChallengeState {
	if x != nil {
		return x.ChallengeState
	}
	return InBattleMechanicusCardChallengeState_IN_BATTLE_MECHANICUS_CARD_CHALLENGE_NONE
}

func (x *InBattleMechanicusCardInfo) GetCostPoints() uint32 {
	if x != nil {
		return x.CostPoints
	}
	return 0
}

func (x *InBattleMechanicusCardInfo) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *InBattleMechanicusCardInfo) GetBeginRound() uint32 {
	if x != nil {
		return x.BeginRound
	}
	return 0
}

type InBattleMechanicusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftMonster           uint32                           `protobuf:"varint,5,opt,name=left_monster,json=leftMonster,proto3" json:"left_monster,omitempty"`
	WaitSeconds           uint32                           `protobuf:"varint,13,opt,name=wait_seconds,json=waitSeconds,proto3" json:"wait_seconds,omitempty"`
	EntranceList          []uint32                         `protobuf:"varint,410,rep,packed,name=entrance_list,json=entranceList,proto3" json:"entrance_list,omitempty"`
	ExitList              []uint32                         `protobuf:"varint,115,rep,packed,name=exit_list,json=exitList,proto3" json:"exit_list,omitempty"`
	HistoryCardList       []*InBattleMechanicusCardInfo    `protobuf:"bytes,11,rep,name=history_card_list,json=historyCardList,proto3" json:"history_card_list,omitempty"`
	MaxExcapeMonsterNum   uint32                           `protobuf:"varint,10,opt,name=max_excape_monster_num,json=maxExcapeMonsterNum,proto3" json:"max_excape_monster_num,omitempty"`
	BuildingStageDuration uint32                           `protobuf:"varint,4,opt,name=building_stage_duration,json=buildingStageDuration,proto3" json:"building_stage_duration,omitempty"`
	DurationMs            uint64                           `protobuf:"varint,8,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	Stage                 InBattleMechanicusStageType      `protobuf:"varint,9,opt,name=stage,proto3,enum=proto.InBattleMechanicusStageType" json:"stage,omitempty"`
	TotalRound            uint32                           `protobuf:"varint,12,opt,name=total_round,json=totalRound,proto3" json:"total_round,omitempty"`
	MonsterList           []*InBattleMechanicusMonsterInfo `protobuf:"bytes,14,rep,name=monster_list,json=monsterList,proto3" json:"monster_list,omitempty"`
	ExcapedMonsterNum     uint32                           `protobuf:"varint,6,opt,name=excaped_monster_num,json=excapedMonsterNum,proto3" json:"excaped_monster_num,omitempty"`
	Round                 uint32                           `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	PickCardList          []*InBattleMechanicusCardInfo    `protobuf:"bytes,15,rep,name=pick_card_list,json=pickCardList,proto3" json:"pick_card_list,omitempty"`
	PlayerList            []*InBattleMechanicusPlayerInfo  `protobuf:"bytes,7,rep,name=player_list,json=playerList,proto3" json:"player_list,omitempty"`
	WaitBeginTimeUs       uint64                           `protobuf:"varint,1,opt,name=wait_begin_time_us,json=waitBeginTimeUs,proto3" json:"wait_begin_time_us,omitempty"`
	BeginTimeMs           uint64                           `protobuf:"varint,2,opt,name=begin_time_ms,json=beginTimeMs,proto3" json:"begin_time_ms,omitempty"`
}

func (x *InBattleMechanicusInfo) Reset() {
	*x = InBattleMechanicusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InBattleMechanicusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InBattleMechanicusInfo) ProtoMessage() {}

func (x *InBattleMechanicusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InBattleMechanicusInfo.ProtoReflect.Descriptor instead.
func (*InBattleMechanicusInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{4}
}

func (x *InBattleMechanicusInfo) GetLeftMonster() uint32 {
	if x != nil {
		return x.LeftMonster
	}
	return 0
}

func (x *InBattleMechanicusInfo) GetWaitSeconds() uint32 {
	if x != nil {
		return x.WaitSeconds
	}
	return 0
}

func (x *InBattleMechanicusInfo) GetEntranceList() []uint32 {
	if x != nil {
		return x.EntranceList
	}
	return nil
}

func (x *InBattleMechanicusInfo) GetExitList() []uint32 {
	if x != nil {
		return x.ExitList
	}
	return nil
}

func (x *InBattleMechanicusInfo) GetHistoryCardList() []*InBattleMechanicusCardInfo {
	if x != nil {
		return x.HistoryCardList
	}
	return nil
}

func (x *InBattleMechanicusInfo) GetMaxExcapeMonsterNum() uint32 {
	if x != nil {
		return x.MaxExcapeMonsterNum
	}
	return 0
}

func (x *InBattleMechanicusInfo) GetBuildingStageDuration() uint32 {
	if x != nil {
		return x.BuildingStageDuration
	}
	return 0
}

func (x *InBattleMechanicusInfo) GetDurationMs() uint64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *InBattleMechanicusInfo) GetStage() InBattleMechanicusStageType {
	if x != nil {
		return x.Stage
	}
	return InBattleMechanicusStageType_IN_BATTLE_MECHANICUS_STAGE_NONE
}

func (x *InBattleMechanicusInfo) GetTotalRound() uint32 {
	if x != nil {
		return x.TotalRound
	}
	return 0
}

func (x *InBattleMechanicusInfo) GetMonsterList() []*InBattleMechanicusMonsterInfo {
	if x != nil {
		return x.MonsterList
	}
	return nil
}

func (x *InBattleMechanicusInfo) GetExcapedMonsterNum() uint32 {
	if x != nil {
		return x.ExcapedMonsterNum
	}
	return 0
}

func (x *InBattleMechanicusInfo) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *InBattleMechanicusInfo) GetPickCardList() []*InBattleMechanicusCardInfo {
	if x != nil {
		return x.PickCardList
	}
	return nil
}

func (x *InBattleMechanicusInfo) GetPlayerList() []*InBattleMechanicusPlayerInfo {
	if x != nil {
		return x.PlayerList
	}
	return nil
}

func (x *InBattleMechanicusInfo) GetWaitBeginTimeUs() uint64 {
	if x != nil {
		return x.WaitBeginTimeUs
	}
	return 0
}

func (x *InBattleMechanicusInfo) GetBeginTimeMs() uint64 {
	if x != nil {
		return x.BeginTimeMs
	}
	return 0
}

type InBattleFleurFairInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryIdList          []uint32 `protobuf:"varint,5,rep,packed,name=gallery_id_list,json=galleryIdList,proto3" json:"gallery_id_list,omitempty"`
	GalleryStageIndex      uint32   `protobuf:"varint,6,opt,name=gallery_stage_index,json=galleryStageIndex,proto3" json:"gallery_stage_index,omitempty"`
	PreviewStageIndex      uint32   `protobuf:"varint,8,opt,name=preview_stage_index,json=previewStageIndex,proto3" json:"preview_stage_index,omitempty"`
	AbilityGroupIdList     []uint32 `protobuf:"varint,2,rep,packed,name=ability_group_id_list,json=abilityGroupIdList,proto3" json:"ability_group_id_list,omitempty"`
	PreviewDisplayDuration uint32   `protobuf:"varint,12,opt,name=preview_display_duration,json=previewDisplayDuration,proto3" json:"preview_display_duration,omitempty"`
}

func (x *InBattleFleurFairInfo) Reset() {
	*x = InBattleFleurFairInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InBattleFleurFairInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InBattleFleurFairInfo) ProtoMessage() {}

func (x *InBattleFleurFairInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InBattleFleurFairInfo.ProtoReflect.Descriptor instead.
func (*InBattleFleurFairInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{5}
}

func (x *InBattleFleurFairInfo) GetGalleryIdList() []uint32 {
	if x != nil {
		return x.GalleryIdList
	}
	return nil
}

func (x *InBattleFleurFairInfo) GetGalleryStageIndex() uint32 {
	if x != nil {
		return x.GalleryStageIndex
	}
	return 0
}

func (x *InBattleFleurFairInfo) GetPreviewStageIndex() uint32 {
	if x != nil {
		return x.PreviewStageIndex
	}
	return 0
}

func (x *InBattleFleurFairInfo) GetAbilityGroupIdList() []uint32 {
	if x != nil {
		return x.AbilityGroupIdList
	}
	return nil
}

func (x *InBattleFleurFairInfo) GetPreviewDisplayDuration() uint32 {
	if x != nil {
		return x.PreviewDisplayDuration
	}
	return 0
}

type CharAmusementAvatarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          uint32   `protobuf:"varint,11,opt,name=uid,proto3" json:"uid,omitempty"`
	PunishTime   uint32   `protobuf:"varint,7,opt,name=punish_time,json=punishTime,proto3" json:"punish_time,omitempty"`
	AvatarIdList []uint32 `protobuf:"varint,10,rep,packed,name=avatar_id_list,json=avatarIdList,proto3" json:"avatar_id_list,omitempty"`
}

func (x *CharAmusementAvatarInfo) Reset() {
	*x = CharAmusementAvatarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharAmusementAvatarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharAmusementAvatarInfo) ProtoMessage() {}

func (x *CharAmusementAvatarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharAmusementAvatarInfo.ProtoReflect.Descriptor instead.
func (*CharAmusementAvatarInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{6}
}

func (x *CharAmusementAvatarInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CharAmusementAvatarInfo) GetPunishTime() uint32 {
	if x != nil {
		return x.PunishTime
	}
	return 0
}

func (x *CharAmusementAvatarInfo) GetAvatarIdList() []uint32 {
	if x != nil {
		return x.AvatarIdList
	}
	return nil
}

type CharAmusementInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCostTime     uint32                     `protobuf:"varint,11,opt,name=total_cost_time,json=totalCostTime,proto3" json:"total_cost_time,omitempty"`
	StageId           uint32                     `protobuf:"varint,2,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	LevelId           uint32                     `protobuf:"varint,10,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	PreviewStageIndex uint32                     `protobuf:"varint,4,opt,name=preview_stage_index,json=previewStageIndex,proto3" json:"preview_stage_index,omitempty"`
	AvatarInfoList    []*CharAmusementAvatarInfo `protobuf:"bytes,5,rep,name=avatar_info_list,json=avatarInfoList,proto3" json:"avatar_info_list,omitempty"`
}

func (x *CharAmusementInfo) Reset() {
	*x = CharAmusementInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharAmusementInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharAmusementInfo) ProtoMessage() {}

func (x *CharAmusementInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharAmusementInfo.ProtoReflect.Descriptor instead.
func (*CharAmusementInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{7}
}

func (x *CharAmusementInfo) GetTotalCostTime() uint32 {
	if x != nil {
		return x.TotalCostTime
	}
	return 0
}

func (x *CharAmusementInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *CharAmusementInfo) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *CharAmusementInfo) GetPreviewStageIndex() uint32 {
	if x != nil {
		return x.PreviewStageIndex
	}
	return 0
}

func (x *CharAmusementInfo) GetAvatarInfoList() []*CharAmusementAvatarInfo {
	if x != nil {
		return x.AvatarInfoList
	}
	return nil
}

type BrickBreakerStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId        uint32                          `protobuf:"varint,15,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	StageType      BrickBreakerStageType           `protobuf:"varint,1,opt,name=stage_type,json=stageType,proto3,enum=proto.BrickBreakerStageType" json:"stage_type,omitempty"`
	BattleInfoList []*BrickBreakerPlayerBattleInfo `protobuf:"bytes,2,rep,name=battle_info_list,json=battleInfoList,proto3" json:"battle_info_list,omitempty"`
}

func (x *BrickBreakerStageInfo) Reset() {
	*x = BrickBreakerStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerStageInfo) ProtoMessage() {}

func (x *BrickBreakerStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerStageInfo.ProtoReflect.Descriptor instead.
func (*BrickBreakerStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{8}
}

func (x *BrickBreakerStageInfo) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *BrickBreakerStageInfo) GetStageType() BrickBreakerStageType {
	if x != nil {
		return x.StageType
	}
	return BrickBreakerStageType_BRICK_BREAKER_STAGE_PREPARE
}

func (x *BrickBreakerStageInfo) GetBattleInfoList() []*BrickBreakerPlayerBattleInfo {
	if x != nil {
		return x.BattleInfoList
	}
	return nil
}

type CoinCollectStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId        uint32                   `protobuf:"varint,3,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	PlayIndex      uint32                   `protobuf:"varint,15,opt,name=play_index,json=playIndex,proto3" json:"play_index,omitempty"`
	PlayerInfoList []*CoinCollectPlayerInfo `protobuf:"bytes,9,rep,name=player_info_list,json=playerInfoList,proto3" json:"player_info_list,omitempty"`
}

func (x *CoinCollectStageInfo) Reset() {
	*x = CoinCollectStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinCollectStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinCollectStageInfo) ProtoMessage() {}

func (x *CoinCollectStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinCollectStageInfo.ProtoReflect.Descriptor instead.
func (*CoinCollectStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{9}
}

func (x *CoinCollectStageInfo) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *CoinCollectStageInfo) GetPlayIndex() uint32 {
	if x != nil {
		return x.PlayIndex
	}
	return 0
}

func (x *CoinCollectStageInfo) GetPlayerInfoList() []*CoinCollectPlayerInfo {
	if x != nil {
		return x.PlayerInfoList
	}
	return nil
}

type LanV3BoatStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUidList []uint32 `protobuf:"varint,2,rep,packed,name=player_uid_list,json=playerUidList,proto3" json:"player_uid_list,omitempty"`
	MapId         uint32   `protobuf:"varint,10,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	IsSingle      bool     `protobuf:"varint,13,opt,name=is_single,json=isSingle,proto3" json:"is_single,omitempty"`
}

func (x *LanV3BoatStageInfo) Reset() {
	*x = LanV3BoatStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanV3BoatStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanV3BoatStageInfo) ProtoMessage() {}

func (x *LanV3BoatStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanV3BoatStageInfo.ProtoReflect.Descriptor instead.
func (*LanV3BoatStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{10}
}

func (x *LanV3BoatStageInfo) GetPlayerUidList() []uint32 {
	if x != nil {
		return x.PlayerUidList
	}
	return nil
}

func (x *LanV3BoatStageInfo) GetMapId() uint32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *LanV3BoatStageInfo) GetIsSingle() bool {
	if x != nil {
		return x.IsSingle
	}
	return false
}

type MultistagePlayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayIndex  uint32 `protobuf:"varint,13,opt,name=play_index,json=playIndex,proto3" json:"play_index,omitempty"`
	PlayType   uint32 `protobuf:"varint,11,opt,name=play_type,json=playType,proto3" json:"play_type,omitempty"`
	StageType  uint32 `protobuf:"varint,10,opt,name=stage_type,json=stageType,proto3" json:"stage_type,omitempty"`
	Duration   uint32 `protobuf:"varint,8,opt,name=duration,proto3" json:"duration,omitempty"`
	GroupId    uint32 `protobuf:"varint,12,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	BeginTime  uint32 `protobuf:"varint,9,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	StageIndex uint32 `protobuf:"varint,1,opt,name=stage_index,json=stageIndex,proto3" json:"stage_index,omitempty"`
	// Types that are assignable to Detail:
	//
	//	*MultistagePlayInfo_MechanicusInfo
	//	*MultistagePlayInfo_FleurFairInfo
	//	*MultistagePlayInfo_HideAndSeekInfo
	//	*MultistagePlayInfo_ChessInfo
	//	*MultistagePlayInfo_IrodoriChessInfo
	//	*MultistagePlayInfo_CharAmusementInfo
	//	*MultistagePlayInfo_BrickBreakerInfo
	//	*MultistagePlayInfo_CoinCollectInfo
	//	*MultistagePlayInfo_LanV3BoatInfo
	Detail isMultistagePlayInfo_Detail `protobuf_oneof:"detail"`
}

func (x *MultistagePlayInfo) Reset() {
	*x = MultistagePlayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultistagePlayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultistagePlayInfo) ProtoMessage() {}

func (x *MultistagePlayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultistagePlayInfo.ProtoReflect.Descriptor instead.
func (*MultistagePlayInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{11}
}

func (x *MultistagePlayInfo) GetPlayIndex() uint32 {
	if x != nil {
		return x.PlayIndex
	}
	return 0
}

func (x *MultistagePlayInfo) GetPlayType() uint32 {
	if x != nil {
		return x.PlayType
	}
	return 0
}

func (x *MultistagePlayInfo) GetStageType() uint32 {
	if x != nil {
		return x.StageType
	}
	return 0
}

func (x *MultistagePlayInfo) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *MultistagePlayInfo) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *MultistagePlayInfo) GetBeginTime() uint32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *MultistagePlayInfo) GetStageIndex() uint32 {
	if x != nil {
		return x.StageIndex
	}
	return 0
}

func (m *MultistagePlayInfo) GetDetail() isMultistagePlayInfo_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *MultistagePlayInfo) GetMechanicusInfo() *InBattleMechanicusInfo {
	if x, ok := x.GetDetail().(*MultistagePlayInfo_MechanicusInfo); ok {
		return x.MechanicusInfo
	}
	return nil
}

func (x *MultistagePlayInfo) GetFleurFairInfo() *InBattleFleurFairInfo {
	if x, ok := x.GetDetail().(*MultistagePlayInfo_FleurFairInfo); ok {
		return x.FleurFairInfo
	}
	return nil
}

func (x *MultistagePlayInfo) GetHideAndSeekInfo() *HideAndSeekStageInfo {
	if x, ok := x.GetDetail().(*MultistagePlayInfo_HideAndSeekInfo); ok {
		return x.HideAndSeekInfo
	}
	return nil
}

func (x *MultistagePlayInfo) GetChessInfo() *InBattleChessInfo {
	if x, ok := x.GetDetail().(*MultistagePlayInfo_ChessInfo); ok {
		return x.ChessInfo
	}
	return nil
}

func (x *MultistagePlayInfo) GetIrodoriChessInfo() *InBattleIrodoriChessInfo {
	if x, ok := x.GetDetail().(*MultistagePlayInfo_IrodoriChessInfo); ok {
		return x.IrodoriChessInfo
	}
	return nil
}

func (x *MultistagePlayInfo) GetCharAmusementInfo() *CharAmusementInfo {
	if x, ok := x.GetDetail().(*MultistagePlayInfo_CharAmusementInfo); ok {
		return x.CharAmusementInfo
	}
	return nil
}

func (x *MultistagePlayInfo) GetBrickBreakerInfo() *BrickBreakerStageInfo {
	if x, ok := x.GetDetail().(*MultistagePlayInfo_BrickBreakerInfo); ok {
		return x.BrickBreakerInfo
	}
	return nil
}

func (x *MultistagePlayInfo) GetCoinCollectInfo() *CoinCollectStageInfo {
	if x, ok := x.GetDetail().(*MultistagePlayInfo_CoinCollectInfo); ok {
		return x.CoinCollectInfo
	}
	return nil
}

func (x *MultistagePlayInfo) GetLanV3BoatInfo() *LanV3BoatStageInfo {
	if x, ok := x.GetDetail().(*MultistagePlayInfo_LanV3BoatInfo); ok {
		return x.LanV3BoatInfo
	}
	return nil
}

type isMultistagePlayInfo_Detail interface {
	isMultistagePlayInfo_Detail()
}

type MultistagePlayInfo_MechanicusInfo struct {
	MechanicusInfo *InBattleMechanicusInfo `protobuf:"bytes,1334,opt,name=mechanicus_info,json=mechanicusInfo,proto3,oneof"`
}

type MultistagePlayInfo_FleurFairInfo struct {
	FleurFairInfo *InBattleFleurFairInfo `protobuf:"bytes,1064,opt,name=fleur_fair_info,json=fleurFairInfo,proto3,oneof"`
}

type MultistagePlayInfo_HideAndSeekInfo struct {
	HideAndSeekInfo *HideAndSeekStageInfo `protobuf:"bytes,108,opt,name=hide_and_seek_info,json=hideAndSeekInfo,proto3,oneof"`
}

type MultistagePlayInfo_ChessInfo struct {
	ChessInfo *InBattleChessInfo `protobuf:"bytes,1758,opt,name=chess_info,json=chessInfo,proto3,oneof"`
}

type MultistagePlayInfo_IrodoriChessInfo struct {
	IrodoriChessInfo *InBattleIrodoriChessInfo `protobuf:"bytes,531,opt,name=irodori_chess_info,json=irodoriChessInfo,proto3,oneof"`
}

type MultistagePlayInfo_CharAmusementInfo struct {
	CharAmusementInfo *CharAmusementInfo `protobuf:"bytes,324,opt,name=char_amusement_info,json=charAmusementInfo,proto3,oneof"`
}

type MultistagePlayInfo_BrickBreakerInfo struct {
	BrickBreakerInfo *BrickBreakerStageInfo `protobuf:"bytes,1964,opt,name=brick_breaker_info,json=brickBreakerInfo,proto3,oneof"`
}

type MultistagePlayInfo_CoinCollectInfo struct {
	CoinCollectInfo *CoinCollectStageInfo `protobuf:"bytes,1067,opt,name=coin_collect_info,json=coinCollectInfo,proto3,oneof"`
}

type MultistagePlayInfo_LanV3BoatInfo struct {
	LanV3BoatInfo *LanV3BoatStageInfo `protobuf:"bytes,1801,opt,name=lan_v3_boat_info,json=lanV3BoatInfo,proto3,oneof"`
}

func (*MultistagePlayInfo_MechanicusInfo) isMultistagePlayInfo_Detail() {}

func (*MultistagePlayInfo_FleurFairInfo) isMultistagePlayInfo_Detail() {}

func (*MultistagePlayInfo_HideAndSeekInfo) isMultistagePlayInfo_Detail() {}

func (*MultistagePlayInfo_ChessInfo) isMultistagePlayInfo_Detail() {}

func (*MultistagePlayInfo_IrodoriChessInfo) isMultistagePlayInfo_Detail() {}

func (*MultistagePlayInfo_CharAmusementInfo) isMultistagePlayInfo_Detail() {}

func (*MultistagePlayInfo_BrickBreakerInfo) isMultistagePlayInfo_Detail() {}

func (*MultistagePlayInfo_CoinCollectInfo) isMultistagePlayInfo_Detail() {}

func (*MultistagePlayInfo_LanV3BoatInfo) isMultistagePlayInfo_Detail() {}

type MultistagePlayInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *MultistagePlayInfo `protobuf:"bytes,13,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *MultistagePlayInfoNotify) Reset() {
	*x = MultistagePlayInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultistagePlayInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultistagePlayInfoNotify) ProtoMessage() {}

func (x *MultistagePlayInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultistagePlayInfoNotify.ProtoReflect.Descriptor instead.
func (*MultistagePlayInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{12}
}

func (x *MultistagePlayInfoNotify) GetInfo() *MultistagePlayInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type MultistagePlayFinishStageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   uint32 `protobuf:"varint,12,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PlayIndex uint32 `protobuf:"varint,15,opt,name=play_index,json=playIndex,proto3" json:"play_index,omitempty"`
}

func (x *MultistagePlayFinishStageReq) Reset() {
	*x = MultistagePlayFinishStageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultistagePlayFinishStageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultistagePlayFinishStageReq) ProtoMessage() {}

func (x *MultistagePlayFinishStageReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultistagePlayFinishStageReq.ProtoReflect.Descriptor instead.
func (*MultistagePlayFinishStageReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{13}
}

func (x *MultistagePlayFinishStageReq) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *MultistagePlayFinishStageReq) GetPlayIndex() uint32 {
	if x != nil {
		return x.PlayIndex
	}
	return 0
}

type InBattleMechanicusExcapeMonsterNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExcapedMonsterNum uint32 `protobuf:"varint,4,opt,name=excaped_monster_num,json=excapedMonsterNum,proto3" json:"excaped_monster_num,omitempty"`
}

func (x *InBattleMechanicusExcapeMonsterNotify) Reset() {
	*x = InBattleMechanicusExcapeMonsterNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InBattleMechanicusExcapeMonsterNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InBattleMechanicusExcapeMonsterNotify) ProtoMessage() {}

func (x *InBattleMechanicusExcapeMonsterNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InBattleMechanicusExcapeMonsterNotify.ProtoReflect.Descriptor instead.
func (*InBattleMechanicusExcapeMonsterNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{14}
}

func (x *InBattleMechanicusExcapeMonsterNotify) GetExcapedMonsterNum() uint32 {
	if x != nil {
		return x.ExcapedMonsterNum
	}
	return 0
}

type InBattleMechanicusLeftMonsterNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftMonster uint32 `protobuf:"varint,14,opt,name=left_monster,json=leftMonster,proto3" json:"left_monster,omitempty"`
}

func (x *InBattleMechanicusLeftMonsterNotify) Reset() {
	*x = InBattleMechanicusLeftMonsterNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InBattleMechanicusLeftMonsterNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InBattleMechanicusLeftMonsterNotify) ProtoMessage() {}

func (x *InBattleMechanicusLeftMonsterNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InBattleMechanicusLeftMonsterNotify.ProtoReflect.Descriptor instead.
func (*InBattleMechanicusLeftMonsterNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{15}
}

func (x *InBattleMechanicusLeftMonsterNotify) GetLeftMonster() uint32 {
	if x != nil {
		return x.LeftMonster
	}
	return 0
}

type InBattleMechanicusBuildingPointsNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerBuildingPointsMap map[uint32]uint32 `protobuf:"bytes,4,rep,name=player_building_points_map,json=playerBuildingPointsMap,proto3" json:"player_building_points_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *InBattleMechanicusBuildingPointsNotify) Reset() {
	*x = InBattleMechanicusBuildingPointsNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InBattleMechanicusBuildingPointsNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InBattleMechanicusBuildingPointsNotify) ProtoMessage() {}

func (x *InBattleMechanicusBuildingPointsNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InBattleMechanicusBuildingPointsNotify.ProtoReflect.Descriptor instead.
func (*InBattleMechanicusBuildingPointsNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{16}
}

func (x *InBattleMechanicusBuildingPointsNotify) GetPlayerBuildingPointsMap() map[uint32]uint32 {
	if x != nil {
		return x.PlayerBuildingPointsMap
	}
	return nil
}

type InBattleMechanicusPickCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   uint32 `protobuf:"varint,11,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PlayIndex uint32 `protobuf:"varint,7,opt,name=play_index,json=playIndex,proto3" json:"play_index,omitempty"`
	CardId    uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
}

func (x *InBattleMechanicusPickCardReq) Reset() {
	*x = InBattleMechanicusPickCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InBattleMechanicusPickCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InBattleMechanicusPickCardReq) ProtoMessage() {}

func (x *InBattleMechanicusPickCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InBattleMechanicusPickCardReq.ProtoReflect.Descriptor instead.
func (*InBattleMechanicusPickCardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{17}
}

func (x *InBattleMechanicusPickCardReq) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *InBattleMechanicusPickCardReq) GetPlayIndex() uint32 {
	if x != nil {
		return x.PlayIndex
	}
	return 0
}

func (x *InBattleMechanicusPickCardReq) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

type InBattleMechanicusPickCardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode   int32  `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
	CardId    uint32 `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	PlayIndex uint32 `protobuf:"varint,4,opt,name=play_index,json=playIndex,proto3" json:"play_index,omitempty"`
	GroupId   uint32 `protobuf:"varint,9,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *InBattleMechanicusPickCardRsp) Reset() {
	*x = InBattleMechanicusPickCardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InBattleMechanicusPickCardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InBattleMechanicusPickCardRsp) ProtoMessage() {}

func (x *InBattleMechanicusPickCardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InBattleMechanicusPickCardRsp.ProtoReflect.Descriptor instead.
func (*InBattleMechanicusPickCardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{18}
}

func (x *InBattleMechanicusPickCardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *InBattleMechanicusPickCardRsp) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *InBattleMechanicusPickCardRsp) GetPlayIndex() uint32 {
	if x != nil {
		return x.PlayIndex
	}
	return 0
}

func (x *InBattleMechanicusPickCardRsp) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type InBattleMechanicusPickCardNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUid uint32 `protobuf:"varint,6,opt,name=player_uid,json=playerUid,proto3" json:"player_uid,omitempty"`
	GroupId   uint32 `protobuf:"varint,7,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PlayIndex uint32 `protobuf:"varint,8,opt,name=play_index,json=playIndex,proto3" json:"play_index,omitempty"`
	CardId    uint32 `protobuf:"varint,10,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
}

func (x *InBattleMechanicusPickCardNotify) Reset() {
	*x = InBattleMechanicusPickCardNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InBattleMechanicusPickCardNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InBattleMechanicusPickCardNotify) ProtoMessage() {}

func (x *InBattleMechanicusPickCardNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InBattleMechanicusPickCardNotify.ProtoReflect.Descriptor instead.
func (*InBattleMechanicusPickCardNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{19}
}

func (x *InBattleMechanicusPickCardNotify) GetPlayerUid() uint32 {
	if x != nil {
		return x.PlayerUid
	}
	return 0
}

func (x *InBattleMechanicusPickCardNotify) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *InBattleMechanicusPickCardNotify) GetPlayIndex() uint32 {
	if x != nil {
		return x.PlayIndex
	}
	return 0
}

func (x *InBattleMechanicusPickCardNotify) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

type InBattleMechanicusConfirmCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayIndex uint32 `protobuf:"varint,6,opt,name=play_index,json=playIndex,proto3" json:"play_index,omitempty"`
	CardId    uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	GroupId   uint32 `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *InBattleMechanicusConfirmCardReq) Reset() {
	*x = InBattleMechanicusConfirmCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InBattleMechanicusConfirmCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InBattleMechanicusConfirmCardReq) ProtoMessage() {}

func (x *InBattleMechanicusConfirmCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InBattleMechanicusConfirmCardReq.ProtoReflect.Descriptor instead.
func (*InBattleMechanicusConfirmCardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{20}
}

func (x *InBattleMechanicusConfirmCardReq) GetPlayIndex() uint32 {
	if x != nil {
		return x.PlayIndex
	}
	return 0
}

func (x *InBattleMechanicusConfirmCardReq) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *InBattleMechanicusConfirmCardReq) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type InBattleMechanicusConfirmCardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayIndex uint32 `protobuf:"varint,2,opt,name=play_index,json=playIndex,proto3" json:"play_index,omitempty"`
	CardId    uint32 `protobuf:"varint,14,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	Retcode   int32  `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
	GroupId   uint32 `protobuf:"varint,6,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *InBattleMechanicusConfirmCardRsp) Reset() {
	*x = InBattleMechanicusConfirmCardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InBattleMechanicusConfirmCardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InBattleMechanicusConfirmCardRsp) ProtoMessage() {}

func (x *InBattleMechanicusConfirmCardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InBattleMechanicusConfirmCardRsp.ProtoReflect.Descriptor instead.
func (*InBattleMechanicusConfirmCardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{21}
}

func (x *InBattleMechanicusConfirmCardRsp) GetPlayIndex() uint32 {
	if x != nil {
		return x.PlayIndex
	}
	return 0
}

func (x *InBattleMechanicusConfirmCardRsp) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *InBattleMechanicusConfirmCardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *InBattleMechanicusConfirmCardRsp) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type InBattleMechanicusConfirmCardNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayIndex uint32 `protobuf:"varint,11,opt,name=play_index,json=playIndex,proto3" json:"play_index,omitempty"`
	CardId    uint32 `protobuf:"varint,13,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	GroupId   uint32 `protobuf:"varint,10,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PlayerUid uint32 `protobuf:"varint,2,opt,name=player_uid,json=playerUid,proto3" json:"player_uid,omitempty"`
}

func (x *InBattleMechanicusConfirmCardNotify) Reset() {
	*x = InBattleMechanicusConfirmCardNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InBattleMechanicusConfirmCardNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InBattleMechanicusConfirmCardNotify) ProtoMessage() {}

func (x *InBattleMechanicusConfirmCardNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InBattleMechanicusConfirmCardNotify.ProtoReflect.Descriptor instead.
func (*InBattleMechanicusConfirmCardNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{22}
}

func (x *InBattleMechanicusConfirmCardNotify) GetPlayIndex() uint32 {
	if x != nil {
		return x.PlayIndex
	}
	return 0
}

func (x *InBattleMechanicusConfirmCardNotify) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *InBattleMechanicusConfirmCardNotify) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *InBattleMechanicusConfirmCardNotify) GetPlayerUid() uint32 {
	if x != nil {
		return x.PlayerUid
	}
	return 0
}

type InBattleMechanicusCardResultNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaitSeconds            uint32                        `protobuf:"varint,6,opt,name=wait_seconds,json=waitSeconds,proto3" json:"wait_seconds,omitempty"`
	GroupId                uint32                        `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	CardList               []*InBattleMechanicusCardInfo `protobuf:"bytes,9,rep,name=card_list,json=cardList,proto3" json:"card_list,omitempty"`
	WaitBeginTimeUs        uint64                        `protobuf:"varint,7,opt,name=wait_begin_time_us,json=waitBeginTimeUs,proto3" json:"wait_begin_time_us,omitempty"`
	PlayerConfirmedCardMap map[uint32]uint32             `protobuf:"bytes,12,rep,name=player_confirmed_card_map,json=playerConfirmedCardMap,proto3" json:"player_confirmed_card_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	PlayIndex              uint32                        `protobuf:"varint,8,opt,name=play_index,json=playIndex,proto3" json:"play_index,omitempty"`
}

func (x *InBattleMechanicusCardResultNotify) Reset() {
	*x = InBattleMechanicusCardResultNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InBattleMechanicusCardResultNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InBattleMechanicusCardResultNotify) ProtoMessage() {}

func (x *InBattleMechanicusCardResultNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InBattleMechanicusCardResultNotify.ProtoReflect.Descriptor instead.
func (*InBattleMechanicusCardResultNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{23}
}

func (x *InBattleMechanicusCardResultNotify) GetWaitSeconds() uint32 {
	if x != nil {
		return x.WaitSeconds
	}
	return 0
}

func (x *InBattleMechanicusCardResultNotify) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *InBattleMechanicusCardResultNotify) GetCardList() []*InBattleMechanicusCardInfo {
	if x != nil {
		return x.CardList
	}
	return nil
}

func (x *InBattleMechanicusCardResultNotify) GetWaitBeginTimeUs() uint64 {
	if x != nil {
		return x.WaitBeginTimeUs
	}
	return 0
}

func (x *InBattleMechanicusCardResultNotify) GetPlayerConfirmedCardMap() map[uint32]uint32 {
	if x != nil {
		return x.PlayerConfirmedCardMap
	}
	return nil
}

func (x *InBattleMechanicusCardResultNotify) GetPlayIndex() uint32 {
	if x != nil {
		return x.PlayIndex
	}
	return 0
}

type MultistagePlayFinishStageRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode   int32  `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
	GroupId   uint32 `protobuf:"varint,12,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PlayIndex uint32 `protobuf:"varint,6,opt,name=play_index,json=playIndex,proto3" json:"play_index,omitempty"`
}

func (x *MultistagePlayFinishStageRsp) Reset() {
	*x = MultistagePlayFinishStageRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultistagePlayFinishStageRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultistagePlayFinishStageRsp) ProtoMessage() {}

func (x *MultistagePlayFinishStageRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultistagePlayFinishStageRsp.ProtoReflect.Descriptor instead.
func (*MultistagePlayFinishStageRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{24}
}

func (x *MultistagePlayFinishStageRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *MultistagePlayFinishStageRsp) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *MultistagePlayFinishStageRsp) GetPlayIndex() uint32 {
	if x != nil {
		return x.PlayIndex
	}
	return 0
}

type MultistageSettleWatcherInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalProgress uint32 `protobuf:"varint,13,opt,name=total_progress,json=totalProgress,proto3" json:"total_progress,omitempty"`
	CurProgress   uint32 `protobuf:"varint,5,opt,name=cur_progress,json=curProgress,proto3" json:"cur_progress,omitempty"`
	WatcherId     uint32 `protobuf:"varint,7,opt,name=watcher_id,json=watcherId,proto3" json:"watcher_id,omitempty"`
	IsInverse     bool   `protobuf:"varint,12,opt,name=is_inverse,json=isInverse,proto3" json:"is_inverse,omitempty"`
}

func (x *MultistageSettleWatcherInfo) Reset() {
	*x = MultistageSettleWatcherInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultistageSettleWatcherInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultistageSettleWatcherInfo) ProtoMessage() {}

func (x *MultistageSettleWatcherInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultistageSettleWatcherInfo.ProtoReflect.Descriptor instead.
func (*MultistageSettleWatcherInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{25}
}

func (x *MultistageSettleWatcherInfo) GetTotalProgress() uint32 {
	if x != nil {
		return x.TotalProgress
	}
	return 0
}

func (x *MultistageSettleWatcherInfo) GetCurProgress() uint32 {
	if x != nil {
		return x.CurProgress
	}
	return 0
}

func (x *MultistageSettleWatcherInfo) GetWatcherId() uint32 {
	if x != nil {
		return x.WatcherId
	}
	return 0
}

func (x *MultistageSettleWatcherInfo) GetIsInverse() bool {
	if x != nil {
		return x.IsInverse
	}
	return false
}

type InBattleMechanicusSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId              uint32                         `protobuf:"varint,15,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	SceneTimeMs          uint64                         `protobuf:"varint,11,opt,name=scene_time_ms,json=sceneTimeMs,proto3" json:"scene_time_ms,omitempty"`
	DifficultyPercentage uint32                         `protobuf:"varint,6,opt,name=difficulty_percentage,json=difficultyPercentage,proto3" json:"difficulty_percentage,omitempty"`
	TotalToken           uint32                         `protobuf:"varint,7,opt,name=total_token,json=totalToken,proto3" json:"total_token,omitempty"`
	WatcherList          []*MultistageSettleWatcherInfo `protobuf:"bytes,3,rep,name=watcher_list,json=watcherList,proto3" json:"watcher_list,omitempty"`
	RealToken            uint32                         `protobuf:"varint,13,opt,name=real_token,json=realToken,proto3" json:"real_token,omitempty"`
	IsSuccess            bool                           `protobuf:"varint,2,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	PlayIndex            uint32                         `protobuf:"varint,14,opt,name=play_index,json=playIndex,proto3" json:"play_index,omitempty"`
}

func (x *InBattleMechanicusSettleNotify) Reset() {
	*x = InBattleMechanicusSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InBattleMechanicusSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InBattleMechanicusSettleNotify) ProtoMessage() {}

func (x *InBattleMechanicusSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InBattleMechanicusSettleNotify.ProtoReflect.Descriptor instead.
func (*InBattleMechanicusSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{26}
}

func (x *InBattleMechanicusSettleNotify) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *InBattleMechanicusSettleNotify) GetSceneTimeMs() uint64 {
	if x != nil {
		return x.SceneTimeMs
	}
	return 0
}

func (x *InBattleMechanicusSettleNotify) GetDifficultyPercentage() uint32 {
	if x != nil {
		return x.DifficultyPercentage
	}
	return 0
}

func (x *InBattleMechanicusSettleNotify) GetTotalToken() uint32 {
	if x != nil {
		return x.TotalToken
	}
	return 0
}

func (x *InBattleMechanicusSettleNotify) GetWatcherList() []*MultistageSettleWatcherInfo {
	if x != nil {
		return x.WatcherList
	}
	return nil
}

func (x *InBattleMechanicusSettleNotify) GetRealToken() uint32 {
	if x != nil {
		return x.RealToken
	}
	return 0
}

func (x *InBattleMechanicusSettleNotify) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *InBattleMechanicusSettleNotify) GetPlayIndex() uint32 {
	if x != nil {
		return x.PlayIndex
	}
	return 0
}

type InBattleMechanicusSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneTimeMs          uint64                         `protobuf:"varint,15,opt,name=scene_time_ms,json=sceneTimeMs,proto3" json:"scene_time_ms,omitempty"`
	TotalToken           uint32                         `protobuf:"varint,4,opt,name=total_token,json=totalToken,proto3" json:"total_token,omitempty"`
	RealToken            uint32                         `protobuf:"varint,8,opt,name=real_token,json=realToken,proto3" json:"real_token,omitempty"`
	WatcherList          []*MultistageSettleWatcherInfo `protobuf:"bytes,7,rep,name=watcher_list,json=watcherList,proto3" json:"watcher_list,omitempty"`
	IsSuccess            bool                           `protobuf:"varint,6,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	PlayIndex            uint32                         `protobuf:"varint,3,opt,name=play_index,json=playIndex,proto3" json:"play_index,omitempty"`
	DifficultyPercentage uint32                         `protobuf:"varint,10,opt,name=difficulty_percentage,json=difficultyPercentage,proto3" json:"difficulty_percentage,omitempty"`
	GroupId              uint32                         `protobuf:"varint,13,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *InBattleMechanicusSettleInfo) Reset() {
	*x = InBattleMechanicusSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InBattleMechanicusSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InBattleMechanicusSettleInfo) ProtoMessage() {}

func (x *InBattleMechanicusSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InBattleMechanicusSettleInfo.ProtoReflect.Descriptor instead.
func (*InBattleMechanicusSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{27}
}

func (x *InBattleMechanicusSettleInfo) GetSceneTimeMs() uint64 {
	if x != nil {
		return x.SceneTimeMs
	}
	return 0
}

func (x *InBattleMechanicusSettleInfo) GetTotalToken() uint32 {
	if x != nil {
		return x.TotalToken
	}
	return 0
}

func (x *InBattleMechanicusSettleInfo) GetRealToken() uint32 {
	if x != nil {
		return x.RealToken
	}
	return 0
}

func (x *InBattleMechanicusSettleInfo) GetWatcherList() []*MultistageSettleWatcherInfo {
	if x != nil {
		return x.WatcherList
	}
	return nil
}

func (x *InBattleMechanicusSettleInfo) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *InBattleMechanicusSettleInfo) GetPlayIndex() uint32 {
	if x != nil {
		return x.PlayIndex
	}
	return 0
}

func (x *InBattleMechanicusSettleInfo) GetDifficultyPercentage() uint32 {
	if x != nil {
		return x.DifficultyPercentage
	}
	return 0
}

func (x *InBattleMechanicusSettleInfo) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type MultistagePlaySettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayIndex uint32 `protobuf:"varint,14,opt,name=play_index,json=playIndex,proto3" json:"play_index,omitempty"`
	GroupId   uint32 `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// Types that are assignable to Detail:
	//
	//	*MultistagePlaySettleNotify_MechanicusSettleInfo
	//	*MultistagePlaySettleNotify_ChessSettleInfo
	//	*MultistagePlaySettleNotify_IrodoriChessSettleInfo
	Detail isMultistagePlaySettleNotify_Detail `protobuf_oneof:"detail"`
}

func (x *MultistagePlaySettleNotify) Reset() {
	*x = MultistagePlaySettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultistagePlaySettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultistagePlaySettleNotify) ProtoMessage() {}

func (x *MultistagePlaySettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultistagePlaySettleNotify.ProtoReflect.Descriptor instead.
func (*MultistagePlaySettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{28}
}

func (x *MultistagePlaySettleNotify) GetPlayIndex() uint32 {
	if x != nil {
		return x.PlayIndex
	}
	return 0
}

func (x *MultistagePlaySettleNotify) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (m *MultistagePlaySettleNotify) GetDetail() isMultistagePlaySettleNotify_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *MultistagePlaySettleNotify) GetMechanicusSettleInfo() *InBattleMechanicusSettleInfo {
	if x, ok := x.GetDetail().(*MultistagePlaySettleNotify_MechanicusSettleInfo); ok {
		return x.MechanicusSettleInfo
	}
	return nil
}

func (x *MultistagePlaySettleNotify) GetChessSettleInfo() *InBattleChessSettleInfo {
	if x, ok := x.GetDetail().(*MultistagePlaySettleNotify_ChessSettleInfo); ok {
		return x.ChessSettleInfo
	}
	return nil
}

func (x *MultistagePlaySettleNotify) GetIrodoriChessSettleInfo() *InBattleIrodoriChessSettleInfo {
	if x, ok := x.GetDetail().(*MultistagePlaySettleNotify_IrodoriChessSettleInfo); ok {
		return x.IrodoriChessSettleInfo
	}
	return nil
}

type isMultistagePlaySettleNotify_Detail interface {
	isMultistagePlaySettleNotify_Detail()
}

type MultistagePlaySettleNotify_MechanicusSettleInfo struct {
	MechanicusSettleInfo *InBattleMechanicusSettleInfo `protobuf:"bytes,1402,opt,name=mechanicus_settle_info,json=mechanicusSettleInfo,proto3,oneof"`
}

type MultistagePlaySettleNotify_ChessSettleInfo struct {
	ChessSettleInfo *InBattleChessSettleInfo `protobuf:"bytes,1283,opt,name=chess_settle_info,json=chessSettleInfo,proto3,oneof"`
}

type MultistagePlaySettleNotify_IrodoriChessSettleInfo struct {
	IrodoriChessSettleInfo *InBattleIrodoriChessSettleInfo `protobuf:"bytes,612,opt,name=irodori_chess_settle_info,json=irodoriChessSettleInfo,proto3,oneof"`
}

func (*MultistagePlaySettleNotify_MechanicusSettleInfo) isMultistagePlaySettleNotify_Detail() {}

func (*MultistagePlaySettleNotify_ChessSettleInfo) isMultistagePlaySettleNotify_Detail() {}

func (*MultistagePlaySettleNotify_IrodoriChessSettleInfo) isMultistagePlaySettleNotify_Detail() {}

type MultistagePlayStageEndNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   uint32 `protobuf:"varint,15,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PlayIndex uint32 `protobuf:"varint,9,opt,name=play_index,json=playIndex,proto3" json:"play_index,omitempty"`
}

func (x *MultistagePlayStageEndNotify) Reset() {
	*x = MultistagePlayStageEndNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultistagePlayStageEndNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultistagePlayStageEndNotify) ProtoMessage() {}

func (x *MultistagePlayStageEndNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultistagePlayStageEndNotify.ProtoReflect.Descriptor instead.
func (*MultistagePlayStageEndNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{29}
}

func (x *MultistagePlayStageEndNotify) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *MultistagePlayStageEndNotify) GetPlayIndex() uint32 {
	if x != nil {
		return x.PlayIndex
	}
	return 0
}

type MultistagePlayEndNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   uint32 `protobuf:"varint,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PlayIndex uint32 `protobuf:"varint,13,opt,name=play_index,json=playIndex,proto3" json:"play_index,omitempty"`
}

func (x *MultistagePlayEndNotify) Reset() {
	*x = MultistagePlayEndNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultistagePlayEndNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultistagePlayEndNotify) ProtoMessage() {}

func (x *MultistagePlayEndNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultistagePlayEndNotify.ProtoReflect.Descriptor instead.
func (*MultistagePlayEndNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{30}
}

func (x *MultistagePlayEndNotify) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *MultistagePlayEndNotify) GetPlayIndex() uint32 {
	if x != nil {
		return x.PlayIndex
	}
	return 0
}

type FleurFairBuffEnergyNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Energy uint32 `protobuf:"varint,4,opt,name=energy,proto3" json:"energy,omitempty"`
}

func (x *FleurFairBuffEnergyNotify) Reset() {
	*x = FleurFairBuffEnergyNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairBuffEnergyNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairBuffEnergyNotify) ProtoMessage() {}

func (x *FleurFairBuffEnergyNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairBuffEnergyNotify.ProtoReflect.Descriptor instead.
func (*FleurFairBuffEnergyNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{31}
}

func (x *FleurFairBuffEnergyNotify) GetEnergy() uint32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

type FleurFairGallerySettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Energy            uint32           `protobuf:"varint,2,opt,name=energy,proto3" json:"energy,omitempty"`
	GalleryStageIndex uint32           `protobuf:"varint,11,opt,name=gallery_stage_index,json=galleryStageIndex,proto3" json:"gallery_stage_index,omitempty"`
	EnergyStatMap     map[uint32]int32 `protobuf:"bytes,6,rep,name=energy_stat_map,json=energyStatMap,proto3" json:"energy_stat_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GalleryStageCount uint32           `protobuf:"varint,9,opt,name=gallery_stage_count,json=galleryStageCount,proto3" json:"gallery_stage_count,omitempty"`
	IsSuccess         bool             `protobuf:"varint,1,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
}

func (x *FleurFairGallerySettleInfo) Reset() {
	*x = FleurFairGallerySettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairGallerySettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairGallerySettleInfo) ProtoMessage() {}

func (x *FleurFairGallerySettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairGallerySettleInfo.ProtoReflect.Descriptor instead.
func (*FleurFairGallerySettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{32}
}

func (x *FleurFairGallerySettleInfo) GetEnergy() uint32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

func (x *FleurFairGallerySettleInfo) GetGalleryStageIndex() uint32 {
	if x != nil {
		return x.GalleryStageIndex
	}
	return 0
}

func (x *FleurFairGallerySettleInfo) GetEnergyStatMap() map[uint32]int32 {
	if x != nil {
		return x.EnergyStatMap
	}
	return nil
}

func (x *FleurFairGallerySettleInfo) GetGalleryStageCount() uint32 {
	if x != nil {
		return x.GalleryStageCount
	}
	return 0
}

func (x *FleurFairGallerySettleInfo) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

type FleurFairPlayerStatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlineId       string          `protobuf:"bytes,11,opt,name=online_id,json=onlineId,proto3" json:"online_id,omitempty"`
	Uid            uint32          `protobuf:"varint,8,opt,name=uid,proto3" json:"uid,omitempty"`
	ProfilePicture *ProfilePicture `protobuf:"bytes,1,opt,name=profile_picture,json=profilePicture,proto3" json:"profile_picture,omitempty"`
	StatId         uint32          `protobuf:"varint,3,opt,name=stat_id,json=statId,proto3" json:"stat_id,omitempty"`
	HeadImage      uint32          `protobuf:"varint,6,opt,name=head_image,json=headImage,proto3" json:"head_image,omitempty"`
	NickName       string          `protobuf:"bytes,15,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	Param          int32           `protobuf:"varint,5,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *FleurFairPlayerStatInfo) Reset() {
	*x = FleurFairPlayerStatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairPlayerStatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairPlayerStatInfo) ProtoMessage() {}

func (x *FleurFairPlayerStatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairPlayerStatInfo.ProtoReflect.Descriptor instead.
func (*FleurFairPlayerStatInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{33}
}

func (x *FleurFairPlayerStatInfo) GetOnlineId() string {
	if x != nil {
		return x.OnlineId
	}
	return ""
}

func (x *FleurFairPlayerStatInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FleurFairPlayerStatInfo) GetProfilePicture() *ProfilePicture {
	if x != nil {
		return x.ProfilePicture
	}
	return nil
}

func (x *FleurFairPlayerStatInfo) GetStatId() uint32 {
	if x != nil {
		return x.StatId
	}
	return 0
}

func (x *FleurFairPlayerStatInfo) GetHeadImage() uint32 {
	if x != nil {
		return x.HeadImage
	}
	return 0
}

func (x *FleurFairPlayerStatInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *FleurFairPlayerStatInfo) GetParam() int32 {
	if x != nil {
		return x.Param
	}
	return 0
}

type FleurFairBossSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardTokenNum uint32                     `protobuf:"varint,15,opt,name=reward_token_num,json=rewardTokenNum,proto3" json:"reward_token_num,omitempty"`
	StatInfoList   []*FleurFairPlayerStatInfo `protobuf:"bytes,1,rep,name=stat_info_list,json=statInfoList,proto3" json:"stat_info_list,omitempty"`
	IsSuccess      bool                       `protobuf:"varint,10,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	Energy         uint32                     `protobuf:"varint,12,opt,name=energy,proto3" json:"energy,omitempty"`
	CostTime       uint32                     `protobuf:"varint,8,opt,name=cost_time,json=costTime,proto3" json:"cost_time,omitempty"`
}

func (x *FleurFairBossSettleInfo) Reset() {
	*x = FleurFairBossSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairBossSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairBossSettleInfo) ProtoMessage() {}

func (x *FleurFairBossSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairBossSettleInfo.ProtoReflect.Descriptor instead.
func (*FleurFairBossSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{34}
}

func (x *FleurFairBossSettleInfo) GetRewardTokenNum() uint32 {
	if x != nil {
		return x.RewardTokenNum
	}
	return 0
}

func (x *FleurFairBossSettleInfo) GetStatInfoList() []*FleurFairPlayerStatInfo {
	if x != nil {
		return x.StatInfoList
	}
	return nil
}

func (x *FleurFairBossSettleInfo) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *FleurFairBossSettleInfo) GetEnergy() uint32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

func (x *FleurFairBossSettleInfo) GetCostTime() uint32 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

type FleurFairStageSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageType uint32 `protobuf:"varint,10,opt,name=stage_type,json=stageType,proto3" json:"stage_type,omitempty"`
	// Types that are assignable to Detail:
	//
	//	*FleurFairStageSettleNotify_GallerySettleInfo
	//	*FleurFairStageSettleNotify_BossSettleInfo
	Detail isFleurFairStageSettleNotify_Detail `protobuf_oneof:"detail"`
}

func (x *FleurFairStageSettleNotify) Reset() {
	*x = FleurFairStageSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairStageSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairStageSettleNotify) ProtoMessage() {}

func (x *FleurFairStageSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairStageSettleNotify.ProtoReflect.Descriptor instead.
func (*FleurFairStageSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{35}
}

func (x *FleurFairStageSettleNotify) GetStageType() uint32 {
	if x != nil {
		return x.StageType
	}
	return 0
}

func (m *FleurFairStageSettleNotify) GetDetail() isFleurFairStageSettleNotify_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *FleurFairStageSettleNotify) GetGallerySettleInfo() *FleurFairGallerySettleInfo {
	if x, ok := x.GetDetail().(*FleurFairStageSettleNotify_GallerySettleInfo); ok {
		return x.GallerySettleInfo
	}
	return nil
}

func (x *FleurFairStageSettleNotify) GetBossSettleInfo() *FleurFairBossSettleInfo {
	if x, ok := x.GetDetail().(*FleurFairStageSettleNotify_BossSettleInfo); ok {
		return x.BossSettleInfo
	}
	return nil
}

type isFleurFairStageSettleNotify_Detail interface {
	isFleurFairStageSettleNotify_Detail()
}

type FleurFairStageSettleNotify_GallerySettleInfo struct {
	GallerySettleInfo *FleurFairGallerySettleInfo `protobuf:"bytes,13,opt,name=gallery_settle_info,json=gallerySettleInfo,proto3,oneof"`
}

type FleurFairStageSettleNotify_BossSettleInfo struct {
	BossSettleInfo *FleurFairBossSettleInfo `protobuf:"bytes,14,opt,name=boss_settle_info,json=bossSettleInfo,proto3,oneof"`
}

func (*FleurFairStageSettleNotify_GallerySettleInfo) isFleurFairStageSettleNotify_Detail() {}

func (*FleurFairStageSettleNotify_BossSettleInfo) isFleurFairStageSettleNotify_Detail() {}

type FleurFairFinishGalleryStageNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FleurFairFinishGalleryStageNotify) Reset() {
	*x = FleurFairFinishGalleryStageNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairFinishGalleryStageNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairFinishGalleryStageNotify) ProtoMessage() {}

func (x *FleurFairFinishGalleryStageNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairFinishGalleryStageNotify.ProtoReflect.Descriptor instead.
func (*FleurFairFinishGalleryStageNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{36}
}

type HideAndSeekPlayerBattleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostumeId uint32   `protobuf:"varint,3,opt,name=costume_id,json=costumeId,proto3" json:"costume_id,omitempty"`
	SkillList []uint32 `protobuf:"varint,15,rep,packed,name=skill_list,json=skillList,proto3" json:"skill_list,omitempty"`
	IsReady   bool     `protobuf:"varint,12,opt,name=is_ready,json=isReady,proto3" json:"is_ready,omitempty"`
	AvatarId  uint32   `protobuf:"varint,6,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
}

func (x *HideAndSeekPlayerBattleInfo) Reset() {
	*x = HideAndSeekPlayerBattleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideAndSeekPlayerBattleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideAndSeekPlayerBattleInfo) ProtoMessage() {}

func (x *HideAndSeekPlayerBattleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideAndSeekPlayerBattleInfo.ProtoReflect.Descriptor instead.
func (*HideAndSeekPlayerBattleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{37}
}

func (x *HideAndSeekPlayerBattleInfo) GetCostumeId() uint32 {
	if x != nil {
		return x.CostumeId
	}
	return 0
}

func (x *HideAndSeekPlayerBattleInfo) GetSkillList() []uint32 {
	if x != nil {
		return x.SkillList
	}
	return nil
}

func (x *HideAndSeekPlayerBattleInfo) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

func (x *HideAndSeekPlayerBattleInfo) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

type HideAndSeekStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId         uint32                                  `protobuf:"varint,8,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	IsRecordScore bool                                    `protobuf:"varint,3,opt,name=is_record_score,json=isRecordScore,proto3" json:"is_record_score,omitempty"`
	StageType     HideAndSeekStageType                    `protobuf:"varint,7,opt,name=stage_type,json=stageType,proto3,enum=proto.HideAndSeekStageType" json:"stage_type,omitempty"`
	BattleInfoMap map[uint32]*HideAndSeekPlayerBattleInfo `protobuf:"bytes,2,rep,name=battle_info_map,json=battleInfoMap,proto3" json:"battle_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HiderUidList  []uint32                                `protobuf:"varint,1,rep,packed,name=hider_uid_list,json=hiderUidList,proto3" json:"hider_uid_list,omitempty"`
	HunterUid     uint32                                  `protobuf:"varint,10,opt,name=hunter_uid,json=hunterUid,proto3" json:"hunter_uid,omitempty"`
}

func (x *HideAndSeekStageInfo) Reset() {
	*x = HideAndSeekStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideAndSeekStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideAndSeekStageInfo) ProtoMessage() {}

func (x *HideAndSeekStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideAndSeekStageInfo.ProtoReflect.Descriptor instead.
func (*HideAndSeekStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{38}
}

func (x *HideAndSeekStageInfo) GetMapId() uint32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *HideAndSeekStageInfo) GetIsRecordScore() bool {
	if x != nil {
		return x.IsRecordScore
	}
	return false
}

func (x *HideAndSeekStageInfo) GetStageType() HideAndSeekStageType {
	if x != nil {
		return x.StageType
	}
	return HideAndSeekStageType_HIDE_AND_SEEK_STAGE_PREPARE
}

func (x *HideAndSeekStageInfo) GetBattleInfoMap() map[uint32]*HideAndSeekPlayerBattleInfo {
	if x != nil {
		return x.BattleInfoMap
	}
	return nil
}

func (x *HideAndSeekStageInfo) GetHiderUidList() []uint32 {
	if x != nil {
		return x.HiderUidList
	}
	return nil
}

func (x *HideAndSeekStageInfo) GetHunterUid() uint32 {
	if x != nil {
		return x.HunterUid
	}
	return 0
}

type HideAndSeekSelectAvatarReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId uint32 `protobuf:"varint,8,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
}

func (x *HideAndSeekSelectAvatarReq) Reset() {
	*x = HideAndSeekSelectAvatarReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideAndSeekSelectAvatarReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideAndSeekSelectAvatarReq) ProtoMessage() {}

func (x *HideAndSeekSelectAvatarReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideAndSeekSelectAvatarReq.ProtoReflect.Descriptor instead.
func (*HideAndSeekSelectAvatarReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{39}
}

func (x *HideAndSeekSelectAvatarReq) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

type HideAndSeekSelectAvatarRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode  int32  `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
	AvatarId uint32 `protobuf:"varint,3,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
}

func (x *HideAndSeekSelectAvatarRsp) Reset() {
	*x = HideAndSeekSelectAvatarRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideAndSeekSelectAvatarRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideAndSeekSelectAvatarRsp) ProtoMessage() {}

func (x *HideAndSeekSelectAvatarRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideAndSeekSelectAvatarRsp.ProtoReflect.Descriptor instead.
func (*HideAndSeekSelectAvatarRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{40}
}

func (x *HideAndSeekSelectAvatarRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *HideAndSeekSelectAvatarRsp) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

type HideAndSeekSetReadyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HideAndSeekSetReadyReq) Reset() {
	*x = HideAndSeekSetReadyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideAndSeekSetReadyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideAndSeekSetReadyReq) ProtoMessage() {}

func (x *HideAndSeekSetReadyReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideAndSeekSetReadyReq.ProtoReflect.Descriptor instead.
func (*HideAndSeekSetReadyReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{41}
}

type HideAndSeekSetReadyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *HideAndSeekSetReadyRsp) Reset() {
	*x = HideAndSeekSetReadyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideAndSeekSetReadyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideAndSeekSetReadyRsp) ProtoMessage() {}

func (x *HideAndSeekSetReadyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideAndSeekSetReadyRsp.ProtoReflect.Descriptor instead.
func (*HideAndSeekSetReadyRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{42}
}

func (x *HideAndSeekSetReadyRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type HideAndSeekSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid            uint32                   `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	ProfilePicture *ProfilePicture          `protobuf:"bytes,1,opt,name=profile_picture,json=profilePicture,proto3" json:"profile_picture,omitempty"`
	CardList       []*ExhibitionDisplayInfo `protobuf:"bytes,8,rep,name=card_list,json=cardList,proto3" json:"card_list,omitempty"`
	Nickname       string                   `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	HeadImage      uint32                   `protobuf:"varint,4,opt,name=head_image,json=headImage,proto3" json:"head_image,omitempty"`
	OnlineId       string                   `protobuf:"bytes,10,opt,name=online_id,json=onlineId,proto3" json:"online_id,omitempty"`
}

func (x *HideAndSeekSettleInfo) Reset() {
	*x = HideAndSeekSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideAndSeekSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideAndSeekSettleInfo) ProtoMessage() {}

func (x *HideAndSeekSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideAndSeekSettleInfo.ProtoReflect.Descriptor instead.
func (*HideAndSeekSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{43}
}

func (x *HideAndSeekSettleInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *HideAndSeekSettleInfo) GetProfilePicture() *ProfilePicture {
	if x != nil {
		return x.ProfilePicture
	}
	return nil
}

func (x *HideAndSeekSettleInfo) GetCardList() []*ExhibitionDisplayInfo {
	if x != nil {
		return x.CardList
	}
	return nil
}

func (x *HideAndSeekSettleInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *HideAndSeekSettleInfo) GetHeadImage() uint32 {
	if x != nil {
		return x.HeadImage
	}
	return 0
}

func (x *HideAndSeekSettleInfo) GetOnlineId() string {
	if x != nil {
		return x.OnlineId
	}
	return ""
}

type HideAndSeekSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostTime       uint32                               `protobuf:"varint,2,opt,name=cost_time,json=costTime,proto3" json:"cost_time,omitempty"`
	SettleInfoList []*HideAndSeekSettleInfo             `protobuf:"bytes,8,rep,name=settle_info_list,json=settleInfoList,proto3" json:"settle_info_list,omitempty"`
	WinnerList     []uint32                             `protobuf:"varint,15,rep,packed,name=winner_list,json=winnerList,proto3" json:"winner_list,omitempty"`
	Reason         HideAndSeekSettleNotify_SettleReason `protobuf:"varint,4,opt,name=reason,proto3,enum=proto.HideAndSeekSettleNotify_SettleReason" json:"reason,omitempty"`
	PlayIndex      uint32                               `protobuf:"varint,13,opt,name=play_index,json=playIndex,proto3" json:"play_index,omitempty"`
	IsRecordScore  bool                                 `protobuf:"varint,6,opt,name=is_record_score,json=isRecordScore,proto3" json:"is_record_score,omitempty"`
	ScoreList      []*ExhibitionDisplayInfo             `protobuf:"bytes,9,rep,name=score_list,json=scoreList,proto3" json:"score_list,omitempty"`
	StageType      uint32                               `protobuf:"varint,14,opt,name=stage_type,json=stageType,proto3" json:"stage_type,omitempty"`
}

func (x *HideAndSeekSettleNotify) Reset() {
	*x = HideAndSeekSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideAndSeekSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideAndSeekSettleNotify) ProtoMessage() {}

func (x *HideAndSeekSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideAndSeekSettleNotify.ProtoReflect.Descriptor instead.
func (*HideAndSeekSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{44}
}

func (x *HideAndSeekSettleNotify) GetCostTime() uint32 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

func (x *HideAndSeekSettleNotify) GetSettleInfoList() []*HideAndSeekSettleInfo {
	if x != nil {
		return x.SettleInfoList
	}
	return nil
}

func (x *HideAndSeekSettleNotify) GetWinnerList() []uint32 {
	if x != nil {
		return x.WinnerList
	}
	return nil
}

func (x *HideAndSeekSettleNotify) GetReason() HideAndSeekSettleNotify_SettleReason {
	if x != nil {
		return x.Reason
	}
	return HideAndSeekSettleNotify_SETTLE_REASON_TIME_OUT
}

func (x *HideAndSeekSettleNotify) GetPlayIndex() uint32 {
	if x != nil {
		return x.PlayIndex
	}
	return 0
}

func (x *HideAndSeekSettleNotify) GetIsRecordScore() bool {
	if x != nil {
		return x.IsRecordScore
	}
	return false
}

func (x *HideAndSeekSettleNotify) GetScoreList() []*ExhibitionDisplayInfo {
	if x != nil {
		return x.ScoreList
	}
	return nil
}

func (x *HideAndSeekSettleNotify) GetStageType() uint32 {
	if x != nil {
		return x.StageType
	}
	return 0
}

type HideAndSeekPlayerReadyNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UidList []uint32 `protobuf:"varint,5,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"`
}

func (x *HideAndSeekPlayerReadyNotify) Reset() {
	*x = HideAndSeekPlayerReadyNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideAndSeekPlayerReadyNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideAndSeekPlayerReadyNotify) ProtoMessage() {}

func (x *HideAndSeekPlayerReadyNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideAndSeekPlayerReadyNotify.ProtoReflect.Descriptor instead.
func (*HideAndSeekPlayerReadyNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{45}
}

func (x *HideAndSeekPlayerReadyNotify) GetUidList() []uint32 {
	if x != nil {
		return x.UidList
	}
	return nil
}

type HideAndSeekPlayerSetAvatarNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId  uint32 `protobuf:"varint,2,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	CostumeId uint32 `protobuf:"varint,13,opt,name=costume_id,json=costumeId,proto3" json:"costume_id,omitempty"`
	Uid       uint32 `protobuf:"varint,5,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *HideAndSeekPlayerSetAvatarNotify) Reset() {
	*x = HideAndSeekPlayerSetAvatarNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideAndSeekPlayerSetAvatarNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideAndSeekPlayerSetAvatarNotify) ProtoMessage() {}

func (x *HideAndSeekPlayerSetAvatarNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideAndSeekPlayerSetAvatarNotify.ProtoReflect.Descriptor instead.
func (*HideAndSeekPlayerSetAvatarNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{46}
}

func (x *HideAndSeekPlayerSetAvatarNotify) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *HideAndSeekPlayerSetAvatarNotify) GetCostumeId() uint32 {
	if x != nil {
		return x.CostumeId
	}
	return 0
}

func (x *HideAndSeekPlayerSetAvatarNotify) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type ChessCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EffectStack uint32 `protobuf:"varint,12,opt,name=effect_stack,json=effectStack,proto3" json:"effect_stack,omitempty"`
	CardId      uint32 `protobuf:"varint,11,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
}

func (x *ChessCardInfo) Reset() {
	*x = ChessCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessCardInfo) ProtoMessage() {}

func (x *ChessCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessCardInfo.ProtoReflect.Descriptor instead.
func (*ChessCardInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{47}
}

func (x *ChessCardInfo) GetEffectStack() uint32 {
	if x != nil {
		return x.EffectStack
	}
	return 0
}

func (x *ChessCardInfo) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

type InBattleChessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BanCardTagList       []uint32                    `protobuf:"varint,2,rep,packed,name=ban_card_tag_list,json=banCardTagList,proto3" json:"ban_card_tag_list,omitempty"`
	Round                uint32                      `protobuf:"varint,4,opt,name=round,proto3" json:"round,omitempty"`
	SelectedCardInfoList []*ChessCardInfo            `protobuf:"bytes,9,rep,name=selected_card_info_list,json=selectedCardInfoList,proto3" json:"selected_card_info_list,omitempty"`
	MysteryInfo          *ChessMysteryInfo           `protobuf:"bytes,1,opt,name=mystery_info,json=mysteryInfo,proto3" json:"mystery_info,omitempty"`
	PlayerInfoMap        map[uint32]*ChessPlayerInfo `protobuf:"bytes,8,rep,name=player_info_map,json=playerInfoMap,proto3" json:"player_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MaxEscapableMonsters uint32                      `protobuf:"varint,6,opt,name=max_escapable_monsters,json=maxEscapableMonsters,proto3" json:"max_escapable_monsters,omitempty"`
	ExcapedMonsters      uint32                      `protobuf:"varint,12,opt,name=excaped_monsters,json=excapedMonsters,proto3" json:"excaped_monsters,omitempty"`
	TotalRound           uint32                      `protobuf:"varint,14,opt,name=total_round,json=totalRound,proto3" json:"total_round,omitempty"`
	LeftMonsters         uint32                      `protobuf:"varint,15,opt,name=left_monsters,json=leftMonsters,proto3" json:"left_monsters,omitempty"`
}

func (x *InBattleChessInfo) Reset() {
	*x = InBattleChessInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InBattleChessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InBattleChessInfo) ProtoMessage() {}

func (x *InBattleChessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InBattleChessInfo.ProtoReflect.Descriptor instead.
func (*InBattleChessInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{48}
}

func (x *InBattleChessInfo) GetBanCardTagList() []uint32 {
	if x != nil {
		return x.BanCardTagList
	}
	return nil
}

func (x *InBattleChessInfo) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *InBattleChessInfo) GetSelectedCardInfoList() []*ChessCardInfo {
	if x != nil {
		return x.SelectedCardInfoList
	}
	return nil
}

func (x *InBattleChessInfo) GetMysteryInfo() *ChessMysteryInfo {
	if x != nil {
		return x.MysteryInfo
	}
	return nil
}

func (x *InBattleChessInfo) GetPlayerInfoMap() map[uint32]*ChessPlayerInfo {
	if x != nil {
		return x.PlayerInfoMap
	}
	return nil
}

func (x *InBattleChessInfo) GetMaxEscapableMonsters() uint32 {
	if x != nil {
		return x.MaxEscapableMonsters
	}
	return 0
}

func (x *InBattleChessInfo) GetExcapedMonsters() uint32 {
	if x != nil {
		return x.ExcapedMonsters
	}
	return 0
}

func (x *InBattleChessInfo) GetTotalRound() uint32 {
	if x != nil {
		return x.TotalRound
	}
	return 0
}

func (x *InBattleChessInfo) GetLeftMonsters() uint32 {
	if x != nil {
		return x.LeftMonsters
	}
	return 0
}

type InBattleChessSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess     bool                     `protobuf:"varint,7,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	ChessExp      uint32                   `protobuf:"varint,11,opt,name=chess_exp,json=chessExp,proto3" json:"chess_exp,omitempty"`
	ChessLevel    uint32                   `protobuf:"varint,13,opt,name=chess_level,json=chessLevel,proto3" json:"chess_level,omitempty"`
	OldChessLevel uint32                   `protobuf:"varint,10,opt,name=old_chess_level,json=oldChessLevel,proto3" json:"old_chess_level,omitempty"`
	ScoreList     []*ExhibitionDisplayInfo `protobuf:"bytes,1,rep,name=score_list,json=scoreList,proto3" json:"score_list,omitempty"`
	SceneTimeMs   uint64                   `protobuf:"varint,14,opt,name=scene_time_ms,json=sceneTimeMs,proto3" json:"scene_time_ms,omitempty"`
	OldChessExp   uint32                   `protobuf:"varint,2,opt,name=old_chess_exp,json=oldChessExp,proto3" json:"old_chess_exp,omitempty"`
}

func (x *InBattleChessSettleInfo) Reset() {
	*x = InBattleChessSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InBattleChessSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InBattleChessSettleInfo) ProtoMessage() {}

func (x *InBattleChessSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InBattleChessSettleInfo.ProtoReflect.Descriptor instead.
func (*InBattleChessSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{49}
}

func (x *InBattleChessSettleInfo) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *InBattleChessSettleInfo) GetChessExp() uint32 {
	if x != nil {
		return x.ChessExp
	}
	return 0
}

func (x *InBattleChessSettleInfo) GetChessLevel() uint32 {
	if x != nil {
		return x.ChessLevel
	}
	return 0
}

func (x *InBattleChessSettleInfo) GetOldChessLevel() uint32 {
	if x != nil {
		return x.OldChessLevel
	}
	return 0
}

func (x *InBattleChessSettleInfo) GetScoreList() []*ExhibitionDisplayInfo {
	if x != nil {
		return x.ScoreList
	}
	return nil
}

func (x *InBattleChessSettleInfo) GetSceneTimeMs() uint64 {
	if x != nil {
		return x.SceneTimeMs
	}
	return 0
}

func (x *InBattleChessSettleInfo) GetOldChessExp() uint32 {
	if x != nil {
		return x.OldChessExp
	}
	return 0
}

type ChessPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                   uint32                 `protobuf:"varint,5,opt,name=uid,proto3" json:"uid,omitempty"`
	FreeRefreshLimit      uint32                 `protobuf:"varint,10,opt,name=free_refresh_limit,json=freeRefreshLimit,proto3" json:"free_refresh_limit,omitempty"`
	CandidateCardInfoList []*ChessNormalCardInfo `protobuf:"bytes,3,rep,name=candidate_card_info_list,json=candidateCardInfoList,proto3" json:"candidate_card_info_list,omitempty"`
	BuildingPoints        uint32                 `protobuf:"varint,12,opt,name=building_points,json=buildingPoints,proto3" json:"building_points,omitempty"`
	CandidateIndex        uint32                 `protobuf:"varint,6,opt,name=candidate_index,json=candidateIndex,proto3" json:"candidate_index,omitempty"`
	FreeRefreshCount      uint32                 `protobuf:"varint,13,opt,name=free_refresh_count,json=freeRefreshCount,proto3" json:"free_refresh_count,omitempty"`
	RefreshCost           uint32                 `protobuf:"varint,7,opt,name=refresh_cost,json=refreshCost,proto3" json:"refresh_cost,omitempty"`
}

func (x *ChessPlayerInfo) Reset() {
	*x = ChessPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessPlayerInfo) ProtoMessage() {}

func (x *ChessPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessPlayerInfo.ProtoReflect.Descriptor instead.
func (*ChessPlayerInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{50}
}

func (x *ChessPlayerInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ChessPlayerInfo) GetFreeRefreshLimit() uint32 {
	if x != nil {
		return x.FreeRefreshLimit
	}
	return 0
}

func (x *ChessPlayerInfo) GetCandidateCardInfoList() []*ChessNormalCardInfo {
	if x != nil {
		return x.CandidateCardInfoList
	}
	return nil
}

func (x *ChessPlayerInfo) GetBuildingPoints() uint32 {
	if x != nil {
		return x.BuildingPoints
	}
	return 0
}

func (x *ChessPlayerInfo) GetCandidateIndex() uint32 {
	if x != nil {
		return x.CandidateIndex
	}
	return 0
}

func (x *ChessPlayerInfo) GetFreeRefreshCount() uint32 {
	if x != nil {
		return x.FreeRefreshCount
	}
	return 0
}

func (x *ChessPlayerInfo) GetRefreshCost() uint32 {
	if x != nil {
		return x.RefreshCost
	}
	return 0
}

type ChessMonsterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterId uint32   `protobuf:"varint,12,opt,name=monster_id,json=monsterId,proto3" json:"monster_id,omitempty"`
	Level     uint32   `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	AffixList []uint32 `protobuf:"varint,13,rep,packed,name=affix_list,json=affixList,proto3" json:"affix_list,omitempty"`
}

func (x *ChessMonsterInfo) Reset() {
	*x = ChessMonsterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessMonsterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessMonsterInfo) ProtoMessage() {}

func (x *ChessMonsterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessMonsterInfo.ProtoReflect.Descriptor instead.
func (*ChessMonsterInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{51}
}

func (x *ChessMonsterInfo) GetMonsterId() uint32 {
	if x != nil {
		return x.MonsterId
	}
	return 0
}

func (x *ChessMonsterInfo) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ChessMonsterInfo) GetAffixList() []uint32 {
	if x != nil {
		return x.AffixList
	}
	return nil
}

type ChessEntranceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterInfoList []*ChessMonsterInfo `protobuf:"bytes,14,rep,name=monster_info_list,json=monsterInfoList,proto3" json:"monster_info_list,omitempty"`
	EntranceIndex   uint32              `protobuf:"varint,15,opt,name=entrance_index,json=entranceIndex,proto3" json:"entrance_index,omitempty"`
	EntrancePointId uint32              `protobuf:"varint,8,opt,name=entrance_point_id,json=entrancePointId,proto3" json:"entrance_point_id,omitempty"`
}

func (x *ChessEntranceInfo) Reset() {
	*x = ChessEntranceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessEntranceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessEntranceInfo) ProtoMessage() {}

func (x *ChessEntranceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessEntranceInfo.ProtoReflect.Descriptor instead.
func (*ChessEntranceInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{52}
}

func (x *ChessEntranceInfo) GetMonsterInfoList() []*ChessMonsterInfo {
	if x != nil {
		return x.MonsterInfoList
	}
	return nil
}

func (x *ChessEntranceInfo) GetEntranceIndex() uint32 {
	if x != nil {
		return x.EntranceIndex
	}
	return 0
}

func (x *ChessEntranceInfo) GetEntrancePointId() uint32 {
	if x != nil {
		return x.EntrancePointId
	}
	return 0
}

type ChessEntranceDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoList []*ChessEntranceInfo `protobuf:"bytes,4,rep,name=info_list,json=infoList,proto3" json:"info_list,omitempty"`
}

func (x *ChessEntranceDetailInfo) Reset() {
	*x = ChessEntranceDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessEntranceDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessEntranceDetailInfo) ProtoMessage() {}

func (x *ChessEntranceDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessEntranceDetailInfo.ProtoReflect.Descriptor instead.
func (*ChessEntranceDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{53}
}

func (x *ChessEntranceDetailInfo) GetInfoList() []*ChessEntranceInfo {
	if x != nil {
		return x.InfoList
	}
	return nil
}

type ChessMysteryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntrancePointMap map[uint32]uint32                   `protobuf:"bytes,13,rep,name=entrance_point_map,json=entrancePointMap,proto3" json:"entrance_point_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ExitPointIdList  []uint32                            `protobuf:"varint,3,rep,packed,name=exit_point_id_list,json=exitPointIdList,proto3" json:"exit_point_id_list,omitempty"`
	DetailInfoMap    map[uint32]*ChessEntranceDetailInfo `protobuf:"bytes,5,rep,name=detail_info_map,json=detailInfoMap,proto3" json:"detail_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChessMysteryInfo) Reset() {
	*x = ChessMysteryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessMysteryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessMysteryInfo) ProtoMessage() {}

func (x *ChessMysteryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessMysteryInfo.ProtoReflect.Descriptor instead.
func (*ChessMysteryInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{54}
}

func (x *ChessMysteryInfo) GetEntrancePointMap() map[uint32]uint32 {
	if x != nil {
		return x.EntrancePointMap
	}
	return nil
}

func (x *ChessMysteryInfo) GetExitPointIdList() []uint32 {
	if x != nil {
		return x.ExitPointIdList
	}
	return nil
}

func (x *ChessMysteryInfo) GetDetailInfoMap() map[uint32]*ChessEntranceDetailInfo {
	if x != nil {
		return x.DetailInfoMap
	}
	return nil
}

type ChessNormalCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId        uint32 `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	CostPoints    uint32 `protobuf:"varint,15,opt,name=cost_points,json=costPoints,proto3" json:"cost_points,omitempty"`
	IsAttachCurse bool   `protobuf:"varint,6,opt,name=is_attach_curse,json=isAttachCurse,proto3" json:"is_attach_curse,omitempty"`
}

func (x *ChessNormalCardInfo) Reset() {
	*x = ChessNormalCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessNormalCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessNormalCardInfo) ProtoMessage() {}

func (x *ChessNormalCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessNormalCardInfo.ProtoReflect.Descriptor instead.
func (*ChessNormalCardInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{55}
}

func (x *ChessNormalCardInfo) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *ChessNormalCardInfo) GetCostPoints() uint32 {
	if x != nil {
		return x.CostPoints
	}
	return 0
}

func (x *ChessNormalCardInfo) GetIsAttachCurse() bool {
	if x != nil {
		return x.IsAttachCurse
	}
	return false
}

type ChessPickCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId    uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	CardIndex uint32 `protobuf:"varint,4,opt,name=card_index,json=cardIndex,proto3" json:"card_index,omitempty"`
}

func (x *ChessPickCardReq) Reset() {
	*x = ChessPickCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessPickCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessPickCardReq) ProtoMessage() {}

func (x *ChessPickCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessPickCardReq.ProtoReflect.Descriptor instead.
func (*ChessPickCardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{56}
}

func (x *ChessPickCardReq) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *ChessPickCardReq) GetCardIndex() uint32 {
	if x != nil {
		return x.CardIndex
	}
	return 0
}

type ChessPickCardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardIndex uint32 `protobuf:"varint,11,opt,name=card_index,json=cardIndex,proto3" json:"card_index,omitempty"`
	CardId    uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	Retcode   int32  `protobuf:"varint,4,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *ChessPickCardRsp) Reset() {
	*x = ChessPickCardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessPickCardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessPickCardRsp) ProtoMessage() {}

func (x *ChessPickCardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessPickCardRsp.ProtoReflect.Descriptor instead.
func (*ChessPickCardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{57}
}

func (x *ChessPickCardRsp) GetCardIndex() uint32 {
	if x != nil {
		return x.CardIndex
	}
	return 0
}

func (x *ChessPickCardRsp) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *ChessPickCardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type ChessPickCardNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurseCardId    uint32               `protobuf:"varint,13,opt,name=curse_card_id,json=curseCardId,proto3" json:"curse_card_id,omitempty"`
	NormalCardInfo *ChessNormalCardInfo `protobuf:"bytes,1,opt,name=normal_card_info,json=normalCardInfo,proto3" json:"normal_card_info,omitempty"`
}

func (x *ChessPickCardNotify) Reset() {
	*x = ChessPickCardNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessPickCardNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessPickCardNotify) ProtoMessage() {}

func (x *ChessPickCardNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessPickCardNotify.ProtoReflect.Descriptor instead.
func (*ChessPickCardNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{58}
}

func (x *ChessPickCardNotify) GetCurseCardId() uint32 {
	if x != nil {
		return x.CurseCardId
	}
	return 0
}

func (x *ChessPickCardNotify) GetNormalCardInfo() *ChessNormalCardInfo {
	if x != nil {
		return x.NormalCardInfo
	}
	return nil
}

type ChessManualRefreshCardsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChessManualRefreshCardsReq) Reset() {
	*x = ChessManualRefreshCardsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessManualRefreshCardsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessManualRefreshCardsReq) ProtoMessage() {}

func (x *ChessManualRefreshCardsReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessManualRefreshCardsReq.ProtoReflect.Descriptor instead.
func (*ChessManualRefreshCardsReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{59}
}

type ChessManualRefreshCardsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,12,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *ChessManualRefreshCardsRsp) Reset() {
	*x = ChessManualRefreshCardsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessManualRefreshCardsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessManualRefreshCardsRsp) ProtoMessage() {}

func (x *ChessManualRefreshCardsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessManualRefreshCardsRsp.ProtoReflect.Descriptor instead.
func (*ChessManualRefreshCardsRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{60}
}

func (x *ChessManualRefreshCardsRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type ChessPlayerInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfo *ChessPlayerInfo `protobuf:"bytes,10,opt,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"`
}

func (x *ChessPlayerInfoNotify) Reset() {
	*x = ChessPlayerInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessPlayerInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessPlayerInfoNotify) ProtoMessage() {}

func (x *ChessPlayerInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessPlayerInfoNotify.ProtoReflect.Descriptor instead.
func (*ChessPlayerInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{61}
}

func (x *ChessPlayerInfoNotify) GetPlayerInfo() *ChessPlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type ChessLeftMonstersNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftMonsters uint32 `protobuf:"varint,6,opt,name=left_monsters,json=leftMonsters,proto3" json:"left_monsters,omitempty"`
}

func (x *ChessLeftMonstersNotify) Reset() {
	*x = ChessLeftMonstersNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessLeftMonstersNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessLeftMonstersNotify) ProtoMessage() {}

func (x *ChessLeftMonstersNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessLeftMonstersNotify.ProtoReflect.Descriptor instead.
func (*ChessLeftMonstersNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{62}
}

func (x *ChessLeftMonstersNotify) GetLeftMonsters() uint32 {
	if x != nil {
		return x.LeftMonsters
	}
	return 0
}

type ChessEscapedMonstersNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExcapedMonsters uint32 `protobuf:"varint,14,opt,name=excaped_monsters,json=excapedMonsters,proto3" json:"excaped_monsters,omitempty"`
}

func (x *ChessEscapedMonstersNotify) Reset() {
	*x = ChessEscapedMonstersNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessEscapedMonstersNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessEscapedMonstersNotify) ProtoMessage() {}

func (x *ChessEscapedMonstersNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessEscapedMonstersNotify.ProtoReflect.Descriptor instead.
func (*ChessEscapedMonstersNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{63}
}

func (x *ChessEscapedMonstersNotify) GetExcapedMonsters() uint32 {
	if x != nil {
		return x.ExcapedMonsters
	}
	return 0
}

type ChessSelectedCardsNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectedCardInfoList []*ChessCardInfo `protobuf:"bytes,4,rep,name=selected_card_info_list,json=selectedCardInfoList,proto3" json:"selected_card_info_list,omitempty"`
}

func (x *ChessSelectedCardsNotify) Reset() {
	*x = ChessSelectedCardsNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessSelectedCardsNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessSelectedCardsNotify) ProtoMessage() {}

func (x *ChessSelectedCardsNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessSelectedCardsNotify.ProtoReflect.Descriptor instead.
func (*ChessSelectedCardsNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{64}
}

func (x *ChessSelectedCardsNotify) GetSelectedCardInfoList() []*ChessCardInfo {
	if x != nil {
		return x.SelectedCardInfoList
	}
	return nil
}

type GlobalBuildingInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentNum   uint32          `protobuf:"varint,5,opt,name=current_num,json=currentNum,proto3" json:"current_num,omitempty"`
	BuildingList []*BuildingInfo `protobuf:"bytes,3,rep,name=building_list,json=buildingList,proto3" json:"building_list,omitempty"`
	MaxNum       uint32          `protobuf:"varint,13,opt,name=max_num,json=maxNum,proto3" json:"max_num,omitempty"`
}

func (x *GlobalBuildingInfoNotify) Reset() {
	*x = GlobalBuildingInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalBuildingInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalBuildingInfoNotify) ProtoMessage() {}

func (x *GlobalBuildingInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalBuildingInfoNotify.ProtoReflect.Descriptor instead.
func (*GlobalBuildingInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{65}
}

func (x *GlobalBuildingInfoNotify) GetCurrentNum() uint32 {
	if x != nil {
		return x.CurrentNum
	}
	return 0
}

func (x *GlobalBuildingInfoNotify) GetBuildingList() []*BuildingInfo {
	if x != nil {
		return x.BuildingList
	}
	return nil
}

func (x *GlobalBuildingInfoNotify) GetMaxNum() uint32 {
	if x != nil {
		return x.MaxNum
	}
	return 0
}

type InBattleIrodoriChessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MysteryInfo        *IrodoriChessMysteryInfo `protobuf:"bytes,3,opt,name=mystery_info,json=mysteryInfo,proto3" json:"mystery_info,omitempty"`
	LeftMonsters       uint32                   `protobuf:"varint,12,opt,name=left_monsters,json=leftMonsters,proto3" json:"left_monsters,omitempty"`
	SelectedCardIdList []uint32                 `protobuf:"varint,13,rep,packed,name=selected_card_id_list,json=selectedCardIdList,proto3" json:"selected_card_id_list,omitempty"`
	BuildingPoints     uint32                   `protobuf:"varint,7,opt,name=building_points,json=buildingPoints,proto3" json:"building_points,omitempty"`
	SettleScore        uint32                   `protobuf:"varint,4,opt,name=settle_score,json=settleScore,proto3" json:"settle_score,omitempty"`
}

func (x *InBattleIrodoriChessInfo) Reset() {
	*x = InBattleIrodoriChessInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InBattleIrodoriChessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InBattleIrodoriChessInfo) ProtoMessage() {}

func (x *InBattleIrodoriChessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InBattleIrodoriChessInfo.ProtoReflect.Descriptor instead.
func (*InBattleIrodoriChessInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{66}
}

func (x *InBattleIrodoriChessInfo) GetMysteryInfo() *IrodoriChessMysteryInfo {
	if x != nil {
		return x.MysteryInfo
	}
	return nil
}

func (x *InBattleIrodoriChessInfo) GetLeftMonsters() uint32 {
	if x != nil {
		return x.LeftMonsters
	}
	return 0
}

func (x *InBattleIrodoriChessInfo) GetSelectedCardIdList() []uint32 {
	if x != nil {
		return x.SelectedCardIdList
	}
	return nil
}

func (x *InBattleIrodoriChessInfo) GetBuildingPoints() uint32 {
	if x != nil {
		return x.BuildingPoints
	}
	return 0
}

func (x *InBattleIrodoriChessInfo) GetSettleScore() uint32 {
	if x != nil {
		return x.SettleScore
	}
	return 0
}

type IrodoriChessMonsterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantPoints uint32   `protobuf:"varint,6,opt,name=grant_points,json=grantPoints,proto3" json:"grant_points,omitempty"`
	Level       uint32   `protobuf:"varint,13,opt,name=level,proto3" json:"level,omitempty"`
	MonsterId   uint32   `protobuf:"varint,14,opt,name=monster_id,json=monsterId,proto3" json:"monster_id,omitempty"`
	AffixList   []uint32 `protobuf:"varint,11,rep,packed,name=affix_list,json=affixList,proto3" json:"affix_list,omitempty"`
}

func (x *IrodoriChessMonsterInfo) Reset() {
	*x = IrodoriChessMonsterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriChessMonsterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriChessMonsterInfo) ProtoMessage() {}

func (x *IrodoriChessMonsterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriChessMonsterInfo.ProtoReflect.Descriptor instead.
func (*IrodoriChessMonsterInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{67}
}

func (x *IrodoriChessMonsterInfo) GetGrantPoints() uint32 {
	if x != nil {
		return x.GrantPoints
	}
	return 0
}

func (x *IrodoriChessMonsterInfo) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *IrodoriChessMonsterInfo) GetMonsterId() uint32 {
	if x != nil {
		return x.MonsterId
	}
	return 0
}

func (x *IrodoriChessMonsterInfo) GetAffixList() []uint32 {
	if x != nil {
		return x.AffixList
	}
	return nil
}

type IrodoriChessEntranceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterInfoList []*IrodoriChessMonsterInfo `protobuf:"bytes,6,rep,name=monster_info_list,json=monsterInfoList,proto3" json:"monster_info_list,omitempty"`
	EntrancePointId uint32                     `protobuf:"varint,4,opt,name=entrance_point_id,json=entrancePointId,proto3" json:"entrance_point_id,omitempty"`
}

func (x *IrodoriChessEntranceInfo) Reset() {
	*x = IrodoriChessEntranceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriChessEntranceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriChessEntranceInfo) ProtoMessage() {}

func (x *IrodoriChessEntranceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriChessEntranceInfo.ProtoReflect.Descriptor instead.
func (*IrodoriChessEntranceInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{68}
}

func (x *IrodoriChessEntranceInfo) GetMonsterInfoList() []*IrodoriChessMonsterInfo {
	if x != nil {
		return x.MonsterInfoList
	}
	return nil
}

func (x *IrodoriChessEntranceInfo) GetEntrancePointId() uint32 {
	if x != nil {
		return x.EntrancePointId
	}
	return 0
}

type IrodoriChessEntranceDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoList []*IrodoriChessEntranceInfo `protobuf:"bytes,15,rep,name=info_list,json=infoList,proto3" json:"info_list,omitempty"`
}

func (x *IrodoriChessEntranceDetailInfo) Reset() {
	*x = IrodoriChessEntranceDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriChessEntranceDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriChessEntranceDetailInfo) ProtoMessage() {}

func (x *IrodoriChessEntranceDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriChessEntranceDetailInfo.ProtoReflect.Descriptor instead.
func (*IrodoriChessEntranceDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{69}
}

func (x *IrodoriChessEntranceDetailInfo) GetInfoList() []*IrodoriChessEntranceInfo {
	if x != nil {
		return x.InfoList
	}
	return nil
}

type IrodoriChessMysteryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntranceDetailInfo  *IrodoriChessEntranceDetailInfo `protobuf:"bytes,5,opt,name=entrance_detail_info,json=entranceDetailInfo,proto3" json:"entrance_detail_info,omitempty"`
	EntrancePointIdList []uint32                        `protobuf:"varint,2,rep,packed,name=entrance_point_id_list,json=entrancePointIdList,proto3" json:"entrance_point_id_list,omitempty"`
	ExitPointIdList     []uint32                        `protobuf:"varint,13,rep,packed,name=exit_point_id_list,json=exitPointIdList,proto3" json:"exit_point_id_list,omitempty"`
}

func (x *IrodoriChessMysteryInfo) Reset() {
	*x = IrodoriChessMysteryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriChessMysteryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriChessMysteryInfo) ProtoMessage() {}

func (x *IrodoriChessMysteryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriChessMysteryInfo.ProtoReflect.Descriptor instead.
func (*IrodoriChessMysteryInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{70}
}

func (x *IrodoriChessMysteryInfo) GetEntranceDetailInfo() *IrodoriChessEntranceDetailInfo {
	if x != nil {
		return x.EntranceDetailInfo
	}
	return nil
}

func (x *IrodoriChessMysteryInfo) GetEntrancePointIdList() []uint32 {
	if x != nil {
		return x.EntrancePointIdList
	}
	return nil
}

func (x *IrodoriChessMysteryInfo) GetExitPointIdList() []uint32 {
	if x != nil {
		return x.ExitPointIdList
	}
	return nil
}

type InBattleIrodoriChessSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNewRecord    bool   `protobuf:"varint,5,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
	IsActivityEnd  bool   `protobuf:"varint,2,opt,name=is_activity_end,json=isActivityEnd,proto3" json:"is_activity_end,omitempty"`
	SceneTimeMs    uint64 `protobuf:"varint,1,opt,name=scene_time_ms,json=sceneTimeMs,proto3" json:"scene_time_ms,omitempty"`
	SettleScore    uint32 `protobuf:"varint,3,opt,name=settle_score,json=settleScore,proto3" json:"settle_score,omitempty"`
	IsPerfect      bool   `protobuf:"varint,12,opt,name=is_perfect,json=isPerfect,proto3" json:"is_perfect,omitempty"`
	KillMonsterNum uint32 `protobuf:"varint,7,opt,name=kill_monster_num,json=killMonsterNum,proto3" json:"kill_monster_num,omitempty"`
}

func (x *InBattleIrodoriChessSettleInfo) Reset() {
	*x = InBattleIrodoriChessSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InBattleIrodoriChessSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InBattleIrodoriChessSettleInfo) ProtoMessage() {}

func (x *InBattleIrodoriChessSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InBattleIrodoriChessSettleInfo.ProtoReflect.Descriptor instead.
func (*InBattleIrodoriChessSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{71}
}

func (x *InBattleIrodoriChessSettleInfo) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

func (x *InBattleIrodoriChessSettleInfo) GetIsActivityEnd() bool {
	if x != nil {
		return x.IsActivityEnd
	}
	return false
}

func (x *InBattleIrodoriChessSettleInfo) GetSceneTimeMs() uint64 {
	if x != nil {
		return x.SceneTimeMs
	}
	return 0
}

func (x *InBattleIrodoriChessSettleInfo) GetSettleScore() uint32 {
	if x != nil {
		return x.SettleScore
	}
	return 0
}

func (x *InBattleIrodoriChessSettleInfo) GetIsPerfect() bool {
	if x != nil {
		return x.IsPerfect
	}
	return false
}

func (x *InBattleIrodoriChessSettleInfo) GetKillMonsterNum() uint32 {
	if x != nil {
		return x.KillMonsterNum
	}
	return 0
}

type IrodoriChessPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid            uint32 `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	BuildingPoints uint32 `protobuf:"varint,9,opt,name=building_points,json=buildingPoints,proto3" json:"building_points,omitempty"`
	SettleScore    uint32 `protobuf:"varint,3,opt,name=settle_score,json=settleScore,proto3" json:"settle_score,omitempty"`
}

func (x *IrodoriChessPlayerInfo) Reset() {
	*x = IrodoriChessPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriChessPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriChessPlayerInfo) ProtoMessage() {}

func (x *IrodoriChessPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriChessPlayerInfo.ProtoReflect.Descriptor instead.
func (*IrodoriChessPlayerInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{72}
}

func (x *IrodoriChessPlayerInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *IrodoriChessPlayerInfo) GetBuildingPoints() uint32 {
	if x != nil {
		return x.BuildingPoints
	}
	return 0
}

func (x *IrodoriChessPlayerInfo) GetSettleScore() uint32 {
	if x != nil {
		return x.SettleScore
	}
	return 0
}

type IrodoriChessPlayerInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfo *IrodoriChessPlayerInfo `protobuf:"bytes,6,opt,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"`
}

func (x *IrodoriChessPlayerInfoNotify) Reset() {
	*x = IrodoriChessPlayerInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriChessPlayerInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriChessPlayerInfoNotify) ProtoMessage() {}

func (x *IrodoriChessPlayerInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriChessPlayerInfoNotify.ProtoReflect.Descriptor instead.
func (*IrodoriChessPlayerInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{73}
}

func (x *IrodoriChessPlayerInfoNotify) GetPlayerInfo() *IrodoriChessPlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type IrodoriChessLeftMonsterNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftMonsters uint32 `protobuf:"varint,8,opt,name=left_monsters,json=leftMonsters,proto3" json:"left_monsters,omitempty"`
}

func (x *IrodoriChessLeftMonsterNotify) Reset() {
	*x = IrodoriChessLeftMonsterNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriChessLeftMonsterNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriChessLeftMonsterNotify) ProtoMessage() {}

func (x *IrodoriChessLeftMonsterNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriChessLeftMonsterNotify.ProtoReflect.Descriptor instead.
func (*IrodoriChessLeftMonsterNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{74}
}

func (x *IrodoriChessLeftMonsterNotify) GetLeftMonsters() uint32 {
	if x != nil {
		return x.LeftMonsters
	}
	return 0
}

type BrickBreakerPlayerBattleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillList  []uint32 `protobuf:"varint,10,rep,packed,name=skill_list,json=skillList,proto3" json:"skill_list,omitempty"`
	IsReady    bool     `protobuf:"varint,14,opt,name=is_ready,json=isReady,proto3" json:"is_ready,omitempty"`
	IsChanging bool     `protobuf:"varint,11,opt,name=is_changing,json=isChanging,proto3" json:"is_changing,omitempty"`
	Uid        uint32   `protobuf:"varint,15,opt,name=uid,proto3" json:"uid,omitempty"`
	AvatarId   []uint32 `protobuf:"varint,9,rep,packed,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	CostumeId  []uint32 `protobuf:"varint,13,rep,packed,name=costume_id,json=costumeId,proto3" json:"costume_id,omitempty"`
	Nickname   string   `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (x *BrickBreakerPlayerBattleInfo) Reset() {
	*x = BrickBreakerPlayerBattleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerPlayerBattleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerPlayerBattleInfo) ProtoMessage() {}

func (x *BrickBreakerPlayerBattleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerPlayerBattleInfo.ProtoReflect.Descriptor instead.
func (*BrickBreakerPlayerBattleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{75}
}

func (x *BrickBreakerPlayerBattleInfo) GetSkillList() []uint32 {
	if x != nil {
		return x.SkillList
	}
	return nil
}

func (x *BrickBreakerPlayerBattleInfo) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

func (x *BrickBreakerPlayerBattleInfo) GetIsChanging() bool {
	if x != nil {
		return x.IsChanging
	}
	return false
}

func (x *BrickBreakerPlayerBattleInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BrickBreakerPlayerBattleInfo) GetAvatarId() []uint32 {
	if x != nil {
		return x.AvatarId
	}
	return nil
}

func (x *BrickBreakerPlayerBattleInfo) GetCostumeId() []uint32 {
	if x != nil {
		return x.CostumeId
	}
	return nil
}

func (x *BrickBreakerPlayerBattleInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type BrickBreakerPlayerReadyNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UidList []uint32 `protobuf:"varint,14,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"`
}

func (x *BrickBreakerPlayerReadyNotify) Reset() {
	*x = BrickBreakerPlayerReadyNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerPlayerReadyNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerPlayerReadyNotify) ProtoMessage() {}

func (x *BrickBreakerPlayerReadyNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerPlayerReadyNotify.ProtoReflect.Descriptor instead.
func (*BrickBreakerPlayerReadyNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{76}
}

func (x *BrickBreakerPlayerReadyNotify) GetUidList() []uint32 {
	if x != nil {
		return x.UidList
	}
	return nil
}

type BrickBreakerPlayerSetAvatarNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarIdList  []uint32 `protobuf:"varint,8,rep,packed,name=avatar_id_list,json=avatarIdList,proto3" json:"avatar_id_list,omitempty"`
	CostumeIdList []uint32 `protobuf:"varint,11,rep,packed,name=costume_id_list,json=costumeIdList,proto3" json:"costume_id_list,omitempty"`
	Uid           uint32   `protobuf:"varint,9,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *BrickBreakerPlayerSetAvatarNotify) Reset() {
	*x = BrickBreakerPlayerSetAvatarNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerPlayerSetAvatarNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerPlayerSetAvatarNotify) ProtoMessage() {}

func (x *BrickBreakerPlayerSetAvatarNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerPlayerSetAvatarNotify.ProtoReflect.Descriptor instead.
func (*BrickBreakerPlayerSetAvatarNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{77}
}

func (x *BrickBreakerPlayerSetAvatarNotify) GetAvatarIdList() []uint32 {
	if x != nil {
		return x.AvatarIdList
	}
	return nil
}

func (x *BrickBreakerPlayerSetAvatarNotify) GetCostumeIdList() []uint32 {
	if x != nil {
		return x.CostumeIdList
	}
	return nil
}

func (x *BrickBreakerPlayerSetAvatarNotify) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type BrickBreakerPlayerSetSkillNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         uint32   `protobuf:"varint,8,opt,name=uid,proto3" json:"uid,omitempty"`
	SkillIdList []uint32 `protobuf:"varint,14,rep,packed,name=skill_id_list,json=skillIdList,proto3" json:"skill_id_list,omitempty"`
}

func (x *BrickBreakerPlayerSetSkillNotify) Reset() {
	*x = BrickBreakerPlayerSetSkillNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerPlayerSetSkillNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerPlayerSetSkillNotify) ProtoMessage() {}

func (x *BrickBreakerPlayerSetSkillNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerPlayerSetSkillNotify.ProtoReflect.Descriptor instead.
func (*BrickBreakerPlayerSetSkillNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{78}
}

func (x *BrickBreakerPlayerSetSkillNotify) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BrickBreakerPlayerSetSkillNotify) GetSkillIdList() []uint32 {
	if x != nil {
		return x.SkillIdList
	}
	return nil
}

type BrickBreakerSetReadyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BrickBreakerSetReadyReq) Reset() {
	*x = BrickBreakerSetReadyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerSetReadyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerSetReadyReq) ProtoMessage() {}

func (x *BrickBreakerSetReadyReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerSetReadyReq.ProtoReflect.Descriptor instead.
func (*BrickBreakerSetReadyReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{79}
}

type BrickBreakerSetReadyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *BrickBreakerSetReadyRsp) Reset() {
	*x = BrickBreakerSetReadyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerSetReadyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerSetReadyRsp) ProtoMessage() {}

func (x *BrickBreakerSetReadyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerSetReadyRsp.ProtoReflect.Descriptor instead.
func (*BrickBreakerSetReadyRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{80}
}

func (x *BrickBreakerSetReadyRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type BrickBreakerSelectAvatarReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId []uint32 `protobuf:"varint,2,rep,packed,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
}

func (x *BrickBreakerSelectAvatarReq) Reset() {
	*x = BrickBreakerSelectAvatarReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerSelectAvatarReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerSelectAvatarReq) ProtoMessage() {}

func (x *BrickBreakerSelectAvatarReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerSelectAvatarReq.ProtoReflect.Descriptor instead.
func (*BrickBreakerSelectAvatarReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{81}
}

func (x *BrickBreakerSelectAvatarReq) GetAvatarId() []uint32 {
	if x != nil {
		return x.AvatarId
	}
	return nil
}

type BrickBreakerSelectAvatarRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId []uint32 `protobuf:"varint,8,rep,packed,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	Retcode  int32    `protobuf:"varint,4,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *BrickBreakerSelectAvatarRsp) Reset() {
	*x = BrickBreakerSelectAvatarRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerSelectAvatarRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerSelectAvatarRsp) ProtoMessage() {}

func (x *BrickBreakerSelectAvatarRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerSelectAvatarRsp.ProtoReflect.Descriptor instead.
func (*BrickBreakerSelectAvatarRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{82}
}

func (x *BrickBreakerSelectAvatarRsp) GetAvatarId() []uint32 {
	if x != nil {
		return x.AvatarId
	}
	return nil
}

func (x *BrickBreakerSelectAvatarRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type BrickBreakerSelectSkillReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId []uint32 `protobuf:"varint,6,rep,packed,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
}

func (x *BrickBreakerSelectSkillReq) Reset() {
	*x = BrickBreakerSelectSkillReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerSelectSkillReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerSelectSkillReq) ProtoMessage() {}

func (x *BrickBreakerSelectSkillReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerSelectSkillReq.ProtoReflect.Descriptor instead.
func (*BrickBreakerSelectSkillReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{83}
}

func (x *BrickBreakerSelectSkillReq) GetSkillId() []uint32 {
	if x != nil {
		return x.SkillId
	}
	return nil
}

type BrickBreakerSelectSkillRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32    `protobuf:"varint,10,opt,name=retcode,proto3" json:"retcode,omitempty"`
	SkillId []uint32 `protobuf:"varint,11,rep,packed,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
}

func (x *BrickBreakerSelectSkillRsp) Reset() {
	*x = BrickBreakerSelectSkillRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerSelectSkillRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerSelectSkillRsp) ProtoMessage() {}

func (x *BrickBreakerSelectSkillRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerSelectSkillRsp.ProtoReflect.Descriptor instead.
func (*BrickBreakerSelectSkillRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{84}
}

func (x *BrickBreakerSelectSkillRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *BrickBreakerSelectSkillRsp) GetSkillId() []uint32 {
	if x != nil {
		return x.SkillId
	}
	return nil
}

type BrickBreakerSetChangingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsChanging bool `protobuf:"varint,11,opt,name=is_changing,json=isChanging,proto3" json:"is_changing,omitempty"`
}

func (x *BrickBreakerSetChangingReq) Reset() {
	*x = BrickBreakerSetChangingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerSetChangingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerSetChangingReq) ProtoMessage() {}

func (x *BrickBreakerSetChangingReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerSetChangingReq.ProtoReflect.Descriptor instead.
func (*BrickBreakerSetChangingReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{85}
}

func (x *BrickBreakerSetChangingReq) GetIsChanging() bool {
	if x != nil {
		return x.IsChanging
	}
	return false
}

type BrickBreakerSetChangingRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *BrickBreakerSetChangingRsp) Reset() {
	*x = BrickBreakerSetChangingRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerSetChangingRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerSetChangingRsp) ProtoMessage() {}

func (x *BrickBreakerSetChangingRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerSetChangingRsp.ProtoReflect.Descriptor instead.
func (*BrickBreakerSetChangingRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{86}
}

func (x *BrickBreakerSetChangingRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type BrickBreakerPlayerSetChangingNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        uint32 `protobuf:"varint,15,opt,name=uid,proto3" json:"uid,omitempty"`
	IsChanging bool   `protobuf:"varint,7,opt,name=is_changing,json=isChanging,proto3" json:"is_changing,omitempty"`
}

func (x *BrickBreakerPlayerSetChangingNotify) Reset() {
	*x = BrickBreakerPlayerSetChangingNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerPlayerSetChangingNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerPlayerSetChangingNotify) ProtoMessage() {}

func (x *BrickBreakerPlayerSetChangingNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerPlayerSetChangingNotify.ProtoReflect.Descriptor instead.
func (*BrickBreakerPlayerSetChangingNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{87}
}

func (x *BrickBreakerPlayerSetChangingNotify) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BrickBreakerPlayerSetChangingNotify) GetIsChanging() bool {
	if x != nil {
		return x.IsChanging
	}
	return false
}

type CoinCollectTeamAvatarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostumeId uint32 `protobuf:"varint,4,opt,name=costume_id,json=costumeId,proto3" json:"costume_id,omitempty"`
	AvatarId  uint32 `protobuf:"varint,10,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
}

func (x *CoinCollectTeamAvatarInfo) Reset() {
	*x = CoinCollectTeamAvatarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinCollectTeamAvatarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinCollectTeamAvatarInfo) ProtoMessage() {}

func (x *CoinCollectTeamAvatarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinCollectTeamAvatarInfo.ProtoReflect.Descriptor instead.
func (*CoinCollectTeamAvatarInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{88}
}

func (x *CoinCollectTeamAvatarInfo) GetCostumeId() uint32 {
	if x != nil {
		return x.CostumeId
	}
	return 0
}

func (x *CoinCollectTeamAvatarInfo) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

type CoinCollectPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChooseSkillNo  uint32                       `protobuf:"varint,5,opt,name=choose_skill_no,json=chooseSkillNo,proto3" json:"choose_skill_no,omitempty"`
	PlayerUid      uint32                       `protobuf:"varint,12,opt,name=player_uid,json=playerUid,proto3" json:"player_uid,omitempty"`
	PlayerName     string                       `protobuf:"bytes,11,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	IsPrepare      bool                         `protobuf:"varint,14,opt,name=is_prepare,json=isPrepare,proto3" json:"is_prepare,omitempty"`
	AvatarInfoList []*CoinCollectTeamAvatarInfo `protobuf:"bytes,10,rep,name=avatar_info_list,json=avatarInfoList,proto3" json:"avatar_info_list,omitempty"`
}

func (x *CoinCollectPlayerInfo) Reset() {
	*x = CoinCollectPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinCollectPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinCollectPlayerInfo) ProtoMessage() {}

func (x *CoinCollectPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinCollectPlayerInfo.ProtoReflect.Descriptor instead.
func (*CoinCollectPlayerInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{89}
}

func (x *CoinCollectPlayerInfo) GetChooseSkillNo() uint32 {
	if x != nil {
		return x.ChooseSkillNo
	}
	return 0
}

func (x *CoinCollectPlayerInfo) GetPlayerUid() uint32 {
	if x != nil {
		return x.PlayerUid
	}
	return 0
}

func (x *CoinCollectPlayerInfo) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *CoinCollectPlayerInfo) GetIsPrepare() bool {
	if x != nil {
		return x.IsPrepare
	}
	return false
}

func (x *CoinCollectPlayerInfo) GetAvatarInfoList() []*CoinCollectTeamAvatarInfo {
	if x != nil {
		return x.AvatarInfoList
	}
	return nil
}

type CoinCollectPrepareStageNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinCollectInfo *CoinCollectStageInfo `protobuf:"bytes,3,opt,name=coin_collect_info,json=coinCollectInfo,proto3" json:"coin_collect_info,omitempty"`
}

func (x *CoinCollectPrepareStageNotify) Reset() {
	*x = CoinCollectPrepareStageNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinCollectPrepareStageNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinCollectPrepareStageNotify) ProtoMessage() {}

func (x *CoinCollectPrepareStageNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinCollectPrepareStageNotify.ProtoReflect.Descriptor instead.
func (*CoinCollectPrepareStageNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{90}
}

func (x *CoinCollectPrepareStageNotify) GetCoinCollectInfo() *CoinCollectStageInfo {
	if x != nil {
		return x.CoinCollectInfo
	}
	return nil
}

type LanV3BoatSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid            uint32                   `protobuf:"varint,8,opt,name=uid,proto3" json:"uid,omitempty"`
	OnlineId       string                   `protobuf:"bytes,13,opt,name=online_id,json=onlineId,proto3" json:"online_id,omitempty"`
	HeadImage      uint32                   `protobuf:"varint,10,opt,name=head_image,json=headImage,proto3" json:"head_image,omitempty"`
	Nickname       string                   `protobuf:"bytes,14,opt,name=nickname,proto3" json:"nickname,omitempty"`
	ProfilePicture *ProfilePicture          `protobuf:"bytes,12,opt,name=profile_picture,json=profilePicture,proto3" json:"profile_picture,omitempty"`
	CardList       []*ExhibitionDisplayInfo `protobuf:"bytes,1,rep,name=card_list,json=cardList,proto3" json:"card_list,omitempty"`
}

func (x *LanV3BoatSettleInfo) Reset() {
	*x = LanV3BoatSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanV3BoatSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanV3BoatSettleInfo) ProtoMessage() {}

func (x *LanV3BoatSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanV3BoatSettleInfo.ProtoReflect.Descriptor instead.
func (*LanV3BoatSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{91}
}

func (x *LanV3BoatSettleInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *LanV3BoatSettleInfo) GetOnlineId() string {
	if x != nil {
		return x.OnlineId
	}
	return ""
}

func (x *LanV3BoatSettleInfo) GetHeadImage() uint32 {
	if x != nil {
		return x.HeadImage
	}
	return 0
}

func (x *LanV3BoatSettleInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *LanV3BoatSettleInfo) GetProfilePicture() *ProfilePicture {
	if x != nil {
		return x.ProfilePicture
	}
	return nil
}

func (x *LanV3BoatSettleInfo) GetCardList() []*ExhibitionDisplayInfo {
	if x != nil {
		return x.CardList
	}
	return nil
}

type LanV3BoatSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsGallerySucc  bool                     `protobuf:"varint,10,opt,name=is_gallery_succ,json=isGallerySucc,proto3" json:"is_gallery_succ,omitempty"`
	WinnerUidList  []uint32                 `protobuf:"varint,2,rep,packed,name=winner_uid_list,json=winnerUidList,proto3" json:"winner_uid_list,omitempty"`
	IsSingle       bool                     `protobuf:"varint,8,opt,name=is_single,json=isSingle,proto3" json:"is_single,omitempty"`
	StageType      uint32                   `protobuf:"varint,12,opt,name=stage_type,json=stageType,proto3" json:"stage_type,omitempty"`
	ScoreList      []*ExhibitionDisplayInfo `protobuf:"bytes,1,rep,name=score_list,json=scoreList,proto3" json:"score_list,omitempty"`
	SettleInfoList []*LanV3BoatSettleInfo   `protobuf:"bytes,13,rep,name=settle_info_list,json=settleInfoList,proto3" json:"settle_info_list,omitempty"`
	PlayIndex      uint32                   `protobuf:"varint,4,opt,name=play_index,json=playIndex,proto3" json:"play_index,omitempty"`
}

func (x *LanV3BoatSettleNotify) Reset() {
	*x = LanV3BoatSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_multistage_play_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanV3BoatSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanV3BoatSettleNotify) ProtoMessage() {}

func (x *LanV3BoatSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_multistage_play_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanV3BoatSettleNotify.ProtoReflect.Descriptor instead.
func (*LanV3BoatSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_multistage_play_proto_rawDescGZIP(), []int{92}
}

func (x *LanV3BoatSettleNotify) GetIsGallerySucc() bool {
	if x != nil {
		return x.IsGallerySucc
	}
	return false
}

func (x *LanV3BoatSettleNotify) GetWinnerUidList() []uint32 {
	if x != nil {
		return x.WinnerUidList
	}
	return nil
}

func (x *LanV3BoatSettleNotify) GetIsSingle() bool {
	if x != nil {
		return x.IsSingle
	}
	return false
}

func (x *LanV3BoatSettleNotify) GetStageType() uint32 {
	if x != nil {
		return x.StageType
	}
	return 0
}

func (x *LanV3BoatSettleNotify) GetScoreList() []*ExhibitionDisplayInfo {
	if x != nil {
		return x.ScoreList
	}
	return nil
}

func (x *LanV3BoatSettleNotify) GetSettleInfoList() []*LanV3BoatSettleInfo {
	if x != nil {
		return x.SettleInfoList
	}
	return nil
}

func (x *LanV3BoatSettleNotify) GetPlayIndex() uint32 {
	if x != nil {
		return x.PlayIndex
	}
	return 0
}

var File_cmd_cmd_multistage_play_proto protoreflect.FileDescriptor

var file_cmd_cmd_multistage_play_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x6d, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x01, 0x0a, 0x1e, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x1c, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x69, 0x63,
	0x6b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x0d, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x69, 0x73, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x6a, 0x0a, 0x1d, 0x49, 0x6e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73,
	0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x90, 0x02, 0x0a, 0x1a, 0x49, 0x6e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72,
	0x61, 0x6e, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x6e, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x65, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x54, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x43, 0x61, 0x72, 0x64,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xc8, 0x06, 0x0a, 0x16, 0x49, 0x6e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x6d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x65, 0x66, 0x74,
	0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77,
	0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x9a, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x73, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a,
	0x11, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69,
	0x63, 0x75, 0x73, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16,
	0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61,
	0x78, 0x45, 0x78, 0x63, 0x61, 0x70, 0x65, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x12, 0x36, 0x0a, 0x17, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e,
	0x69, 0x63, 0x75, 0x73, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x47, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63, 0x68,
	0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x65, 0x78, 0x63, 0x61, 0x70, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x78, 0x63,
	0x61, 0x70, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x47, 0x0a, 0x0e, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63,
	0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0c, 0x70, 0x69, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a,
	0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x77, 0x61, 0x69, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73,
	0x12, 0x22, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x15, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26,
	0x0a, 0x0f, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x72, 0x41, 0x6d, 0x75, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xeb, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x72,
	0x41, 0x6d, 0x75, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x48, 0x0a, 0x10, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x41, 0x6d, 0x75, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x15, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x69, 0x6e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x46, 0x0a, 0x10, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x70, 0x0a, 0x12, 0x4c, 0x61, 0x6e, 0x56, 0x33, 0x42, 0x6f, 0x61, 0x74, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x22, 0x8d, 0x07, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x49, 0x0a, 0x0f,
	0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0xb6, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69,
	0x63, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x0f, 0x66, 0x6c, 0x65, 0x75, 0x72,
	0x5f, 0x66, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xa8, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x0d, 0x66, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4a, 0x0a, 0x12, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x65,
	0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x68, 0x69, 0x64,
	0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0a,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xde, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50, 0x0a, 0x12, 0x69, 0x72, 0x6f, 0x64,
	0x6f, 0x72, 0x69, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x93,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x69, 0x72, 0x6f, 0x64, 0x6f, 0x72,
	0x69, 0x43, 0x68, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x68,
	0x61, 0x72, 0x5f, 0x61, 0x6d, 0x75, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0xc4, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x41, 0x6d, 0x75, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x63, 0x68, 0x61, 0x72, 0x41, 0x6d, 0x75, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x12, 0x62, 0x72, 0x69, 0x63, 0x6b,
	0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xac, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x69,
	0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x11, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xab, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x0f, 0x63, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x45, 0x0a, 0x10, 0x6c, 0x61, 0x6e, 0x5f, 0x76, 0x33, 0x5f, 0x62, 0x6f, 0x61,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x89, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x56, 0x33, 0x42, 0x6f, 0x61, 0x74, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x61, 0x6e, 0x56,
	0x33, 0x42, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x22, 0x98, 0x01, 0x0a, 0x18, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x2d, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xfc, 0x29, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xbc,
	0x01, 0x0a, 0x1c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64,
	0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06,
	0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x96, 0x2a, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xa6, 0x01,
	0x0a, 0x25, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e,
	0x69, 0x63, 0x75, 0x73, 0x45, 0x78, 0x63, 0x61, 0x70, 0x65, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78, 0x63, 0x61, 0x70,
	0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x78, 0x63, 0x61, 0x70, 0x65, 0x64, 0x4d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d,
	0x44, 0x5f, 0x49, 0x44, 0x10, 0xbb, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x23, 0x49, 0x6e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x4c, 0x65, 0x66,
	0x74, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xc9,
	0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01,
	0x22, 0xcd, 0x02, 0x0a, 0x26, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63,
	0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x87, 0x01, 0x0a, 0x1a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0x4a, 0x0a, 0x1c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xb7,
	0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01,
	0x22, 0xd6, 0x01, 0x0a, 0x1d, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63,
	0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x50, 0x69, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x10, 0x8e, 0x2a, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xdb, 0x01, 0x0a, 0x1d, 0x49, 0x6e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73,
	0x50, 0x69, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49,
	0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43,
	0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xfd, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xe3, 0x01, 0x0a, 0x20, 0x49, 0x6e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x50, 0x69,
	0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x4d,
	0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x97, 0x2a, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52,
	0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xd9, 0x01,
	0x0a, 0x20, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e,
	0x69, 0x63, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x10, 0xd3, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xde, 0x01, 0x0a, 0x20, 0x49, 0x6e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43,
	0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xff, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xe6, 0x01, 0x0a, 0x23, 0x49,
	0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x55, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49,
	0x44, 0x10, 0xe4, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45,
	0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a,
	0x02, 0x10, 0x01, 0x22, 0x8b, 0x04, 0x0a, 0x22, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61,
	0x69, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63, 0x68,
	0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x77, 0x61, 0x69, 0x74,
	0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x77, 0x61, 0x69, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x55, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e,
	0x69, 0x63, 0x75, 0x73, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x49, 0x0a, 0x1b, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10,
	0x95, 0x2a, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f,
	0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10,
	0x01, 0x22, 0xc1, 0x01, 0x0a, 0x1c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44,
	0x5f, 0x49, 0x44, 0x10, 0x85, 0x2a, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xa5, 0x01, 0x0a, 0x1b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x75, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22, 0xa8, 0x03,
	0x0a, 0x1e, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e,
	0x69, 0x63, 0x75, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12,
	0x33, 0x0a, 0x15, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x45, 0x0a, 0x0c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64,
	0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06,
	0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xb9, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xd7, 0x02, 0x0a, 0x1c, 0x49, 0x6e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x45, 0x0a,
	0x0c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x33, 0x0a, 0x15, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0xc1, 0x03, 0x0a, 0x1a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x16, 0x6d,
	0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xfa, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63,
	0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x11, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x83,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x63, 0x0a, 0x19, 0x69, 0x72, 0x6f, 0x64,
	0x6f, 0x72, 0x69, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xe4, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x72, 0x6f,
	0x64, 0x6f, 0x72, 0x69, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x69, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4d, 0x0a,
	0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xc1, 0x29, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45,
	0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xa7, 0x01, 0x0a, 0x1c, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e,
	0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x83,
	0x2a, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01,
	0x22, 0xa2, 0x01, 0x0a, 0x17, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x45, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44,
	0x5f, 0x49, 0x44, 0x10, 0xeb, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x19, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46,
	0x61, 0x69, 0x72, 0x42, 0x75, 0x66, 0x66, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x22, 0x4d, 0x0a, 0x05, 0x43,
	0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xcc, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xd3, 0x02, 0x0a, 0x1a, 0x46,
	0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x5c, 0x0a, 0x0f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x47, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x53, 0x74, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x74, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x12,
	0x2e, 0x0a, 0x13, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x67, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x40,
	0x0a, 0x12, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x74, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xf3, 0x01, 0x0a, 0x17, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xdd, 0x01, 0x0a, 0x17, 0x46, 0x6c, 0x65, 0x75, 0x72,
	0x46, 0x61, 0x69, 0x72, 0x42, 0x6f, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x44, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x65,
	0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x1a, 0x46, 0x6c, 0x65, 0x75, 0x72,
	0x46, 0x61, 0x69, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x13, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46,
	0x61, 0x69, 0x72, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x10, 0x62, 0x6f, 0x73,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75,
	0x72, 0x46, 0x61, 0x69, 0x72, 0x42, 0x6f, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x6f, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x10, 0xec, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x1a, 0x02, 0x10, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x72,
	0x0a, 0x21, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44,
	0x10, 0xde, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02,
	0x10, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x1b, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65,
	0x65, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x22, 0x94, 0x03, 0x0a, 0x14, 0x48, 0x69, 0x64,
	0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x69, 0x64,
	0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x0f,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x69,
	0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x61, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x69,
	0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x68, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x1a, 0x64, 0x0a, 0x12, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64,
	0x53, 0x65, 0x65, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x9d, 0x01, 0x0a, 0x1a, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x05, 0x43,
	0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xd2, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22,
	0xa2, 0x01, 0x0a, 0x1a, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x10, 0xf7, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x1a, 0x02, 0x10, 0x01, 0x22, 0x7c, 0x0a, 0x16, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53,
	0x65, 0x65, 0x6b, 0x53, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x22, 0x62,
	0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xee, 0x29, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52,
	0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02,
	0x10, 0x01, 0x22, 0x81, 0x01, 0x0a, 0x16, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65,
	0x65, 0x6b, 0x53, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d,
	0x44, 0x5f, 0x49, 0x44, 0x10, 0xfa, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xfc, 0x01, 0x0a, 0x15, 0x48, 0x69, 0x64, 0x65, 0x41,
	0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61,
	0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68,
	0x65, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0xaf, 0x04, 0x0a, 0x17, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e,
	0x64, 0x53, 0x65, 0x65, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46,
	0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x77, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xc5, 0x29, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x57,
	0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45,
	0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x51, 0x55, 0x49, 0x54, 0x10, 0x02, 0x22, 0x88, 0x01, 0x0a, 0x1c, 0x48, 0x69, 0x64, 0x65,
	0x41, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x69, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44,
	0x10, 0xb6, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02,
	0x10, 0x01, 0x22, 0xbf, 0x01, 0x0a, 0x20, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65,
	0x65, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x10, 0xc7, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x1a, 0x02, 0x10, 0x01, 0x22, 0x4b, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x73, 0x73, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x22, 0xb3, 0x04, 0x0a, 0x11, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x11, 0x62, 0x61, 0x6e, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0e, 0x62, 0x61, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x54, 0x61, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x4b, 0x0a, 0x17, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x14, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x6d, 0x79, 0x73, 0x74, 0x65, 0x72, 0x79,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x4d, 0x79, 0x73, 0x74, 0x65, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6d, 0x79, 0x73, 0x74, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x53, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x73,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x45, 0x73, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x65, 0x78, 0x63, 0x61, 0x70, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x61, 0x70, 0x65, 0x64, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6c, 0x65, 0x66, 0x74, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x58, 0x0a,
	0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3, 0x02, 0x0a, 0x17, 0x49, 0x6e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x65, 0x73, 0x73, 0x45, 0x78, 0x70, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x6c, 0x64,
	0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x43, 0x68, 0x65, 0x73, 0x73, 0x45, 0x78, 0x70, 0x22, 0xc9, 0x02,
	0x0a, 0x0f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x66, 0x72, 0x65, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x53, 0x0a, 0x18, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x15, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x72, 0x65, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x72, 0x65, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x10, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x66, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xab, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x11, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x50, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x09, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x97, 0x03, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x73, 0x73, 0x4d, 0x79, 0x73, 0x74, 0x65,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5b, 0x0a, 0x12, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x4d, 0x79, 0x73, 0x74, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x12, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0f, 0x65, 0x78, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x52, 0x0a, 0x0f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x4d, 0x79, 0x73, 0x74, 0x65, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x61, 0x70, 0x1a, 0x43, 0x0a, 0x15, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x12, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x77, 0x0a, 0x13, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x69, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x43,
	0x75, 0x72, 0x73, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x73, 0x73, 0x50, 0x69,
	0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xd5,
	0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xb3, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x73, 0x73, 0x50,
	0x69, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x05,
	0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x88, 0x2a, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c,
	0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xce, 0x01, 0x0a, 0x13,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x50, 0x69, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x73,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4d, 0x0a,
	0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x84, 0x2a, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45,
	0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x80, 0x01, 0x0a,
	0x1a, 0x43, 0x68, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x22, 0x62, 0x0a, 0x05, 0x43,
	0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x8d, 0x2a, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22,
	0x85, 0x01, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49,
	0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43,
	0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xef, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x9f, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d,
	0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xd4, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x6d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x65,
	0x66, 0x74, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d,
	0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xf0, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x96, 0x01, 0x0a, 0x1a, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x61,
	0x70, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x61, 0x70, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44,
	0x10, 0xc2, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02,
	0x10, 0x01, 0x22, 0xb6, 0x01, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x4b, 0x0a, 0x17, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x05,
	0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x90, 0x2a, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c,
	0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xdd, 0x01, 0x0a, 0x18,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x38, 0x0a, 0x0d, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x22, 0x4d, 0x0a, 0x05,
	0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xc8, 0x29, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c,
	0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x81, 0x02, 0x0a, 0x18,
	0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0c, 0x6d, 0x79, 0x73, 0x74,
	0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x4d, 0x79, 0x73, 0x74, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x6d, 0x79, 0x73, 0x74, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x6c,
	0x65, 0x66, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x65, 0x66, 0x74, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x31, 0x0a, 0x15, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x12, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22,
	0x90, 0x01, 0x0a, 0x17, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x66, 0x66, 0x69, 0x78, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x18, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4a, 0x0a, 0x11, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68, 0x65, 0x73, 0x73, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x1e, 0x49, 0x72, 0x6f, 0x64, 0x6f,
	0x72, 0x69, 0x43, 0x68, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x09, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x17, 0x49, 0x72, 0x6f, 0x64,
	0x6f, 0x72, 0x69, 0x43, 0x68, 0x65, 0x73, 0x73, 0x4d, 0x79, 0x73, 0x74, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72,
	0x69, 0x43, 0x68, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x16,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x12, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x65,
	0x78, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xfc,
	0x01, 0x0a, 0x1e, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x72, 0x6f, 0x64, 0x6f,
	0x72, 0x69, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x65, 0x72, 0x66,
	0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6b,
	0x69, 0x6c, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x22, 0x76, 0x0a,
	0x16, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x1c, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72,
	0x69, 0x43, 0x68, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44,
	0x5f, 0x49, 0x44, 0x10, 0xf4, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x1d, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72,
	0x69, 0x43, 0x68, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x66, 0x74, 0x5f,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x6c, 0x65, 0x66, 0x74, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x4d, 0x0a, 0x05,
	0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xda, 0x29, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c,
	0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xe3, 0x01, 0x0a, 0x1c,
	0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74,
	0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x89, 0x01, 0x0a, 0x1d, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4d,
	0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xe1, 0x29, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52,
	0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xd2, 0x01,
	0x0a, 0x21, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x73,
	0x74, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44,
	0x10, 0xbc, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02,
	0x10, 0x01, 0x22, 0xa7, 0x01, 0x0a, 0x20, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4d, 0x0a,
	0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xbd, 0x29, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45,
	0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x7d, 0x0a, 0x17,
	0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d,
	0x44, 0x5f, 0x49, 0x44, 0x10, 0xe8, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x17,
	0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x81,
	0x2a, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01,
	0x22, 0x9e, 0x01, 0x0a, 0x1b, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x22, 0x62, 0x0a,
	0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xd9, 0x29, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45,
	0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10,
	0x01, 0x22, 0xa3, 0x01, 0x0a, 0x1b, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x73,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49,
	0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43,
	0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x89, 0x2a, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x9b, 0x01, 0x0a, 0x1a, 0x42, 0x72, 0x69, 0x63,
	0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49,
	0x64, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xcd,
	0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xa0, 0x01, 0x0a, 0x1a, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64,
	0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06,
	0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x82, 0x2a, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xa1, 0x01, 0x0a, 0x1a, 0x42, 0x72, 0x69,
	0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49,
	0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43,
	0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xd8, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x85, 0x01, 0x0a,
	0x1a, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x10, 0xea, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x1a, 0x02, 0x10, 0x01, 0x22, 0xa7, 0x01, 0x0a, 0x23, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x22,
	0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x87, 0x2a, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x57,
	0x0a, 0x19, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x69, 0x6e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x6f, 0x6f,
	0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f,
	0x63, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x88, 0x33, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xfa,
	0x01, 0x0a, 0x13, 0x4c, 0x61, 0x6e, 0x56, 0x33, 0x42, 0x6f, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3e, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x39, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x68, 0x69,
	0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x94, 0x03, 0x0a, 0x15,
	0x4c, 0x61, 0x6e, 0x56, 0x33, 0x42, 0x6f, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x67, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x73, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x75, 0x63, 0x63, 0x12, 0x26, 0x0a,
	0x0f, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44,
	0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x61, 0x6e, 0x56, 0x33, 0x42, 0x6f, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44,
	0x10, 0x8b, 0x33, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02,
	0x10, 0x01, 0x2a, 0xb5, 0x03, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x43, 0x55, 0x53, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x45, 0x55, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x52, 0x10,
	0x02, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x44, 0x45, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x53, 0x45, 0x45, 0x4b, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4a, 0x55, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x53, 0x54, 0x41,
	0x47, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x45,
	0x53, 0x53, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x53, 0x54, 0x41,
	0x47, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x52, 0x4f,
	0x44, 0x4f, 0x52, 0x49, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x5f, 0x41, 0x4d, 0x55, 0x53, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x53, 0x54,
	0x41, 0x47, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52,
	0x49, 0x43, 0x4b, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x10, 0x08, 0x12, 0x25, 0x0a,
	0x21, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45,
	0x43, 0x54, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x53, 0x54, 0x41,
	0x47, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x4e,
	0x5f, 0x56, 0x33, 0x5f, 0x42, 0x4f, 0x41, 0x54, 0x10, 0x0a, 0x2a, 0xb7, 0x01, 0x0a, 0x1b, 0x49,
	0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75,
	0x73, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e,
	0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x43,
	0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x24, 0x0a, 0x20, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x43,
	0x48, 0x41, 0x4e, 0x49, 0x43, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x55,
	0x49, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x43, 0x55, 0x53, 0x5f, 0x53, 0x54,
	0x41, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x46, 0x4c, 0x49, 0x50, 0x10, 0x02, 0x12,
	0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x43,
	0x48, 0x41, 0x4e, 0x49, 0x43, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x4b, 0x49,
	0x4c, 0x4c, 0x10, 0x03, 0x2a, 0xe5, 0x01, 0x0a, 0x24, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x43, 0x61, 0x72, 0x64, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a,
	0x28, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41,
	0x4e, 0x49, 0x43, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c,
	0x45, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x49,
	0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49,
	0x43, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e,
	0x47, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x2c, 0x0a,
	0x28, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41,
	0x4e, 0x49, 0x43, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c,
	0x45, 0x4e, 0x47, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x2f, 0x0a, 0x2b, 0x49,
	0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49,
	0x43, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e,
	0x47, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0xcf, 0x01, 0x0a,
	0x14, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x48, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x4e,
	0x44, 0x5f, 0x53, 0x45, 0x45, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x45,
	0x50, 0x41, 0x52, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x49, 0x44, 0x45, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x53, 0x45, 0x45, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x49,
	0x43, 0x4b, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x53, 0x45, 0x45, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x53,
	0x45, 0x45, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x49, 0x44, 0x45, 0x10, 0x03,
	0x12, 0x1c, 0x0a, 0x18, 0x48, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x45,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x45, 0x4b, 0x10, 0x04, 0x12, 0x1e,
	0x0a, 0x1a, 0x48, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x45, 0x4b, 0x5f,
	0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x05, 0x2a, 0xb2,
	0x01, 0x0a, 0x15, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x52, 0x49, 0x43,
	0x4b, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f,
	0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x52, 0x49,
	0x43, 0x4b, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45,
	0x5f, 0x50, 0x49, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x52, 0x49, 0x43, 0x4b,
	0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x52, 0x49, 0x43, 0x4b, 0x5f, 0x42,
	0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x52, 0x49, 0x43, 0x4b, 0x5f, 0x42, 0x52, 0x45,
	0x41, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c,
	0x45, 0x10, 0x04, 0x2a, 0x9d, 0x01, 0x0a, 0x13, 0x4c, 0x61, 0x6e, 0x56, 0x33, 0x42, 0x6f, 0x61,
	0x74, 0x4b, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x4c,
	0x41, 0x4e, 0x5f, 0x56, 0x33, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x4c, 0x41, 0x4e, 0x5f,
	0x56, 0x33, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45,
	0x58, 0x49, 0x54, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a,
	0x1d, 0x4c, 0x41, 0x4e, 0x5f, 0x56, 0x33, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x44, 0x49, 0x45, 0x10, 0x02,
	0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x41, 0x4e, 0x5f, 0x56, 0x33, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x10, 0x03, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x74, 0x65, 0x79, 0x76, 0x61, 0x74, 0x2d, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2f,
	0x68, 0x6b, 0x34, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cmd_cmd_multistage_play_proto_rawDescOnce sync.Once
	file_cmd_cmd_multistage_play_proto_rawDescData = file_cmd_cmd_multistage_play_proto_rawDesc
)

func file_cmd_cmd_multistage_play_proto_rawDescGZIP() []byte {
	file_cmd_cmd_multistage_play_proto_rawDescOnce.Do(func() {
		file_cmd_cmd_multistage_play_proto_rawDescData = protoimpl.X.CompressGZIP(file_cmd_cmd_multistage_play_proto_rawDescData)
	})
	return file_cmd_cmd_multistage_play_proto_rawDescData
}

var file_cmd_cmd_multistage_play_proto_enumTypes = make([]protoimpl.EnumInfo, 60)
var file_cmd_cmd_multistage_play_proto_msgTypes = make([]protoimpl.MessageInfo, 100)
var file_cmd_cmd_multistage_play_proto_goTypes = []interface{}{
	(MultistagePlayType)(0),                           // 0: proto.MultistagePlayType
	(InBattleMechanicusStageType)(0),                  // 1: proto.InBattleMechanicusStageType
	(InBattleMechanicusCardChallengeState)(0),         // 2: proto.InBattleMechanicusCardChallengeState
	(HideAndSeekStageType)(0),                         // 3: proto.HideAndSeekStageType
	(BrickBreakerStageType)(0),                        // 4: proto.BrickBreakerStageType
	(LanV3BoatKickReason)(0),                          // 5: proto.LanV3BoatKickReason
	(MultistagePlayInfoNotify_CmdId)(0),               // 6: proto.MultistagePlayInfoNotify.CmdId
	(MultistagePlayFinishStageReq_CmdId)(0),           // 7: proto.MultistagePlayFinishStageReq.CmdId
	(InBattleMechanicusExcapeMonsterNotify_CmdId)(0),  // 8: proto.InBattleMechanicusExcapeMonsterNotify.CmdId
	(InBattleMechanicusLeftMonsterNotify_CmdId)(0),    // 9: proto.InBattleMechanicusLeftMonsterNotify.CmdId
	(InBattleMechanicusBuildingPointsNotify_CmdId)(0), // 10: proto.InBattleMechanicusBuildingPointsNotify.CmdId
	(InBattleMechanicusPickCardReq_CmdId)(0),          // 11: proto.InBattleMechanicusPickCardReq.CmdId
	(InBattleMechanicusPickCardRsp_CmdId)(0),          // 12: proto.InBattleMechanicusPickCardRsp.CmdId
	(InBattleMechanicusPickCardNotify_CmdId)(0),       // 13: proto.InBattleMechanicusPickCardNotify.CmdId
	(InBattleMechanicusConfirmCardReq_CmdId)(0),       // 14: proto.InBattleMechanicusConfirmCardReq.CmdId
	(InBattleMechanicusConfirmCardRsp_CmdId)(0),       // 15: proto.InBattleMechanicusConfirmCardRsp.CmdId
	(InBattleMechanicusConfirmCardNotify_CmdId)(0),    // 16: proto.InBattleMechanicusConfirmCardNotify.CmdId
	(InBattleMechanicusCardResultNotify_CmdId)(0),     // 17: proto.InBattleMechanicusCardResultNotify.CmdId
	(MultistagePlayFinishStageRsp_CmdId)(0),           // 18: proto.MultistagePlayFinishStageRsp.CmdId
	(InBattleMechanicusSettleNotify_CmdId)(0),         // 19: proto.InBattleMechanicusSettleNotify.CmdId
	(MultistagePlaySettleNotify_CmdId)(0),             // 20: proto.MultistagePlaySettleNotify.CmdId
	(MultistagePlayStageEndNotify_CmdId)(0),           // 21: proto.MultistagePlayStageEndNotify.CmdId
	(MultistagePlayEndNotify_CmdId)(0),                // 22: proto.MultistagePlayEndNotify.CmdId
	(FleurFairBuffEnergyNotify_CmdId)(0),              // 23: proto.FleurFairBuffEnergyNotify.CmdId
	(FleurFairStageSettleNotify_CmdId)(0),             // 24: proto.FleurFairStageSettleNotify.CmdId
	(FleurFairFinishGalleryStageNotify_CmdId)(0),      // 25: proto.FleurFairFinishGalleryStageNotify.CmdId
	(HideAndSeekSelectAvatarReq_CmdId)(0),             // 26: proto.HideAndSeekSelectAvatarReq.CmdId
	(HideAndSeekSelectAvatarRsp_CmdId)(0),             // 27: proto.HideAndSeekSelectAvatarRsp.CmdId
	(HideAndSeekSetReadyReq_CmdId)(0),                 // 28: proto.HideAndSeekSetReadyReq.CmdId
	(HideAndSeekSetReadyRsp_CmdId)(0),                 // 29: proto.HideAndSeekSetReadyRsp.CmdId
	(HideAndSeekSettleNotify_CmdId)(0),                // 30: proto.HideAndSeekSettleNotify.CmdId
	(HideAndSeekSettleNotify_SettleReason)(0),         // 31: proto.HideAndSeekSettleNotify.SettleReason
	(HideAndSeekPlayerReadyNotify_CmdId)(0),           // 32: proto.HideAndSeekPlayerReadyNotify.CmdId
	(HideAndSeekPlayerSetAvatarNotify_CmdId)(0),       // 33: proto.HideAndSeekPlayerSetAvatarNotify.CmdId
	(ChessPickCardReq_CmdId)(0),                       // 34: proto.ChessPickCardReq.CmdId
	(ChessPickCardRsp_CmdId)(0),                       // 35: proto.ChessPickCardRsp.CmdId
	(ChessPickCardNotify_CmdId)(0),                    // 36: proto.ChessPickCardNotify.CmdId
	(ChessManualRefreshCardsReq_CmdId)(0),             // 37: proto.ChessManualRefreshCardsReq.CmdId
	(ChessManualRefreshCardsRsp_CmdId)(0),             // 38: proto.ChessManualRefreshCardsRsp.CmdId
	(ChessPlayerInfoNotify_CmdId)(0),                  // 39: proto.ChessPlayerInfoNotify.CmdId
	(ChessLeftMonstersNotify_CmdId)(0),                // 40: proto.ChessLeftMonstersNotify.CmdId
	(ChessEscapedMonstersNotify_CmdId)(0),             // 41: proto.ChessEscapedMonstersNotify.CmdId
	(ChessSelectedCardsNotify_CmdId)(0),               // 42: proto.ChessSelectedCardsNotify.CmdId
	(GlobalBuildingInfoNotify_CmdId)(0),               // 43: proto.GlobalBuildingInfoNotify.CmdId
	(IrodoriChessPlayerInfoNotify_CmdId)(0),           // 44: proto.IrodoriChessPlayerInfoNotify.CmdId
	(IrodoriChessLeftMonsterNotify_CmdId)(0),          // 45: proto.IrodoriChessLeftMonsterNotify.CmdId
	(BrickBreakerPlayerReadyNotify_CmdId)(0),          // 46: proto.BrickBreakerPlayerReadyNotify.CmdId
	(BrickBreakerPlayerSetAvatarNotify_CmdId)(0),      // 47: proto.BrickBreakerPlayerSetAvatarNotify.CmdId
	(BrickBreakerPlayerSetSkillNotify_CmdId)(0),       // 48: proto.BrickBreakerPlayerSetSkillNotify.CmdId
	(BrickBreakerSetReadyReq_CmdId)(0),                // 49: proto.BrickBreakerSetReadyReq.CmdId
	(BrickBreakerSetReadyRsp_CmdId)(0),                // 50: proto.BrickBreakerSetReadyRsp.CmdId
	(BrickBreakerSelectAvatarReq_CmdId)(0),            // 51: proto.BrickBreakerSelectAvatarReq.CmdId
	(BrickBreakerSelectAvatarRsp_CmdId)(0),            // 52: proto.BrickBreakerSelectAvatarRsp.CmdId
	(BrickBreakerSelectSkillReq_CmdId)(0),             // 53: proto.BrickBreakerSelectSkillReq.CmdId
	(BrickBreakerSelectSkillRsp_CmdId)(0),             // 54: proto.BrickBreakerSelectSkillRsp.CmdId
	(BrickBreakerSetChangingReq_CmdId)(0),             // 55: proto.BrickBreakerSetChangingReq.CmdId
	(BrickBreakerSetChangingRsp_CmdId)(0),             // 56: proto.BrickBreakerSetChangingRsp.CmdId
	(BrickBreakerPlayerSetChangingNotify_CmdId)(0),    // 57: proto.BrickBreakerPlayerSetChangingNotify.CmdId
	(CoinCollectPrepareStageNotify_CmdId)(0),          // 58: proto.CoinCollectPrepareStageNotify.CmdId
	(LanV3BoatSettleNotify_CmdId)(0),                  // 59: proto.LanV3BoatSettleNotify.CmdId
	(*InBattleMechanicusBuildingInfo)(nil),            // 60: proto.InBattleMechanicusBuildingInfo
	(*InBattleMechanicusPlayerInfo)(nil),              // 61: proto.InBattleMechanicusPlayerInfo
	(*InBattleMechanicusMonsterInfo)(nil),             // 62: proto.InBattleMechanicusMonsterInfo
	(*InBattleMechanicusCardInfo)(nil),                // 63: proto.InBattleMechanicusCardInfo
	(*InBattleMechanicusInfo)(nil),                    // 64: proto.InBattleMechanicusInfo
	(*InBattleFleurFairInfo)(nil),                     // 65: proto.InBattleFleurFairInfo
	(*CharAmusementAvatarInfo)(nil),                   // 66: proto.CharAmusementAvatarInfo
	(*CharAmusementInfo)(nil),                         // 67: proto.CharAmusementInfo
	(*BrickBreakerStageInfo)(nil),                     // 68: proto.BrickBreakerStageInfo
	(*CoinCollectStageInfo)(nil),                      // 69: proto.CoinCollectStageInfo
	(*LanV3BoatStageInfo)(nil),                        // 70: proto.LanV3BoatStageInfo
	(*MultistagePlayInfo)(nil),                        // 71: proto.MultistagePlayInfo
	(*MultistagePlayInfoNotify)(nil),                  // 72: proto.MultistagePlayInfoNotify
	(*MultistagePlayFinishStageReq)(nil),              // 73: proto.MultistagePlayFinishStageReq
	(*InBattleMechanicusExcapeMonsterNotify)(nil),     // 74: proto.InBattleMechanicusExcapeMonsterNotify
	(*InBattleMechanicusLeftMonsterNotify)(nil),       // 75: proto.InBattleMechanicusLeftMonsterNotify
	(*InBattleMechanicusBuildingPointsNotify)(nil),    // 76: proto.InBattleMechanicusBuildingPointsNotify
	(*InBattleMechanicusPickCardReq)(nil),             // 77: proto.InBattleMechanicusPickCardReq
	(*InBattleMechanicusPickCardRsp)(nil),             // 78: proto.InBattleMechanicusPickCardRsp
	(*InBattleMechanicusPickCardNotify)(nil),          // 79: proto.InBattleMechanicusPickCardNotify
	(*InBattleMechanicusConfirmCardReq)(nil),          // 80: proto.InBattleMechanicusConfirmCardReq
	(*InBattleMechanicusConfirmCardRsp)(nil),          // 81: proto.InBattleMechanicusConfirmCardRsp
	(*InBattleMechanicusConfirmCardNotify)(nil),       // 82: proto.InBattleMechanicusConfirmCardNotify
	(*InBattleMechanicusCardResultNotify)(nil),        // 83: proto.InBattleMechanicusCardResultNotify
	(*MultistagePlayFinishStageRsp)(nil),              // 84: proto.MultistagePlayFinishStageRsp
	(*MultistageSettleWatcherInfo)(nil),               // 85: proto.MultistageSettleWatcherInfo
	(*InBattleMechanicusSettleNotify)(nil),            // 86: proto.InBattleMechanicusSettleNotify
	(*InBattleMechanicusSettleInfo)(nil),              // 87: proto.InBattleMechanicusSettleInfo
	(*MultistagePlaySettleNotify)(nil),                // 88: proto.MultistagePlaySettleNotify
	(*MultistagePlayStageEndNotify)(nil),              // 89: proto.MultistagePlayStageEndNotify
	(*MultistagePlayEndNotify)(nil),                   // 90: proto.MultistagePlayEndNotify
	(*FleurFairBuffEnergyNotify)(nil),                 // 91: proto.FleurFairBuffEnergyNotify
	(*FleurFairGallerySettleInfo)(nil),                // 92: proto.FleurFairGallerySettleInfo
	(*FleurFairPlayerStatInfo)(nil),                   // 93: proto.FleurFairPlayerStatInfo
	(*FleurFairBossSettleInfo)(nil),                   // 94: proto.FleurFairBossSettleInfo
	(*FleurFairStageSettleNotify)(nil),                // 95: proto.FleurFairStageSettleNotify
	(*FleurFairFinishGalleryStageNotify)(nil),         // 96: proto.FleurFairFinishGalleryStageNotify
	(*HideAndSeekPlayerBattleInfo)(nil),               // 97: proto.HideAndSeekPlayerBattleInfo
	(*HideAndSeekStageInfo)(nil),                      // 98: proto.HideAndSeekStageInfo
	(*HideAndSeekSelectAvatarReq)(nil),                // 99: proto.HideAndSeekSelectAvatarReq
	(*HideAndSeekSelectAvatarRsp)(nil),                // 100: proto.HideAndSeekSelectAvatarRsp
	(*HideAndSeekSetReadyReq)(nil),                    // 101: proto.HideAndSeekSetReadyReq
	(*HideAndSeekSetReadyRsp)(nil),                    // 102: proto.HideAndSeekSetReadyRsp
	(*HideAndSeekSettleInfo)(nil),                     // 103: proto.HideAndSeekSettleInfo
	(*HideAndSeekSettleNotify)(nil),                   // 104: proto.HideAndSeekSettleNotify
	(*HideAndSeekPlayerReadyNotify)(nil),              // 105: proto.HideAndSeekPlayerReadyNotify
	(*HideAndSeekPlayerSetAvatarNotify)(nil),          // 106: proto.HideAndSeekPlayerSetAvatarNotify
	(*ChessCardInfo)(nil),                             // 107: proto.ChessCardInfo
	(*InBattleChessInfo)(nil),                         // 108: proto.InBattleChessInfo
	(*InBattleChessSettleInfo)(nil),                   // 109: proto.InBattleChessSettleInfo
	(*ChessPlayerInfo)(nil),                           // 110: proto.ChessPlayerInfo
	(*ChessMonsterInfo)(nil),                          // 111: proto.ChessMonsterInfo
	(*ChessEntranceInfo)(nil),                         // 112: proto.ChessEntranceInfo
	(*ChessEntranceDetailInfo)(nil),                   // 113: proto.ChessEntranceDetailInfo
	(*ChessMysteryInfo)(nil),                          // 114: proto.ChessMysteryInfo
	(*ChessNormalCardInfo)(nil),                       // 115: proto.ChessNormalCardInfo
	(*ChessPickCardReq)(nil),                          // 116: proto.ChessPickCardReq
	(*ChessPickCardRsp)(nil),                          // 117: proto.ChessPickCardRsp
	(*ChessPickCardNotify)(nil),                       // 118: proto.ChessPickCardNotify
	(*ChessManualRefreshCardsReq)(nil),                // 119: proto.ChessManualRefreshCardsReq
	(*ChessManualRefreshCardsRsp)(nil),                // 120: proto.ChessManualRefreshCardsRsp
	(*ChessPlayerInfoNotify)(nil),                     // 121: proto.ChessPlayerInfoNotify
	(*ChessLeftMonstersNotify)(nil),                   // 122: proto.ChessLeftMonstersNotify
	(*ChessEscapedMonstersNotify)(nil),                // 123: proto.ChessEscapedMonstersNotify
	(*ChessSelectedCardsNotify)(nil),                  // 124: proto.ChessSelectedCardsNotify
	(*GlobalBuildingInfoNotify)(nil),                  // 125: proto.GlobalBuildingInfoNotify
	(*InBattleIrodoriChessInfo)(nil),                  // 126: proto.InBattleIrodoriChessInfo
	(*IrodoriChessMonsterInfo)(nil),                   // 127: proto.IrodoriChessMonsterInfo
	(*IrodoriChessEntranceInfo)(nil),                  // 128: proto.IrodoriChessEntranceInfo
	(*IrodoriChessEntranceDetailInfo)(nil),            // 129: proto.IrodoriChessEntranceDetailInfo
	(*IrodoriChessMysteryInfo)(nil),                   // 130: proto.IrodoriChessMysteryInfo
	(*InBattleIrodoriChessSettleInfo)(nil),            // 131: proto.InBattleIrodoriChessSettleInfo
	(*IrodoriChessPlayerInfo)(nil),                    // 132: proto.IrodoriChessPlayerInfo
	(*IrodoriChessPlayerInfoNotify)(nil),              // 133: proto.IrodoriChessPlayerInfoNotify
	(*IrodoriChessLeftMonsterNotify)(nil),             // 134: proto.IrodoriChessLeftMonsterNotify
	(*BrickBreakerPlayerBattleInfo)(nil),              // 135: proto.BrickBreakerPlayerBattleInfo
	(*BrickBreakerPlayerReadyNotify)(nil),             // 136: proto.BrickBreakerPlayerReadyNotify
	(*BrickBreakerPlayerSetAvatarNotify)(nil),         // 137: proto.BrickBreakerPlayerSetAvatarNotify
	(*BrickBreakerPlayerSetSkillNotify)(nil),          // 138: proto.BrickBreakerPlayerSetSkillNotify
	(*BrickBreakerSetReadyReq)(nil),                   // 139: proto.BrickBreakerSetReadyReq
	(*BrickBreakerSetReadyRsp)(nil),                   // 140: proto.BrickBreakerSetReadyRsp
	(*BrickBreakerSelectAvatarReq)(nil),               // 141: proto.BrickBreakerSelectAvatarReq
	(*BrickBreakerSelectAvatarRsp)(nil),               // 142: proto.BrickBreakerSelectAvatarRsp
	(*BrickBreakerSelectSkillReq)(nil),                // 143: proto.BrickBreakerSelectSkillReq
	(*BrickBreakerSelectSkillRsp)(nil),                // 144: proto.BrickBreakerSelectSkillRsp
	(*BrickBreakerSetChangingReq)(nil),                // 145: proto.BrickBreakerSetChangingReq
	(*BrickBreakerSetChangingRsp)(nil),                // 146: proto.BrickBreakerSetChangingRsp
	(*BrickBreakerPlayerSetChangingNotify)(nil),       // 147: proto.BrickBreakerPlayerSetChangingNotify
	(*CoinCollectTeamAvatarInfo)(nil),                 // 148: proto.CoinCollectTeamAvatarInfo
	(*CoinCollectPlayerInfo)(nil),                     // 149: proto.CoinCollectPlayerInfo
	(*CoinCollectPrepareStageNotify)(nil),             // 150: proto.CoinCollectPrepareStageNotify
	(*LanV3BoatSettleInfo)(nil),                       // 151: proto.LanV3BoatSettleInfo
	(*LanV3BoatSettleNotify)(nil),                     // 152: proto.LanV3BoatSettleNotify
	nil,                                               // 153: proto.InBattleMechanicusBuildingPointsNotify.PlayerBuildingPointsMapEntry
	nil,                                               // 154: proto.InBattleMechanicusCardResultNotify.PlayerConfirmedCardMapEntry
	nil,                                               // 155: proto.FleurFairGallerySettleInfo.EnergyStatMapEntry
	nil,                                               // 156: proto.HideAndSeekStageInfo.BattleInfoMapEntry
	nil,                                               // 157: proto.InBattleChessInfo.PlayerInfoMapEntry
	nil,                                               // 158: proto.ChessMysteryInfo.EntrancePointMapEntry
	nil,                                               // 159: proto.ChessMysteryInfo.DetailInfoMapEntry
	(*ProfilePicture)(nil),                            // 160: proto.ProfilePicture
	(*ExhibitionDisplayInfo)(nil),                     // 161: proto.ExhibitionDisplayInfo
	(*BuildingInfo)(nil),                              // 162: proto.BuildingInfo
}
var file_cmd_cmd_multistage_play_proto_depIdxs = []int32{
	60,  // 0: proto.InBattleMechanicusPlayerInfo.building_list:type_name -> proto.InBattleMechanicusBuildingInfo
	2,   // 1: proto.InBattleMechanicusCardInfo.challenge_state:type_name -> proto.InBattleMechanicusCardChallengeState
	63,  // 2: proto.InBattleMechanicusInfo.history_card_list:type_name -> proto.InBattleMechanicusCardInfo
	1,   // 3: proto.InBattleMechanicusInfo.stage:type_name -> proto.InBattleMechanicusStageType
	62,  // 4: proto.InBattleMechanicusInfo.monster_list:type_name -> proto.InBattleMechanicusMonsterInfo
	63,  // 5: proto.InBattleMechanicusInfo.pick_card_list:type_name -> proto.InBattleMechanicusCardInfo
	61,  // 6: proto.InBattleMechanicusInfo.player_list:type_name -> proto.InBattleMechanicusPlayerInfo
	66,  // 7: proto.CharAmusementInfo.avatar_info_list:type_name -> proto.CharAmusementAvatarInfo
	4,   // 8: proto.BrickBreakerStageInfo.stage_type:type_name -> proto.BrickBreakerStageType
	135, // 9: proto.BrickBreakerStageInfo.battle_info_list:type_name -> proto.BrickBreakerPlayerBattleInfo
	149, // 10: proto.CoinCollectStageInfo.player_info_list:type_name -> proto.CoinCollectPlayerInfo
	64,  // 11: proto.MultistagePlayInfo.mechanicus_info:type_name -> proto.InBattleMechanicusInfo
	65,  // 12: proto.MultistagePlayInfo.fleur_fair_info:type_name -> proto.InBattleFleurFairInfo
	98,  // 13: proto.MultistagePlayInfo.hide_and_seek_info:type_name -> proto.HideAndSeekStageInfo
	108, // 14: proto.MultistagePlayInfo.chess_info:type_name -> proto.InBattleChessInfo
	126, // 15: proto.MultistagePlayInfo.irodori_chess_info:type_name -> proto.InBattleIrodoriChessInfo
	67,  // 16: proto.MultistagePlayInfo.char_amusement_info:type_name -> proto.CharAmusementInfo
	68,  // 17: proto.MultistagePlayInfo.brick_breaker_info:type_name -> proto.BrickBreakerStageInfo
	69,  // 18: proto.MultistagePlayInfo.coin_collect_info:type_name -> proto.CoinCollectStageInfo
	70,  // 19: proto.MultistagePlayInfo.lan_v3_boat_info:type_name -> proto.LanV3BoatStageInfo
	71,  // 20: proto.MultistagePlayInfoNotify.info:type_name -> proto.MultistagePlayInfo
	153, // 21: proto.InBattleMechanicusBuildingPointsNotify.player_building_points_map:type_name -> proto.InBattleMechanicusBuildingPointsNotify.PlayerBuildingPointsMapEntry
	63,  // 22: proto.InBattleMechanicusCardResultNotify.card_list:type_name -> proto.InBattleMechanicusCardInfo
	154, // 23: proto.InBattleMechanicusCardResultNotify.player_confirmed_card_map:type_name -> proto.InBattleMechanicusCardResultNotify.PlayerConfirmedCardMapEntry
	85,  // 24: proto.InBattleMechanicusSettleNotify.watcher_list:type_name -> proto.MultistageSettleWatcherInfo
	85,  // 25: proto.InBattleMechanicusSettleInfo.watcher_list:type_name -> proto.MultistageSettleWatcherInfo
	87,  // 26: proto.MultistagePlaySettleNotify.mechanicus_settle_info:type_name -> proto.InBattleMechanicusSettleInfo
	109, // 27: proto.MultistagePlaySettleNotify.chess_settle_info:type_name -> proto.InBattleChessSettleInfo
	131, // 28: proto.MultistagePlaySettleNotify.irodori_chess_settle_info:type_name -> proto.InBattleIrodoriChessSettleInfo
	155, // 29: proto.FleurFairGallerySettleInfo.energy_stat_map:type_name -> proto.FleurFairGallerySettleInfo.EnergyStatMapEntry
	160, // 30: proto.FleurFairPlayerStatInfo.profile_picture:type_name -> proto.ProfilePicture
	93,  // 31: proto.FleurFairBossSettleInfo.stat_info_list:type_name -> proto.FleurFairPlayerStatInfo
	92,  // 32: proto.FleurFairStageSettleNotify.gallery_settle_info:type_name -> proto.FleurFairGallerySettleInfo
	94,  // 33: proto.FleurFairStageSettleNotify.boss_settle_info:type_name -> proto.FleurFairBossSettleInfo
	3,   // 34: proto.HideAndSeekStageInfo.stage_type:type_name -> proto.HideAndSeekStageType
	156, // 35: proto.HideAndSeekStageInfo.battle_info_map:type_name -> proto.HideAndSeekStageInfo.BattleInfoMapEntry
	160, // 36: proto.HideAndSeekSettleInfo.profile_picture:type_name -> proto.ProfilePicture
	161, // 37: proto.HideAndSeekSettleInfo.card_list:type_name -> proto.ExhibitionDisplayInfo
	103, // 38: proto.HideAndSeekSettleNotify.settle_info_list:type_name -> proto.HideAndSeekSettleInfo
	31,  // 39: proto.HideAndSeekSettleNotify.reason:type_name -> proto.HideAndSeekSettleNotify.SettleReason
	161, // 40: proto.HideAndSeekSettleNotify.score_list:type_name -> proto.ExhibitionDisplayInfo
	107, // 41: proto.InBattleChessInfo.selected_card_info_list:type_name -> proto.ChessCardInfo
	114, // 42: proto.InBattleChessInfo.mystery_info:type_name -> proto.ChessMysteryInfo
	157, // 43: proto.InBattleChessInfo.player_info_map:type_name -> proto.InBattleChessInfo.PlayerInfoMapEntry
	161, // 44: proto.InBattleChessSettleInfo.score_list:type_name -> proto.ExhibitionDisplayInfo
	115, // 45: proto.ChessPlayerInfo.candidate_card_info_list:type_name -> proto.ChessNormalCardInfo
	111, // 46: proto.ChessEntranceInfo.monster_info_list:type_name -> proto.ChessMonsterInfo
	112, // 47: proto.ChessEntranceDetailInfo.info_list:type_name -> proto.ChessEntranceInfo
	158, // 48: proto.ChessMysteryInfo.entrance_point_map:type_name -> proto.ChessMysteryInfo.EntrancePointMapEntry
	159, // 49: proto.ChessMysteryInfo.detail_info_map:type_name -> proto.ChessMysteryInfo.DetailInfoMapEntry
	115, // 50: proto.ChessPickCardNotify.normal_card_info:type_name -> proto.ChessNormalCardInfo
	110, // 51: proto.ChessPlayerInfoNotify.player_info:type_name -> proto.ChessPlayerInfo
	107, // 52: proto.ChessSelectedCardsNotify.selected_card_info_list:type_name -> proto.ChessCardInfo
	162, // 53: proto.GlobalBuildingInfoNotify.building_list:type_name -> proto.BuildingInfo
	130, // 54: proto.InBattleIrodoriChessInfo.mystery_info:type_name -> proto.IrodoriChessMysteryInfo
	127, // 55: proto.IrodoriChessEntranceInfo.monster_info_list:type_name -> proto.IrodoriChessMonsterInfo
	128, // 56: proto.IrodoriChessEntranceDetailInfo.info_list:type_name -> proto.IrodoriChessEntranceInfo
	129, // 57: proto.IrodoriChessMysteryInfo.entrance_detail_info:type_name -> proto.IrodoriChessEntranceDetailInfo
	132, // 58: proto.IrodoriChessPlayerInfoNotify.player_info:type_name -> proto.IrodoriChessPlayerInfo
	148, // 59: proto.CoinCollectPlayerInfo.avatar_info_list:type_name -> proto.CoinCollectTeamAvatarInfo
	69,  // 60: proto.CoinCollectPrepareStageNotify.coin_collect_info:type_name -> proto.CoinCollectStageInfo
	160, // 61: proto.LanV3BoatSettleInfo.profile_picture:type_name -> proto.ProfilePicture
	161, // 62: proto.LanV3BoatSettleInfo.card_list:type_name -> proto.ExhibitionDisplayInfo
	161, // 63: proto.LanV3BoatSettleNotify.score_list:type_name -> proto.ExhibitionDisplayInfo
	151, // 64: proto.LanV3BoatSettleNotify.settle_info_list:type_name -> proto.LanV3BoatSettleInfo
	97,  // 65: proto.HideAndSeekStageInfo.BattleInfoMapEntry.value:type_name -> proto.HideAndSeekPlayerBattleInfo
	110, // 66: proto.InBattleChessInfo.PlayerInfoMapEntry.value:type_name -> proto.ChessPlayerInfo
	113, // 67: proto.ChessMysteryInfo.DetailInfoMapEntry.value:type_name -> proto.ChessEntranceDetailInfo
	68,  // [68:68] is the sub-list for method output_type
	68,  // [68:68] is the sub-list for method input_type
	68,  // [68:68] is the sub-list for extension type_name
	68,  // [68:68] is the sub-list for extension extendee
	0,   // [0:68] is the sub-list for field type_name
}

func init() { file_cmd_cmd_multistage_play_proto_init() }
func file_cmd_cmd_multistage_play_proto_init() {
	if File_cmd_cmd_multistage_play_proto != nil {
		return
	}
	file_define_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cmd_cmd_multistage_play_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InBattleMechanicusBuildingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InBattleMechanicusPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InBattleMechanicusMonsterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InBattleMechanicusCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InBattleMechanicusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InBattleFleurFairInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharAmusementAvatarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharAmusementInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinCollectStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanV3BoatStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultistagePlayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultistagePlayInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultistagePlayFinishStageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InBattleMechanicusExcapeMonsterNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InBattleMechanicusLeftMonsterNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InBattleMechanicusBuildingPointsNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InBattleMechanicusPickCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InBattleMechanicusPickCardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InBattleMechanicusPickCardNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InBattleMechanicusConfirmCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InBattleMechanicusConfirmCardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InBattleMechanicusConfirmCardNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InBattleMechanicusCardResultNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultistagePlayFinishStageRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultistageSettleWatcherInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InBattleMechanicusSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InBattleMechanicusSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultistagePlaySettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultistagePlayStageEndNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultistagePlayEndNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairBuffEnergyNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairGallerySettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairPlayerStatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairBossSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairStageSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairFinishGalleryStageNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideAndSeekPlayerBattleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideAndSeekStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideAndSeekSelectAvatarReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideAndSeekSelectAvatarRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideAndSeekSetReadyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideAndSeekSetReadyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideAndSeekSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideAndSeekSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideAndSeekPlayerReadyNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideAndSeekPlayerSetAvatarNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InBattleChessInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InBattleChessSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessMonsterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessEntranceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessEntranceDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessMysteryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessNormalCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessPickCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessPickCardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessPickCardNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessManualRefreshCardsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessManualRefreshCardsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessPlayerInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessLeftMonstersNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessEscapedMonstersNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessSelectedCardsNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalBuildingInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InBattleIrodoriChessInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriChessMonsterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriChessEntranceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriChessEntranceDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriChessMysteryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InBattleIrodoriChessSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriChessPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriChessPlayerInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriChessLeftMonsterNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerPlayerBattleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerPlayerReadyNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerPlayerSetAvatarNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerPlayerSetSkillNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerSetReadyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerSetReadyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerSelectAvatarReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerSelectAvatarRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerSelectSkillReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerSelectSkillRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerSetChangingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerSetChangingRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerPlayerSetChangingNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinCollectTeamAvatarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinCollectPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinCollectPrepareStageNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanV3BoatSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_multistage_play_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanV3BoatSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cmd_cmd_multistage_play_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*MultistagePlayInfo_MechanicusInfo)(nil),
		(*MultistagePlayInfo_FleurFairInfo)(nil),
		(*MultistagePlayInfo_HideAndSeekInfo)(nil),
		(*MultistagePlayInfo_ChessInfo)(nil),
		(*MultistagePlayInfo_IrodoriChessInfo)(nil),
		(*MultistagePlayInfo_CharAmusementInfo)(nil),
		(*MultistagePlayInfo_BrickBreakerInfo)(nil),
		(*MultistagePlayInfo_CoinCollectInfo)(nil),
		(*MultistagePlayInfo_LanV3BoatInfo)(nil),
	}
	file_cmd_cmd_multistage_play_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*MultistagePlaySettleNotify_MechanicusSettleInfo)(nil),
		(*MultistagePlaySettleNotify_ChessSettleInfo)(nil),
		(*MultistagePlaySettleNotify_IrodoriChessSettleInfo)(nil),
	}
	file_cmd_cmd_multistage_play_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*FleurFairStageSettleNotify_GallerySettleInfo)(nil),
		(*FleurFairStageSettleNotify_BossSettleInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cmd_cmd_multistage_play_proto_rawDesc,
			NumEnums:      60,
			NumMessages:   100,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cmd_cmd_multistage_play_proto_goTypes,
		DependencyIndexes: file_cmd_cmd_multistage_play_proto_depIdxs,
		EnumInfos:         file_cmd_cmd_multistage_play_proto_enumTypes,
		MessageInfos:      file_cmd_cmd_multistage_play_proto_msgTypes,
	}.Build()
	File_cmd_cmd_multistage_play_proto = out.File
	file_cmd_cmd_multistage_play_proto_rawDesc = nil
	file_cmd_cmd_multistage_play_proto_goTypes = nil
	file_cmd_cmd_multistage_play_proto_depIdxs = nil
}
