// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: server_only/bin.server.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TrialAvatarGrantRecordBin_GrantReason int32

const (
	TrialAvatarGrantRecordBin_INVALID        TrialAvatarGrantRecordBin_GrantReason = 0
	TrialAvatarGrantRecordBin_GRANT_BY_QUEST TrialAvatarGrantRecordBin_GrantReason = 1
)

// Enum value maps for TrialAvatarGrantRecordBin_GrantReason.
var (
	TrialAvatarGrantRecordBin_GrantReason_name = map[int32]string{
		0: "INVALID",
		1: "GRANT_BY_QUEST",
	}
	TrialAvatarGrantRecordBin_GrantReason_value = map[string]int32{
		"INVALID":        0,
		"GRANT_BY_QUEST": 1,
	}
)

func (x TrialAvatarGrantRecordBin_GrantReason) Enum() *TrialAvatarGrantRecordBin_GrantReason {
	p := new(TrialAvatarGrantRecordBin_GrantReason)
	*p = x
	return p
}

func (x TrialAvatarGrantRecordBin_GrantReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrialAvatarGrantRecordBin_GrantReason) Descriptor() protoreflect.EnumDescriptor {
	return file_server_only_bin_server_proto_enumTypes[0].Descriptor()
}

func (TrialAvatarGrantRecordBin_GrantReason) Type() protoreflect.EnumType {
	return &file_server_only_bin_server_proto_enumTypes[0]
}

func (x TrialAvatarGrantRecordBin_GrantReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrialAvatarGrantRecordBin_GrantReason.Descriptor instead.
func (TrialAvatarGrantRecordBin_GrantReason) EnumDescriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{10, 0}
}

type PlayerBasicCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level                     uint32            `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Exp                       uint32            `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
	Nickname                  string            `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	TotalGameTime             uint32            `protobuf:"varint,4,opt,name=total_game_time,json=totalGameTime,proto3" json:"total_game_time,omitempty"`
	TransNoCount              uint64            `protobuf:"varint,5,opt,name=trans_no_count,json=transNoCount,proto3" json:"trans_no_count,omitempty"`
	IsWeatherLocked           bool              `protobuf:"varint,6,opt,name=is_weather_locked,json=isWeatherLocked,proto3" json:"is_weather_locked,omitempty"`
	IsGameTimeLocked          bool              `protobuf:"varint,7,opt,name=is_game_time_locked,json=isGameTimeLocked,proto3" json:"is_game_time_locked,omitempty"`
	PersistStaminaLimit       float32           `protobuf:"fixed32,8,opt,name=persist_stamina_limit,json=persistStaminaLimit,proto3" json:"persist_stamina_limit,omitempty"`
	CurPersistStamina         float32           `protobuf:"fixed32,9,opt,name=cur_persist_stamina,json=curPersistStamina,proto3" json:"cur_persist_stamina,omitempty"`
	CurTemporaryStamina       float32           `protobuf:"fixed32,10,opt,name=cur_temporary_stamina,json=curTemporaryStamina,proto3" json:"cur_temporary_stamina,omitempty"`
	OpenStateMap              map[uint32]uint32 `protobuf:"bytes,11,rep,name=open_state_map,json=openStateMap,proto3" json:"open_state_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	PlayerTimeMs              uint64            `protobuf:"varint,12,opt,name=player_time_ms,json=playerTimeMs,proto3" json:"player_time_ms,omitempty"`
	LastLoginTime             uint32            `protobuf:"fixed32,13,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"`
	RegisterTime              uint32            `protobuf:"fixed32,14,opt,name=register_time,json=registerTime,proto3" json:"register_time,omitempty"`
	TotalLoginDays            uint32            `protobuf:"varint,15,opt,name=total_login_days,json=totalLoginDays,proto3" json:"total_login_days,omitempty"`
	UpdateLoginDaysTime       uint32            `protobuf:"varint,16,opt,name=update_login_days_time,json=updateLoginDaysTime,proto3" json:"update_login_days_time,omitempty"`
	RewardTakenLevelList      []uint32          `protobuf:"varint,17,rep,packed,name=reward_taken_level_list,json=rewardTakenLevelList,proto3" json:"reward_taken_level_list,omitempty"`
	LanguageType              uint32            `protobuf:"varint,18,opt,name=language_type,json=languageType,proto3" json:"language_type,omitempty"`
	ClientAppVersion          string            `protobuf:"bytes,19,opt,name=client_app_version,json=clientAppVersion,proto3" json:"client_app_version,omitempty"`
	ClientDeviceInfo          string            `protobuf:"bytes,20,opt,name=client_device_info,json=clientDeviceInfo,proto3" json:"client_device_info,omitempty"`
	ClientSystemVersion       string            `protobuf:"bytes,21,opt,name=client_system_version,json=clientSystemVersion,proto3" json:"client_system_version,omitempty"`
	IsGuest                   bool              `protobuf:"varint,22,opt,name=is_guest,json=isGuest,proto3" json:"is_guest,omitempty"`
	OnlineTime                uint32            `protobuf:"varint,23,opt,name=online_time,json=onlineTime,proto3" json:"online_time,omitempty"`
	IsProficientPlayer        bool              `protobuf:"varint,24,opt,name=is_proficient_player,json=isProficientPlayer,proto3" json:"is_proficient_player,omitempty"`
	SetLanguageTag            uint32            `protobuf:"varint,26,opt,name=set_language_tag,json=setLanguageTag,proto3" json:"set_language_tag,omitempty"`
	HeadImageAvatarId         uint32            `protobuf:"varint,27,opt,name=head_image_avatar_id,json=headImageAvatarId,proto3" json:"head_image_avatar_id,omitempty"`
	GuidSeqId                 uint32            `protobuf:"varint,28,opt,name=guid_seq_id,json=guidSeqId,proto3" json:"guid_seq_id,omitempty"`
	IsRebateMailSent          bool              `protobuf:"varint,29,opt,name=is_rebate_mail_sent,json=isRebateMailSent,proto3" json:"is_rebate_mail_sent,omitempty"`
	IsRebateMailReceived      bool              `protobuf:"varint,30,opt,name=is_rebate_mail_received,json=isRebateMailReceived,proto3" json:"is_rebate_mail_received,omitempty"`
	RegisterCps               string            `protobuf:"bytes,31,opt,name=register_cps,json=registerCps,proto3" json:"register_cps,omitempty"`
	CurJsonClimateType        uint32            `protobuf:"varint,32,opt,name=cur_json_climate_type,json=curJsonClimateType,proto3" json:"cur_json_climate_type,omitempty"`
	CurClimateMeter           float32           `protobuf:"fixed32,33,opt,name=cur_climate_meter,json=curClimateMeter,proto3" json:"cur_climate_meter,omitempty"`
	LastLogoutTime            uint32            `protobuf:"fixed32,34,opt,name=last_logout_time,json=lastLogoutTime,proto3" json:"last_logout_time,omitempty"`
	DataVersion               uint32            `protobuf:"varint,35,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"`
	LastDailyRefreshTime      uint32            `protobuf:"fixed32,36,opt,name=last_daily_refresh_time,json=lastDailyRefreshTime,proto3" json:"last_daily_refresh_time,omitempty"`
	IsAutoUnlockSpecificEquip bool              `protobuf:"varint,37,opt,name=is_auto_unlock_specific_equip,json=isAutoUnlockSpecificEquip,proto3" json:"is_auto_unlock_specific_equip,omitempty"`
	ProfilePictureCostumeId   uint32            `protobuf:"varint,38,opt,name=profile_picture_costume_id,json=profilePictureCostumeId,proto3" json:"profile_picture_costume_id,omitempty"`
	OnlineId                  string            `protobuf:"bytes,39,opt,name=online_id,json=onlineId,proto3" json:"online_id,omitempty"`
	PsnId                     string            `protobuf:"bytes,40,opt,name=psn_id,json=psnId,proto3" json:"psn_id,omitempty"`
	LastLoginPlatform         uint32            `protobuf:"varint,41,opt,name=last_login_platform,json=lastLoginPlatform,proto3" json:"last_login_platform,omitempty"`
	PivotClientTime           float64           `protobuf:"fixed64,42,opt,name=pivot_client_time,json=pivotClientTime,proto3" json:"pivot_client_time,omitempty"`
	PivotUnixTime             float64           `protobuf:"fixed64,43,opt,name=pivot_unix_time,json=pivotUnixTime,proto3" json:"pivot_unix_time,omitempty"`
	ClientTotalTickTime       float64           `protobuf:"fixed64,44,opt,name=client_total_tick_time,json=clientTotalTickTime,proto3" json:"client_total_tick_time,omitempty"`
	PlayerStatId              uint64            `protobuf:"varint,45,opt,name=player_stat_id,json=playerStatId,proto3" json:"player_stat_id,omitempty"`
	NicknameAuditBin          *ContentAuditBin  `protobuf:"bytes,46,opt,name=nickname_audit_bin,json=nicknameAuditBin,proto3" json:"nickname_audit_bin,omitempty"`
	IpCountryCode             string            `protobuf:"bytes,47,opt,name=ip_country_code,json=ipCountryCode,proto3" json:"ip_country_code,omitempty"`
	IpRegionName              string            `protobuf:"bytes,48,opt,name=ip_region_name,json=ipRegionName,proto3" json:"ip_region_name,omitempty"`
}

func (x *PlayerBasicCompBin) Reset() {
	*x = PlayerBasicCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerBasicCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBasicCompBin) ProtoMessage() {}

func (x *PlayerBasicCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBasicCompBin.ProtoReflect.Descriptor instead.
func (*PlayerBasicCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerBasicCompBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PlayerBasicCompBin) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *PlayerBasicCompBin) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *PlayerBasicCompBin) GetTotalGameTime() uint32 {
	if x != nil {
		return x.TotalGameTime
	}
	return 0
}

func (x *PlayerBasicCompBin) GetTransNoCount() uint64 {
	if x != nil {
		return x.TransNoCount
	}
	return 0
}

func (x *PlayerBasicCompBin) GetIsWeatherLocked() bool {
	if x != nil {
		return x.IsWeatherLocked
	}
	return false
}

func (x *PlayerBasicCompBin) GetIsGameTimeLocked() bool {
	if x != nil {
		return x.IsGameTimeLocked
	}
	return false
}

func (x *PlayerBasicCompBin) GetPersistStaminaLimit() float32 {
	if x != nil {
		return x.PersistStaminaLimit
	}
	return 0
}

func (x *PlayerBasicCompBin) GetCurPersistStamina() float32 {
	if x != nil {
		return x.CurPersistStamina
	}
	return 0
}

func (x *PlayerBasicCompBin) GetCurTemporaryStamina() float32 {
	if x != nil {
		return x.CurTemporaryStamina
	}
	return 0
}

func (x *PlayerBasicCompBin) GetOpenStateMap() map[uint32]uint32 {
	if x != nil {
		return x.OpenStateMap
	}
	return nil
}

func (x *PlayerBasicCompBin) GetPlayerTimeMs() uint64 {
	if x != nil {
		return x.PlayerTimeMs
	}
	return 0
}

func (x *PlayerBasicCompBin) GetLastLoginTime() uint32 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *PlayerBasicCompBin) GetRegisterTime() uint32 {
	if x != nil {
		return x.RegisterTime
	}
	return 0
}

func (x *PlayerBasicCompBin) GetTotalLoginDays() uint32 {
	if x != nil {
		return x.TotalLoginDays
	}
	return 0
}

func (x *PlayerBasicCompBin) GetUpdateLoginDaysTime() uint32 {
	if x != nil {
		return x.UpdateLoginDaysTime
	}
	return 0
}

func (x *PlayerBasicCompBin) GetRewardTakenLevelList() []uint32 {
	if x != nil {
		return x.RewardTakenLevelList
	}
	return nil
}

func (x *PlayerBasicCompBin) GetLanguageType() uint32 {
	if x != nil {
		return x.LanguageType
	}
	return 0
}

func (x *PlayerBasicCompBin) GetClientAppVersion() string {
	if x != nil {
		return x.ClientAppVersion
	}
	return ""
}

func (x *PlayerBasicCompBin) GetClientDeviceInfo() string {
	if x != nil {
		return x.ClientDeviceInfo
	}
	return ""
}

func (x *PlayerBasicCompBin) GetClientSystemVersion() string {
	if x != nil {
		return x.ClientSystemVersion
	}
	return ""
}

func (x *PlayerBasicCompBin) GetIsGuest() bool {
	if x != nil {
		return x.IsGuest
	}
	return false
}

func (x *PlayerBasicCompBin) GetOnlineTime() uint32 {
	if x != nil {
		return x.OnlineTime
	}
	return 0
}

func (x *PlayerBasicCompBin) GetIsProficientPlayer() bool {
	if x != nil {
		return x.IsProficientPlayer
	}
	return false
}

func (x *PlayerBasicCompBin) GetSetLanguageTag() uint32 {
	if x != nil {
		return x.SetLanguageTag
	}
	return 0
}

func (x *PlayerBasicCompBin) GetHeadImageAvatarId() uint32 {
	if x != nil {
		return x.HeadImageAvatarId
	}
	return 0
}

func (x *PlayerBasicCompBin) GetGuidSeqId() uint32 {
	if x != nil {
		return x.GuidSeqId
	}
	return 0
}

func (x *PlayerBasicCompBin) GetIsRebateMailSent() bool {
	if x != nil {
		return x.IsRebateMailSent
	}
	return false
}

func (x *PlayerBasicCompBin) GetIsRebateMailReceived() bool {
	if x != nil {
		return x.IsRebateMailReceived
	}
	return false
}

func (x *PlayerBasicCompBin) GetRegisterCps() string {
	if x != nil {
		return x.RegisterCps
	}
	return ""
}

func (x *PlayerBasicCompBin) GetCurJsonClimateType() uint32 {
	if x != nil {
		return x.CurJsonClimateType
	}
	return 0
}

func (x *PlayerBasicCompBin) GetCurClimateMeter() float32 {
	if x != nil {
		return x.CurClimateMeter
	}
	return 0
}

func (x *PlayerBasicCompBin) GetLastLogoutTime() uint32 {
	if x != nil {
		return x.LastLogoutTime
	}
	return 0
}

func (x *PlayerBasicCompBin) GetDataVersion() uint32 {
	if x != nil {
		return x.DataVersion
	}
	return 0
}

func (x *PlayerBasicCompBin) GetLastDailyRefreshTime() uint32 {
	if x != nil {
		return x.LastDailyRefreshTime
	}
	return 0
}

func (x *PlayerBasicCompBin) GetIsAutoUnlockSpecificEquip() bool {
	if x != nil {
		return x.IsAutoUnlockSpecificEquip
	}
	return false
}

func (x *PlayerBasicCompBin) GetProfilePictureCostumeId() uint32 {
	if x != nil {
		return x.ProfilePictureCostumeId
	}
	return 0
}

func (x *PlayerBasicCompBin) GetOnlineId() string {
	if x != nil {
		return x.OnlineId
	}
	return ""
}

func (x *PlayerBasicCompBin) GetPsnId() string {
	if x != nil {
		return x.PsnId
	}
	return ""
}

func (x *PlayerBasicCompBin) GetLastLoginPlatform() uint32 {
	if x != nil {
		return x.LastLoginPlatform
	}
	return 0
}

func (x *PlayerBasicCompBin) GetPivotClientTime() float64 {
	if x != nil {
		return x.PivotClientTime
	}
	return 0
}

func (x *PlayerBasicCompBin) GetPivotUnixTime() float64 {
	if x != nil {
		return x.PivotUnixTime
	}
	return 0
}

func (x *PlayerBasicCompBin) GetClientTotalTickTime() float64 {
	if x != nil {
		return x.ClientTotalTickTime
	}
	return 0
}

func (x *PlayerBasicCompBin) GetPlayerStatId() uint64 {
	if x != nil {
		return x.PlayerStatId
	}
	return 0
}

func (x *PlayerBasicCompBin) GetNicknameAuditBin() *ContentAuditBin {
	if x != nil {
		return x.NicknameAuditBin
	}
	return nil
}

func (x *PlayerBasicCompBin) GetIpCountryCode() string {
	if x != nil {
		return x.IpCountryCode
	}
	return ""
}

func (x *PlayerBasicCompBin) GetIpRegionName() string {
	if x != nil {
		return x.IpRegionName
	}
	return ""
}

type AvatarSkillBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassCdTime     uint32   `protobuf:"varint,1,opt,name=pass_cd_time,json=passCdTime,proto3" json:"pass_cd_time,omitempty"`
	FullCdTimeList []uint32 `protobuf:"varint,2,rep,packed,name=full_cd_time_list,json=fullCdTimeList,proto3" json:"full_cd_time_list,omitempty"`
}

func (x *AvatarSkillBin) Reset() {
	*x = AvatarSkillBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarSkillBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarSkillBin) ProtoMessage() {}

func (x *AvatarSkillBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarSkillBin.ProtoReflect.Descriptor instead.
func (*AvatarSkillBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{1}
}

func (x *AvatarSkillBin) GetPassCdTime() uint32 {
	if x != nil {
		return x.PassCdTime
	}
	return 0
}

func (x *AvatarSkillBin) GetFullCdTimeList() []uint32 {
	if x != nil {
		return x.FullCdTimeList
	}
	return nil
}

type AvatarBuffBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftTime           uint32   `protobuf:"varint,1,opt,name=left_time,json=leftTime,proto3" json:"left_time,omitempty"`
	BuffUid            uint32   `protobuf:"varint,2,opt,name=buff_uid,json=buffUid,proto3" json:"buff_uid,omitempty"`
	BuffType           uint32   `protobuf:"varint,3,opt,name=buff_type,json=buffType,proto3" json:"buff_type,omitempty"`
	BuffId             uint32   `protobuf:"varint,5,opt,name=buff_id,json=buffId,proto3" json:"buff_id,omitempty"`
	OnaddedAvatarsList []uint64 `protobuf:"varint,6,rep,packed,name=onadded_avatars_list,json=onaddedAvatarsList,proto3" json:"onadded_avatars_list,omitempty"`
}

func (x *AvatarBuffBin) Reset() {
	*x = AvatarBuffBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarBuffBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarBuffBin) ProtoMessage() {}

func (x *AvatarBuffBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarBuffBin.ProtoReflect.Descriptor instead.
func (*AvatarBuffBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{2}
}

func (x *AvatarBuffBin) GetLeftTime() uint32 {
	if x != nil {
		return x.LeftTime
	}
	return 0
}

func (x *AvatarBuffBin) GetBuffUid() uint32 {
	if x != nil {
		return x.BuffUid
	}
	return 0
}

func (x *AvatarBuffBin) GetBuffType() uint32 {
	if x != nil {
		return x.BuffType
	}
	return 0
}

func (x *AvatarBuffBin) GetBuffId() uint32 {
	if x != nil {
		return x.BuffId
	}
	return 0
}

func (x *AvatarBuffBin) GetOnaddedAvatarsList() []uint64 {
	if x != nil {
		return x.OnaddedAvatarsList
	}
	return nil
}

type AvatarFetterBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level                   uint32   `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Exp                     uint32   `protobuf:"varint,4,opt,name=exp,proto3" json:"exp,omitempty"`
	RewardedFetterLevelList []uint32 `protobuf:"varint,6,rep,packed,name=rewarded_fetter_level_list,json=rewardedFetterLevelList,proto3" json:"rewarded_fetter_level_list,omitempty"`
	IsLoginOnBirthday       bool     `protobuf:"varint,7,opt,name=is_login_on_birthday,json=isLoginOnBirthday,proto3" json:"is_login_on_birthday,omitempty"`
}

func (x *AvatarFetterBin) Reset() {
	*x = AvatarFetterBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarFetterBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarFetterBin) ProtoMessage() {}

func (x *AvatarFetterBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarFetterBin.ProtoReflect.Descriptor instead.
func (*AvatarFetterBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{3}
}

func (x *AvatarFetterBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AvatarFetterBin) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *AvatarFetterBin) GetRewardedFetterLevelList() []uint32 {
	if x != nil {
		return x.RewardedFetterLevelList
	}
	return nil
}

func (x *AvatarFetterBin) GetIsLoginOnBirthday() bool {
	if x != nil {
		return x.IsLoginOnBirthday
	}
	return false
}

type AvatarExpeditionBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State        uint32  `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	ExpId        uint32  `protobuf:"varint,2,opt,name=exp_id,json=expId,proto3" json:"exp_id,omitempty"`
	HourTime     uint32  `protobuf:"varint,3,opt,name=hour_time,json=hourTime,proto3" json:"hour_time,omitempty"`
	StartTime    uint32  `protobuf:"fixed32,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Transaction  uint64  `protobuf:"varint,5,opt,name=transaction,proto3" json:"transaction,omitempty"`
	ShortenRatio float32 `protobuf:"fixed32,6,opt,name=shorten_ratio,json=shortenRatio,proto3" json:"shorten_ratio,omitempty"`
}

func (x *AvatarExpeditionBin) Reset() {
	*x = AvatarExpeditionBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarExpeditionBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarExpeditionBin) ProtoMessage() {}

func (x *AvatarExpeditionBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarExpeditionBin.ProtoReflect.Descriptor instead.
func (*AvatarExpeditionBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{4}
}

func (x *AvatarExpeditionBin) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *AvatarExpeditionBin) GetExpId() uint32 {
	if x != nil {
		return x.ExpId
	}
	return 0
}

func (x *AvatarExpeditionBin) GetHourTime() uint32 {
	if x != nil {
		return x.HourTime
	}
	return 0
}

func (x *AvatarExpeditionBin) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AvatarExpeditionBin) GetTransaction() uint64 {
	if x != nil {
		return x.Transaction
	}
	return 0
}

func (x *AvatarExpeditionBin) GetShortenRatio() float32 {
	if x != nil {
		return x.ShortenRatio
	}
	return 0
}

type AvatarSkillDepotBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalentIdList           []uint32          `protobuf:"varint,1,rep,packed,name=talent_id_list,json=talentIdList,proto3" json:"talent_id_list,omitempty"`
	CoreProudSkillLevel    uint32            `protobuf:"varint,2,opt,name=core_proud_skill_level,json=coreProudSkillLevel,proto3" json:"core_proud_skill_level,omitempty"`
	InherentProudSkillList []uint32          `protobuf:"varint,3,rep,packed,name=inherent_proud_skill_list,json=inherentProudSkillList,proto3" json:"inherent_proud_skill_list,omitempty"`
	SkillLevelMap          map[uint32]uint32 `protobuf:"bytes,4,rep,name=skill_level_map,json=skillLevelMap,proto3" json:"skill_level_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *AvatarSkillDepotBin) Reset() {
	*x = AvatarSkillDepotBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarSkillDepotBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarSkillDepotBin) ProtoMessage() {}

func (x *AvatarSkillDepotBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarSkillDepotBin.ProtoReflect.Descriptor instead.
func (*AvatarSkillDepotBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{5}
}

func (x *AvatarSkillDepotBin) GetTalentIdList() []uint32 {
	if x != nil {
		return x.TalentIdList
	}
	return nil
}

func (x *AvatarSkillDepotBin) GetCoreProudSkillLevel() uint32 {
	if x != nil {
		return x.CoreProudSkillLevel
	}
	return 0
}

func (x *AvatarSkillDepotBin) GetInherentProudSkillList() []uint32 {
	if x != nil {
		return x.InherentProudSkillList
	}
	return nil
}

func (x *AvatarSkillDepotBin) GetSkillLevelMap() map[uint32]uint32 {
	if x != nil {
		return x.SkillLevelMap
	}
	return nil
}

type AvatarEquipAffixBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Cd         uint32 `protobuf:"varint,2,opt,name=cd,proto3" json:"cd,omitempty"`
	PassCdTime uint32 `protobuf:"varint,3,opt,name=pass_cd_time,json=passCdTime,proto3" json:"pass_cd_time,omitempty"`
}

func (x *AvatarEquipAffixBin) Reset() {
	*x = AvatarEquipAffixBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarEquipAffixBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarEquipAffixBin) ProtoMessage() {}

func (x *AvatarEquipAffixBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarEquipAffixBin.ProtoReflect.Descriptor instead.
func (*AvatarEquipAffixBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{6}
}

func (x *AvatarEquipAffixBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AvatarEquipAffixBin) GetCd() uint32 {
	if x != nil {
		return x.Cd
	}
	return 0
}

func (x *AvatarEquipAffixBin) GetPassCdTime() uint32 {
	if x != nil {
		return x.PassCdTime
	}
	return 0
}

type AvatarExtraPropBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AvatarExtraPropBin) Reset() {
	*x = AvatarExtraPropBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarExtraPropBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarExtraPropBin) ProtoMessage() {}

func (x *AvatarExtraPropBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarExtraPropBin.ProtoReflect.Descriptor instead.
func (*AvatarExtraPropBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{7}
}

func (x *AvatarExtraPropBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AvatarExtraPropBin) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AvatarBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarType           uint32                          `protobuf:"varint,1,opt,name=avatar_type,json=avatarType,proto3" json:"avatar_type,omitempty"`
	AvatarId             uint32                          `protobuf:"varint,2,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	Guid                 uint64                          `protobuf:"varint,3,opt,name=guid,proto3" json:"guid,omitempty"`
	Level                uint32                          `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	LifeState            uint32                          `protobuf:"varint,5,opt,name=life_state,json=lifeState,proto3" json:"life_state,omitempty"`
	CurHp                float32                         `protobuf:"fixed32,6,opt,name=cur_hp,json=curHp,proto3" json:"cur_hp,omitempty"`
	CurElemEnergy        float32                         `protobuf:"fixed32,7,opt,name=cur_elem_energy,json=curElemEnergy,proto3" json:"cur_elem_energy,omitempty"`
	PromoteLevel         uint32                          `protobuf:"varint,8,opt,name=promote_level,json=promoteLevel,proto3" json:"promote_level,omitempty"`
	SkillDepotId         uint32                          `protobuf:"varint,9,opt,name=skill_depot_id,json=skillDepotId,proto3" json:"skill_depot_id,omitempty"`
	SkillMap             map[uint32]*AvatarSkillBin      `protobuf:"bytes,10,rep,name=skill_map,json=skillMap,proto3" json:"skill_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BuffMap              map[uint32]*AvatarBuffBin       `protobuf:"bytes,11,rep,name=buff_map,json=buffMap,proto3" json:"buff_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DepotMap             map[uint32]*AvatarSkillDepotBin `protobuf:"bytes,12,rep,name=depot_map,json=depotMap,proto3" json:"depot_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EquipList            []*ItemBin                      `protobuf:"bytes,13,rep,name=equip_list,json=equipList,proto3" json:"equip_list,omitempty"`
	SatiationVal         float32                         `protobuf:"fixed32,14,opt,name=satiation_val,json=satiationVal,proto3" json:"satiation_val,omitempty"`
	SatiationPenaltyTime float32                         `protobuf:"fixed32,15,opt,name=satiation_penalty_time,json=satiationPenaltyTime,proto3" json:"satiation_penalty_time,omitempty"`
	FlycloakId           uint32                          `protobuf:"varint,16,opt,name=flycloak_id,json=flycloakId,proto3" json:"flycloak_id,omitempty"`
	AvatarEquipAffixList []*AvatarEquipAffixBin          `protobuf:"bytes,17,rep,name=avatar_equip_affix_list,json=avatarEquipAffixList,proto3" json:"avatar_equip_affix_list,omitempty"`
	BornTime             uint32                          `protobuf:"varint,18,opt,name=born_time,json=bornTime,proto3" json:"born_time,omitempty"`
	BuffList             []*AvatarBuffBin                `protobuf:"bytes,19,rep,name=buff_list,json=buffList,proto3" json:"buff_list,omitempty"`
	CostumeId            uint32                          `protobuf:"varint,20,opt,name=costume_id,json=costumeId,proto3" json:"costume_id,omitempty"`
	ExtraPropList        []*AvatarExtraPropBin           `protobuf:"bytes,21,rep,name=extra_prop_list,json=extraPropList,proto3" json:"extra_prop_list,omitempty"`
	// Types that are assignable to Detail:
	//
	//	*AvatarBin_FormalAvatar
	//	*AvatarBin_TrialAvatar
	//	*AvatarBin_MirrorAvatar
	Detail isAvatarBin_Detail `protobuf_oneof:"detail"`
}

func (x *AvatarBin) Reset() {
	*x = AvatarBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarBin) ProtoMessage() {}

func (x *AvatarBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarBin.ProtoReflect.Descriptor instead.
func (*AvatarBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{8}
}

func (x *AvatarBin) GetAvatarType() uint32 {
	if x != nil {
		return x.AvatarType
	}
	return 0
}

func (x *AvatarBin) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *AvatarBin) GetGuid() uint64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *AvatarBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AvatarBin) GetLifeState() uint32 {
	if x != nil {
		return x.LifeState
	}
	return 0
}

func (x *AvatarBin) GetCurHp() float32 {
	if x != nil {
		return x.CurHp
	}
	return 0
}

func (x *AvatarBin) GetCurElemEnergy() float32 {
	if x != nil {
		return x.CurElemEnergy
	}
	return 0
}

func (x *AvatarBin) GetPromoteLevel() uint32 {
	if x != nil {
		return x.PromoteLevel
	}
	return 0
}

func (x *AvatarBin) GetSkillDepotId() uint32 {
	if x != nil {
		return x.SkillDepotId
	}
	return 0
}

func (x *AvatarBin) GetSkillMap() map[uint32]*AvatarSkillBin {
	if x != nil {
		return x.SkillMap
	}
	return nil
}

func (x *AvatarBin) GetBuffMap() map[uint32]*AvatarBuffBin {
	if x != nil {
		return x.BuffMap
	}
	return nil
}

func (x *AvatarBin) GetDepotMap() map[uint32]*AvatarSkillDepotBin {
	if x != nil {
		return x.DepotMap
	}
	return nil
}

func (x *AvatarBin) GetEquipList() []*ItemBin {
	if x != nil {
		return x.EquipList
	}
	return nil
}

func (x *AvatarBin) GetSatiationVal() float32 {
	if x != nil {
		return x.SatiationVal
	}
	return 0
}

func (x *AvatarBin) GetSatiationPenaltyTime() float32 {
	if x != nil {
		return x.SatiationPenaltyTime
	}
	return 0
}

func (x *AvatarBin) GetFlycloakId() uint32 {
	if x != nil {
		return x.FlycloakId
	}
	return 0
}

func (x *AvatarBin) GetAvatarEquipAffixList() []*AvatarEquipAffixBin {
	if x != nil {
		return x.AvatarEquipAffixList
	}
	return nil
}

func (x *AvatarBin) GetBornTime() uint32 {
	if x != nil {
		return x.BornTime
	}
	return 0
}

func (x *AvatarBin) GetBuffList() []*AvatarBuffBin {
	if x != nil {
		return x.BuffList
	}
	return nil
}

func (x *AvatarBin) GetCostumeId() uint32 {
	if x != nil {
		return x.CostumeId
	}
	return 0
}

func (x *AvatarBin) GetExtraPropList() []*AvatarExtraPropBin {
	if x != nil {
		return x.ExtraPropList
	}
	return nil
}

func (m *AvatarBin) GetDetail() isAvatarBin_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *AvatarBin) GetFormalAvatar() *FormalAvatarBin {
	if x, ok := x.GetDetail().(*AvatarBin_FormalAvatar); ok {
		return x.FormalAvatar
	}
	return nil
}

func (x *AvatarBin) GetTrialAvatar() *TrialAvatarBin {
	if x, ok := x.GetDetail().(*AvatarBin_TrialAvatar); ok {
		return x.TrialAvatar
	}
	return nil
}

func (x *AvatarBin) GetMirrorAvatar() *MirrorAvatarBin {
	if x, ok := x.GetDetail().(*AvatarBin_MirrorAvatar); ok {
		return x.MirrorAvatar
	}
	return nil
}

type isAvatarBin_Detail interface {
	isAvatarBin_Detail()
}

type AvatarBin_FormalAvatar struct {
	FormalAvatar *FormalAvatarBin `protobuf:"bytes,101,opt,name=formal_avatar,json=formalAvatar,proto3,oneof"`
}

type AvatarBin_TrialAvatar struct {
	TrialAvatar *TrialAvatarBin `protobuf:"bytes,102,opt,name=trial_avatar,json=trialAvatar,proto3,oneof"`
}

type AvatarBin_MirrorAvatar struct {
	MirrorAvatar *MirrorAvatarBin `protobuf:"bytes,103,opt,name=mirror_avatar,json=mirrorAvatar,proto3,oneof"`
}

func (*AvatarBin_FormalAvatar) isAvatarBin_Detail() {}

func (*AvatarBin_TrialAvatar) isAvatarBin_Detail() {}

func (*AvatarBin_MirrorAvatar) isAvatarBin_Detail() {}

type AvatarSnapshotBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarSnapshotType uint32     `protobuf:"varint,1,opt,name=avatar_snapshot_type,json=avatarSnapshotType,proto3" json:"avatar_snapshot_type,omitempty"`
	AvatarBin          *AvatarBin `protobuf:"bytes,2,opt,name=avatar_bin,json=avatarBin,proto3" json:"avatar_bin,omitempty"`
}

func (x *AvatarSnapshotBin) Reset() {
	*x = AvatarSnapshotBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarSnapshotBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarSnapshotBin) ProtoMessage() {}

func (x *AvatarSnapshotBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarSnapshotBin.ProtoReflect.Descriptor instead.
func (*AvatarSnapshotBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{9}
}

func (x *AvatarSnapshotBin) GetAvatarSnapshotType() uint32 {
	if x != nil {
		return x.AvatarSnapshotType
	}
	return 0
}

func (x *AvatarSnapshotBin) GetAvatarBin() *AvatarBin {
	if x != nil {
		return x.AvatarBin
	}
	return nil
}

type TrialAvatarGrantRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantReason       uint32 `protobuf:"varint,1,opt,name=grant_reason,json=grantReason,proto3" json:"grant_reason,omitempty"`
	FromParentQuestId uint32 `protobuf:"varint,2,opt,name=from_parent_quest_id,json=fromParentQuestId,proto3" json:"from_parent_quest_id,omitempty"`
}

func (x *TrialAvatarGrantRecordBin) Reset() {
	*x = TrialAvatarGrantRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialAvatarGrantRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialAvatarGrantRecordBin) ProtoMessage() {}

func (x *TrialAvatarGrantRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialAvatarGrantRecordBin.ProtoReflect.Descriptor instead.
func (*TrialAvatarGrantRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{10}
}

func (x *TrialAvatarGrantRecordBin) GetGrantReason() uint32 {
	if x != nil {
		return x.GrantReason
	}
	return 0
}

func (x *TrialAvatarGrantRecordBin) GetFromParentQuestId() uint32 {
	if x != nil {
		return x.FromParentQuestId
	}
	return 0
}

type FormalAvatarBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exp                         uint32               `protobuf:"varint,1,opt,name=exp,proto3" json:"exp,omitempty"`
	EquipGuidList               []uint64             `protobuf:"varint,2,rep,packed,name=equip_guid_list,json=equipGuidList,proto3" json:"equip_guid_list,omitempty"`
	Fetter                      *AvatarFetterBin     `protobuf:"bytes,3,opt,name=fetter,proto3" json:"fetter,omitempty"`
	ExpeditionData              *AvatarExpeditionBin `protobuf:"bytes,4,opt,name=expedition_data,json=expeditionData,proto3" json:"expedition_data,omitempty"`
	AvatarRepeatCount           uint32               `protobuf:"varint,5,opt,name=avatar_repeat_count,json=avatarRepeatCount,proto3" json:"avatar_repeat_count,omitempty"`
	IsFocus                     bool                 `protobuf:"varint,6,opt,name=is_focus,json=isFocus,proto3" json:"is_focus,omitempty"`
	TakenPromoteRewardLevelList []uint32             `protobuf:"varint,7,rep,packed,name=taken_promote_reward_level_list,json=takenPromoteRewardLevelList,proto3" json:"taken_promote_reward_level_list,omitempty"`
	CostumeId                   uint32               `protobuf:"varint,8,opt,name=costume_id,json=costumeId,proto3" json:"costume_id,omitempty"`
}

func (x *FormalAvatarBin) Reset() {
	*x = FormalAvatarBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormalAvatarBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormalAvatarBin) ProtoMessage() {}

func (x *FormalAvatarBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormalAvatarBin.ProtoReflect.Descriptor instead.
func (*FormalAvatarBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{11}
}

func (x *FormalAvatarBin) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *FormalAvatarBin) GetEquipGuidList() []uint64 {
	if x != nil {
		return x.EquipGuidList
	}
	return nil
}

func (x *FormalAvatarBin) GetFetter() *AvatarFetterBin {
	if x != nil {
		return x.Fetter
	}
	return nil
}

func (x *FormalAvatarBin) GetExpeditionData() *AvatarExpeditionBin {
	if x != nil {
		return x.ExpeditionData
	}
	return nil
}

func (x *FormalAvatarBin) GetAvatarRepeatCount() uint32 {
	if x != nil {
		return x.AvatarRepeatCount
	}
	return 0
}

func (x *FormalAvatarBin) GetIsFocus() bool {
	if x != nil {
		return x.IsFocus
	}
	return false
}

func (x *FormalAvatarBin) GetTakenPromoteRewardLevelList() []uint32 {
	if x != nil {
		return x.TakenPromoteRewardLevelList
	}
	return nil
}

func (x *FormalAvatarBin) GetCostumeId() uint32 {
	if x != nil {
		return x.CostumeId
	}
	return 0
}

type TrialAvatarBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrialAvatarId  uint32                     `protobuf:"varint,1,opt,name=trial_avatar_id,json=trialAvatarId,proto3" json:"trial_avatar_id,omitempty"`
	GrantRecordBin *TrialAvatarGrantRecordBin `protobuf:"bytes,2,opt,name=grant_record_bin,json=grantRecordBin,proto3" json:"grant_record_bin,omitempty"`
	IsInherit      bool                       `protobuf:"varint,3,opt,name=is_inherit,json=isInherit,proto3" json:"is_inherit,omitempty"`
}

func (x *TrialAvatarBin) Reset() {
	*x = TrialAvatarBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialAvatarBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialAvatarBin) ProtoMessage() {}

func (x *TrialAvatarBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialAvatarBin.ProtoReflect.Descriptor instead.
func (*TrialAvatarBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{12}
}

func (x *TrialAvatarBin) GetTrialAvatarId() uint32 {
	if x != nil {
		return x.TrialAvatarId
	}
	return 0
}

func (x *TrialAvatarBin) GetGrantRecordBin() *TrialAvatarGrantRecordBin {
	if x != nil {
		return x.GrantRecordBin
	}
	return nil
}

func (x *TrialAvatarBin) GetIsInherit() bool {
	if x != nil {
		return x.IsInherit
	}
	return false
}

type MirrorAvatarBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarSnapshotType uint32 `protobuf:"varint,1,opt,name=avatar_snapshot_type,json=avatarSnapshotType,proto3" json:"avatar_snapshot_type,omitempty"`
}

func (x *MirrorAvatarBin) Reset() {
	*x = MirrorAvatarBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirrorAvatarBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirrorAvatarBin) ProtoMessage() {}

func (x *MirrorAvatarBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirrorAvatarBin.ProtoReflect.Descriptor instead.
func (*MirrorAvatarBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{13}
}

func (x *MirrorAvatarBin) GetAvatarSnapshotType() uint32 {
	if x != nil {
		return x.AvatarSnapshotType
	}
	return 0
}

type AvatarTeamBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarGuidList    []uint64 `protobuf:"varint,1,rep,packed,name=avatar_guid_list,json=avatarGuidList,proto3" json:"avatar_guid_list,omitempty"`
	TeamName          string   `protobuf:"bytes,2,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`
	LastCurAvatarGuid uint64   `protobuf:"varint,3,opt,name=last_cur_avatar_guid,json=lastCurAvatarGuid,proto3" json:"last_cur_avatar_guid,omitempty"`
}

func (x *AvatarTeamBin) Reset() {
	*x = AvatarTeamBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarTeamBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarTeamBin) ProtoMessage() {}

func (x *AvatarTeamBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarTeamBin.ProtoReflect.Descriptor instead.
func (*AvatarTeamBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{14}
}

func (x *AvatarTeamBin) GetAvatarGuidList() []uint64 {
	if x != nil {
		return x.AvatarGuidList
	}
	return nil
}

func (x *AvatarTeamBin) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *AvatarTeamBin) GetLastCurAvatarGuid() uint64 {
	if x != nil {
		return x.LastCurAvatarGuid
	}
	return 0
}

type AvatarRenameAuditBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarName string `protobuf:"bytes,1,opt,name=avatar_name,json=avatarName,proto3" json:"avatar_name,omitempty"`
	SubmitTime uint32 `protobuf:"varint,2,opt,name=submit_time,json=submitTime,proto3" json:"submit_time,omitempty"`
	AuditState uint32 `protobuf:"varint,3,opt,name=audit_state,json=auditState,proto3" json:"audit_state,omitempty"`
	SourceType uint32 `protobuf:"varint,4,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
}

func (x *AvatarRenameAuditBin) Reset() {
	*x = AvatarRenameAuditBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarRenameAuditBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarRenameAuditBin) ProtoMessage() {}

func (x *AvatarRenameAuditBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarRenameAuditBin.ProtoReflect.Descriptor instead.
func (*AvatarRenameAuditBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{15}
}

func (x *AvatarRenameAuditBin) GetAvatarName() string {
	if x != nil {
		return x.AvatarName
	}
	return ""
}

func (x *AvatarRenameAuditBin) GetSubmitTime() uint32 {
	if x != nil {
		return x.SubmitTime
	}
	return 0
}

func (x *AvatarRenameAuditBin) GetAuditState() uint32 {
	if x != nil {
		return x.AuditState
	}
	return 0
}

func (x *AvatarRenameAuditBin) GetSourceType() uint32 {
	if x != nil {
		return x.SourceType
	}
	return 0
}

type AvatarRenameBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId        uint32                `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	HasSetByQuest   bool                  `protobuf:"varint,2,opt,name=has_set_by_quest,json=hasSetByQuest,proto3" json:"has_set_by_quest,omitempty"`
	CurAvatarName   string                `protobuf:"bytes,3,opt,name=cur_avatar_name,json=curAvatarName,proto3" json:"cur_avatar_name,omitempty"`
	RenameAuditData *AvatarRenameAuditBin `protobuf:"bytes,4,opt,name=rename_audit_data,json=renameAuditData,proto3" json:"rename_audit_data,omitempty"`
}

func (x *AvatarRenameBin) Reset() {
	*x = AvatarRenameBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarRenameBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarRenameBin) ProtoMessage() {}

func (x *AvatarRenameBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarRenameBin.ProtoReflect.Descriptor instead.
func (*AvatarRenameBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{16}
}

func (x *AvatarRenameBin) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *AvatarRenameBin) GetHasSetByQuest() bool {
	if x != nil {
		return x.HasSetByQuest
	}
	return false
}

func (x *AvatarRenameBin) GetCurAvatarName() string {
	if x != nil {
		return x.CurAvatarName
	}
	return ""
}

func (x *AvatarRenameBin) GetRenameAuditData() *AvatarRenameAuditBin {
	if x != nil {
		return x.RenameAuditData
	}
	return nil
}

type PlayerAvatarCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarList                      []*AvatarBin              `protobuf:"bytes,1,rep,name=avatar_list,json=avatarList,proto3" json:"avatar_list,omitempty"`
	CurAvatarGuid                   uint64                    `protobuf:"varint,2,opt,name=cur_avatar_guid,json=curAvatarGuid,proto3" json:"cur_avatar_guid,omitempty"`
	PbOnlyCurPos                    *VectorBin                `protobuf:"bytes,3,opt,name=pb_only_cur_pos,json=pbOnlyCurPos,proto3" json:"pb_only_cur_pos,omitempty"`
	PbOnlyCurRot                    *VectorBin                `protobuf:"bytes,4,opt,name=pb_only_cur_rot,json=pbOnlyCurRot,proto3" json:"pb_only_cur_rot,omitempty"`
	TeamMap                         map[uint32]*AvatarTeamBin `protobuf:"bytes,5,rep,name=team_map,json=teamMap,proto3" json:"team_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CurTeamId                       uint32                    `protobuf:"varint,6,opt,name=cur_team_id,json=curTeamId,proto3" json:"cur_team_id,omitempty"`
	LastChangeAvatarTime            uint64                    `protobuf:"varint,7,opt,name=last_change_avatar_time,json=lastChangeAvatarTime,proto3" json:"last_change_avatar_time,omitempty"`
	IsSpringAutoUse                 bool                      `protobuf:"varint,8,opt,name=is_spring_auto_use,json=isSpringAutoUse,proto3" json:"is_spring_auto_use,omitempty"`
	SpringAutoUsePercent            uint32                    `protobuf:"varint,9,opt,name=spring_auto_use_percent,json=springAutoUsePercent,proto3" json:"spring_auto_use_percent,omitempty"`
	LastBackgroudAvatarRecoverTime  uint32                    `protobuf:"fixed32,10,opt,name=last_backgroud_avatar_recover_time,json=lastBackgroudAvatarRecoverTime,proto3" json:"last_backgroud_avatar_recover_time,omitempty"`
	CurSpringVolume                 uint32                    `protobuf:"varint,11,opt,name=cur_spring_volume,json=curSpringVolume,proto3" json:"cur_spring_volume,omitempty"`
	IsFlyable                       bool                      `protobuf:"varint,12,opt,name=is_flyable,json=isFlyable,proto3" json:"is_flyable,omitempty"`
	IsTransferable                  bool                      `protobuf:"varint,13,opt,name=is_transferable,json=isTransferable,proto3" json:"is_transferable,omitempty"`
	LastAvatarGuid                  uint32                    `protobuf:"varint,14,opt,name=last_avatar_guid,json=lastAvatarGuid,proto3" json:"last_avatar_guid,omitempty"`
	ChooseAvatarGuid                uint64                    `protobuf:"varint,15,opt,name=choose_avatar_guid,json=chooseAvatarGuid,proto3" json:"choose_avatar_guid,omitempty"`
	DieType                         uint32                    `protobuf:"varint,16,opt,name=die_type,json=dieType,proto3" json:"die_type,omitempty"`
	TempAvatarGuidList              []uint64                  `protobuf:"varint,17,rep,packed,name=temp_avatar_guid_list,json=tempAvatarGuidList,proto3" json:"temp_avatar_guid_list,omitempty"`
	AvatarTeamBuffMap               map[uint32]*AvatarBuffBin `protobuf:"bytes,18,rep,name=avatar_team_buff_map,json=avatarTeamBuffMap,proto3" json:"avatar_team_buff_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LastServerBuffUid               uint32                    `protobuf:"varint,19,opt,name=last_server_buff_uid,json=lastServerBuffUid,proto3" json:"last_server_buff_uid,omitempty"`
	TotalExpeditionNum              uint32                    `protobuf:"varint,20,opt,name=total_expedition_num,json=totalExpeditionNum,proto3" json:"total_expedition_num,omitempty"`
	OwnedFlycloakList               []uint32                  `protobuf:"varint,21,rep,packed,name=owned_flycloak_list,json=ownedFlycloakList,proto3" json:"owned_flycloak_list,omitempty"`
	AvatarTeamBuffList              []*AvatarBuffBin          `protobuf:"bytes,22,rep,name=avatar_team_buff_list,json=avatarTeamBuffList,proto3" json:"avatar_team_buff_list,omitempty"`
	OwnedCostumeIdList              []uint32                  `protobuf:"varint,23,rep,packed,name=owned_costume_id_list,json=ownedCostumeIdList,proto3" json:"owned_costume_id_list,omitempty"`
	AvatarSnapshotList              []*AvatarSnapshotBin      `protobuf:"bytes,24,rep,name=avatar_snapshot_list,json=avatarSnapshotList,proto3" json:"avatar_snapshot_list,omitempty"`
	BackupTeamIdOrderList           []uint32                  `protobuf:"varint,25,rep,packed,name=backup_team_id_order_list,json=backupTeamIdOrderList,proto3" json:"backup_team_id_order_list,omitempty"`
	AvatarRenameList                []*AvatarRenameBin        `protobuf:"bytes,26,rep,name=avatar_rename_list,json=avatarRenameList,proto3" json:"avatar_rename_list,omitempty"`
	AvatarRenameDuringLastTimeCount uint32                    `protobuf:"varint,27,opt,name=avatar_rename_during_last_time_count,json=avatarRenameDuringLastTimeCount,proto3" json:"avatar_rename_during_last_time_count,omitempty"`
	AvatarRenameNextLimitTime       uint32                    `protobuf:"varint,28,opt,name=avatar_rename_next_limit_time,json=avatarRenameNextLimitTime,proto3" json:"avatar_rename_next_limit_time,omitempty"`
	NextAvatarRenameTime            uint32                    `protobuf:"varint,29,opt,name=next_avatar_rename_time,json=nextAvatarRenameTime,proto3" json:"next_avatar_rename_time,omitempty"`
}

func (x *PlayerAvatarCompBin) Reset() {
	*x = PlayerAvatarCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerAvatarCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAvatarCompBin) ProtoMessage() {}

func (x *PlayerAvatarCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAvatarCompBin.ProtoReflect.Descriptor instead.
func (*PlayerAvatarCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{17}
}

func (x *PlayerAvatarCompBin) GetAvatarList() []*AvatarBin {
	if x != nil {
		return x.AvatarList
	}
	return nil
}

func (x *PlayerAvatarCompBin) GetCurAvatarGuid() uint64 {
	if x != nil {
		return x.CurAvatarGuid
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetPbOnlyCurPos() *VectorBin {
	if x != nil {
		return x.PbOnlyCurPos
	}
	return nil
}

func (x *PlayerAvatarCompBin) GetPbOnlyCurRot() *VectorBin {
	if x != nil {
		return x.PbOnlyCurRot
	}
	return nil
}

func (x *PlayerAvatarCompBin) GetTeamMap() map[uint32]*AvatarTeamBin {
	if x != nil {
		return x.TeamMap
	}
	return nil
}

func (x *PlayerAvatarCompBin) GetCurTeamId() uint32 {
	if x != nil {
		return x.CurTeamId
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetLastChangeAvatarTime() uint64 {
	if x != nil {
		return x.LastChangeAvatarTime
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetIsSpringAutoUse() bool {
	if x != nil {
		return x.IsSpringAutoUse
	}
	return false
}

func (x *PlayerAvatarCompBin) GetSpringAutoUsePercent() uint32 {
	if x != nil {
		return x.SpringAutoUsePercent
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetLastBackgroudAvatarRecoverTime() uint32 {
	if x != nil {
		return x.LastBackgroudAvatarRecoverTime
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetCurSpringVolume() uint32 {
	if x != nil {
		return x.CurSpringVolume
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetIsFlyable() bool {
	if x != nil {
		return x.IsFlyable
	}
	return false
}

func (x *PlayerAvatarCompBin) GetIsTransferable() bool {
	if x != nil {
		return x.IsTransferable
	}
	return false
}

func (x *PlayerAvatarCompBin) GetLastAvatarGuid() uint32 {
	if x != nil {
		return x.LastAvatarGuid
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetChooseAvatarGuid() uint64 {
	if x != nil {
		return x.ChooseAvatarGuid
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetDieType() uint32 {
	if x != nil {
		return x.DieType
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetTempAvatarGuidList() []uint64 {
	if x != nil {
		return x.TempAvatarGuidList
	}
	return nil
}

func (x *PlayerAvatarCompBin) GetAvatarTeamBuffMap() map[uint32]*AvatarBuffBin {
	if x != nil {
		return x.AvatarTeamBuffMap
	}
	return nil
}

func (x *PlayerAvatarCompBin) GetLastServerBuffUid() uint32 {
	if x != nil {
		return x.LastServerBuffUid
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetTotalExpeditionNum() uint32 {
	if x != nil {
		return x.TotalExpeditionNum
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetOwnedFlycloakList() []uint32 {
	if x != nil {
		return x.OwnedFlycloakList
	}
	return nil
}

func (x *PlayerAvatarCompBin) GetAvatarTeamBuffList() []*AvatarBuffBin {
	if x != nil {
		return x.AvatarTeamBuffList
	}
	return nil
}

func (x *PlayerAvatarCompBin) GetOwnedCostumeIdList() []uint32 {
	if x != nil {
		return x.OwnedCostumeIdList
	}
	return nil
}

func (x *PlayerAvatarCompBin) GetAvatarSnapshotList() []*AvatarSnapshotBin {
	if x != nil {
		return x.AvatarSnapshotList
	}
	return nil
}

func (x *PlayerAvatarCompBin) GetBackupTeamIdOrderList() []uint32 {
	if x != nil {
		return x.BackupTeamIdOrderList
	}
	return nil
}

func (x *PlayerAvatarCompBin) GetAvatarRenameList() []*AvatarRenameBin {
	if x != nil {
		return x.AvatarRenameList
	}
	return nil
}

func (x *PlayerAvatarCompBin) GetAvatarRenameDuringLastTimeCount() uint32 {
	if x != nil {
		return x.AvatarRenameDuringLastTimeCount
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetAvatarRenameNextLimitTime() uint32 {
	if x != nil {
		return x.AvatarRenameNextLimitTime
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetNextAvatarRenameTime() uint32 {
	if x != nil {
		return x.NextAvatarRenameTime
	}
	return 0
}

type WorldBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneMap       map[uint32]*SceneBin `protobuf:"bytes,1,rep,name=scene_map,json=sceneMap,proto3" json:"scene_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Level          uint32               `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	LastAdjustTime uint32               `protobuf:"varint,3,opt,name=last_adjust_time,json=lastAdjustTime,proto3" json:"last_adjust_time,omitempty"`
	AdjustLevel    uint32               `protobuf:"varint,4,opt,name=adjust_level,json=adjustLevel,proto3" json:"adjust_level,omitempty"`
}

func (x *WorldBin) Reset() {
	*x = WorldBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldBin) ProtoMessage() {}

func (x *WorldBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldBin.ProtoReflect.Descriptor instead.
func (*WorldBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{18}
}

func (x *WorldBin) GetSceneMap() map[uint32]*SceneBin {
	if x != nil {
		return x.SceneMap
	}
	return nil
}

func (x *WorldBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *WorldBin) GetLastAdjustTime() uint32 {
	if x != nil {
		return x.LastAdjustTime
	}
	return 0
}

func (x *WorldBin) GetAdjustLevel() uint32 {
	if x != nil {
		return x.AdjustLevel
	}
	return 0
}

type SceneProductBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupProductMap map[uint32]*GroupProductBin `protobuf:"bytes,1,rep,name=group_product_map,json=groupProductMap,proto3" json:"group_product_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SceneProductBin) Reset() {
	*x = SceneProductBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneProductBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneProductBin) ProtoMessage() {}

func (x *SceneProductBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneProductBin.ProtoReflect.Descriptor instead.
func (*SceneProductBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{19}
}

func (x *SceneProductBin) GetGroupProductMap() map[uint32]*GroupProductBin {
	if x != nil {
		return x.GroupProductMap
	}
	return nil
}

type DungeonProductBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneProductMap map[uint32]*SceneProductBin `protobuf:"bytes,1,rep,name=scene_product_map,json=sceneProductMap,proto3" json:"scene_product_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DungeonProductBin) Reset() {
	*x = DungeonProductBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonProductBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonProductBin) ProtoMessage() {}

func (x *DungeonProductBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonProductBin.ProtoReflect.Descriptor instead.
func (*DungeonProductBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{20}
}

func (x *DungeonProductBin) GetSceneProductMap() map[uint32]*SceneProductBin {
	if x != nil {
		return x.SceneProductMap
	}
	return nil
}

type MapMarkPointBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId   uint32     `protobuf:"varint,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	Name      string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pos       *VectorBin `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
	PointType uint32     `protobuf:"varint,4,opt,name=point_type,json=pointType,proto3" json:"point_type,omitempty"`
	MonsterId uint32     `protobuf:"varint,5,opt,name=monster_id,json=monsterId,proto3" json:"monster_id,omitempty"`
	FromType  uint32     `protobuf:"varint,6,opt,name=from_type,json=fromType,proto3" json:"from_type,omitempty"`
	QuestId   uint32     `protobuf:"varint,7,opt,name=quest_id,json=questId,proto3" json:"quest_id,omitempty"`
}

func (x *MapMarkPointBin) Reset() {
	*x = MapMarkPointBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapMarkPointBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapMarkPointBin) ProtoMessage() {}

func (x *MapMarkPointBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapMarkPointBin.ProtoReflect.Descriptor instead.
func (*MapMarkPointBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{21}
}

func (x *MapMarkPointBin) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *MapMarkPointBin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MapMarkPointBin) GetPos() *VectorBin {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MapMarkPointBin) GetPointType() uint32 {
	if x != nil {
		return x.PointType
	}
	return 0
}

func (x *MapMarkPointBin) GetMonsterId() uint32 {
	if x != nil {
		return x.MonsterId
	}
	return 0
}

func (x *MapMarkPointBin) GetFromType() uint32 {
	if x != nil {
		return x.FromType
	}
	return 0
}

func (x *MapMarkPointBin) GetQuestId() uint32 {
	if x != nil {
		return x.QuestId
	}
	return 0
}

type GroupBossChestBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossChestMap map[uint32]uint32 `protobuf:"bytes,1,rep,name=boss_chest_map,json=bossChestMap,proto3" json:"boss_chest_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GroupBossChestBin) Reset() {
	*x = GroupBossChestBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupBossChestBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupBossChestBin) ProtoMessage() {}

func (x *GroupBossChestBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupBossChestBin.ProtoReflect.Descriptor instead.
func (*GroupBossChestBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{22}
}

func (x *GroupBossChestBin) GetBossChestMap() map[uint32]uint32 {
	if x != nil {
		return x.BossChestMap
	}
	return nil
}

type SceneBossChestBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupBossChestMap map[uint32]*GroupBossChestBin `protobuf:"bytes,1,rep,name=group_boss_chest_map,json=groupBossChestMap,proto3" json:"group_boss_chest_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TakeTime          uint32                        `protobuf:"fixed32,2,opt,name=take_time,json=takeTime,proto3" json:"take_time,omitempty"`
}

func (x *SceneBossChestBin) Reset() {
	*x = SceneBossChestBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneBossChestBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneBossChestBin) ProtoMessage() {}

func (x *SceneBossChestBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneBossChestBin.ProtoReflect.Descriptor instead.
func (*SceneBossChestBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{23}
}

func (x *SceneBossChestBin) GetGroupBossChestMap() map[uint32]*GroupBossChestBin {
	if x != nil {
		return x.GroupBossChestMap
	}
	return nil
}

func (x *SceneBossChestBin) GetTakeTime() uint32 {
	if x != nil {
		return x.TakeTime
	}
	return 0
}

type SubfieldDropBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropNumMap map[uint32]uint32 `protobuf:"bytes,1,rep,name=drop_num_map,json=dropNumMap,proto3" json:"drop_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *SubfieldDropBin) Reset() {
	*x = SubfieldDropBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubfieldDropBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubfieldDropBin) ProtoMessage() {}

func (x *SubfieldDropBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubfieldDropBin.ProtoReflect.Descriptor instead.
func (*SubfieldDropBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{24}
}

func (x *SubfieldDropBin) GetDropNumMap() map[uint32]uint32 {
	if x != nil {
		return x.DropNumMap
	}
	return nil
}

type MonsterBeKilledNumBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterId   uint32 `protobuf:"varint,1,opt,name=monster_id,json=monsterId,proto3" json:"monster_id,omitempty"`
	BeKilledNum uint32 `protobuf:"varint,2,opt,name=be_killed_num,json=beKilledNum,proto3" json:"be_killed_num,omitempty"`
}

func (x *MonsterBeKilledNumBin) Reset() {
	*x = MonsterBeKilledNumBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonsterBeKilledNumBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonsterBeKilledNumBin) ProtoMessage() {}

func (x *MonsterBeKilledNumBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonsterBeKilledNumBin.ProtoReflect.Descriptor instead.
func (*MonsterBeKilledNumBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{25}
}

func (x *MonsterBeKilledNumBin) GetMonsterId() uint32 {
	if x != nil {
		return x.MonsterId
	}
	return 0
}

func (x *MonsterBeKilledNumBin) GetBeKilledNum() uint32 {
	if x != nil {
		return x.BeKilledNum
	}
	return 0
}

type MapAreaInfoBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapAreaId uint32 `protobuf:"varint,1,opt,name=map_area_id,json=mapAreaId,proto3" json:"map_area_id,omitempty"`
	IsOpen    bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *MapAreaInfoBin) Reset() {
	*x = MapAreaInfoBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapAreaInfoBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapAreaInfoBin) ProtoMessage() {}

func (x *MapAreaInfoBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapAreaInfoBin.ProtoReflect.Descriptor instead.
func (*MapAreaInfoBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{26}
}

func (x *MapAreaInfoBin) GetMapAreaId() uint32 {
	if x != nil {
		return x.MapAreaId
	}
	return 0
}

func (x *MapAreaInfoBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type MonsterBeCapturedNumBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterId     uint32 `protobuf:"varint,1,opt,name=monster_id,json=monsterId,proto3" json:"monster_id,omitempty"`
	BeCapturedNum uint32 `protobuf:"varint,2,opt,name=be_captured_num,json=beCapturedNum,proto3" json:"be_captured_num,omitempty"`
}

func (x *MonsterBeCapturedNumBin) Reset() {
	*x = MonsterBeCapturedNumBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonsterBeCapturedNumBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonsterBeCapturedNumBin) ProtoMessage() {}

func (x *MonsterBeCapturedNumBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonsterBeCapturedNumBin.ProtoReflect.Descriptor instead.
func (*MonsterBeCapturedNumBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{27}
}

func (x *MonsterBeCapturedNumBin) GetMonsterId() uint32 {
	if x != nil {
		return x.MonsterId
	}
	return 0
}

func (x *MonsterBeCapturedNumBin) GetBeCapturedNum() uint32 {
	if x != nil {
		return x.BeCapturedNum
	}
	return 0
}

type LevelTagChangeBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelTagId uint32 `protobuf:"varint,1,opt,name=level_tag_id,json=levelTagId,proto3" json:"level_tag_id,omitempty"`
	ChangeTime uint32 `protobuf:"varint,2,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
}

func (x *LevelTagChangeBin) Reset() {
	*x = LevelTagChangeBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LevelTagChangeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelTagChangeBin) ProtoMessage() {}

func (x *LevelTagChangeBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelTagChangeBin.ProtoReflect.Descriptor instead.
func (*LevelTagChangeBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{28}
}

func (x *LevelTagChangeBin) GetLevelTagId() uint32 {
	if x != nil {
		return x.LevelTagId
	}
	return 0
}

func (x *LevelTagChangeBin) GetChangeTime() uint32 {
	if x != nil {
		return x.ChangeTime
	}
	return 0
}

type LevelTagBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelTagChangeList []*LevelTagChangeBin `protobuf:"bytes,1,rep,name=level_tag_change_list,json=levelTagChangeList,proto3" json:"level_tag_change_list,omitempty"`
}

func (x *LevelTagBin) Reset() {
	*x = LevelTagBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LevelTagBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelTagBin) ProtoMessage() {}

func (x *LevelTagBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelTagBin.ProtoReflect.Descriptor instead.
func (*LevelTagBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{29}
}

func (x *LevelTagBin) GetLevelTagChangeList() []*LevelTagChangeBin {
	if x != nil {
		return x.LevelTagChangeList
	}
	return nil
}

type PersistentDungeonSceneBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId         uint32    `protobuf:"varint,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	DungeonSceneBin *SceneBin `protobuf:"bytes,2,opt,name=dungeon_scene_bin,json=dungeonSceneBin,proto3" json:"dungeon_scene_bin,omitempty"`
}

func (x *PersistentDungeonSceneBin) Reset() {
	*x = PersistentDungeonSceneBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistentDungeonSceneBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistentDungeonSceneBin) ProtoMessage() {}

func (x *PersistentDungeonSceneBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistentDungeonSceneBin.ProtoReflect.Descriptor instead.
func (*PersistentDungeonSceneBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{30}
}

func (x *PersistentDungeonSceneBin) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *PersistentDungeonSceneBin) GetDungeonSceneBin() *SceneBin {
	if x != nil {
		return x.DungeonSceneBin
	}
	return nil
}

type DeshretObeliskBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  uint32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ConfigId uint32 `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
}

func (x *DeshretObeliskBin) Reset() {
	*x = DeshretObeliskBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeshretObeliskBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeshretObeliskBin) ProtoMessage() {}

func (x *DeshretObeliskBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeshretObeliskBin.ProtoReflect.Descriptor instead.
func (*DeshretObeliskBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{31}
}

func (x *DeshretObeliskBin) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *DeshretObeliskBin) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

type PlayerSceneCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	World                                          *WorldBin                     `protobuf:"bytes,1,opt,name=world,proto3" json:"world,omitempty"`
	CurSceneOwnerUid                               uint32                        `protobuf:"varint,2,opt,name=cur_scene_owner_uid,json=curSceneOwnerUid,proto3" json:"cur_scene_owner_uid,omitempty"`
	MyPrevSceneId                                  uint32                        `protobuf:"varint,3,opt,name=my_prev_scene_id,json=myPrevSceneId,proto3" json:"my_prev_scene_id,omitempty"`
	MyPrevPos                                      *VectorBin                    `protobuf:"bytes,4,opt,name=my_prev_pos,json=myPrevPos,proto3" json:"my_prev_pos,omitempty"`
	MyPrevRot                                      *VectorBin                    `protobuf:"bytes,5,opt,name=my_prev_rot,json=myPrevRot,proto3" json:"my_prev_rot,omitempty"`
	MyCurSceneId                                   uint32                        `protobuf:"varint,6,opt,name=my_cur_scene_id,json=myCurSceneId,proto3" json:"my_cur_scene_id,omitempty"`
	MonsterSeenList                                []uint32                      `protobuf:"varint,7,rep,packed,name=monster_seen_list,json=monsterSeenList,proto3" json:"monster_seen_list,omitempty"`
	MarkPointList                                  []*MapMarkPointBin            `protobuf:"bytes,8,rep,name=mark_point_list,json=markPointList,proto3" json:"mark_point_list,omitempty"`
	WorldProductMap                                map[uint32]*SceneProductBin   `protobuf:"bytes,9,rep,name=world_product_map,json=worldProductMap,proto3" json:"world_product_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TrivialEntityDropNum                           uint32                        `protobuf:"varint,10,opt,name=trivial_entity_drop_num,json=trivialEntityDropNum,proto3" json:"trivial_entity_drop_num,omitempty"`
	TrivialEntityDropTime                          uint32                        `protobuf:"fixed32,11,opt,name=trivial_entity_drop_time,json=trivialEntityDropTime,proto3" json:"trivial_entity_drop_time,omitempty"`
	SceneBossChestMap                              map[uint32]*SceneBossChestBin `protobuf:"bytes,12,rep,name=scene_boss_chest_map,json=sceneBossChestMap,proto3" json:"scene_boss_chest_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SubfieldDropMap                                map[uint32]*SubfieldDropBin   `protobuf:"bytes,13,rep,name=subfield_drop_map,json=subfieldDropMap,proto3" json:"subfield_drop_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SubfieldDropTime                               uint32                        `protobuf:"fixed32,14,opt,name=subfield_drop_time,json=subfieldDropTime,proto3" json:"subfield_drop_time,omitempty"`
	MyCurAreaId                                    uint32                        `protobuf:"varint,15,opt,name=my_cur_area_id,json=myCurAreaId,proto3" json:"my_cur_area_id,omitempty"`
	DungeonProductMap                              map[uint32]*DungeonProductBin `protobuf:"bytes,16,rep,name=dungeon_product_map,json=dungeonProductMap,proto3" json:"dungeon_product_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ChestOpenNumMap                                map[uint32]uint32             `protobuf:"bytes,17,rep,name=chest_open_num_map,json=chestOpenNumMap,proto3" json:"chest_open_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GadgetInteractNumMap                           map[uint32]uint32             `protobuf:"bytes,18,rep,name=gadget_interact_num_map,json=gadgetInteractNumMap,proto3" json:"gadget_interact_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TotalBossChestTakeNum                          uint32                        `protobuf:"varint,19,opt,name=total_boss_chest_take_num,json=totalBossChestTakeNum,proto3" json:"total_boss_chest_take_num,omitempty"`
	DailyGadgetDropCategoryCountMap                map[string]uint32             `protobuf:"bytes,20,rep,name=daily_gadget_drop_category_count_map,json=dailyGadgetDropCategoryCountMap,proto3" json:"daily_gadget_drop_category_count_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	LastRefreshDailyGadgetDropCategoryCountMapTime uint32                        `protobuf:"varint,21,opt,name=last_refresh_daily_gadget_drop_category_count_map_time,json=lastRefreshDailyGadgetDropCategoryCountMapTime,proto3" json:"last_refresh_daily_gadget_drop_category_count_map_time,omitempty"`
	MonsterKilledNumList                           []*MonsterBeKilledNumBin      `protobuf:"bytes,22,rep,name=monster_killed_num_list,json=monsterKilledNumList,proto3" json:"monster_killed_num_list,omitempty"`
	MyCurPlayerSceneId                             uint32                        `protobuf:"varint,23,opt,name=my_cur_player_scene_id,json=myCurPlayerSceneId,proto3" json:"my_cur_player_scene_id,omitempty"`
	MyCurHomeSceneId                               uint32                        `protobuf:"varint,24,opt,name=my_cur_home_scene_id,json=myCurHomeSceneId,proto3" json:"my_cur_home_scene_id,omitempty"`
	ObtainedWoodTypeList                           []uint32                      `protobuf:"varint,25,rep,packed,name=obtained_wood_type_list,json=obtainedWoodTypeList,proto3" json:"obtained_wood_type_list,omitempty"`
	GadgetChainLevelMap                            map[uint32]uint32             `protobuf:"bytes,26,rep,name=gadget_chain_level_map,json=gadgetChainLevelMap,proto3" json:"gadget_chain_level_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	WeeklyBossResinDiscountNum                     uint32                        `protobuf:"varint,27,opt,name=weekly_boss_resin_discount_num,json=weeklyBossResinDiscountNum,proto3" json:"weekly_boss_resin_discount_num,omitempty"`
	LastWeeklyBossResinDiscountTime                uint32                        `protobuf:"varint,28,opt,name=last_weekly_boss_resin_discount_time,json=lastWeeklyBossResinDiscountTime,proto3" json:"last_weekly_boss_resin_discount_time,omitempty"`
	MapAreaInfoList                                []*MapAreaInfoBin             `protobuf:"bytes,29,rep,name=map_area_info_list,json=mapAreaInfoList,proto3" json:"map_area_info_list,omitempty"`
	MonsterCapturedNumList                         []*MonsterBeCapturedNumBin    `protobuf:"bytes,30,rep,name=monster_captured_num_list,json=monsterCapturedNumList,proto3" json:"monster_captured_num_list,omitempty"`
	LevelTagBin                                    *LevelTagBin                  `protobuf:"bytes,31,opt,name=level_tag_bin,json=levelTagBin,proto3" json:"level_tag_bin,omitempty"`
	PersistentDungeonSceneBinList                  []*PersistentDungeonSceneBin  `protobuf:"bytes,32,rep,name=persistent_dungeon_scene_bin_list,json=persistentDungeonSceneBinList,proto3" json:"persistent_dungeon_scene_bin_list,omitempty"`
	LastAreaPlayType                               uint32                        `protobuf:"varint,33,opt,name=last_area_play_type,json=lastAreaPlayType,proto3" json:"last_area_play_type,omitempty"`
	DeshretObeliskBin                              *DeshretObeliskBin            `protobuf:"bytes,34,opt,name=deshret_obelisk_bin,json=deshretObeliskBin,proto3" json:"deshret_obelisk_bin,omitempty"`
}

func (x *PlayerSceneCompBin) Reset() {
	*x = PlayerSceneCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSceneCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSceneCompBin) ProtoMessage() {}

func (x *PlayerSceneCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSceneCompBin.ProtoReflect.Descriptor instead.
func (*PlayerSceneCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{32}
}

func (x *PlayerSceneCompBin) GetWorld() *WorldBin {
	if x != nil {
		return x.World
	}
	return nil
}

func (x *PlayerSceneCompBin) GetCurSceneOwnerUid() uint32 {
	if x != nil {
		return x.CurSceneOwnerUid
	}
	return 0
}

func (x *PlayerSceneCompBin) GetMyPrevSceneId() uint32 {
	if x != nil {
		return x.MyPrevSceneId
	}
	return 0
}

func (x *PlayerSceneCompBin) GetMyPrevPos() *VectorBin {
	if x != nil {
		return x.MyPrevPos
	}
	return nil
}

func (x *PlayerSceneCompBin) GetMyPrevRot() *VectorBin {
	if x != nil {
		return x.MyPrevRot
	}
	return nil
}

func (x *PlayerSceneCompBin) GetMyCurSceneId() uint32 {
	if x != nil {
		return x.MyCurSceneId
	}
	return 0
}

func (x *PlayerSceneCompBin) GetMonsterSeenList() []uint32 {
	if x != nil {
		return x.MonsterSeenList
	}
	return nil
}

func (x *PlayerSceneCompBin) GetMarkPointList() []*MapMarkPointBin {
	if x != nil {
		return x.MarkPointList
	}
	return nil
}

func (x *PlayerSceneCompBin) GetWorldProductMap() map[uint32]*SceneProductBin {
	if x != nil {
		return x.WorldProductMap
	}
	return nil
}

func (x *PlayerSceneCompBin) GetTrivialEntityDropNum() uint32 {
	if x != nil {
		return x.TrivialEntityDropNum
	}
	return 0
}

func (x *PlayerSceneCompBin) GetTrivialEntityDropTime() uint32 {
	if x != nil {
		return x.TrivialEntityDropTime
	}
	return 0
}

func (x *PlayerSceneCompBin) GetSceneBossChestMap() map[uint32]*SceneBossChestBin {
	if x != nil {
		return x.SceneBossChestMap
	}
	return nil
}

func (x *PlayerSceneCompBin) GetSubfieldDropMap() map[uint32]*SubfieldDropBin {
	if x != nil {
		return x.SubfieldDropMap
	}
	return nil
}

func (x *PlayerSceneCompBin) GetSubfieldDropTime() uint32 {
	if x != nil {
		return x.SubfieldDropTime
	}
	return 0
}

func (x *PlayerSceneCompBin) GetMyCurAreaId() uint32 {
	if x != nil {
		return x.MyCurAreaId
	}
	return 0
}

func (x *PlayerSceneCompBin) GetDungeonProductMap() map[uint32]*DungeonProductBin {
	if x != nil {
		return x.DungeonProductMap
	}
	return nil
}

func (x *PlayerSceneCompBin) GetChestOpenNumMap() map[uint32]uint32 {
	if x != nil {
		return x.ChestOpenNumMap
	}
	return nil
}

func (x *PlayerSceneCompBin) GetGadgetInteractNumMap() map[uint32]uint32 {
	if x != nil {
		return x.GadgetInteractNumMap
	}
	return nil
}

func (x *PlayerSceneCompBin) GetTotalBossChestTakeNum() uint32 {
	if x != nil {
		return x.TotalBossChestTakeNum
	}
	return 0
}

func (x *PlayerSceneCompBin) GetDailyGadgetDropCategoryCountMap() map[string]uint32 {
	if x != nil {
		return x.DailyGadgetDropCategoryCountMap
	}
	return nil
}

func (x *PlayerSceneCompBin) GetLastRefreshDailyGadgetDropCategoryCountMapTime() uint32 {
	if x != nil {
		return x.LastRefreshDailyGadgetDropCategoryCountMapTime
	}
	return 0
}

func (x *PlayerSceneCompBin) GetMonsterKilledNumList() []*MonsterBeKilledNumBin {
	if x != nil {
		return x.MonsterKilledNumList
	}
	return nil
}

func (x *PlayerSceneCompBin) GetMyCurPlayerSceneId() uint32 {
	if x != nil {
		return x.MyCurPlayerSceneId
	}
	return 0
}

func (x *PlayerSceneCompBin) GetMyCurHomeSceneId() uint32 {
	if x != nil {
		return x.MyCurHomeSceneId
	}
	return 0
}

func (x *PlayerSceneCompBin) GetObtainedWoodTypeList() []uint32 {
	if x != nil {
		return x.ObtainedWoodTypeList
	}
	return nil
}

func (x *PlayerSceneCompBin) GetGadgetChainLevelMap() map[uint32]uint32 {
	if x != nil {
		return x.GadgetChainLevelMap
	}
	return nil
}

func (x *PlayerSceneCompBin) GetWeeklyBossResinDiscountNum() uint32 {
	if x != nil {
		return x.WeeklyBossResinDiscountNum
	}
	return 0
}

func (x *PlayerSceneCompBin) GetLastWeeklyBossResinDiscountTime() uint32 {
	if x != nil {
		return x.LastWeeklyBossResinDiscountTime
	}
	return 0
}

func (x *PlayerSceneCompBin) GetMapAreaInfoList() []*MapAreaInfoBin {
	if x != nil {
		return x.MapAreaInfoList
	}
	return nil
}

func (x *PlayerSceneCompBin) GetMonsterCapturedNumList() []*MonsterBeCapturedNumBin {
	if x != nil {
		return x.MonsterCapturedNumList
	}
	return nil
}

func (x *PlayerSceneCompBin) GetLevelTagBin() *LevelTagBin {
	if x != nil {
		return x.LevelTagBin
	}
	return nil
}

func (x *PlayerSceneCompBin) GetPersistentDungeonSceneBinList() []*PersistentDungeonSceneBin {
	if x != nil {
		return x.PersistentDungeonSceneBinList
	}
	return nil
}

func (x *PlayerSceneCompBin) GetLastAreaPlayType() uint32 {
	if x != nil {
		return x.LastAreaPlayType
	}
	return 0
}

func (x *PlayerSceneCompBin) GetDeshretObeliskBin() *DeshretObeliskBin {
	if x != nil {
		return x.DeshretObeliskBin
	}
	return nil
}

type QuestContentBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Param    uint32 `protobuf:"varint,2,opt,name=param,proto3" json:"param,omitempty"`
	Progress uint32 `protobuf:"varint,3,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *QuestContentBin) Reset() {
	*x = QuestContentBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestContentBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestContentBin) ProtoMessage() {}

func (x *QuestContentBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestContentBin.ProtoReflect.Descriptor instead.
func (*QuestContentBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{33}
}

func (x *QuestContentBin) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *QuestContentBin) GetParam() uint32 {
	if x != nil {
		return x.Param
	}
	return 0
}

func (x *QuestContentBin) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type QuestTalkRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkId   uint32 `protobuf:"varint,1,opt,name=talk_id,json=talkId,proto3" json:"talk_id,omitempty"`
	TalkTime uint32 `protobuf:"fixed32,2,opt,name=talk_time,json=talkTime,proto3" json:"talk_time,omitempty"`
}

func (x *QuestTalkRecordBin) Reset() {
	*x = QuestTalkRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestTalkRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestTalkRecordBin) ProtoMessage() {}

func (x *QuestTalkRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestTalkRecordBin.ProtoReflect.Descriptor instead.
func (*QuestTalkRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{34}
}

func (x *QuestTalkRecordBin) GetTalkId() uint32 {
	if x != nil {
		return x.TalkId
	}
	return 0
}

func (x *QuestTalkRecordBin) GetTalkTime() uint32 {
	if x != nil {
		return x.TalkTime
	}
	return 0
}

type QuestBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestId            uint32                `protobuf:"varint,1,opt,name=quest_id,json=questId,proto3" json:"quest_id,omitempty"`
	State              uint32                `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	FinishProgressList []uint32              `protobuf:"varint,3,rep,packed,name=finish_progress_list,json=finishProgressList,proto3" json:"finish_progress_list,omitempty"`
	FailProgressList   []uint32              `protobuf:"varint,4,rep,packed,name=fail_progress_list,json=failProgressList,proto3" json:"fail_progress_list,omitempty"`
	StartTime          uint32                `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	TalkHistoryList    []*QuestTalkRecordBin `protobuf:"bytes,6,rep,name=talk_history_list,json=talkHistoryList,proto3" json:"talk_history_list,omitempty"`
	StartGameTime      uint32                `protobuf:"fixed32,7,opt,name=start_game_time,json=startGameTime,proto3" json:"start_game_time,omitempty"`
	AcceptTime         uint32                `protobuf:"fixed32,8,opt,name=accept_time,json=acceptTime,proto3" json:"accept_time,omitempty"`
}

func (x *QuestBin) Reset() {
	*x = QuestBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestBin) ProtoMessage() {}

func (x *QuestBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestBin.ProtoReflect.Descriptor instead.
func (*QuestBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{35}
}

func (x *QuestBin) GetQuestId() uint32 {
	if x != nil {
		return x.QuestId
	}
	return 0
}

func (x *QuestBin) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *QuestBin) GetFinishProgressList() []uint32 {
	if x != nil {
		return x.FinishProgressList
	}
	return nil
}

func (x *QuestBin) GetFailProgressList() []uint32 {
	if x != nil {
		return x.FailProgressList
	}
	return nil
}

func (x *QuestBin) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *QuestBin) GetTalkHistoryList() []*QuestTalkRecordBin {
	if x != nil {
		return x.TalkHistoryList
	}
	return nil
}

func (x *QuestBin) GetStartGameTime() uint32 {
	if x != nil {
		return x.StartGameTime
	}
	return 0
}

func (x *QuestBin) GetAcceptTime() uint32 {
	if x != nil {
		return x.AcceptTime
	}
	return 0
}

type PlayerQuestBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestList []*QuestBin `protobuf:"bytes,1,rep,name=quest_list,json=questList,proto3" json:"quest_list,omitempty"`
}

func (x *PlayerQuestBin) Reset() {
	*x = PlayerQuestBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQuestBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQuestBin) ProtoMessage() {}

func (x *PlayerQuestBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQuestBin.ProtoReflect.Descriptor instead.
func (*PlayerQuestBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{36}
}

func (x *PlayerQuestBin) GetQuestList() []*QuestBin {
	if x != nil {
		return x.QuestList
	}
	return nil
}

type ParentQuestRandomInfoBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntranceId uint32            `protobuf:"varint,1,opt,name=entrance_id,json=entranceId,proto3" json:"entrance_id,omitempty"`
	TemplateId uint32            `protobuf:"varint,2,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	FactorList []uint32          `protobuf:"varint,3,rep,packed,name=factor_list,json=factorList,proto3" json:"factor_list,omitempty"`
	QuestIdMap map[uint32]uint32 `protobuf:"bytes,4,rep,name=quest_id_map,json=questIdMap,proto3" json:"quest_id_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ParentQuestRandomInfoBin) Reset() {
	*x = ParentQuestRandomInfoBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParentQuestRandomInfoBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParentQuestRandomInfoBin) ProtoMessage() {}

func (x *ParentQuestRandomInfoBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParentQuestRandomInfoBin.ProtoReflect.Descriptor instead.
func (*ParentQuestRandomInfoBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{37}
}

func (x *ParentQuestRandomInfoBin) GetEntranceId() uint32 {
	if x != nil {
		return x.EntranceId
	}
	return 0
}

func (x *ParentQuestRandomInfoBin) GetTemplateId() uint32 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *ParentQuestRandomInfoBin) GetFactorList() []uint32 {
	if x != nil {
		return x.FactorList
	}
	return nil
}

func (x *ParentQuestRandomInfoBin) GetQuestIdMap() map[uint32]uint32 {
	if x != nil {
		return x.QuestIdMap
	}
	return nil
}

type ParentQuestInferenceWordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WordId         uint32 `protobuf:"varint,1,opt,name=word_id,json=wordId,proto3" json:"word_id,omitempty"`
	IsInterpret    bool   `protobuf:"varint,2,opt,name=is_interpret,json=isInterpret,proto3" json:"is_interpret,omitempty"`
	IsAssociate    bool   `protobuf:"varint,3,opt,name=is_associate,json=isAssociate,proto3" json:"is_associate,omitempty"`
	IsSubmit       bool   `protobuf:"varint,4,opt,name=is_submit,json=isSubmit,proto3" json:"is_submit,omitempty"`
	UnlockByWordId uint32 `protobuf:"varint,5,opt,name=unlock_by_word_id,json=unlockByWordId,proto3" json:"unlock_by_word_id,omitempty"`
}

func (x *ParentQuestInferenceWordBin) Reset() {
	*x = ParentQuestInferenceWordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParentQuestInferenceWordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParentQuestInferenceWordBin) ProtoMessage() {}

func (x *ParentQuestInferenceWordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParentQuestInferenceWordBin.ProtoReflect.Descriptor instead.
func (*ParentQuestInferenceWordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{38}
}

func (x *ParentQuestInferenceWordBin) GetWordId() uint32 {
	if x != nil {
		return x.WordId
	}
	return 0
}

func (x *ParentQuestInferenceWordBin) GetIsInterpret() bool {
	if x != nil {
		return x.IsInterpret
	}
	return false
}

func (x *ParentQuestInferenceWordBin) GetIsAssociate() bool {
	if x != nil {
		return x.IsAssociate
	}
	return false
}

func (x *ParentQuestInferenceWordBin) GetIsSubmit() bool {
	if x != nil {
		return x.IsSubmit
	}
	return false
}

func (x *ParentQuestInferenceWordBin) GetUnlockByWordId() uint32 {
	if x != nil {
		return x.UnlockByWordId
	}
	return 0
}

type ParentQuestBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentQuestId                 uint32                         `protobuf:"varint,1,opt,name=parent_quest_id,json=parentQuestId,proto3" json:"parent_quest_id,omitempty"`
	TotalFinishCount              uint32                         `protobuf:"varint,2,opt,name=total_finish_count,json=totalFinishCount,proto3" json:"total_finish_count,omitempty"`
	TodayFinishCount              uint32                         `protobuf:"varint,3,opt,name=today_finish_count,json=todayFinishCount,proto3" json:"today_finish_count,omitempty"`
	LastFinishTime                uint32                         `protobuf:"fixed32,4,opt,name=last_finish_time,json=lastFinishTime,proto3" json:"last_finish_time,omitempty"`
	ChildQuestStateList           []*Uint32PairBin               `protobuf:"bytes,5,rep,name=child_quest_state_list,json=childQuestStateList,proto3" json:"child_quest_state_list,omitempty"`
	IsRandom                      bool                           `protobuf:"varint,6,opt,name=is_random,json=isRandom,proto3" json:"is_random,omitempty"`
	RandomInfo                    *ParentQuestRandomInfoBin      `protobuf:"bytes,7,opt,name=random_info,json=randomInfo,proto3" json:"random_info,omitempty"`
	AcceptTime                    uint32                         `protobuf:"fixed32,9,opt,name=accept_time,json=acceptTime,proto3" json:"accept_time,omitempty"`
	QuestVar                      []int32                        `protobuf:"varint,10,rep,packed,name=quest_var,json=questVar,proto3" json:"quest_var,omitempty"`
	RewardIndex                   uint32                         `protobuf:"varint,11,opt,name=reward_index,json=rewardIndex,proto3" json:"reward_index,omitempty"`
	State                         uint32                         `protobuf:"varint,12,opt,name=state,proto3" json:"state,omitempty"`
	TimeVarList                   []*Uint32PairBin               `protobuf:"bytes,13,rep,name=time_var_list,json=timeVarList,proto3" json:"time_var_list,omitempty"`
	UnlockInferenceWordList       []*ParentQuestInferenceWordBin `protobuf:"bytes,14,rep,name=unlock_inference_word_list,json=unlockInferenceWordList,proto3" json:"unlock_inference_word_list,omitempty"`
	UnlockInferenceConclusionList []uint32                       `protobuf:"varint,15,rep,packed,name=unlock_inference_conclusion_list,json=unlockInferenceConclusionList,proto3" json:"unlock_inference_conclusion_list,omitempty"`
}

func (x *ParentQuestBin) Reset() {
	*x = ParentQuestBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParentQuestBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParentQuestBin) ProtoMessage() {}

func (x *ParentQuestBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParentQuestBin.ProtoReflect.Descriptor instead.
func (*ParentQuestBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{39}
}

func (x *ParentQuestBin) GetParentQuestId() uint32 {
	if x != nil {
		return x.ParentQuestId
	}
	return 0
}

func (x *ParentQuestBin) GetTotalFinishCount() uint32 {
	if x != nil {
		return x.TotalFinishCount
	}
	return 0
}

func (x *ParentQuestBin) GetTodayFinishCount() uint32 {
	if x != nil {
		return x.TodayFinishCount
	}
	return 0
}

func (x *ParentQuestBin) GetLastFinishTime() uint32 {
	if x != nil {
		return x.LastFinishTime
	}
	return 0
}

func (x *ParentQuestBin) GetChildQuestStateList() []*Uint32PairBin {
	if x != nil {
		return x.ChildQuestStateList
	}
	return nil
}

func (x *ParentQuestBin) GetIsRandom() bool {
	if x != nil {
		return x.IsRandom
	}
	return false
}

func (x *ParentQuestBin) GetRandomInfo() *ParentQuestRandomInfoBin {
	if x != nil {
		return x.RandomInfo
	}
	return nil
}

func (x *ParentQuestBin) GetAcceptTime() uint32 {
	if x != nil {
		return x.AcceptTime
	}
	return 0
}

func (x *ParentQuestBin) GetQuestVar() []int32 {
	if x != nil {
		return x.QuestVar
	}
	return nil
}

func (x *ParentQuestBin) GetRewardIndex() uint32 {
	if x != nil {
		return x.RewardIndex
	}
	return 0
}

func (x *ParentQuestBin) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *ParentQuestBin) GetTimeVarList() []*Uint32PairBin {
	if x != nil {
		return x.TimeVarList
	}
	return nil
}

func (x *ParentQuestBin) GetUnlockInferenceWordList() []*ParentQuestInferenceWordBin {
	if x != nil {
		return x.UnlockInferenceWordList
	}
	return nil
}

func (x *ParentQuestBin) GetUnlockInferenceConclusionList() []uint32 {
	if x != nil {
		return x.UnlockInferenceConclusionList
	}
	return nil
}

type PlayerParentQuestBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentQuestList []*ParentQuestBin `protobuf:"bytes,1,rep,name=parent_quest_list,json=parentQuestList,proto3" json:"parent_quest_list,omitempty"`
}

func (x *PlayerParentQuestBin) Reset() {
	*x = PlayerParentQuestBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerParentQuestBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerParentQuestBin) ProtoMessage() {}

func (x *PlayerParentQuestBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerParentQuestBin.ProtoReflect.Descriptor instead.
func (*PlayerParentQuestBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{40}
}

func (x *PlayerParentQuestBin) GetParentQuestList() []*ParentQuestBin {
	if x != nil {
		return x.ParentQuestList
	}
	return nil
}

type ChapterBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChapterId    uint32 `protobuf:"varint,1,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id,omitempty"`
	ChapterState uint32 `protobuf:"varint,2,opt,name=chapter_state,json=chapterState,proto3" json:"chapter_state,omitempty"`
	IsNotifySent bool   `protobuf:"varint,3,opt,name=is_notify_sent,json=isNotifySent,proto3" json:"is_notify_sent,omitempty"`
}

func (x *ChapterBin) Reset() {
	*x = ChapterBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChapterBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChapterBin) ProtoMessage() {}

func (x *ChapterBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChapterBin.ProtoReflect.Descriptor instead.
func (*ChapterBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{41}
}

func (x *ChapterBin) GetChapterId() uint32 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *ChapterBin) GetChapterState() uint32 {
	if x != nil {
		return x.ChapterState
	}
	return 0
}

func (x *ChapterBin) GetIsNotifySent() bool {
	if x != nil {
		return x.IsNotifySent
	}
	return false
}

type PlayerChapterBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChapterList []*ChapterBin `protobuf:"bytes,1,rep,name=chapter_list,json=chapterList,proto3" json:"chapter_list,omitempty"`
}

func (x *PlayerChapterBin) Reset() {
	*x = PlayerChapterBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerChapterBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerChapterBin) ProtoMessage() {}

func (x *PlayerChapterBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerChapterBin.ProtoReflect.Descriptor instead.
func (*PlayerChapterBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{42}
}

func (x *PlayerChapterBin) GetChapterList() []*ChapterBin {
	if x != nil {
		return x.ChapterList
	}
	return nil
}

type QuestGlobalVarBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   uint32 `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Value int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QuestGlobalVarBin) Reset() {
	*x = QuestGlobalVarBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestGlobalVarBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestGlobalVarBin) ProtoMessage() {}

func (x *QuestGlobalVarBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestGlobalVarBin.ProtoReflect.Descriptor instead.
func (*QuestGlobalVarBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{43}
}

func (x *QuestGlobalVarBin) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *QuestGlobalVarBin) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type WorldQuestBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentQuestId       uint32   `protobuf:"varint,1,opt,name=parent_quest_id,json=parentQuestId,proto3" json:"parent_quest_id,omitempty"`
	LinkedFlowGroupList []uint32 `protobuf:"varint,2,rep,packed,name=linked_flow_group_list,json=linkedFlowGroupList,proto3" json:"linked_flow_group_list,omitempty"`
}

func (x *WorldQuestBin) Reset() {
	*x = WorldQuestBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldQuestBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldQuestBin) ProtoMessage() {}

func (x *WorldQuestBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldQuestBin.ProtoReflect.Descriptor instead.
func (*WorldQuestBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{44}
}

func (x *WorldQuestBin) GetParentQuestId() uint32 {
	if x != nil {
		return x.ParentQuestId
	}
	return 0
}

func (x *WorldQuestBin) GetLinkedFlowGroupList() []uint32 {
	if x != nil {
		return x.LinkedFlowGroupList
	}
	return nil
}

type PlayerQuestCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestBin                *PlayerQuestBin       `protobuf:"bytes,1,opt,name=quest_bin,json=questBin,proto3" json:"quest_bin,omitempty"`
	ParentQuestBin          *PlayerParentQuestBin `protobuf:"bytes,2,opt,name=parent_quest_bin,json=parentQuestBin,proto3" json:"parent_quest_bin,omitempty"`
	LastRandomParentQuestId uint32                `protobuf:"varint,3,opt,name=last_random_parent_quest_id,json=lastRandomParentQuestId,proto3" json:"last_random_parent_quest_id,omitempty"`
	LastRandomQuestId       uint32                `protobuf:"varint,4,opt,name=last_random_quest_id,json=lastRandomQuestId,proto3" json:"last_random_quest_id,omitempty"`
	LastDungeonSettleMap    map[uint32]uint32     `protobuf:"bytes,5,rep,name=last_dungeon_settle_map,json=lastDungeonSettleMap,proto3" json:"last_dungeon_settle_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ChapterBin              *PlayerChapterBin     `protobuf:"bytes,6,opt,name=chapter_bin,json=chapterBin,proto3" json:"chapter_bin,omitempty"`
	QuestGlobalVarList      []*QuestGlobalVarBin  `protobuf:"bytes,7,rep,name=quest_global_var_list,json=questGlobalVarList,proto3" json:"quest_global_var_list,omitempty"`
	PreOpenChapterIdList    []uint32              `protobuf:"varint,8,rep,packed,name=pre_open_chapter_id_list,json=preOpenChapterIdList,proto3" json:"pre_open_chapter_id_list,omitempty"`
	WorldQuestBinList       []*WorldQuestBin      `protobuf:"bytes,9,rep,name=world_quest_bin_list,json=worldQuestBinList,proto3" json:"world_quest_bin_list,omitempty"`
}

func (x *PlayerQuestCompBin) Reset() {
	*x = PlayerQuestCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQuestCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQuestCompBin) ProtoMessage() {}

func (x *PlayerQuestCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQuestCompBin.ProtoReflect.Descriptor instead.
func (*PlayerQuestCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{45}
}

func (x *PlayerQuestCompBin) GetQuestBin() *PlayerQuestBin {
	if x != nil {
		return x.QuestBin
	}
	return nil
}

func (x *PlayerQuestCompBin) GetParentQuestBin() *PlayerParentQuestBin {
	if x != nil {
		return x.ParentQuestBin
	}
	return nil
}

func (x *PlayerQuestCompBin) GetLastRandomParentQuestId() uint32 {
	if x != nil {
		return x.LastRandomParentQuestId
	}
	return 0
}

func (x *PlayerQuestCompBin) GetLastRandomQuestId() uint32 {
	if x != nil {
		return x.LastRandomQuestId
	}
	return 0
}

func (x *PlayerQuestCompBin) GetLastDungeonSettleMap() map[uint32]uint32 {
	if x != nil {
		return x.LastDungeonSettleMap
	}
	return nil
}

func (x *PlayerQuestCompBin) GetChapterBin() *PlayerChapterBin {
	if x != nil {
		return x.ChapterBin
	}
	return nil
}

func (x *PlayerQuestCompBin) GetQuestGlobalVarList() []*QuestGlobalVarBin {
	if x != nil {
		return x.QuestGlobalVarList
	}
	return nil
}

func (x *PlayerQuestCompBin) GetPreOpenChapterIdList() []uint32 {
	if x != nil {
		return x.PreOpenChapterIdList
	}
	return nil
}

func (x *PlayerQuestCompBin) GetWorldQuestBinList() []*WorldQuestBin {
	if x != nil {
		return x.WorldQuestBinList
	}
	return nil
}

type EquipBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLocked bool `protobuf:"varint,1,opt,name=is_locked,json=isLocked,proto3" json:"is_locked,omitempty"`
	// Types that are assignable to Detail:
	//
	//	*EquipBin_Reliquary
	//	*EquipBin_Weapon
	Detail isEquipBin_Detail `protobuf_oneof:"detail"`
}

func (x *EquipBin) Reset() {
	*x = EquipBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipBin) ProtoMessage() {}

func (x *EquipBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipBin.ProtoReflect.Descriptor instead.
func (*EquipBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{46}
}

func (x *EquipBin) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

func (m *EquipBin) GetDetail() isEquipBin_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *EquipBin) GetReliquary() *ReliquaryBin {
	if x, ok := x.GetDetail().(*EquipBin_Reliquary); ok {
		return x.Reliquary
	}
	return nil
}

func (x *EquipBin) GetWeapon() *WeaponBin {
	if x, ok := x.GetDetail().(*EquipBin_Weapon); ok {
		return x.Weapon
	}
	return nil
}

type isEquipBin_Detail interface {
	isEquipBin_Detail()
}

type EquipBin_Reliquary struct {
	Reliquary *ReliquaryBin `protobuf:"bytes,101,opt,name=reliquary,proto3,oneof"`
}

type EquipBin_Weapon struct {
	Weapon *WeaponBin `protobuf:"bytes,102,opt,name=weapon,proto3,oneof"`
}

func (*EquipBin_Reliquary) isEquipBin_Detail() {}

func (*EquipBin_Weapon) isEquipBin_Detail() {}

type MaterialDeleteBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteTimeNumMap map[uint32]uint32 `protobuf:"bytes,1,rep,name=delete_time_num_map,json=deleteTimeNumMap,proto3" json:"delete_time_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MaterialDeleteBin) Reset() {
	*x = MaterialDeleteBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialDeleteBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialDeleteBin) ProtoMessage() {}

func (x *MaterialDeleteBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialDeleteBin.ProtoReflect.Descriptor instead.
func (*MaterialDeleteBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{47}
}

func (x *MaterialDeleteBin) GetDeleteTimeNumMap() map[uint32]uint32 {
	if x != nil {
		return x.DeleteTimeNumMap
	}
	return nil
}

type MaterialBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count     uint32             `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	DeleteBin *MaterialDeleteBin `protobuf:"bytes,2,opt,name=delete_bin,json=deleteBin,proto3" json:"delete_bin,omitempty"`
}

func (x *MaterialBin) Reset() {
	*x = MaterialBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialBin) ProtoMessage() {}

func (x *MaterialBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialBin.ProtoReflect.Descriptor instead.
func (*MaterialBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{48}
}

func (x *MaterialBin) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MaterialBin) GetDeleteBin() *MaterialDeleteBin {
	if x != nil {
		return x.DeleteBin
	}
	return nil
}

type FurnitureBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *FurnitureBin) Reset() {
	*x = FurnitureBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FurnitureBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FurnitureBin) ProtoMessage() {}

func (x *FurnitureBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FurnitureBin.ProtoReflect.Descriptor instead.
func (*FurnitureBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{49}
}

func (x *FurnitureBin) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ItemBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType uint32 `protobuf:"varint,1,opt,name=item_type,json=itemType,proto3" json:"item_type,omitempty"`
	ItemId   uint32 `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Guid     uint64 `protobuf:"fixed64,3,opt,name=guid,proto3" json:"guid,omitempty"`
	// Types that are assignable to Detail:
	//
	//	*ItemBin_Material
	//	*ItemBin_Equip
	//	*ItemBin_Furniture
	Detail isItemBin_Detail `protobuf_oneof:"detail"`
}

func (x *ItemBin) Reset() {
	*x = ItemBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemBin) ProtoMessage() {}

func (x *ItemBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemBin.ProtoReflect.Descriptor instead.
func (*ItemBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{50}
}

func (x *ItemBin) GetItemType() uint32 {
	if x != nil {
		return x.ItemType
	}
	return 0
}

func (x *ItemBin) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *ItemBin) GetGuid() uint64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (m *ItemBin) GetDetail() isItemBin_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *ItemBin) GetMaterial() *MaterialBin {
	if x, ok := x.GetDetail().(*ItemBin_Material); ok {
		return x.Material
	}
	return nil
}

func (x *ItemBin) GetEquip() *EquipBin {
	if x, ok := x.GetDetail().(*ItemBin_Equip); ok {
		return x.Equip
	}
	return nil
}

func (x *ItemBin) GetFurniture() *FurnitureBin {
	if x, ok := x.GetDetail().(*ItemBin_Furniture); ok {
		return x.Furniture
	}
	return nil
}

type isItemBin_Detail interface {
	isItemBin_Detail()
}

type ItemBin_Material struct {
	Material *MaterialBin `protobuf:"bytes,101,opt,name=material,proto3,oneof"`
}

type ItemBin_Equip struct {
	Equip *EquipBin `protobuf:"bytes,102,opt,name=equip,proto3,oneof"`
}

type ItemBin_Furniture struct {
	Furniture *FurnitureBin `protobuf:"bytes,103,opt,name=furniture,proto3,oneof"`
}

func (*ItemBin_Material) isItemBin_Detail() {}

func (*ItemBin_Equip) isItemBin_Detail() {}

func (*ItemBin_Furniture) isItemBin_Detail() {}

type PackItemStoreBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PackItemStoreBin) Reset() {
	*x = PackItemStoreBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackItemStoreBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackItemStoreBin) ProtoMessage() {}

func (x *PackItemStoreBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackItemStoreBin.ProtoReflect.Descriptor instead.
func (*PackItemStoreBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{51}
}

type ItemStoreBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemList                 []*ItemBin `protobuf:"bytes,1,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
	IsMaterialItemNumAlarmed bool       `protobuf:"varint,2,opt,name=is_material_item_num_alarmed,json=isMaterialItemNumAlarmed,proto3" json:"is_material_item_num_alarmed,omitempty"`
	// Types that are assignable to Ext:
	//
	//	*ItemStoreBin_PackStore
	Ext isItemStoreBin_Ext `protobuf_oneof:"ext"`
}

func (x *ItemStoreBin) Reset() {
	*x = ItemStoreBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemStoreBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemStoreBin) ProtoMessage() {}

func (x *ItemStoreBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemStoreBin.ProtoReflect.Descriptor instead.
func (*ItemStoreBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{52}
}

func (x *ItemStoreBin) GetItemList() []*ItemBin {
	if x != nil {
		return x.ItemList
	}
	return nil
}

func (x *ItemStoreBin) GetIsMaterialItemNumAlarmed() bool {
	if x != nil {
		return x.IsMaterialItemNumAlarmed
	}
	return false
}

func (m *ItemStoreBin) GetExt() isItemStoreBin_Ext {
	if m != nil {
		return m.Ext
	}
	return nil
}

func (x *ItemStoreBin) GetPackStore() *PackItemStoreBin {
	if x, ok := x.GetExt().(*ItemStoreBin_PackStore); ok {
		return x.PackStore
	}
	return nil
}

type isItemStoreBin_Ext interface {
	isItemStoreBin_Ext()
}

type ItemStoreBin_PackStore struct {
	PackStore *PackItemStoreBin `protobuf:"bytes,101,opt,name=pack_store,json=packStore,proto3,oneof"`
}

func (*ItemStoreBin_PackStore) isItemStoreBin_Ext() {}

type AutoRecoverItemBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value           uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	BoughtNum       uint32 `protobuf:"varint,3,opt,name=bought_num,json=boughtNum,proto3" json:"bought_num,omitempty"`
	LastBoughtTime  uint32 `protobuf:"fixed32,4,opt,name=last_bought_time,json=lastBoughtTime,proto3" json:"last_bought_time,omitempty"`
	NextRefreshTime uint32 `protobuf:"fixed32,5,opt,name=next_refresh_time,json=nextRefreshTime,proto3" json:"next_refresh_time,omitempty"`
}

func (x *AutoRecoverItemBin) Reset() {
	*x = AutoRecoverItemBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoRecoverItemBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoRecoverItemBin) ProtoMessage() {}

func (x *AutoRecoverItemBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoRecoverItemBin.ProtoReflect.Descriptor instead.
func (*AutoRecoverItemBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{53}
}

func (x *AutoRecoverItemBin) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AutoRecoverItemBin) GetBoughtNum() uint32 {
	if x != nil {
		return x.BoughtNum
	}
	return 0
}

func (x *AutoRecoverItemBin) GetLastBoughtTime() uint32 {
	if x != nil {
		return x.LastBoughtTime
	}
	return 0
}

func (x *AutoRecoverItemBin) GetNextRefreshTime() uint32 {
	if x != nil {
		return x.NextRefreshTime
	}
	return 0
}

type ItemLimitCountRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType   uint32 `protobuf:"varint,1,opt,name=item_type,json=itemType,proto3" json:"item_type,omitempty"`
	IndexValue uint32 `protobuf:"varint,2,opt,name=index_value,json=indexValue,proto3" json:"index_value,omitempty"`
	ItemCount  uint32 `protobuf:"varint,3,opt,name=item_count,json=itemCount,proto3" json:"item_count,omitempty"`
}

func (x *ItemLimitCountRecordBin) Reset() {
	*x = ItemLimitCountRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemLimitCountRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemLimitCountRecordBin) ProtoMessage() {}

func (x *ItemLimitCountRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemLimitCountRecordBin.ProtoReflect.Descriptor instead.
func (*ItemLimitCountRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{54}
}

func (x *ItemLimitCountRecordBin) GetItemType() uint32 {
	if x != nil {
		return x.ItemType
	}
	return 0
}

func (x *ItemLimitCountRecordBin) GetIndexValue() uint32 {
	if x != nil {
		return x.IndexValue
	}
	return 0
}

func (x *ItemLimitCountRecordBin) GetItemCount() uint32 {
	if x != nil {
		return x.ItemCount
	}
	return 0
}

type ItemLimitRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemLimitType            uint32                     `protobuf:"varint,1,opt,name=item_limit_type,json=itemLimitType,proto3" json:"item_limit_type,omitempty"`
	LastRefreshTime          uint32                     `protobuf:"fixed32,2,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	ItemLimitCountRecordList []*ItemLimitCountRecordBin `protobuf:"bytes,3,rep,name=item_limit_count_record_list,json=itemLimitCountRecordList,proto3" json:"item_limit_count_record_list,omitempty"`
}

func (x *ItemLimitRecordBin) Reset() {
	*x = ItemLimitRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemLimitRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemLimitRecordBin) ProtoMessage() {}

func (x *ItemLimitRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemLimitRecordBin.ProtoReflect.Descriptor instead.
func (*ItemLimitRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{55}
}

func (x *ItemLimitRecordBin) GetItemLimitType() uint32 {
	if x != nil {
		return x.ItemLimitType
	}
	return 0
}

func (x *ItemLimitRecordBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

func (x *ItemLimitRecordBin) GetItemLimitCountRecordList() []*ItemLimitCountRecordBin {
	if x != nil {
		return x.ItemLimitCountRecordList
	}
	return nil
}

type MaterialDeleteReturnRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteMaterialMap map[uint32]uint32 `protobuf:"bytes,1,rep,name=delete_material_map,json=deleteMaterialMap,proto3" json:"delete_material_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ReturnItemMap     map[uint32]uint32 `protobuf:"bytes,2,rep,name=return_item_map,json=returnItemMap,proto3" json:"return_item_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MaterialDeleteReturnRecordBin) Reset() {
	*x = MaterialDeleteReturnRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialDeleteReturnRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialDeleteReturnRecordBin) ProtoMessage() {}

func (x *MaterialDeleteReturnRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialDeleteReturnRecordBin.ProtoReflect.Descriptor instead.
func (*MaterialDeleteReturnRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{56}
}

func (x *MaterialDeleteReturnRecordBin) GetDeleteMaterialMap() map[uint32]uint32 {
	if x != nil {
		return x.DeleteMaterialMap
	}
	return nil
}

func (x *MaterialDeleteReturnRecordBin) GetReturnItemMap() map[uint32]uint32 {
	if x != nil {
		return x.ReturnItemMap
	}
	return nil
}

type OutputControlRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastRefreshTime uint32           `protobuf:"fixed32,1,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	DailyCountList  []*Uint32PairBin `protobuf:"bytes,2,rep,name=daily_count_list,json=dailyCountList,proto3" json:"daily_count_list,omitempty"`
	TotalCountList  []*Uint32PairBin `protobuf:"bytes,3,rep,name=total_count_list,json=totalCountList,proto3" json:"total_count_list,omitempty"`
}

func (x *OutputControlRecordBin) Reset() {
	*x = OutputControlRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputControlRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputControlRecordBin) ProtoMessage() {}

func (x *OutputControlRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputControlRecordBin.ProtoReflect.Descriptor instead.
func (*OutputControlRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{57}
}

func (x *OutputControlRecordBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

func (x *OutputControlRecordBin) GetDailyCountList() []*Uint32PairBin {
	if x != nil {
		return x.DailyCountList
	}
	return nil
}

func (x *OutputControlRecordBin) GetTotalCountList() []*Uint32PairBin {
	if x != nil {
		return x.TotalCountList
	}
	return nil
}

type ShopGoodsOutputRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsId        uint32 `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	LastRecordTime uint32 `protobuf:"fixed32,2,opt,name=last_record_time,json=lastRecordTime,proto3" json:"last_record_time,omitempty"`
	BuyCount       uint32 `protobuf:"varint,3,opt,name=buy_count,json=buyCount,proto3" json:"buy_count,omitempty"`
}

func (x *ShopGoodsOutputRecordBin) Reset() {
	*x = ShopGoodsOutputRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopGoodsOutputRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopGoodsOutputRecordBin) ProtoMessage() {}

func (x *ShopGoodsOutputRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopGoodsOutputRecordBin.ProtoReflect.Descriptor instead.
func (*ShopGoodsOutputRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{58}
}

func (x *ShopGoodsOutputRecordBin) GetGoodsId() uint32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *ShopGoodsOutputRecordBin) GetLastRecordTime() uint32 {
	if x != nil {
		return x.LastRecordTime
	}
	return 0
}

func (x *ShopGoodsOutputRecordBin) GetBuyCount() uint32 {
	if x != nil {
		return x.BuyCount
	}
	return 0
}

type ShopOutputRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopGoodsOutputRecordList []*ShopGoodsOutputRecordBin `protobuf:"bytes,1,rep,name=shop_goods_output_record_list,json=shopGoodsOutputRecordList,proto3" json:"shop_goods_output_record_list,omitempty"`
}

func (x *ShopOutputRecordBin) Reset() {
	*x = ShopOutputRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopOutputRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopOutputRecordBin) ProtoMessage() {}

func (x *ShopOutputRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopOutputRecordBin.ProtoReflect.Descriptor instead.
func (*ShopOutputRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{59}
}

func (x *ShopOutputRecordBin) GetShopGoodsOutputRecordList() []*ShopGoodsOutputRecordBin {
	if x != nil {
		return x.ShopGoodsOutputRecordList
	}
	return nil
}

type SingleBonusRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastRefreshTime uint32 `protobuf:"fixed32,1,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	ConfigId        uint32 `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	BonusCount      uint32 `protobuf:"varint,3,opt,name=bonus_count,json=bonusCount,proto3" json:"bonus_count,omitempty"`
}

func (x *SingleBonusRecordBin) Reset() {
	*x = SingleBonusRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleBonusRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleBonusRecordBin) ProtoMessage() {}

func (x *SingleBonusRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleBonusRecordBin.ProtoReflect.Descriptor instead.
func (*SingleBonusRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{60}
}

func (x *SingleBonusRecordBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

func (x *SingleBonusRecordBin) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *SingleBonusRecordBin) GetBonusCount() uint32 {
	if x != nil {
		return x.BonusCount
	}
	return 0
}

type BonusRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BonusSourceType       uint32                  `protobuf:"varint,1,opt,name=bonus_source_type,json=bonusSourceType,proto3" json:"bonus_source_type,omitempty"`
	SingleBonusRecordList []*SingleBonusRecordBin `protobuf:"bytes,2,rep,name=single_bonus_record_list,json=singleBonusRecordList,proto3" json:"single_bonus_record_list,omitempty"`
}

func (x *BonusRecordBin) Reset() {
	*x = BonusRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BonusRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BonusRecordBin) ProtoMessage() {}

func (x *BonusRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BonusRecordBin.ProtoReflect.Descriptor instead.
func (*BonusRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{61}
}

func (x *BonusRecordBin) GetBonusSourceType() uint32 {
	if x != nil {
		return x.BonusSourceType
	}
	return 0
}

func (x *BonusRecordBin) GetSingleBonusRecordList() []*SingleBonusRecordBin {
	if x != nil {
		return x.SingleBonusRecordList
	}
	return nil
}

type ItemLimitRefreshRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemLimitRefreshType     uint32                     `protobuf:"varint,1,opt,name=item_limit_refresh_type,json=itemLimitRefreshType,proto3" json:"item_limit_refresh_type,omitempty"`
	LastRefreshTime          uint32                     `protobuf:"fixed32,2,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	ItemLimitCountRecordList []*ItemLimitCountRecordBin `protobuf:"bytes,3,rep,name=item_limit_count_record_list,json=itemLimitCountRecordList,proto3" json:"item_limit_count_record_list,omitempty"`
}

func (x *ItemLimitRefreshRecordBin) Reset() {
	*x = ItemLimitRefreshRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemLimitRefreshRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemLimitRefreshRecordBin) ProtoMessage() {}

func (x *ItemLimitRefreshRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemLimitRefreshRecordBin.ProtoReflect.Descriptor instead.
func (*ItemLimitRefreshRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{62}
}

func (x *ItemLimitRefreshRecordBin) GetItemLimitRefreshType() uint32 {
	if x != nil {
		return x.ItemLimitRefreshType
	}
	return 0
}

func (x *ItemLimitRefreshRecordBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

func (x *ItemLimitRefreshRecordBin) GetItemLimitCountRecordList() []*ItemLimitCountRecordBin {
	if x != nil {
		return x.ItemLimitCountRecordList
	}
	return nil
}

type ReliquaryLevelupNumRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankLevel               uint32           `protobuf:"varint,1,opt,name=rank_level,json=rankLevel,proto3" json:"rank_level,omitempty"`
	ReliquaryLevelupNumList []*Uint32PairBin `protobuf:"bytes,2,rep,name=reliquary_levelup_num_list,json=reliquaryLevelupNumList,proto3" json:"reliquary_levelup_num_list,omitempty"`
}

func (x *ReliquaryLevelupNumRecordBin) Reset() {
	*x = ReliquaryLevelupNumRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReliquaryLevelupNumRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReliquaryLevelupNumRecordBin) ProtoMessage() {}

func (x *ReliquaryLevelupNumRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReliquaryLevelupNumRecordBin.ProtoReflect.Descriptor instead.
func (*ReliquaryLevelupNumRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{63}
}

func (x *ReliquaryLevelupNumRecordBin) GetRankLevel() uint32 {
	if x != nil {
		return x.RankLevel
	}
	return 0
}

func (x *ReliquaryLevelupNumRecordBin) GetReliquaryLevelupNumList() []*Uint32PairBin {
	if x != nil {
		return x.ReliquaryLevelupNumList
	}
	return nil
}

type EquipLevelupRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WeaponLevelupNumList        []*Uint32PairBin                `protobuf:"bytes,1,rep,name=weapon_levelup_num_list,json=weaponLevelupNumList,proto3" json:"weapon_levelup_num_list,omitempty"`
	WeaponPromoteLevelupNumList []*Uint32PairBin                `protobuf:"bytes,2,rep,name=weapon_promote_levelup_num_list,json=weaponPromoteLevelupNumList,proto3" json:"weapon_promote_levelup_num_list,omitempty"`
	RankReliquaryLevelupList    []*ReliquaryLevelupNumRecordBin `protobuf:"bytes,3,rep,name=rank_reliquary_levelup_list,json=rankReliquaryLevelupList,proto3" json:"rank_reliquary_levelup_list,omitempty"`
}

func (x *EquipLevelupRecordBin) Reset() {
	*x = EquipLevelupRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipLevelupRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipLevelupRecordBin) ProtoMessage() {}

func (x *EquipLevelupRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipLevelupRecordBin.ProtoReflect.Descriptor instead.
func (*EquipLevelupRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{64}
}

func (x *EquipLevelupRecordBin) GetWeaponLevelupNumList() []*Uint32PairBin {
	if x != nil {
		return x.WeaponLevelupNumList
	}
	return nil
}

func (x *EquipLevelupRecordBin) GetWeaponPromoteLevelupNumList() []*Uint32PairBin {
	if x != nil {
		return x.WeaponPromoteLevelupNumList
	}
	return nil
}

func (x *EquipLevelupRecordBin) GetRankReliquaryLevelupList() []*ReliquaryLevelupNumRecordBin {
	if x != nil {
		return x.RankReliquaryLevelupList
	}
	return nil
}

type ReliquarySuitBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReliquarySuitId   uint32   `protobuf:"varint,1,opt,name=reliquary_suit_id,json=reliquarySuitId,proto3" json:"reliquary_suit_id,omitempty"`
	Level             uint32   `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	ReliquaryTypeList []uint32 `protobuf:"varint,3,rep,packed,name=reliquary_type_list,json=reliquaryTypeList,proto3" json:"reliquary_type_list,omitempty"`
}

func (x *ReliquarySuitBin) Reset() {
	*x = ReliquarySuitBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReliquarySuitBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReliquarySuitBin) ProtoMessage() {}

func (x *ReliquarySuitBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReliquarySuitBin.ProtoReflect.Descriptor instead.
func (*ReliquarySuitBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{65}
}

func (x *ReliquarySuitBin) GetReliquarySuitId() uint32 {
	if x != nil {
		return x.ReliquarySuitId
	}
	return 0
}

func (x *ReliquarySuitBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ReliquarySuitBin) GetReliquaryTypeList() []uint32 {
	if x != nil {
		return x.ReliquaryTypeList
	}
	return nil
}

type ActivityOutputIndexRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputControlType uint32           `protobuf:"varint,1,opt,name=output_control_type,json=outputControlType,proto3" json:"output_control_type,omitempty"`
	ActivityCountList []*Uint32PairBin `protobuf:"bytes,2,rep,name=activity_count_list,json=activityCountList,proto3" json:"activity_count_list,omitempty"`
}

func (x *ActivityOutputIndexRecordBin) Reset() {
	*x = ActivityOutputIndexRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityOutputIndexRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityOutputIndexRecordBin) ProtoMessage() {}

func (x *ActivityOutputIndexRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityOutputIndexRecordBin.ProtoReflect.Descriptor instead.
func (*ActivityOutputIndexRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{66}
}

func (x *ActivityOutputIndexRecordBin) GetOutputControlType() uint32 {
	if x != nil {
		return x.OutputControlType
	}
	return 0
}

func (x *ActivityOutputIndexRecordBin) GetActivityCountList() []*Uint32PairBin {
	if x != nil {
		return x.ActivityCountList
	}
	return nil
}

type ActivityOutputControlRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityType                  uint32                          `protobuf:"varint,1,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	LastRefreshTime               uint32                          `protobuf:"fixed32,2,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	ActivityOutputIndexRecordList []*ActivityOutputIndexRecordBin `protobuf:"bytes,3,rep,name=activity_output_index_record_list,json=activityOutputIndexRecordList,proto3" json:"activity_output_index_record_list,omitempty"`
}

func (x *ActivityOutputControlRecordBin) Reset() {
	*x = ActivityOutputControlRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityOutputControlRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityOutputControlRecordBin) ProtoMessage() {}

func (x *ActivityOutputControlRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityOutputControlRecordBin.ProtoReflect.Descriptor instead.
func (*ActivityOutputControlRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{67}
}

func (x *ActivityOutputControlRecordBin) GetActivityType() uint32 {
	if x != nil {
		return x.ActivityType
	}
	return 0
}

func (x *ActivityOutputControlRecordBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

func (x *ActivityOutputControlRecordBin) GetActivityOutputIndexRecordList() []*ActivityOutputIndexRecordBin {
	if x != nil {
		return x.ActivityOutputIndexRecordList
	}
	return nil
}

type ReliquaryMainPropGuaranteeDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainPropId     uint32 `protobuf:"varint,1,opt,name=main_prop_id,json=mainPropId,proto3" json:"main_prop_id,omitempty"`
	MissCount      uint32 `protobuf:"varint,2,opt,name=miss_count,json=missCount,proto3" json:"miss_count,omitempty"`
	GuaranteeCount uint32 `protobuf:"varint,3,opt,name=guarantee_count,json=guaranteeCount,proto3" json:"guarantee_count,omitempty"`
}

func (x *ReliquaryMainPropGuaranteeDataBin) Reset() {
	*x = ReliquaryMainPropGuaranteeDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReliquaryMainPropGuaranteeDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReliquaryMainPropGuaranteeDataBin) ProtoMessage() {}

func (x *ReliquaryMainPropGuaranteeDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReliquaryMainPropGuaranteeDataBin.ProtoReflect.Descriptor instead.
func (*ReliquaryMainPropGuaranteeDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{68}
}

func (x *ReliquaryMainPropGuaranteeDataBin) GetMainPropId() uint32 {
	if x != nil {
		return x.MainPropId
	}
	return 0
}

func (x *ReliquaryMainPropGuaranteeDataBin) GetMissCount() uint32 {
	if x != nil {
		return x.MissCount
	}
	return 0
}

func (x *ReliquaryMainPropGuaranteeDataBin) GetGuaranteeCount() uint32 {
	if x != nil {
		return x.GuaranteeCount
	}
	return 0
}

type ReliquaryGuaranteeDepotBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuaranteeDepotId          uint32                               `protobuf:"varint,1,opt,name=guarantee_depot_id,json=guaranteeDepotId,proto3" json:"guarantee_depot_id,omitempty"`
	MainPropGuaranteeDataList []*ReliquaryMainPropGuaranteeDataBin `protobuf:"bytes,2,rep,name=main_prop_guarantee_data_list,json=mainPropGuaranteeDataList,proto3" json:"main_prop_guarantee_data_list,omitempty"`
}

func (x *ReliquaryGuaranteeDepotBin) Reset() {
	*x = ReliquaryGuaranteeDepotBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReliquaryGuaranteeDepotBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReliquaryGuaranteeDepotBin) ProtoMessage() {}

func (x *ReliquaryGuaranteeDepotBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReliquaryGuaranteeDepotBin.ProtoReflect.Descriptor instead.
func (*ReliquaryGuaranteeDepotBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{69}
}

func (x *ReliquaryGuaranteeDepotBin) GetGuaranteeDepotId() uint32 {
	if x != nil {
		return x.GuaranteeDepotId
	}
	return 0
}

func (x *ReliquaryGuaranteeDepotBin) GetMainPropGuaranteeDataList() []*ReliquaryMainPropGuaranteeDataBin {
	if x != nil {
		return x.MainPropGuaranteeDataList
	}
	return nil
}

type PlayerItemCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackStore                       *ItemStoreBin                      `protobuf:"bytes,1,opt,name=pack_store,json=packStore,proto3" json:"pack_store,omitempty"`
	HistoryItemList                 []uint32                           `protobuf:"varint,2,rep,packed,name=history_item_list,json=historyItemList,proto3" json:"history_item_list,omitempty"`
	Hcoin                           uint32                             `protobuf:"varint,3,opt,name=hcoin,proto3" json:"hcoin,omitempty"`
	Scoin                           uint32                             `protobuf:"varint,4,opt,name=scoin,proto3" json:"scoin,omitempty"`
	ItemCdMap                       map[uint32]uint64                  `protobuf:"bytes,5,rep,name=item_cd_map,json=itemCdMap,proto3" json:"item_cd_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ResinRecord                     *AutoRecoverItemBin                `protobuf:"bytes,6,opt,name=resin_record,json=resinRecord,proto3" json:"resin_record,omitempty"`
	ItemLimitRecordList             []*ItemLimitRecordBin              `protobuf:"bytes,7,rep,name=item_limit_record_list,json=itemLimitRecordList,proto3" json:"item_limit_record_list,omitempty"`
	ItemTotalObtainCountList        []*Uint32PairBin                   `protobuf:"bytes,8,rep,name=item_total_obtain_count_list,json=itemTotalObtainCountList,proto3" json:"item_total_obtain_count_list,omitempty"`
	MaterialDeleteReturnRecord      *MaterialDeleteReturnRecordBin     `protobuf:"bytes,9,opt,name=material_delete_return_record,json=materialDeleteReturnRecord,proto3" json:"material_delete_return_record,omitempty"`
	OutputControlRecordMap          map[uint32]*OutputControlRecordBin `protobuf:"bytes,10,rep,name=output_control_record_map,json=outputControlRecordMap,proto3" json:"output_control_record_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WaitSubHcoin                    uint32                             `protobuf:"varint,11,opt,name=wait_sub_hcoin,json=waitSubHcoin,proto3" json:"wait_sub_hcoin,omitempty"`
	WaitSubScoin                    uint32                             `protobuf:"varint,12,opt,name=wait_sub_scoin,json=waitSubScoin,proto3" json:"wait_sub_scoin,omitempty"`
	ItemLimitRefreshRecordList      []*ItemLimitRefreshRecordBin       `protobuf:"bytes,13,rep,name=item_limit_refresh_record_list,json=itemLimitRefreshRecordList,proto3" json:"item_limit_refresh_record_list,omitempty"`
	EquipLevelupRecordBin           *EquipLevelupRecordBin             `protobuf:"bytes,14,opt,name=equip_levelup_record_bin,json=equipLevelupRecordBin,proto3" json:"equip_levelup_record_bin,omitempty"`
	Mcoin                           uint32                             `protobuf:"varint,15,opt,name=mcoin,proto3" json:"mcoin,omitempty"`
	WaitSubMcoin                    uint32                             `protobuf:"varint,16,opt,name=wait_sub_mcoin,json=waitSubMcoin,proto3" json:"wait_sub_mcoin,omitempty"`
	LegendaryKey                    uint32                             `protobuf:"varint,17,opt,name=legendary_key,json=legendaryKey,proto3" json:"legendary_key,omitempty"`
	ReliquarySuitList               []*ReliquarySuitBin                `protobuf:"bytes,18,rep,name=reliquary_suit_list,json=reliquarySuitList,proto3" json:"reliquary_suit_list,omitempty"`
	ShopOutputRecord                *ShopOutputRecordBin               `protobuf:"bytes,19,opt,name=shop_output_record,json=shopOutputRecord,proto3" json:"shop_output_record,omitempty"`
	BonusRecordList                 []*BonusRecordBin                  `protobuf:"bytes,20,rep,name=bonus_record_list,json=bonusRecordList,proto3" json:"bonus_record_list,omitempty"`
	ActivityOutputControlRecordList []*ActivityOutputControlRecordBin  `protobuf:"bytes,21,rep,name=activity_output_control_record_list,json=activityOutputControlRecordList,proto3" json:"activity_output_control_record_list,omitempty"`
	HomeCoin                        uint32                             `protobuf:"varint,22,opt,name=home_coin,json=homeCoin,proto3" json:"home_coin,omitempty"`
	WaitSubHomeCoin                 uint32                             `protobuf:"varint,23,opt,name=wait_sub_home_coin,json=waitSubHomeCoin,proto3" json:"wait_sub_home_coin,omitempty"`
	PsnMcoin                        uint32                             `protobuf:"varint,24,opt,name=psn_mcoin,json=psnMcoin,proto3" json:"psn_mcoin,omitempty"`
	WaitSubPsnMcoin                 uint32                             `protobuf:"varint,25,opt,name=wait_sub_psn_mcoin,json=waitSubPsnMcoin,proto3" json:"wait_sub_psn_mcoin,omitempty"`
	IsPsnVersionModify              bool                               `protobuf:"varint,26,opt,name=is_psn_version_modify,json=isPsnVersionModify,proto3" json:"is_psn_version_modify,omitempty"`
	ReliquaryGuaranteeDepotList     []*ReliquaryGuaranteeDepotBin      `protobuf:"bytes,27,rep,name=reliquary_guarantee_depot_list,json=reliquaryGuaranteeDepotList,proto3" json:"reliquary_guarantee_depot_list,omitempty"`
	ReliquaryFilterStateList        []*Uint32PairBin                   `protobuf:"bytes,30,rep,name=reliquary_filter_state_list,json=reliquaryFilterStateList,proto3" json:"reliquary_filter_state_list,omitempty"`
}

func (x *PlayerItemCompBin) Reset() {
	*x = PlayerItemCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerItemCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerItemCompBin) ProtoMessage() {}

func (x *PlayerItemCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerItemCompBin.ProtoReflect.Descriptor instead.
func (*PlayerItemCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{70}
}

func (x *PlayerItemCompBin) GetPackStore() *ItemStoreBin {
	if x != nil {
		return x.PackStore
	}
	return nil
}

func (x *PlayerItemCompBin) GetHistoryItemList() []uint32 {
	if x != nil {
		return x.HistoryItemList
	}
	return nil
}

func (x *PlayerItemCompBin) GetHcoin() uint32 {
	if x != nil {
		return x.Hcoin
	}
	return 0
}

func (x *PlayerItemCompBin) GetScoin() uint32 {
	if x != nil {
		return x.Scoin
	}
	return 0
}

func (x *PlayerItemCompBin) GetItemCdMap() map[uint32]uint64 {
	if x != nil {
		return x.ItemCdMap
	}
	return nil
}

func (x *PlayerItemCompBin) GetResinRecord() *AutoRecoverItemBin {
	if x != nil {
		return x.ResinRecord
	}
	return nil
}

func (x *PlayerItemCompBin) GetItemLimitRecordList() []*ItemLimitRecordBin {
	if x != nil {
		return x.ItemLimitRecordList
	}
	return nil
}

func (x *PlayerItemCompBin) GetItemTotalObtainCountList() []*Uint32PairBin {
	if x != nil {
		return x.ItemTotalObtainCountList
	}
	return nil
}

func (x *PlayerItemCompBin) GetMaterialDeleteReturnRecord() *MaterialDeleteReturnRecordBin {
	if x != nil {
		return x.MaterialDeleteReturnRecord
	}
	return nil
}

func (x *PlayerItemCompBin) GetOutputControlRecordMap() map[uint32]*OutputControlRecordBin {
	if x != nil {
		return x.OutputControlRecordMap
	}
	return nil
}

func (x *PlayerItemCompBin) GetWaitSubHcoin() uint32 {
	if x != nil {
		return x.WaitSubHcoin
	}
	return 0
}

func (x *PlayerItemCompBin) GetWaitSubScoin() uint32 {
	if x != nil {
		return x.WaitSubScoin
	}
	return 0
}

func (x *PlayerItemCompBin) GetItemLimitRefreshRecordList() []*ItemLimitRefreshRecordBin {
	if x != nil {
		return x.ItemLimitRefreshRecordList
	}
	return nil
}

func (x *PlayerItemCompBin) GetEquipLevelupRecordBin() *EquipLevelupRecordBin {
	if x != nil {
		return x.EquipLevelupRecordBin
	}
	return nil
}

func (x *PlayerItemCompBin) GetMcoin() uint32 {
	if x != nil {
		return x.Mcoin
	}
	return 0
}

func (x *PlayerItemCompBin) GetWaitSubMcoin() uint32 {
	if x != nil {
		return x.WaitSubMcoin
	}
	return 0
}

func (x *PlayerItemCompBin) GetLegendaryKey() uint32 {
	if x != nil {
		return x.LegendaryKey
	}
	return 0
}

func (x *PlayerItemCompBin) GetReliquarySuitList() []*ReliquarySuitBin {
	if x != nil {
		return x.ReliquarySuitList
	}
	return nil
}

func (x *PlayerItemCompBin) GetShopOutputRecord() *ShopOutputRecordBin {
	if x != nil {
		return x.ShopOutputRecord
	}
	return nil
}

func (x *PlayerItemCompBin) GetBonusRecordList() []*BonusRecordBin {
	if x != nil {
		return x.BonusRecordList
	}
	return nil
}

func (x *PlayerItemCompBin) GetActivityOutputControlRecordList() []*ActivityOutputControlRecordBin {
	if x != nil {
		return x.ActivityOutputControlRecordList
	}
	return nil
}

func (x *PlayerItemCompBin) GetHomeCoin() uint32 {
	if x != nil {
		return x.HomeCoin
	}
	return 0
}

func (x *PlayerItemCompBin) GetWaitSubHomeCoin() uint32 {
	if x != nil {
		return x.WaitSubHomeCoin
	}
	return 0
}

func (x *PlayerItemCompBin) GetPsnMcoin() uint32 {
	if x != nil {
		return x.PsnMcoin
	}
	return 0
}

func (x *PlayerItemCompBin) GetWaitSubPsnMcoin() uint32 {
	if x != nil {
		return x.WaitSubPsnMcoin
	}
	return 0
}

func (x *PlayerItemCompBin) GetIsPsnVersionModify() bool {
	if x != nil {
		return x.IsPsnVersionModify
	}
	return false
}

func (x *PlayerItemCompBin) GetReliquaryGuaranteeDepotList() []*ReliquaryGuaranteeDepotBin {
	if x != nil {
		return x.ReliquaryGuaranteeDepotList
	}
	return nil
}

func (x *PlayerItemCompBin) GetReliquaryFilterStateList() []*Uint32PairBin {
	if x != nil {
		return x.ReliquaryFilterStateList
	}
	return nil
}

type DungeonGroupRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChestOpenMap map[uint32]uint32 `protobuf:"bytes,1,rep,name=chest_open_map,json=chestOpenMap,proto3" json:"chest_open_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DungeonGroupRecordBin) Reset() {
	*x = DungeonGroupRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonGroupRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonGroupRecordBin) ProtoMessage() {}

func (x *DungeonGroupRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonGroupRecordBin.ProtoReflect.Descriptor instead.
func (*DungeonGroupRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{71}
}

func (x *DungeonGroupRecordBin) GetChestOpenMap() map[uint32]uint32 {
	if x != nil {
		return x.ChestOpenMap
	}
	return nil
}

type DungeonRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterCount uint32 `protobuf:"varint,1,opt,name=enter_count,json=enterCount,proto3" json:"enter_count,omitempty"`
	StartTime  uint32 `protobuf:"fixed32,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime    uint32 `protobuf:"fixed32,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *DungeonRecordBin) Reset() {
	*x = DungeonRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonRecordBin) ProtoMessage() {}

func (x *DungeonRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonRecordBin.ProtoReflect.Descriptor instead.
func (*DungeonRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{72}
}

func (x *DungeonRecordBin) GetEnterCount() uint32 {
	if x != nil {
		return x.EnterCount
	}
	return 0
}

func (x *DungeonRecordBin) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DungeonRecordBin) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type DungeonRandomRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonList []uint32 `protobuf:"varint,1,rep,packed,name=dungeon_list,json=dungeonList,proto3" json:"dungeon_list,omitempty"`
	RefreshTime uint32   `protobuf:"fixed32,2,opt,name=refresh_time,json=refreshTime,proto3" json:"refresh_time,omitempty"`
}

func (x *DungeonRandomRecordBin) Reset() {
	*x = DungeonRandomRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonRandomRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonRandomRecordBin) ProtoMessage() {}

func (x *DungeonRandomRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonRandomRecordBin.ProtoReflect.Descriptor instead.
func (*DungeonRandomRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{73}
}

func (x *DungeonRandomRecordBin) GetDungeonList() []uint32 {
	if x != nil {
		return x.DungeonList
	}
	return nil
}

func (x *DungeonRandomRecordBin) GetRefreshTime() uint32 {
	if x != nil {
		return x.RefreshTime
	}
	return 0
}

type DungeonDurableRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPassed bool `protobuf:"varint,1,opt,name=is_passed,json=isPassed,proto3" json:"is_passed,omitempty"`
}

func (x *DungeonDurableRecordBin) Reset() {
	*x = DungeonDurableRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonDurableRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonDurableRecordBin) ProtoMessage() {}

func (x *DungeonDurableRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonDurableRecordBin.ProtoReflect.Descriptor instead.
func (*DungeonDurableRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{74}
}

func (x *DungeonDurableRecordBin) GetIsPassed() bool {
	if x != nil {
		return x.IsPassed
	}
	return false
}

type PlayerDungeonRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonDailyMap   map[uint32]*DungeonRecordBin        `protobuf:"bytes,1,rep,name=dungeon_daily_map,json=dungeonDailyMap,proto3" json:"dungeon_daily_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DungeonDurableMap map[uint32]*DungeonDurableRecordBin `protobuf:"bytes,2,rep,name=dungeon_durable_map,json=dungeonDurableMap,proto3" json:"dungeon_durable_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DungeonRandomMap  map[uint32]*DungeonRandomRecordBin  `protobuf:"bytes,3,rep,name=dungeon_random_map,json=dungeonRandomMap,proto3" json:"dungeon_random_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlayerDungeonRecordBin) Reset() {
	*x = PlayerDungeonRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDungeonRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDungeonRecordBin) ProtoMessage() {}

func (x *PlayerDungeonRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDungeonRecordBin.ProtoReflect.Descriptor instead.
func (*PlayerDungeonRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{75}
}

func (x *PlayerDungeonRecordBin) GetDungeonDailyMap() map[uint32]*DungeonRecordBin {
	if x != nil {
		return x.DungeonDailyMap
	}
	return nil
}

func (x *PlayerDungeonRecordBin) GetDungeonDurableMap() map[uint32]*DungeonDurableRecordBin {
	if x != nil {
		return x.DungeonDurableMap
	}
	return nil
}

func (x *PlayerDungeonRecordBin) GetDungeonRandomMap() map[uint32]*DungeonRandomRecordBin {
	if x != nil {
		return x.DungeonRandomMap
	}
	return nil
}

type DungeonSerialBossChestBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TakeNum  uint32 `protobuf:"varint,1,opt,name=take_num,json=takeNum,proto3" json:"take_num,omitempty"`
	TakeTime uint32 `protobuf:"fixed32,2,opt,name=take_time,json=takeTime,proto3" json:"take_time,omitempty"`
}

func (x *DungeonSerialBossChestBin) Reset() {
	*x = DungeonSerialBossChestBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonSerialBossChestBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonSerialBossChestBin) ProtoMessage() {}

func (x *DungeonSerialBossChestBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonSerialBossChestBin.ProtoReflect.Descriptor instead.
func (*DungeonSerialBossChestBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{76}
}

func (x *DungeonSerialBossChestBin) GetTakeNum() uint32 {
	if x != nil {
		return x.TakeNum
	}
	return 0
}

func (x *DungeonSerialBossChestBin) GetTakeTime() uint32 {
	if x != nil {
		return x.TakeTime
	}
	return 0
}

type PlayerDungeonCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurDungeonId           uint32                                `protobuf:"varint,1,opt,name=cur_dungeon_id,json=curDungeonId,proto3" json:"cur_dungeon_id,omitempty"`
	LastEnterTime          uint32                                `protobuf:"fixed32,2,opt,name=last_enter_time,json=lastEnterTime,proto3" json:"last_enter_time,omitempty"`
	RecordBin              *PlayerDungeonRecordBin               `protobuf:"bytes,5,opt,name=record_bin,json=recordBin,proto3" json:"record_bin,omitempty"`
	IsJoinOtherScene       bool                                  `protobuf:"varint,6,opt,name=is_join_other_scene,json=isJoinOtherScene,proto3" json:"is_join_other_scene,omitempty"`
	LastTimeDailyItemAdd   uint32                                `protobuf:"fixed32,7,opt,name=last_time_daily_item_add,json=lastTimeDailyItemAdd,proto3" json:"last_time_daily_item_add,omitempty"`
	LastTimeWeeklyItemAdd  uint32                                `protobuf:"fixed32,8,opt,name=last_time_weekly_item_add,json=lastTimeWeeklyItemAdd,proto3" json:"last_time_weekly_item_add,omitempty"`
	LastUnsettledDungeonId uint32                                `protobuf:"varint,9,opt,name=last_unsettled_dungeon_id,json=lastUnsettledDungeonId,proto3" json:"last_unsettled_dungeon_id,omitempty"`
	SerialBossChestMap     map[uint32]*DungeonSerialBossChestBin `protobuf:"bytes,10,rep,name=serial_boss_chest_map,json=serialBossChestMap,proto3" json:"serial_boss_chest_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsHasQuitTargetPos     bool                                  `protobuf:"varint,11,opt,name=is_has_quit_target_pos,json=isHasQuitTargetPos,proto3" json:"is_has_quit_target_pos,omitempty"`
	QuitSceneId            uint32                                `protobuf:"varint,12,opt,name=quit_scene_id,json=quitSceneId,proto3" json:"quit_scene_id,omitempty"`
	QuitPos                *VectorBin                            `protobuf:"bytes,13,opt,name=quit_pos,json=quitPos,proto3" json:"quit_pos,omitempty"`
	QuitRot                *VectorBin                            `protobuf:"bytes,14,opt,name=quit_rot,json=quitRot,proto3" json:"quit_rot,omitempty"`
}

func (x *PlayerDungeonCompBin) Reset() {
	*x = PlayerDungeonCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDungeonCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDungeonCompBin) ProtoMessage() {}

func (x *PlayerDungeonCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDungeonCompBin.ProtoReflect.Descriptor instead.
func (*PlayerDungeonCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{77}
}

func (x *PlayerDungeonCompBin) GetCurDungeonId() uint32 {
	if x != nil {
		return x.CurDungeonId
	}
	return 0
}

func (x *PlayerDungeonCompBin) GetLastEnterTime() uint32 {
	if x != nil {
		return x.LastEnterTime
	}
	return 0
}

func (x *PlayerDungeonCompBin) GetRecordBin() *PlayerDungeonRecordBin {
	if x != nil {
		return x.RecordBin
	}
	return nil
}

func (x *PlayerDungeonCompBin) GetIsJoinOtherScene() bool {
	if x != nil {
		return x.IsJoinOtherScene
	}
	return false
}

func (x *PlayerDungeonCompBin) GetLastTimeDailyItemAdd() uint32 {
	if x != nil {
		return x.LastTimeDailyItemAdd
	}
	return 0
}

func (x *PlayerDungeonCompBin) GetLastTimeWeeklyItemAdd() uint32 {
	if x != nil {
		return x.LastTimeWeeklyItemAdd
	}
	return 0
}

func (x *PlayerDungeonCompBin) GetLastUnsettledDungeonId() uint32 {
	if x != nil {
		return x.LastUnsettledDungeonId
	}
	return 0
}

func (x *PlayerDungeonCompBin) GetSerialBossChestMap() map[uint32]*DungeonSerialBossChestBin {
	if x != nil {
		return x.SerialBossChestMap
	}
	return nil
}

func (x *PlayerDungeonCompBin) GetIsHasQuitTargetPos() bool {
	if x != nil {
		return x.IsHasQuitTargetPos
	}
	return false
}

func (x *PlayerDungeonCompBin) GetQuitSceneId() uint32 {
	if x != nil {
		return x.QuitSceneId
	}
	return 0
}

func (x *PlayerDungeonCompBin) GetQuitPos() *VectorBin {
	if x != nil {
		return x.QuitPos
	}
	return nil
}

func (x *PlayerDungeonCompBin) GetQuitRot() *VectorBin {
	if x != nil {
		return x.QuitRot
	}
	return nil
}

type PlayerBoredCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen bool `protobuf:"varint,1,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *PlayerBoredCompBin) Reset() {
	*x = PlayerBoredCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerBoredCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBoredCompBin) ProtoMessage() {}

func (x *PlayerBoredCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBoredCompBin.ProtoReflect.Descriptor instead.
func (*PlayerBoredCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{78}
}

func (x *PlayerBoredCompBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type PlayerMpCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MpSettingType        uint32 `protobuf:"varint,2,opt,name=mp_setting_type,json=mpSettingType,proto3" json:"mp_setting_type,omitempty"`
	IsOnlyMpWithPsPlayer bool   `protobuf:"varint,3,opt,name=is_only_mp_with_ps_player,json=isOnlyMpWithPsPlayer,proto3" json:"is_only_mp_with_ps_player,omitempty"`
}

func (x *PlayerMpCompBin) Reset() {
	*x = PlayerMpCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMpCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMpCompBin) ProtoMessage() {}

func (x *PlayerMpCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMpCompBin.ProtoReflect.Descriptor instead.
func (*PlayerMpCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{79}
}

func (x *PlayerMpCompBin) GetMpSettingType() uint32 {
	if x != nil {
		return x.MpSettingType
	}
	return 0
}

func (x *PlayerMpCompBin) GetIsOnlyMpWithPsPlayer() bool {
	if x != nil {
		return x.IsOnlyMpWithPsPlayer
	}
	return false
}

type CompoundOutputBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputTime uint32 `protobuf:"fixed32,1,opt,name=output_time,json=outputTime,proto3" json:"output_time,omitempty"`
}

func (x *CompoundOutputBin) Reset() {
	*x = CompoundOutputBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundOutputBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundOutputBin) ProtoMessage() {}

func (x *CompoundOutputBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundOutputBin.ProtoReflect.Descriptor instead.
func (*CompoundOutputBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{80}
}

func (x *CompoundOutputBin) GetOutputTime() uint32 {
	if x != nil {
		return x.OutputTime
	}
	return 0
}

type CompoundQueueBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputList []*CompoundOutputBin `protobuf:"bytes,1,rep,name=output_list,json=outputList,proto3" json:"output_list,omitempty"`
}

func (x *CompoundQueueBin) Reset() {
	*x = CompoundQueueBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundQueueBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundQueueBin) ProtoMessage() {}

func (x *CompoundQueueBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundQueueBin.ProtoReflect.Descriptor instead.
func (*CompoundQueueBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{81}
}

func (x *CompoundQueueBin) GetOutputList() []*CompoundOutputBin {
	if x != nil {
		return x.OutputList
	}
	return nil
}

type CookRecipeDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proficiency uint32 `protobuf:"varint,1,opt,name=proficiency,proto3" json:"proficiency,omitempty"`
}

func (x *CookRecipeDataBin) Reset() {
	*x = CookRecipeDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CookRecipeDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CookRecipeDataBin) ProtoMessage() {}

func (x *CookRecipeDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CookRecipeDataBin.ProtoReflect.Descriptor instead.
func (*CookRecipeDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{82}
}

func (x *CookRecipeDataBin) GetProficiency() uint32 {
	if x != nil {
		return x.Proficiency
	}
	return 0
}

type PlayerCookCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grade              uint32                        `protobuf:"varint,1,opt,name=grade,proto3" json:"grade,omitempty"`
	RecipeDataMap      map[uint32]*CookRecipeDataBin `protobuf:"bytes,2,rep,name=recipe_data_map,json=recipeDataMap,proto3" json:"recipe_data_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UnlockCompoundList []uint32                      `protobuf:"varint,3,rep,packed,name=unlock_compound_list,json=unlockCompoundList,proto3" json:"unlock_compound_list,omitempty"`
	CompoundQueBinMap  map[uint32]*CompoundQueueBin  `protobuf:"bytes,4,rep,name=compound_que_bin_map,json=compoundQueBinMap,proto3" json:"compound_que_bin_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlayerCookCompBin) Reset() {
	*x = PlayerCookCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerCookCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerCookCompBin) ProtoMessage() {}

func (x *PlayerCookCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerCookCompBin.ProtoReflect.Descriptor instead.
func (*PlayerCookCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{83}
}

func (x *PlayerCookCompBin) GetGrade() uint32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

func (x *PlayerCookCompBin) GetRecipeDataMap() map[uint32]*CookRecipeDataBin {
	if x != nil {
		return x.RecipeDataMap
	}
	return nil
}

func (x *PlayerCookCompBin) GetUnlockCompoundList() []uint32 {
	if x != nil {
		return x.UnlockCompoundList
	}
	return nil
}

func (x *PlayerCookCompBin) GetCompoundQueBinMap() map[uint32]*CompoundQueueBin {
	if x != nil {
		return x.CompoundQueBinMap
	}
	return nil
}

type PlayerLoginCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TakenLoginRewardConfigList      []uint32 `protobuf:"varint,1,rep,packed,name=taken_login_reward_config_list,json=takenLoginRewardConfigList,proto3" json:"taken_login_reward_config_list,omitempty"`
	LastLoginRefreshTime            uint32   `protobuf:"fixed32,2,opt,name=last_login_refresh_time,json=lastLoginRefreshTime,proto3" json:"last_login_refresh_time,omitempty"`
	RecvQuestionnaireMailConfigList []uint32 `protobuf:"varint,3,rep,packed,name=recv_questionnaire_mail_config_list,json=recvQuestionnaireMailConfigList,proto3" json:"recv_questionnaire_mail_config_list,omitempty"`
	LastRecvQuestionnaireMailTime   uint32   `protobuf:"fixed32,4,opt,name=last_recv_questionnaire_mail_time,json=lastRecvQuestionnaireMailTime,proto3" json:"last_recv_questionnaire_mail_time,omitempty"`
}

func (x *PlayerLoginCompBin) Reset() {
	*x = PlayerLoginCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerLoginCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerLoginCompBin) ProtoMessage() {}

func (x *PlayerLoginCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerLoginCompBin.ProtoReflect.Descriptor instead.
func (*PlayerLoginCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{84}
}

func (x *PlayerLoginCompBin) GetTakenLoginRewardConfigList() []uint32 {
	if x != nil {
		return x.TakenLoginRewardConfigList
	}
	return nil
}

func (x *PlayerLoginCompBin) GetLastLoginRefreshTime() uint32 {
	if x != nil {
		return x.LastLoginRefreshTime
	}
	return 0
}

func (x *PlayerLoginCompBin) GetRecvQuestionnaireMailConfigList() []uint32 {
	if x != nil {
		return x.RecvQuestionnaireMailConfigList
	}
	return nil
}

func (x *PlayerLoginCompBin) GetLastRecvQuestionnaireMailTime() uint32 {
	if x != nil {
		return x.LastRecvQuestionnaireMailTime
	}
	return 0
}

type OfflineMsgExeBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg      *OfflineMsgBin `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	ExeTimes uint32         `protobuf:"varint,2,opt,name=exe_times,json=exeTimes,proto3" json:"exe_times,omitempty"`
}

func (x *OfflineMsgExeBin) Reset() {
	*x = OfflineMsgExeBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineMsgExeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineMsgExeBin) ProtoMessage() {}

func (x *OfflineMsgExeBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineMsgExeBin.ProtoReflect.Descriptor instead.
func (*OfflineMsgExeBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{85}
}

func (x *OfflineMsgExeBin) GetMsg() *OfflineMsgBin {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *OfflineMsgExeBin) GetExeTimes() uint32 {
	if x != nil {
		return x.ExeTimes
	}
	return 0
}

type PlayerOfflineMsgCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index              uint32              `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	NextOfflineMsgList []*OfflineMsgExeBin `protobuf:"bytes,2,rep,name=next_offline_msg_list,json=nextOfflineMsgList,proto3" json:"next_offline_msg_list,omitempty"`
	BornSceneId        uint32              `protobuf:"varint,4,opt,name=born_scene_id,json=bornSceneId,proto3" json:"born_scene_id,omitempty"`
	BornPos            *VectorBin          `protobuf:"bytes,5,opt,name=born_pos,json=bornPos,proto3" json:"born_pos,omitempty"`
}

func (x *PlayerOfflineMsgCompBin) Reset() {
	*x = PlayerOfflineMsgCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerOfflineMsgCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerOfflineMsgCompBin) ProtoMessage() {}

func (x *PlayerOfflineMsgCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerOfflineMsgCompBin.ProtoReflect.Descriptor instead.
func (*PlayerOfflineMsgCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{86}
}

func (x *PlayerOfflineMsgCompBin) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *PlayerOfflineMsgCompBin) GetNextOfflineMsgList() []*OfflineMsgExeBin {
	if x != nil {
		return x.NextOfflineMsgList
	}
	return nil
}

func (x *PlayerOfflineMsgCompBin) GetBornSceneId() uint32 {
	if x != nil {
		return x.BornSceneId
	}
	return 0
}

func (x *PlayerOfflineMsgCompBin) GetBornPos() *VectorBin {
	if x != nil {
		return x.BornPos
	}
	return nil
}

type DailyTaskInfoBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DailyTaskId     uint32 `protobuf:"varint,1,opt,name=daily_task_id,json=dailyTaskId,proto3" json:"daily_task_id,omitempty"`
	DropId          uint32 `protobuf:"varint,2,opt,name=drop_id,json=dropId,proto3" json:"drop_id,omitempty"`
	Progress        uint32 `protobuf:"varint,3,opt,name=progress,proto3" json:"progress,omitempty"`
	IsFinished      bool   `protobuf:"varint,4,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	PreviewRewardId uint32 `protobuf:"varint,5,opt,name=preview_reward_id,json=previewRewardId,proto3" json:"preview_reward_id,omitempty"`
}

func (x *DailyTaskInfoBin) Reset() {
	*x = DailyTaskInfoBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyTaskInfoBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyTaskInfoBin) ProtoMessage() {}

func (x *DailyTaskInfoBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyTaskInfoBin.ProtoReflect.Descriptor instead.
func (*DailyTaskInfoBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{87}
}

func (x *DailyTaskInfoBin) GetDailyTaskId() uint32 {
	if x != nil {
		return x.DailyTaskId
	}
	return 0
}

func (x *DailyTaskInfoBin) GetDropId() uint32 {
	if x != nil {
		return x.DropId
	}
	return 0
}

func (x *DailyTaskInfoBin) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *DailyTaskInfoBin) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *DailyTaskInfoBin) GetPreviewRewardId() uint32 {
	if x != nil {
		return x.PreviewRewardId
	}
	return 0
}

type DailyTaskCycleQuestBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestId      uint32 `protobuf:"varint,1,opt,name=quest_id,json=questId,proto3" json:"quest_id,omitempty"`
	RefreshCount uint32 `protobuf:"varint,2,opt,name=refresh_count,json=refreshCount,proto3" json:"refresh_count,omitempty"`
}

func (x *DailyTaskCycleQuestBin) Reset() {
	*x = DailyTaskCycleQuestBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyTaskCycleQuestBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyTaskCycleQuestBin) ProtoMessage() {}

func (x *DailyTaskCycleQuestBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyTaskCycleQuestBin.ProtoReflect.Descriptor instead.
func (*DailyTaskCycleQuestBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{88}
}

func (x *DailyTaskCycleQuestBin) GetQuestId() uint32 {
	if x != nil {
		return x.QuestId
	}
	return 0
}

func (x *DailyTaskCycleQuestBin) GetRefreshCount() uint32 {
	if x != nil {
		return x.RefreshCount
	}
	return 0
}

type DailyTaskCityCycleQuestsBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityId    uint32                    `protobuf:"varint,1,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	QuestList []*DailyTaskCycleQuestBin `protobuf:"bytes,2,rep,name=quest_list,json=questList,proto3" json:"quest_list,omitempty"`
}

func (x *DailyTaskCityCycleQuestsBin) Reset() {
	*x = DailyTaskCityCycleQuestsBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyTaskCityCycleQuestsBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyTaskCityCycleQuestsBin) ProtoMessage() {}

func (x *DailyTaskCityCycleQuestsBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyTaskCityCycleQuestsBin.ProtoReflect.Descriptor instead.
func (*DailyTaskCityCycleQuestsBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{89}
}

func (x *DailyTaskCityCycleQuestsBin) GetCityId() uint32 {
	if x != nil {
		return x.CityId
	}
	return 0
}

func (x *DailyTaskCityCycleQuestsBin) GetQuestList() []*DailyTaskCycleQuestBin {
	if x != nil {
		return x.QuestList
	}
	return nil
}

type PlayerDailyTaskCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastTime           uint32                    `protobuf:"fixed32,1,opt,name=last_time,json=lastTime,proto3" json:"last_time,omitempty"`
	TaskList           []*DailyTaskInfoBin       `protobuf:"bytes,2,rep,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	ScorePlayerLevel   uint32                    `protobuf:"varint,3,opt,name=score_player_level,json=scorePlayerLevel,proto3" json:"score_player_level,omitempty"`
	IsTakenScoreReward bool                      `protobuf:"varint,4,opt,name=is_taken_score_reward,json=isTakenScoreReward,proto3" json:"is_taken_score_reward,omitempty"`
	FinishedNum        uint32                    `protobuf:"varint,5,opt,name=finished_num,json=finishedNum,proto3" json:"finished_num,omitempty"`
	SurePoolList       []uint32                  `protobuf:"varint,6,rep,packed,name=sure_pool_list,json=surePoolList,proto3" json:"sure_pool_list,omitempty"`
	PossiblePoolsList  []*Uint32List             `protobuf:"bytes,7,rep,name=possible_pools_list,json=possiblePoolsList,proto3" json:"possible_pools_list,omitempty"`
	TaskVarMap         map[uint32]*Int32List     `protobuf:"bytes,8,rep,name=task_var_map,json=taskVarMap,proto3" json:"task_var_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RefreshTimes       uint32                    `protobuf:"varint,9,opt,name=refresh_times,json=refreshTimes,proto3" json:"refresh_times,omitempty"`
	TotalRewardNum     uint32                    `protobuf:"varint,10,opt,name=total_reward_num,json=totalRewardNum,proto3" json:"total_reward_num,omitempty"`
	FilterCityId       uint32                    `protobuf:"varint,11,opt,name=filter_city_id,json=filterCityId,proto3" json:"filter_city_id,omitempty"`
	RandomCityId       uint32                    `protobuf:"varint,12,opt,name=random_city_id,json=randomCityId,proto3" json:"random_city_id,omitempty"`
	CycleQuestList     []*DailyTaskCycleQuestBin `protobuf:"bytes,14,rep,name=cycle_quest_list,json=cycleQuestList,proto3" json:"cycle_quest_list,omitempty"`
}

func (x *PlayerDailyTaskCompBin) Reset() {
	*x = PlayerDailyTaskCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDailyTaskCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDailyTaskCompBin) ProtoMessage() {}

func (x *PlayerDailyTaskCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDailyTaskCompBin.ProtoReflect.Descriptor instead.
func (*PlayerDailyTaskCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{90}
}

func (x *PlayerDailyTaskCompBin) GetLastTime() uint32 {
	if x != nil {
		return x.LastTime
	}
	return 0
}

func (x *PlayerDailyTaskCompBin) GetTaskList() []*DailyTaskInfoBin {
	if x != nil {
		return x.TaskList
	}
	return nil
}

func (x *PlayerDailyTaskCompBin) GetScorePlayerLevel() uint32 {
	if x != nil {
		return x.ScorePlayerLevel
	}
	return 0
}

func (x *PlayerDailyTaskCompBin) GetIsTakenScoreReward() bool {
	if x != nil {
		return x.IsTakenScoreReward
	}
	return false
}

func (x *PlayerDailyTaskCompBin) GetFinishedNum() uint32 {
	if x != nil {
		return x.FinishedNum
	}
	return 0
}

func (x *PlayerDailyTaskCompBin) GetSurePoolList() []uint32 {
	if x != nil {
		return x.SurePoolList
	}
	return nil
}

func (x *PlayerDailyTaskCompBin) GetPossiblePoolsList() []*Uint32List {
	if x != nil {
		return x.PossiblePoolsList
	}
	return nil
}

func (x *PlayerDailyTaskCompBin) GetTaskVarMap() map[uint32]*Int32List {
	if x != nil {
		return x.TaskVarMap
	}
	return nil
}

func (x *PlayerDailyTaskCompBin) GetRefreshTimes() uint32 {
	if x != nil {
		return x.RefreshTimes
	}
	return 0
}

func (x *PlayerDailyTaskCompBin) GetTotalRewardNum() uint32 {
	if x != nil {
		return x.TotalRewardNum
	}
	return 0
}

func (x *PlayerDailyTaskCompBin) GetFilterCityId() uint32 {
	if x != nil {
		return x.FilterCityId
	}
	return 0
}

func (x *PlayerDailyTaskCompBin) GetRandomCityId() uint32 {
	if x != nil {
		return x.RandomCityId
	}
	return 0
}

func (x *PlayerDailyTaskCompBin) GetCycleQuestList() []*DailyTaskCycleQuestBin {
	if x != nil {
		return x.CycleQuestList
	}
	return nil
}

type PlayerRandTaskCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastRewardTime uint32 `protobuf:"fixed32,1,opt,name=last_reward_time,json=lastRewardTime,proto3" json:"last_reward_time,omitempty"`
	RewardNum      uint32 `protobuf:"varint,2,opt,name=reward_num,json=rewardNum,proto3" json:"reward_num,omitempty"`
}

func (x *PlayerRandTaskCompBin) Reset() {
	*x = PlayerRandTaskCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRandTaskCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRandTaskCompBin) ProtoMessage() {}

func (x *PlayerRandTaskCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRandTaskCompBin.ProtoReflect.Descriptor instead.
func (*PlayerRandTaskCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{91}
}

func (x *PlayerRandTaskCompBin) GetLastRewardTime() uint32 {
	if x != nil {
		return x.LastRewardTime
	}
	return 0
}

func (x *PlayerRandTaskCompBin) GetRewardNum() uint32 {
	if x != nil {
		return x.RewardNum
	}
	return 0
}

type InvestigationBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestigationId uint32 `protobuf:"varint,1,opt,name=investigation_id,json=investigationId,proto3" json:"investigation_id,omitempty"`
	Progress        uint32 `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
	IsTakenReward   bool   `protobuf:"varint,3,opt,name=is_taken_reward,json=isTakenReward,proto3" json:"is_taken_reward,omitempty"`
}

func (x *InvestigationBin) Reset() {
	*x = InvestigationBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvestigationBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvestigationBin) ProtoMessage() {}

func (x *InvestigationBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvestigationBin.ProtoReflect.Descriptor instead.
func (*InvestigationBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{92}
}

func (x *InvestigationBin) GetInvestigationId() uint32 {
	if x != nil {
		return x.InvestigationId
	}
	return 0
}

func (x *InvestigationBin) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *InvestigationBin) GetIsTakenReward() bool {
	if x != nil {
		return x.IsTakenReward
	}
	return false
}

type PlayerInvestigationCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestigationList          []*InvestigationBin `protobuf:"bytes,1,rep,name=investigation_list,json=investigationList,proto3" json:"investigation_list,omitempty"`
	FinishedTargetIdList       []uint32            `protobuf:"varint,2,rep,packed,name=finished_target_id_list,json=finishedTargetIdList,proto3" json:"finished_target_id_list,omitempty"`
	RewardTakenTargetIdList    []uint32            `protobuf:"varint,3,rep,packed,name=reward_taken_target_id_list,json=rewardTakenTargetIdList,proto3" json:"reward_taken_target_id_list,omitempty"`
	IsTodayQuestDailyNotifyAck bool                `protobuf:"varint,4,opt,name=is_today_quest_daily_notify_ack,json=isTodayQuestDailyNotifyAck,proto3" json:"is_today_quest_daily_notify_ack,omitempty"`
}

func (x *PlayerInvestigationCompBin) Reset() {
	*x = PlayerInvestigationCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInvestigationCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInvestigationCompBin) ProtoMessage() {}

func (x *PlayerInvestigationCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInvestigationCompBin.ProtoReflect.Descriptor instead.
func (*PlayerInvestigationCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{93}
}

func (x *PlayerInvestigationCompBin) GetInvestigationList() []*InvestigationBin {
	if x != nil {
		return x.InvestigationList
	}
	return nil
}

func (x *PlayerInvestigationCompBin) GetFinishedTargetIdList() []uint32 {
	if x != nil {
		return x.FinishedTargetIdList
	}
	return nil
}

func (x *PlayerInvestigationCompBin) GetRewardTakenTargetIdList() []uint32 {
	if x != nil {
		return x.RewardTakenTargetIdList
	}
	return nil
}

func (x *PlayerInvestigationCompBin) GetIsTodayQuestDailyNotifyAck() bool {
	if x != nil {
		return x.IsTodayQuestDailyNotifyAck
	}
	return false
}

type SeaLampSectionBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SectionId uint32 `protobuf:"varint,1,opt,name=section_id,json=sectionId,proto3" json:"section_id,omitempty"`
}

func (x *SeaLampSectionBin) Reset() {
	*x = SeaLampSectionBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampSectionBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampSectionBin) ProtoMessage() {}

func (x *SeaLampSectionBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampSectionBin.ProtoReflect.Descriptor instead.
func (*SeaLampSectionBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{94}
}

func (x *SeaLampSectionBin) GetSectionId() uint32 {
	if x != nil {
		return x.SectionId
	}
	return 0
}

type SeaLampScheduleDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Popularity      uint32               `protobuf:"varint,1,opt,name=popularity,proto3" json:"popularity,omitempty"`
	SeaLampCoin     uint32               `protobuf:"varint,2,opt,name=sea_lamp_coin,json=seaLampCoin,proto3" json:"sea_lamp_coin,omitempty"`
	IsContentClosed bool                 `protobuf:"varint,3,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	SectionList     []*SeaLampSectionBin `protobuf:"bytes,4,rep,name=section_list,json=sectionList,proto3" json:"section_list,omitempty"`
}

func (x *SeaLampScheduleDataBin) Reset() {
	*x = SeaLampScheduleDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampScheduleDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampScheduleDataBin) ProtoMessage() {}

func (x *SeaLampScheduleDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampScheduleDataBin.ProtoReflect.Descriptor instead.
func (*SeaLampScheduleDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{95}
}

func (x *SeaLampScheduleDataBin) GetPopularity() uint32 {
	if x != nil {
		return x.Popularity
	}
	return 0
}

func (x *SeaLampScheduleDataBin) GetSeaLampCoin() uint32 {
	if x != nil {
		return x.SeaLampCoin
	}
	return 0
}

func (x *SeaLampScheduleDataBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *SeaLampScheduleDataBin) GetSectionList() []*SeaLampSectionBin {
	if x != nil {
		return x.SectionList
	}
	return nil
}

type CrucibleBattleUidBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid               uint32             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Icon              uint32             `protobuf:"varint,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Nickname          string             `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	OnlineId          string             `protobuf:"bytes,4,opt,name=online_id,json=onlineId,proto3" json:"online_id,omitempty"`
	ProfilePictureBin *ProfilePictureBin `protobuf:"bytes,5,opt,name=profile_picture_bin,json=profilePictureBin,proto3" json:"profile_picture_bin,omitempty"`
}

func (x *CrucibleBattleUidBin) Reset() {
	*x = CrucibleBattleUidBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrucibleBattleUidBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrucibleBattleUidBin) ProtoMessage() {}

func (x *CrucibleBattleUidBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrucibleBattleUidBin.ProtoReflect.Descriptor instead.
func (*CrucibleBattleUidBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{96}
}

func (x *CrucibleBattleUidBin) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CrucibleBattleUidBin) GetIcon() uint32 {
	if x != nil {
		return x.Icon
	}
	return 0
}

func (x *CrucibleBattleUidBin) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *CrucibleBattleUidBin) GetOnlineId() string {
	if x != nil {
		return x.OnlineId
	}
	return ""
}

func (x *CrucibleBattleUidBin) GetProfilePictureBin() *ProfilePictureBin {
	if x != nil {
		return x.ProfilePictureBin
	}
	return nil
}

type CrucibleScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostTime          uint32                  `protobuf:"varint,1,opt,name=cost_time,json=costTime,proto3" json:"cost_time,omitempty"`
	BattleUidDataList []*CrucibleBattleUidBin `protobuf:"bytes,2,rep,name=battle_uid_data_list,json=battleUidDataList,proto3" json:"battle_uid_data_list,omitempty"`
	BattleWorldLevel  uint32                  `protobuf:"varint,3,opt,name=battle_world_level,json=battleWorldLevel,proto3" json:"battle_world_level,omitempty"`
}

func (x *CrucibleScheduleBin) Reset() {
	*x = CrucibleScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrucibleScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrucibleScheduleBin) ProtoMessage() {}

func (x *CrucibleScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrucibleScheduleBin.ProtoReflect.Descriptor instead.
func (*CrucibleScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{97}
}

func (x *CrucibleScheduleBin) GetCostTime() uint32 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

func (x *CrucibleScheduleBin) GetBattleUidDataList() []*CrucibleBattleUidBin {
	if x != nil {
		return x.BattleUidDataList
	}
	return nil
}

func (x *CrucibleScheduleBin) GetBattleWorldLevel() uint32 {
	if x != nil {
		return x.BattleWorldLevel
	}
	return 0
}

type TrialAvatarActivityRewardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrialAvatarIndexId uint32 `protobuf:"varint,1,opt,name=trial_avatar_index_id,json=trialAvatarIndexId,proto3" json:"trial_avatar_index_id,omitempty"`
	PassedDungeon      bool   `protobuf:"varint,2,opt,name=passed_dungeon,json=passedDungeon,proto3" json:"passed_dungeon,omitempty"`
	ReceivedReward     bool   `protobuf:"varint,3,opt,name=received_reward,json=receivedReward,proto3" json:"received_reward,omitempty"`
}

func (x *TrialAvatarActivityRewardInfo) Reset() {
	*x = TrialAvatarActivityRewardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialAvatarActivityRewardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialAvatarActivityRewardInfo) ProtoMessage() {}

func (x *TrialAvatarActivityRewardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialAvatarActivityRewardInfo.ProtoReflect.Descriptor instead.
func (*TrialAvatarActivityRewardInfo) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{98}
}

func (x *TrialAvatarActivityRewardInfo) GetTrialAvatarIndexId() uint32 {
	if x != nil {
		return x.TrialAvatarIndexId
	}
	return 0
}

func (x *TrialAvatarActivityRewardInfo) GetPassedDungeon() bool {
	if x != nil {
		return x.PassedDungeon
	}
	return false
}

func (x *TrialAvatarActivityRewardInfo) GetReceivedReward() bool {
	if x != nil {
		return x.ReceivedReward
	}
	return false
}

type TrialAvatarScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardInfoList []*TrialAvatarActivityRewardInfo `protobuf:"bytes,1,rep,name=reward_info_list,json=rewardInfoList,proto3" json:"reward_info_list,omitempty"`
	WatcherIdList  []uint32                         `protobuf:"varint,2,rep,packed,name=watcher_id_list,json=watcherIdList,proto3" json:"watcher_id_list,omitempty"`
}

func (x *TrialAvatarScheduleBin) Reset() {
	*x = TrialAvatarScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialAvatarScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialAvatarScheduleBin) ProtoMessage() {}

func (x *TrialAvatarScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialAvatarScheduleBin.ProtoReflect.Descriptor instead.
func (*TrialAvatarScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{99}
}

func (x *TrialAvatarScheduleBin) GetRewardInfoList() []*TrialAvatarActivityRewardInfo {
	if x != nil {
		return x.RewardInfoList
	}
	return nil
}

func (x *TrialAvatarScheduleBin) GetWatcherIdList() []uint32 {
	if x != nil {
		return x.WatcherIdList
	}
	return nil
}

type SalesmanScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                         uint32            `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	DayIndex                       uint32            `protobuf:"varint,2,opt,name=day_index,json=dayIndex,proto3" json:"day_index,omitempty"`
	DeliverCount                   uint32            `protobuf:"varint,4,opt,name=deliver_count,json=deliverCount,proto3" json:"deliver_count,omitempty"`
	ObtainedNormalRewardIndexList  []uint32          `protobuf:"varint,5,rep,packed,name=obtained_normal_reward_index_list,json=obtainedNormalRewardIndexList,proto3" json:"obtained_normal_reward_index_list,omitempty"`
	ObtainedSpecialRewardIndexList []uint32          `protobuf:"varint,6,rep,packed,name=obtained_special_reward_index_list,json=obtainedSpecialRewardIndexList,proto3" json:"obtained_special_reward_index_list,omitempty"`
	FinishedTalkIdList             []uint32          `protobuf:"varint,7,rep,packed,name=finished_talk_id_list,json=finishedTalkIdList,proto3" json:"finished_talk_id_list,omitempty"`
	SelectedRewardIdMap            map[uint32]uint32 `protobuf:"bytes,8,rep,name=selected_reward_id_map,json=selectedRewardIdMap,proto3" json:"selected_reward_id_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	LoadedGroupConfigIdList        []*Uint32PairBin  `protobuf:"bytes,9,rep,name=loaded_group_config_id_list,json=loadedGroupConfigIdList,proto3" json:"loaded_group_config_id_list,omitempty"`
	LastDeliverDayIndex            uint32            `protobuf:"varint,10,opt,name=last_deliver_day_index,json=lastDeliverDayIndex,proto3" json:"last_deliver_day_index,omitempty"`
}

func (x *SalesmanScheduleBin) Reset() {
	*x = SalesmanScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesmanScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesmanScheduleBin) ProtoMessage() {}

func (x *SalesmanScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesmanScheduleBin.ProtoReflect.Descriptor instead.
func (*SalesmanScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{100}
}

func (x *SalesmanScheduleBin) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SalesmanScheduleBin) GetDayIndex() uint32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

func (x *SalesmanScheduleBin) GetDeliverCount() uint32 {
	if x != nil {
		return x.DeliverCount
	}
	return 0
}

func (x *SalesmanScheduleBin) GetObtainedNormalRewardIndexList() []uint32 {
	if x != nil {
		return x.ObtainedNormalRewardIndexList
	}
	return nil
}

func (x *SalesmanScheduleBin) GetObtainedSpecialRewardIndexList() []uint32 {
	if x != nil {
		return x.ObtainedSpecialRewardIndexList
	}
	return nil
}

func (x *SalesmanScheduleBin) GetFinishedTalkIdList() []uint32 {
	if x != nil {
		return x.FinishedTalkIdList
	}
	return nil
}

func (x *SalesmanScheduleBin) GetSelectedRewardIdMap() map[uint32]uint32 {
	if x != nil {
		return x.SelectedRewardIdMap
	}
	return nil
}

func (x *SalesmanScheduleBin) GetLoadedGroupConfigIdList() []*Uint32PairBin {
	if x != nil {
		return x.LoadedGroupConfigIdList
	}
	return nil
}

func (x *SalesmanScheduleBin) GetLastDeliverDayIndex() uint32 {
	if x != nil {
		return x.LastDeliverDayIndex
	}
	return 0
}

type AsterLittleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen     bool   `protobuf:"varint,1,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	StageId    uint32 `protobuf:"varint,2,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	StageState uint32 `protobuf:"varint,3,opt,name=stage_state,json=stageState,proto3" json:"stage_state,omitempty"`
}

func (x *AsterLittleBin) Reset() {
	*x = AsterLittleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsterLittleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsterLittleBin) ProtoMessage() {}

func (x *AsterLittleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsterLittleBin.ProtoReflect.Descriptor instead.
func (*AsterLittleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{101}
}

func (x *AsterLittleBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *AsterLittleBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *AsterLittleBin) GetStageState() uint32 {
	if x != nil {
		return x.StageState
	}
	return 0
}

type AsterMidBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen           bool     `protobuf:"varint,1,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	RefreshId        uint32   `protobuf:"varint,2,opt,name=refresh_id,json=refreshId,proto3" json:"refresh_id,omitempty"`
	RefreshTime      uint32   `protobuf:"varint,3,opt,name=refresh_time,json=refreshTime,proto3" json:"refresh_time,omitempty"`
	FinishedCampList []uint32 `protobuf:"varint,4,rep,packed,name=finished_camp_list,json=finishedCampList,proto3" json:"finished_camp_list,omitempty"`
	CollectCount     uint32   `protobuf:"varint,5,opt,name=collect_count,json=collectCount,proto3" json:"collect_count,omitempty"`
}

func (x *AsterMidBin) Reset() {
	*x = AsterMidBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsterMidBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsterMidBin) ProtoMessage() {}

func (x *AsterMidBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsterMidBin.ProtoReflect.Descriptor instead.
func (*AsterMidBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{102}
}

func (x *AsterMidBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *AsterMidBin) GetRefreshId() uint32 {
	if x != nil {
		return x.RefreshId
	}
	return 0
}

func (x *AsterMidBin) GetRefreshTime() uint32 {
	if x != nil {
		return x.RefreshTime
	}
	return 0
}

func (x *AsterMidBin) GetFinishedCampList() []uint32 {
	if x != nil {
		return x.FinishedCampList
	}
	return nil
}

func (x *AsterMidBin) GetCollectCount() uint32 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

type AsterLargeBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen bool `protobuf:"varint,1,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *AsterLargeBin) Reset() {
	*x = AsterLargeBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsterLargeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsterLargeBin) ProtoMessage() {}

func (x *AsterLargeBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsterLargeBin.ProtoReflect.Descriptor instead.
func (*AsterLargeBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{103}
}

func (x *AsterLargeBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type AsterProgressBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count           uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	LastAutoAddTime uint32 `protobuf:"varint,2,opt,name=last_auto_add_time,json=lastAutoAddTime,proto3" json:"last_auto_add_time,omitempty"`
}

func (x *AsterProgressBin) Reset() {
	*x = AsterProgressBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsterProgressBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsterProgressBin) ProtoMessage() {}

func (x *AsterProgressBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsterProgressBin.ProtoReflect.Descriptor instead.
func (*AsterProgressBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{104}
}

func (x *AsterProgressBin) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AsterProgressBin) GetLastAutoAddTime() uint32 {
	if x != nil {
		return x.LastAutoAddTime
	}
	return 0
}

type AsterScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsterLittle          *AsterLittleBin `protobuf:"bytes,1,opt,name=aster_little,json=asterLittle,proto3" json:"aster_little,omitempty"`
	AsterMid             *AsterMidBin    `protobuf:"bytes,2,opt,name=aster_mid,json=asterMid,proto3" json:"aster_mid,omitempty"`
	AsterLarge           *AsterLargeBin  `protobuf:"bytes,3,opt,name=aster_large,json=asterLarge,proto3" json:"aster_large,omitempty"`
	AsterCredit          uint32          `protobuf:"varint,6,opt,name=aster_credit,json=asterCredit,proto3" json:"aster_credit,omitempty"`
	AsterToken           uint32          `protobuf:"varint,7,opt,name=aster_token,json=asterToken,proto3" json:"aster_token,omitempty"`
	IsSpecialRewardTaken bool            `protobuf:"varint,8,opt,name=is_special_reward_taken,json=isSpecialRewardTaken,proto3" json:"is_special_reward_taken,omitempty"`
	IsContentClosed      bool            `protobuf:"varint,9,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
}

func (x *AsterScheduleBin) Reset() {
	*x = AsterScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsterScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsterScheduleBin) ProtoMessage() {}

func (x *AsterScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsterScheduleBin.ProtoReflect.Descriptor instead.
func (*AsterScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{105}
}

func (x *AsterScheduleBin) GetAsterLittle() *AsterLittleBin {
	if x != nil {
		return x.AsterLittle
	}
	return nil
}

func (x *AsterScheduleBin) GetAsterMid() *AsterMidBin {
	if x != nil {
		return x.AsterMid
	}
	return nil
}

func (x *AsterScheduleBin) GetAsterLarge() *AsterLargeBin {
	if x != nil {
		return x.AsterLarge
	}
	return nil
}

func (x *AsterScheduleBin) GetAsterCredit() uint32 {
	if x != nil {
		return x.AsterCredit
	}
	return 0
}

func (x *AsterScheduleBin) GetAsterToken() uint32 {
	if x != nil {
		return x.AsterToken
	}
	return 0
}

func (x *AsterScheduleBin) GetIsSpecialRewardTaken() bool {
	if x != nil {
		return x.IsSpecialRewardTaken
	}
	return false
}

func (x *AsterScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

type DeliveryScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DayIndex                             uint32   `protobuf:"varint,1,opt,name=day_index,json=dayIndex,proto3" json:"day_index,omitempty"`
	IsTakenDailyReward                   bool     `protobuf:"varint,2,opt,name=is_taken_daily_reward,json=isTakenDailyReward,proto3" json:"is_taken_daily_reward,omitempty"`
	CurDayFinishedDeliveryQuestIndexList []uint32 `protobuf:"varint,3,rep,packed,name=cur_day_finished_delivery_quest_index_list,json=curDayFinishedDeliveryQuestIndexList,proto3" json:"cur_day_finished_delivery_quest_index_list,omitempty"`
}

func (x *DeliveryScheduleBin) Reset() {
	*x = DeliveryScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryScheduleBin) ProtoMessage() {}

func (x *DeliveryScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryScheduleBin.ProtoReflect.Descriptor instead.
func (*DeliveryScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{106}
}

func (x *DeliveryScheduleBin) GetDayIndex() uint32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

func (x *DeliveryScheduleBin) GetIsTakenDailyReward() bool {
	if x != nil {
		return x.IsTakenDailyReward
	}
	return false
}

func (x *DeliveryScheduleBin) GetCurDayFinishedDeliveryQuestIndexList() []uint32 {
	if x != nil {
		return x.CurDayFinishedDeliveryQuestIndexList
	}
	return nil
}

type FlightDailyRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsTouched bool   `protobuf:"varint,1,opt,name=is_touched,json=isTouched,proto3" json:"is_touched,omitempty"`
	BestScore uint32 `protobuf:"varint,2,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
}

func (x *FlightDailyRecordBin) Reset() {
	*x = FlightDailyRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightDailyRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightDailyRecordBin) ProtoMessage() {}

func (x *FlightDailyRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightDailyRecordBin.ProtoReflect.Descriptor instead.
func (*FlightDailyRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{107}
}

func (x *FlightDailyRecordBin) GetIsTouched() bool {
	if x != nil {
		return x.IsTouched
	}
	return false
}

func (x *FlightDailyRecordBin) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

type FlightScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DailyRecordList []*FlightDailyRecordBin `protobuf:"bytes,1,rep,name=daily_record_list,json=dailyRecordList,proto3" json:"daily_record_list,omitempty"`
}

func (x *FlightScheduleBin) Reset() {
	*x = FlightScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightScheduleBin) ProtoMessage() {}

func (x *FlightScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightScheduleBin.ProtoReflect.Descriptor instead.
func (*FlightScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{108}
}

func (x *FlightScheduleBin) GetDailyRecordList() []*FlightDailyRecordBin {
	if x != nil {
		return x.DailyRecordList
	}
	return nil
}

type DragonSpineChapterBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChapterId           uint32   `protobuf:"varint,1,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id,omitempty"`
	IsOpen              bool     `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	Progress            uint32   `protobuf:"varint,3,opt,name=progress,proto3" json:"progress,omitempty"`
	IsFinish            bool     `protobuf:"varint,4,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	FinishedMissionList []uint32 `protobuf:"varint,5,rep,packed,name=finished_mission_list,json=finishedMissionList,proto3" json:"finished_mission_list,omitempty"`
	OpenTime            uint32   `protobuf:"varint,6,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
}

func (x *DragonSpineChapterBin) Reset() {
	*x = DragonSpineChapterBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DragonSpineChapterBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DragonSpineChapterBin) ProtoMessage() {}

func (x *DragonSpineChapterBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DragonSpineChapterBin.ProtoReflect.Descriptor instead.
func (*DragonSpineChapterBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{109}
}

func (x *DragonSpineChapterBin) GetChapterId() uint32 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *DragonSpineChapterBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *DragonSpineChapterBin) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *DragonSpineChapterBin) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *DragonSpineChapterBin) GetFinishedMissionList() []uint32 {
	if x != nil {
		return x.FinishedMissionList
	}
	return nil
}

func (x *DragonSpineChapterBin) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

type DragonSpineBanDropSubject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropSubjectList []*Uint32PairBin `protobuf:"bytes,1,rep,name=drop_subject_list,json=dropSubjectList,proto3" json:"drop_subject_list,omitempty"`
}

func (x *DragonSpineBanDropSubject) Reset() {
	*x = DragonSpineBanDropSubject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DragonSpineBanDropSubject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DragonSpineBanDropSubject) ProtoMessage() {}

func (x *DragonSpineBanDropSubject) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DragonSpineBanDropSubject.ProtoReflect.Descriptor instead.
func (*DragonSpineBanDropSubject) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{110}
}

func (x *DragonSpineBanDropSubject) GetDropSubjectList() []*Uint32PairBin {
	if x != nil {
		return x.DropSubjectList
	}
	return nil
}

type DragonSpineScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WeaponEnhanceStage    uint32                       `protobuf:"varint,1,opt,name=weapon_enhance_stage,json=weaponEnhanceStage,proto3" json:"weapon_enhance_stage,omitempty"`
	ChapterList           []*DragonSpineChapterBin     `protobuf:"bytes,2,rep,name=chapter_list,json=chapterList,proto3" json:"chapter_list,omitempty"`
	ShimmeringEssence     uint32                       `protobuf:"varint,3,opt,name=shimmering_essence,json=shimmeringEssence,proto3" json:"shimmering_essence,omitempty"`
	WarmEssence           uint32                       `protobuf:"varint,4,opt,name=warm_essence,json=warmEssence,proto3" json:"warm_essence,omitempty"`
	WondrousEssence       uint32                       `protobuf:"varint,5,opt,name=wondrous_essence,json=wondrousEssence,proto3" json:"wondrous_essence,omitempty"`
	BannedDropSubjectList []*DragonSpineBanDropSubject `protobuf:"bytes,6,rep,name=banned_drop_subject_list,json=bannedDropSubjectList,proto3" json:"banned_drop_subject_list,omitempty"`
	IsContentClosed       bool                         `protobuf:"varint,7,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	ActivityWeaponGuid    uint64                       `protobuf:"varint,8,opt,name=activity_weapon_guid,json=activityWeaponGuid,proto3" json:"activity_weapon_guid,omitempty"`
}

func (x *DragonSpineScheduleBin) Reset() {
	*x = DragonSpineScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DragonSpineScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DragonSpineScheduleBin) ProtoMessage() {}

func (x *DragonSpineScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DragonSpineScheduleBin.ProtoReflect.Descriptor instead.
func (*DragonSpineScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{111}
}

func (x *DragonSpineScheduleBin) GetWeaponEnhanceStage() uint32 {
	if x != nil {
		return x.WeaponEnhanceStage
	}
	return 0
}

func (x *DragonSpineScheduleBin) GetChapterList() []*DragonSpineChapterBin {
	if x != nil {
		return x.ChapterList
	}
	return nil
}

func (x *DragonSpineScheduleBin) GetShimmeringEssence() uint32 {
	if x != nil {
		return x.ShimmeringEssence
	}
	return 0
}

func (x *DragonSpineScheduleBin) GetWarmEssence() uint32 {
	if x != nil {
		return x.WarmEssence
	}
	return 0
}

func (x *DragonSpineScheduleBin) GetWondrousEssence() uint32 {
	if x != nil {
		return x.WondrousEssence
	}
	return 0
}

func (x *DragonSpineScheduleBin) GetBannedDropSubjectList() []*DragonSpineBanDropSubject {
	if x != nil {
		return x.BannedDropSubjectList
	}
	return nil
}

func (x *DragonSpineScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *DragonSpineScheduleBin) GetActivityWeaponGuid() uint64 {
	if x != nil {
		return x.ActivityWeaponGuid
	}
	return 0
}

type EffigyDailyRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DayIndex               uint32 `protobuf:"varint,1,opt,name=day_index,json=dayIndex,proto3" json:"day_index,omitempty"`
	ChallengeId            uint32 `protobuf:"varint,2,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	ChallengeMaxScore      uint32 `protobuf:"varint,4,opt,name=challenge_max_score,json=challengeMaxScore,proto3" json:"challenge_max_score,omitempty"`
	IsFirstPassRewardTaken bool   `protobuf:"varint,6,opt,name=is_first_pass_reward_taken,json=isFirstPassRewardTaken,proto3" json:"is_first_pass_reward_taken,omitempty"`
}

func (x *EffigyDailyRecordBin) Reset() {
	*x = EffigyDailyRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffigyDailyRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffigyDailyRecordBin) ProtoMessage() {}

func (x *EffigyDailyRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffigyDailyRecordBin.ProtoReflect.Descriptor instead.
func (*EffigyDailyRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{112}
}

func (x *EffigyDailyRecordBin) GetDayIndex() uint32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

func (x *EffigyDailyRecordBin) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

func (x *EffigyDailyRecordBin) GetChallengeMaxScore() uint32 {
	if x != nil {
		return x.ChallengeMaxScore
	}
	return 0
}

func (x *EffigyDailyRecordBin) GetIsFirstPassRewardTaken() bool {
	if x != nil {
		return x.IsFirstPassRewardTaken
	}
	return false
}

type EffigyScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DailyRecordList      []*EffigyDailyRecordBin `protobuf:"bytes,1,rep,name=daily_record_list,json=dailyRecordList,proto3" json:"daily_record_list,omitempty"`
	LastDifficultyId     uint32                  `protobuf:"varint,2,opt,name=last_difficulty_id,json=lastDifficultyId,proto3" json:"last_difficulty_id,omitempty"`
	TakenRewardIndexList []uint32                `protobuf:"varint,3,rep,packed,name=taken_reward_index_list,json=takenRewardIndexList,proto3" json:"taken_reward_index_list,omitempty"`
}

func (x *EffigyScheduleBin) Reset() {
	*x = EffigyScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffigyScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffigyScheduleBin) ProtoMessage() {}

func (x *EffigyScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffigyScheduleBin.ProtoReflect.Descriptor instead.
func (*EffigyScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{113}
}

func (x *EffigyScheduleBin) GetDailyRecordList() []*EffigyDailyRecordBin {
	if x != nil {
		return x.DailyRecordList
	}
	return nil
}

func (x *EffigyScheduleBin) GetLastDifficultyId() uint32 {
	if x != nil {
		return x.LastDifficultyId
	}
	return 0
}

func (x *EffigyScheduleBin) GetTakenRewardIndexList() []uint32 {
	if x != nil {
		return x.TakenRewardIndexList
	}
	return nil
}

type TreasureMapRegionBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId          uint32          `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	CurrentProgress   uint32          `protobuf:"varint,2,opt,name=current_progress,json=currentProgress,proto3" json:"current_progress,omitempty"`
	DoneGroupMap      map[uint32]bool `protobuf:"bytes,3,rep,name=done_group_map,json=doneGroupMap,proto3" json:"done_group_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IsRegionDetected  bool            `protobuf:"varint,4,opt,name=is_region_detected,json=isRegionDetected,proto3" json:"is_region_detected,omitempty"`
	IsMpChallengeOpen bool            `protobuf:"varint,5,opt,name=is_mp_challenge_open,json=isMpChallengeOpen,proto3" json:"is_mp_challenge_open,omitempty"`
	IsMpChallengeDone bool            `protobuf:"varint,6,opt,name=is_mp_challenge_done,json=isMpChallengeDone,proto3" json:"is_mp_challenge_done,omitempty"`
}

func (x *TreasureMapRegionBin) Reset() {
	*x = TreasureMapRegionBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureMapRegionBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureMapRegionBin) ProtoMessage() {}

func (x *TreasureMapRegionBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureMapRegionBin.ProtoReflect.Descriptor instead.
func (*TreasureMapRegionBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{114}
}

func (x *TreasureMapRegionBin) GetRegionId() uint32 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *TreasureMapRegionBin) GetCurrentProgress() uint32 {
	if x != nil {
		return x.CurrentProgress
	}
	return 0
}

func (x *TreasureMapRegionBin) GetDoneGroupMap() map[uint32]bool {
	if x != nil {
		return x.DoneGroupMap
	}
	return nil
}

func (x *TreasureMapRegionBin) GetIsRegionDetected() bool {
	if x != nil {
		return x.IsRegionDetected
	}
	return false
}

func (x *TreasureMapRegionBin) GetIsMpChallengeOpen() bool {
	if x != nil {
		return x.IsMpChallengeOpen
	}
	return false
}

func (x *TreasureMapRegionBin) GetIsMpChallengeDone() bool {
	if x != nil {
		return x.IsMpChallengeDone
	}
	return false
}

type TreasureMapBonusChallengeBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId        uint32            `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	IsActive        bool              `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	IsDone          bool              `protobuf:"varint,3,opt,name=is_done,json=isDone,proto3" json:"is_done,omitempty"`
	IsChallengeOpen bool              `protobuf:"varint,4,opt,name=is_challenge_open,json=isChallengeOpen,proto3" json:"is_challenge_open,omitempty"`
	FragmentMap     map[uint32]uint32 `protobuf:"bytes,5,rep,name=fragment_map,json=fragmentMap,proto3" json:"fragment_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *TreasureMapBonusChallengeBin) Reset() {
	*x = TreasureMapBonusChallengeBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureMapBonusChallengeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureMapBonusChallengeBin) ProtoMessage() {}

func (x *TreasureMapBonusChallengeBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureMapBonusChallengeBin.ProtoReflect.Descriptor instead.
func (*TreasureMapBonusChallengeBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{115}
}

func (x *TreasureMapBonusChallengeBin) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *TreasureMapBonusChallengeBin) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *TreasureMapBonusChallengeBin) GetIsDone() bool {
	if x != nil {
		return x.IsDone
	}
	return false
}

func (x *TreasureMapBonusChallengeBin) GetIsChallengeOpen() bool {
	if x != nil {
		return x.IsChallengeOpen
	}
	return false
}

func (x *TreasureMapBonusChallengeBin) GetFragmentMap() map[uint32]uint32 {
	if x != nil {
		return x.FragmentMap
	}
	return nil
}

type TreasureMapScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionList            []*TreasureMapRegionBin         `protobuf:"bytes,1,rep,name=region_list,json=regionList,proto3" json:"region_list,omitempty"`
	ActiveRegionIndex     uint32                          `protobuf:"varint,2,opt,name=active_region_index,json=activeRegionIndex,proto3" json:"active_region_index,omitempty"`
	CurrencyNum           uint32                          `protobuf:"varint,3,opt,name=currency_num,json=currencyNum,proto3" json:"currency_num,omitempty"`
	ChallengeList         []*TreasureMapBonusChallengeBin `protobuf:"bytes,4,rep,name=challenge_list,json=challengeList,proto3" json:"challenge_list,omitempty"`
	IsMpChallengeTouched  bool                            `protobuf:"varint,5,opt,name=is_mp_challenge_touched,json=isMpChallengeTouched,proto3" json:"is_mp_challenge_touched,omitempty"`
	HostMpRewardTakenNum  uint32                          `protobuf:"varint,6,opt,name=host_mp_reward_taken_num,json=hostMpRewardTakenNum,proto3" json:"host_mp_reward_taken_num,omitempty"`
	GuestMpRewardTakenNum uint32                          `protobuf:"varint,7,opt,name=guest_mp_reward_taken_num,json=guestMpRewardTakenNum,proto3" json:"guest_mp_reward_taken_num,omitempty"`
}

func (x *TreasureMapScheduleBin) Reset() {
	*x = TreasureMapScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureMapScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureMapScheduleBin) ProtoMessage() {}

func (x *TreasureMapScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureMapScheduleBin.ProtoReflect.Descriptor instead.
func (*TreasureMapScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{116}
}

func (x *TreasureMapScheduleBin) GetRegionList() []*TreasureMapRegionBin {
	if x != nil {
		return x.RegionList
	}
	return nil
}

func (x *TreasureMapScheduleBin) GetActiveRegionIndex() uint32 {
	if x != nil {
		return x.ActiveRegionIndex
	}
	return 0
}

func (x *TreasureMapScheduleBin) GetCurrencyNum() uint32 {
	if x != nil {
		return x.CurrencyNum
	}
	return 0
}

func (x *TreasureMapScheduleBin) GetChallengeList() []*TreasureMapBonusChallengeBin {
	if x != nil {
		return x.ChallengeList
	}
	return nil
}

func (x *TreasureMapScheduleBin) GetIsMpChallengeTouched() bool {
	if x != nil {
		return x.IsMpChallengeTouched
	}
	return false
}

func (x *TreasureMapScheduleBin) GetHostMpRewardTakenNum() uint32 {
	if x != nil {
		return x.HostMpRewardTakenNum
	}
	return 0
}

func (x *TreasureMapScheduleBin) GetGuestMpRewardTakenNum() uint32 {
	if x != nil {
		return x.GuestMpRewardTakenNum
	}
	return 0
}

type SalesmanMpScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                      uint32   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	DayIndex                    uint32   `protobuf:"varint,2,opt,name=day_index,json=dayIndex,proto3" json:"day_index,omitempty"`
	DeliverDayIndexList         []uint32 `protobuf:"varint,3,rep,packed,name=deliver_day_index_list,json=deliverDayIndexList,proto3" json:"deliver_day_index_list,omitempty"`
	LastDeliverDayIndex         uint32   `protobuf:"varint,4,opt,name=last_deliver_day_index,json=lastDeliverDayIndex,proto3" json:"last_deliver_day_index,omitempty"`
	IsHasTakenSpecialReward     bool     `protobuf:"varint,5,opt,name=is_has_taken_special_reward,json=isHasTakenSpecialReward,proto3" json:"is_has_taken_special_reward,omitempty"`
	NormalRewardList            []uint32 `protobuf:"varint,6,rep,packed,name=normal_reward_list,json=normalRewardList,proto3" json:"normal_reward_list,omitempty"`
	ObtainedNormalRewardList    []uint32 `protobuf:"varint,7,rep,packed,name=obtained_normal_reward_list,json=obtainedNormalRewardList,proto3" json:"obtained_normal_reward_list,omitempty"`
	ObtainedSpecialRewardList   []uint32 `protobuf:"varint,8,rep,packed,name=obtained_special_reward_list,json=obtainedSpecialRewardList,proto3" json:"obtained_special_reward_list,omitempty"`
	ObtainedSpecialMaterialList []uint32 `protobuf:"varint,9,rep,packed,name=obtained_special_material_list,json=obtainedSpecialMaterialList,proto3" json:"obtained_special_material_list,omitempty"`
	ObtainedSpecialDropList     []uint32 `protobuf:"varint,10,rep,packed,name=obtained_special_drop_list,json=obtainedSpecialDropList,proto3" json:"obtained_special_drop_list,omitempty"`
	FinishedTalkIdList          []uint32 `protobuf:"varint,11,rep,packed,name=finished_talk_id_list,json=finishedTalkIdList,proto3" json:"finished_talk_id_list,omitempty"`
}

func (x *SalesmanMpScheduleBin) Reset() {
	*x = SalesmanMpScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesmanMpScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesmanMpScheduleBin) ProtoMessage() {}

func (x *SalesmanMpScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesmanMpScheduleBin.ProtoReflect.Descriptor instead.
func (*SalesmanMpScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{117}
}

func (x *SalesmanMpScheduleBin) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SalesmanMpScheduleBin) GetDayIndex() uint32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

func (x *SalesmanMpScheduleBin) GetDeliverDayIndexList() []uint32 {
	if x != nil {
		return x.DeliverDayIndexList
	}
	return nil
}

func (x *SalesmanMpScheduleBin) GetLastDeliverDayIndex() uint32 {
	if x != nil {
		return x.LastDeliverDayIndex
	}
	return 0
}

func (x *SalesmanMpScheduleBin) GetIsHasTakenSpecialReward() bool {
	if x != nil {
		return x.IsHasTakenSpecialReward
	}
	return false
}

func (x *SalesmanMpScheduleBin) GetNormalRewardList() []uint32 {
	if x != nil {
		return x.NormalRewardList
	}
	return nil
}

func (x *SalesmanMpScheduleBin) GetObtainedNormalRewardList() []uint32 {
	if x != nil {
		return x.ObtainedNormalRewardList
	}
	return nil
}

func (x *SalesmanMpScheduleBin) GetObtainedSpecialRewardList() []uint32 {
	if x != nil {
		return x.ObtainedSpecialRewardList
	}
	return nil
}

func (x *SalesmanMpScheduleBin) GetObtainedSpecialMaterialList() []uint32 {
	if x != nil {
		return x.ObtainedSpecialMaterialList
	}
	return nil
}

func (x *SalesmanMpScheduleBin) GetObtainedSpecialDropList() []uint32 {
	if x != nil {
		return x.ObtainedSpecialDropList
	}
	return nil
}

func (x *SalesmanMpScheduleBin) GetFinishedTalkIdList() []uint32 {
	if x != nil {
		return x.FinishedTalkIdList
	}
	return nil
}

type ExpeditionPathDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathId           uint32   `protobuf:"varint,1,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	MarkId           uint32   `protobuf:"varint,2,opt,name=mark_id,json=markId,proto3" json:"mark_id,omitempty"`
	RefreshTime      uint32   `protobuf:"varint,3,opt,name=refresh_time,json=refreshTime,proto3" json:"refresh_time,omitempty"`
	State            uint32   `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
	StartTime        uint32   `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	AvatarIdList     []uint32 `protobuf:"varint,6,rep,packed,name=avatar_id_list,json=avatarIdList,proto3" json:"avatar_id_list,omitempty"`
	AssistUid        uint32   `protobuf:"varint,7,opt,name=assist_uid,json=assistUid,proto3" json:"assist_uid,omitempty"`
	AssistAvatarId   uint32   `protobuf:"varint,8,opt,name=assist_avatar_id,json=assistAvatarId,proto3" json:"assist_avatar_id,omitempty"`
	BonusProbability float32  `protobuf:"fixed32,9,opt,name=bonus_probability,json=bonusProbability,proto3" json:"bonus_probability,omitempty"`
	Transaction      string   `protobuf:"bytes,10,opt,name=transaction,proto3" json:"transaction,omitempty"`
	AssistCostumeId  uint32   `protobuf:"varint,11,opt,name=assist_costume_id,json=assistCostumeId,proto3" json:"assist_costume_id,omitempty"`
}

func (x *ExpeditionPathDataBin) Reset() {
	*x = ExpeditionPathDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpeditionPathDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpeditionPathDataBin) ProtoMessage() {}

func (x *ExpeditionPathDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpeditionPathDataBin.ProtoReflect.Descriptor instead.
func (*ExpeditionPathDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{118}
}

func (x *ExpeditionPathDataBin) GetPathId() uint32 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *ExpeditionPathDataBin) GetMarkId() uint32 {
	if x != nil {
		return x.MarkId
	}
	return 0
}

func (x *ExpeditionPathDataBin) GetRefreshTime() uint32 {
	if x != nil {
		return x.RefreshTime
	}
	return 0
}

func (x *ExpeditionPathDataBin) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *ExpeditionPathDataBin) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ExpeditionPathDataBin) GetAvatarIdList() []uint32 {
	if x != nil {
		return x.AvatarIdList
	}
	return nil
}

func (x *ExpeditionPathDataBin) GetAssistUid() uint32 {
	if x != nil {
		return x.AssistUid
	}
	return 0
}

func (x *ExpeditionPathDataBin) GetAssistAvatarId() uint32 {
	if x != nil {
		return x.AssistAvatarId
	}
	return 0
}

func (x *ExpeditionPathDataBin) GetBonusProbability() float32 {
	if x != nil {
		return x.BonusProbability
	}
	return 0
}

func (x *ExpeditionPathDataBin) GetTransaction() string {
	if x != nil {
		return x.Transaction
	}
	return ""
}

func (x *ExpeditionPathDataBin) GetAssistCostumeId() uint32 {
	if x != nil {
		return x.AssistCostumeId
	}
	return 0
}

type ExpeditionAssistRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId       uint32 `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	AssistTime     uint32 `protobuf:"varint,2,opt,name=assist_time,json=assistTime,proto3" json:"assist_time,omitempty"`
	TargetUid      uint32 `protobuf:"varint,3,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
	TargetNickName string `protobuf:"bytes,4,opt,name=target_nick_name,json=targetNickName,proto3" json:"target_nick_name,omitempty"`
	OnlineId       string `protobuf:"bytes,5,opt,name=online_id,json=onlineId,proto3" json:"online_id,omitempty"`
}

func (x *ExpeditionAssistRecordBin) Reset() {
	*x = ExpeditionAssistRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpeditionAssistRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpeditionAssistRecordBin) ProtoMessage() {}

func (x *ExpeditionAssistRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpeditionAssistRecordBin.ProtoReflect.Descriptor instead.
func (*ExpeditionAssistRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{119}
}

func (x *ExpeditionAssistRecordBin) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *ExpeditionAssistRecordBin) GetAssistTime() uint32 {
	if x != nil {
		return x.AssistTime
	}
	return 0
}

func (x *ExpeditionAssistRecordBin) GetTargetUid() uint32 {
	if x != nil {
		return x.TargetUid
	}
	return 0
}

func (x *ExpeditionAssistRecordBin) GetTargetNickName() string {
	if x != nil {
		return x.TargetNickName
	}
	return ""
}

func (x *ExpeditionAssistRecordBin) GetOnlineId() string {
	if x != nil {
		return x.OnlineId
	}
	return ""
}

type ExpeditionChallengeDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsFinished bool   `protobuf:"varint,2,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
}

func (x *ExpeditionChallengeDataBin) Reset() {
	*x = ExpeditionChallengeDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpeditionChallengeDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpeditionChallengeDataBin) ProtoMessage() {}

func (x *ExpeditionChallengeDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpeditionChallengeDataBin.ProtoReflect.Descriptor instead.
func (*ExpeditionChallengeDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{120}
}

func (x *ExpeditionChallengeDataBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExpeditionChallengeDataBin) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

type ExpeditionScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastRefreshTime       uint32                        `protobuf:"varint,1,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	CandidatePathIdList   []uint32                      `protobuf:"varint,2,rep,packed,name=candidate_path_id_list,json=candidatePathIdList,proto3" json:"candidate_path_id_list,omitempty"`
	PathDataList          []*ExpeditionPathDataBin      `protobuf:"bytes,3,rep,name=path_data_list,json=pathDataList,proto3" json:"path_data_list,omitempty"`
	ExpeditionCount       uint32                        `protobuf:"varint,4,opt,name=expedition_count,json=expeditionCount,proto3" json:"expedition_count,omitempty"`
	AssistRecordList      []*ExpeditionAssistRecordBin  `protobuf:"bytes,5,rep,name=assist_record_list,json=assistRecordList,proto3" json:"assist_record_list,omitempty"`
	ChallengeDataList     []*ExpeditionChallengeDataBin `protobuf:"bytes,6,rep,name=challenge_data_list,json=challengeDataList,proto3" json:"challenge_data_list,omitempty"`
	ExpeditionFinishCount uint32                        `protobuf:"varint,7,opt,name=expedition_finish_count,json=expeditionFinishCount,proto3" json:"expedition_finish_count,omitempty"`
	CurChallengeId        uint32                        `protobuf:"varint,8,opt,name=cur_challenge_id,json=curChallengeId,proto3" json:"cur_challenge_id,omitempty"`
	IsContentClosed       bool                          `protobuf:"varint,9,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	HistoryPathIdList     []uint32                      `protobuf:"varint,10,rep,packed,name=history_path_id_list,json=historyPathIdList,proto3" json:"history_path_id_list,omitempty"`
}

func (x *ExpeditionScheduleBin) Reset() {
	*x = ExpeditionScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpeditionScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpeditionScheduleBin) ProtoMessage() {}

func (x *ExpeditionScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpeditionScheduleBin.ProtoReflect.Descriptor instead.
func (*ExpeditionScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{121}
}

func (x *ExpeditionScheduleBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

func (x *ExpeditionScheduleBin) GetCandidatePathIdList() []uint32 {
	if x != nil {
		return x.CandidatePathIdList
	}
	return nil
}

func (x *ExpeditionScheduleBin) GetPathDataList() []*ExpeditionPathDataBin {
	if x != nil {
		return x.PathDataList
	}
	return nil
}

func (x *ExpeditionScheduleBin) GetExpeditionCount() uint32 {
	if x != nil {
		return x.ExpeditionCount
	}
	return 0
}

func (x *ExpeditionScheduleBin) GetAssistRecordList() []*ExpeditionAssistRecordBin {
	if x != nil {
		return x.AssistRecordList
	}
	return nil
}

func (x *ExpeditionScheduleBin) GetChallengeDataList() []*ExpeditionChallengeDataBin {
	if x != nil {
		return x.ChallengeDataList
	}
	return nil
}

func (x *ExpeditionScheduleBin) GetExpeditionFinishCount() uint32 {
	if x != nil {
		return x.ExpeditionFinishCount
	}
	return 0
}

func (x *ExpeditionScheduleBin) GetCurChallengeId() uint32 {
	if x != nil {
		return x.CurChallengeId
	}
	return 0
}

func (x *ExpeditionScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *ExpeditionScheduleBin) GetHistoryPathIdList() []uint32 {
	if x != nil {
		return x.HistoryPathIdList
	}
	return nil
}

type BlessingScanEntityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	GroupId  uint32 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ConfigId uint32 `protobuf:"varint,3,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	ScanNum  uint32 `protobuf:"varint,4,opt,name=scan_num,json=scanNum,proto3" json:"scan_num,omitempty"`
}

func (x *BlessingScanEntityData) Reset() {
	*x = BlessingScanEntityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlessingScanEntityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlessingScanEntityData) ProtoMessage() {}

func (x *BlessingScanEntityData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlessingScanEntityData.ProtoReflect.Descriptor instead.
func (*BlessingScanEntityData) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{122}
}

func (x *BlessingScanEntityData) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BlessingScanEntityData) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *BlessingScanEntityData) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *BlessingScanEntityData) GetScanNum() uint32 {
	if x != nil {
		return x.ScanNum
	}
	return 0
}

type BlessingRecvPicData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	PicId  uint32 `protobuf:"varint,2,opt,name=pic_id,json=picId,proto3" json:"pic_id,omitempty"`
	IsRecv bool   `protobuf:"varint,3,opt,name=is_recv,json=isRecv,proto3" json:"is_recv,omitempty"`
	Index  uint32 `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *BlessingRecvPicData) Reset() {
	*x = BlessingRecvPicData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlessingRecvPicData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlessingRecvPicData) ProtoMessage() {}

func (x *BlessingRecvPicData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlessingRecvPicData.ProtoReflect.Descriptor instead.
func (*BlessingRecvPicData) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{123}
}

func (x *BlessingRecvPicData) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BlessingRecvPicData) GetPicId() uint32 {
	if x != nil {
		return x.PicId
	}
	return 0
}

func (x *BlessingRecvPicData) GetIsRecv() bool {
	if x != nil {
		return x.IsRecv
	}
	return false
}

func (x *BlessingRecvPicData) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type BlessingScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DayIndex                uint32                    `protobuf:"varint,1,opt,name=day_index,json=dayIndex,proto3" json:"day_index,omitempty"`
	CurDayScannedEntityList []*BlessingScanEntityData `protobuf:"bytes,2,rep,name=cur_day_scanned_entity_list,json=curDayScannedEntityList,proto3" json:"cur_day_scanned_entity_list,omitempty"`
	CurDayScanNum           uint32                    `protobuf:"varint,3,opt,name=cur_day_scan_num,json=curDayScanNum,proto3" json:"cur_day_scan_num,omitempty"`
	UpPoolIndex             uint32                    `protobuf:"varint,4,opt,name=up_pool_index,json=upPoolIndex,proto3" json:"up_pool_index,omitempty"`
	PicNumMap               map[uint32]uint32         `protobuf:"bytes,5,rep,name=pic_num_map,json=picNumMap,proto3" json:"pic_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IsActivated             bool                      `protobuf:"varint,6,opt,name=is_activated,json=isActivated,proto3" json:"is_activated,omitempty"`
	IsContentClosed         bool                      `protobuf:"varint,7,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	CurDayScanTypeId        uint32                    `protobuf:"varint,8,opt,name=cur_day_scan_type_id,json=curDayScanTypeId,proto3" json:"cur_day_scan_type_id,omitempty"`
	PicDropRecordList       []uint32                  `protobuf:"varint,9,rep,packed,name=pic_drop_record_list,json=picDropRecordList,proto3" json:"pic_drop_record_list,omitempty"`
	TotalUnfulfilledNum     uint32                    `protobuf:"varint,10,opt,name=total_unfulfilled_num,json=totalUnfulfilledNum,proto3" json:"total_unfulfilled_num,omitempty"`
	RedeemRewardNum         uint32                    `protobuf:"varint,11,opt,name=redeem_reward_num,json=redeemRewardNum,proto3" json:"redeem_reward_num,omitempty"`
	RecvPicDataList         []*BlessingRecvPicData    `protobuf:"bytes,12,rep,name=recv_pic_data_list,json=recvPicDataList,proto3" json:"recv_pic_data_list,omitempty"`
	LastGeneratedId         uint32                    `protobuf:"varint,13,opt,name=last_generated_id,json=lastGeneratedId,proto3" json:"last_generated_id,omitempty"`
}

func (x *BlessingScheduleBin) Reset() {
	*x = BlessingScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlessingScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlessingScheduleBin) ProtoMessage() {}

func (x *BlessingScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlessingScheduleBin.ProtoReflect.Descriptor instead.
func (*BlessingScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{124}
}

func (x *BlessingScheduleBin) GetDayIndex() uint32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

func (x *BlessingScheduleBin) GetCurDayScannedEntityList() []*BlessingScanEntityData {
	if x != nil {
		return x.CurDayScannedEntityList
	}
	return nil
}

func (x *BlessingScheduleBin) GetCurDayScanNum() uint32 {
	if x != nil {
		return x.CurDayScanNum
	}
	return 0
}

func (x *BlessingScheduleBin) GetUpPoolIndex() uint32 {
	if x != nil {
		return x.UpPoolIndex
	}
	return 0
}

func (x *BlessingScheduleBin) GetPicNumMap() map[uint32]uint32 {
	if x != nil {
		return x.PicNumMap
	}
	return nil
}

func (x *BlessingScheduleBin) GetIsActivated() bool {
	if x != nil {
		return x.IsActivated
	}
	return false
}

func (x *BlessingScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *BlessingScheduleBin) GetCurDayScanTypeId() uint32 {
	if x != nil {
		return x.CurDayScanTypeId
	}
	return 0
}

func (x *BlessingScheduleBin) GetPicDropRecordList() []uint32 {
	if x != nil {
		return x.PicDropRecordList
	}
	return nil
}

func (x *BlessingScheduleBin) GetTotalUnfulfilledNum() uint32 {
	if x != nil {
		return x.TotalUnfulfilledNum
	}
	return 0
}

func (x *BlessingScheduleBin) GetRedeemRewardNum() uint32 {
	if x != nil {
		return x.RedeemRewardNum
	}
	return 0
}

func (x *BlessingScheduleBin) GetRecvPicDataList() []*BlessingRecvPicData {
	if x != nil {
		return x.RecvPicDataList
	}
	return nil
}

func (x *BlessingScheduleBin) GetLastGeneratedId() uint32 {
	if x != nil {
		return x.LastGeneratedId
	}
	return 0
}

type FleurFairBalloonBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BestScore uint32 `protobuf:"varint,1,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
}

func (x *FleurFairBalloonBin) Reset() {
	*x = FleurFairBalloonBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairBalloonBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairBalloonBin) ProtoMessage() {}

func (x *FleurFairBalloonBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairBalloonBin.ProtoReflect.Descriptor instead.
func (*FleurFairBalloonBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{125}
}

func (x *FleurFairBalloonBin) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

type FleurFairFallBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BestScore uint32 `protobuf:"varint,1,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
}

func (x *FleurFairFallBin) Reset() {
	*x = FleurFairFallBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairFallBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairFallBin) ProtoMessage() {}

func (x *FleurFairFallBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairFallBin.ProtoReflect.Descriptor instead.
func (*FleurFairFallBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{126}
}

func (x *FleurFairFallBin) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

type FleurFairMusicRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxScore uint32 `protobuf:"varint,1,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	MaxCombo uint32 `protobuf:"varint,2,opt,name=max_combo,json=maxCombo,proto3" json:"max_combo,omitempty"`
	IsUnlock bool   `protobuf:"varint,3,opt,name=is_unlock,json=isUnlock,proto3" json:"is_unlock,omitempty"`
}

func (x *FleurFairMusicRecordBin) Reset() {
	*x = FleurFairMusicRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairMusicRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairMusicRecordBin) ProtoMessage() {}

func (x *FleurFairMusicRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairMusicRecordBin.ProtoReflect.Descriptor instead.
func (*FleurFairMusicRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{127}
}

func (x *FleurFairMusicRecordBin) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *FleurFairMusicRecordBin) GetMaxCombo() uint32 {
	if x != nil {
		return x.MaxCombo
	}
	return 0
}

func (x *FleurFairMusicRecordBin) GetIsUnlock() bool {
	if x != nil {
		return x.IsUnlock
	}
	return false
}

type FleurFairMusicBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MusicGameRecordMap map[uint32]*FleurFairMusicRecordBin `protobuf:"bytes,1,rep,name=music_game_record_map,json=musicGameRecordMap,proto3" json:"music_game_record_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FleurFairMusicBin) Reset() {
	*x = FleurFairMusicBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairMusicBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairMusicBin) ProtoMessage() {}

func (x *FleurFairMusicBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairMusicBin.ProtoReflect.Descriptor instead.
func (*FleurFairMusicBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{128}
}

func (x *FleurFairMusicBin) GetMusicGameRecordMap() map[uint32]*FleurFairMusicRecordBin {
	if x != nil {
		return x.MusicGameRecordMap
	}
	return nil
}

type FleurFairMinigameBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinigameId uint32 `protobuf:"varint,1,opt,name=minigame_id,json=minigameId,proto3" json:"minigame_id,omitempty"`
	IsOpen     bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	// Types that are assignable to Detail:
	//
	//	*FleurFairMinigameBin_BalloonBin
	//	*FleurFairMinigameBin_FallBin
	//	*FleurFairMinigameBin_MusicBin
	Detail isFleurFairMinigameBin_Detail `protobuf_oneof:"detail"`
}

func (x *FleurFairMinigameBin) Reset() {
	*x = FleurFairMinigameBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairMinigameBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairMinigameBin) ProtoMessage() {}

func (x *FleurFairMinigameBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairMinigameBin.ProtoReflect.Descriptor instead.
func (*FleurFairMinigameBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{129}
}

func (x *FleurFairMinigameBin) GetMinigameId() uint32 {
	if x != nil {
		return x.MinigameId
	}
	return 0
}

func (x *FleurFairMinigameBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (m *FleurFairMinigameBin) GetDetail() isFleurFairMinigameBin_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *FleurFairMinigameBin) GetBalloonBin() *FleurFairBalloonBin {
	if x, ok := x.GetDetail().(*FleurFairMinigameBin_BalloonBin); ok {
		return x.BalloonBin
	}
	return nil
}

func (x *FleurFairMinigameBin) GetFallBin() *FleurFairFallBin {
	if x, ok := x.GetDetail().(*FleurFairMinigameBin_FallBin); ok {
		return x.FallBin
	}
	return nil
}

func (x *FleurFairMinigameBin) GetMusicBin() *FleurFairMusicBin {
	if x, ok := x.GetDetail().(*FleurFairMinigameBin_MusicBin); ok {
		return x.MusicBin
	}
	return nil
}

type isFleurFairMinigameBin_Detail interface {
	isFleurFairMinigameBin_Detail()
}

type FleurFairMinigameBin_BalloonBin struct {
	BalloonBin *FleurFairBalloonBin `protobuf:"bytes,11,opt,name=balloon_bin,json=balloonBin,proto3,oneof"`
}

type FleurFairMinigameBin_FallBin struct {
	FallBin *FleurFairFallBin `protobuf:"bytes,12,opt,name=fall_bin,json=fallBin,proto3,oneof"`
}

type FleurFairMinigameBin_MusicBin struct {
	MusicBin *FleurFairMusicBin `protobuf:"bytes,13,opt,name=music_bin,json=musicBin,proto3,oneof"`
}

func (*FleurFairMinigameBin_BalloonBin) isFleurFairMinigameBin_Detail() {}

func (*FleurFairMinigameBin_FallBin) isFleurFairMinigameBin_Detail() {}

func (*FleurFairMinigameBin_MusicBin) isFleurFairMinigameBin_Detail() {}

type FleurFairDungeonSectionDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SectionId uint32 `protobuf:"varint,1,opt,name=section_id,json=sectionId,proto3" json:"section_id,omitempty"`
	IsOpen    bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *FleurFairDungeonSectionDataBin) Reset() {
	*x = FleurFairDungeonSectionDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairDungeonSectionDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairDungeonSectionDataBin) ProtoMessage() {}

func (x *FleurFairDungeonSectionDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairDungeonSectionDataBin.ProtoReflect.Descriptor instead.
func (*FleurFairDungeonSectionDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{130}
}

func (x *FleurFairDungeonSectionDataBin) GetSectionId() uint32 {
	if x != nil {
		return x.SectionId
	}
	return 0
}

func (x *FleurFairDungeonSectionDataBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type FleurFairScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credit                uint32                                     `protobuf:"varint,1,opt,name=credit,proto3" json:"credit,omitempty"`
	Token                 uint32                                     `protobuf:"varint,2,opt,name=token,proto3" json:"token,omitempty"`
	IsContentClosed       bool                                       `protobuf:"varint,3,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	MinigameMap           map[uint32]*FleurFairMinigameBin           `protobuf:"bytes,4,rep,name=minigame_map,json=minigameMap,proto3" json:"minigame_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DungeonSectionMap     map[uint32]*FleurFairDungeonSectionDataBin `protobuf:"bytes,5,rep,name=dungeon_section_map,json=dungeonSectionMap,proto3" json:"dungeon_section_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsDungeonUnlocked     bool                                       `protobuf:"varint,6,opt,name=is_dungeon_unlocked,json=isDungeonUnlocked,proto3" json:"is_dungeon_unlocked,omitempty"`
	DungeonPunishOverTime uint32                                     `protobuf:"varint,7,opt,name=dungeon_punish_over_time,json=dungeonPunishOverTime,proto3" json:"dungeon_punish_over_time,omitempty"`
	ObtainedToken         uint32                                     `protobuf:"varint,8,opt,name=obtained_token,json=obtainedToken,proto3" json:"obtained_token,omitempty"`
}

func (x *FleurFairScheduleBin) Reset() {
	*x = FleurFairScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairScheduleBin) ProtoMessage() {}

func (x *FleurFairScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairScheduleBin.ProtoReflect.Descriptor instead.
func (*FleurFairScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{131}
}

func (x *FleurFairScheduleBin) GetCredit() uint32 {
	if x != nil {
		return x.Credit
	}
	return 0
}

func (x *FleurFairScheduleBin) GetToken() uint32 {
	if x != nil {
		return x.Token
	}
	return 0
}

func (x *FleurFairScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *FleurFairScheduleBin) GetMinigameMap() map[uint32]*FleurFairMinigameBin {
	if x != nil {
		return x.MinigameMap
	}
	return nil
}

func (x *FleurFairScheduleBin) GetDungeonSectionMap() map[uint32]*FleurFairDungeonSectionDataBin {
	if x != nil {
		return x.DungeonSectionMap
	}
	return nil
}

func (x *FleurFairScheduleBin) GetIsDungeonUnlocked() bool {
	if x != nil {
		return x.IsDungeonUnlocked
	}
	return false
}

func (x *FleurFairScheduleBin) GetDungeonPunishOverTime() uint32 {
	if x != nil {
		return x.DungeonPunishOverTime
	}
	return 0
}

func (x *FleurFairScheduleBin) GetObtainedToken() uint32 {
	if x != nil {
		return x.ObtainedToken
	}
	return 0
}

type ArenaChallengeSchduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorldLevel       uint32 `protobuf:"varint,1,opt,name=world_level,json=worldLevel,proto3" json:"world_level,omitempty"`
	IsFinishAnyLevel bool   `protobuf:"varint,2,opt,name=is_finish_any_level,json=isFinishAnyLevel,proto3" json:"is_finish_any_level,omitempty"`
}

func (x *ArenaChallengeSchduleBin) Reset() {
	*x = ArenaChallengeSchduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArenaChallengeSchduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArenaChallengeSchduleBin) ProtoMessage() {}

func (x *ArenaChallengeSchduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArenaChallengeSchduleBin.ProtoReflect.Descriptor instead.
func (*ArenaChallengeSchduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{132}
}

func (x *ArenaChallengeSchduleBin) GetWorldLevel() uint32 {
	if x != nil {
		return x.WorldLevel
	}
	return 0
}

func (x *ArenaChallengeSchduleBin) GetIsFinishAnyLevel() bool {
	if x != nil {
		return x.IsFinishAnyLevel
	}
	return false
}

type WaterSpiritScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpiritCoin         uint32 `protobuf:"varint,1,opt,name=spirit_coin,json=spiritCoin,proto3" json:"spirit_coin,omitempty"`
	RegionSearchPlayId uint32 `protobuf:"varint,2,opt,name=region_search_play_id,json=regionSearchPlayId,proto3" json:"region_search_play_id,omitempty"`
	ScenePlayId        uint32 `protobuf:"varint,3,opt,name=scene_play_id,json=scenePlayId,proto3" json:"scene_play_id,omitempty"`
	IsPhaseFinish      bool   `protobuf:"varint,4,opt,name=is_phase_finish,json=isPhaseFinish,proto3" json:"is_phase_finish,omitempty"`
}

func (x *WaterSpiritScheduleBin) Reset() {
	*x = WaterSpiritScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaterSpiritScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaterSpiritScheduleBin) ProtoMessage() {}

func (x *WaterSpiritScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaterSpiritScheduleBin.ProtoReflect.Descriptor instead.
func (*WaterSpiritScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{133}
}

func (x *WaterSpiritScheduleBin) GetSpiritCoin() uint32 {
	if x != nil {
		return x.SpiritCoin
	}
	return 0
}

func (x *WaterSpiritScheduleBin) GetRegionSearchPlayId() uint32 {
	if x != nil {
		return x.RegionSearchPlayId
	}
	return 0
}

func (x *WaterSpiritScheduleBin) GetScenePlayId() uint32 {
	if x != nil {
		return x.ScenePlayId
	}
	return 0
}

func (x *WaterSpiritScheduleBin) GetIsPhaseFinish() bool {
	if x != nil {
		return x.IsPhaseFinish
	}
	return false
}

type ChannellerSlabChallengeBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveCampIndex uint32 `protobuf:"varint,1,opt,name=active_camp_index,json=activeCampIndex,proto3" json:"active_camp_index,omitempty"`
}

func (x *ChannellerSlabChallengeBin) Reset() {
	*x = ChannellerSlabChallengeBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabChallengeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabChallengeBin) ProtoMessage() {}

func (x *ChannellerSlabChallengeBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabChallengeBin.ProtoReflect.Descriptor instead.
func (*ChannellerSlabChallengeBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{134}
}

func (x *ChannellerSlabChallengeBin) GetActiveCampIndex() uint32 {
	if x != nil {
		return x.ActiveCampIndex
	}
	return 0
}

type ChannellerSlabStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeList []*ChannellerSlabChallengeBin `protobuf:"bytes,1,rep,name=challenge_list,json=challengeList,proto3" json:"challenge_list,omitempty"`
	IsDungeonDone bool                          `protobuf:"varint,2,opt,name=is_dungeon_done,json=isDungeonDone,proto3" json:"is_dungeon_done,omitempty"`
}

func (x *ChannellerSlabStageBin) Reset() {
	*x = ChannellerSlabStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabStageBin) ProtoMessage() {}

func (x *ChannellerSlabStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabStageBin.ProtoReflect.Descriptor instead.
func (*ChannellerSlabStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{135}
}

func (x *ChannellerSlabStageBin) GetChallengeList() []*ChannellerSlabChallengeBin {
	if x != nil {
		return x.ChallengeList
	}
	return nil
}

func (x *ChannellerSlabStageBin) GetIsDungeonDone() bool {
	if x != nil {
		return x.IsDungeonDone
	}
	return false
}

type ChannellerSlabBuffSchemeBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotMap map[uint32]uint32 `protobuf:"bytes,1,rep,name=slot_map,json=slotMap,proto3" json:"slot_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ChannellerSlabBuffSchemeBin) Reset() {
	*x = ChannellerSlabBuffSchemeBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabBuffSchemeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabBuffSchemeBin) ProtoMessage() {}

func (x *ChannellerSlabBuffSchemeBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabBuffSchemeBin.ProtoReflect.Descriptor instead.
func (*ChannellerSlabBuffSchemeBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{136}
}

func (x *ChannellerSlabBuffSchemeBin) GetSlotMap() map[uint32]uint32 {
	if x != nil {
		return x.SlotMap
	}
	return nil
}

type ChannellerSlabAssistBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AvatarId    uint32 `protobuf:"varint,2,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	AvatarLevel uint32 `protobuf:"varint,3,opt,name=avatar_level,json=avatarLevel,proto3" json:"avatar_level,omitempty"`
}

func (x *ChannellerSlabAssistBin) Reset() {
	*x = ChannellerSlabAssistBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabAssistBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabAssistBin) ProtoMessage() {}

func (x *ChannellerSlabAssistBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabAssistBin.ProtoReflect.Descriptor instead.
func (*ChannellerSlabAssistBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{137}
}

func (x *ChannellerSlabAssistBin) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ChannellerSlabAssistBin) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *ChannellerSlabAssistBin) GetAvatarLevel() uint32 {
	if x != nil {
		return x.AvatarLevel
	}
	return 0
}

type ChannellerSlabBuffDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffIdList       []uint32                     `protobuf:"varint,1,rep,packed,name=buff_id_list,json=buffIdList,proto3" json:"buff_id_list,omitempty"`
	SingleBuffScheme *ChannellerSlabBuffSchemeBin `protobuf:"bytes,2,opt,name=single_buff_scheme,json=singleBuffScheme,proto3" json:"single_buff_scheme,omitempty"`
	MpBuffScheme     *ChannellerSlabBuffSchemeBin `protobuf:"bytes,3,opt,name=mp_buff_scheme,json=mpBuffScheme,proto3" json:"mp_buff_scheme,omitempty"`
	AssistBinList    []*ChannellerSlabAssistBin   `protobuf:"bytes,4,rep,name=assist_bin_list,json=assistBinList,proto3" json:"assist_bin_list,omitempty"`
}

func (x *ChannellerSlabBuffDataBin) Reset() {
	*x = ChannellerSlabBuffDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabBuffDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabBuffDataBin) ProtoMessage() {}

func (x *ChannellerSlabBuffDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabBuffDataBin.ProtoReflect.Descriptor instead.
func (*ChannellerSlabBuffDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{138}
}

func (x *ChannellerSlabBuffDataBin) GetBuffIdList() []uint32 {
	if x != nil {
		return x.BuffIdList
	}
	return nil
}

func (x *ChannellerSlabBuffDataBin) GetSingleBuffScheme() *ChannellerSlabBuffSchemeBin {
	if x != nil {
		return x.SingleBuffScheme
	}
	return nil
}

func (x *ChannellerSlabBuffDataBin) GetMpBuffScheme() *ChannellerSlabBuffSchemeBin {
	if x != nil {
		return x.MpBuffScheme
	}
	return nil
}

func (x *ChannellerSlabBuffDataBin) GetAssistBinList() []*ChannellerSlabAssistBin {
	if x != nil {
		return x.AssistBinList
	}
	return nil
}

type ChannellerSlabLoopDungeonDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonIndex           uint32   `protobuf:"varint,1,opt,name=dungeon_index,json=dungeonIndex,proto3" json:"dungeon_index,omitempty"`
	Score                  uint32   `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	IsFirstPassRewardTaken bool     `protobuf:"varint,3,opt,name=is_first_pass_reward_taken,json=isFirstPassRewardTaken,proto3" json:"is_first_pass_reward_taken,omitempty"`
	LastConditionIdList    []uint32 `protobuf:"varint,4,rep,packed,name=last_condition_id_list,json=lastConditionIdList,proto3" json:"last_condition_id_list,omitempty"`
	IsOpen                 bool     `protobuf:"varint,5,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *ChannellerSlabLoopDungeonDataBin) Reset() {
	*x = ChannellerSlabLoopDungeonDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabLoopDungeonDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabLoopDungeonDataBin) ProtoMessage() {}

func (x *ChannellerSlabLoopDungeonDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabLoopDungeonDataBin.ProtoReflect.Descriptor instead.
func (*ChannellerSlabLoopDungeonDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{139}
}

func (x *ChannellerSlabLoopDungeonDataBin) GetDungeonIndex() uint32 {
	if x != nil {
		return x.DungeonIndex
	}
	return 0
}

func (x *ChannellerSlabLoopDungeonDataBin) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ChannellerSlabLoopDungeonDataBin) GetIsFirstPassRewardTaken() bool {
	if x != nil {
		return x.IsFirstPassRewardTaken
	}
	return false
}

func (x *ChannellerSlabLoopDungeonDataBin) GetLastConditionIdList() []uint32 {
	if x != nil {
		return x.LastConditionIdList
	}
	return nil
}

func (x *ChannellerSlabLoopDungeonDataBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type ChannellerSlabLoopDungeonStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonDataList      []*ChannellerSlabLoopDungeonDataBin `protobuf:"bytes,1,rep,name=dungeon_data_list,json=dungeonDataList,proto3" json:"dungeon_data_list,omitempty"`
	LastDifficultyId     uint32                              `protobuf:"varint,2,opt,name=last_difficulty_id,json=lastDifficultyId,proto3" json:"last_difficulty_id,omitempty"`
	TakenRewardIndexList []uint32                            `protobuf:"varint,3,rep,packed,name=taken_reward_index_list,json=takenRewardIndexList,proto3" json:"taken_reward_index_list,omitempty"`
	IsOpen               bool                                `protobuf:"varint,4,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *ChannellerSlabLoopDungeonStageBin) Reset() {
	*x = ChannellerSlabLoopDungeonStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabLoopDungeonStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabLoopDungeonStageBin) ProtoMessage() {}

func (x *ChannellerSlabLoopDungeonStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabLoopDungeonStageBin.ProtoReflect.Descriptor instead.
func (*ChannellerSlabLoopDungeonStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{140}
}

func (x *ChannellerSlabLoopDungeonStageBin) GetDungeonDataList() []*ChannellerSlabLoopDungeonDataBin {
	if x != nil {
		return x.DungeonDataList
	}
	return nil
}

func (x *ChannellerSlabLoopDungeonStageBin) GetLastDifficultyId() uint32 {
	if x != nil {
		return x.LastDifficultyId
	}
	return 0
}

func (x *ChannellerSlabLoopDungeonStageBin) GetTakenRewardIndexList() []uint32 {
	if x != nil {
		return x.TakenRewardIndexList
	}
	return nil
}

func (x *ChannellerSlabLoopDungeonStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type ChannellerSlabScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageList        []*ChannellerSlabStageBin          `protobuf:"bytes,1,rep,name=stage_list,json=stageList,proto3" json:"stage_list,omitempty"`
	BuffData         *ChannellerSlabBuffDataBin         `protobuf:"bytes,2,opt,name=buff_data,json=buffData,proto3" json:"buff_data,omitempty"`
	LoopDungeonStage *ChannellerSlabLoopDungeonStageBin `protobuf:"bytes,3,opt,name=loop_dungeon_stage,json=loopDungeonStage,proto3" json:"loop_dungeon_stage,omitempty"`
	Tokens           uint32                             `protobuf:"varint,4,opt,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *ChannellerSlabScheduleBin) Reset() {
	*x = ChannellerSlabScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabScheduleBin) ProtoMessage() {}

func (x *ChannellerSlabScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabScheduleBin.ProtoReflect.Descriptor instead.
func (*ChannellerSlabScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{141}
}

func (x *ChannellerSlabScheduleBin) GetStageList() []*ChannellerSlabStageBin {
	if x != nil {
		return x.StageList
	}
	return nil
}

func (x *ChannellerSlabScheduleBin) GetBuffData() *ChannellerSlabBuffDataBin {
	if x != nil {
		return x.BuffData
	}
	return nil
}

func (x *ChannellerSlabScheduleBin) GetLoopDungeonStage() *ChannellerSlabLoopDungeonStageBin {
	if x != nil {
		return x.LoopDungeonStage
	}
	return nil
}

func (x *ChannellerSlabScheduleBin) GetTokens() uint32 {
	if x != nil {
		return x.Tokens
	}
	return 0
}

type MistTrialBestAvatarBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId   uint32 `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	AvatarType uint32 `protobuf:"varint,2,opt,name=avatar_type,json=avatarType,proto3" json:"avatar_type,omitempty"`
	CostumeId  uint32 `protobuf:"varint,3,opt,name=costume_id,json=costumeId,proto3" json:"costume_id,omitempty"`
}

func (x *MistTrialBestAvatarBin) Reset() {
	*x = MistTrialBestAvatarBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MistTrialBestAvatarBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MistTrialBestAvatarBin) ProtoMessage() {}

func (x *MistTrialBestAvatarBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MistTrialBestAvatarBin.ProtoReflect.Descriptor instead.
func (*MistTrialBestAvatarBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{142}
}

func (x *MistTrialBestAvatarBin) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *MistTrialBestAvatarBin) GetAvatarType() uint32 {
	if x != nil {
		return x.AvatarType
	}
	return 0
}

func (x *MistTrialBestAvatarBin) GetCostumeId() uint32 {
	if x != nil {
		return x.CostumeId
	}
	return 0
}

type MistTrialLevelBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId        uint32                    `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsOpen         bool                      `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	OpenTime       uint32                    `protobuf:"varint,3,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	TryTimes       uint32                    `protobuf:"varint,4,opt,name=try_times,json=tryTimes,proto3" json:"try_times,omitempty"`
	SuccessTimes   uint32                    `protobuf:"varint,5,opt,name=success_times,json=successTimes,proto3" json:"success_times,omitempty"`
	FirstPassTime  uint32                    `protobuf:"varint,6,opt,name=first_pass_time,json=firstPassTime,proto3" json:"first_pass_time,omitempty"`
	BestAvatarList []*MistTrialBestAvatarBin `protobuf:"bytes,7,rep,name=best_avatar_list,json=bestAvatarList,proto3" json:"best_avatar_list,omitempty"`
	BestHitAvatar  *MistTrialBestAvatarBin   `protobuf:"bytes,8,opt,name=best_hit_avatar,json=bestHitAvatar,proto3" json:"best_hit_avatar,omitempty"`
}

func (x *MistTrialLevelBin) Reset() {
	*x = MistTrialLevelBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MistTrialLevelBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MistTrialLevelBin) ProtoMessage() {}

func (x *MistTrialLevelBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MistTrialLevelBin.ProtoReflect.Descriptor instead.
func (*MistTrialLevelBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{143}
}

func (x *MistTrialLevelBin) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *MistTrialLevelBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *MistTrialLevelBin) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *MistTrialLevelBin) GetTryTimes() uint32 {
	if x != nil {
		return x.TryTimes
	}
	return 0
}

func (x *MistTrialLevelBin) GetSuccessTimes() uint32 {
	if x != nil {
		return x.SuccessTimes
	}
	return 0
}

func (x *MistTrialLevelBin) GetFirstPassTime() uint32 {
	if x != nil {
		return x.FirstPassTime
	}
	return 0
}

func (x *MistTrialLevelBin) GetBestAvatarList() []*MistTrialBestAvatarBin {
	if x != nil {
		return x.BestAvatarList
	}
	return nil
}

func (x *MistTrialLevelBin) GetBestHitAvatar() *MistTrialBestAvatarBin {
	if x != nil {
		return x.BestHitAvatar
	}
	return nil
}

type MistTrialScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelBinList []*MistTrialLevelBin `protobuf:"bytes,1,rep,name=level_bin_list,json=levelBinList,proto3" json:"level_bin_list,omitempty"`
}

func (x *MistTrialScheduleBin) Reset() {
	*x = MistTrialScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MistTrialScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MistTrialScheduleBin) ProtoMessage() {}

func (x *MistTrialScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MistTrialScheduleBin.ProtoReflect.Descriptor instead.
func (*MistTrialScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{144}
}

func (x *MistTrialScheduleBin) GetLevelBinList() []*MistTrialLevelBin {
	if x != nil {
		return x.LevelBinList
	}
	return nil
}

type HideAndSeekScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HiderSlotSkillMap  map[uint32]uint32 `protobuf:"bytes,1,rep,name=hider_slot_skill_map,json=hiderSlotSkillMap,proto3" json:"hider_slot_skill_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	HunterSlotSkillMap map[uint32]uint32 `protobuf:"bytes,2,rep,name=hunter_slot_skill_map,json=hunterSlotSkillMap,proto3" json:"hunter_slot_skill_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IsPlayOpen         bool              `protobuf:"varint,3,opt,name=is_play_open,json=isPlayOpen,proto3" json:"is_play_open,omitempty"`
	HiderCount         uint32            `protobuf:"varint,4,opt,name=hider_count,json=hiderCount,proto3" json:"hider_count,omitempty"`
	OpenMapList        []uint32          `protobuf:"varint,5,rep,packed,name=open_map_list,json=openMapList,proto3" json:"open_map_list,omitempty"`
	UnselectedMapList  []uint32          `protobuf:"varint,6,rep,packed,name=unselected_map_list,json=unselectedMapList,proto3" json:"unselected_map_list,omitempty"`
	DisappearTime      uint32            `protobuf:"varint,7,opt,name=disappear_time,json=disappearTime,proto3" json:"disappear_time,omitempty"`
}

func (x *HideAndSeekScheduleBin) Reset() {
	*x = HideAndSeekScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideAndSeekScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideAndSeekScheduleBin) ProtoMessage() {}

func (x *HideAndSeekScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideAndSeekScheduleBin.ProtoReflect.Descriptor instead.
func (*HideAndSeekScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{145}
}

func (x *HideAndSeekScheduleBin) GetHiderSlotSkillMap() map[uint32]uint32 {
	if x != nil {
		return x.HiderSlotSkillMap
	}
	return nil
}

func (x *HideAndSeekScheduleBin) GetHunterSlotSkillMap() map[uint32]uint32 {
	if x != nil {
		return x.HunterSlotSkillMap
	}
	return nil
}

func (x *HideAndSeekScheduleBin) GetIsPlayOpen() bool {
	if x != nil {
		return x.IsPlayOpen
	}
	return false
}

func (x *HideAndSeekScheduleBin) GetHiderCount() uint32 {
	if x != nil {
		return x.HiderCount
	}
	return 0
}

func (x *HideAndSeekScheduleBin) GetOpenMapList() []uint32 {
	if x != nil {
		return x.OpenMapList
	}
	return nil
}

func (x *HideAndSeekScheduleBin) GetUnselectedMapList() []uint32 {
	if x != nil {
		return x.UnselectedMapList
	}
	return nil
}

func (x *HideAndSeekScheduleBin) GetDisappearTime() uint32 {
	if x != nil {
		return x.DisappearTime
	}
	return 0
}

type FindHilichurlScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinishedDayIndex uint32 `protobuf:"varint,1,opt,name=finished_day_index,json=finishedDayIndex,proto3" json:"finished_day_index,omitempty"`
	IsContentClosed  bool   `protobuf:"varint,2,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
}

func (x *FindHilichurlScheduleBin) Reset() {
	*x = FindHilichurlScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHilichurlScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHilichurlScheduleBin) ProtoMessage() {}

func (x *FindHilichurlScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHilichurlScheduleBin.ProtoReflect.Descriptor instead.
func (*FindHilichurlScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{146}
}

func (x *FindHilichurlScheduleBin) GetFinishedDayIndex() uint32 {
	if x != nil {
		return x.FinishedDayIndex
	}
	return 0
}

func (x *FindHilichurlScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

type SummerTimeStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen  bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *SummerTimeStageBin) Reset() {
	*x = SummerTimeStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeStageBin) ProtoMessage() {}

func (x *SummerTimeStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeStageBin.ProtoReflect.Descriptor instead.
func (*SummerTimeStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{147}
}

func (x *SummerTimeStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *SummerTimeStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type SummerTimeSprintBoatBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BestScore uint32 `protobuf:"varint,1,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
	IsTouched bool   `protobuf:"varint,2,opt,name=is_touched,json=isTouched,proto3" json:"is_touched,omitempty"`
}

func (x *SummerTimeSprintBoatBin) Reset() {
	*x = SummerTimeSprintBoatBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeSprintBoatBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeSprintBoatBin) ProtoMessage() {}

func (x *SummerTimeSprintBoatBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeSprintBoatBin.ProtoReflect.Descriptor instead.
func (*SummerTimeSprintBoatBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{148}
}

func (x *SummerTimeSprintBoatBin) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

func (x *SummerTimeSprintBoatBin) GetIsTouched() bool {
	if x != nil {
		return x.IsTouched
	}
	return false
}

type SummerTimeScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageBinMap            map[uint32]*SummerTimeStageBin `protobuf:"bytes,1,rep,name=stage_bin_map,json=stageBinMap,proto3" json:"stage_bin_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsContentClosed        bool                           `protobuf:"varint,2,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	DisableFloatSignalList []uint32                       `protobuf:"varint,3,rep,packed,name=disable_float_signal_list,json=disableFloatSignalList,proto3" json:"disable_float_signal_list,omitempty"`
	UnlcokedMistZoneList   []uint32                       `protobuf:"varint,4,rep,packed,name=unlcoked_mist_zone_list,json=unlcokedMistZoneList,proto3" json:"unlcoked_mist_zone_list,omitempty"`
	LastFloatSignalId      uint32                         `protobuf:"varint,5,opt,name=last_float_signal_id,json=lastFloatSignalId,proto3" json:"last_float_signal_id,omitempty"`
	NextFloatSignalId      uint32                         `protobuf:"varint,6,opt,name=next_float_signal_id,json=nextFloatSignalId,proto3" json:"next_float_signal_id,omitempty"`
	DraftWood              uint32                         `protobuf:"varint,7,opt,name=draft_wood,json=draftWood,proto3" json:"draft_wood,omitempty"`
	MiniHarpastum          uint32                         `protobuf:"varint,8,opt,name=mini_harpastum,json=miniHarpastum,proto3" json:"mini_harpastum,omitempty"`
	SprintBoatList         []*SummerTimeSprintBoatBin     `protobuf:"bytes,9,rep,name=sprint_boat_list,json=sprintBoatList,proto3" json:"sprint_boat_list,omitempty"`
	IsSeaMistClosed        bool                           `protobuf:"varint,10,opt,name=is_sea_mist_closed,json=isSeaMistClosed,proto3" json:"is_sea_mist_closed,omitempty"`
}

func (x *SummerTimeScheduleBin) Reset() {
	*x = SummerTimeScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeScheduleBin) ProtoMessage() {}

func (x *SummerTimeScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeScheduleBin.ProtoReflect.Descriptor instead.
func (*SummerTimeScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{149}
}

func (x *SummerTimeScheduleBin) GetStageBinMap() map[uint32]*SummerTimeStageBin {
	if x != nil {
		return x.StageBinMap
	}
	return nil
}

func (x *SummerTimeScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *SummerTimeScheduleBin) GetDisableFloatSignalList() []uint32 {
	if x != nil {
		return x.DisableFloatSignalList
	}
	return nil
}

func (x *SummerTimeScheduleBin) GetUnlcokedMistZoneList() []uint32 {
	if x != nil {
		return x.UnlcokedMistZoneList
	}
	return nil
}

func (x *SummerTimeScheduleBin) GetLastFloatSignalId() uint32 {
	if x != nil {
		return x.LastFloatSignalId
	}
	return 0
}

func (x *SummerTimeScheduleBin) GetNextFloatSignalId() uint32 {
	if x != nil {
		return x.NextFloatSignalId
	}
	return 0
}

func (x *SummerTimeScheduleBin) GetDraftWood() uint32 {
	if x != nil {
		return x.DraftWood
	}
	return 0
}

func (x *SummerTimeScheduleBin) GetMiniHarpastum() uint32 {
	if x != nil {
		return x.MiniHarpastum
	}
	return 0
}

func (x *SummerTimeScheduleBin) GetSprintBoatList() []*SummerTimeSprintBoatBin {
	if x != nil {
		return x.SprintBoatList
	}
	return nil
}

func (x *SummerTimeScheduleBin) GetIsSeaMistClosed() bool {
	if x != nil {
		return x.IsSeaMistClosed
	}
	return false
}

type BounceConjuringChapterBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChapterId uint32 `protobuf:"varint,1,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id,omitempty"`
	BestScore uint32 `protobuf:"varint,2,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
}

func (x *BounceConjuringChapterBin) Reset() {
	*x = BounceConjuringChapterBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BounceConjuringChapterBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BounceConjuringChapterBin) ProtoMessage() {}

func (x *BounceConjuringChapterBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BounceConjuringChapterBin.ProtoReflect.Descriptor instead.
func (*BounceConjuringChapterBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{150}
}

func (x *BounceConjuringChapterBin) GetChapterId() uint32 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *BounceConjuringChapterBin) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

type BounceConjuringScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChapterList     []*BounceConjuringChapterBin `protobuf:"bytes,1,rep,name=chapter_list,json=chapterList,proto3" json:"chapter_list,omitempty"`
	IsContentClosed bool                         `protobuf:"varint,2,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	Coin            uint32                       `protobuf:"varint,3,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (x *BounceConjuringScheduleBin) Reset() {
	*x = BounceConjuringScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BounceConjuringScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BounceConjuringScheduleBin) ProtoMessage() {}

func (x *BounceConjuringScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BounceConjuringScheduleBin.ProtoReflect.Descriptor instead.
func (*BounceConjuringScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{151}
}

func (x *BounceConjuringScheduleBin) GetChapterList() []*BounceConjuringChapterBin {
	if x != nil {
		return x.ChapterList
	}
	return nil
}

func (x *BounceConjuringScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *BounceConjuringScheduleBin) GetCoin() uint32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

type BuoyantCombatDailyRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BestScore uint32 `protobuf:"varint,1,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
}

func (x *BuoyantCombatDailyRecordBin) Reset() {
	*x = BuoyantCombatDailyRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuoyantCombatDailyRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuoyantCombatDailyRecordBin) ProtoMessage() {}

func (x *BuoyantCombatDailyRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuoyantCombatDailyRecordBin.ProtoReflect.Descriptor instead.
func (*BuoyantCombatDailyRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{152}
}

func (x *BuoyantCombatDailyRecordBin) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

type BuoyantCombatScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DailyRecordList []*BuoyantCombatDailyRecordBin `protobuf:"bytes,1,rep,name=daily_record_list,json=dailyRecordList,proto3" json:"daily_record_list,omitempty"`
}

func (x *BuoyantCombatScheduleBin) Reset() {
	*x = BuoyantCombatScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuoyantCombatScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuoyantCombatScheduleBin) ProtoMessage() {}

func (x *BuoyantCombatScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuoyantCombatScheduleBin.ProtoReflect.Descriptor instead.
func (*BuoyantCombatScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{153}
}

func (x *BuoyantCombatScheduleBin) GetDailyRecordList() []*BuoyantCombatDailyRecordBin {
	if x != nil {
		return x.DailyRecordList
	}
	return nil
}

type SummerTimeDungeonBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonId       uint32 `protobuf:"varint,1,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	TakenChestCount uint32 `protobuf:"varint,2,opt,name=taken_chest_count,json=takenChestCount,proto3" json:"taken_chest_count,omitempty"`
	TakenShellCount uint32 `protobuf:"varint,3,opt,name=taken_shell_count,json=takenShellCount,proto3" json:"taken_shell_count,omitempty"`
}

func (x *SummerTimeDungeonBin) Reset() {
	*x = SummerTimeDungeonBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeDungeonBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeDungeonBin) ProtoMessage() {}

func (x *SummerTimeDungeonBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeDungeonBin.ProtoReflect.Descriptor instead.
func (*SummerTimeDungeonBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{154}
}

func (x *SummerTimeDungeonBin) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *SummerTimeDungeonBin) GetTakenChestCount() uint32 {
	if x != nil {
		return x.TakenChestCount
	}
	return 0
}

func (x *SummerTimeDungeonBin) GetTakenShellCount() uint32 {
	if x != nil {
		return x.TakenShellCount
	}
	return 0
}

type EchoShellScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TakenRewardList       []uint32                `protobuf:"varint,1,rep,packed,name=taken_reward_list,json=takenRewardList,proto3" json:"taken_reward_list,omitempty"`
	TakenVoiceList        []uint32                `protobuf:"varint,2,rep,packed,name=taken_voice_list,json=takenVoiceList,proto3" json:"taken_voice_list,omitempty"`
	SummerTimeDungeonList []*SummerTimeDungeonBin `protobuf:"bytes,3,rep,name=summer_time_dungeon_list,json=summerTimeDungeonList,proto3" json:"summer_time_dungeon_list,omitempty"`
	PassDungeonList       []uint32                `protobuf:"varint,4,rep,packed,name=pass_dungeon_list,json=passDungeonList,proto3" json:"pass_dungeon_list,omitempty"`
}

func (x *EchoShellScheduleBin) Reset() {
	*x = EchoShellScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoShellScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoShellScheduleBin) ProtoMessage() {}

func (x *EchoShellScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoShellScheduleBin.ProtoReflect.Descriptor instead.
func (*EchoShellScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{155}
}

func (x *EchoShellScheduleBin) GetTakenRewardList() []uint32 {
	if x != nil {
		return x.TakenRewardList
	}
	return nil
}

func (x *EchoShellScheduleBin) GetTakenVoiceList() []uint32 {
	if x != nil {
		return x.TakenVoiceList
	}
	return nil
}

func (x *EchoShellScheduleBin) GetSummerTimeDungeonList() []*SummerTimeDungeonBin {
	if x != nil {
		return x.SummerTimeDungeonList
	}
	return nil
}

func (x *EchoShellScheduleBin) GetPassDungeonList() []uint32 {
	if x != nil {
		return x.PassDungeonList
	}
	return nil
}

type ChessScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level                  uint32            `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Exp                    uint32            `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
	IsTeachDungeonFinished bool              `protobuf:"varint,3,opt,name=is_teach_dungeon_finished,json=isTeachDungeonFinished,proto3" json:"is_teach_dungeon_finished,omitempty"`
	DailyObtainedExpMap    map[uint32]uint32 `protobuf:"bytes,4,rep,name=daily_obtained_exp_map,json=dailyObtainedExpMap,proto3" json:"daily_obtained_exp_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Coin                   uint32            `protobuf:"varint,5,opt,name=coin,proto3" json:"coin,omitempty"`
	FinishedMapIdList      []uint32          `protobuf:"varint,6,rep,packed,name=finished_map_id_list,json=finishedMapIdList,proto3" json:"finished_map_id_list,omitempty"`
	PunishOverTime         uint32            `protobuf:"varint,7,opt,name=punish_over_time,json=punishOverTime,proto3" json:"punish_over_time,omitempty"`
	IsContentClosed        bool              `protobuf:"varint,8,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
}

func (x *ChessScheduleBin) Reset() {
	*x = ChessScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessScheduleBin) ProtoMessage() {}

func (x *ChessScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessScheduleBin.ProtoReflect.Descriptor instead.
func (*ChessScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{156}
}

func (x *ChessScheduleBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ChessScheduleBin) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *ChessScheduleBin) GetIsTeachDungeonFinished() bool {
	if x != nil {
		return x.IsTeachDungeonFinished
	}
	return false
}

func (x *ChessScheduleBin) GetDailyObtainedExpMap() map[uint32]uint32 {
	if x != nil {
		return x.DailyObtainedExpMap
	}
	return nil
}

func (x *ChessScheduleBin) GetCoin() uint32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *ChessScheduleBin) GetFinishedMapIdList() []uint32 {
	if x != nil {
		return x.FinishedMapIdList
	}
	return nil
}

func (x *ChessScheduleBin) GetPunishOverTime() uint32 {
	if x != nil {
		return x.PunishOverTime
	}
	return 0
}

func (x *ChessScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

type BlitzRushStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen  bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *BlitzRushStageBin) Reset() {
	*x = BlitzRushStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlitzRushStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlitzRushStageBin) ProtoMessage() {}

func (x *BlitzRushStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlitzRushStageBin.ProtoReflect.Descriptor instead.
func (*BlitzRushStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{157}
}

func (x *BlitzRushStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *BlitzRushStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type BlitzRushParkourLevelRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId    uint32 `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsOpen     bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	BestRecord uint32 `protobuf:"varint,3,opt,name=best_record,json=bestRecord,proto3" json:"best_record,omitempty"`
}

func (x *BlitzRushParkourLevelRecordBin) Reset() {
	*x = BlitzRushParkourLevelRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlitzRushParkourLevelRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlitzRushParkourLevelRecordBin) ProtoMessage() {}

func (x *BlitzRushParkourLevelRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlitzRushParkourLevelRecordBin.ProtoReflect.Descriptor instead.
func (*BlitzRushParkourLevelRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{158}
}

func (x *BlitzRushParkourLevelRecordBin) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *BlitzRushParkourLevelRecordBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *BlitzRushParkourLevelRecordBin) GetBestRecord() uint32 {
	if x != nil {
		return x.BestRecord
	}
	return 0
}

type BlitzRushScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinA                  uint32                            `protobuf:"varint,1,opt,name=coin_a,json=coinA,proto3" json:"coin_a,omitempty"`
	CoinB                  uint32                            `protobuf:"varint,2,opt,name=coin_b,json=coinB,proto3" json:"coin_b,omitempty"`
	IsContentClosed        bool                              `protobuf:"varint,3,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	StageBinList           []*BlitzRushStageBin              `protobuf:"bytes,4,rep,name=stage_bin_list,json=stageBinList,proto3" json:"stage_bin_list,omitempty"`
	ParkourLevelRecordList []*BlitzRushParkourLevelRecordBin `protobuf:"bytes,5,rep,name=parkour_level_record_list,json=parkourLevelRecordList,proto3" json:"parkour_level_record_list,omitempty"`
	IsDungeonUnlocked      bool                              `protobuf:"varint,6,opt,name=is_dungeon_unlocked,json=isDungeonUnlocked,proto3" json:"is_dungeon_unlocked,omitempty"`
}

func (x *BlitzRushScheduleBin) Reset() {
	*x = BlitzRushScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlitzRushScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlitzRushScheduleBin) ProtoMessage() {}

func (x *BlitzRushScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlitzRushScheduleBin.ProtoReflect.Descriptor instead.
func (*BlitzRushScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{159}
}

func (x *BlitzRushScheduleBin) GetCoinA() uint32 {
	if x != nil {
		return x.CoinA
	}
	return 0
}

func (x *BlitzRushScheduleBin) GetCoinB() uint32 {
	if x != nil {
		return x.CoinB
	}
	return 0
}

func (x *BlitzRushScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *BlitzRushScheduleBin) GetStageBinList() []*BlitzRushStageBin {
	if x != nil {
		return x.StageBinList
	}
	return nil
}

func (x *BlitzRushScheduleBin) GetParkourLevelRecordList() []*BlitzRushParkourLevelRecordBin {
	if x != nil {
		return x.ParkourLevelRecordList
	}
	return nil
}

func (x *BlitzRushScheduleBin) GetIsDungeonUnlocked() bool {
	if x != nil {
		return x.IsDungeonUnlocked
	}
	return false
}

type SumoAvatarBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsTrial       bool   `protobuf:"varint,1,opt,name=is_trial,json=isTrial,proto3" json:"is_trial,omitempty"`
	AvatarId      uint64 `protobuf:"varint,2,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	InDungeonGuid uint64 `protobuf:"varint,3,opt,name=in_dungeon_guid,json=inDungeonGuid,proto3" json:"in_dungeon_guid,omitempty"`
}

func (x *SumoAvatarBin) Reset() {
	*x = SumoAvatarBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoAvatarBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoAvatarBin) ProtoMessage() {}

func (x *SumoAvatarBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoAvatarBin.ProtoReflect.Descriptor instead.
func (*SumoAvatarBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{160}
}

func (x *SumoAvatarBin) GetIsTrial() bool {
	if x != nil {
		return x.IsTrial
	}
	return false
}

func (x *SumoAvatarBin) GetAvatarId() uint64 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *SumoAvatarBin) GetInDungeonGuid() uint64 {
	if x != nil {
		return x.InDungeonGuid
	}
	return 0
}

type SumoTeamBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarBinList []*SumoAvatarBin `protobuf:"bytes,1,rep,name=avatar_bin_list,json=avatarBinList,proto3" json:"avatar_bin_list,omitempty"`
	SkillIdList   []uint32         `protobuf:"varint,2,rep,packed,name=skill_id_list,json=skillIdList,proto3" json:"skill_id_list,omitempty"`
}

func (x *SumoTeamBin) Reset() {
	*x = SumoTeamBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoTeamBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoTeamBin) ProtoMessage() {}

func (x *SumoTeamBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoTeamBin.ProtoReflect.Descriptor instead.
func (*SumoTeamBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{161}
}

func (x *SumoTeamBin) GetAvatarBinList() []*SumoAvatarBin {
	if x != nil {
		return x.AvatarBinList
	}
	return nil
}

func (x *SumoTeamBin) GetSkillIdList() []uint32 {
	if x != nil {
		return x.SkillIdList
	}
	return nil
}

type SumoStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId  uint32         `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	MaxScore uint32         `protobuf:"varint,2,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	IsOpen   bool           `protobuf:"varint,3,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	TeamList []*SumoTeamBin `protobuf:"bytes,4,rep,name=team_list,json=teamList,proto3" json:"team_list,omitempty"`
}

func (x *SumoStageBin) Reset() {
	*x = SumoStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoStageBin) ProtoMessage() {}

func (x *SumoStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoStageBin.ProtoReflect.Descriptor instead.
func (*SumoStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{162}
}

func (x *SumoStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *SumoStageBin) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *SumoStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *SumoStageBin) GetTeamList() []*SumoTeamBin {
	if x != nil {
		return x.TeamList
	}
	return nil
}

type SumoScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageBinList []*SumoStageBin `protobuf:"bytes,1,rep,name=stage_bin_list,json=stageBinList,proto3" json:"stage_bin_list,omitempty"`
	DifficultyId uint32          `protobuf:"varint,2,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
	LastStageId  uint32          `protobuf:"varint,3,opt,name=last_stage_id,json=lastStageId,proto3" json:"last_stage_id,omitempty"`
}

func (x *SumoScheduleBin) Reset() {
	*x = SumoScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoScheduleBin) ProtoMessage() {}

func (x *SumoScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoScheduleBin.ProtoReflect.Descriptor instead.
func (*SumoScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{163}
}

func (x *SumoScheduleBin) GetStageBinList() []*SumoStageBin {
	if x != nil {
		return x.StageBinList
	}
	return nil
}

func (x *SumoScheduleBin) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

func (x *SumoScheduleBin) GetLastStageId() uint32 {
	if x != nil {
		return x.LastStageId
	}
	return 0
}

type LunaRiteHintPointBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaId   uint32 `protobuf:"varint,1,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	GroupId  uint32 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ConfigId uint32 `protobuf:"varint,3,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	Type     uint32 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *LunaRiteHintPointBin) Reset() {
	*x = LunaRiteHintPointBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LunaRiteHintPointBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LunaRiteHintPointBin) ProtoMessage() {}

func (x *LunaRiteHintPointBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LunaRiteHintPointBin.ProtoReflect.Descriptor instead.
func (*LunaRiteHintPointBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{164}
}

func (x *LunaRiteHintPointBin) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *LunaRiteHintPointBin) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *LunaRiteHintPointBin) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *LunaRiteHintPointBin) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type LunaRiteAreaBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaId              uint32   `protobuf:"varint,1,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	FinishBattleId      uint32   `protobuf:"varint,2,opt,name=finish_battle_id,json=finishBattleId,proto3" json:"finish_battle_id,omitempty"`
	SacrificeList       []uint32 `protobuf:"varint,3,rep,packed,name=sacrifice_list,json=sacrificeList,proto3" json:"sacrifice_list,omitempty"`
	SacrificeRewardList []uint32 `protobuf:"varint,4,rep,packed,name=sacrifice_reward_list,json=sacrificeRewardList,proto3" json:"sacrifice_reward_list,omitempty"`
	HintStatus          uint32   `protobuf:"varint,5,opt,name=hint_status,json=hintStatus,proto3" json:"hint_status,omitempty"`
	ChestSearchingNum   uint32   `protobuf:"varint,6,opt,name=chest_searching_num,json=chestSearchingNum,proto3" json:"chest_searching_num,omitempty"`
	RuneSearchingNum    uint32   `protobuf:"varint,7,opt,name=rune_searching_num,json=runeSearchingNum,proto3" json:"rune_searching_num,omitempty"`
}

func (x *LunaRiteAreaBin) Reset() {
	*x = LunaRiteAreaBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LunaRiteAreaBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LunaRiteAreaBin) ProtoMessage() {}

func (x *LunaRiteAreaBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LunaRiteAreaBin.ProtoReflect.Descriptor instead.
func (*LunaRiteAreaBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{165}
}

func (x *LunaRiteAreaBin) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *LunaRiteAreaBin) GetFinishBattleId() uint32 {
	if x != nil {
		return x.FinishBattleId
	}
	return 0
}

func (x *LunaRiteAreaBin) GetSacrificeList() []uint32 {
	if x != nil {
		return x.SacrificeList
	}
	return nil
}

func (x *LunaRiteAreaBin) GetSacrificeRewardList() []uint32 {
	if x != nil {
		return x.SacrificeRewardList
	}
	return nil
}

func (x *LunaRiteAreaBin) GetHintStatus() uint32 {
	if x != nil {
		return x.HintStatus
	}
	return 0
}

func (x *LunaRiteAreaBin) GetChestSearchingNum() uint32 {
	if x != nil {
		return x.ChestSearchingNum
	}
	return 0
}

func (x *LunaRiteAreaBin) GetRuneSearchingNum() uint32 {
	if x != nil {
		return x.RuneSearchingNum
	}
	return 0
}

type LunaRiteScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaBinList      []*LunaRiteAreaBin      `protobuf:"bytes,1,rep,name=area_bin_list,json=areaBinList,proto3" json:"area_bin_list,omitempty"`
	HintPointBinList []*LunaRiteHintPointBin `protobuf:"bytes,2,rep,name=hint_point_bin_list,json=hintPointBinList,proto3" json:"hint_point_bin_list,omitempty"`
	Atmosphere       uint32                  `protobuf:"varint,3,opt,name=atmosphere,proto3" json:"atmosphere,omitempty"`
	LastRefreshTime  uint32                  `protobuf:"varint,4,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
}

func (x *LunaRiteScheduleBin) Reset() {
	*x = LunaRiteScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LunaRiteScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LunaRiteScheduleBin) ProtoMessage() {}

func (x *LunaRiteScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LunaRiteScheduleBin.ProtoReflect.Descriptor instead.
func (*LunaRiteScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{166}
}

func (x *LunaRiteScheduleBin) GetAreaBinList() []*LunaRiteAreaBin {
	if x != nil {
		return x.AreaBinList
	}
	return nil
}

func (x *LunaRiteScheduleBin) GetHintPointBinList() []*LunaRiteHintPointBin {
	if x != nil {
		return x.HintPointBinList
	}
	return nil
}

func (x *LunaRiteScheduleBin) GetAtmosphere() uint32 {
	if x != nil {
		return x.Atmosphere
	}
	return 0
}

func (x *LunaRiteScheduleBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

type MoonfinTrialLevelRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId        uint32   `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	BestRecordList []uint32 `protobuf:"varint,2,rep,packed,name=best_record_list,json=bestRecordList,proto3" json:"best_record_list,omitempty"`
}

func (x *MoonfinTrialLevelRecordBin) Reset() {
	*x = MoonfinTrialLevelRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoonfinTrialLevelRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoonfinTrialLevelRecordBin) ProtoMessage() {}

func (x *MoonfinTrialLevelRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoonfinTrialLevelRecordBin.ProtoReflect.Descriptor instead.
func (*MoonfinTrialLevelRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{167}
}

func (x *MoonfinTrialLevelRecordBin) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *MoonfinTrialLevelRecordBin) GetBestRecordList() []uint32 {
	if x != nil {
		return x.BestRecordList
	}
	return nil
}

type MoonfinTrialScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoonfintrialLevelRecordList []*MoonfinTrialLevelRecordBin `protobuf:"bytes,1,rep,name=moonfintrial_level_record_list,json=moonfintrialLevelRecordList,proto3" json:"moonfintrial_level_record_list,omitempty"`
	SpecialFishCount            uint32                        `protobuf:"varint,2,opt,name=special_fish_count,json=specialFishCount,proto3" json:"special_fish_count,omitempty"`
}

func (x *MoonfinTrialScheduleBin) Reset() {
	*x = MoonfinTrialScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoonfinTrialScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoonfinTrialScheduleBin) ProtoMessage() {}

func (x *MoonfinTrialScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoonfinTrialScheduleBin.ProtoReflect.Descriptor instead.
func (*MoonfinTrialScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{168}
}

func (x *MoonfinTrialScheduleBin) GetMoonfintrialLevelRecordList() []*MoonfinTrialLevelRecordBin {
	if x != nil {
		return x.MoonfintrialLevelRecordList
	}
	return nil
}

func (x *MoonfinTrialScheduleBin) GetSpecialFishCount() uint32 {
	if x != nil {
		return x.SpecialFishCount
	}
	return 0
}

type PlantFlowerRecvFlowerDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          uint32            `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	FlowerNumMap map[uint32]uint32 `protobuf:"bytes,2,rep,name=flower_num_map,json=flowerNumMap,proto3" json:"flower_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PlantFlowerRecvFlowerDataBin) Reset() {
	*x = PlantFlowerRecvFlowerDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerRecvFlowerDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerRecvFlowerDataBin) ProtoMessage() {}

func (x *PlantFlowerRecvFlowerDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerRecvFlowerDataBin.ProtoReflect.Descriptor instead.
func (*PlantFlowerRecvFlowerDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{169}
}

func (x *PlantFlowerRecvFlowerDataBin) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlantFlowerRecvFlowerDataBin) GetFlowerNumMap() map[uint32]uint32 {
	if x != nil {
		return x.FlowerNumMap
	}
	return nil
}

type HomeModuleUsedActivityItemDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleId     uint32            `protobuf:"varint,1,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	ItemCountMap map[uint32]uint32 `protobuf:"bytes,2,rep,name=item_count_map,json=itemCountMap,proto3" json:"item_count_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *HomeModuleUsedActivityItemDataBin) Reset() {
	*x = HomeModuleUsedActivityItemDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeModuleUsedActivityItemDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeModuleUsedActivityItemDataBin) ProtoMessage() {}

func (x *HomeModuleUsedActivityItemDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeModuleUsedActivityItemDataBin.ProtoReflect.Descriptor instead.
func (*HomeModuleUsedActivityItemDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{170}
}

func (x *HomeModuleUsedActivityItemDataBin) GetModuleId() uint32 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

func (x *HomeModuleUsedActivityItemDataBin) GetItemCountMap() map[uint32]uint32 {
	if x != nil {
		return x.ItemCountMap
	}
	return nil
}

type HomeUsedActivityItemDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleUsedItemList []*HomeModuleUsedActivityItemDataBin `protobuf:"bytes,1,rep,name=module_used_item_list,json=moduleUsedItemList,proto3" json:"module_used_item_list,omitempty"`
}

func (x *HomeUsedActivityItemDataBin) Reset() {
	*x = HomeUsedActivityItemDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeUsedActivityItemDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeUsedActivityItemDataBin) ProtoMessage() {}

func (x *HomeUsedActivityItemDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeUsedActivityItemDataBin.ProtoReflect.Descriptor instead.
func (*HomeUsedActivityItemDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{171}
}

func (x *HomeUsedActivityItemDataBin) GetModuleUsedItemList() []*HomeModuleUsedActivityItemDataBin {
	if x != nil {
		return x.ModuleUsedItemList
	}
	return nil
}

type PlantFlowerSeedPlantDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeedId           uint32   `protobuf:"varint,1,opt,name=seed_id,json=seedId,proto3" json:"seed_id,omitempty"`
	HomeGatherIdList []uint32 `protobuf:"varint,2,rep,packed,name=home_gather_id_list,json=homeGatherIdList,proto3" json:"home_gather_id_list,omitempty"`
}

func (x *PlantFlowerSeedPlantDataBin) Reset() {
	*x = PlantFlowerSeedPlantDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerSeedPlantDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerSeedPlantDataBin) ProtoMessage() {}

func (x *PlantFlowerSeedPlantDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerSeedPlantDataBin.ProtoReflect.Descriptor instead.
func (*PlantFlowerSeedPlantDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{172}
}

func (x *PlantFlowerSeedPlantDataBin) GetSeedId() uint32 {
	if x != nil {
		return x.SeedId
	}
	return 0
}

func (x *PlantFlowerSeedPlantDataBin) GetHomeGatherIdList() []uint32 {
	if x != nil {
		return x.HomeGatherIdList
	}
	return nil
}

type PlantFlowerShelfDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GadgetConfigId   uint32            `protobuf:"varint,1,opt,name=gadget_config_id,json=gadgetConfigId,proto3" json:"gadget_config_id,omitempty"`
	UsedFlowerNumMap map[uint32]uint32 `protobuf:"bytes,2,rep,name=used_flower_num_map,json=usedFlowerNumMap,proto3" json:"used_flower_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PlantFlowerShelfDataBin) Reset() {
	*x = PlantFlowerShelfDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerShelfDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerShelfDataBin) ProtoMessage() {}

func (x *PlantFlowerShelfDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerShelfDataBin.ProtoReflect.Descriptor instead.
func (*PlantFlowerShelfDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{173}
}

func (x *PlantFlowerShelfDataBin) GetGadgetConfigId() uint32 {
	if x != nil {
		return x.GadgetConfigId
	}
	return 0
}

func (x *PlantFlowerShelfDataBin) GetUsedFlowerNumMap() map[uint32]uint32 {
	if x != nil {
		return x.UsedFlowerNumMap
	}
	return nil
}

type PlantFlowerScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DayIndex                     uint32                          `protobuf:"varint,1,opt,name=day_index,json=dayIndex,proto3" json:"day_index,omitempty"`
	LastAwardedDayIndex          uint32                          `protobuf:"varint,2,opt,name=last_awarded_day_index,json=lastAwardedDayIndex,proto3" json:"last_awarded_day_index,omitempty"`
	SeedRewardList               []uint32                        `protobuf:"varint,3,rep,packed,name=seed_reward_list,json=seedRewardList,proto3" json:"seed_reward_list,omitempty"`
	WishFlowerNumMap             map[uint32]uint32               `protobuf:"bytes,4,rep,name=wish_flower_num_map,json=wishFlowerNumMap,proto3" json:"wish_flower_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RecvFlowerDataList           []*PlantFlowerRecvFlowerDataBin `protobuf:"bytes,5,rep,name=recv_flower_data_list,json=recvFlowerDataList,proto3" json:"recv_flower_data_list,omitempty"`
	IsContentClosed              bool                            `protobuf:"varint,6,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	ActivityUsedFlowerNumMap     map[uint32]uint32               `protobuf:"bytes,7,rep,name=activity_used_flower_num_map,json=activityUsedFlowerNumMap,proto3" json:"activity_used_flower_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	HomeUsedFlowerData           *HomeUsedActivityItemDataBin    `protobuf:"bytes,8,opt,name=home_used_flower_data,json=homeUsedFlowerData,proto3" json:"home_used_flower_data,omitempty"`
	SeedPlantDataList            []*PlantFlowerSeedPlantDataBin  `protobuf:"bytes,9,rep,name=seed_plant_data_list,json=seedPlantDataList,proto3" json:"seed_plant_data_list,omitempty"`
	FlowerShelfDataList          []*PlantFlowerShelfDataBin      `protobuf:"bytes,10,rep,name=flower_shelf_data_list,json=flowerShelfDataList,proto3" json:"flower_shelf_data_list,omitempty"`
	PlantObtainedFlowerTypeList  []uint32                        `protobuf:"varint,11,rep,packed,name=plant_obtained_flower_type_list,json=plantObtainedFlowerTypeList,proto3" json:"plant_obtained_flower_type_list,omitempty"`
	CommonObtainedFlowerTypeList []uint32                        `protobuf:"varint,12,rep,packed,name=common_obtained_flower_type_list,json=commonObtainedFlowerTypeList,proto3" json:"common_obtained_flower_type_list,omitempty"`
}

func (x *PlantFlowerScheduleBin) Reset() {
	*x = PlantFlowerScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerScheduleBin) ProtoMessage() {}

func (x *PlantFlowerScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerScheduleBin.ProtoReflect.Descriptor instead.
func (*PlantFlowerScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{174}
}

func (x *PlantFlowerScheduleBin) GetDayIndex() uint32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

func (x *PlantFlowerScheduleBin) GetLastAwardedDayIndex() uint32 {
	if x != nil {
		return x.LastAwardedDayIndex
	}
	return 0
}

func (x *PlantFlowerScheduleBin) GetSeedRewardList() []uint32 {
	if x != nil {
		return x.SeedRewardList
	}
	return nil
}

func (x *PlantFlowerScheduleBin) GetWishFlowerNumMap() map[uint32]uint32 {
	if x != nil {
		return x.WishFlowerNumMap
	}
	return nil
}

func (x *PlantFlowerScheduleBin) GetRecvFlowerDataList() []*PlantFlowerRecvFlowerDataBin {
	if x != nil {
		return x.RecvFlowerDataList
	}
	return nil
}

func (x *PlantFlowerScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *PlantFlowerScheduleBin) GetActivityUsedFlowerNumMap() map[uint32]uint32 {
	if x != nil {
		return x.ActivityUsedFlowerNumMap
	}
	return nil
}

func (x *PlantFlowerScheduleBin) GetHomeUsedFlowerData() *HomeUsedActivityItemDataBin {
	if x != nil {
		return x.HomeUsedFlowerData
	}
	return nil
}

func (x *PlantFlowerScheduleBin) GetSeedPlantDataList() []*PlantFlowerSeedPlantDataBin {
	if x != nil {
		return x.SeedPlantDataList
	}
	return nil
}

func (x *PlantFlowerScheduleBin) GetFlowerShelfDataList() []*PlantFlowerShelfDataBin {
	if x != nil {
		return x.FlowerShelfDataList
	}
	return nil
}

func (x *PlantFlowerScheduleBin) GetPlantObtainedFlowerTypeList() []uint32 {
	if x != nil {
		return x.PlantObtainedFlowerTypeList
	}
	return nil
}

func (x *PlantFlowerScheduleBin) GetCommonObtainedFlowerTypeList() []uint32 {
	if x != nil {
		return x.CommonObtainedFlowerTypeList
	}
	return nil
}

type MusicGameRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxScore uint32 `protobuf:"varint,1,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	MaxCombo uint32 `protobuf:"varint,2,opt,name=max_combo,json=maxCombo,proto3" json:"max_combo,omitempty"`
	IsUnlock bool   `protobuf:"varint,3,opt,name=is_unlock,json=isUnlock,proto3" json:"is_unlock,omitempty"`
}

func (x *MusicGameRecordBin) Reset() {
	*x = MusicGameRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusicGameRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicGameRecordBin) ProtoMessage() {}

func (x *MusicGameRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicGameRecordBin.ProtoReflect.Descriptor instead.
func (*MusicGameRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{175}
}

func (x *MusicGameRecordBin) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *MusicGameRecordBin) GetMaxCombo() uint32 {
	if x != nil {
		return x.MaxCombo
	}
	return 0
}

func (x *MusicGameRecordBin) GetIsUnlock() bool {
	if x != nil {
		return x.IsUnlock
	}
	return false
}

type MusicGameUgcSaveBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UgcGuid               uint64 `protobuf:"varint,1,opt,name=ugc_guid,json=ugcGuid,proto3" json:"ugc_guid,omitempty"`
	MusicId               uint32 `protobuf:"varint,2,opt,name=music_id,json=musicId,proto3" json:"music_id,omitempty"`
	SaveIdx               uint32 `protobuf:"varint,3,opt,name=save_idx,json=saveIdx,proto3" json:"save_idx,omitempty"`
	SaveTime              uint32 `protobuf:"varint,4,opt,name=save_time,json=saveTime,proto3" json:"save_time,omitempty"`
	MaxScore              uint32 `protobuf:"varint,5,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	NoteCount             uint32 `protobuf:"varint,6,opt,name=note_count,json=noteCount,proto3" json:"note_count,omitempty"`
	Version               uint32 `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
	IsPublished           bool   `protobuf:"varint,8,opt,name=is_published,json=isPublished,proto3" json:"is_published,omitempty"`
	IsChangedAfterPublish bool   `protobuf:"varint,9,opt,name=is_changed_after_publish,json=isChangedAfterPublish,proto3" json:"is_changed_after_publish,omitempty"`
	ImportFromUgcGuid     uint64 `protobuf:"varint,10,opt,name=import_from_ugc_guid,json=importFromUgcGuid,proto3" json:"import_from_ugc_guid,omitempty"`
}

func (x *MusicGameUgcSaveBin) Reset() {
	*x = MusicGameUgcSaveBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusicGameUgcSaveBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicGameUgcSaveBin) ProtoMessage() {}

func (x *MusicGameUgcSaveBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicGameUgcSaveBin.ProtoReflect.Descriptor instead.
func (*MusicGameUgcSaveBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{176}
}

func (x *MusicGameUgcSaveBin) GetUgcGuid() uint64 {
	if x != nil {
		return x.UgcGuid
	}
	return 0
}

func (x *MusicGameUgcSaveBin) GetMusicId() uint32 {
	if x != nil {
		return x.MusicId
	}
	return 0
}

func (x *MusicGameUgcSaveBin) GetSaveIdx() uint32 {
	if x != nil {
		return x.SaveIdx
	}
	return 0
}

func (x *MusicGameUgcSaveBin) GetSaveTime() uint32 {
	if x != nil {
		return x.SaveTime
	}
	return 0
}

func (x *MusicGameUgcSaveBin) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *MusicGameUgcSaveBin) GetNoteCount() uint32 {
	if x != nil {
		return x.NoteCount
	}
	return 0
}

func (x *MusicGameUgcSaveBin) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *MusicGameUgcSaveBin) GetIsPublished() bool {
	if x != nil {
		return x.IsPublished
	}
	return false
}

func (x *MusicGameUgcSaveBin) GetIsChangedAfterPublish() bool {
	if x != nil {
		return x.IsChangedAfterPublish
	}
	return false
}

func (x *MusicGameUgcSaveBin) GetImportFromUgcGuid() uint64 {
	if x != nil {
		return x.ImportFromUgcGuid
	}
	return 0
}

type MusicGameUgcSearchBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UgcGuid           uint64 `protobuf:"varint,1,opt,name=ugc_guid,json=ugcGuid,proto3" json:"ugc_guid,omitempty"`
	MusicId           uint32 `protobuf:"varint,2,opt,name=music_id,json=musicId,proto3" json:"music_id,omitempty"`
	PublishTime       uint32 `protobuf:"varint,3,opt,name=publish_time,json=publishTime,proto3" json:"publish_time,omitempty"`
	MaxScore          uint32 `protobuf:"varint,4,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	NoteCount         uint32 `protobuf:"varint,5,opt,name=note_count,json=noteCount,proto3" json:"note_count,omitempty"`
	Version           uint32 `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	CreatorNickname   string `protobuf:"bytes,7,opt,name=creator_nickname,json=creatorNickname,proto3" json:"creator_nickname,omitempty"`
	IsPsnPlatform     bool   `protobuf:"varint,8,opt,name=is_psn_platform,json=isPsnPlatform,proto3" json:"is_psn_platform,omitempty"`
	ImportFromUgcGuid uint64 `protobuf:"varint,9,opt,name=import_from_ugc_guid,json=importFromUgcGuid,proto3" json:"import_from_ugc_guid,omitempty"`
}

func (x *MusicGameUgcSearchBin) Reset() {
	*x = MusicGameUgcSearchBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusicGameUgcSearchBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicGameUgcSearchBin) ProtoMessage() {}

func (x *MusicGameUgcSearchBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicGameUgcSearchBin.ProtoReflect.Descriptor instead.
func (*MusicGameUgcSearchBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{177}
}

func (x *MusicGameUgcSearchBin) GetUgcGuid() uint64 {
	if x != nil {
		return x.UgcGuid
	}
	return 0
}

func (x *MusicGameUgcSearchBin) GetMusicId() uint32 {
	if x != nil {
		return x.MusicId
	}
	return 0
}

func (x *MusicGameUgcSearchBin) GetPublishTime() uint32 {
	if x != nil {
		return x.PublishTime
	}
	return 0
}

func (x *MusicGameUgcSearchBin) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *MusicGameUgcSearchBin) GetNoteCount() uint32 {
	if x != nil {
		return x.NoteCount
	}
	return 0
}

func (x *MusicGameUgcSearchBin) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *MusicGameUgcSearchBin) GetCreatorNickname() string {
	if x != nil {
		return x.CreatorNickname
	}
	return ""
}

func (x *MusicGameUgcSearchBin) GetIsPsnPlatform() bool {
	if x != nil {
		return x.IsPsnPlatform
	}
	return false
}

func (x *MusicGameUgcSearchBin) GetImportFromUgcGuid() uint64 {
	if x != nil {
		return x.ImportFromUgcGuid
	}
	return 0
}

type MusicGameUgcPlayBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UgcGuid uint64 `protobuf:"varint,1,opt,name=ugc_guid,json=ugcGuid,proto3" json:"ugc_guid,omitempty"`
	Version uint32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Score   uint32 `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *MusicGameUgcPlayBin) Reset() {
	*x = MusicGameUgcPlayBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusicGameUgcPlayBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicGameUgcPlayBin) ProtoMessage() {}

func (x *MusicGameUgcPlayBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicGameUgcPlayBin.ProtoReflect.Descriptor instead.
func (*MusicGameUgcPlayBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{178}
}

func (x *MusicGameUgcPlayBin) GetUgcGuid() uint64 {
	if x != nil {
		return x.UgcGuid
	}
	return 0
}

func (x *MusicGameUgcPlayBin) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *MusicGameUgcPlayBin) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type MusicGameScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MusicGameRecordMap    map[uint32]*MusicGameRecordBin `protobuf:"bytes,1,rep,name=music_game_record_map,json=musicGameRecordMap,proto3" json:"music_game_record_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MusicGameUgcSaveBin   []*MusicGameUgcSaveBin         `protobuf:"bytes,2,rep,name=music_game_ugc_save_bin,json=musicGameUgcSaveBin,proto3" json:"music_game_ugc_save_bin,omitempty"`
	MusicGameUgcSearchBin []*MusicGameUgcSearchBin       `protobuf:"bytes,3,rep,name=music_game_ugc_search_bin,json=musicGameUgcSearchBin,proto3" json:"music_game_ugc_search_bin,omitempty"`
	MusicGameUgcPlayBin   []*MusicGameUgcPlayBin         `protobuf:"bytes,4,rep,name=music_game_ugc_play_bin,json=musicGameUgcPlayBin,proto3" json:"music_game_ugc_play_bin,omitempty"`
	IsFinishAllCondLevel  bool                           `protobuf:"varint,5,opt,name=is_finish_all_cond_level,json=isFinishAllCondLevel,proto3" json:"is_finish_all_cond_level,omitempty"`
	CurTransNo            uint32                         `protobuf:"varint,6,opt,name=cur_trans_no,json=curTransNo,proto3" json:"cur_trans_no,omitempty"`
}

func (x *MusicGameScheduleBin) Reset() {
	*x = MusicGameScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusicGameScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicGameScheduleBin) ProtoMessage() {}

func (x *MusicGameScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicGameScheduleBin.ProtoReflect.Descriptor instead.
func (*MusicGameScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{179}
}

func (x *MusicGameScheduleBin) GetMusicGameRecordMap() map[uint32]*MusicGameRecordBin {
	if x != nil {
		return x.MusicGameRecordMap
	}
	return nil
}

func (x *MusicGameScheduleBin) GetMusicGameUgcSaveBin() []*MusicGameUgcSaveBin {
	if x != nil {
		return x.MusicGameUgcSaveBin
	}
	return nil
}

func (x *MusicGameScheduleBin) GetMusicGameUgcSearchBin() []*MusicGameUgcSearchBin {
	if x != nil {
		return x.MusicGameUgcSearchBin
	}
	return nil
}

func (x *MusicGameScheduleBin) GetMusicGameUgcPlayBin() []*MusicGameUgcPlayBin {
	if x != nil {
		return x.MusicGameUgcPlayBin
	}
	return nil
}

func (x *MusicGameScheduleBin) GetIsFinishAllCondLevel() bool {
	if x != nil {
		return x.IsFinishAllCondLevel
	}
	return false
}

func (x *MusicGameScheduleBin) GetCurTransNo() uint32 {
	if x != nil {
		return x.CurTransNo
	}
	return 0
}

type RoguelikeShikigamiBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level uint32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *RoguelikeShikigamiBin) Reset() {
	*x = RoguelikeShikigamiBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeShikigamiBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeShikigamiBin) ProtoMessage() {}

func (x *RoguelikeShikigamiBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeShikigamiBin.ProtoReflect.Descriptor instead.
func (*RoguelikeShikigamiBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{180}
}

func (x *RoguelikeShikigamiBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoguelikeShikigamiBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type RoguelikeDungeonRuneBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuneId         uint32 `protobuf:"varint,1,opt,name=rune_id,json=runeId,proto3" json:"rune_id,omitempty"`
	AvailableCount uint32 `protobuf:"varint,2,opt,name=available_count,json=availableCount,proto3" json:"available_count,omitempty"`
	MaxCount       uint32 `protobuf:"varint,3,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
}

func (x *RoguelikeDungeonRuneBin) Reset() {
	*x = RoguelikeDungeonRuneBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeDungeonRuneBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeDungeonRuneBin) ProtoMessage() {}

func (x *RoguelikeDungeonRuneBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeDungeonRuneBin.ProtoReflect.Descriptor instead.
func (*RoguelikeDungeonRuneBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{181}
}

func (x *RoguelikeDungeonRuneBin) GetRuneId() uint32 {
	if x != nil {
		return x.RuneId
	}
	return 0
}

func (x *RoguelikeDungeonRuneBin) GetAvailableCount() uint32 {
	if x != nil {
		return x.AvailableCount
	}
	return 0
}

func (x *RoguelikeDungeonRuneBin) GetMaxCount() uint32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

type RoguelikeDungeonCardBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	Count  uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RoguelikeDungeonCardBin) Reset() {
	*x = RoguelikeDungeonCardBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeDungeonCardBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeDungeonCardBin) ProtoMessage() {}

func (x *RoguelikeDungeonCardBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeDungeonCardBin.ProtoReflect.Descriptor instead.
func (*RoguelikeDungeonCardBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{182}
}

func (x *RoguelikeDungeonCardBin) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *RoguelikeDungeonCardBin) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RoguelikeDungeonCurseBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurseId uint32 `protobuf:"varint,1,opt,name=curse_id,json=curseId,proto3" json:"curse_id,omitempty"`
	Count   uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RoguelikeDungeonCurseBin) Reset() {
	*x = RoguelikeDungeonCurseBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeDungeonCurseBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeDungeonCurseBin) ProtoMessage() {}

func (x *RoguelikeDungeonCurseBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeDungeonCurseBin.ProtoReflect.Descriptor instead.
func (*RoguelikeDungeonCurseBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{183}
}

func (x *RoguelikeDungeonCurseBin) GetCurseId() uint32 {
	if x != nil {
		return x.CurseId
	}
	return 0
}

func (x *RoguelikeDungeonCurseBin) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RoguelikeDungeonDynamicSGVBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RoguelikeDungeonDynamicSGVBin) Reset() {
	*x = RoguelikeDungeonDynamicSGVBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeDungeonDynamicSGVBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeDungeonDynamicSGVBin) ProtoMessage() {}

func (x *RoguelikeDungeonDynamicSGVBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeDungeonDynamicSGVBin.ProtoReflect.Descriptor instead.
func (*RoguelikeDungeonDynamicSGVBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{184}
}

func (x *RoguelikeDungeonDynamicSGVBin) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RoguelikeDungeonDynamicSGVBin) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type RoguelikeMiscBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurDungeonLevel          uint32                           `protobuf:"varint,1,opt,name=cur_dungeon_level,json=curDungeonLevel,proto3" json:"cur_dungeon_level,omitempty"`
	UseRuneList              []*RoguelikeDungeonRuneBin       `protobuf:"bytes,2,rep,name=use_rune_list,json=useRuneList,proto3" json:"use_rune_list,omitempty"`
	SelectedCardList         []*RoguelikeDungeonCardBin       `protobuf:"bytes,3,rep,name=selected_card_list,json=selectedCardList,proto3" json:"selected_card_list,omitempty"`
	OptionalCardList         []uint32                         `protobuf:"varint,4,rep,packed,name=optional_card_list,json=optionalCardList,proto3" json:"optional_card_list,omitempty"`
	OptionalCardDepotId      uint32                           `protobuf:"varint,5,opt,name=optional_card_depot_id,json=optionalCardDepotId,proto3" json:"optional_card_depot_id,omitempty"`
	CurseList                []*RoguelikeDungeonCurseBin      `protobuf:"bytes,6,rep,name=curse_list,json=curseList,proto3" json:"curse_list,omitempty"`
	DynamicSgvList           []*RoguelikeDungeonDynamicSGVBin `protobuf:"bytes,7,rep,name=dynamic_sgv_list,json=dynamicSgvList,proto3" json:"dynamic_sgv_list,omitempty"`
	GachaCellList            []uint32                         `protobuf:"varint,8,rep,packed,name=gacha_cell_list,json=gachaCellList,proto3" json:"gacha_cell_list,omitempty"`
	IsOptionalCardCanRefresh bool                             `protobuf:"varint,9,opt,name=is_optional_card_can_refresh,json=isOptionalCardCanRefresh,proto3" json:"is_optional_card_can_refresh,omitempty"`
	CardCellId               uint32                           `protobuf:"varint,10,opt,name=card_cell_id,json=cardCellId,proto3" json:"card_cell_id,omitempty"`
	NohealGuidList           []uint64                         `protobuf:"varint,11,rep,packed,name=noheal_guid_list,json=nohealGuidList,proto3" json:"noheal_guid_list,omitempty"`
	CurRandCount             uint32                           `protobuf:"varint,12,opt,name=cur_rand_count,json=curRandCount,proto3" json:"cur_rand_count,omitempty"`
	ViewedCardList           []uint32                         `protobuf:"varint,13,rep,packed,name=viewed_card_list,json=viewedCardList,proto3" json:"viewed_card_list,omitempty"`
	ViewedCurseList          []uint32                         `protobuf:"varint,14,rep,packed,name=viewed_curse_list,json=viewedCurseList,proto3" json:"viewed_curse_list,omitempty"`
	AddTalentGuidList        []uint64                         `protobuf:"varint,15,rep,packed,name=add_talent_guid_list,json=addTalentGuidList,proto3" json:"add_talent_guid_list,omitempty"`
	ChosenCardTypeCountMap   map[uint32]uint32                `protobuf:"bytes,16,rep,name=chosen_card_type_count_map,json=chosenCardTypeCountMap,proto3" json:"chosen_card_type_count_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RefreshCount             uint32                           `protobuf:"varint,17,opt,name=refresh_count,json=refreshCount,proto3" json:"refresh_count,omitempty"`
	UseRefreshFreeCount      uint32                           `protobuf:"varint,18,opt,name=use_refresh_free_count,json=useRefreshFreeCount,proto3" json:"use_refresh_free_count,omitempty"`
}

func (x *RoguelikeMiscBin) Reset() {
	*x = RoguelikeMiscBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeMiscBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeMiscBin) ProtoMessage() {}

func (x *RoguelikeMiscBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeMiscBin.ProtoReflect.Descriptor instead.
func (*RoguelikeMiscBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{185}
}

func (x *RoguelikeMiscBin) GetCurDungeonLevel() uint32 {
	if x != nil {
		return x.CurDungeonLevel
	}
	return 0
}

func (x *RoguelikeMiscBin) GetUseRuneList() []*RoguelikeDungeonRuneBin {
	if x != nil {
		return x.UseRuneList
	}
	return nil
}

func (x *RoguelikeMiscBin) GetSelectedCardList() []*RoguelikeDungeonCardBin {
	if x != nil {
		return x.SelectedCardList
	}
	return nil
}

func (x *RoguelikeMiscBin) GetOptionalCardList() []uint32 {
	if x != nil {
		return x.OptionalCardList
	}
	return nil
}

func (x *RoguelikeMiscBin) GetOptionalCardDepotId() uint32 {
	if x != nil {
		return x.OptionalCardDepotId
	}
	return 0
}

func (x *RoguelikeMiscBin) GetCurseList() []*RoguelikeDungeonCurseBin {
	if x != nil {
		return x.CurseList
	}
	return nil
}

func (x *RoguelikeMiscBin) GetDynamicSgvList() []*RoguelikeDungeonDynamicSGVBin {
	if x != nil {
		return x.DynamicSgvList
	}
	return nil
}

func (x *RoguelikeMiscBin) GetGachaCellList() []uint32 {
	if x != nil {
		return x.GachaCellList
	}
	return nil
}

func (x *RoguelikeMiscBin) GetIsOptionalCardCanRefresh() bool {
	if x != nil {
		return x.IsOptionalCardCanRefresh
	}
	return false
}

func (x *RoguelikeMiscBin) GetCardCellId() uint32 {
	if x != nil {
		return x.CardCellId
	}
	return 0
}

func (x *RoguelikeMiscBin) GetNohealGuidList() []uint64 {
	if x != nil {
		return x.NohealGuidList
	}
	return nil
}

func (x *RoguelikeMiscBin) GetCurRandCount() uint32 {
	if x != nil {
		return x.CurRandCount
	}
	return 0
}

func (x *RoguelikeMiscBin) GetViewedCardList() []uint32 {
	if x != nil {
		return x.ViewedCardList
	}
	return nil
}

func (x *RoguelikeMiscBin) GetViewedCurseList() []uint32 {
	if x != nil {
		return x.ViewedCurseList
	}
	return nil
}

func (x *RoguelikeMiscBin) GetAddTalentGuidList() []uint64 {
	if x != nil {
		return x.AddTalentGuidList
	}
	return nil
}

func (x *RoguelikeMiscBin) GetChosenCardTypeCountMap() map[uint32]uint32 {
	if x != nil {
		return x.ChosenCardTypeCountMap
	}
	return nil
}

func (x *RoguelikeMiscBin) GetRefreshCount() uint32 {
	if x != nil {
		return x.RefreshCount
	}
	return 0
}

func (x *RoguelikeMiscBin) GetUseRefreshFreeCount() uint32 {
	if x != nil {
		return x.UseRefreshFreeCount
	}
	return 0
}

type RogueTeamBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnstageAvatarGuidList   []uint64 `protobuf:"varint,1,rep,packed,name=onstage_avatar_guid_list,json=onstageAvatarGuidList,proto3" json:"onstage_avatar_guid_list,omitempty"`
	BackstageAvatarGuidList []uint64 `protobuf:"varint,2,rep,packed,name=backstage_avatar_guid_list,json=backstageAvatarGuidList,proto3" json:"backstage_avatar_guid_list,omitempty"`
}

func (x *RogueTeamBin) Reset() {
	*x = RogueTeamBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueTeamBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueTeamBin) ProtoMessage() {}

func (x *RogueTeamBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueTeamBin.ProtoReflect.Descriptor instead.
func (*RogueTeamBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{186}
}

func (x *RogueTeamBin) GetOnstageAvatarGuidList() []uint64 {
	if x != nil {
		return x.OnstageAvatarGuidList
	}
	return nil
}

func (x *RogueTeamBin) GetBackstageAvatarGuidList() []uint64 {
	if x != nil {
		return x.BackstageAvatarGuidList
	}
	return nil
}

type RogueCellBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId                 uint32            `protobuf:"varint,1,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	State                  uint32            `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Type                   uint32            `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	DungeonId              uint32            `protobuf:"varint,4,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	DiffMonsterPoolMap     map[uint32]uint32 `protobuf:"bytes,5,rep,name=diff_monster_pool_map,json=diffMonsterPoolMap,proto3" json:"diff_monster_pool_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GuardPointConfigIdList []uint32          `protobuf:"varint,6,rep,packed,name=guard_point_config_id_list,json=guardPointConfigIdList,proto3" json:"guard_point_config_id_list,omitempty"`
}

func (x *RogueCellBin) Reset() {
	*x = RogueCellBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueCellBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueCellBin) ProtoMessage() {}

func (x *RogueCellBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueCellBin.ProtoReflect.Descriptor instead.
func (*RogueCellBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{187}
}

func (x *RogueCellBin) GetCellId() uint32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

func (x *RogueCellBin) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *RogueCellBin) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RogueCellBin) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *RogueCellBin) GetDiffMonsterPoolMap() map[uint32]uint32 {
	if x != nil {
		return x.DiffMonsterPoolMap
	}
	return nil
}

func (x *RogueCellBin) GetGuardPointConfigIdList() []uint32 {
	if x != nil {
		return x.GuardPointConfigIdList
	}
	return nil
}

type RogueGadgetPointBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupPointPair *Uint32PairBin `protobuf:"bytes,1,opt,name=group_point_pair,json=groupPointPair,proto3" json:"group_point_pair,omitempty"`
	GadgetId       uint32         `protobuf:"varint,2,opt,name=gadget_id,json=gadgetId,proto3" json:"gadget_id,omitempty"`
}

func (x *RogueGadgetPointBin) Reset() {
	*x = RogueGadgetPointBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueGadgetPointBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueGadgetPointBin) ProtoMessage() {}

func (x *RogueGadgetPointBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueGadgetPointBin.ProtoReflect.Descriptor instead.
func (*RogueGadgetPointBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{188}
}

func (x *RogueGadgetPointBin) GetGroupPointPair() *Uint32PairBin {
	if x != nil {
		return x.GroupPointPair
	}
	return nil
}

func (x *RogueGadgetPointBin) GetGadgetId() uint32 {
	if x != nil {
		return x.GadgetId
	}
	return 0
}

type RogueDungeonBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid                    bool                     `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	TeamBin                    *RogueTeamBin            `protobuf:"bytes,2,opt,name=team_bin,json=teamBin,proto3" json:"team_bin,omitempty"`
	StageId                    uint32                   `protobuf:"varint,3,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	CurLevelIndex              uint32                   `protobuf:"varint,4,opt,name=cur_level_index,json=curLevelIndex,proto3" json:"cur_level_index,omitempty"`
	LastPlayerPos              *VectorBin               `protobuf:"bytes,5,opt,name=last_player_pos,json=lastPlayerPos,proto3" json:"last_player_pos,omitempty"`
	LastPlayerRot              *VectorBin               `protobuf:"bytes,6,opt,name=last_player_rot,json=lastPlayerRot,proto3" json:"last_player_rot,omitempty"`
	CurCellId                  uint32                   `protobuf:"varint,7,opt,name=cur_cell_id,json=curCellId,proto3" json:"cur_cell_id,omitempty"`
	RogueCellBinMap            map[uint32]*RogueCellBin `protobuf:"bytes,8,rep,name=rogue_cell_bin_map,json=rogueCellBinMap,proto3" json:"rogue_cell_bin_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BrakeagesList              []*Uint32PairBin         `protobuf:"bytes,9,rep,name=brakeages_list,json=brakeagesList,proto3" json:"brakeages_list,omitempty"`
	TrapList                   []*Uint32PairBin         `protobuf:"bytes,10,rep,name=trap_list,json=trapList,proto3" json:"trap_list,omitempty"`
	BlastBucketList            []*Uint32PairBin         `protobuf:"bytes,11,rep,name=blast_bucket_list,json=blastBucketList,proto3" json:"blast_bucket_list,omitempty"`
	DungeonId                  uint32                   `protobuf:"varint,12,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	IsTempLeave                bool                     `protobuf:"varint,13,opt,name=is_temp_leave,json=isTempLeave,proto3" json:"is_temp_leave,omitempty"`
	DungeonWeightConfigId      uint32                   `protobuf:"varint,14,opt,name=dungeon_weight_config_id,json=dungeonWeightConfigId,proto3" json:"dungeon_weight_config_id,omitempty"`
	ExploredCellList           []uint32                 `protobuf:"varint,15,rep,packed,name=explored_cell_list,json=exploredCellList,proto3" json:"explored_cell_list,omitempty"`
	BrakeageGroupGadgetBinList []*RogueGadgetPointBin   `protobuf:"bytes,16,rep,name=brakeage_group_gadget_bin_list,json=brakeageGroupGadgetBinList,proto3" json:"brakeage_group_gadget_bin_list,omitempty"`
	TrapGroupGadgetBinList     []*RogueGadgetPointBin   `protobuf:"bytes,17,rep,name=trap_group_gadget_bin_list,json=trapGroupGadgetBinList,proto3" json:"trap_group_gadget_bin_list,omitempty"`
	ByobuGroupGadgetBinList    []*RogueGadgetPointBin   `protobuf:"bytes,18,rep,name=byobu_group_gadget_bin_list,json=byobuGroupGadgetBinList,proto3" json:"byobu_group_gadget_bin_list,omitempty"`
	BallGroupGadgetBinList     []*RogueGadgetPointBin   `protobuf:"bytes,19,rep,name=ball_group_gadget_bin_list,json=ballGroupGadgetBinList,proto3" json:"ball_group_gadget_bin_list,omitempty"`
	IsBanSpring                bool                     `protobuf:"varint,20,opt,name=is_ban_spring,json=isBanSpring,proto3" json:"is_ban_spring,omitempty"`
}

func (x *RogueDungeonBin) Reset() {
	*x = RogueDungeonBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueDungeonBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueDungeonBin) ProtoMessage() {}

func (x *RogueDungeonBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueDungeonBin.ProtoReflect.Descriptor instead.
func (*RogueDungeonBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{189}
}

func (x *RogueDungeonBin) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *RogueDungeonBin) GetTeamBin() *RogueTeamBin {
	if x != nil {
		return x.TeamBin
	}
	return nil
}

func (x *RogueDungeonBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *RogueDungeonBin) GetCurLevelIndex() uint32 {
	if x != nil {
		return x.CurLevelIndex
	}
	return 0
}

func (x *RogueDungeonBin) GetLastPlayerPos() *VectorBin {
	if x != nil {
		return x.LastPlayerPos
	}
	return nil
}

func (x *RogueDungeonBin) GetLastPlayerRot() *VectorBin {
	if x != nil {
		return x.LastPlayerRot
	}
	return nil
}

func (x *RogueDungeonBin) GetCurCellId() uint32 {
	if x != nil {
		return x.CurCellId
	}
	return 0
}

func (x *RogueDungeonBin) GetRogueCellBinMap() map[uint32]*RogueCellBin {
	if x != nil {
		return x.RogueCellBinMap
	}
	return nil
}

func (x *RogueDungeonBin) GetBrakeagesList() []*Uint32PairBin {
	if x != nil {
		return x.BrakeagesList
	}
	return nil
}

func (x *RogueDungeonBin) GetTrapList() []*Uint32PairBin {
	if x != nil {
		return x.TrapList
	}
	return nil
}

func (x *RogueDungeonBin) GetBlastBucketList() []*Uint32PairBin {
	if x != nil {
		return x.BlastBucketList
	}
	return nil
}

func (x *RogueDungeonBin) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *RogueDungeonBin) GetIsTempLeave() bool {
	if x != nil {
		return x.IsTempLeave
	}
	return false
}

func (x *RogueDungeonBin) GetDungeonWeightConfigId() uint32 {
	if x != nil {
		return x.DungeonWeightConfigId
	}
	return 0
}

func (x *RogueDungeonBin) GetExploredCellList() []uint32 {
	if x != nil {
		return x.ExploredCellList
	}
	return nil
}

func (x *RogueDungeonBin) GetBrakeageGroupGadgetBinList() []*RogueGadgetPointBin {
	if x != nil {
		return x.BrakeageGroupGadgetBinList
	}
	return nil
}

func (x *RogueDungeonBin) GetTrapGroupGadgetBinList() []*RogueGadgetPointBin {
	if x != nil {
		return x.TrapGroupGadgetBinList
	}
	return nil
}

func (x *RogueDungeonBin) GetByobuGroupGadgetBinList() []*RogueGadgetPointBin {
	if x != nil {
		return x.ByobuGroupGadgetBinList
	}
	return nil
}

func (x *RogueDungeonBin) GetBallGroupGadgetBinList() []*RogueGadgetPointBin {
	if x != nil {
		return x.BallGroupGadgetBinList
	}
	return nil
}

func (x *RogueDungeonBin) GetIsBanSpring() bool {
	if x != nil {
		return x.IsBanSpring
	}
	return false
}

type RogueFinishChallengeBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellNum uint32 `protobuf:"varint,1,opt,name=cell_num,json=cellNum,proto3" json:"cell_num,omitempty"`
	CoinB   uint32 `protobuf:"varint,2,opt,name=coin_b,json=coinB,proto3" json:"coin_b,omitempty"`
	CoinC   uint32 `protobuf:"varint,3,opt,name=coin_c,json=coinC,proto3" json:"coin_c,omitempty"`
}

func (x *RogueFinishChallengeBin) Reset() {
	*x = RogueFinishChallengeBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueFinishChallengeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueFinishChallengeBin) ProtoMessage() {}

func (x *RogueFinishChallengeBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueFinishChallengeBin.ProtoReflect.Descriptor instead.
func (*RogueFinishChallengeBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{190}
}

func (x *RogueFinishChallengeBin) GetCellNum() uint32 {
	if x != nil {
		return x.CellNum
	}
	return 0
}

func (x *RogueFinishChallengeBin) GetCoinB() uint32 {
	if x != nil {
		return x.CoinB
	}
	return 0
}

func (x *RogueFinishChallengeBin) GetCoinC() uint32 {
	if x != nil {
		return x.CoinC
	}
	return 0
}

type RogueStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId                    uint32                              `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	CoinCNum                   uint32                              `protobuf:"varint,2,opt,name=coin_c_num,json=coinCNum,proto3" json:"coin_c_num,omitempty"`
	MaxPassedLevel             uint32                              `protobuf:"varint,3,opt,name=max_passed_level,json=maxPassedLevel,proto3" json:"max_passed_level,omitempty"`
	IsOpen                     bool                                `protobuf:"varint,4,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	IsInCombat                 bool                                `protobuf:"varint,5,opt,name=is_in_combat,json=isInCombat,proto3" json:"is_in_combat,omitempty"`
	IsPassed                   bool                                `protobuf:"varint,6,opt,name=is_passed,json=isPassed,proto3" json:"is_passed,omitempty"`
	IsTakenReward              bool                                `protobuf:"varint,7,opt,name=is_taken_reward,json=isTakenReward,proto3" json:"is_taken_reward,omitempty"`
	IsEnteringNextLevel        bool                                `protobuf:"varint,8,opt,name=is_entering_next_level,json=isEnteringNextLevel,proto3" json:"is_entering_next_level,omitempty"`
	IsExplored                 bool                                `protobuf:"varint,9,opt,name=is_explored,json=isExplored,proto3" json:"is_explored,omitempty"`
	CachedCoinBNum             uint32                              `protobuf:"varint,10,opt,name=cached_coin_b_num,json=cachedCoinBNum,proto3" json:"cached_coin_b_num,omitempty"`
	CachedCoinCNum             uint32                              `protobuf:"varint,11,opt,name=cached_coin_c_num,json=cachedCoinCNum,proto3" json:"cached_coin_c_num,omitempty"`
	DeadGadgetCountList        []*Uint32PairBin                    `protobuf:"bytes,12,rep,name=dead_gadget_count_list,json=deadGadgetCountList,proto3" json:"dead_gadget_count_list,omitempty"`
	KillMonsterCount           uint32                              `protobuf:"varint,13,opt,name=kill_monster_count,json=killMonsterCount,proto3" json:"kill_monster_count,omitempty"`
	AvatarElementCount         uint32                              `protobuf:"varint,14,opt,name=avatar_element_count,json=avatarElementCount,proto3" json:"avatar_element_count,omitempty"`
	AvatarCount                uint32                              `protobuf:"varint,15,opt,name=avatar_count,json=avatarCount,proto3" json:"avatar_count,omitempty"`
	IsUsedSpring               bool                                `protobuf:"varint,16,opt,name=is_used_spring,json=isUsedSpring,proto3" json:"is_used_spring,omitempty"`
	LevelExploreCellCountMap   map[uint32]uint32                   `protobuf:"bytes,17,rep,name=level_explore_cell_count_map,json=levelExploreCellCountMap,proto3" json:"level_explore_cell_count_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IsAvatarDead               bool                                `protobuf:"varint,18,opt,name=is_avatar_dead,json=isAvatarDead,proto3" json:"is_avatar_dead,omitempty"`
	LevelFinishAllChallengeMap map[uint32]bool                     `protobuf:"bytes,19,rep,name=level_finish_all_challenge_map,json=levelFinishAllChallengeMap,proto3" json:"level_finish_all_challenge_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CurLevelIndex              uint32                              `protobuf:"varint,20,opt,name=cur_level_index,json=curLevelIndex,proto3" json:"cur_level_index,omitempty"`
	FinishChallengeBinMap      map[uint32]*RogueFinishChallengeBin `protobuf:"bytes,21,rep,name=finish_challenge_bin_map,json=finishChallengeBinMap,proto3" json:"finish_challenge_bin_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Transaction                string                              `protobuf:"bytes,22,opt,name=transaction,proto3" json:"transaction,omitempty"`
	LevelTimeCostMap           map[uint32]uint32                   `protobuf:"bytes,23,rep,name=level_time_cost_map,json=levelTimeCostMap,proto3" json:"level_time_cost_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ExploredCellTypeMap        map[uint32]uint32                   `protobuf:"bytes,24,rep,name=explored_cell_type_map,json=exploredCellTypeMap,proto3" json:"explored_cell_type_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	HasTempLeaved              bool                                `protobuf:"varint,25,opt,name=has_temp_leaved,json=hasTempLeaved,proto3" json:"has_temp_leaved,omitempty"`
}

func (x *RogueStageBin) Reset() {
	*x = RogueStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueStageBin) ProtoMessage() {}

func (x *RogueStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueStageBin.ProtoReflect.Descriptor instead.
func (*RogueStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{191}
}

func (x *RogueStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *RogueStageBin) GetCoinCNum() uint32 {
	if x != nil {
		return x.CoinCNum
	}
	return 0
}

func (x *RogueStageBin) GetMaxPassedLevel() uint32 {
	if x != nil {
		return x.MaxPassedLevel
	}
	return 0
}

func (x *RogueStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *RogueStageBin) GetIsInCombat() bool {
	if x != nil {
		return x.IsInCombat
	}
	return false
}

func (x *RogueStageBin) GetIsPassed() bool {
	if x != nil {
		return x.IsPassed
	}
	return false
}

func (x *RogueStageBin) GetIsTakenReward() bool {
	if x != nil {
		return x.IsTakenReward
	}
	return false
}

func (x *RogueStageBin) GetIsEnteringNextLevel() bool {
	if x != nil {
		return x.IsEnteringNextLevel
	}
	return false
}

func (x *RogueStageBin) GetIsExplored() bool {
	if x != nil {
		return x.IsExplored
	}
	return false
}

func (x *RogueStageBin) GetCachedCoinBNum() uint32 {
	if x != nil {
		return x.CachedCoinBNum
	}
	return 0
}

func (x *RogueStageBin) GetCachedCoinCNum() uint32 {
	if x != nil {
		return x.CachedCoinCNum
	}
	return 0
}

func (x *RogueStageBin) GetDeadGadgetCountList() []*Uint32PairBin {
	if x != nil {
		return x.DeadGadgetCountList
	}
	return nil
}

func (x *RogueStageBin) GetKillMonsterCount() uint32 {
	if x != nil {
		return x.KillMonsterCount
	}
	return 0
}

func (x *RogueStageBin) GetAvatarElementCount() uint32 {
	if x != nil {
		return x.AvatarElementCount
	}
	return 0
}

func (x *RogueStageBin) GetAvatarCount() uint32 {
	if x != nil {
		return x.AvatarCount
	}
	return 0
}

func (x *RogueStageBin) GetIsUsedSpring() bool {
	if x != nil {
		return x.IsUsedSpring
	}
	return false
}

func (x *RogueStageBin) GetLevelExploreCellCountMap() map[uint32]uint32 {
	if x != nil {
		return x.LevelExploreCellCountMap
	}
	return nil
}

func (x *RogueStageBin) GetIsAvatarDead() bool {
	if x != nil {
		return x.IsAvatarDead
	}
	return false
}

func (x *RogueStageBin) GetLevelFinishAllChallengeMap() map[uint32]bool {
	if x != nil {
		return x.LevelFinishAllChallengeMap
	}
	return nil
}

func (x *RogueStageBin) GetCurLevelIndex() uint32 {
	if x != nil {
		return x.CurLevelIndex
	}
	return 0
}

func (x *RogueStageBin) GetFinishChallengeBinMap() map[uint32]*RogueFinishChallengeBin {
	if x != nil {
		return x.FinishChallengeBinMap
	}
	return nil
}

func (x *RogueStageBin) GetTransaction() string {
	if x != nil {
		return x.Transaction
	}
	return ""
}

func (x *RogueStageBin) GetLevelTimeCostMap() map[uint32]uint32 {
	if x != nil {
		return x.LevelTimeCostMap
	}
	return nil
}

func (x *RogueStageBin) GetExploredCellTypeMap() map[uint32]uint32 {
	if x != nil {
		return x.ExploredCellTypeMap
	}
	return nil
}

func (x *RogueStageBin) GetHasTempLeaved() bool {
	if x != nil {
		return x.HasTempLeaved
	}
	return false
}

type RoguelikeDungeonScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuneList          []uint32                 `protobuf:"varint,1,rep,packed,name=rune_list,json=runeList,proto3" json:"rune_list,omitempty"`
	ShikigamiList     []*RoguelikeShikigamiBin `protobuf:"bytes,2,rep,name=shikigami_list,json=shikigamiList,proto3" json:"shikigami_list,omitempty"`
	CoinA             uint32                   `protobuf:"varint,3,opt,name=coin_a,json=coinA,proto3" json:"coin_a,omitempty"`
	CoinB             uint32                   `protobuf:"varint,4,opt,name=coin_b,json=coinB,proto3" json:"coin_b,omitempty"`
	CoinC             uint32                   `protobuf:"varint,5,opt,name=coin_c,json=coinC,proto3" json:"coin_c,omitempty"`
	EquippedRuneList  []uint32                 `protobuf:"varint,6,rep,packed,name=equipped_rune_list,json=equippedRuneList,proto3" json:"equipped_rune_list,omitempty"`
	MiscBin           *RoguelikeMiscBin        `protobuf:"bytes,7,opt,name=misc_bin,json=miscBin,proto3" json:"misc_bin,omitempty"`
	StageBinList      []*RogueStageBin         `protobuf:"bytes,8,rep,name=stage_bin_list,json=stageBinList,proto3" json:"stage_bin_list,omitempty"`
	DungeonRuntimeBin *RogueDungeonBin         `protobuf:"bytes,9,opt,name=dungeon_runtime_bin,json=dungeonRuntimeBin,proto3" json:"dungeon_runtime_bin,omitempty"`
	IsContentClosed   bool                     `protobuf:"varint,10,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	InitWorldLevel    uint32                   `protobuf:"varint,11,opt,name=init_world_level,json=initWorldLevel,proto3" json:"init_world_level,omitempty"`
	TransNoCount      uint64                   `protobuf:"varint,12,opt,name=trans_no_count,json=transNoCount,proto3" json:"trans_no_count,omitempty"`
}

func (x *RoguelikeDungeonScheduleBin) Reset() {
	*x = RoguelikeDungeonScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeDungeonScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeDungeonScheduleBin) ProtoMessage() {}

func (x *RoguelikeDungeonScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeDungeonScheduleBin.ProtoReflect.Descriptor instead.
func (*RoguelikeDungeonScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{192}
}

func (x *RoguelikeDungeonScheduleBin) GetRuneList() []uint32 {
	if x != nil {
		return x.RuneList
	}
	return nil
}

func (x *RoguelikeDungeonScheduleBin) GetShikigamiList() []*RoguelikeShikigamiBin {
	if x != nil {
		return x.ShikigamiList
	}
	return nil
}

func (x *RoguelikeDungeonScheduleBin) GetCoinA() uint32 {
	if x != nil {
		return x.CoinA
	}
	return 0
}

func (x *RoguelikeDungeonScheduleBin) GetCoinB() uint32 {
	if x != nil {
		return x.CoinB
	}
	return 0
}

func (x *RoguelikeDungeonScheduleBin) GetCoinC() uint32 {
	if x != nil {
		return x.CoinC
	}
	return 0
}

func (x *RoguelikeDungeonScheduleBin) GetEquippedRuneList() []uint32 {
	if x != nil {
		return x.EquippedRuneList
	}
	return nil
}

func (x *RoguelikeDungeonScheduleBin) GetMiscBin() *RoguelikeMiscBin {
	if x != nil {
		return x.MiscBin
	}
	return nil
}

func (x *RoguelikeDungeonScheduleBin) GetStageBinList() []*RogueStageBin {
	if x != nil {
		return x.StageBinList
	}
	return nil
}

func (x *RoguelikeDungeonScheduleBin) GetDungeonRuntimeBin() *RogueDungeonBin {
	if x != nil {
		return x.DungeonRuntimeBin
	}
	return nil
}

func (x *RoguelikeDungeonScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *RoguelikeDungeonScheduleBin) GetInitWorldLevel() uint32 {
	if x != nil {
		return x.InitWorldLevel
	}
	return 0
}

func (x *RoguelikeDungeonScheduleBin) GetTransNoCount() uint64 {
	if x != nil {
		return x.TransNoCount
	}
	return 0
}

type WinterCampDropBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId uint32 `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	DropId   uint32 `protobuf:"varint,2,opt,name=drop_id,json=dropId,proto3" json:"drop_id,omitempty"`
}

func (x *WinterCampDropBin) Reset() {
	*x = WinterCampDropBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampDropBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampDropBin) ProtoMessage() {}

func (x *WinterCampDropBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampDropBin.ProtoReflect.Descriptor instead.
func (*WinterCampDropBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{193}
}

func (x *WinterCampDropBin) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *WinterCampDropBin) GetDropId() uint32 {
	if x != nil {
		return x.DropId
	}
	return 0
}

type WinterCampExploreBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint32               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsFinished     bool                 `protobuf:"varint,2,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	DropGroupIndex uint32               `protobuf:"varint,3,opt,name=drop_group_index,json=dropGroupIndex,proto3" json:"drop_group_index,omitempty"`
	DropRecordList []*WinterCampDropBin `protobuf:"bytes,4,rep,name=drop_record_list,json=dropRecordList,proto3" json:"drop_record_list,omitempty"`
}

func (x *WinterCampExploreBin) Reset() {
	*x = WinterCampExploreBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampExploreBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampExploreBin) ProtoMessage() {}

func (x *WinterCampExploreBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampExploreBin.ProtoReflect.Descriptor instead.
func (*WinterCampExploreBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{194}
}

func (x *WinterCampExploreBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WinterCampExploreBin) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *WinterCampExploreBin) GetDropGroupIndex() uint32 {
	if x != nil {
		return x.DropGroupIndex
	}
	return 0
}

func (x *WinterCampExploreBin) GetDropRecordList() []*WinterCampDropBin {
	if x != nil {
		return x.DropRecordList
	}
	return nil
}

type WinterCampBattleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsFinished bool   `protobuf:"varint,2,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
}

func (x *WinterCampBattleBin) Reset() {
	*x = WinterCampBattleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampBattleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampBattleBin) ProtoMessage() {}

func (x *WinterCampBattleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampBattleBin.ProtoReflect.Descriptor instead.
func (*WinterCampBattleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{195}
}

func (x *WinterCampBattleBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WinterCampBattleBin) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

type WinterCampRaceBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MaxScore uint32 `protobuf:"varint,2,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
}

func (x *WinterCampRaceBin) Reset() {
	*x = WinterCampRaceBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampRaceBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampRaceBin) ProtoMessage() {}

func (x *WinterCampRaceBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampRaceBin.ProtoReflect.Descriptor instead.
func (*WinterCampRaceBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{196}
}

func (x *WinterCampRaceBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WinterCampRaceBin) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

type WinterCampRecvItemBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         uint32          `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ItemBinList []*ItemParamBin `protobuf:"bytes,2,rep,name=item_bin_list,json=itemBinList,proto3" json:"item_bin_list,omitempty"`
}

func (x *WinterCampRecvItemBin) Reset() {
	*x = WinterCampRecvItemBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampRecvItemBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampRecvItemBin) ProtoMessage() {}

func (x *WinterCampRecvItemBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampRecvItemBin.ProtoReflect.Descriptor instead.
func (*WinterCampRecvItemBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{197}
}

func (x *WinterCampRecvItemBin) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *WinterCampRecvItemBin) GetItemBinList() []*ItemParamBin {
	if x != nil {
		return x.ItemBinList
	}
	return nil
}

type WinterCampHomeUsedItemBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleId    uint32          `protobuf:"varint,1,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	ItemBinList []*ItemParamBin `protobuf:"bytes,2,rep,name=item_bin_list,json=itemBinList,proto3" json:"item_bin_list,omitempty"`
}

func (x *WinterCampHomeUsedItemBin) Reset() {
	*x = WinterCampHomeUsedItemBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampHomeUsedItemBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampHomeUsedItemBin) ProtoMessage() {}

func (x *WinterCampHomeUsedItemBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampHomeUsedItemBin.ProtoReflect.Descriptor instead.
func (*WinterCampHomeUsedItemBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{198}
}

func (x *WinterCampHomeUsedItemBin) GetModuleId() uint32 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

func (x *WinterCampHomeUsedItemBin) GetItemBinList() []*ItemParamBin {
	if x != nil {
		return x.ItemBinList
	}
	return nil
}

type WinterCampSnowmanUsedItemBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GadgetId    uint32          `protobuf:"varint,1,opt,name=gadget_id,json=gadgetId,proto3" json:"gadget_id,omitempty"`
	ItemBinList []*ItemParamBin `protobuf:"bytes,2,rep,name=item_bin_list,json=itemBinList,proto3" json:"item_bin_list,omitempty"`
}

func (x *WinterCampSnowmanUsedItemBin) Reset() {
	*x = WinterCampSnowmanUsedItemBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampSnowmanUsedItemBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampSnowmanUsedItemBin) ProtoMessage() {}

func (x *WinterCampSnowmanUsedItemBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampSnowmanUsedItemBin.ProtoReflect.Descriptor instead.
func (*WinterCampSnowmanUsedItemBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{199}
}

func (x *WinterCampSnowmanUsedItemBin) GetGadgetId() uint32 {
	if x != nil {
		return x.GadgetId
	}
	return 0
}

func (x *WinterCampSnowmanUsedItemBin) GetItemBinList() []*ItemParamBin {
	if x != nil {
		return x.ItemBinList
	}
	return nil
}

type WinterCampScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsContentClosed          bool                            `protobuf:"varint,1,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	CoinA                    uint32                          `protobuf:"varint,2,opt,name=coin_a,json=coinA,proto3" json:"coin_a,omitempty"`
	CoinB                    uint32                          `protobuf:"varint,3,opt,name=coin_b,json=coinB,proto3" json:"coin_b,omitempty"`
	DropGenIndex             uint32                          `protobuf:"varint,4,opt,name=drop_gen_index,json=dropGenIndex,proto3" json:"drop_gen_index,omitempty"`
	ExploreBin               *WinterCampExploreBin           `protobuf:"bytes,5,opt,name=explore_bin,json=exploreBin,proto3" json:"explore_bin,omitempty"`
	BattleBin                *WinterCampBattleBin            `protobuf:"bytes,6,opt,name=battle_bin,json=battleBin,proto3" json:"battle_bin,omitempty"`
	RaceBinList              []*WinterCampRaceBin            `protobuf:"bytes,7,rep,name=race_bin_list,json=raceBinList,proto3" json:"race_bin_list,omitempty"`
	RecvItemBinList          []*WinterCampRecvItemBin        `protobuf:"bytes,8,rep,name=recv_item_bin_list,json=recvItemBinList,proto3" json:"recv_item_bin_list,omitempty"`
	WishItemIdList           []uint32                        `protobuf:"varint,9,rep,packed,name=wish_item_id_list,json=wishItemIdList,proto3" json:"wish_item_id_list,omitempty"`
	TakenExploreRewardIdList []uint32                        `protobuf:"varint,10,rep,packed,name=taken_explore_reward_id_list,json=takenExploreRewardIdList,proto3" json:"taken_explore_reward_id_list,omitempty"`
	TakenBattleRewardIdList  []uint32                        `protobuf:"varint,11,rep,packed,name=taken_battle_reward_id_list,json=takenBattleRewardIdList,proto3" json:"taken_battle_reward_id_list,omitempty"`
	IsRaceStarted            bool                            `protobuf:"varint,12,opt,name=is_race_started,json=isRaceStarted,proto3" json:"is_race_started,omitempty"`
	HomeUsedItemList         []*WinterCampHomeUsedItemBin    `protobuf:"bytes,13,rep,name=home_used_item_list,json=homeUsedItemList,proto3" json:"home_used_item_list,omitempty"`
	SnowmanUsedItemList      []*WinterCampSnowmanUsedItemBin `protobuf:"bytes,14,rep,name=snowman_used_item_list,json=snowmanUsedItemList,proto3" json:"snowman_used_item_list,omitempty"`
}

func (x *WinterCampScheduleBin) Reset() {
	*x = WinterCampScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampScheduleBin) ProtoMessage() {}

func (x *WinterCampScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampScheduleBin.ProtoReflect.Descriptor instead.
func (*WinterCampScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{200}
}

func (x *WinterCampScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *WinterCampScheduleBin) GetCoinA() uint32 {
	if x != nil {
		return x.CoinA
	}
	return 0
}

func (x *WinterCampScheduleBin) GetCoinB() uint32 {
	if x != nil {
		return x.CoinB
	}
	return 0
}

func (x *WinterCampScheduleBin) GetDropGenIndex() uint32 {
	if x != nil {
		return x.DropGenIndex
	}
	return 0
}

func (x *WinterCampScheduleBin) GetExploreBin() *WinterCampExploreBin {
	if x != nil {
		return x.ExploreBin
	}
	return nil
}

func (x *WinterCampScheduleBin) GetBattleBin() *WinterCampBattleBin {
	if x != nil {
		return x.BattleBin
	}
	return nil
}

func (x *WinterCampScheduleBin) GetRaceBinList() []*WinterCampRaceBin {
	if x != nil {
		return x.RaceBinList
	}
	return nil
}

func (x *WinterCampScheduleBin) GetRecvItemBinList() []*WinterCampRecvItemBin {
	if x != nil {
		return x.RecvItemBinList
	}
	return nil
}

func (x *WinterCampScheduleBin) GetWishItemIdList() []uint32 {
	if x != nil {
		return x.WishItemIdList
	}
	return nil
}

func (x *WinterCampScheduleBin) GetTakenExploreRewardIdList() []uint32 {
	if x != nil {
		return x.TakenExploreRewardIdList
	}
	return nil
}

func (x *WinterCampScheduleBin) GetTakenBattleRewardIdList() []uint32 {
	if x != nil {
		return x.TakenBattleRewardIdList
	}
	return nil
}

func (x *WinterCampScheduleBin) GetIsRaceStarted() bool {
	if x != nil {
		return x.IsRaceStarted
	}
	return false
}

func (x *WinterCampScheduleBin) GetHomeUsedItemList() []*WinterCampHomeUsedItemBin {
	if x != nil {
		return x.HomeUsedItemList
	}
	return nil
}

func (x *WinterCampScheduleBin) GetSnowmanUsedItemList() []*WinterCampSnowmanUsedItemBin {
	if x != nil {
		return x.SnowmanUsedItemList
	}
	return nil
}

type HachiStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId          uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen           bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	IsFinished       bool   `protobuf:"varint,3,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	DungeonPassTimes uint32 `protobuf:"varint,4,opt,name=dungeon_pass_times,json=dungeonPassTimes,proto3" json:"dungeon_pass_times,omitempty"`
}

func (x *HachiStageBin) Reset() {
	*x = HachiStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HachiStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HachiStageBin) ProtoMessage() {}

func (x *HachiStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HachiStageBin.ProtoReflect.Descriptor instead.
func (*HachiStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{201}
}

func (x *HachiStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *HachiStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *HachiStageBin) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *HachiStageBin) GetDungeonPassTimes() uint32 {
	if x != nil {
		return x.DungeonPassTimes
	}
	return 0
}

type HachiScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageBinMap            map[uint32]*HachiStageBin `protobuf:"bytes,1,rep,name=stage_bin_map,json=stageBinMap,proto3" json:"stage_bin_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsContentClosed        bool                      `protobuf:"varint,2,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	CurFinishStealStageId  uint32                    `protobuf:"varint,3,opt,name=cur_finish_steal_stage_id,json=curFinishStealStageId,proto3" json:"cur_finish_steal_stage_id,omitempty"`
	CurFinishBattleStageId uint32                    `protobuf:"varint,4,opt,name=cur_finish_battle_stage_id,json=curFinishBattleStageId,proto3" json:"cur_finish_battle_stage_id,omitempty"`
}

func (x *HachiScheduleBin) Reset() {
	*x = HachiScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HachiScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HachiScheduleBin) ProtoMessage() {}

func (x *HachiScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HachiScheduleBin.ProtoReflect.Descriptor instead.
func (*HachiScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{202}
}

func (x *HachiScheduleBin) GetStageBinMap() map[uint32]*HachiStageBin {
	if x != nil {
		return x.StageBinMap
	}
	return nil
}

func (x *HachiScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *HachiScheduleBin) GetCurFinishStealStageId() uint32 {
	if x != nil {
		return x.CurFinishStealStageId
	}
	return 0
}

func (x *HachiScheduleBin) GetCurFinishBattleStageId() uint32 {
	if x != nil {
		return x.CurFinishBattleStageId
	}
	return 0
}

type PotionLevelBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId         uint32 `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	DifficultyLevel uint32 `protobuf:"varint,2,opt,name=difficulty_level,json=difficultyLevel,proto3" json:"difficulty_level,omitempty"`
	ModeId          uint32 `protobuf:"varint,3,opt,name=mode_id,json=modeId,proto3" json:"mode_id,omitempty"`
	Score           uint32 `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *PotionLevelBin) Reset() {
	*x = PotionLevelBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotionLevelBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotionLevelBin) ProtoMessage() {}

func (x *PotionLevelBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotionLevelBin.ProtoReflect.Descriptor instead.
func (*PotionLevelBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{203}
}

func (x *PotionLevelBin) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *PotionLevelBin) GetDifficultyLevel() uint32 {
	if x != nil {
		return x.DifficultyLevel
	}
	return 0
}

func (x *PotionLevelBin) GetModeId() uint32 {
	if x != nil {
		return x.ModeId
	}
	return 0
}

func (x *PotionLevelBin) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type PotionStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId              uint32            `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen               bool              `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	ResetTimes           uint32            `protobuf:"varint,3,opt,name=reset_times,json=resetTimes,proto3" json:"reset_times,omitempty"`
	LevelBinList         []*PotionLevelBin `protobuf:"bytes,4,rep,name=level_bin_list,json=levelBinList,proto3" json:"level_bin_list,omitempty"`
	CoolDownAvatarIdList []uint32          `protobuf:"varint,5,rep,packed,name=cool_down_avatar_id_list,json=coolDownAvatarIdList,proto3" json:"cool_down_avatar_id_list,omitempty"`
	CoolDownBuffIdList   []uint32          `protobuf:"varint,6,rep,packed,name=cool_down_buff_id_list,json=coolDownBuffIdList,proto3" json:"cool_down_buff_id_list,omitempty"`
}

func (x *PotionStageBin) Reset() {
	*x = PotionStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotionStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotionStageBin) ProtoMessage() {}

func (x *PotionStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotionStageBin.ProtoReflect.Descriptor instead.
func (*PotionStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{204}
}

func (x *PotionStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *PotionStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *PotionStageBin) GetResetTimes() uint32 {
	if x != nil {
		return x.ResetTimes
	}
	return 0
}

func (x *PotionStageBin) GetLevelBinList() []*PotionLevelBin {
	if x != nil {
		return x.LevelBinList
	}
	return nil
}

func (x *PotionStageBin) GetCoolDownAvatarIdList() []uint32 {
	if x != nil {
		return x.CoolDownAvatarIdList
	}
	return nil
}

func (x *PotionStageBin) GetCoolDownBuffIdList() []uint32 {
	if x != nil {
		return x.CoolDownBuffIdList
	}
	return nil
}

type PotionScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageBinList            []*PotionStageBin `protobuf:"bytes,1,rep,name=stage_bin_list,json=stageBinList,proto3" json:"stage_bin_list,omitempty"`
	InDungeonAvatarGuidList []uint64          `protobuf:"varint,2,rep,packed,name=in_dungeon_avatar_guid_list,json=inDungeonAvatarGuidList,proto3" json:"in_dungeon_avatar_guid_list,omitempty"`
	IsFinishAnyLevel        bool              `protobuf:"varint,3,opt,name=is_finish_any_level,json=isFinishAnyLevel,proto3" json:"is_finish_any_level,omitempty"`
}

func (x *PotionScheduleBin) Reset() {
	*x = PotionScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotionScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotionScheduleBin) ProtoMessage() {}

func (x *PotionScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotionScheduleBin.ProtoReflect.Descriptor instead.
func (*PotionScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{205}
}

func (x *PotionScheduleBin) GetStageBinList() []*PotionStageBin {
	if x != nil {
		return x.StageBinList
	}
	return nil
}

func (x *PotionScheduleBin) GetInDungeonAvatarGuidList() []uint64 {
	if x != nil {
		return x.InDungeonAvatarGuidList
	}
	return nil
}

func (x *PotionScheduleBin) GetIsFinishAnyLevel() bool {
	if x != nil {
		return x.IsFinishAnyLevel
	}
	return false
}

type TanukiTravelLevelBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId  uint32 `protobuf:"varint,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	IsOpen   bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	IsFinish bool   `protobuf:"varint,3,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
}

func (x *TanukiTravelLevelBin) Reset() {
	*x = TanukiTravelLevelBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TanukiTravelLevelBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TanukiTravelLevelBin) ProtoMessage() {}

func (x *TanukiTravelLevelBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TanukiTravelLevelBin.ProtoReflect.Descriptor instead.
func (*TanukiTravelLevelBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{206}
}

func (x *TanukiTravelLevelBin) GetRouteId() uint32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

func (x *TanukiTravelLevelBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *TanukiTravelLevelBin) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

type TanukiTravelScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelBinList       []*TanukiTravelLevelBin `protobuf:"bytes,1,rep,name=level_bin_list,json=levelBinList,proto3" json:"level_bin_list,omitempty"`
	FinishedLevelIndex uint32                  `protobuf:"varint,2,opt,name=finished_level_index,json=finishedLevelIndex,proto3" json:"finished_level_index,omitempty"`
	IsContentClosed    bool                    `protobuf:"varint,3,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
}

func (x *TanukiTravelScheduleBin) Reset() {
	*x = TanukiTravelScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TanukiTravelScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TanukiTravelScheduleBin) ProtoMessage() {}

func (x *TanukiTravelScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TanukiTravelScheduleBin.ProtoReflect.Descriptor instead.
func (*TanukiTravelScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{207}
}

func (x *TanukiTravelScheduleBin) GetLevelBinList() []*TanukiTravelLevelBin {
	if x != nil {
		return x.LevelBinList
	}
	return nil
}

func (x *TanukiTravelScheduleBin) GetFinishedLevelIndex() uint32 {
	if x != nil {
		return x.FinishedLevelIndex
	}
	return 0
}

func (x *TanukiTravelScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

type SalvageBundleChallengeBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinishedBundleList []uint32 `protobuf:"varint,1,rep,packed,name=finished_bundle_list,json=finishedBundleList,proto3" json:"finished_bundle_list,omitempty"`
}

func (x *SalvageBundleChallengeBin) Reset() {
	*x = SalvageBundleChallengeBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalvageBundleChallengeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalvageBundleChallengeBin) ProtoMessage() {}

func (x *SalvageBundleChallengeBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalvageBundleChallengeBin.ProtoReflect.Descriptor instead.
func (*SalvageBundleChallengeBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{208}
}

func (x *SalvageBundleChallengeBin) GetFinishedBundleList() []uint32 {
	if x != nil {
		return x.FinishedBundleList
	}
	return nil
}

type SalvageScoreChallengeBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalvageChallengeId uint32 `protobuf:"varint,1,opt,name=salvage_challenge_id,json=salvageChallengeId,proto3" json:"salvage_challenge_id,omitempty"`
	MaxScore           uint32 `protobuf:"varint,2,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
}

func (x *SalvageScoreChallengeBin) Reset() {
	*x = SalvageScoreChallengeBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalvageScoreChallengeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalvageScoreChallengeBin) ProtoMessage() {}

func (x *SalvageScoreChallengeBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalvageScoreChallengeBin.ProtoReflect.Descriptor instead.
func (*SalvageScoreChallengeBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{209}
}

func (x *SalvageScoreChallengeBin) GetSalvageChallengeId() uint32 {
	if x != nil {
		return x.SalvageChallengeId
	}
	return 0
}

func (x *SalvageScoreChallengeBin) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

type SalvageChallengeBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeType uint32 `protobuf:"varint,1,opt,name=challenge_type,json=challengeType,proto3" json:"challenge_type,omitempty"`
	IsUnlock      bool   `protobuf:"varint,2,opt,name=is_unlock,json=isUnlock,proto3" json:"is_unlock,omitempty"`
	// Types that are assignable to ChallengeDetail:
	//
	//	*SalvageChallengeBin_BundleInfo
	//	*SalvageChallengeBin_ScoreChallengeInfo
	//	*SalvageChallengeBin_BossChallengeId
	ChallengeDetail isSalvageChallengeBin_ChallengeDetail `protobuf_oneof:"challenge_detail"`
}

func (x *SalvageChallengeBin) Reset() {
	*x = SalvageChallengeBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalvageChallengeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalvageChallengeBin) ProtoMessage() {}

func (x *SalvageChallengeBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalvageChallengeBin.ProtoReflect.Descriptor instead.
func (*SalvageChallengeBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{210}
}

func (x *SalvageChallengeBin) GetChallengeType() uint32 {
	if x != nil {
		return x.ChallengeType
	}
	return 0
}

func (x *SalvageChallengeBin) GetIsUnlock() bool {
	if x != nil {
		return x.IsUnlock
	}
	return false
}

func (m *SalvageChallengeBin) GetChallengeDetail() isSalvageChallengeBin_ChallengeDetail {
	if m != nil {
		return m.ChallengeDetail
	}
	return nil
}

func (x *SalvageChallengeBin) GetBundleInfo() *SalvageBundleChallengeBin {
	if x, ok := x.GetChallengeDetail().(*SalvageChallengeBin_BundleInfo); ok {
		return x.BundleInfo
	}
	return nil
}

func (x *SalvageChallengeBin) GetScoreChallengeInfo() *SalvageScoreChallengeBin {
	if x, ok := x.GetChallengeDetail().(*SalvageChallengeBin_ScoreChallengeInfo); ok {
		return x.ScoreChallengeInfo
	}
	return nil
}

func (x *SalvageChallengeBin) GetBossChallengeId() uint32 {
	if x, ok := x.GetChallengeDetail().(*SalvageChallengeBin_BossChallengeId); ok {
		return x.BossChallengeId
	}
	return 0
}

type isSalvageChallengeBin_ChallengeDetail interface {
	isSalvageChallengeBin_ChallengeDetail()
}

type SalvageChallengeBin_BundleInfo struct {
	BundleInfo *SalvageBundleChallengeBin `protobuf:"bytes,10,opt,name=bundle_info,json=bundleInfo,proto3,oneof"`
}

type SalvageChallengeBin_ScoreChallengeInfo struct {
	ScoreChallengeInfo *SalvageScoreChallengeBin `protobuf:"bytes,11,opt,name=score_challenge_info,json=scoreChallengeInfo,proto3,oneof"`
}

type SalvageChallengeBin_BossChallengeId struct {
	BossChallengeId uint32 `protobuf:"varint,12,opt,name=boss_challenge_id,json=bossChallengeId,proto3,oneof"`
}

func (*SalvageChallengeBin_BundleInfo) isSalvageChallengeBin_ChallengeDetail() {}

func (*SalvageChallengeBin_ScoreChallengeInfo) isSalvageChallengeBin_ChallengeDetail() {}

func (*SalvageChallengeBin_BossChallengeId) isSalvageChallengeBin_ChallengeDetail() {}

type LanternSalvageStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId          uint32                 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen           bool                   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	IsFinished       bool                   `protobuf:"varint,3,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	ChallengeBinList []*SalvageChallengeBin `protobuf:"bytes,4,rep,name=challenge_bin_list,json=challengeBinList,proto3" json:"challenge_bin_list,omitempty"`
}

func (x *LanternSalvageStageBin) Reset() {
	*x = LanternSalvageStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanternSalvageStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanternSalvageStageBin) ProtoMessage() {}

func (x *LanternSalvageStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanternSalvageStageBin.ProtoReflect.Descriptor instead.
func (*LanternSalvageStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{211}
}

func (x *LanternSalvageStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *LanternSalvageStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *LanternSalvageStageBin) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *LanternSalvageStageBin) GetChallengeBinList() []*SalvageChallengeBin {
	if x != nil {
		return x.ChallengeBinList
	}
	return nil
}

type LanternRiteProjectionLevelBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsFinish      bool   `protobuf:"varint,2,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	MinFinishTime uint32 `protobuf:"varint,3,opt,name=min_finish_time,json=minFinishTime,proto3" json:"min_finish_time,omitempty"`
	IsViewTips    bool   `protobuf:"varint,4,opt,name=is_view_tips,json=isViewTips,proto3" json:"is_view_tips,omitempty"`
}

func (x *LanternRiteProjectionLevelBin) Reset() {
	*x = LanternRiteProjectionLevelBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanternRiteProjectionLevelBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanternRiteProjectionLevelBin) ProtoMessage() {}

func (x *LanternRiteProjectionLevelBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanternRiteProjectionLevelBin.ProtoReflect.Descriptor instead.
func (*LanternRiteProjectionLevelBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{212}
}

func (x *LanternRiteProjectionLevelBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LanternRiteProjectionLevelBin) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *LanternRiteProjectionLevelBin) GetMinFinishTime() uint32 {
	if x != nil {
		return x.MinFinishTime
	}
	return 0
}

func (x *LanternRiteProjectionLevelBin) GetIsViewTips() bool {
	if x != nil {
		return x.IsViewTips
	}
	return false
}

type LanternRiteProjectionBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenStageList      []uint32                         `protobuf:"varint,2,rep,packed,name=open_stage_list,json=openStageList,proto3" json:"open_stage_list,omitempty"`
	ViewInputTipsList  []uint32                         `protobuf:"varint,3,rep,packed,name=view_input_tips_list,json=viewInputTipsList,proto3" json:"view_input_tips_list,omitempty"`
	ViewSwitchTipsList []uint32                         `protobuf:"varint,4,rep,packed,name=view_switch_tips_list,json=viewSwitchTipsList,proto3" json:"view_switch_tips_list,omitempty"`
	LevelBinList       []*LanternRiteProjectionLevelBin `protobuf:"bytes,5,rep,name=level_bin_list,json=levelBinList,proto3" json:"level_bin_list,omitempty"`
}

func (x *LanternRiteProjectionBin) Reset() {
	*x = LanternRiteProjectionBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanternRiteProjectionBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanternRiteProjectionBin) ProtoMessage() {}

func (x *LanternRiteProjectionBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanternRiteProjectionBin.ProtoReflect.Descriptor instead.
func (*LanternRiteProjectionBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{213}
}

func (x *LanternRiteProjectionBin) GetOpenStageList() []uint32 {
	if x != nil {
		return x.OpenStageList
	}
	return nil
}

func (x *LanternRiteProjectionBin) GetViewInputTipsList() []uint32 {
	if x != nil {
		return x.ViewInputTipsList
	}
	return nil
}

func (x *LanternRiteProjectionBin) GetViewSwitchTipsList() []uint32 {
	if x != nil {
		return x.ViewSwitchTipsList
	}
	return nil
}

func (x *LanternRiteProjectionBin) GetLevelBinList() []*LanternRiteProjectionLevelBin {
	if x != nil {
		return x.LevelBinList
	}
	return nil
}

type LanternRiteFireworksChallengeBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId uint32 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	BestScore   uint32 `protobuf:"varint,2,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
}

func (x *LanternRiteFireworksChallengeBin) Reset() {
	*x = LanternRiteFireworksChallengeBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanternRiteFireworksChallengeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanternRiteFireworksChallengeBin) ProtoMessage() {}

func (x *LanternRiteFireworksChallengeBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanternRiteFireworksChallengeBin.ProtoReflect.Descriptor instead.
func (*LanternRiteFireworksChallengeBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{214}
}

func (x *LanternRiteFireworksChallengeBin) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

func (x *LanternRiteFireworksChallengeBin) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

type LanternRiteFireworksStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId          uint32                              `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen           bool                                `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	ChallengeBinList []*LanternRiteFireworksChallengeBin `protobuf:"bytes,3,rep,name=challenge_bin_list,json=challengeBinList,proto3" json:"challenge_bin_list,omitempty"`
}

func (x *LanternRiteFireworksStageBin) Reset() {
	*x = LanternRiteFireworksStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanternRiteFireworksStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanternRiteFireworksStageBin) ProtoMessage() {}

func (x *LanternRiteFireworksStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanternRiteFireworksStageBin.ProtoReflect.Descriptor instead.
func (*LanternRiteFireworksStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{215}
}

func (x *LanternRiteFireworksStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *LanternRiteFireworksStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *LanternRiteFireworksStageBin) GetChallengeBinList() []*LanternRiteFireworksChallengeBin {
	if x != nil {
		return x.ChallengeBinList
	}
	return nil
}

type LanternRiteFireworksBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageBinList []*LanternRiteFireworksStageBin `protobuf:"bytes,1,rep,name=stage_bin_list,json=stageBinList,proto3" json:"stage_bin_list,omitempty"`
}

func (x *LanternRiteFireworksBin) Reset() {
	*x = LanternRiteFireworksBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanternRiteFireworksBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanternRiteFireworksBin) ProtoMessage() {}

func (x *LanternRiteFireworksBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanternRiteFireworksBin.ProtoReflect.Descriptor instead.
func (*LanternRiteFireworksBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{216}
}

func (x *LanternRiteFireworksBin) GetStageBinList() []*LanternRiteFireworksStageBin {
	if x != nil {
		return x.StageBinList
	}
	return nil
}

type LanternRiteScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinA                     uint32                    `protobuf:"varint,1,opt,name=coin_a,json=coinA,proto3" json:"coin_a,omitempty"`
	CoinB                     uint32                    `protobuf:"varint,2,opt,name=coin_b,json=coinB,proto3" json:"coin_b,omitempty"`
	CoinC                     uint32                    `protobuf:"varint,3,opt,name=coin_c,json=coinC,proto3" json:"coin_c,omitempty"`
	ProjectionBin             *LanternRiteProjectionBin `protobuf:"bytes,4,opt,name=projection_bin,json=projectionBin,proto3" json:"projection_bin,omitempty"`
	SalvageStageBinList       []*LanternSalvageStageBin `protobuf:"bytes,5,rep,name=salvage_stage_bin_list,json=salvageStageBinList,proto3" json:"salvage_stage_bin_list,omitempty"`
	IsMiniEldritchDungeonOpen bool                      `protobuf:"varint,6,opt,name=is_mini_eldritch_dungeon_open,json=isMiniEldritchDungeonOpen,proto3" json:"is_mini_eldritch_dungeon_open,omitempty"`
	IsTakenSkinReward         bool                      `protobuf:"varint,7,opt,name=is_taken_skin_reward,json=isTakenSkinReward,proto3" json:"is_taken_skin_reward,omitempty"`
	SalvageTrackingMarkMap    map[uint32]uint32         `protobuf:"bytes,8,rep,name=salvage_tracking_mark_map,json=salvageTrackingMarkMap,proto3" json:"salvage_tracking_mark_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IsContentClosed           bool                      `protobuf:"varint,9,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	FireworksBin              *LanternRiteFireworksBin  `protobuf:"bytes,10,opt,name=fireworks_bin,json=fireworksBin,proto3" json:"fireworks_bin,omitempty"`
}

func (x *LanternRiteScheduleBin) Reset() {
	*x = LanternRiteScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanternRiteScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanternRiteScheduleBin) ProtoMessage() {}

func (x *LanternRiteScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanternRiteScheduleBin.ProtoReflect.Descriptor instead.
func (*LanternRiteScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{217}
}

func (x *LanternRiteScheduleBin) GetCoinA() uint32 {
	if x != nil {
		return x.CoinA
	}
	return 0
}

func (x *LanternRiteScheduleBin) GetCoinB() uint32 {
	if x != nil {
		return x.CoinB
	}
	return 0
}

func (x *LanternRiteScheduleBin) GetCoinC() uint32 {
	if x != nil {
		return x.CoinC
	}
	return 0
}

func (x *LanternRiteScheduleBin) GetProjectionBin() *LanternRiteProjectionBin {
	if x != nil {
		return x.ProjectionBin
	}
	return nil
}

func (x *LanternRiteScheduleBin) GetSalvageStageBinList() []*LanternSalvageStageBin {
	if x != nil {
		return x.SalvageStageBinList
	}
	return nil
}

func (x *LanternRiteScheduleBin) GetIsMiniEldritchDungeonOpen() bool {
	if x != nil {
		return x.IsMiniEldritchDungeonOpen
	}
	return false
}

func (x *LanternRiteScheduleBin) GetIsTakenSkinReward() bool {
	if x != nil {
		return x.IsTakenSkinReward
	}
	return false
}

func (x *LanternRiteScheduleBin) GetSalvageTrackingMarkMap() map[uint32]uint32 {
	if x != nil {
		return x.SalvageTrackingMarkMap
	}
	return nil
}

func (x *LanternRiteScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *LanternRiteScheduleBin) GetFireworksBin() *LanternRiteFireworksBin {
	if x != nil {
		return x.FireworksBin
	}
	return nil
}

type MichiaeMatsuriStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen  bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *MichiaeMatsuriStageBin) Reset() {
	*x = MichiaeMatsuriStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MichiaeMatsuriStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MichiaeMatsuriStageBin) ProtoMessage() {}

func (x *MichiaeMatsuriStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MichiaeMatsuriStageBin.ProtoReflect.Descriptor instead.
func (*MichiaeMatsuriStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{218}
}

func (x *MichiaeMatsuriStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *MichiaeMatsuriStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type MichiaeMatsuriScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatueRefreshGroupTime          uint32                    `protobuf:"varint,1,opt,name=statue_refresh_group_time,json=statueRefreshGroupTime,proto3" json:"statue_refresh_group_time,omitempty"`
	StageBinList                    []*MichiaeMatsuriStageBin `protobuf:"bytes,2,rep,name=stage_bin_list,json=stageBinList,proto3" json:"stage_bin_list,omitempty"`
	UnlockedCrystalSkillBinList     []uint32                  `protobuf:"varint,3,rep,packed,name=unlocked_crystal_skill_bin_list,json=unlockedCrystalSkillBinList,proto3" json:"unlocked_crystal_skill_bin_list,omitempty"`
	GainCrystalExp                  uint32                    `protobuf:"varint,4,opt,name=gain_crystal_exp,json=gainCrystalExp,proto3" json:"gain_crystal_exp,omitempty"`
	FinishedChallengeGroupIdBinList []uint32                  `protobuf:"varint,5,rep,packed,name=finished_challenge_group_id_bin_list,json=finishedChallengeGroupIdBinList,proto3" json:"finished_challenge_group_id_bin_list,omitempty"`
}

func (x *MichiaeMatsuriScheduleBin) Reset() {
	*x = MichiaeMatsuriScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MichiaeMatsuriScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MichiaeMatsuriScheduleBin) ProtoMessage() {}

func (x *MichiaeMatsuriScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MichiaeMatsuriScheduleBin.ProtoReflect.Descriptor instead.
func (*MichiaeMatsuriScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{219}
}

func (x *MichiaeMatsuriScheduleBin) GetStatueRefreshGroupTime() uint32 {
	if x != nil {
		return x.StatueRefreshGroupTime
	}
	return 0
}

func (x *MichiaeMatsuriScheduleBin) GetStageBinList() []*MichiaeMatsuriStageBin {
	if x != nil {
		return x.StageBinList
	}
	return nil
}

func (x *MichiaeMatsuriScheduleBin) GetUnlockedCrystalSkillBinList() []uint32 {
	if x != nil {
		return x.UnlockedCrystalSkillBinList
	}
	return nil
}

func (x *MichiaeMatsuriScheduleBin) GetGainCrystalExp() uint32 {
	if x != nil {
		return x.GainCrystalExp
	}
	return 0
}

func (x *MichiaeMatsuriScheduleBin) GetFinishedChallengeGroupIdBinList() []uint32 {
	if x != nil {
		return x.FinishedChallengeGroupIdBinList
	}
	return nil
}

type BartenderTaskBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsFinish bool   `protobuf:"varint,2,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
}

func (x *BartenderTaskBin) Reset() {
	*x = BartenderTaskBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BartenderTaskBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BartenderTaskBin) ProtoMessage() {}

func (x *BartenderTaskBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BartenderTaskBin.ProtoReflect.Descriptor instead.
func (*BartenderTaskBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{220}
}

func (x *BartenderTaskBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BartenderTaskBin) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

type BartenderLevelBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MaxScore uint32 `protobuf:"varint,2,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	IsFinish bool   `protobuf:"varint,3,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
}

func (x *BartenderLevelBin) Reset() {
	*x = BartenderLevelBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BartenderLevelBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BartenderLevelBin) ProtoMessage() {}

func (x *BartenderLevelBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BartenderLevelBin.ProtoReflect.Descriptor instead.
func (*BartenderLevelBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{221}
}

func (x *BartenderLevelBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BartenderLevelBin) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *BartenderLevelBin) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

type BartenderScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnlockItemList      []uint32             `protobuf:"varint,1,rep,packed,name=unlock_item_list,json=unlockItemList,proto3" json:"unlock_item_list,omitempty"`
	UnlockFormulaList   []uint32             `protobuf:"varint,2,rep,packed,name=unlock_formula_list,json=unlockFormulaList,proto3" json:"unlock_formula_list,omitempty"`
	UnlockTaskList      []*BartenderTaskBin  `protobuf:"bytes,3,rep,name=unlock_task_list,json=unlockTaskList,proto3" json:"unlock_task_list,omitempty"`
	UnlockLevelList     []*BartenderLevelBin `protobuf:"bytes,4,rep,name=unlock_level_list,json=unlockLevelList,proto3" json:"unlock_level_list,omitempty"`
	IsDevelopModuleOpen bool                 `protobuf:"varint,5,opt,name=is_develop_module_open,json=isDevelopModuleOpen,proto3" json:"is_develop_module_open,omitempty"`
	TransNoCount        uint64               `protobuf:"varint,6,opt,name=trans_no_count,json=transNoCount,proto3" json:"trans_no_count,omitempty"`
	IsContentClosed     bool                 `protobuf:"varint,7,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
}

func (x *BartenderScheduleBin) Reset() {
	*x = BartenderScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BartenderScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BartenderScheduleBin) ProtoMessage() {}

func (x *BartenderScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BartenderScheduleBin.ProtoReflect.Descriptor instead.
func (*BartenderScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{222}
}

func (x *BartenderScheduleBin) GetUnlockItemList() []uint32 {
	if x != nil {
		return x.UnlockItemList
	}
	return nil
}

func (x *BartenderScheduleBin) GetUnlockFormulaList() []uint32 {
	if x != nil {
		return x.UnlockFormulaList
	}
	return nil
}

func (x *BartenderScheduleBin) GetUnlockTaskList() []*BartenderTaskBin {
	if x != nil {
		return x.UnlockTaskList
	}
	return nil
}

func (x *BartenderScheduleBin) GetUnlockLevelList() []*BartenderLevelBin {
	if x != nil {
		return x.UnlockLevelList
	}
	return nil
}

func (x *BartenderScheduleBin) GetIsDevelopModuleOpen() bool {
	if x != nil {
		return x.IsDevelopModuleOpen
	}
	return false
}

func (x *BartenderScheduleBin) GetTransNoCount() uint64 {
	if x != nil {
		return x.TransNoCount
	}
	return 0
}

func (x *BartenderScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

type IrodoriChessMapBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BestScore       uint32   `protobuf:"varint,1,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
	EquipedCardList []uint32 `protobuf:"varint,2,rep,packed,name=equiped_card_list,json=equipedCardList,proto3" json:"equiped_card_list,omitempty"`
}

func (x *IrodoriChessMapBin) Reset() {
	*x = IrodoriChessMapBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriChessMapBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriChessMapBin) ProtoMessage() {}

func (x *IrodoriChessMapBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriChessMapBin.ProtoReflect.Descriptor instead.
func (*IrodoriChessMapBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{223}
}

func (x *IrodoriChessMapBin) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

func (x *IrodoriChessMapBin) GetEquipedCardList() []uint32 {
	if x != nil {
		return x.EquipedCardList
	}
	return nil
}

type IrodoriChessLevelBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NormalMapData *IrodoriChessMapBin `protobuf:"bytes,1,opt,name=normal_map_data,json=normalMapData,proto3" json:"normal_map_data,omitempty"`
	HardMapData   *IrodoriChessMapBin `protobuf:"bytes,2,opt,name=hard_map_data,json=hardMapData,proto3" json:"hard_map_data,omitempty"`
	LevelId       uint32              `protobuf:"varint,3,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *IrodoriChessLevelBin) Reset() {
	*x = IrodoriChessLevelBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriChessLevelBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriChessLevelBin) ProtoMessage() {}

func (x *IrodoriChessLevelBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriChessLevelBin.ProtoReflect.Descriptor instead.
func (*IrodoriChessLevelBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{224}
}

func (x *IrodoriChessLevelBin) GetNormalMapData() *IrodoriChessMapBin {
	if x != nil {
		return x.NormalMapData
	}
	return nil
}

func (x *IrodoriChessLevelBin) GetHardMapData() *IrodoriChessMapBin {
	if x != nil {
		return x.HardMapData
	}
	return nil
}

func (x *IrodoriChessLevelBin) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type IrodoriChessBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen    bool                    `protobuf:"varint,1,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	LevelList []*IrodoriChessLevelBin `protobuf:"bytes,2,rep,name=level_list,json=levelList,proto3" json:"level_list,omitempty"`
}

func (x *IrodoriChessBin) Reset() {
	*x = IrodoriChessBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriChessBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriChessBin) ProtoMessage() {}

func (x *IrodoriChessBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriChessBin.ProtoReflect.Descriptor instead.
func (*IrodoriChessBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{225}
}

func (x *IrodoriChessBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *IrodoriChessBin) GetLevelList() []*IrodoriChessLevelBin {
	if x != nil {
		return x.LevelList
	}
	return nil
}

type IrodoriFlowerShelfBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GadgetId           uint32            `protobuf:"varint,1,opt,name=gadget_id,json=gadgetId,proto3" json:"gadget_id,omitempty"`
	UsedFlowerCountMap map[uint32]uint32 `protobuf:"bytes,2,rep,name=used_flower_count_map,json=usedFlowerCountMap,proto3" json:"used_flower_count_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *IrodoriFlowerShelfBin) Reset() {
	*x = IrodoriFlowerShelfBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriFlowerShelfBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriFlowerShelfBin) ProtoMessage() {}

func (x *IrodoriFlowerShelfBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriFlowerShelfBin.ProtoReflect.Descriptor instead.
func (*IrodoriFlowerShelfBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{226}
}

func (x *IrodoriFlowerShelfBin) GetGadgetId() uint32 {
	if x != nil {
		return x.GadgetId
	}
	return 0
}

func (x *IrodoriFlowerShelfBin) GetUsedFlowerCountMap() map[uint32]uint32 {
	if x != nil {
		return x.UsedFlowerCountMap
	}
	return nil
}

type IrodoriFlowerBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSatisfiedThemeList []uint32                 `protobuf:"varint,1,rep,packed,name=is_satisfied_theme_list,json=isSatisfiedThemeList,proto3" json:"is_satisfied_theme_list,omitempty"`
	ShelfDataList        []*IrodoriFlowerShelfBin `protobuf:"bytes,2,rep,name=shelf_data_list,json=shelfDataList,proto3" json:"shelf_data_list,omitempty"`
}

func (x *IrodoriFlowerBin) Reset() {
	*x = IrodoriFlowerBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriFlowerBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriFlowerBin) ProtoMessage() {}

func (x *IrodoriFlowerBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriFlowerBin.ProtoReflect.Descriptor instead.
func (*IrodoriFlowerBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{227}
}

func (x *IrodoriFlowerBin) GetIsSatisfiedThemeList() []uint32 {
	if x != nil {
		return x.IsSatisfiedThemeList
	}
	return nil
}

func (x *IrodoriFlowerBin) GetShelfDataList() []*IrodoriFlowerShelfBin {
	if x != nil {
		return x.ShelfDataList
	}
	return nil
}

type IrodoriPoetryThemeBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThemeId          uint32   `protobuf:"varint,1,opt,name=theme_id,json=themeId,proto3" json:"theme_id,omitempty"`
	Progress         uint32   `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
	ScannedIndexList []uint32 `protobuf:"varint,3,rep,packed,name=scanned_index_list,json=scannedIndexList,proto3" json:"scanned_index_list,omitempty"`
	SelectedLineId   uint32   `protobuf:"varint,4,opt,name=selected_line_id,json=selectedLineId,proto3" json:"selected_line_id,omitempty"`
}

func (x *IrodoriPoetryThemeBin) Reset() {
	*x = IrodoriPoetryThemeBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriPoetryThemeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriPoetryThemeBin) ProtoMessage() {}

func (x *IrodoriPoetryThemeBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriPoetryThemeBin.ProtoReflect.Descriptor instead.
func (*IrodoriPoetryThemeBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{228}
}

func (x *IrodoriPoetryThemeBin) GetThemeId() uint32 {
	if x != nil {
		return x.ThemeId
	}
	return 0
}

func (x *IrodoriPoetryThemeBin) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *IrodoriPoetryThemeBin) GetScannedIndexList() []uint32 {
	if x != nil {
		return x.ScannedIndexList
	}
	return nil
}

func (x *IrodoriPoetryThemeBin) GetSelectedLineId() uint32 {
	if x != nil {
		return x.SelectedLineId
	}
	return 0
}

type IrodoriPoetryBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThemeBinList []*IrodoriPoetryThemeBin `protobuf:"bytes,1,rep,name=theme_bin_list,json=themeBinList,proto3" json:"theme_bin_list,omitempty"`
	CurThemeId   uint32                   `protobuf:"varint,2,opt,name=cur_theme_id,json=curThemeId,proto3" json:"cur_theme_id,omitempty"`
}

func (x *IrodoriPoetryBin) Reset() {
	*x = IrodoriPoetryBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriPoetryBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriPoetryBin) ProtoMessage() {}

func (x *IrodoriPoetryBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriPoetryBin.ProtoReflect.Descriptor instead.
func (*IrodoriPoetryBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{229}
}

func (x *IrodoriPoetryBin) GetThemeBinList() []*IrodoriPoetryThemeBin {
	if x != nil {
		return x.ThemeBinList
	}
	return nil
}

func (x *IrodoriPoetryBin) GetCurThemeId() uint32 {
	if x != nil {
		return x.CurThemeId
	}
	return 0
}

type IrodoriMasterLevelDetailBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Difficulty    uint32 `protobuf:"varint,1,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	IsHaveTry     bool   `protobuf:"varint,2,opt,name=is_have_try,json=isHaveTry,proto3" json:"is_have_try,omitempty"`
	IsFinish      bool   `protobuf:"varint,3,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	MinFinishTime uint32 `protobuf:"varint,4,opt,name=min_finish_time,json=minFinishTime,proto3" json:"min_finish_time,omitempty"`
}

func (x *IrodoriMasterLevelDetailBin) Reset() {
	*x = IrodoriMasterLevelDetailBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriMasterLevelDetailBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriMasterLevelDetailBin) ProtoMessage() {}

func (x *IrodoriMasterLevelDetailBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriMasterLevelDetailBin.ProtoReflect.Descriptor instead.
func (*IrodoriMasterLevelDetailBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{230}
}

func (x *IrodoriMasterLevelDetailBin) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *IrodoriMasterLevelDetailBin) GetIsHaveTry() bool {
	if x != nil {
		return x.IsHaveTry
	}
	return false
}

func (x *IrodoriMasterLevelDetailBin) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *IrodoriMasterLevelDetailBin) GetMinFinishTime() uint32 {
	if x != nil {
		return x.MinFinishTime
	}
	return 0
}

type IrodoriMasterLevelBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId         uint32                         `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	LevelDetailList []*IrodoriMasterLevelDetailBin `protobuf:"bytes,2,rep,name=level_detail_list,json=levelDetailList,proto3" json:"level_detail_list,omitempty"`
	IsCgViewed      bool                           `protobuf:"varint,3,opt,name=is_cg_viewed,json=isCgViewed,proto3" json:"is_cg_viewed,omitempty"`
}

func (x *IrodoriMasterLevelBin) Reset() {
	*x = IrodoriMasterLevelBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriMasterLevelBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriMasterLevelBin) ProtoMessage() {}

func (x *IrodoriMasterLevelBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriMasterLevelBin.ProtoReflect.Descriptor instead.
func (*IrodoriMasterLevelBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{231}
}

func (x *IrodoriMasterLevelBin) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *IrodoriMasterLevelBin) GetLevelDetailList() []*IrodoriMasterLevelDetailBin {
	if x != nil {
		return x.LevelDetailList
	}
	return nil
}

func (x *IrodoriMasterLevelBin) GetIsCgViewed() bool {
	if x != nil {
		return x.IsCgViewed
	}
	return false
}

type IrodoriScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChessData           *IrodoriChessBin         `protobuf:"bytes,1,opt,name=chess_data,json=chessData,proto3" json:"chess_data,omitempty"`
	FlowerData          *IrodoriFlowerBin        `protobuf:"bytes,2,opt,name=flower_data,json=flowerData,proto3" json:"flower_data,omitempty"`
	PoetryData          *IrodoriPoetryBin        `protobuf:"bytes,3,opt,name=poetry_data,json=poetryData,proto3" json:"poetry_data,omitempty"`
	MasterLevelList     []*IrodoriMasterLevelBin `protobuf:"bytes,4,rep,name=master_level_list,json=masterLevelList,proto3" json:"master_level_list,omitempty"`
	MasterTransactionNo uint32                   `protobuf:"varint,5,opt,name=master_transaction_no,json=masterTransactionNo,proto3" json:"master_transaction_no,omitempty"`
}

func (x *IrodoriScheduleBin) Reset() {
	*x = IrodoriScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriScheduleBin) ProtoMessage() {}

func (x *IrodoriScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriScheduleBin.ProtoReflect.Descriptor instead.
func (*IrodoriScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{232}
}

func (x *IrodoriScheduleBin) GetChessData() *IrodoriChessBin {
	if x != nil {
		return x.ChessData
	}
	return nil
}

func (x *IrodoriScheduleBin) GetFlowerData() *IrodoriFlowerBin {
	if x != nil {
		return x.FlowerData
	}
	return nil
}

func (x *IrodoriScheduleBin) GetPoetryData() *IrodoriPoetryBin {
	if x != nil {
		return x.PoetryData
	}
	return nil
}

func (x *IrodoriScheduleBin) GetMasterLevelList() []*IrodoriMasterLevelBin {
	if x != nil {
		return x.MasterLevelList
	}
	return nil
}

func (x *IrodoriScheduleBin) GetMasterTransactionNo() uint32 {
	if x != nil {
		return x.MasterTransactionNo
	}
	return 0
}

type CrystalLinkBuffBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CondBuffId   uint32 `protobuf:"varint,1,opt,name=cond_buff_id,json=condBuffId,proto3" json:"cond_buff_id,omitempty"`
	EffectBuffId uint32 `protobuf:"varint,2,opt,name=effect_buff_id,json=effectBuffId,proto3" json:"effect_buff_id,omitempty"`
}

func (x *CrystalLinkBuffBin) Reset() {
	*x = CrystalLinkBuffBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrystalLinkBuffBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrystalLinkBuffBin) ProtoMessage() {}

func (x *CrystalLinkBuffBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrystalLinkBuffBin.ProtoReflect.Descriptor instead.
func (*CrystalLinkBuffBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{233}
}

func (x *CrystalLinkBuffBin) GetCondBuffId() uint32 {
	if x != nil {
		return x.CondBuffId
	}
	return 0
}

func (x *CrystalLinkBuffBin) GetEffectBuffId() uint32 {
	if x != nil {
		return x.EffectBuffId
	}
	return 0
}

type CrystalLinkAvatarBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsTrial       bool   `protobuf:"varint,1,opt,name=is_trial,json=isTrial,proto3" json:"is_trial,omitempty"`
	AvatarId      uint64 `protobuf:"varint,2,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	InDungeonGuid uint64 `protobuf:"varint,3,opt,name=in_dungeon_guid,json=inDungeonGuid,proto3" json:"in_dungeon_guid,omitempty"`
}

func (x *CrystalLinkAvatarBin) Reset() {
	*x = CrystalLinkAvatarBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrystalLinkAvatarBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrystalLinkAvatarBin) ProtoMessage() {}

func (x *CrystalLinkAvatarBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrystalLinkAvatarBin.ProtoReflect.Descriptor instead.
func (*CrystalLinkAvatarBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{234}
}

func (x *CrystalLinkAvatarBin) GetIsTrial() bool {
	if x != nil {
		return x.IsTrial
	}
	return false
}

func (x *CrystalLinkAvatarBin) GetAvatarId() uint64 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *CrystalLinkAvatarBin) GetInDungeonGuid() uint64 {
	if x != nil {
		return x.InDungeonGuid
	}
	return 0
}

type CrystalLinkTeamBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarBinList []*CrystalLinkAvatarBin `protobuf:"bytes,1,rep,name=avatar_bin_list,json=avatarBinList,proto3" json:"avatar_bin_list,omitempty"`
	BuffBinList   []*CrystalLinkBuffBin   `protobuf:"bytes,2,rep,name=buff_bin_list,json=buffBinList,proto3" json:"buff_bin_list,omitempty"`
}

func (x *CrystalLinkTeamBin) Reset() {
	*x = CrystalLinkTeamBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrystalLinkTeamBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrystalLinkTeamBin) ProtoMessage() {}

func (x *CrystalLinkTeamBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrystalLinkTeamBin.ProtoReflect.Descriptor instead.
func (*CrystalLinkTeamBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{235}
}

func (x *CrystalLinkTeamBin) GetAvatarBinList() []*CrystalLinkAvatarBin {
	if x != nil {
		return x.AvatarBinList
	}
	return nil
}

func (x *CrystalLinkTeamBin) GetBuffBinList() []*CrystalLinkBuffBin {
	if x != nil {
		return x.BuffBinList
	}
	return nil
}

type CrystalLinkLevelBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId     uint32                `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsOpen      bool                  `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	BestScore   uint32                `protobuf:"varint,3,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
	TeamBinList []*CrystalLinkTeamBin `protobuf:"bytes,4,rep,name=team_bin_list,json=teamBinList,proto3" json:"team_bin_list,omitempty"`
}

func (x *CrystalLinkLevelBin) Reset() {
	*x = CrystalLinkLevelBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrystalLinkLevelBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrystalLinkLevelBin) ProtoMessage() {}

func (x *CrystalLinkLevelBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrystalLinkLevelBin.ProtoReflect.Descriptor instead.
func (*CrystalLinkLevelBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{236}
}

func (x *CrystalLinkLevelBin) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *CrystalLinkLevelBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *CrystalLinkLevelBin) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

func (x *CrystalLinkLevelBin) GetTeamBinList() []*CrystalLinkTeamBin {
	if x != nil {
		return x.TeamBinList
	}
	return nil
}

type CrystalLinkScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelBinList []*CrystalLinkLevelBin `protobuf:"bytes,1,rep,name=level_bin_list,json=levelBinList,proto3" json:"level_bin_list,omitempty"`
	DifficultyId uint32                 `protobuf:"varint,2,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
}

func (x *CrystalLinkScheduleBin) Reset() {
	*x = CrystalLinkScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrystalLinkScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrystalLinkScheduleBin) ProtoMessage() {}

func (x *CrystalLinkScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrystalLinkScheduleBin.ProtoReflect.Descriptor instead.
func (*CrystalLinkScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{237}
}

func (x *CrystalLinkScheduleBin) GetLevelBinList() []*CrystalLinkLevelBin {
	if x != nil {
		return x.LevelBinList
	}
	return nil
}

func (x *CrystalLinkScheduleBin) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

type PhotoPosBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PosId    uint32 `protobuf:"varint,1,opt,name=pos_id,json=posId,proto3" json:"pos_id,omitempty"`
	IsOpen   bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	IsView   bool   `protobuf:"varint,3,opt,name=is_view,json=isView,proto3" json:"is_view,omitempty"`
	IsFinish bool   `protobuf:"varint,4,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
}

func (x *PhotoPosBin) Reset() {
	*x = PhotoPosBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoPosBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoPosBin) ProtoMessage() {}

func (x *PhotoPosBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoPosBin.ProtoReflect.Descriptor instead.
func (*PhotoPosBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{238}
}

func (x *PhotoPosBin) GetPosId() uint32 {
	if x != nil {
		return x.PosId
	}
	return 0
}

func (x *PhotoPosBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *PhotoPosBin) GetIsView() bool {
	if x != nil {
		return x.IsView
	}
	return false
}

func (x *PhotoPosBin) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

type PhotoScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhotoPosBinList []*PhotoPosBin `protobuf:"bytes,1,rep,name=photo_pos_bin_list,json=photoPosBinList,proto3" json:"photo_pos_bin_list,omitempty"`
	IsContentClosed bool           `protobuf:"varint,2,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
}

func (x *PhotoScheduleBin) Reset() {
	*x = PhotoScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoScheduleBin) ProtoMessage() {}

func (x *PhotoScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoScheduleBin.ProtoReflect.Descriptor instead.
func (*PhotoScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{239}
}

func (x *PhotoScheduleBin) GetPhotoPosBinList() []*PhotoPosBin {
	if x != nil {
		return x.PhotoPosBinList
	}
	return nil
}

func (x *PhotoScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

type SpiceStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId      uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen       bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	SuccessTimes uint32 `protobuf:"varint,3,opt,name=success_times,json=successTimes,proto3" json:"success_times,omitempty"`
}

func (x *SpiceStageBin) Reset() {
	*x = SpiceStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpiceStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpiceStageBin) ProtoMessage() {}

func (x *SpiceStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpiceStageBin.ProtoReflect.Descriptor instead.
func (*SpiceStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{240}
}

func (x *SpiceStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *SpiceStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *SpiceStageBin) GetSuccessTimes() uint32 {
	if x != nil {
		return x.SuccessTimes
	}
	return 0
}

type SpiceScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageBinList                     []*SpiceStageBin `protobuf:"bytes,1,rep,name=stage_bin_list,json=stageBinList,proto3" json:"stage_bin_list,omitempty"`
	IncreaseAvatarFetterLimitTimes   uint32           `protobuf:"varint,2,opt,name=increase_avatar_fetter_limit_times,json=increaseAvatarFetterLimitTimes,proto3" json:"increase_avatar_fetter_limit_times,omitempty"`
	CurrentIncreaseAvatarFetterTimes uint32           `protobuf:"varint,3,opt,name=current_increase_avatar_fetter_times,json=currentIncreaseAvatarFetterTimes,proto3" json:"current_increase_avatar_fetter_times,omitempty"`
}

func (x *SpiceScheduleBin) Reset() {
	*x = SpiceScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpiceScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpiceScheduleBin) ProtoMessage() {}

func (x *SpiceScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpiceScheduleBin.ProtoReflect.Descriptor instead.
func (*SpiceScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{241}
}

func (x *SpiceScheduleBin) GetStageBinList() []*SpiceStageBin {
	if x != nil {
		return x.StageBinList
	}
	return nil
}

func (x *SpiceScheduleBin) GetIncreaseAvatarFetterLimitTimes() uint32 {
	if x != nil {
		return x.IncreaseAvatarFetterLimitTimes
	}
	return 0
}

func (x *SpiceScheduleBin) GetCurrentIncreaseAvatarFetterTimes() uint32 {
	if x != nil {
		return x.CurrentIncreaseAvatarFetterTimes
	}
	return 0
}

type GachaStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId      uint32            `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen       bool              `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	TargetNumMap map[uint32]uint32 `protobuf:"bytes,3,rep,name=target_num_map,json=targetNumMap,proto3" json:"target_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GachaStageBin) Reset() {
	*x = GachaStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaStageBin) ProtoMessage() {}

func (x *GachaStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaStageBin.ProtoReflect.Descriptor instead.
func (*GachaStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{242}
}

func (x *GachaStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *GachaStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *GachaStageBin) GetTargetNumMap() map[uint32]uint32 {
	if x != nil {
		return x.TargetNumMap
	}
	return nil
}

type GachaScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RobotNumMap              map[uint32]uint32 `protobuf:"bytes,1,rep,name=robot_num_map,json=robotNumMap,proto3" json:"robot_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GachaStageBinList        []*GachaStageBin  `protobuf:"bytes,2,rep,name=gacha_stage_bin_list,json=gachaStageBinList,proto3" json:"gacha_stage_bin_list,omitempty"`
	ItemStage                uint32            `protobuf:"varint,3,opt,name=item_stage,json=itemStage,proto3" json:"item_stage,omitempty"`
	SubStage                 uint32            `protobuf:"varint,4,opt,name=sub_stage,json=subStage,proto3" json:"sub_stage,omitempty"`
	RobotFinishNum           uint32            `protobuf:"varint,5,opt,name=robot_finish_num,json=robotFinishNum,proto3" json:"robot_finish_num,omitempty"`
	CreateRobotVec           []uint32          `protobuf:"varint,6,rep,packed,name=create_robot_vec,json=createRobotVec,proto3" json:"create_robot_vec,omitempty"`
	HiddenRobotFinishNum     uint32            `protobuf:"varint,7,opt,name=hidden_robot_finish_num,json=hiddenRobotFinishNum,proto3" json:"hidden_robot_finish_num,omitempty"`
	FirstCreateHiddenRobotId uint32            `protobuf:"varint,8,opt,name=first_create_hidden_robot_id,json=firstCreateHiddenRobotId,proto3" json:"first_create_hidden_robot_id,omitempty"`
	TechCreateRobotId        uint32            `protobuf:"varint,9,opt,name=tech_create_robot_id,json=techCreateRobotId,proto3" json:"tech_create_robot_id,omitempty"`
	HaveRewardRobotNumMap    map[uint32]uint32 `protobuf:"bytes,10,rep,name=have_reward_robot_num_map,json=haveRewardRobotNumMap,proto3" json:"have_reward_robot_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	HaveGetRobotList         []uint32          `protobuf:"varint,11,rep,packed,name=have_get_robot_list,json=haveGetRobotList,proto3" json:"have_get_robot_list,omitempty"`
}

func (x *GachaScheduleBin) Reset() {
	*x = GachaScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaScheduleBin) ProtoMessage() {}

func (x *GachaScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaScheduleBin.ProtoReflect.Descriptor instead.
func (*GachaScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{243}
}

func (x *GachaScheduleBin) GetRobotNumMap() map[uint32]uint32 {
	if x != nil {
		return x.RobotNumMap
	}
	return nil
}

func (x *GachaScheduleBin) GetGachaStageBinList() []*GachaStageBin {
	if x != nil {
		return x.GachaStageBinList
	}
	return nil
}

func (x *GachaScheduleBin) GetItemStage() uint32 {
	if x != nil {
		return x.ItemStage
	}
	return 0
}

func (x *GachaScheduleBin) GetSubStage() uint32 {
	if x != nil {
		return x.SubStage
	}
	return 0
}

func (x *GachaScheduleBin) GetRobotFinishNum() uint32 {
	if x != nil {
		return x.RobotFinishNum
	}
	return 0
}

func (x *GachaScheduleBin) GetCreateRobotVec() []uint32 {
	if x != nil {
		return x.CreateRobotVec
	}
	return nil
}

func (x *GachaScheduleBin) GetHiddenRobotFinishNum() uint32 {
	if x != nil {
		return x.HiddenRobotFinishNum
	}
	return 0
}

func (x *GachaScheduleBin) GetFirstCreateHiddenRobotId() uint32 {
	if x != nil {
		return x.FirstCreateHiddenRobotId
	}
	return 0
}

func (x *GachaScheduleBin) GetTechCreateRobotId() uint32 {
	if x != nil {
		return x.TechCreateRobotId
	}
	return 0
}

func (x *GachaScheduleBin) GetHaveRewardRobotNumMap() map[uint32]uint32 {
	if x != nil {
		return x.HaveRewardRobotNumMap
	}
	return nil
}

func (x *GachaScheduleBin) GetHaveGetRobotList() []uint32 {
	if x != nil {
		return x.HaveGetRobotList
	}
	return nil
}

type ActivityRecvGiftBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        uint32            `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	GiftNumMap map[uint32]uint32 `protobuf:"bytes,2,rep,name=gift_num_map,json=giftNumMap,proto3" json:"gift_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ActivityRecvGiftBin) Reset() {
	*x = ActivityRecvGiftBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityRecvGiftBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityRecvGiftBin) ProtoMessage() {}

func (x *ActivityRecvGiftBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityRecvGiftBin.ProtoReflect.Descriptor instead.
func (*ActivityRecvGiftBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{244}
}

func (x *ActivityRecvGiftBin) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ActivityRecvGiftBin) GetGiftNumMap() map[uint32]uint32 {
	if x != nil {
		return x.GiftNumMap
	}
	return nil
}

type ActivityGiftDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WishGiftNumMap   map[uint32]uint32      `protobuf:"bytes,1,rep,name=wish_gift_num_map,json=wishGiftNumMap,proto3" json:"wish_gift_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RecvGiftDataList []*ActivityRecvGiftBin `protobuf:"bytes,2,rep,name=recv_gift_data_list,json=recvGiftDataList,proto3" json:"recv_gift_data_list,omitempty"`
}

func (x *ActivityGiftDataBin) Reset() {
	*x = ActivityGiftDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityGiftDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityGiftDataBin) ProtoMessage() {}

func (x *ActivityGiftDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityGiftDataBin.ProtoReflect.Descriptor instead.
func (*ActivityGiftDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{245}
}

func (x *ActivityGiftDataBin) GetWishGiftNumMap() map[uint32]uint32 {
	if x != nil {
		return x.WishGiftNumMap
	}
	return nil
}

func (x *ActivityGiftDataBin) GetRecvGiftDataList() []*ActivityRecvGiftBin {
	if x != nil {
		return x.RecvGiftDataList
	}
	return nil
}

type LuminanceStoneChallengeScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsContentClosed        bool   `protobuf:"varint,1,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	CurrentStageId         uint32 `protobuf:"varint,2,opt,name=current_stage_id,json=currentStageId,proto3" json:"current_stage_id,omitempty"`
	IsFinalGalleryComplete bool   `protobuf:"varint,3,opt,name=is_final_gallery_complete,json=isFinalGalleryComplete,proto3" json:"is_final_gallery_complete,omitempty"`
	BestScore              uint32 `protobuf:"varint,4,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
}

func (x *LuminanceStoneChallengeScheduleBin) Reset() {
	*x = LuminanceStoneChallengeScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuminanceStoneChallengeScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuminanceStoneChallengeScheduleBin) ProtoMessage() {}

func (x *LuminanceStoneChallengeScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuminanceStoneChallengeScheduleBin.ProtoReflect.Descriptor instead.
func (*LuminanceStoneChallengeScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{246}
}

func (x *LuminanceStoneChallengeScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *LuminanceStoneChallengeScheduleBin) GetCurrentStageId() uint32 {
	if x != nil {
		return x.CurrentStageId
	}
	return 0
}

func (x *LuminanceStoneChallengeScheduleBin) GetIsFinalGalleryComplete() bool {
	if x != nil {
		return x.IsFinalGalleryComplete
	}
	return false
}

func (x *LuminanceStoneChallengeScheduleBin) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

type RogueDiaryStageRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Difficulty uint32 `protobuf:"varint,1,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Round      uint32 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	IsFinish   bool   `protobuf:"varint,3,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	FinishTime uint32 `protobuf:"varint,4,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
}

func (x *RogueDiaryStageRecordBin) Reset() {
	*x = RogueDiaryStageRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueDiaryStageRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueDiaryStageRecordBin) ProtoMessage() {}

func (x *RogueDiaryStageRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueDiaryStageRecordBin.ProtoReflect.Descriptor instead.
func (*RogueDiaryStageRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{247}
}

func (x *RogueDiaryStageRecordBin) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *RogueDiaryStageRecordBin) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *RogueDiaryStageRecordBin) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *RogueDiaryStageRecordBin) GetFinishTime() uint32 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

type RogueDiaryStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId   uint32                    `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsHaveTry bool                      `protobuf:"varint,2,opt,name=is_have_try,json=isHaveTry,proto3" json:"is_have_try,omitempty"`
	RecordBin *RogueDiaryStageRecordBin `protobuf:"bytes,3,opt,name=record_bin,json=recordBin,proto3" json:"record_bin,omitempty"`
}

func (x *RogueDiaryStageBin) Reset() {
	*x = RogueDiaryStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueDiaryStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueDiaryStageBin) ProtoMessage() {}

func (x *RogueDiaryStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueDiaryStageBin.ProtoReflect.Descriptor instead.
func (*RogueDiaryStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{248}
}

func (x *RogueDiaryStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *RogueDiaryStageBin) GetIsHaveTry() bool {
	if x != nil {
		return x.IsHaveTry
	}
	return false
}

func (x *RogueDiaryStageBin) GetRecordBin() *RogueDiaryStageRecordBin {
	if x != nil {
		return x.RecordBin
	}
	return nil
}

type RogueDiaryRoomConfigPairBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomConfigId uint32 `protobuf:"varint,1,opt,name=room_config_id,json=roomConfigId,proto3" json:"room_config_id,omitempty"`
	IsCanHard    bool   `protobuf:"varint,2,opt,name=is_can_hard,json=isCanHard,proto3" json:"is_can_hard,omitempty"`
}

func (x *RogueDiaryRoomConfigPairBin) Reset() {
	*x = RogueDiaryRoomConfigPairBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueDiaryRoomConfigPairBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueDiaryRoomConfigPairBin) ProtoMessage() {}

func (x *RogueDiaryRoomConfigPairBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueDiaryRoomConfigPairBin.ProtoReflect.Descriptor instead.
func (*RogueDiaryRoomConfigPairBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{249}
}

func (x *RogueDiaryRoomConfigPairBin) GetRoomConfigId() uint32 {
	if x != nil {
		return x.RoomConfigId
	}
	return 0
}

func (x *RogueDiaryRoomConfigPairBin) GetIsCanHard() bool {
	if x != nil {
		return x.IsCanHard
	}
	return false
}

type RogueDiaryAvtarBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid          uint64  `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Level         uint32  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Hp            float32 `protobuf:"fixed32,3,opt,name=hp,proto3" json:"hp,omitempty"`
	Energy        float32 `protobuf:"fixed32,4,opt,name=energy,proto3" json:"energy,omitempty"`
	TrialConfigId uint32  `protobuf:"varint,5,opt,name=trial_config_id,json=trialConfigId,proto3" json:"trial_config_id,omitempty"`
	Round         uint32  `protobuf:"varint,6,opt,name=round,proto3" json:"round,omitempty"`
	LifeState     uint32  `protobuf:"varint,7,opt,name=life_state,json=lifeState,proto3" json:"life_state,omitempty"`
	IsBan         bool    `protobuf:"varint,8,opt,name=is_ban,json=isBan,proto3" json:"is_ban,omitempty"`
}

func (x *RogueDiaryAvtarBin) Reset() {
	*x = RogueDiaryAvtarBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueDiaryAvtarBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueDiaryAvtarBin) ProtoMessage() {}

func (x *RogueDiaryAvtarBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueDiaryAvtarBin.ProtoReflect.Descriptor instead.
func (*RogueDiaryAvtarBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{250}
}

func (x *RogueDiaryAvtarBin) GetGuid() uint64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *RogueDiaryAvtarBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *RogueDiaryAvtarBin) GetHp() float32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *RogueDiaryAvtarBin) GetEnergy() float32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

func (x *RogueDiaryAvtarBin) GetTrialConfigId() uint32 {
	if x != nil {
		return x.TrialConfigId
	}
	return 0
}

func (x *RogueDiaryAvtarBin) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *RogueDiaryAvtarBin) GetLifeState() uint32 {
	if x != nil {
		return x.LifeState
	}
	return 0
}

func (x *RogueDiaryAvtarBin) GetIsBan() bool {
	if x != nil {
		return x.IsBan
	}
	return false
}

type RogueDiaryProgressBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHaveProgress         bool                           `protobuf:"varint,1,opt,name=is_have_progress,json=isHaveProgress,proto3" json:"is_have_progress,omitempty"`
	IsHaveEnterDungeon     bool                           `protobuf:"varint,2,opt,name=is_have_enter_dungeon,json=isHaveEnterDungeon,proto3" json:"is_have_enter_dungeon,omitempty"`
	StageId                uint32                         `protobuf:"varint,3,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	DungeonId              uint32                         `protobuf:"varint,4,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	Difficulty             uint32                         `protobuf:"varint,5,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	CurRound               uint32                         `protobuf:"varint,6,opt,name=cur_round,json=curRound,proto3" json:"cur_round,omitempty"`
	IsRoundFightFinish     bool                           `protobuf:"varint,7,opt,name=is_round_fight_finish,json=isRoundFightFinish,proto3" json:"is_round_fight_finish,omitempty"`
	RoomConfigList         []*RogueDiaryRoomConfigPairBin `protobuf:"bytes,9,rep,name=room_config_list,json=roomConfigList,proto3" json:"room_config_list,omitempty"`
	OptionalCardList       []uint32                       `protobuf:"varint,10,rep,packed,name=optional_card_list,json=optionalCardList,proto3" json:"optional_card_list,omitempty"`
	ChosenCardList         []uint32                       `protobuf:"varint,11,rep,packed,name=chosen_card_list,json=chosenCardList,proto3" json:"chosen_card_list,omitempty"`
	IsRoundRepairFinish    bool                           `protobuf:"varint,12,opt,name=is_round_repair_finish,json=isRoundRepairFinish,proto3" json:"is_round_repair_finish,omitempty"`
	OnstageGuidList        []uint64                       `protobuf:"varint,13,rep,packed,name=onstage_guid_list,json=onstageGuidList,proto3" json:"onstage_guid_list,omitempty"`
	RogueAvatarList        []*RogueDiaryAvtarBin          `protobuf:"bytes,14,rep,name=rogue_avatar_list,json=rogueAvatarList,proto3" json:"rogue_avatar_list,omitempty"`
	OptionalTiredGuidList  []uint64                       `protobuf:"varint,15,rep,packed,name=optional_tired_guid_list,json=optionalTiredGuidList,proto3" json:"optional_tired_guid_list,omitempty"`
	Coin                   uint32                         `protobuf:"varint,16,opt,name=coin,proto3" json:"coin,omitempty"`
	Time                   uint32                         `protobuf:"varint,17,opt,name=time,proto3" json:"time,omitempty"`
	Transaction            uint32                         `protobuf:"varint,18,opt,name=transaction,proto3" json:"transaction,omitempty"`
	ResumeOptionalCardList []uint32                       `protobuf:"varint,19,rep,packed,name=resume_optional_card_list,json=resumeOptionalCardList,proto3" json:"resume_optional_card_list,omitempty"`
	ResumeChosenCardList   []uint32                       `protobuf:"varint,20,rep,packed,name=resume_chosen_card_list,json=resumeChosenCardList,proto3" json:"resume_chosen_card_list,omitempty"`
	ResumeSelectCardList   []uint32                       `protobuf:"varint,21,rep,packed,name=resume_select_card_list,json=resumeSelectCardList,proto3" json:"resume_select_card_list,omitempty"`
}

func (x *RogueDiaryProgressBin) Reset() {
	*x = RogueDiaryProgressBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueDiaryProgressBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueDiaryProgressBin) ProtoMessage() {}

func (x *RogueDiaryProgressBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueDiaryProgressBin.ProtoReflect.Descriptor instead.
func (*RogueDiaryProgressBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{251}
}

func (x *RogueDiaryProgressBin) GetIsHaveProgress() bool {
	if x != nil {
		return x.IsHaveProgress
	}
	return false
}

func (x *RogueDiaryProgressBin) GetIsHaveEnterDungeon() bool {
	if x != nil {
		return x.IsHaveEnterDungeon
	}
	return false
}

func (x *RogueDiaryProgressBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *RogueDiaryProgressBin) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *RogueDiaryProgressBin) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *RogueDiaryProgressBin) GetCurRound() uint32 {
	if x != nil {
		return x.CurRound
	}
	return 0
}

func (x *RogueDiaryProgressBin) GetIsRoundFightFinish() bool {
	if x != nil {
		return x.IsRoundFightFinish
	}
	return false
}

func (x *RogueDiaryProgressBin) GetRoomConfigList() []*RogueDiaryRoomConfigPairBin {
	if x != nil {
		return x.RoomConfigList
	}
	return nil
}

func (x *RogueDiaryProgressBin) GetOptionalCardList() []uint32 {
	if x != nil {
		return x.OptionalCardList
	}
	return nil
}

func (x *RogueDiaryProgressBin) GetChosenCardList() []uint32 {
	if x != nil {
		return x.ChosenCardList
	}
	return nil
}

func (x *RogueDiaryProgressBin) GetIsRoundRepairFinish() bool {
	if x != nil {
		return x.IsRoundRepairFinish
	}
	return false
}

func (x *RogueDiaryProgressBin) GetOnstageGuidList() []uint64 {
	if x != nil {
		return x.OnstageGuidList
	}
	return nil
}

func (x *RogueDiaryProgressBin) GetRogueAvatarList() []*RogueDiaryAvtarBin {
	if x != nil {
		return x.RogueAvatarList
	}
	return nil
}

func (x *RogueDiaryProgressBin) GetOptionalTiredGuidList() []uint64 {
	if x != nil {
		return x.OptionalTiredGuidList
	}
	return nil
}

func (x *RogueDiaryProgressBin) GetCoin() uint32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *RogueDiaryProgressBin) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *RogueDiaryProgressBin) GetTransaction() uint32 {
	if x != nil {
		return x.Transaction
	}
	return 0
}

func (x *RogueDiaryProgressBin) GetResumeOptionalCardList() []uint32 {
	if x != nil {
		return x.ResumeOptionalCardList
	}
	return nil
}

func (x *RogueDiaryProgressBin) GetResumeChosenCardList() []uint32 {
	if x != nil {
		return x.ResumeChosenCardList
	}
	return nil
}

func (x *RogueDiaryProgressBin) GetResumeSelectCardList() []uint32 {
	if x != nil {
		return x.ResumeSelectCardList
	}
	return nil
}

type RogueDiaryScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsContentClosed bool                   `protobuf:"varint,1,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	StageBinList    []*RogueDiaryStageBin  `protobuf:"bytes,2,rep,name=stage_bin_list,json=stageBinList,proto3" json:"stage_bin_list,omitempty"`
	ProgressBin     *RogueDiaryProgressBin `protobuf:"bytes,3,opt,name=progress_bin,json=progressBin,proto3" json:"progress_bin,omitempty"`
	Coin            uint32                 `protobuf:"varint,4,opt,name=coin,proto3" json:"coin,omitempty"`
	Transaction     uint32                 `protobuf:"varint,5,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *RogueDiaryScheduleBin) Reset() {
	*x = RogueDiaryScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueDiaryScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueDiaryScheduleBin) ProtoMessage() {}

func (x *RogueDiaryScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueDiaryScheduleBin.ProtoReflect.Descriptor instead.
func (*RogueDiaryScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{252}
}

func (x *RogueDiaryScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *RogueDiaryScheduleBin) GetStageBinList() []*RogueDiaryStageBin {
	if x != nil {
		return x.StageBinList
	}
	return nil
}

func (x *RogueDiaryScheduleBin) GetProgressBin() *RogueDiaryProgressBin {
	if x != nil {
		return x.ProgressBin
	}
	return nil
}

func (x *RogueDiaryScheduleBin) GetCoin() uint32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *RogueDiaryScheduleBin) GetTransaction() uint32 {
	if x != nil {
		return x.Transaction
	}
	return 0
}

type SummerTimeV2DungeonStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId              uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen               bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	IsPrevDungeonSucceed bool   `protobuf:"varint,3,opt,name=is_prev_dungeon_succeed,json=isPrevDungeonSucceed,proto3" json:"is_prev_dungeon_succeed,omitempty"`
}

func (x *SummerTimeV2DungeonStageBin) Reset() {
	*x = SummerTimeV2DungeonStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeV2DungeonStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeV2DungeonStageBin) ProtoMessage() {}

func (x *SummerTimeV2DungeonStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeV2DungeonStageBin.ProtoReflect.Descriptor instead.
func (*SummerTimeV2DungeonStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{253}
}

func (x *SummerTimeV2DungeonStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *SummerTimeV2DungeonStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *SummerTimeV2DungeonStageBin) GetIsPrevDungeonSucceed() bool {
	if x != nil {
		return x.IsPrevDungeonSucceed
	}
	return false
}

type SummerTimeV2BoatStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId   uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen    bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	BestScore uint32 `protobuf:"varint,3,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
}

func (x *SummerTimeV2BoatStageBin) Reset() {
	*x = SummerTimeV2BoatStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeV2BoatStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeV2BoatStageBin) ProtoMessage() {}

func (x *SummerTimeV2BoatStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeV2BoatStageBin.ProtoReflect.Descriptor instead.
func (*SummerTimeV2BoatStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{254}
}

func (x *SummerTimeV2BoatStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *SummerTimeV2BoatStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *SummerTimeV2BoatStageBin) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

type SummerTimeV2ScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonStageBinList []*SummerTimeV2DungeonStageBin `protobuf:"bytes,1,rep,name=dungeon_stage_bin_list,json=dungeonStageBinList,proto3" json:"dungeon_stage_bin_list,omitempty"`
	BoatStageBinList    []*SummerTimeV2BoatStageBin    `protobuf:"bytes,2,rep,name=boat_stage_bin_list,json=boatStageBinList,proto3" json:"boat_stage_bin_list,omitempty"`
	IsContentClosed     bool                           `protobuf:"varint,3,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	Coin                uint32                         `protobuf:"varint,4,opt,name=coin,proto3" json:"coin,omitempty"`
	TakenRewardCount    uint32                         `protobuf:"varint,5,opt,name=taken_reward_count,json=takenRewardCount,proto3" json:"taken_reward_count,omitempty"`
}

func (x *SummerTimeV2ScheduleBin) Reset() {
	*x = SummerTimeV2ScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeV2ScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeV2ScheduleBin) ProtoMessage() {}

func (x *SummerTimeV2ScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeV2ScheduleBin.ProtoReflect.Descriptor instead.
func (*SummerTimeV2ScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{255}
}

func (x *SummerTimeV2ScheduleBin) GetDungeonStageBinList() []*SummerTimeV2DungeonStageBin {
	if x != nil {
		return x.DungeonStageBinList
	}
	return nil
}

func (x *SummerTimeV2ScheduleBin) GetBoatStageBinList() []*SummerTimeV2BoatStageBin {
	if x != nil {
		return x.BoatStageBinList
	}
	return nil
}

func (x *SummerTimeV2ScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *SummerTimeV2ScheduleBin) GetCoin() uint32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *SummerTimeV2ScheduleBin) GetTakenRewardCount() uint32 {
	if x != nil {
		return x.TakenRewardCount
	}
	return 0
}

type IslandPartyStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId   uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen    bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	BestScore uint32 `protobuf:"varint,3,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
}

func (x *IslandPartyStageBin) Reset() {
	*x = IslandPartyStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IslandPartyStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IslandPartyStageBin) ProtoMessage() {}

func (x *IslandPartyStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IslandPartyStageBin.ProtoReflect.Descriptor instead.
func (*IslandPartyStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{256}
}

func (x *IslandPartyStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *IslandPartyStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *IslandPartyStageBin) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

type IslandPartyScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageBinList []*IslandPartyStageBin `protobuf:"bytes,1,rep,name=stage_bin_list,json=stageBinList,proto3" json:"stage_bin_list,omitempty"`
}

func (x *IslandPartyScheduleBin) Reset() {
	*x = IslandPartyScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IslandPartyScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IslandPartyScheduleBin) ProtoMessage() {}

func (x *IslandPartyScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IslandPartyScheduleBin.ProtoReflect.Descriptor instead.
func (*IslandPartyScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{257}
}

func (x *IslandPartyScheduleBin) GetStageBinList() []*IslandPartyStageBin {
	if x != nil {
		return x.StageBinList
	}
	return nil
}

type GearStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId      uint32 `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsOpen       bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	IsFinished   bool   `protobuf:"varint,3,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	ShortestTime uint32 `protobuf:"varint,4,opt,name=shortest_time,json=shortestTime,proto3" json:"shortest_time,omitempty"`
}

func (x *GearStageBin) Reset() {
	*x = GearStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearStageBin) ProtoMessage() {}

func (x *GearStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearStageBin.ProtoReflect.Descriptor instead.
func (*GearStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{258}
}

func (x *GearStageBin) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *GearStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *GearStageBin) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *GearStageBin) GetShortestTime() uint32 {
	if x != nil {
		return x.ShortestTime
	}
	return 0
}

type JigsawPictureDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen       bool   `protobuf:"varint,1,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	IsFinished   bool   `protobuf:"varint,2,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	ShortestTime uint32 `protobuf:"varint,3,opt,name=shortest_time,json=shortestTime,proto3" json:"shortest_time,omitempty"`
}

func (x *JigsawPictureDataBin) Reset() {
	*x = JigsawPictureDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JigsawPictureDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JigsawPictureDataBin) ProtoMessage() {}

func (x *JigsawPictureDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JigsawPictureDataBin.ProtoReflect.Descriptor instead.
func (*JigsawPictureDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{259}
}

func (x *JigsawPictureDataBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *JigsawPictureDataBin) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *JigsawPictureDataBin) GetShortestTime() uint32 {
	if x != nil {
		return x.ShortestTime
	}
	return 0
}

type GearScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelBinList          []*GearStageBin       `protobuf:"bytes,1,rep,name=level_bin_list,json=levelBinList,proto3" json:"level_bin_list,omitempty"`
	JigsawPictureData     *JigsawPictureDataBin `protobuf:"bytes,2,opt,name=jigsaw_picture_data,json=jigsawPictureData,proto3" json:"jigsaw_picture_data,omitempty"`
	PlayerFinishGearLevel uint32                `protobuf:"varint,3,opt,name=player_finish_gear_level,json=playerFinishGearLevel,proto3" json:"player_finish_gear_level,omitempty"`
}

func (x *GearScheduleBin) Reset() {
	*x = GearScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearScheduleBin) ProtoMessage() {}

func (x *GearScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearScheduleBin.ProtoReflect.Descriptor instead.
func (*GearScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{260}
}

func (x *GearScheduleBin) GetLevelBinList() []*GearStageBin {
	if x != nil {
		return x.LevelBinList
	}
	return nil
}

func (x *GearScheduleBin) GetJigsawPictureData() *JigsawPictureDataBin {
	if x != nil {
		return x.JigsawPictureData
	}
	return nil
}

func (x *GearScheduleBin) GetPlayerFinishGearLevel() uint32 {
	if x != nil {
		return x.PlayerFinishGearLevel
	}
	return 0
}

type GravenInnocencePhotoStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId    uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen     bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	IsFinished bool   `protobuf:"varint,3,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
}

func (x *GravenInnocencePhotoStageBin) Reset() {
	*x = GravenInnocencePhotoStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocencePhotoStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocencePhotoStageBin) ProtoMessage() {}

func (x *GravenInnocencePhotoStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocencePhotoStageBin.ProtoReflect.Descriptor instead.
func (*GravenInnocencePhotoStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{261}
}

func (x *GravenInnocencePhotoStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *GravenInnocencePhotoStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *GravenInnocencePhotoStageBin) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

type GravenInnocencePhotoObjectBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId   uint32 `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Param      uint32 `protobuf:"varint,2,opt,name=param,proto3" json:"param,omitempty"`
	FinishTime uint32 `protobuf:"varint,3,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
}

func (x *GravenInnocencePhotoObjectBin) Reset() {
	*x = GravenInnocencePhotoObjectBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocencePhotoObjectBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocencePhotoObjectBin) ProtoMessage() {}

func (x *GravenInnocencePhotoObjectBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocencePhotoObjectBin.ProtoReflect.Descriptor instead.
func (*GravenInnocencePhotoObjectBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{262}
}

func (x *GravenInnocencePhotoObjectBin) GetObjectId() uint32 {
	if x != nil {
		return x.ObjectId
	}
	return 0
}

func (x *GravenInnocencePhotoObjectBin) GetParam() uint32 {
	if x != nil {
		return x.Param
	}
	return 0
}

func (x *GravenInnocencePhotoObjectBin) GetFinishTime() uint32 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

type GravenInnocencePhotoBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageBinList  []*GravenInnocencePhotoStageBin  `protobuf:"bytes,1,rep,name=stage_bin_list,json=stageBinList,proto3" json:"stage_bin_list,omitempty"`
	ObjectBinList []*GravenInnocencePhotoObjectBin `protobuf:"bytes,2,rep,name=object_bin_list,json=objectBinList,proto3" json:"object_bin_list,omitempty"`
}

func (x *GravenInnocencePhotoBin) Reset() {
	*x = GravenInnocencePhotoBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocencePhotoBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocencePhotoBin) ProtoMessage() {}

func (x *GravenInnocencePhotoBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocencePhotoBin.ProtoReflect.Descriptor instead.
func (*GravenInnocencePhotoBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{263}
}

func (x *GravenInnocencePhotoBin) GetStageBinList() []*GravenInnocencePhotoStageBin {
	if x != nil {
		return x.StageBinList
	}
	return nil
}

func (x *GravenInnocencePhotoBin) GetObjectBinList() []*GravenInnocencePhotoObjectBin {
	if x != nil {
		return x.ObjectBinList
	}
	return nil
}

type GravenInnocenceCampStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId    uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen     bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	LevelId    uint32 `protobuf:"varint,3,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsFinished bool   `protobuf:"varint,4,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
}

func (x *GravenInnocenceCampStageBin) Reset() {
	*x = GravenInnocenceCampStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocenceCampStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocenceCampStageBin) ProtoMessage() {}

func (x *GravenInnocenceCampStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocenceCampStageBin.ProtoReflect.Descriptor instead.
func (*GravenInnocenceCampStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{264}
}

func (x *GravenInnocenceCampStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *GravenInnocenceCampStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *GravenInnocenceCampStageBin) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *GravenInnocenceCampStageBin) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

type GravenInnocenceCampBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageBinList []*GravenInnocenceCampStageBin `protobuf:"bytes,1,rep,name=stage_bin_list,json=stageBinList,proto3" json:"stage_bin_list,omitempty"`
}

func (x *GravenInnocenceCampBin) Reset() {
	*x = GravenInnocenceCampBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocenceCampBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocenceCampBin) ProtoMessage() {}

func (x *GravenInnocenceCampBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocenceCampBin.ProtoReflect.Descriptor instead.
func (*GravenInnocenceCampBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{265}
}

func (x *GravenInnocenceCampBin) GetStageBinList() []*GravenInnocenceCampStageBin {
	if x != nil {
		return x.StageBinList
	}
	return nil
}

type GravenInnocenceRaceLevelBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId  uint32 `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsOpen   bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	MaxScore uint32 `protobuf:"varint,3,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
}

func (x *GravenInnocenceRaceLevelBin) Reset() {
	*x = GravenInnocenceRaceLevelBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocenceRaceLevelBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocenceRaceLevelBin) ProtoMessage() {}

func (x *GravenInnocenceRaceLevelBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocenceRaceLevelBin.ProtoReflect.Descriptor instead.
func (*GravenInnocenceRaceLevelBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{266}
}

func (x *GravenInnocenceRaceLevelBin) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *GravenInnocenceRaceLevelBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *GravenInnocenceRaceLevelBin) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

type GravenInnocenceRaceBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelBinList []*GravenInnocenceRaceLevelBin `protobuf:"bytes,1,rep,name=level_bin_list,json=levelBinList,proto3" json:"level_bin_list,omitempty"`
}

func (x *GravenInnocenceRaceBin) Reset() {
	*x = GravenInnocenceRaceBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocenceRaceBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocenceRaceBin) ProtoMessage() {}

func (x *GravenInnocenceRaceBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocenceRaceBin.ProtoReflect.Descriptor instead.
func (*GravenInnocenceRaceBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{267}
}

func (x *GravenInnocenceRaceBin) GetLevelBinList() []*GravenInnocenceRaceLevelBin {
	if x != nil {
		return x.LevelBinList
	}
	return nil
}

type GravenInnocenceCarveStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen  bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *GravenInnocenceCarveStageBin) Reset() {
	*x = GravenInnocenceCarveStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocenceCarveStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocenceCarveStageBin) ProtoMessage() {}

func (x *GravenInnocenceCarveStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocenceCarveStageBin.ProtoReflect.Descriptor instead.
func (*GravenInnocenceCarveStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{268}
}

func (x *GravenInnocenceCarveStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *GravenInnocenceCarveStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type GravenInnocenceCarveUsedItemBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GadgetConfigId  uint32          `protobuf:"varint,1,opt,name=gadget_config_id,json=gadgetConfigId,proto3" json:"gadget_config_id,omitempty"`
	NeedItemBinList []*ItemParamBin `protobuf:"bytes,2,rep,name=need_item_bin_list,json=needItemBinList,proto3" json:"need_item_bin_list,omitempty"`
	PassItemBinList []*ItemParamBin `protobuf:"bytes,3,rep,name=pass_item_bin_list,json=passItemBinList,proto3" json:"pass_item_bin_list,omitempty"`
}

func (x *GravenInnocenceCarveUsedItemBin) Reset() {
	*x = GravenInnocenceCarveUsedItemBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocenceCarveUsedItemBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocenceCarveUsedItemBin) ProtoMessage() {}

func (x *GravenInnocenceCarveUsedItemBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocenceCarveUsedItemBin.ProtoReflect.Descriptor instead.
func (*GravenInnocenceCarveUsedItemBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{269}
}

func (x *GravenInnocenceCarveUsedItemBin) GetGadgetConfigId() uint32 {
	if x != nil {
		return x.GadgetConfigId
	}
	return 0
}

func (x *GravenInnocenceCarveUsedItemBin) GetNeedItemBinList() []*ItemParamBin {
	if x != nil {
		return x.NeedItemBinList
	}
	return nil
}

func (x *GravenInnocenceCarveUsedItemBin) GetPassItemBinList() []*ItemParamBin {
	if x != nil {
		return x.PassItemBinList
	}
	return nil
}

type GravenInnocenceCarveBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageBinList    []*GravenInnocenceCarveStageBin    `protobuf:"bytes,1,rep,name=stage_bin_list,json=stageBinList,proto3" json:"stage_bin_list,omitempty"`
	UsedItemBinList []*GravenInnocenceCarveUsedItemBin `protobuf:"bytes,2,rep,name=used_item_bin_list,json=usedItemBinList,proto3" json:"used_item_bin_list,omitempty"`
}

func (x *GravenInnocenceCarveBin) Reset() {
	*x = GravenInnocenceCarveBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocenceCarveBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocenceCarveBin) ProtoMessage() {}

func (x *GravenInnocenceCarveBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocenceCarveBin.ProtoReflect.Descriptor instead.
func (*GravenInnocenceCarveBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{270}
}

func (x *GravenInnocenceCarveBin) GetStageBinList() []*GravenInnocenceCarveStageBin {
	if x != nil {
		return x.StageBinList
	}
	return nil
}

func (x *GravenInnocenceCarveBin) GetUsedItemBinList() []*GravenInnocenceCarveUsedItemBin {
	if x != nil {
		return x.UsedItemBinList
	}
	return nil
}

type GravenInnocenceScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhotoBin        *GravenInnocencePhotoBin `protobuf:"bytes,1,opt,name=photo_bin,json=photoBin,proto3" json:"photo_bin,omitempty"`
	CampBin         *GravenInnocenceCampBin  `protobuf:"bytes,2,opt,name=camp_bin,json=campBin,proto3" json:"camp_bin,omitempty"`
	CoinA           uint32                   `protobuf:"varint,3,opt,name=coin_a,json=coinA,proto3" json:"coin_a,omitempty"`
	CoinB           uint32                   `protobuf:"varint,4,opt,name=coin_b,json=coinB,proto3" json:"coin_b,omitempty"`
	RaceBin         *GravenInnocenceRaceBin  `protobuf:"bytes,5,opt,name=race_bin,json=raceBin,proto3" json:"race_bin,omitempty"`
	CarveBin        *GravenInnocenceCarveBin `protobuf:"bytes,6,opt,name=carve_bin,json=carveBin,proto3" json:"carve_bin,omitempty"`
	IsContentClosed bool                     `protobuf:"varint,7,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
}

func (x *GravenInnocenceScheduleBin) Reset() {
	*x = GravenInnocenceScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocenceScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocenceScheduleBin) ProtoMessage() {}

func (x *GravenInnocenceScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocenceScheduleBin.ProtoReflect.Descriptor instead.
func (*GravenInnocenceScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{271}
}

func (x *GravenInnocenceScheduleBin) GetPhotoBin() *GravenInnocencePhotoBin {
	if x != nil {
		return x.PhotoBin
	}
	return nil
}

func (x *GravenInnocenceScheduleBin) GetCampBin() *GravenInnocenceCampBin {
	if x != nil {
		return x.CampBin
	}
	return nil
}

func (x *GravenInnocenceScheduleBin) GetCoinA() uint32 {
	if x != nil {
		return x.CoinA
	}
	return 0
}

func (x *GravenInnocenceScheduleBin) GetCoinB() uint32 {
	if x != nil {
		return x.CoinB
	}
	return 0
}

func (x *GravenInnocenceScheduleBin) GetRaceBin() *GravenInnocenceRaceBin {
	if x != nil {
		return x.RaceBin
	}
	return nil
}

func (x *GravenInnocenceScheduleBin) GetCarveBin() *GravenInnocenceCarveBin {
	if x != nil {
		return x.CarveBin
	}
	return nil
}

func (x *GravenInnocenceScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

type InstableSprayStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId         uint32                      `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	MaxScore        uint32                      `protobuf:"varint,2,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	IsOpen          bool                        `protobuf:"varint,3,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	TeamInfoBinList []*InstableSprayTeamInfoBin `protobuf:"bytes,4,rep,name=team_info_bin_list,json=teamInfoBinList,proto3" json:"team_info_bin_list,omitempty"`
	IsFinished      bool                        `protobuf:"varint,5,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
}

func (x *InstableSprayStageBin) Reset() {
	*x = InstableSprayStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstableSprayStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstableSprayStageBin) ProtoMessage() {}

func (x *InstableSprayStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstableSprayStageBin.ProtoReflect.Descriptor instead.
func (*InstableSprayStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{272}
}

func (x *InstableSprayStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *InstableSprayStageBin) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *InstableSprayStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *InstableSprayStageBin) GetTeamInfoBinList() []*InstableSprayTeamInfoBin {
	if x != nil {
		return x.TeamInfoBinList
	}
	return nil
}

func (x *InstableSprayStageBin) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

type InstableSprayScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageBinList      []*InstableSprayStageBin `protobuf:"bytes,1,rep,name=stage_bin_list,json=stageBinList,proto3" json:"stage_bin_list,omitempty"`
	InDungeonGuidList []uint64                 `protobuf:"varint,2,rep,packed,name=in_dungeon_guid_list,json=inDungeonGuidList,proto3" json:"in_dungeon_guid_list,omitempty"`
}

func (x *InstableSprayScheduleBin) Reset() {
	*x = InstableSprayScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstableSprayScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstableSprayScheduleBin) ProtoMessage() {}

func (x *InstableSprayScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstableSprayScheduleBin.ProtoReflect.Descriptor instead.
func (*InstableSprayScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{273}
}

func (x *InstableSprayScheduleBin) GetStageBinList() []*InstableSprayStageBin {
	if x != nil {
		return x.StageBinList
	}
	return nil
}

func (x *InstableSprayScheduleBin) GetInDungeonGuidList() []uint64 {
	if x != nil {
		return x.InDungeonGuidList
	}
	return nil
}

type InstableSprayAvatarInfoBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId uint64 `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	IsTrial  bool   `protobuf:"varint,2,opt,name=is_trial,json=isTrial,proto3" json:"is_trial,omitempty"`
}

func (x *InstableSprayAvatarInfoBin) Reset() {
	*x = InstableSprayAvatarInfoBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstableSprayAvatarInfoBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstableSprayAvatarInfoBin) ProtoMessage() {}

func (x *InstableSprayAvatarInfoBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstableSprayAvatarInfoBin.ProtoReflect.Descriptor instead.
func (*InstableSprayAvatarInfoBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{274}
}

func (x *InstableSprayAvatarInfoBin) GetAvatarId() uint64 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *InstableSprayAvatarInfoBin) GetIsTrial() bool {
	if x != nil {
		return x.IsTrial
	}
	return false
}

type InstableSprayTeamInfoBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarInfoBinList []*InstableSprayAvatarInfoBin `protobuf:"bytes,1,rep,name=avatar_info_bin_list,json=avatarInfoBinList,proto3" json:"avatar_info_bin_list,omitempty"`
}

func (x *InstableSprayTeamInfoBin) Reset() {
	*x = InstableSprayTeamInfoBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstableSprayTeamInfoBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstableSprayTeamInfoBin) ProtoMessage() {}

func (x *InstableSprayTeamInfoBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstableSprayTeamInfoBin.ProtoReflect.Descriptor instead.
func (*InstableSprayTeamInfoBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{275}
}

func (x *InstableSprayTeamInfoBin) GetAvatarInfoBinList() []*InstableSprayAvatarInfoBin {
	if x != nil {
		return x.AvatarInfoBinList
	}
	return nil
}

type MuqadasPotionLevelDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId  uint32 `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsOpen   bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	MaxScore uint32 `protobuf:"varint,3,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
}

func (x *MuqadasPotionLevelDataBin) Reset() {
	*x = MuqadasPotionLevelDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuqadasPotionLevelDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuqadasPotionLevelDataBin) ProtoMessage() {}

func (x *MuqadasPotionLevelDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuqadasPotionLevelDataBin.ProtoReflect.Descriptor instead.
func (*MuqadasPotionLevelDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{276}
}

func (x *MuqadasPotionLevelDataBin) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *MuqadasPotionLevelDataBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *MuqadasPotionLevelDataBin) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

type MuqadasPotionScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelBinList            []*MuqadasPotionLevelDataBin `protobuf:"bytes,1,rep,name=level_bin_list,json=levelBinList,proto3" json:"level_bin_list,omitempty"`
	InDungeonAvatarGuidList []uint64                     `protobuf:"varint,2,rep,packed,name=in_dungeon_avatar_guid_list,json=inDungeonAvatarGuidList,proto3" json:"in_dungeon_avatar_guid_list,omitempty"`
}

func (x *MuqadasPotionScheduleBin) Reset() {
	*x = MuqadasPotionScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuqadasPotionScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuqadasPotionScheduleBin) ProtoMessage() {}

func (x *MuqadasPotionScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuqadasPotionScheduleBin.ProtoReflect.Descriptor instead.
func (*MuqadasPotionScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{277}
}

func (x *MuqadasPotionScheduleBin) GetLevelBinList() []*MuqadasPotionLevelDataBin {
	if x != nil {
		return x.LevelBinList
	}
	return nil
}

func (x *MuqadasPotionScheduleBin) GetInDungeonAvatarGuidList() []uint64 {
	if x != nil {
		return x.InDungeonAvatarGuidList
	}
	return nil
}

type TreasureSeelieRegionBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenDay                 uint32   `protobuf:"varint,1,opt,name=open_day,json=openDay,proto3" json:"open_day,omitempty"`
	IsOpen                  bool     `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	OpenedChestConfigIdList []uint32 `protobuf:"varint,3,rep,packed,name=opened_chest_config_id_list,json=openedChestConfigIdList,proto3" json:"opened_chest_config_id_list,omitempty"`
	IsDone                  bool     `protobuf:"varint,4,opt,name=is_done,json=isDone,proto3" json:"is_done,omitempty"`
}

func (x *TreasureSeelieRegionBin) Reset() {
	*x = TreasureSeelieRegionBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureSeelieRegionBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureSeelieRegionBin) ProtoMessage() {}

func (x *TreasureSeelieRegionBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureSeelieRegionBin.ProtoReflect.Descriptor instead.
func (*TreasureSeelieRegionBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{278}
}

func (x *TreasureSeelieRegionBin) GetOpenDay() uint32 {
	if x != nil {
		return x.OpenDay
	}
	return 0
}

func (x *TreasureSeelieRegionBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *TreasureSeelieRegionBin) GetOpenedChestConfigIdList() []uint32 {
	if x != nil {
		return x.OpenedChestConfigIdList
	}
	return nil
}

func (x *TreasureSeelieRegionBin) GetIsDone() bool {
	if x != nil {
		return x.IsDone
	}
	return false
}

type TreasureSeelieScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinNum         uint32                     `protobuf:"varint,1,opt,name=coin_num,json=coinNum,proto3" json:"coin_num,omitempty"`
	RegionList      []*TreasureSeelieRegionBin `protobuf:"bytes,2,rep,name=region_list,json=regionList,proto3" json:"region_list,omitempty"`
	IsContentClosed bool                       `protobuf:"varint,3,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
}

func (x *TreasureSeelieScheduleBin) Reset() {
	*x = TreasureSeelieScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureSeelieScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureSeelieScheduleBin) ProtoMessage() {}

func (x *TreasureSeelieScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureSeelieScheduleBin.ProtoReflect.Descriptor instead.
func (*TreasureSeelieScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{279}
}

func (x *TreasureSeelieScheduleBin) GetCoinNum() uint32 {
	if x != nil {
		return x.CoinNum
	}
	return 0
}

func (x *TreasureSeelieScheduleBin) GetRegionList() []*TreasureSeelieRegionBin {
	if x != nil {
		return x.RegionList
	}
	return nil
}

func (x *TreasureSeelieScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

type RockBoardExploreStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId  uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen   bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	IsFinish bool   `protobuf:"varint,3,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
}

func (x *RockBoardExploreStageBin) Reset() {
	*x = RockBoardExploreStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RockBoardExploreStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RockBoardExploreStageBin) ProtoMessage() {}

func (x *RockBoardExploreStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RockBoardExploreStageBin.ProtoReflect.Descriptor instead.
func (*RockBoardExploreStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{280}
}

func (x *RockBoardExploreStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *RockBoardExploreStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *RockBoardExploreStageBin) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

type RockBoardExploreScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageBinList []*RockBoardExploreStageBin `protobuf:"bytes,1,rep,name=stage_bin_list,json=stageBinList,proto3" json:"stage_bin_list,omitempty"`
}

func (x *RockBoardExploreScheduleBin) Reset() {
	*x = RockBoardExploreScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RockBoardExploreScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RockBoardExploreScheduleBin) ProtoMessage() {}

func (x *RockBoardExploreScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RockBoardExploreScheduleBin.ProtoReflect.Descriptor instead.
func (*RockBoardExploreScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{281}
}

func (x *RockBoardExploreScheduleBin) GetStageBinList() []*RockBoardExploreStageBin {
	if x != nil {
		return x.StageBinList
	}
	return nil
}

type VintageHuntingStageDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId     uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen      bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	IsFinish    bool   `protobuf:"varint,3,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	RecordValue uint32 `protobuf:"varint,4,opt,name=record_value,json=recordValue,proto3" json:"record_value,omitempty"`
}

func (x *VintageHuntingStageDataBin) Reset() {
	*x = VintageHuntingStageDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageHuntingStageDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageHuntingStageDataBin) ProtoMessage() {}

func (x *VintageHuntingStageDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageHuntingStageDataBin.ProtoReflect.Descriptor instead.
func (*VintageHuntingStageDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{282}
}

func (x *VintageHuntingStageDataBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *VintageHuntingStageDataBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *VintageHuntingStageDataBin) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *VintageHuntingStageDataBin) GetRecordValue() uint32 {
	if x != nil {
		return x.RecordValue
	}
	return 0
}

type VintagePresentLevelDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresentId uint32 `protobuf:"varint,1,opt,name=present_id,json=presentId,proto3" json:"present_id,omitempty"`
	StageId   uint32 `protobuf:"varint,2,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen    bool   `protobuf:"varint,3,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	IsFinish  bool   `protobuf:"varint,4,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
}

func (x *VintagePresentLevelDataBin) Reset() {
	*x = VintagePresentLevelDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintagePresentLevelDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintagePresentLevelDataBin) ProtoMessage() {}

func (x *VintagePresentLevelDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintagePresentLevelDataBin.ProtoReflect.Descriptor instead.
func (*VintagePresentLevelDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{283}
}

func (x *VintagePresentLevelDataBin) GetPresentId() uint32 {
	if x != nil {
		return x.PresentId
	}
	return 0
}

func (x *VintagePresentLevelDataBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *VintagePresentLevelDataBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *VintagePresentLevelDataBin) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

type VintagePresentStageDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId         uint32                                 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen          bool                                   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	IsFinish        bool                                   `protobuf:"varint,3,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	PresentLevelMap map[uint32]*VintagePresentLevelDataBin `protobuf:"bytes,4,rep,name=present_level_map,json=presentLevelMap,proto3" json:"present_level_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VintagePresentStageDataBin) Reset() {
	*x = VintagePresentStageDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintagePresentStageDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintagePresentStageDataBin) ProtoMessage() {}

func (x *VintagePresentStageDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintagePresentStageDataBin.ProtoReflect.Descriptor instead.
func (*VintagePresentStageDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{284}
}

func (x *VintagePresentStageDataBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *VintagePresentStageDataBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *VintagePresentStageDataBin) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *VintagePresentStageDataBin) GetPresentLevelMap() map[uint32]*VintagePresentLevelDataBin {
	if x != nil {
		return x.PresentLevelMap
	}
	return nil
}

type VintageBoothUsedItemDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GadgetId uint32 `protobuf:"varint,1,opt,name=gadget_id,json=gadgetId,proto3" json:"gadget_id,omitempty"`
	IsOpen   bool   `protobuf:"varint,3,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *VintageBoothUsedItemDataBin) Reset() {
	*x = VintageBoothUsedItemDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageBoothUsedItemDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageBoothUsedItemDataBin) ProtoMessage() {}

func (x *VintageBoothUsedItemDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageBoothUsedItemDataBin.ProtoReflect.Descriptor instead.
func (*VintageBoothUsedItemDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{285}
}

func (x *VintageBoothUsedItemDataBin) GetGadgetId() uint32 {
	if x != nil {
		return x.GadgetId
	}
	return 0
}

func (x *VintageBoothUsedItemDataBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type VintageCampChallengeLevelDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId  uint32 `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	StageId  uint32 `protobuf:"varint,2,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen   bool   `protobuf:"varint,3,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	IsFinish bool   `protobuf:"varint,4,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
}

func (x *VintageCampChallengeLevelDataBin) Reset() {
	*x = VintageCampChallengeLevelDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageCampChallengeLevelDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageCampChallengeLevelDataBin) ProtoMessage() {}

func (x *VintageCampChallengeLevelDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageCampChallengeLevelDataBin.ProtoReflect.Descriptor instead.
func (*VintageCampChallengeLevelDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{286}
}

func (x *VintageCampChallengeLevelDataBin) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *VintageCampChallengeLevelDataBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *VintageCampChallengeLevelDataBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *VintageCampChallengeLevelDataBin) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

type VintageCampChallengeStageDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId          uint32                                       `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	CampLevelMap     map[uint32]*VintageCampChallengeLevelDataBin `protobuf:"bytes,2,rep,name=camp_level_map,json=campLevelMap,proto3" json:"camp_level_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsOpen           bool                                         `protobuf:"varint,3,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	IsFinish         bool                                         `protobuf:"varint,4,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	MaxFinishedLevel uint32                                       `protobuf:"varint,5,opt,name=max_finished_level,json=maxFinishedLevel,proto3" json:"max_finished_level,omitempty"`
}

func (x *VintageCampChallengeStageDataBin) Reset() {
	*x = VintageCampChallengeStageDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageCampChallengeStageDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageCampChallengeStageDataBin) ProtoMessage() {}

func (x *VintageCampChallengeStageDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageCampChallengeStageDataBin.ProtoReflect.Descriptor instead.
func (*VintageCampChallengeStageDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{287}
}

func (x *VintageCampChallengeStageDataBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *VintageCampChallengeStageDataBin) GetCampLevelMap() map[uint32]*VintageCampChallengeLevelDataBin {
	if x != nil {
		return x.CampLevelMap
	}
	return nil
}

func (x *VintageCampChallengeStageDataBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *VintageCampChallengeStageDataBin) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *VintageCampChallengeStageDataBin) GetMaxFinishedLevel() uint32 {
	if x != nil {
		return x.MaxFinishedLevel
	}
	return 0
}

type VintageTraderDealBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraderId     uint32           `protobuf:"varint,1,opt,name=trader_id,json=traderId,proto3" json:"trader_id,omitempty"`
	DealItemList []*Uint32PairBin `protobuf:"bytes,2,rep,name=deal_item_list,json=dealItemList,proto3" json:"deal_item_list,omitempty"`
}

func (x *VintageTraderDealBin) Reset() {
	*x = VintageTraderDealBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageTraderDealBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageTraderDealBin) ProtoMessage() {}

func (x *VintageTraderDealBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageTraderDealBin.ProtoReflect.Descriptor instead.
func (*VintageTraderDealBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{288}
}

func (x *VintageTraderDealBin) GetTraderId() uint32 {
	if x != nil {
		return x.TraderId
	}
	return 0
}

func (x *VintageTraderDealBin) GetDealItemList() []*Uint32PairBin {
	if x != nil {
		return x.DealItemList
	}
	return nil
}

type VintageBargainBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BargainId uint32 `protobuf:"varint,1,opt,name=bargain_id,json=bargainId,proto3" json:"bargain_id,omitempty"`
	Price     uint32 `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	IsSucc    bool   `protobuf:"varint,3,opt,name=is_succ,json=isSucc,proto3" json:"is_succ,omitempty"`
}

func (x *VintageBargainBin) Reset() {
	*x = VintageBargainBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageBargainBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageBargainBin) ProtoMessage() {}

func (x *VintageBargainBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageBargainBin.ProtoReflect.Descriptor instead.
func (*VintageBargainBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{289}
}

func (x *VintageBargainBin) GetBargainId() uint32 {
	if x != nil {
		return x.BargainId
	}
	return 0
}

func (x *VintageBargainBin) GetPrice() uint32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *VintageBargainBin) GetIsSucc() bool {
	if x != nil {
		return x.IsSucc
	}
	return false
}

type VintageStoreAttrRandomPoolBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId uint32   `protobuf:"varint,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	PoolList   []uint32 `protobuf:"varint,2,rep,packed,name=pool_list,json=poolList,proto3" json:"pool_list,omitempty"`
}

func (x *VintageStoreAttrRandomPoolBin) Reset() {
	*x = VintageStoreAttrRandomPoolBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageStoreAttrRandomPoolBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageStoreAttrRandomPoolBin) ProtoMessage() {}

func (x *VintageStoreAttrRandomPoolBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageStoreAttrRandomPoolBin.ProtoReflect.Descriptor instead.
func (*VintageStoreAttrRandomPoolBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{290}
}

func (x *VintageStoreAttrRandomPoolBin) GetTemplateId() uint32 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *VintageStoreAttrRandomPoolBin) GetPoolList() []uint32 {
	if x != nil {
		return x.PoolList
	}
	return nil
}

type VintageStoreBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreId            uint32                           `protobuf:"varint,1,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	AttrList           []uint32                         `protobuf:"varint,2,rep,packed,name=attr_list,json=attrList,proto3" json:"attr_list,omitempty"`
	AttrRandomPoolList []*VintageStoreAttrRandomPoolBin `protobuf:"bytes,3,rep,name=attr_random_pool_list,json=attrRandomPoolList,proto3" json:"attr_random_pool_list,omitempty"`
	AimAttrList        []uint32                         `protobuf:"varint,4,rep,packed,name=aim_attr_list,json=aimAttrList,proto3" json:"aim_attr_list,omitempty"`
	SlotCount          uint32                           `protobuf:"varint,5,opt,name=slot_count,json=slotCount,proto3" json:"slot_count,omitempty"`
	ChosenSkillList    []uint32                         `protobuf:"varint,6,rep,packed,name=chosen_skill_list,json=chosenSkillList,proto3" json:"chosen_skill_list,omitempty"`
}

func (x *VintageStoreBin) Reset() {
	*x = VintageStoreBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageStoreBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageStoreBin) ProtoMessage() {}

func (x *VintageStoreBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageStoreBin.ProtoReflect.Descriptor instead.
func (*VintageStoreBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{291}
}

func (x *VintageStoreBin) GetStoreId() uint32 {
	if x != nil {
		return x.StoreId
	}
	return 0
}

func (x *VintageStoreBin) GetAttrList() []uint32 {
	if x != nil {
		return x.AttrList
	}
	return nil
}

func (x *VintageStoreBin) GetAttrRandomPoolList() []*VintageStoreAttrRandomPoolBin {
	if x != nil {
		return x.AttrRandomPoolList
	}
	return nil
}

func (x *VintageStoreBin) GetAimAttrList() []uint32 {
	if x != nil {
		return x.AimAttrList
	}
	return nil
}

func (x *VintageStoreBin) GetSlotCount() uint32 {
	if x != nil {
		return x.SlotCount
	}
	return 0
}

func (x *VintageStoreBin) GetChosenSkillList() []uint32 {
	if x != nil {
		return x.ChosenSkillList
	}
	return nil
}

type VintageNpcEventBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId           uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	MaxEffectiveRound uint32 `protobuf:"varint,2,opt,name=max_effective_round,json=maxEffectiveRound,proto3" json:"max_effective_round,omitempty"`
	IsFinish          bool   `protobuf:"varint,3,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
}

func (x *VintageNpcEventBin) Reset() {
	*x = VintageNpcEventBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageNpcEventBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageNpcEventBin) ProtoMessage() {}

func (x *VintageNpcEventBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageNpcEventBin.ProtoReflect.Descriptor instead.
func (*VintageNpcEventBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{292}
}

func (x *VintageNpcEventBin) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *VintageNpcEventBin) GetMaxEffectiveRound() uint32 {
	if x != nil {
		return x.MaxEffectiveRound
	}
	return 0
}

func (x *VintageNpcEventBin) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

type VintageScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Popularity               uint32                                       `protobuf:"varint,1,opt,name=popularity,proto3" json:"popularity,omitempty"`
	HuntingStageMap          map[uint32]*VintageHuntingStageDataBin       `protobuf:"bytes,2,rep,name=hunting_stage_map,json=huntingStageMap,proto3" json:"hunting_stage_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PresentStageMap          map[uint32]*VintagePresentStageDataBin       `protobuf:"bytes,3,rep,name=present_stage_map,json=presentStageMap,proto3" json:"present_stage_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BoothData                *VintageBoothUsedItemDataBin                 `protobuf:"bytes,4,opt,name=booth_data,json=boothData,proto3" json:"booth_data,omitempty"`
	CampStageMap             map[uint32]*VintageCampChallengeStageDataBin `protobuf:"bytes,5,rep,name=camp_stage_map,json=campStageMap,proto3" json:"camp_stage_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CollectedItemNum         uint32                                       `protobuf:"varint,6,opt,name=collected_item_num,json=collectedItemNum,proto3" json:"collected_item_num,omitempty"`
	IsContentClosed          bool                                         `protobuf:"varint,7,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	MarketCoinA              uint32                                       `protobuf:"varint,8,opt,name=market_coin_a,json=marketCoinA,proto3" json:"market_coin_a,omitempty"`
	MarketCoinB              uint32                                       `protobuf:"varint,9,opt,name=market_coin_b,json=marketCoinB,proto3" json:"market_coin_b,omitempty"`
	MarketCoinC              uint32                                       `protobuf:"varint,10,opt,name=market_coin_c,json=marketCoinC,proto3" json:"market_coin_c,omitempty"`
	IsMarketContentOpen      bool                                         `protobuf:"varint,11,opt,name=is_market_content_open,json=isMarketContentOpen,proto3" json:"is_market_content_open,omitempty"`
	IsMarketContentFinish    bool                                         `protobuf:"varint,12,opt,name=is_market_content_finish,json=isMarketContentFinish,proto3" json:"is_market_content_finish,omitempty"`
	TraderList               []*VintageTraderDealBin                      `protobuf:"bytes,13,rep,name=trader_list,json=traderList,proto3" json:"trader_list,omitempty"`
	BargainList              []*VintageBargainBin                         `protobuf:"bytes,14,rep,name=bargain_list,json=bargainList,proto3" json:"bargain_list,omitempty"`
	StoreList                []*VintageStoreBin                           `protobuf:"bytes,15,rep,name=store_list,json=storeList,proto3" json:"store_list,omitempty"`
	StoreRound               uint32                                       `protobuf:"varint,16,opt,name=store_round,json=storeRound,proto3" json:"store_round,omitempty"`
	PrevCoinBNum             uint32                                       `protobuf:"varint,17,opt,name=prev_coin_b_num,json=prevCoinBNum,proto3" json:"prev_coin_b_num,omitempty"`
	PrevCoinCNum             uint32                                       `protobuf:"varint,18,opt,name=prev_coin_c_num,json=prevCoinCNum,proto3" json:"prev_coin_c_num,omitempty"`
	IsRoundTipsView          bool                                         `protobuf:"varint,19,opt,name=is_round_tips_view,json=isRoundTipsView,proto3" json:"is_round_tips_view,omitempty"`
	TakenRewardPresentIdList []uint32                                     `protobuf:"varint,20,rep,packed,name=taken_reward_present_id_list,json=takenRewardPresentIdList,proto3" json:"taken_reward_present_id_list,omitempty"`
	IsStoreContentFinish     bool                                         `protobuf:"varint,21,opt,name=is_store_content_finish,json=isStoreContentFinish,proto3" json:"is_store_content_finish,omitempty"`
	IsStoreContentInterrupt  bool                                         `protobuf:"varint,22,opt,name=is_store_content_interrupt,json=isStoreContentInterrupt,proto3" json:"is_store_content_interrupt,omitempty"`
	EnvEventList             []*Uint32PairBin                             `protobuf:"bytes,23,rep,name=env_event_list,json=envEventList,proto3" json:"env_event_list,omitempty"`
	NpcEventList             []*VintageNpcEventBin                        `protobuf:"bytes,24,rep,name=npc_event_list,json=npcEventList,proto3" json:"npc_event_list,omitempty"`
	SkillList                []uint32                                     `protobuf:"varint,25,rep,packed,name=skill_list,json=skillList,proto3" json:"skill_list,omitempty"`
	ViewedSkillList          []uint32                                     `protobuf:"varint,26,rep,packed,name=viewed_skill_list,json=viewedSkillList,proto3" json:"viewed_skill_list,omitempty"`
	IsStrategyModuleOpen     bool                                         `protobuf:"varint,27,opt,name=is_strategy_module_open,json=isStrategyModuleOpen,proto3" json:"is_strategy_module_open,omitempty"`
	IsHelpModuleOpen         bool                                         `protobuf:"varint,28,opt,name=is_help_module_open,json=isHelpModuleOpen,proto3" json:"is_help_module_open,omitempty"`
	NextCanUseHelpRound      uint32                                       `protobuf:"varint,29,opt,name=next_can_use_help_round,json=nextCanUseHelpRound,proto3" json:"next_can_use_help_round,omitempty"`
	HelpSkillId              uint32                                       `protobuf:"varint,30,opt,name=help_skill_id,json=helpSkillId,proto3" json:"help_skill_id,omitempty"`
	DividendResMap           map[uint32]*Uint32PairBin                    `protobuf:"bytes,31,rep,name=dividend_res_map,json=dividendResMap,proto3" json:"dividend_res_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DividendId               uint32                                       `protobuf:"varint,32,opt,name=dividend_id,json=dividendId,proto3" json:"dividend_id,omitempty"`
	DividendRewardCount      uint32                                       `protobuf:"varint,33,opt,name=dividend_reward_count,json=dividendRewardCount,proto3" json:"dividend_reward_count,omitempty"`
	HuntingBossWeakCount     uint32                                       `protobuf:"varint,34,opt,name=hunting_boss_weak_count,json=huntingBossWeakCount,proto3" json:"hunting_boss_weak_count,omitempty"`
	StoreRoundIncomeList     []uint32                                     `protobuf:"varint,35,rep,packed,name=store_round_income_list,json=storeRoundIncomeList,proto3" json:"store_round_income_list,omitempty"`
}

func (x *VintageScheduleBin) Reset() {
	*x = VintageScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageScheduleBin) ProtoMessage() {}

func (x *VintageScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageScheduleBin.ProtoReflect.Descriptor instead.
func (*VintageScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{293}
}

func (x *VintageScheduleBin) GetPopularity() uint32 {
	if x != nil {
		return x.Popularity
	}
	return 0
}

func (x *VintageScheduleBin) GetHuntingStageMap() map[uint32]*VintageHuntingStageDataBin {
	if x != nil {
		return x.HuntingStageMap
	}
	return nil
}

func (x *VintageScheduleBin) GetPresentStageMap() map[uint32]*VintagePresentStageDataBin {
	if x != nil {
		return x.PresentStageMap
	}
	return nil
}

func (x *VintageScheduleBin) GetBoothData() *VintageBoothUsedItemDataBin {
	if x != nil {
		return x.BoothData
	}
	return nil
}

func (x *VintageScheduleBin) GetCampStageMap() map[uint32]*VintageCampChallengeStageDataBin {
	if x != nil {
		return x.CampStageMap
	}
	return nil
}

func (x *VintageScheduleBin) GetCollectedItemNum() uint32 {
	if x != nil {
		return x.CollectedItemNum
	}
	return 0
}

func (x *VintageScheduleBin) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *VintageScheduleBin) GetMarketCoinA() uint32 {
	if x != nil {
		return x.MarketCoinA
	}
	return 0
}

func (x *VintageScheduleBin) GetMarketCoinB() uint32 {
	if x != nil {
		return x.MarketCoinB
	}
	return 0
}

func (x *VintageScheduleBin) GetMarketCoinC() uint32 {
	if x != nil {
		return x.MarketCoinC
	}
	return 0
}

func (x *VintageScheduleBin) GetIsMarketContentOpen() bool {
	if x != nil {
		return x.IsMarketContentOpen
	}
	return false
}

func (x *VintageScheduleBin) GetIsMarketContentFinish() bool {
	if x != nil {
		return x.IsMarketContentFinish
	}
	return false
}

func (x *VintageScheduleBin) GetTraderList() []*VintageTraderDealBin {
	if x != nil {
		return x.TraderList
	}
	return nil
}

func (x *VintageScheduleBin) GetBargainList() []*VintageBargainBin {
	if x != nil {
		return x.BargainList
	}
	return nil
}

func (x *VintageScheduleBin) GetStoreList() []*VintageStoreBin {
	if x != nil {
		return x.StoreList
	}
	return nil
}

func (x *VintageScheduleBin) GetStoreRound() uint32 {
	if x != nil {
		return x.StoreRound
	}
	return 0
}

func (x *VintageScheduleBin) GetPrevCoinBNum() uint32 {
	if x != nil {
		return x.PrevCoinBNum
	}
	return 0
}

func (x *VintageScheduleBin) GetPrevCoinCNum() uint32 {
	if x != nil {
		return x.PrevCoinCNum
	}
	return 0
}

func (x *VintageScheduleBin) GetIsRoundTipsView() bool {
	if x != nil {
		return x.IsRoundTipsView
	}
	return false
}

func (x *VintageScheduleBin) GetTakenRewardPresentIdList() []uint32 {
	if x != nil {
		return x.TakenRewardPresentIdList
	}
	return nil
}

func (x *VintageScheduleBin) GetIsStoreContentFinish() bool {
	if x != nil {
		return x.IsStoreContentFinish
	}
	return false
}

func (x *VintageScheduleBin) GetIsStoreContentInterrupt() bool {
	if x != nil {
		return x.IsStoreContentInterrupt
	}
	return false
}

func (x *VintageScheduleBin) GetEnvEventList() []*Uint32PairBin {
	if x != nil {
		return x.EnvEventList
	}
	return nil
}

func (x *VintageScheduleBin) GetNpcEventList() []*VintageNpcEventBin {
	if x != nil {
		return x.NpcEventList
	}
	return nil
}

func (x *VintageScheduleBin) GetSkillList() []uint32 {
	if x != nil {
		return x.SkillList
	}
	return nil
}

func (x *VintageScheduleBin) GetViewedSkillList() []uint32 {
	if x != nil {
		return x.ViewedSkillList
	}
	return nil
}

func (x *VintageScheduleBin) GetIsStrategyModuleOpen() bool {
	if x != nil {
		return x.IsStrategyModuleOpen
	}
	return false
}

func (x *VintageScheduleBin) GetIsHelpModuleOpen() bool {
	if x != nil {
		return x.IsHelpModuleOpen
	}
	return false
}

func (x *VintageScheduleBin) GetNextCanUseHelpRound() uint32 {
	if x != nil {
		return x.NextCanUseHelpRound
	}
	return 0
}

func (x *VintageScheduleBin) GetHelpSkillId() uint32 {
	if x != nil {
		return x.HelpSkillId
	}
	return 0
}

func (x *VintageScheduleBin) GetDividendResMap() map[uint32]*Uint32PairBin {
	if x != nil {
		return x.DividendResMap
	}
	return nil
}

func (x *VintageScheduleBin) GetDividendId() uint32 {
	if x != nil {
		return x.DividendId
	}
	return 0
}

func (x *VintageScheduleBin) GetDividendRewardCount() uint32 {
	if x != nil {
		return x.DividendRewardCount
	}
	return 0
}

func (x *VintageScheduleBin) GetHuntingBossWeakCount() uint32 {
	if x != nil {
		return x.HuntingBossWeakCount
	}
	return 0
}

func (x *VintageScheduleBin) GetStoreRoundIncomeList() []uint32 {
	if x != nil {
		return x.StoreRoundIncomeList
	}
	return nil
}

type WindFieldScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageBinList []*WindFieldStageBin `protobuf:"bytes,1,rep,name=stage_bin_list,json=stageBinList,proto3" json:"stage_bin_list,omitempty"`
}

func (x *WindFieldScheduleBin) Reset() {
	*x = WindFieldScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindFieldScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindFieldScheduleBin) ProtoMessage() {}

func (x *WindFieldScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindFieldScheduleBin.ProtoReflect.Descriptor instead.
func (*WindFieldScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{294}
}

func (x *WindFieldScheduleBin) GetStageBinList() []*WindFieldStageBin {
	if x != nil {
		return x.StageBinList
	}
	return nil
}

type WindFieldStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen  bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *WindFieldStageBin) Reset() {
	*x = WindFieldStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindFieldStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindFieldStageBin) ProtoMessage() {}

func (x *WindFieldStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindFieldStageBin.ProtoReflect.Descriptor instead.
func (*WindFieldStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{295}
}

func (x *WindFieldStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *WindFieldStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type ActivityGeneralCoinBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinType uint32 `protobuf:"varint,1,opt,name=coin_type,json=coinType,proto3" json:"coin_type,omitempty"`
	CoinNum  uint32 `protobuf:"varint,2,opt,name=coin_num,json=coinNum,proto3" json:"coin_num,omitempty"`
}

func (x *ActivityGeneralCoinBin) Reset() {
	*x = ActivityGeneralCoinBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityGeneralCoinBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityGeneralCoinBin) ProtoMessage() {}

func (x *ActivityGeneralCoinBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityGeneralCoinBin.ProtoReflect.Descriptor instead.
func (*ActivityGeneralCoinBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{296}
}

func (x *ActivityGeneralCoinBin) GetCoinType() uint32 {
	if x != nil {
		return x.CoinType
	}
	return 0
}

func (x *ActivityGeneralCoinBin) GetCoinNum() uint32 {
	if x != nil {
		return x.CoinNum
	}
	return 0
}

type FungusBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FungusId         uint32 `protobuf:"varint,1,opt,name=fungus_id,json=fungusId,proto3" json:"fungus_id,omitempty"`
	NameId           uint32 `protobuf:"varint,2,opt,name=name_id,json=nameId,proto3" json:"name_id,omitempty"`
	IsCultivate      bool   `protobuf:"varint,3,opt,name=is_cultivate,json=isCultivate,proto3" json:"is_cultivate,omitempty"`
	CaptureOrder     uint32 `protobuf:"varint,4,opt,name=capture_order,json=captureOrder,proto3" json:"capture_order,omitempty"`
	MinCultivateStep uint32 `protobuf:"varint,5,opt,name=min_cultivate_step,json=minCultivateStep,proto3" json:"min_cultivate_step,omitempty"`
}

func (x *FungusBin) Reset() {
	*x = FungusBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusBin) ProtoMessage() {}

func (x *FungusBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusBin.ProtoReflect.Descriptor instead.
func (*FungusBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{297}
}

func (x *FungusBin) GetFungusId() uint32 {
	if x != nil {
		return x.FungusId
	}
	return 0
}

func (x *FungusBin) GetNameId() uint32 {
	if x != nil {
		return x.NameId
	}
	return 0
}

func (x *FungusBin) GetIsCultivate() bool {
	if x != nil {
		return x.IsCultivate
	}
	return false
}

func (x *FungusBin) GetCaptureOrder() uint32 {
	if x != nil {
		return x.CaptureOrder
	}
	return 0
}

func (x *FungusBin) GetMinCultivateStep() uint32 {
	if x != nil {
		return x.MinCultivateStep
	}
	return 0
}

type FungusPlotStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen  bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *FungusPlotStageBin) Reset() {
	*x = FungusPlotStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusPlotStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusPlotStageBin) ProtoMessage() {}

func (x *FungusPlotStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusPlotStageBin.ProtoReflect.Descriptor instead.
func (*FungusPlotStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{298}
}

func (x *FungusPlotStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *FungusPlotStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type FungusTrainingDungeonBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonId uint32 `protobuf:"varint,1,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	IsOpen    bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	BestScore uint32 `protobuf:"varint,3,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
}

func (x *FungusTrainingDungeonBin) Reset() {
	*x = FungusTrainingDungeonBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusTrainingDungeonBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusTrainingDungeonBin) ProtoMessage() {}

func (x *FungusTrainingDungeonBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusTrainingDungeonBin.ProtoReflect.Descriptor instead.
func (*FungusTrainingDungeonBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{299}
}

func (x *FungusTrainingDungeonBin) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *FungusTrainingDungeonBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *FungusTrainingDungeonBin) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

type FungusFighterMonsterBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FungusId        uint32  `protobuf:"varint,1,opt,name=fungus_id,json=fungusId,proto3" json:"fungus_id,omitempty"`
	CurHpPercentage float32 `protobuf:"fixed32,2,opt,name=cur_hp_percentage,json=curHpPercentage,proto3" json:"cur_hp_percentage,omitempty"`
	IsAlive         bool    `protobuf:"varint,3,opt,name=is_alive,json=isAlive,proto3" json:"is_alive,omitempty"`
}

func (x *FungusFighterMonsterBin) Reset() {
	*x = FungusFighterMonsterBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusFighterMonsterBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusFighterMonsterBin) ProtoMessage() {}

func (x *FungusFighterMonsterBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusFighterMonsterBin.ProtoReflect.Descriptor instead.
func (*FungusFighterMonsterBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{300}
}

func (x *FungusFighterMonsterBin) GetFungusId() uint32 {
	if x != nil {
		return x.FungusId
	}
	return 0
}

func (x *FungusFighterMonsterBin) GetCurHpPercentage() float32 {
	if x != nil {
		return x.CurHpPercentage
	}
	return 0
}

func (x *FungusFighterMonsterBin) GetIsAlive() bool {
	if x != nil {
		return x.IsAlive
	}
	return false
}

type FungusTrainingShapshotDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonId          uint32                     `protobuf:"varint,1,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	SkillCount         uint32                     `protobuf:"varint,2,opt,name=skill_count,json=skillCount,proto3" json:"skill_count,omitempty"`
	CurRound           uint32                     `protobuf:"varint,3,opt,name=cur_round,json=curRound,proto3" json:"cur_round,omitempty"`
	MonsterBinList     []*FungusFighterMonsterBin `protobuf:"bytes,4,rep,name=monster_bin_list,json=monsterBinList,proto3" json:"monster_bin_list,omitempty"`
	ChoosenMonsterList []uint32                   `protobuf:"varint,5,rep,packed,name=choosen_monster_list,json=choosenMonsterList,proto3" json:"choosen_monster_list,omitempty"`
	BackupMonsterList  []uint32                   `protobuf:"varint,6,rep,packed,name=backup_monster_list,json=backupMonsterList,proto3" json:"backup_monster_list,omitempty"`
	TotalUsedTime      uint32                     `protobuf:"varint,7,opt,name=total_used_time,json=totalUsedTime,proto3" json:"total_used_time,omitempty"`
	RandIndex          uint32                     `protobuf:"varint,8,opt,name=rand_index,json=randIndex,proto3" json:"rand_index,omitempty"`
	MonsterPoolList    []uint32                   `protobuf:"varint,9,rep,packed,name=monster_pool_list,json=monsterPoolList,proto3" json:"monster_pool_list,omitempty"`
	LevelTransaction   string                     `protobuf:"bytes,10,opt,name=level_transaction,json=levelTransaction,proto3" json:"level_transaction,omitempty"`
}

func (x *FungusTrainingShapshotDataBin) Reset() {
	*x = FungusTrainingShapshotDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusTrainingShapshotDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusTrainingShapshotDataBin) ProtoMessage() {}

func (x *FungusTrainingShapshotDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusTrainingShapshotDataBin.ProtoReflect.Descriptor instead.
func (*FungusTrainingShapshotDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{301}
}

func (x *FungusTrainingShapshotDataBin) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *FungusTrainingShapshotDataBin) GetSkillCount() uint32 {
	if x != nil {
		return x.SkillCount
	}
	return 0
}

func (x *FungusTrainingShapshotDataBin) GetCurRound() uint32 {
	if x != nil {
		return x.CurRound
	}
	return 0
}

func (x *FungusTrainingShapshotDataBin) GetMonsterBinList() []*FungusFighterMonsterBin {
	if x != nil {
		return x.MonsterBinList
	}
	return nil
}

func (x *FungusTrainingShapshotDataBin) GetChoosenMonsterList() []uint32 {
	if x != nil {
		return x.ChoosenMonsterList
	}
	return nil
}

func (x *FungusTrainingShapshotDataBin) GetBackupMonsterList() []uint32 {
	if x != nil {
		return x.BackupMonsterList
	}
	return nil
}

func (x *FungusTrainingShapshotDataBin) GetTotalUsedTime() uint32 {
	if x != nil {
		return x.TotalUsedTime
	}
	return 0
}

func (x *FungusTrainingShapshotDataBin) GetRandIndex() uint32 {
	if x != nil {
		return x.RandIndex
	}
	return 0
}

func (x *FungusTrainingShapshotDataBin) GetMonsterPoolList() []uint32 {
	if x != nil {
		return x.MonsterPoolList
	}
	return nil
}

func (x *FungusTrainingShapshotDataBin) GetLevelTransaction() string {
	if x != nil {
		return x.LevelTransaction
	}
	return ""
}

type FungusTrainingProgressBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FungusSnapshotDataList []*FungusTrainingShapshotDataBin `protobuf:"bytes,1,rep,name=fungus_snapshot_data_list,json=fungusSnapshotDataList,proto3" json:"fungus_snapshot_data_list,omitempty"`
}

func (x *FungusTrainingProgressBin) Reset() {
	*x = FungusTrainingProgressBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusTrainingProgressBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusTrainingProgressBin) ProtoMessage() {}

func (x *FungusTrainingProgressBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusTrainingProgressBin.ProtoReflect.Descriptor instead.
func (*FungusTrainingProgressBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{302}
}

func (x *FungusTrainingProgressBin) GetFungusSnapshotDataList() []*FungusTrainingShapshotDataBin {
	if x != nil {
		return x.FungusSnapshotDataList
	}
	return nil
}

type FungusFighterScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FungusBinList                []*FungusBin                `protobuf:"bytes,1,rep,name=fungus_bin_list,json=fungusBinList,proto3" json:"fungus_bin_list,omitempty"`
	FungusPlotStageBinList       []*FungusPlotStageBin       `protobuf:"bytes,2,rep,name=fungus_plot_stage_bin_list,json=fungusPlotStageBinList,proto3" json:"fungus_plot_stage_bin_list,omitempty"`
	CaptureOrder                 uint32                      `protobuf:"varint,3,opt,name=capture_order,json=captureOrder,proto3" json:"capture_order,omitempty"`
	FungusTrainingDungeonBinList []*FungusTrainingDungeonBin `protobuf:"bytes,5,rep,name=fungus_training_dungeon_bin_list,json=fungusTrainingDungeonBinList,proto3" json:"fungus_training_dungeon_bin_list,omitempty"`
	UnlockCampIdList             []uint32                    `protobuf:"varint,6,rep,packed,name=unlock_camp_id_list,json=unlockCampIdList,proto3" json:"unlock_camp_id_list,omitempty"`
	UnlockCultivateIdList        []uint32                    `protobuf:"varint,7,rep,packed,name=unlock_cultivate_id_list,json=unlockCultivateIdList,proto3" json:"unlock_cultivate_id_list,omitempty"`
	FungusTrainingProgressBin    *FungusTrainingProgressBin  `protobuf:"bytes,8,opt,name=fungus_training_progress_bin,json=fungusTrainingProgressBin,proto3" json:"fungus_training_progress_bin,omitempty"`
}

func (x *FungusFighterScheduleBin) Reset() {
	*x = FungusFighterScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusFighterScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusFighterScheduleBin) ProtoMessage() {}

func (x *FungusFighterScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusFighterScheduleBin.ProtoReflect.Descriptor instead.
func (*FungusFighterScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{303}
}

func (x *FungusFighterScheduleBin) GetFungusBinList() []*FungusBin {
	if x != nil {
		return x.FungusBinList
	}
	return nil
}

func (x *FungusFighterScheduleBin) GetFungusPlotStageBinList() []*FungusPlotStageBin {
	if x != nil {
		return x.FungusPlotStageBinList
	}
	return nil
}

func (x *FungusFighterScheduleBin) GetCaptureOrder() uint32 {
	if x != nil {
		return x.CaptureOrder
	}
	return 0
}

func (x *FungusFighterScheduleBin) GetFungusTrainingDungeonBinList() []*FungusTrainingDungeonBin {
	if x != nil {
		return x.FungusTrainingDungeonBinList
	}
	return nil
}

func (x *FungusFighterScheduleBin) GetUnlockCampIdList() []uint32 {
	if x != nil {
		return x.UnlockCampIdList
	}
	return nil
}

func (x *FungusFighterScheduleBin) GetUnlockCultivateIdList() []uint32 {
	if x != nil {
		return x.UnlockCultivateIdList
	}
	return nil
}

func (x *FungusFighterScheduleBin) GetFungusTrainingProgressBin() *FungusTrainingProgressBin {
	if x != nil {
		return x.FungusTrainingProgressBin
	}
	return nil
}

type CharAmusementStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId    uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen     bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	FinishTime uint32 `protobuf:"varint,3,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
}

func (x *CharAmusementStageBin) Reset() {
	*x = CharAmusementStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharAmusementStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharAmusementStageBin) ProtoMessage() {}

func (x *CharAmusementStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharAmusementStageBin.ProtoReflect.Descriptor instead.
func (*CharAmusementStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{304}
}

func (x *CharAmusementStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *CharAmusementStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *CharAmusementStageBin) GetFinishTime() uint32 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

type CharAmusementScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageBinList      []*CharAmusementStageBin `protobuf:"bytes,1,rep,name=stage_bin_list,json=stageBinList,proto3" json:"stage_bin_list,omitempty"`
	InDungeonGuidList []uint64                 `protobuf:"varint,2,rep,packed,name=in_dungeon_guid_list,json=inDungeonGuidList,proto3" json:"in_dungeon_guid_list,omitempty"`
}

func (x *CharAmusementScheduleBin) Reset() {
	*x = CharAmusementScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharAmusementScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharAmusementScheduleBin) ProtoMessage() {}

func (x *CharAmusementScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharAmusementScheduleBin.ProtoReflect.Descriptor instead.
func (*CharAmusementScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{305}
}

func (x *CharAmusementScheduleBin) GetStageBinList() []*CharAmusementStageBin {
	if x != nil {
		return x.StageBinList
	}
	return nil
}

func (x *CharAmusementScheduleBin) GetInDungeonGuidList() []uint64 {
	if x != nil {
		return x.InDungeonGuidList
	}
	return nil
}

type EffigyChallengeV2LevelBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId                        uint32 `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	BestCostTime                   uint32 `protobuf:"varint,2,opt,name=best_cost_time,json=bestCostTime,proto3" json:"best_cost_time,omitempty"`
	IsLevelOpen                    bool   `protobuf:"varint,3,opt,name=is_level_open,json=isLevelOpen,proto3" json:"is_level_open,omitempty"`
	ChallengeModeDifficultyOpen    uint32 `protobuf:"varint,4,opt,name=challenge_mode_difficulty_open,json=challengeModeDifficultyOpen,proto3" json:"challenge_mode_difficulty_open,omitempty"`
	ChallengeModeLastChooseSkillNo uint32 `protobuf:"varint,5,opt,name=challenge_mode_last_choose_skill_no,json=challengeModeLastChooseSkillNo,proto3" json:"challenge_mode_last_choose_skill_no,omitempty"`
	ChallengeModeDifficultyPass    uint32 `protobuf:"varint,6,opt,name=challenge_mode_difficulty_pass,json=challengeModeDifficultyPass,proto3" json:"challenge_mode_difficulty_pass,omitempty"`
}

func (x *EffigyChallengeV2LevelBin) Reset() {
	*x = EffigyChallengeV2LevelBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffigyChallengeV2LevelBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffigyChallengeV2LevelBin) ProtoMessage() {}

func (x *EffigyChallengeV2LevelBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffigyChallengeV2LevelBin.ProtoReflect.Descriptor instead.
func (*EffigyChallengeV2LevelBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{306}
}

func (x *EffigyChallengeV2LevelBin) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *EffigyChallengeV2LevelBin) GetBestCostTime() uint32 {
	if x != nil {
		return x.BestCostTime
	}
	return 0
}

func (x *EffigyChallengeV2LevelBin) GetIsLevelOpen() bool {
	if x != nil {
		return x.IsLevelOpen
	}
	return false
}

func (x *EffigyChallengeV2LevelBin) GetChallengeModeDifficultyOpen() uint32 {
	if x != nil {
		return x.ChallengeModeDifficultyOpen
	}
	return 0
}

func (x *EffigyChallengeV2LevelBin) GetChallengeModeLastChooseSkillNo() uint32 {
	if x != nil {
		return x.ChallengeModeLastChooseSkillNo
	}
	return 0
}

func (x *EffigyChallengeV2LevelBin) GetChallengeModeDifficultyPass() uint32 {
	if x != nil {
		return x.ChallengeModeDifficultyPass
	}
	return 0
}

type EffigyChallengeV2ScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelBinList []*EffigyChallengeV2LevelBin `protobuf:"bytes,1,rep,name=level_bin_list,json=levelBinList,proto3" json:"level_bin_list,omitempty"`
}

func (x *EffigyChallengeV2ScheduleBin) Reset() {
	*x = EffigyChallengeV2ScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffigyChallengeV2ScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffigyChallengeV2ScheduleBin) ProtoMessage() {}

func (x *EffigyChallengeV2ScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffigyChallengeV2ScheduleBin.ProtoReflect.Descriptor instead.
func (*EffigyChallengeV2ScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{307}
}

func (x *EffigyChallengeV2ScheduleBin) GetLevelBinList() []*EffigyChallengeV2LevelBin {
	if x != nil {
		return x.LevelBinList
	}
	return nil
}

type CoinCollectTeamInfoBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChooseSkillNo       uint32   `protobuf:"varint,1,opt,name=choose_skill_no,json=chooseSkillNo,proto3" json:"choose_skill_no,omitempty"`
	AvatarIdList        []uint32 `protobuf:"varint,2,rep,packed,name=avatar_id_list,json=avatarIdList,proto3" json:"avatar_id_list,omitempty"`
	AvatarLvList        []uint32 `protobuf:"varint,3,rep,packed,name=avatar_lv_list,json=avatarLvList,proto3" json:"avatar_lv_list,omitempty"`
	IsHost              bool     `protobuf:"varint,4,opt,name=is_host,json=isHost,proto3" json:"is_host,omitempty"`
	PlayerUid           uint32   `protobuf:"varint,5,opt,name=player_uid,json=playerUid,proto3" json:"player_uid,omitempty"`
	AvatarCostumeIdList []uint32 `protobuf:"varint,6,rep,packed,name=avatar_costume_id_list,json=avatarCostumeIdList,proto3" json:"avatar_costume_id_list,omitempty"`
}

func (x *CoinCollectTeamInfoBin) Reset() {
	*x = CoinCollectTeamInfoBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinCollectTeamInfoBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinCollectTeamInfoBin) ProtoMessage() {}

func (x *CoinCollectTeamInfoBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinCollectTeamInfoBin.ProtoReflect.Descriptor instead.
func (*CoinCollectTeamInfoBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{308}
}

func (x *CoinCollectTeamInfoBin) GetChooseSkillNo() uint32 {
	if x != nil {
		return x.ChooseSkillNo
	}
	return 0
}

func (x *CoinCollectTeamInfoBin) GetAvatarIdList() []uint32 {
	if x != nil {
		return x.AvatarIdList
	}
	return nil
}

func (x *CoinCollectTeamInfoBin) GetAvatarLvList() []uint32 {
	if x != nil {
		return x.AvatarLvList
	}
	return nil
}

func (x *CoinCollectTeamInfoBin) GetIsHost() bool {
	if x != nil {
		return x.IsHost
	}
	return false
}

func (x *CoinCollectTeamInfoBin) GetPlayerUid() uint32 {
	if x != nil {
		return x.PlayerUid
	}
	return 0
}

func (x *CoinCollectTeamInfoBin) GetAvatarCostumeIdList() []uint32 {
	if x != nil {
		return x.AvatarCostumeIdList
	}
	return nil
}

type CoinCollectLevelBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId                uint32                    `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsLevelOpen            bool                      `protobuf:"varint,2,opt,name=is_level_open,json=isLevelOpen,proto3" json:"is_level_open,omitempty"`
	LastChooseSkillNo      uint32                    `protobuf:"varint,3,opt,name=last_choose_skill_no,json=lastChooseSkillNo,proto3" json:"last_choose_skill_no,omitempty"`
	SingleBestCollectNum   uint32                    `protobuf:"varint,4,opt,name=single_best_collect_num,json=singleBestCollectNum,proto3" json:"single_best_collect_num,omitempty"`
	SingleBestPassTimeMs   uint32                    `protobuf:"varint,5,opt,name=single_best_pass_time_ms,json=singleBestPassTimeMs,proto3" json:"single_best_pass_time_ms,omitempty"`
	SingleBestTeamInfo     *CoinCollectTeamInfoBin   `protobuf:"bytes,6,opt,name=single_best_team_info,json=singleBestTeamInfo,proto3" json:"single_best_team_info,omitempty"`
	DoubleBestCollectNum   uint32                    `protobuf:"varint,7,opt,name=double_best_collect_num,json=doubleBestCollectNum,proto3" json:"double_best_collect_num,omitempty"`
	DoubleBestPassTimeMs   uint32                    `protobuf:"varint,8,opt,name=double_best_pass_time_ms,json=doubleBestPassTimeMs,proto3" json:"double_best_pass_time_ms,omitempty"`
	DoubleBestTeamInfoList []*CoinCollectTeamInfoBin `protobuf:"bytes,9,rep,name=double_best_team_info_list,json=doubleBestTeamInfoList,proto3" json:"double_best_team_info_list,omitempty"`
	IsHaveWatchedCutscene  bool                      `protobuf:"varint,10,opt,name=is_have_watched_cutscene,json=isHaveWatchedCutscene,proto3" json:"is_have_watched_cutscene,omitempty"`
	IsHavePlaySingleLevel  bool                      `protobuf:"varint,11,opt,name=is_have_play_single_level,json=isHavePlaySingleLevel,proto3" json:"is_have_play_single_level,omitempty"`
	IsHavePlayDoubleLevel  bool                      `protobuf:"varint,12,opt,name=is_have_play_double_level,json=isHavePlayDoubleLevel,proto3" json:"is_have_play_double_level,omitempty"`
}

func (x *CoinCollectLevelBin) Reset() {
	*x = CoinCollectLevelBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinCollectLevelBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinCollectLevelBin) ProtoMessage() {}

func (x *CoinCollectLevelBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinCollectLevelBin.ProtoReflect.Descriptor instead.
func (*CoinCollectLevelBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{309}
}

func (x *CoinCollectLevelBin) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *CoinCollectLevelBin) GetIsLevelOpen() bool {
	if x != nil {
		return x.IsLevelOpen
	}
	return false
}

func (x *CoinCollectLevelBin) GetLastChooseSkillNo() uint32 {
	if x != nil {
		return x.LastChooseSkillNo
	}
	return 0
}

func (x *CoinCollectLevelBin) GetSingleBestCollectNum() uint32 {
	if x != nil {
		return x.SingleBestCollectNum
	}
	return 0
}

func (x *CoinCollectLevelBin) GetSingleBestPassTimeMs() uint32 {
	if x != nil {
		return x.SingleBestPassTimeMs
	}
	return 0
}

func (x *CoinCollectLevelBin) GetSingleBestTeamInfo() *CoinCollectTeamInfoBin {
	if x != nil {
		return x.SingleBestTeamInfo
	}
	return nil
}

func (x *CoinCollectLevelBin) GetDoubleBestCollectNum() uint32 {
	if x != nil {
		return x.DoubleBestCollectNum
	}
	return 0
}

func (x *CoinCollectLevelBin) GetDoubleBestPassTimeMs() uint32 {
	if x != nil {
		return x.DoubleBestPassTimeMs
	}
	return 0
}

func (x *CoinCollectLevelBin) GetDoubleBestTeamInfoList() []*CoinCollectTeamInfoBin {
	if x != nil {
		return x.DoubleBestTeamInfoList
	}
	return nil
}

func (x *CoinCollectLevelBin) GetIsHaveWatchedCutscene() bool {
	if x != nil {
		return x.IsHaveWatchedCutscene
	}
	return false
}

func (x *CoinCollectLevelBin) GetIsHavePlaySingleLevel() bool {
	if x != nil {
		return x.IsHavePlaySingleLevel
	}
	return false
}

func (x *CoinCollectLevelBin) GetIsHavePlayDoubleLevel() bool {
	if x != nil {
		return x.IsHavePlayDoubleLevel
	}
	return false
}

type CoinCollectScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelBinList []*CoinCollectLevelBin `protobuf:"bytes,1,rep,name=level_bin_list,json=levelBinList,proto3" json:"level_bin_list,omitempty"`
}

func (x *CoinCollectScheduleBin) Reset() {
	*x = CoinCollectScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinCollectScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinCollectScheduleBin) ProtoMessage() {}

func (x *CoinCollectScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinCollectScheduleBin.ProtoReflect.Descriptor instead.
func (*CoinCollectScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{310}
}

func (x *CoinCollectScheduleBin) GetLevelBinList() []*CoinCollectLevelBin {
	if x != nil {
		return x.LevelBinList
	}
	return nil
}

type BrickBreakerStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId              uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsWorldLevelUnlock   bool   `protobuf:"varint,2,opt,name=is_world_level_unlock,json=isWorldLevelUnlock,proto3" json:"is_world_level_unlock,omitempty"`
	IsDungeonLevelUnlock bool   `protobuf:"varint,3,opt,name=is_dungeon_level_unlock,json=isDungeonLevelUnlock,proto3" json:"is_dungeon_level_unlock,omitempty"`
	IsWorldLevelFinish   bool   `protobuf:"varint,4,opt,name=is_world_level_finish,json=isWorldLevelFinish,proto3" json:"is_world_level_finish,omitempty"`
	IsDungeonLevelFinish bool   `protobuf:"varint,5,opt,name=is_dungeon_level_finish,json=isDungeonLevelFinish,proto3" json:"is_dungeon_level_finish,omitempty"`
}

func (x *BrickBreakerStageBin) Reset() {
	*x = BrickBreakerStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerStageBin) ProtoMessage() {}

func (x *BrickBreakerStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerStageBin.ProtoReflect.Descriptor instead.
func (*BrickBreakerStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{311}
}

func (x *BrickBreakerStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *BrickBreakerStageBin) GetIsWorldLevelUnlock() bool {
	if x != nil {
		return x.IsWorldLevelUnlock
	}
	return false
}

func (x *BrickBreakerStageBin) GetIsDungeonLevelUnlock() bool {
	if x != nil {
		return x.IsDungeonLevelUnlock
	}
	return false
}

func (x *BrickBreakerStageBin) GetIsWorldLevelFinish() bool {
	if x != nil {
		return x.IsWorldLevelFinish
	}
	return false
}

func (x *BrickBreakerStageBin) GetIsDungeonLevelFinish() bool {
	if x != nil {
		return x.IsDungeonLevelFinish
	}
	return false
}

type BrickBreakerLevelBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId          uint32   `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsFinish         bool     `protobuf:"varint,2,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	MaxScore         uint32   `protobuf:"varint,3,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	ChosenAvatarList []uint32 `protobuf:"varint,4,rep,packed,name=chosen_avatar_list,json=chosenAvatarList,proto3" json:"chosen_avatar_list,omitempty"`
	ChosenSkillList  []uint32 `protobuf:"varint,5,rep,packed,name=chosen_skill_list,json=chosenSkillList,proto3" json:"chosen_skill_list,omitempty"`
}

func (x *BrickBreakerLevelBin) Reset() {
	*x = BrickBreakerLevelBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerLevelBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerLevelBin) ProtoMessage() {}

func (x *BrickBreakerLevelBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerLevelBin.ProtoReflect.Descriptor instead.
func (*BrickBreakerLevelBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{312}
}

func (x *BrickBreakerLevelBin) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *BrickBreakerLevelBin) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *BrickBreakerLevelBin) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *BrickBreakerLevelBin) GetChosenAvatarList() []uint32 {
	if x != nil {
		return x.ChosenAvatarList
	}
	return nil
}

func (x *BrickBreakerLevelBin) GetChosenSkillList() []uint32 {
	if x != nil {
		return x.ChosenSkillList
	}
	return nil
}

type BrickBreakerScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageBinList        []*BrickBreakerStageBin `protobuf:"bytes,1,rep,name=stage_bin_list,json=stageBinList,proto3" json:"stage_bin_list,omitempty"`
	WorldLevelBinList   []*BrickBreakerLevelBin `protobuf:"bytes,2,rep,name=world_level_bin_list,json=worldLevelBinList,proto3" json:"world_level_bin_list,omitempty"`
	DungeonLevelBinList []*BrickBreakerLevelBin `protobuf:"bytes,3,rep,name=dungeon_level_bin_list,json=dungeonLevelBinList,proto3" json:"dungeon_level_bin_list,omitempty"`
	SkillBinList        []*Uint32PairBin        `protobuf:"bytes,4,rep,name=skill_bin_list,json=skillBinList,proto3" json:"skill_bin_list,omitempty"`
}

func (x *BrickBreakerScheduleBin) Reset() {
	*x = BrickBreakerScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerScheduleBin) ProtoMessage() {}

func (x *BrickBreakerScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerScheduleBin.ProtoReflect.Descriptor instead.
func (*BrickBreakerScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{313}
}

func (x *BrickBreakerScheduleBin) GetStageBinList() []*BrickBreakerStageBin {
	if x != nil {
		return x.StageBinList
	}
	return nil
}

func (x *BrickBreakerScheduleBin) GetWorldLevelBinList() []*BrickBreakerLevelBin {
	if x != nil {
		return x.WorldLevelBinList
	}
	return nil
}

func (x *BrickBreakerScheduleBin) GetDungeonLevelBinList() []*BrickBreakerLevelBin {
	if x != nil {
		return x.DungeonLevelBinList
	}
	return nil
}

func (x *BrickBreakerScheduleBin) GetSkillBinList() []*Uint32PairBin {
	if x != nil {
		return x.SkillBinList
	}
	return nil
}

type TeamChainStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId   uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen    bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	BestScore uint32 `protobuf:"varint,3,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
}

func (x *TeamChainStageBin) Reset() {
	*x = TeamChainStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamChainStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamChainStageBin) ProtoMessage() {}

func (x *TeamChainStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamChainStageBin.ProtoReflect.Descriptor instead.
func (*TeamChainStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{314}
}

func (x *TeamChainStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *TeamChainStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *TeamChainStageBin) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

type TeamChainScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageBinList            []*TeamChainStageBin `protobuf:"bytes,1,rep,name=stage_bin_list,json=stageBinList,proto3" json:"stage_bin_list,omitempty"`
	InDungeonAvatarGuidList []uint64             `protobuf:"varint,2,rep,packed,name=in_dungeon_avatar_guid_list,json=inDungeonAvatarGuidList,proto3" json:"in_dungeon_avatar_guid_list,omitempty"`
	IsTokenCostumeReward    bool                 `protobuf:"varint,3,opt,name=is_token_costume_reward,json=isTokenCostumeReward,proto3" json:"is_token_costume_reward,omitempty"`
}

func (x *TeamChainScheduleBin) Reset() {
	*x = TeamChainScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamChainScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamChainScheduleBin) ProtoMessage() {}

func (x *TeamChainScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamChainScheduleBin.ProtoReflect.Descriptor instead.
func (*TeamChainScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{315}
}

func (x *TeamChainScheduleBin) GetStageBinList() []*TeamChainStageBin {
	if x != nil {
		return x.StageBinList
	}
	return nil
}

func (x *TeamChainScheduleBin) GetInDungeonAvatarGuidList() []uint64 {
	if x != nil {
		return x.InDungeonAvatarGuidList
	}
	return nil
}

func (x *TeamChainScheduleBin) GetIsTokenCostumeReward() bool {
	if x != nil {
		return x.IsTokenCostumeReward
	}
	return false
}

type ElectroherculesBattleLevelBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId       uint32 `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsFinish      bool   `protobuf:"varint,2,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	MinFinishTime uint32 `protobuf:"varint,3,opt,name=min_finish_time,json=minFinishTime,proto3" json:"min_finish_time,omitempty"`
}

func (x *ElectroherculesBattleLevelBin) Reset() {
	*x = ElectroherculesBattleLevelBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectroherculesBattleLevelBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectroherculesBattleLevelBin) ProtoMessage() {}

func (x *ElectroherculesBattleLevelBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectroherculesBattleLevelBin.ProtoReflect.Descriptor instead.
func (*ElectroherculesBattleLevelBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{316}
}

func (x *ElectroherculesBattleLevelBin) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *ElectroherculesBattleLevelBin) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *ElectroherculesBattleLevelBin) GetMinFinishTime() uint32 {
	if x != nil {
		return x.MinFinishTime
	}
	return 0
}

type ElectroherculesBattleStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId      uint32                           `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsStageOpen  bool                             `protobuf:"varint,2,opt,name=is_stage_open,json=isStageOpen,proto3" json:"is_stage_open,omitempty"`
	LevelBinList []*ElectroherculesBattleLevelBin `protobuf:"bytes,3,rep,name=level_bin_list,json=levelBinList,proto3" json:"level_bin_list,omitempty"`
}

func (x *ElectroherculesBattleStageBin) Reset() {
	*x = ElectroherculesBattleStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectroherculesBattleStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectroherculesBattleStageBin) ProtoMessage() {}

func (x *ElectroherculesBattleStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectroherculesBattleStageBin.ProtoReflect.Descriptor instead.
func (*ElectroherculesBattleStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{317}
}

func (x *ElectroherculesBattleStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *ElectroherculesBattleStageBin) GetIsStageOpen() bool {
	if x != nil {
		return x.IsStageOpen
	}
	return false
}

func (x *ElectroherculesBattleStageBin) GetLevelBinList() []*ElectroherculesBattleLevelBin {
	if x != nil {
		return x.LevelBinList
	}
	return nil
}

type ElectroherculesBattleScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageBinList []*ElectroherculesBattleStageBin `protobuf:"bytes,1,rep,name=stage_bin_list,json=stageBinList,proto3" json:"stage_bin_list,omitempty"`
}

func (x *ElectroherculesBattleScheduleBin) Reset() {
	*x = ElectroherculesBattleScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectroherculesBattleScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectroherculesBattleScheduleBin) ProtoMessage() {}

func (x *ElectroherculesBattleScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectroherculesBattleScheduleBin.ProtoReflect.Descriptor instead.
func (*ElectroherculesBattleScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{318}
}

func (x *ElectroherculesBattleScheduleBin) GetStageBinList() []*ElectroherculesBattleStageBin {
	if x != nil {
		return x.StageBinList
	}
	return nil
}

type SeaLampV3RaceLevelBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId  uint32 `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsOpen   bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	MaxScore uint32 `protobuf:"varint,3,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
}

func (x *SeaLampV3RaceLevelBin) Reset() {
	*x = SeaLampV3RaceLevelBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampV3RaceLevelBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampV3RaceLevelBin) ProtoMessage() {}

func (x *SeaLampV3RaceLevelBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampV3RaceLevelBin.ProtoReflect.Descriptor instead.
func (*SeaLampV3RaceLevelBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{319}
}

func (x *SeaLampV3RaceLevelBin) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *SeaLampV3RaceLevelBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *SeaLampV3RaceLevelBin) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

type SeaLampV3RaceBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelBinList []*SeaLampV3RaceLevelBin `protobuf:"bytes,1,rep,name=level_bin_list,json=levelBinList,proto3" json:"level_bin_list,omitempty"`
}

func (x *SeaLampV3RaceBin) Reset() {
	*x = SeaLampV3RaceBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampV3RaceBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampV3RaceBin) ProtoMessage() {}

func (x *SeaLampV3RaceBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampV3RaceBin.ProtoReflect.Descriptor instead.
func (*SeaLampV3RaceBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{320}
}

func (x *SeaLampV3RaceBin) GetLevelBinList() []*SeaLampV3RaceLevelBin {
	if x != nil {
		return x.LevelBinList
	}
	return nil
}

type SeaLampV3ShadowLevelBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId       uint32 `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsOpen        bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	MinFinishTime uint32 `protobuf:"varint,3,opt,name=min_finish_time,json=minFinishTime,proto3" json:"min_finish_time,omitempty"`
}

func (x *SeaLampV3ShadowLevelBin) Reset() {
	*x = SeaLampV3ShadowLevelBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampV3ShadowLevelBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampV3ShadowLevelBin) ProtoMessage() {}

func (x *SeaLampV3ShadowLevelBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampV3ShadowLevelBin.ProtoReflect.Descriptor instead.
func (*SeaLampV3ShadowLevelBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{321}
}

func (x *SeaLampV3ShadowLevelBin) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *SeaLampV3ShadowLevelBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *SeaLampV3ShadowLevelBin) GetMinFinishTime() uint32 {
	if x != nil {
		return x.MinFinishTime
	}
	return 0
}

type SeaLampV3ShadowStageBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId      uint32                     `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen       bool                       `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	LevelBinList []*SeaLampV3ShadowLevelBin `protobuf:"bytes,3,rep,name=level_bin_list,json=levelBinList,proto3" json:"level_bin_list,omitempty"`
}

func (x *SeaLampV3ShadowStageBin) Reset() {
	*x = SeaLampV3ShadowStageBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampV3ShadowStageBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampV3ShadowStageBin) ProtoMessage() {}

func (x *SeaLampV3ShadowStageBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampV3ShadowStageBin.ProtoReflect.Descriptor instead.
func (*SeaLampV3ShadowStageBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{322}
}

func (x *SeaLampV3ShadowStageBin) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *SeaLampV3ShadowStageBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *SeaLampV3ShadowStageBin) GetLevelBinList() []*SeaLampV3ShadowLevelBin {
	if x != nil {
		return x.LevelBinList
	}
	return nil
}

type SeaLampV3ShadowBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageBinList []*SeaLampV3ShadowStageBin `protobuf:"bytes,1,rep,name=stage_bin_list,json=stageBinList,proto3" json:"stage_bin_list,omitempty"`
}

func (x *SeaLampV3ShadowBin) Reset() {
	*x = SeaLampV3ShadowBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampV3ShadowBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampV3ShadowBin) ProtoMessage() {}

func (x *SeaLampV3ShadowBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampV3ShadowBin.ProtoReflect.Descriptor instead.
func (*SeaLampV3ShadowBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{323}
}

func (x *SeaLampV3ShadowBin) GetStageBinList() []*SeaLampV3ShadowStageBin {
	if x != nil {
		return x.StageBinList
	}
	return nil
}

type SeaLampV3ScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaceBin   *SeaLampV3RaceBin   `protobuf:"bytes,1,opt,name=race_bin,json=raceBin,proto3" json:"race_bin,omitempty"`
	ShadowBin *SeaLampV3ShadowBin `protobuf:"bytes,2,opt,name=shadow_bin,json=shadowBin,proto3" json:"shadow_bin,omitempty"`
}

func (x *SeaLampV3ScheduleBin) Reset() {
	*x = SeaLampV3ScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampV3ScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampV3ScheduleBin) ProtoMessage() {}

func (x *SeaLampV3ScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampV3ScheduleBin.ProtoReflect.Descriptor instead.
func (*SeaLampV3ScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{324}
}

func (x *SeaLampV3ScheduleBin) GetRaceBin() *SeaLampV3RaceBin {
	if x != nil {
		return x.RaceBin
	}
	return nil
}

func (x *SeaLampV3ScheduleBin) GetShadowBin() *SeaLampV3ShadowBin {
	if x != nil {
		return x.ShadowBin
	}
	return nil
}

type DuelHeartDifficultyBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Difficulty uint32 `protobuf:"varint,1,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	CostTime   uint32 `protobuf:"varint,2,opt,name=cost_time,json=costTime,proto3" json:"cost_time,omitempty"`
	IsOpen     bool   `protobuf:"varint,3,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *DuelHeartDifficultyBin) Reset() {
	*x = DuelHeartDifficultyBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuelHeartDifficultyBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuelHeartDifficultyBin) ProtoMessage() {}

func (x *DuelHeartDifficultyBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuelHeartDifficultyBin.ProtoReflect.Descriptor instead.
func (*DuelHeartDifficultyBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{325}
}

func (x *DuelHeartDifficultyBin) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *DuelHeartDifficultyBin) GetCostTime() uint32 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

func (x *DuelHeartDifficultyBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type DuelHeartLevelBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId           uint32                    `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	DifficultyBinList []*DuelHeartDifficultyBin `protobuf:"bytes,2,rep,name=difficulty_bin_list,json=difficultyBinList,proto3" json:"difficulty_bin_list,omitempty"`
	IsOpen            bool                      `protobuf:"varint,3,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	IsCgViewed        bool                      `protobuf:"varint,4,opt,name=is_cg_viewed,json=isCgViewed,proto3" json:"is_cg_viewed,omitempty"`
}

func (x *DuelHeartLevelBin) Reset() {
	*x = DuelHeartLevelBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuelHeartLevelBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuelHeartLevelBin) ProtoMessage() {}

func (x *DuelHeartLevelBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuelHeartLevelBin.ProtoReflect.Descriptor instead.
func (*DuelHeartLevelBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{326}
}

func (x *DuelHeartLevelBin) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *DuelHeartLevelBin) GetDifficultyBinList() []*DuelHeartDifficultyBin {
	if x != nil {
		return x.DifficultyBinList
	}
	return nil
}

func (x *DuelHeartLevelBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *DuelHeartLevelBin) GetIsCgViewed() bool {
	if x != nil {
		return x.IsCgViewed
	}
	return false
}

type DuelheartScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelBinList  []*DuelHeartLevelBin `protobuf:"bytes,1,rep,name=level_bin_list,json=levelBinList,proto3" json:"level_bin_list,omitempty"`
	InDungeonGuid uint64               `protobuf:"varint,2,opt,name=in_dungeon_guid,json=inDungeonGuid,proto3" json:"in_dungeon_guid,omitempty"`
}

func (x *DuelheartScheduleBin) Reset() {
	*x = DuelheartScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuelheartScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuelheartScheduleBin) ProtoMessage() {}

func (x *DuelheartScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuelheartScheduleBin.ProtoReflect.Descriptor instead.
func (*DuelheartScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{327}
}

func (x *DuelheartScheduleBin) GetLevelBinList() []*DuelHeartLevelBin {
	if x != nil {
		return x.LevelBinList
	}
	return nil
}

func (x *DuelheartScheduleBin) GetInDungeonGuid() uint64 {
	if x != nil {
		return x.InDungeonGuid
	}
	return 0
}

type ActivityScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Detail:
	//
	//	*ActivityScheduleBin_SalesmanScheduleBin
	//	*ActivityScheduleBin_TrialAvatarBin
	//	*ActivityScheduleBin_DeliveryBin
	//	*ActivityScheduleBin_CrucibleBin
	//	*ActivityScheduleBin_AsterBin
	//	*ActivityScheduleBin_FlightBin
	//	*ActivityScheduleBin_DragonSpineBin
	//	*ActivityScheduleBin_EffigyBin
	//	*ActivityScheduleBin_TreasureMapBin
	//	*ActivityScheduleBin_SalesmanMpBin
	//	*ActivityScheduleBin_BlessingBin
	//	*ActivityScheduleBin_SeaLampBin
	//	*ActivityScheduleBin_ExpeditionBin
	//	*ActivityScheduleBin_FleurFairBin
	//	*ActivityScheduleBin_ArenaChallengeBin
	//	*ActivityScheduleBin_WaterSpiritBin
	//	*ActivityScheduleBin_ChannellerSlabBin
	//	*ActivityScheduleBin_HideAndSeekBin
	//	*ActivityScheduleBin_MistTrialBin
	//	*ActivityScheduleBin_FindHilichurlBin
	//	*ActivityScheduleBin_SummerTimeBin
	//	*ActivityScheduleBin_BuoyantCombatBin
	//	*ActivityScheduleBin_BounceConjuringBin
	//	*ActivityScheduleBin_EchoShellBin
	//	*ActivityScheduleBin_BlitzRushBin
	//	*ActivityScheduleBin_ChessBin
	//	*ActivityScheduleBin_SumoBin
	//	*ActivityScheduleBin_LunaRiteBin
	//	*ActivityScheduleBin_MoonfinTrialBin
	//	*ActivityScheduleBin_PlantFlowerBin
	//	*ActivityScheduleBin_MusicGameBin
	//	*ActivityScheduleBin_RoguelikeDungeonBin
	//	*ActivityScheduleBin_WinterCampBin
	//	*ActivityScheduleBin_HachiBin
	//	*ActivityScheduleBin_TanukiTravelBin
	//	*ActivityScheduleBin_LanternRiteBin
	//	*ActivityScheduleBin_PotionBin
	//	*ActivityScheduleBin_MichiaeMatsuriBin
	//	*ActivityScheduleBin_BartenderBin
	//	*ActivityScheduleBin_IrodoriBin
	//	*ActivityScheduleBin_CrystalLinkBin
	//	*ActivityScheduleBin_PhotoBin
	//	*ActivityScheduleBin_SpiceBin
	//	*ActivityScheduleBin_GachaBin
	//	*ActivityScheduleBin_LuminanceStoneChallengeBin
	//	*ActivityScheduleBin_RogueDiaryBin
	//	*ActivityScheduleBin_SummerTimeV2Bin
	//	*ActivityScheduleBin_IslandPartyBin
	//	*ActivityScheduleBin_GearBin
	//	*ActivityScheduleBin_GravenInnocenceBin
	//	*ActivityScheduleBin_InstableSprayBin
	//	*ActivityScheduleBin_MuqadasPotionBin
	//	*ActivityScheduleBin_TreasureSeelieBin
	//	*ActivityScheduleBin_RockBoardExploreBin
	//	*ActivityScheduleBin_VintageBin
	//	*ActivityScheduleBin_WindFieldBin
	//	*ActivityScheduleBin_FungusFighterBin
	//	*ActivityScheduleBin_CharAmusementBin
	//	*ActivityScheduleBin_EffigyChallengeBin
	//	*ActivityScheduleBin_CoinCollectBin
	//	*ActivityScheduleBin_BrickBreakerBin
	//	*ActivityScheduleBin_SeaLampV3Bin
	//	*ActivityScheduleBin_TeamChainBin
	//	*ActivityScheduleBin_DuelHeartBin
	//	*ActivityScheduleBin_ElectroherculesBattleBin
	Detail isActivityScheduleBin_Detail `protobuf_oneof:"detail"`
}

func (x *ActivityScheduleBin) Reset() {
	*x = ActivityScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityScheduleBin) ProtoMessage() {}

func (x *ActivityScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityScheduleBin.ProtoReflect.Descriptor instead.
func (*ActivityScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{328}
}

func (m *ActivityScheduleBin) GetDetail() isActivityScheduleBin_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *ActivityScheduleBin) GetSalesmanScheduleBin() *SalesmanScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_SalesmanScheduleBin); ok {
		return x.SalesmanScheduleBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetTrialAvatarBin() *TrialAvatarScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_TrialAvatarBin); ok {
		return x.TrialAvatarBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetDeliveryBin() *DeliveryScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_DeliveryBin); ok {
		return x.DeliveryBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetCrucibleBin() *CrucibleScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_CrucibleBin); ok {
		return x.CrucibleBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetAsterBin() *AsterScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_AsterBin); ok {
		return x.AsterBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetFlightBin() *FlightScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_FlightBin); ok {
		return x.FlightBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetDragonSpineBin() *DragonSpineScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_DragonSpineBin); ok {
		return x.DragonSpineBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetEffigyBin() *EffigyScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_EffigyBin); ok {
		return x.EffigyBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetTreasureMapBin() *TreasureMapScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_TreasureMapBin); ok {
		return x.TreasureMapBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetSalesmanMpBin() *SalesmanMpScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_SalesmanMpBin); ok {
		return x.SalesmanMpBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetBlessingBin() *BlessingScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_BlessingBin); ok {
		return x.BlessingBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetSeaLampBin() *SeaLampScheduleDataBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_SeaLampBin); ok {
		return x.SeaLampBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetExpeditionBin() *ExpeditionScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_ExpeditionBin); ok {
		return x.ExpeditionBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetFleurFairBin() *FleurFairScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_FleurFairBin); ok {
		return x.FleurFairBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetArenaChallengeBin() *ArenaChallengeSchduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_ArenaChallengeBin); ok {
		return x.ArenaChallengeBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetWaterSpiritBin() *WaterSpiritScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_WaterSpiritBin); ok {
		return x.WaterSpiritBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetChannellerSlabBin() *ChannellerSlabScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_ChannellerSlabBin); ok {
		return x.ChannellerSlabBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetHideAndSeekBin() *HideAndSeekScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_HideAndSeekBin); ok {
		return x.HideAndSeekBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetMistTrialBin() *MistTrialScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_MistTrialBin); ok {
		return x.MistTrialBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetFindHilichurlBin() *FindHilichurlScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_FindHilichurlBin); ok {
		return x.FindHilichurlBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetSummerTimeBin() *SummerTimeScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_SummerTimeBin); ok {
		return x.SummerTimeBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetBuoyantCombatBin() *BuoyantCombatScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_BuoyantCombatBin); ok {
		return x.BuoyantCombatBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetBounceConjuringBin() *BounceConjuringScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_BounceConjuringBin); ok {
		return x.BounceConjuringBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetEchoShellBin() *EchoShellScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_EchoShellBin); ok {
		return x.EchoShellBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetBlitzRushBin() *BlitzRushScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_BlitzRushBin); ok {
		return x.BlitzRushBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetChessBin() *ChessScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_ChessBin); ok {
		return x.ChessBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetSumoBin() *SumoScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_SumoBin); ok {
		return x.SumoBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetLunaRiteBin() *LunaRiteScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_LunaRiteBin); ok {
		return x.LunaRiteBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetMoonfinTrialBin() *MoonfinTrialScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_MoonfinTrialBin); ok {
		return x.MoonfinTrialBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetPlantFlowerBin() *PlantFlowerScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_PlantFlowerBin); ok {
		return x.PlantFlowerBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetMusicGameBin() *MusicGameScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_MusicGameBin); ok {
		return x.MusicGameBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetRoguelikeDungeonBin() *RoguelikeDungeonScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_RoguelikeDungeonBin); ok {
		return x.RoguelikeDungeonBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetWinterCampBin() *WinterCampScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_WinterCampBin); ok {
		return x.WinterCampBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetHachiBin() *HachiScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_HachiBin); ok {
		return x.HachiBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetTanukiTravelBin() *TanukiTravelScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_TanukiTravelBin); ok {
		return x.TanukiTravelBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetLanternRiteBin() *LanternRiteScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_LanternRiteBin); ok {
		return x.LanternRiteBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetPotionBin() *PotionScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_PotionBin); ok {
		return x.PotionBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetMichiaeMatsuriBin() *MichiaeMatsuriScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_MichiaeMatsuriBin); ok {
		return x.MichiaeMatsuriBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetBartenderBin() *BartenderScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_BartenderBin); ok {
		return x.BartenderBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetIrodoriBin() *IrodoriScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_IrodoriBin); ok {
		return x.IrodoriBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetCrystalLinkBin() *CrystalLinkScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_CrystalLinkBin); ok {
		return x.CrystalLinkBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetPhotoBin() *PhotoScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_PhotoBin); ok {
		return x.PhotoBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetSpiceBin() *SpiceScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_SpiceBin); ok {
		return x.SpiceBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetGachaBin() *GachaScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_GachaBin); ok {
		return x.GachaBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetLuminanceStoneChallengeBin() *LuminanceStoneChallengeScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_LuminanceStoneChallengeBin); ok {
		return x.LuminanceStoneChallengeBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetRogueDiaryBin() *RogueDiaryScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_RogueDiaryBin); ok {
		return x.RogueDiaryBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetSummerTimeV2Bin() *SummerTimeV2ScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_SummerTimeV2Bin); ok {
		return x.SummerTimeV2Bin
	}
	return nil
}

func (x *ActivityScheduleBin) GetIslandPartyBin() *IslandPartyScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_IslandPartyBin); ok {
		return x.IslandPartyBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetGearBin() *GearScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_GearBin); ok {
		return x.GearBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetGravenInnocenceBin() *GravenInnocenceScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_GravenInnocenceBin); ok {
		return x.GravenInnocenceBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetInstableSprayBin() *InstableSprayScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_InstableSprayBin); ok {
		return x.InstableSprayBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetMuqadasPotionBin() *MuqadasPotionScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_MuqadasPotionBin); ok {
		return x.MuqadasPotionBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetTreasureSeelieBin() *TreasureSeelieScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_TreasureSeelieBin); ok {
		return x.TreasureSeelieBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetRockBoardExploreBin() *RockBoardExploreScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_RockBoardExploreBin); ok {
		return x.RockBoardExploreBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetVintageBin() *VintageScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_VintageBin); ok {
		return x.VintageBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetWindFieldBin() *WindFieldScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_WindFieldBin); ok {
		return x.WindFieldBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetFungusFighterBin() *FungusFighterScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_FungusFighterBin); ok {
		return x.FungusFighterBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetCharAmusementBin() *CharAmusementScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_CharAmusementBin); ok {
		return x.CharAmusementBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetEffigyChallengeBin() *EffigyChallengeV2ScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_EffigyChallengeBin); ok {
		return x.EffigyChallengeBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetCoinCollectBin() *CoinCollectScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_CoinCollectBin); ok {
		return x.CoinCollectBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetBrickBreakerBin() *BrickBreakerScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_BrickBreakerBin); ok {
		return x.BrickBreakerBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetSeaLampV3Bin() *SeaLampV3ScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_SeaLampV3Bin); ok {
		return x.SeaLampV3Bin
	}
	return nil
}

func (x *ActivityScheduleBin) GetTeamChainBin() *TeamChainScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_TeamChainBin); ok {
		return x.TeamChainBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetDuelHeartBin() *DuelheartScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_DuelHeartBin); ok {
		return x.DuelHeartBin
	}
	return nil
}

func (x *ActivityScheduleBin) GetElectroherculesBattleBin() *ElectroherculesBattleScheduleBin {
	if x, ok := x.GetDetail().(*ActivityScheduleBin_ElectroherculesBattleBin); ok {
		return x.ElectroherculesBattleBin
	}
	return nil
}

type isActivityScheduleBin_Detail interface {
	isActivityScheduleBin_Detail()
}

type ActivityScheduleBin_SalesmanScheduleBin struct {
	SalesmanScheduleBin *SalesmanScheduleBin `protobuf:"bytes,102,opt,name=salesman_schedule_bin,json=salesmanScheduleBin,proto3,oneof"`
}

type ActivityScheduleBin_TrialAvatarBin struct {
	TrialAvatarBin *TrialAvatarScheduleBin `protobuf:"bytes,103,opt,name=trial_avatar_bin,json=trialAvatarBin,proto3,oneof"`
}

type ActivityScheduleBin_DeliveryBin struct {
	DeliveryBin *DeliveryScheduleBin `protobuf:"bytes,104,opt,name=delivery_bin,json=deliveryBin,proto3,oneof"`
}

type ActivityScheduleBin_CrucibleBin struct {
	CrucibleBin *CrucibleScheduleBin `protobuf:"bytes,112,opt,name=crucible_bin,json=crucibleBin,proto3,oneof"`
}

type ActivityScheduleBin_AsterBin struct {
	AsterBin *AsterScheduleBin `protobuf:"bytes,113,opt,name=aster_bin,json=asterBin,proto3,oneof"`
}

type ActivityScheduleBin_FlightBin struct {
	FlightBin *FlightScheduleBin `protobuf:"bytes,114,opt,name=flight_bin,json=flightBin,proto3,oneof"`
}

type ActivityScheduleBin_DragonSpineBin struct {
	DragonSpineBin *DragonSpineScheduleBin `protobuf:"bytes,115,opt,name=dragon_spine_bin,json=dragonSpineBin,proto3,oneof"`
}

type ActivityScheduleBin_EffigyBin struct {
	EffigyBin *EffigyScheduleBin `protobuf:"bytes,116,opt,name=effigy_bin,json=effigyBin,proto3,oneof"`
}

type ActivityScheduleBin_TreasureMapBin struct {
	TreasureMapBin *TreasureMapScheduleBin `protobuf:"bytes,120,opt,name=treasure_map_bin,json=treasureMapBin,proto3,oneof"`
}

type ActivityScheduleBin_SalesmanMpBin struct {
	SalesmanMpBin *SalesmanMpScheduleBin `protobuf:"bytes,121,opt,name=salesman_mp_bin,json=salesmanMpBin,proto3,oneof"`
}

type ActivityScheduleBin_BlessingBin struct {
	BlessingBin *BlessingScheduleBin `protobuf:"bytes,130,opt,name=blessing_bin,json=blessingBin,proto3,oneof"`
}

type ActivityScheduleBin_SeaLampBin struct {
	SeaLampBin *SeaLampScheduleDataBin `protobuf:"bytes,131,opt,name=sea_lamp_bin,json=seaLampBin,proto3,oneof"`
}

type ActivityScheduleBin_ExpeditionBin struct {
	ExpeditionBin *ExpeditionScheduleBin `protobuf:"bytes,132,opt,name=expedition_bin,json=expeditionBin,proto3,oneof"`
}

type ActivityScheduleBin_FleurFairBin struct {
	FleurFairBin *FleurFairScheduleBin `protobuf:"bytes,140,opt,name=fleur_fair_bin,json=fleurFairBin,proto3,oneof"`
}

type ActivityScheduleBin_ArenaChallengeBin struct {
	ArenaChallengeBin *ArenaChallengeSchduleBin `protobuf:"bytes,141,opt,name=arena_challenge_bin,json=arenaChallengeBin,proto3,oneof"`
}

type ActivityScheduleBin_WaterSpiritBin struct {
	WaterSpiritBin *WaterSpiritScheduleBin `protobuf:"bytes,142,opt,name=water_spirit_bin,json=waterSpiritBin,proto3,oneof"`
}

type ActivityScheduleBin_ChannellerSlabBin struct {
	ChannellerSlabBin *ChannellerSlabScheduleBin `protobuf:"bytes,151,opt,name=channeller_slab_bin,json=channellerSlabBin,proto3,oneof"`
}

type ActivityScheduleBin_HideAndSeekBin struct {
	HideAndSeekBin *HideAndSeekScheduleBin `protobuf:"bytes,152,opt,name=hide_and_seek_bin,json=hideAndSeekBin,proto3,oneof"`
}

type ActivityScheduleBin_MistTrialBin struct {
	MistTrialBin *MistTrialScheduleBin `protobuf:"bytes,153,opt,name=mist_trial_bin,json=mistTrialBin,proto3,oneof"`
}

type ActivityScheduleBin_FindHilichurlBin struct {
	FindHilichurlBin *FindHilichurlScheduleBin `protobuf:"bytes,154,opt,name=find_hilichurl_bin,json=findHilichurlBin,proto3,oneof"`
}

type ActivityScheduleBin_SummerTimeBin struct {
	SummerTimeBin *SummerTimeScheduleBin `protobuf:"bytes,160,opt,name=summer_time_bin,json=summerTimeBin,proto3,oneof"`
}

type ActivityScheduleBin_BuoyantCombatBin struct {
	BuoyantCombatBin *BuoyantCombatScheduleBin `protobuf:"bytes,161,opt,name=buoyant_combat_bin,json=buoyantCombatBin,proto3,oneof"`
}

type ActivityScheduleBin_BounceConjuringBin struct {
	BounceConjuringBin *BounceConjuringScheduleBin `protobuf:"bytes,162,opt,name=bounce_conjuring_bin,json=bounceConjuringBin,proto3,oneof"`
}

type ActivityScheduleBin_EchoShellBin struct {
	EchoShellBin *EchoShellScheduleBin `protobuf:"bytes,163,opt,name=echo_shell_bin,json=echoShellBin,proto3,oneof"`
}

type ActivityScheduleBin_BlitzRushBin struct {
	BlitzRushBin *BlitzRushScheduleBin `protobuf:"bytes,164,opt,name=blitz_rush_bin,json=blitzRushBin,proto3,oneof"`
}

type ActivityScheduleBin_ChessBin struct {
	ChessBin *ChessScheduleBin `protobuf:"bytes,165,opt,name=chess_bin,json=chessBin,proto3,oneof"`
}

type ActivityScheduleBin_SumoBin struct {
	SumoBin *SumoScheduleBin `protobuf:"bytes,166,opt,name=sumo_bin,json=sumoBin,proto3,oneof"`
}

type ActivityScheduleBin_LunaRiteBin struct {
	LunaRiteBin *LunaRiteScheduleBin `protobuf:"bytes,167,opt,name=luna_rite_bin,json=lunaRiteBin,proto3,oneof"`
}

type ActivityScheduleBin_MoonfinTrialBin struct {
	MoonfinTrialBin *MoonfinTrialScheduleBin `protobuf:"bytes,168,opt,name=moonfin_trial_bin,json=moonfinTrialBin,proto3,oneof"`
}

type ActivityScheduleBin_PlantFlowerBin struct {
	PlantFlowerBin *PlantFlowerScheduleBin `protobuf:"bytes,169,opt,name=plant_flower_bin,json=plantFlowerBin,proto3,oneof"`
}

type ActivityScheduleBin_MusicGameBin struct {
	MusicGameBin *MusicGameScheduleBin `protobuf:"bytes,170,opt,name=music_game_bin,json=musicGameBin,proto3,oneof"`
}

type ActivityScheduleBin_RoguelikeDungeonBin struct {
	RoguelikeDungeonBin *RoguelikeDungeonScheduleBin `protobuf:"bytes,171,opt,name=roguelike_dungeon_bin,json=roguelikeDungeonBin,proto3,oneof"`
}

type ActivityScheduleBin_WinterCampBin struct {
	WinterCampBin *WinterCampScheduleBin `protobuf:"bytes,172,opt,name=winter_camp_bin,json=winterCampBin,proto3,oneof"`
}

type ActivityScheduleBin_HachiBin struct {
	HachiBin *HachiScheduleBin `protobuf:"bytes,173,opt,name=hachi_bin,json=hachiBin,proto3,oneof"`
}

type ActivityScheduleBin_TanukiTravelBin struct {
	TanukiTravelBin *TanukiTravelScheduleBin `protobuf:"bytes,174,opt,name=tanuki_travel_bin,json=tanukiTravelBin,proto3,oneof"`
}

type ActivityScheduleBin_LanternRiteBin struct {
	LanternRiteBin *LanternRiteScheduleBin `protobuf:"bytes,175,opt,name=lantern_rite_bin,json=lanternRiteBin,proto3,oneof"`
}

type ActivityScheduleBin_PotionBin struct {
	PotionBin *PotionScheduleBin `protobuf:"bytes,176,opt,name=potion_bin,json=potionBin,proto3,oneof"`
}

type ActivityScheduleBin_MichiaeMatsuriBin struct {
	MichiaeMatsuriBin *MichiaeMatsuriScheduleBin `protobuf:"bytes,177,opt,name=michiae_matsuri_bin,json=michiaeMatsuriBin,proto3,oneof"`
}

type ActivityScheduleBin_BartenderBin struct {
	BartenderBin *BartenderScheduleBin `protobuf:"bytes,178,opt,name=bartender_bin,json=bartenderBin,proto3,oneof"`
}

type ActivityScheduleBin_IrodoriBin struct {
	IrodoriBin *IrodoriScheduleBin `protobuf:"bytes,179,opt,name=irodori_bin,json=irodoriBin,proto3,oneof"`
}

type ActivityScheduleBin_CrystalLinkBin struct {
	CrystalLinkBin *CrystalLinkScheduleBin `protobuf:"bytes,180,opt,name=crystal_link_bin,json=crystalLinkBin,proto3,oneof"`
}

type ActivityScheduleBin_PhotoBin struct {
	PhotoBin *PhotoScheduleBin `protobuf:"bytes,181,opt,name=photo_bin,json=photoBin,proto3,oneof"`
}

type ActivityScheduleBin_SpiceBin struct {
	SpiceBin *SpiceScheduleBin `protobuf:"bytes,182,opt,name=spice_bin,json=spiceBin,proto3,oneof"`
}

type ActivityScheduleBin_GachaBin struct {
	GachaBin *GachaScheduleBin `protobuf:"bytes,183,opt,name=gacha_bin,json=gachaBin,proto3,oneof"`
}

type ActivityScheduleBin_LuminanceStoneChallengeBin struct {
	LuminanceStoneChallengeBin *LuminanceStoneChallengeScheduleBin `protobuf:"bytes,184,opt,name=luminance_stone_challenge_bin,json=luminanceStoneChallengeBin,proto3,oneof"`
}

type ActivityScheduleBin_RogueDiaryBin struct {
	RogueDiaryBin *RogueDiaryScheduleBin `protobuf:"bytes,185,opt,name=rogue_diary_bin,json=rogueDiaryBin,proto3,oneof"`
}

type ActivityScheduleBin_SummerTimeV2Bin struct {
	SummerTimeV2Bin *SummerTimeV2ScheduleBin `protobuf:"bytes,186,opt,name=summer_time_v2_bin,json=summerTimeV2Bin,proto3,oneof"`
}

type ActivityScheduleBin_IslandPartyBin struct {
	IslandPartyBin *IslandPartyScheduleBin `protobuf:"bytes,187,opt,name=island_party_bin,json=islandPartyBin,proto3,oneof"`
}

type ActivityScheduleBin_GearBin struct {
	GearBin *GearScheduleBin `protobuf:"bytes,188,opt,name=gear_bin,json=gearBin,proto3,oneof"`
}

type ActivityScheduleBin_GravenInnocenceBin struct {
	GravenInnocenceBin *GravenInnocenceScheduleBin `protobuf:"bytes,189,opt,name=graven_innocence_bin,json=gravenInnocenceBin,proto3,oneof"`
}

type ActivityScheduleBin_InstableSprayBin struct {
	InstableSprayBin *InstableSprayScheduleBin `protobuf:"bytes,190,opt,name=instable_spray_bin,json=instableSprayBin,proto3,oneof"`
}

type ActivityScheduleBin_MuqadasPotionBin struct {
	MuqadasPotionBin *MuqadasPotionScheduleBin `protobuf:"bytes,191,opt,name=muqadas_potion_bin,json=muqadasPotionBin,proto3,oneof"`
}

type ActivityScheduleBin_TreasureSeelieBin struct {
	TreasureSeelieBin *TreasureSeelieScheduleBin `protobuf:"bytes,192,opt,name=treasure_seelie_bin,json=treasureSeelieBin,proto3,oneof"`
}

type ActivityScheduleBin_RockBoardExploreBin struct {
	RockBoardExploreBin *RockBoardExploreScheduleBin `protobuf:"bytes,193,opt,name=rock_board_explore_bin,json=rockBoardExploreBin,proto3,oneof"`
}

type ActivityScheduleBin_VintageBin struct {
	VintageBin *VintageScheduleBin `protobuf:"bytes,194,opt,name=vintage_bin,json=vintageBin,proto3,oneof"`
}

type ActivityScheduleBin_WindFieldBin struct {
	WindFieldBin *WindFieldScheduleBin `protobuf:"bytes,195,opt,name=wind_field_bin,json=windFieldBin,proto3,oneof"`
}

type ActivityScheduleBin_FungusFighterBin struct {
	FungusFighterBin *FungusFighterScheduleBin `protobuf:"bytes,196,opt,name=fungus_fighter_bin,json=fungusFighterBin,proto3,oneof"`
}

type ActivityScheduleBin_CharAmusementBin struct {
	CharAmusementBin *CharAmusementScheduleBin `protobuf:"bytes,197,opt,name=char_amusement_bin,json=charAmusementBin,proto3,oneof"`
}

type ActivityScheduleBin_EffigyChallengeBin struct {
	EffigyChallengeBin *EffigyChallengeV2ScheduleBin `protobuf:"bytes,198,opt,name=effigy_challenge_bin,json=effigyChallengeBin,proto3,oneof"`
}

type ActivityScheduleBin_CoinCollectBin struct {
	CoinCollectBin *CoinCollectScheduleBin `protobuf:"bytes,199,opt,name=coin_collect_bin,json=coinCollectBin,proto3,oneof"`
}

type ActivityScheduleBin_BrickBreakerBin struct {
	BrickBreakerBin *BrickBreakerScheduleBin `protobuf:"bytes,200,opt,name=brick_breaker_bin,json=brickBreakerBin,proto3,oneof"`
}

type ActivityScheduleBin_SeaLampV3Bin struct {
	SeaLampV3Bin *SeaLampV3ScheduleBin `protobuf:"bytes,201,opt,name=sea_lamp_v3_bin,json=seaLampV3Bin,proto3,oneof"`
}

type ActivityScheduleBin_TeamChainBin struct {
	TeamChainBin *TeamChainScheduleBin `protobuf:"bytes,202,opt,name=team_chain_bin,json=teamChainBin,proto3,oneof"`
}

type ActivityScheduleBin_DuelHeartBin struct {
	DuelHeartBin *DuelheartScheduleBin `protobuf:"bytes,203,opt,name=duel_heart_bin,json=duelHeartBin,proto3,oneof"`
}

type ActivityScheduleBin_ElectroherculesBattleBin struct {
	ElectroherculesBattleBin *ElectroherculesBattleScheduleBin `protobuf:"bytes,204,opt,name=electrohercules_battle_bin,json=electroherculesBattleBin,proto3,oneof"`
}

func (*ActivityScheduleBin_SalesmanScheduleBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_TrialAvatarBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_DeliveryBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_CrucibleBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_AsterBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_FlightBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_DragonSpineBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_EffigyBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_TreasureMapBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_SalesmanMpBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_BlessingBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_SeaLampBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_ExpeditionBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_FleurFairBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_ArenaChallengeBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_WaterSpiritBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_ChannellerSlabBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_HideAndSeekBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_MistTrialBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_FindHilichurlBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_SummerTimeBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_BuoyantCombatBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_BounceConjuringBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_EchoShellBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_BlitzRushBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_ChessBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_SumoBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_LunaRiteBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_MoonfinTrialBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_PlantFlowerBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_MusicGameBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_RoguelikeDungeonBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_WinterCampBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_HachiBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_TanukiTravelBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_LanternRiteBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_PotionBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_MichiaeMatsuriBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_BartenderBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_IrodoriBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_CrystalLinkBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_PhotoBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_SpiceBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_GachaBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_LuminanceStoneChallengeBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_RogueDiaryBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_SummerTimeV2Bin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_IslandPartyBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_GearBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_GravenInnocenceBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_InstableSprayBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_MuqadasPotionBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_TreasureSeelieBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_RockBoardExploreBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_VintageBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_WindFieldBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_FungusFighterBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_CharAmusementBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_EffigyChallengeBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_CoinCollectBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_BrickBreakerBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_SeaLampV3Bin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_TeamChainBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_DuelHeartBin) isActivityScheduleBin_Detail() {}

func (*ActivityScheduleBin_ElectroherculesBattleBin) isActivityScheduleBin_Detail() {}

type ActivityBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId                          uint32                    `protobuf:"varint,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	MeetCondList                        []uint32                  `protobuf:"varint,2,rep,packed,name=meet_cond_list,json=meetCondList,proto3" json:"meet_cond_list,omitempty"`
	CondStateMap                        map[uint32]bool           `protobuf:"bytes,3,rep,name=cond_state_map,json=condStateMap,proto3" json:"cond_state_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IsPlayOpenAnim                      bool                      `protobuf:"varint,4,opt,name=is_play_open_anim,json=isPlayOpenAnim,proto3" json:"is_play_open_anim,omitempty"`
	IsSettled                           bool                      `protobuf:"varint,5,opt,name=is_settled,json=isSettled,proto3" json:"is_settled,omitempty"`
	TakenWatcherIdList                  []uint32                  `protobuf:"varint,6,rep,packed,name=taken_watcher_id_list,json=takenWatcherIdList,proto3" json:"taken_watcher_id_list,omitempty"`
	FinishedWatcherIdList               []uint32                  `protobuf:"varint,7,rep,packed,name=finished_watcher_id_list,json=finishedWatcherIdList,proto3" json:"finished_watcher_id_list,omitempty"`
	ScheduleBin                         *ActivityScheduleBin      `protobuf:"bytes,8,opt,name=schedule_bin,json=scheduleBin,proto3" json:"schedule_bin,omitempty"`
	IsStarted                           bool                      `protobuf:"varint,9,opt,name=is_started,json=isStarted,proto3" json:"is_started,omitempty"`
	ActivatedActivitySaleList           []uint32                  `protobuf:"varint,10,rep,packed,name=activated_activity_sale_list,json=activatedActivitySaleList,proto3" json:"activated_activity_sale_list,omitempty"`
	SelectedAvatarRewardId              uint32                    `protobuf:"varint,11,opt,name=selected_avatar_reward_id,json=selectedAvatarRewardId,proto3" json:"selected_avatar_reward_id,omitempty"`
	ScoreLimit                          uint32                    `protobuf:"varint,12,opt,name=score_limit,json=scoreLimit,proto3" json:"score_limit,omitempty"`
	CurScore                            uint32                    `protobuf:"varint,13,opt,name=cur_score,json=curScore,proto3" json:"cur_score,omitempty"`
	TakenScoreRewardList                []uint32                  `protobuf:"varint,14,rep,packed,name=taken_score_reward_list,json=takenScoreRewardList,proto3" json:"taken_score_reward_list,omitempty"`
	IsNotifyMailSent                    bool                      `protobuf:"varint,15,opt,name=is_notify_mail_sent,json=isNotifyMailSent,proto3" json:"is_notify_mail_sent,omitempty"`
	DisableTransferPointInteractionList []*Uint32Pair             `protobuf:"bytes,16,rep,name=disable_transfer_point_interaction_list,json=disableTransferPointInteractionList,proto3" json:"disable_transfer_point_interaction_list,omitempty"`
	IsBannerCleared                     bool                      `protobuf:"varint,17,opt,name=is_banner_cleared,json=isBannerCleared,proto3" json:"is_banner_cleared,omitempty"`
	StartWorldLevel                     uint32                    `protobuf:"varint,18,opt,name=start_world_level,json=startWorldLevel,proto3" json:"start_world_level,omitempty"`
	IsQuickOpen                         bool                      `protobuf:"varint,20,opt,name=is_quick_open,json=isQuickOpen,proto3" json:"is_quick_open,omitempty"`
	ExpiredCondList                     []uint32                  `protobuf:"varint,21,rep,packed,name=expired_cond_list,json=expiredCondList,proto3" json:"expired_cond_list,omitempty"`
	QuestContentMap                     map[uint32]uint32         `protobuf:"bytes,22,rep,name=quest_content_map,json=questContentMap,proto3" json:"quest_content_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GiftDataBin                         *ActivityGiftDataBin      `protobuf:"bytes,23,opt,name=gift_data_bin,json=giftDataBin,proto3" json:"gift_data_bin,omitempty"`
	ActivityPushTipsMap                 map[uint32]uint32         `protobuf:"bytes,24,rep,name=activity_push_tips_map,json=activityPushTipsMap,proto3" json:"activity_push_tips_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ActivityGeneralCoinList             []*ActivityGeneralCoinBin `protobuf:"bytes,25,rep,name=activity_general_coin_list,json=activityGeneralCoinList,proto3" json:"activity_general_coin_list,omitempty"`
	IsCommonContentClosed               bool                      `protobuf:"varint,26,opt,name=is_common_content_closed,json=isCommonContentClosed,proto3" json:"is_common_content_closed,omitempty"`
}

func (x *ActivityBin) Reset() {
	*x = ActivityBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBin) ProtoMessage() {}

func (x *ActivityBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBin.ProtoReflect.Descriptor instead.
func (*ActivityBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{329}
}

func (x *ActivityBin) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *ActivityBin) GetMeetCondList() []uint32 {
	if x != nil {
		return x.MeetCondList
	}
	return nil
}

func (x *ActivityBin) GetCondStateMap() map[uint32]bool {
	if x != nil {
		return x.CondStateMap
	}
	return nil
}

func (x *ActivityBin) GetIsPlayOpenAnim() bool {
	if x != nil {
		return x.IsPlayOpenAnim
	}
	return false
}

func (x *ActivityBin) GetIsSettled() bool {
	if x != nil {
		return x.IsSettled
	}
	return false
}

func (x *ActivityBin) GetTakenWatcherIdList() []uint32 {
	if x != nil {
		return x.TakenWatcherIdList
	}
	return nil
}

func (x *ActivityBin) GetFinishedWatcherIdList() []uint32 {
	if x != nil {
		return x.FinishedWatcherIdList
	}
	return nil
}

func (x *ActivityBin) GetScheduleBin() *ActivityScheduleBin {
	if x != nil {
		return x.ScheduleBin
	}
	return nil
}

func (x *ActivityBin) GetIsStarted() bool {
	if x != nil {
		return x.IsStarted
	}
	return false
}

func (x *ActivityBin) GetActivatedActivitySaleList() []uint32 {
	if x != nil {
		return x.ActivatedActivitySaleList
	}
	return nil
}

func (x *ActivityBin) GetSelectedAvatarRewardId() uint32 {
	if x != nil {
		return x.SelectedAvatarRewardId
	}
	return 0
}

func (x *ActivityBin) GetScoreLimit() uint32 {
	if x != nil {
		return x.ScoreLimit
	}
	return 0
}

func (x *ActivityBin) GetCurScore() uint32 {
	if x != nil {
		return x.CurScore
	}
	return 0
}

func (x *ActivityBin) GetTakenScoreRewardList() []uint32 {
	if x != nil {
		return x.TakenScoreRewardList
	}
	return nil
}

func (x *ActivityBin) GetIsNotifyMailSent() bool {
	if x != nil {
		return x.IsNotifyMailSent
	}
	return false
}

func (x *ActivityBin) GetDisableTransferPointInteractionList() []*Uint32Pair {
	if x != nil {
		return x.DisableTransferPointInteractionList
	}
	return nil
}

func (x *ActivityBin) GetIsBannerCleared() bool {
	if x != nil {
		return x.IsBannerCleared
	}
	return false
}

func (x *ActivityBin) GetStartWorldLevel() uint32 {
	if x != nil {
		return x.StartWorldLevel
	}
	return 0
}

func (x *ActivityBin) GetIsQuickOpen() bool {
	if x != nil {
		return x.IsQuickOpen
	}
	return false
}

func (x *ActivityBin) GetExpiredCondList() []uint32 {
	if x != nil {
		return x.ExpiredCondList
	}
	return nil
}

func (x *ActivityBin) GetQuestContentMap() map[uint32]uint32 {
	if x != nil {
		return x.QuestContentMap
	}
	return nil
}

func (x *ActivityBin) GetGiftDataBin() *ActivityGiftDataBin {
	if x != nil {
		return x.GiftDataBin
	}
	return nil
}

func (x *ActivityBin) GetActivityPushTipsMap() map[uint32]uint32 {
	if x != nil {
		return x.ActivityPushTipsMap
	}
	return nil
}

func (x *ActivityBin) GetActivityGeneralCoinList() []*ActivityGeneralCoinBin {
	if x != nil {
		return x.ActivityGeneralCoinList
	}
	return nil
}

func (x *ActivityBin) GetIsCommonContentClosed() bool {
	if x != nil {
		return x.IsCommonContentClosed
	}
	return false
}

type PlayerActivityCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityBinMap map[uint32]*ActivityBin `protobuf:"bytes,1,rep,name=activity_bin_map,json=activityBinMap,proto3" json:"activity_bin_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FlySeaLampNum  uint32                  `protobuf:"varint,2,opt,name=fly_sea_lamp_num,json=flySeaLampNum,proto3" json:"fly_sea_lamp_num,omitempty"`
	FlySeaLampTime uint32                  `protobuf:"varint,3,opt,name=fly_sea_lamp_time,json=flySeaLampTime,proto3" json:"fly_sea_lamp_time,omitempty"`
}

func (x *PlayerActivityCompBin) Reset() {
	*x = PlayerActivityCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerActivityCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerActivityCompBin) ProtoMessage() {}

func (x *PlayerActivityCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerActivityCompBin.ProtoReflect.Descriptor instead.
func (*PlayerActivityCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{330}
}

func (x *PlayerActivityCompBin) GetActivityBinMap() map[uint32]*ActivityBin {
	if x != nil {
		return x.ActivityBinMap
	}
	return nil
}

func (x *PlayerActivityCompBin) GetFlySeaLampNum() uint32 {
	if x != nil {
		return x.FlySeaLampNum
	}
	return 0
}

func (x *PlayerActivityCompBin) GetFlySeaLampTime() uint32 {
	if x != nil {
		return x.FlySeaLampTime
	}
	return 0
}

type PlayerMailBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailId          uint32   `protobuf:"varint,1,opt,name=mail_id,json=mailId,proto3" json:"mail_id,omitempty"`
	MailBin         *MailBin `protobuf:"bytes,2,opt,name=mail_bin,json=mailBin,proto3" json:"mail_bin,omitempty"`
	IsRead          bool     `protobuf:"varint,3,opt,name=is_read,json=isRead,proto3" json:"is_read,omitempty"`
	IsAttachmentGot bool     `protobuf:"varint,4,opt,name=is_attachment_got,json=isAttachmentGot,proto3" json:"is_attachment_got,omitempty"`
	SourceType      uint32   `protobuf:"varint,5,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
}

func (x *PlayerMailBin) Reset() {
	*x = PlayerMailBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMailBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMailBin) ProtoMessage() {}

func (x *PlayerMailBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMailBin.ProtoReflect.Descriptor instead.
func (*PlayerMailBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{331}
}

func (x *PlayerMailBin) GetMailId() uint32 {
	if x != nil {
		return x.MailId
	}
	return 0
}

func (x *PlayerMailBin) GetMailBin() *MailBin {
	if x != nil {
		return x.MailBin
	}
	return nil
}

func (x *PlayerMailBin) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *PlayerMailBin) GetIsAttachmentGot() bool {
	if x != nil {
		return x.IsAttachmentGot
	}
	return false
}

func (x *PlayerMailBin) GetSourceType() uint32 {
	if x != nil {
		return x.SourceType
	}
	return 0
}

type PlayerMailCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasTakeAttachmentMailIdList []uint32            `protobuf:"varint,1,rep,packed,name=has_take_attachment_mail_id_list,json=hasTakeAttachmentMailIdList,proto3" json:"has_take_attachment_mail_id_list,omitempty"`
	WaitAddMailMap              map[uint64]*MailBin `protobuf:"bytes,2,rep,name=wait_add_mail_map,json=waitAddMailMap,proto3" json:"wait_add_mail_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ActionSeqMap                map[uint32]uint32   `protobuf:"bytes,3,rep,name=action_seq_map,json=actionSeqMap,proto3" json:"action_seq_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NewWaitAddMailMap           map[string]*MailBin `protobuf:"bytes,4,rep,name=new_wait_add_mail_map,json=newWaitAddMailMap,proto3" json:"new_wait_add_mail_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsCollectibleMailTransfered bool                `protobuf:"varint,5,opt,name=is_collectible_mail_transfered,json=isCollectibleMailTransfered,proto3" json:"is_collectible_mail_transfered,omitempty"`
}

func (x *PlayerMailCompBin) Reset() {
	*x = PlayerMailCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMailCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMailCompBin) ProtoMessage() {}

func (x *PlayerMailCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMailCompBin.ProtoReflect.Descriptor instead.
func (*PlayerMailCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{332}
}

func (x *PlayerMailCompBin) GetHasTakeAttachmentMailIdList() []uint32 {
	if x != nil {
		return x.HasTakeAttachmentMailIdList
	}
	return nil
}

func (x *PlayerMailCompBin) GetWaitAddMailMap() map[uint64]*MailBin {
	if x != nil {
		return x.WaitAddMailMap
	}
	return nil
}

func (x *PlayerMailCompBin) GetActionSeqMap() map[uint32]uint32 {
	if x != nil {
		return x.ActionSeqMap
	}
	return nil
}

func (x *PlayerMailCompBin) GetNewWaitAddMailMap() map[string]*MailBin {
	if x != nil {
		return x.NewWaitAddMailMap
	}
	return nil
}

func (x *PlayerMailCompBin) GetIsCollectibleMailTransfered() bool {
	if x != nil {
		return x.IsCollectibleMailTransfered
	}
	return false
}

type ShopGoodsRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsId     uint32 `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	BoughtNum   uint32 `protobuf:"varint,2,opt,name=bought_num,json=boughtNum,proto3" json:"bought_num,omitempty"`
	LastBuyTime uint32 `protobuf:"fixed32,3,opt,name=last_buy_time,json=lastBuyTime,proto3" json:"last_buy_time,omitempty"`
}

func (x *ShopGoodsRecordBin) Reset() {
	*x = ShopGoodsRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopGoodsRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopGoodsRecordBin) ProtoMessage() {}

func (x *ShopGoodsRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopGoodsRecordBin.ProtoReflect.Descriptor instead.
func (*ShopGoodsRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{333}
}

func (x *ShopGoodsRecordBin) GetGoodsId() uint32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *ShopGoodsRecordBin) GetBoughtNum() uint32 {
	if x != nil {
		return x.BoughtNum
	}
	return 0
}

func (x *ShopGoodsRecordBin) GetLastBuyTime() uint32 {
	if x != nil {
		return x.LastBuyTime
	}
	return 0
}

type ShopRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopType               uint32                `protobuf:"varint,1,opt,name=shop_type,json=shopType,proto3" json:"shop_type,omitempty"`
	GoodsRecordList        []*ShopGoodsRecordBin `protobuf:"bytes,2,rep,name=goods_record_list,json=goodsRecordList,proto3" json:"goods_record_list,omitempty"`
	HistoryGoodsRecordList []*ShopGoodsRecordBin `protobuf:"bytes,3,rep,name=history_goods_record_list,json=historyGoodsRecordList,proto3" json:"history_goods_record_list,omitempty"`
}

func (x *ShopRecordBin) Reset() {
	*x = ShopRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopRecordBin) ProtoMessage() {}

func (x *ShopRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopRecordBin.ProtoReflect.Descriptor instead.
func (*ShopRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{334}
}

func (x *ShopRecordBin) GetShopType() uint32 {
	if x != nil {
		return x.ShopType
	}
	return 0
}

func (x *ShopRecordBin) GetGoodsRecordList() []*ShopGoodsRecordBin {
	if x != nil {
		return x.GoodsRecordList
	}
	return nil
}

func (x *ShopRecordBin) GetHistoryGoodsRecordList() []*ShopGoodsRecordBin {
	if x != nil {
		return x.HistoryGoodsRecordList
	}
	return nil
}

type PlayerShopCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopRecordList []*ShopRecordBin `protobuf:"bytes,1,rep,name=shop_record_list,json=shopRecordList,proto3" json:"shop_record_list,omitempty"`
}

func (x *PlayerShopCompBin) Reset() {
	*x = PlayerShopCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerShopCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerShopCompBin) ProtoMessage() {}

func (x *PlayerShopCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerShopCompBin.ProtoReflect.Descriptor instead.
func (*PlayerShopCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{335}
}

func (x *PlayerShopCompBin) GetShopRecordList() []*ShopRecordBin {
	if x != nil {
		return x.ShopRecordList
	}
	return nil
}

type GachaItemTypeDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastGachaTimes uint32 `protobuf:"varint,1,opt,name=last_gacha_times,json=lastGachaTimes,proto3" json:"last_gacha_times,omitempty"`
}

func (x *GachaItemTypeDataBin) Reset() {
	*x = GachaItemTypeDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaItemTypeDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaItemTypeDataBin) ProtoMessage() {}

func (x *GachaItemTypeDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaItemTypeDataBin.ProtoReflect.Descriptor instead.
func (*GachaItemTypeDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{336}
}

func (x *GachaItemTypeDataBin) GetLastGachaTimes() uint32 {
	if x != nil {
		return x.LastGachaTimes
	}
	return 0
}

type GachaItemParentTypeDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastGachaTimes uint32 `protobuf:"varint,1,opt,name=last_gacha_times,json=lastGachaTimes,proto3" json:"last_gacha_times,omitempty"`
}

func (x *GachaItemParentTypeDataBin) Reset() {
	*x = GachaItemParentTypeDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaItemParentTypeDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaItemParentTypeDataBin) ProtoMessage() {}

func (x *GachaItemParentTypeDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaItemParentTypeDataBin.ProtoReflect.Descriptor instead.
func (*GachaItemParentTypeDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{337}
}

func (x *GachaItemParentTypeDataBin) GetLastGachaTimes() uint32 {
	if x != nil {
		return x.LastGachaTimes
	}
	return 0
}

type GachaGuaranteeDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GachaRuleId             uint32 `protobuf:"varint,1,opt,name=gacha_rule_id,json=gachaRuleId,proto3" json:"gacha_rule_id,omitempty"`
	LastGachaGuaranteeTimes uint32 `protobuf:"varint,2,opt,name=last_gacha_guarantee_times,json=lastGachaGuaranteeTimes,proto3" json:"last_gacha_guarantee_times,omitempty"`
	IsCurScheduleTriggered  bool   `protobuf:"varint,3,opt,name=is_cur_schedule_triggered,json=isCurScheduleTriggered,proto3" json:"is_cur_schedule_triggered,omitempty"`
}

func (x *GachaGuaranteeDataBin) Reset() {
	*x = GachaGuaranteeDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaGuaranteeDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaGuaranteeDataBin) ProtoMessage() {}

func (x *GachaGuaranteeDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaGuaranteeDataBin.ProtoReflect.Descriptor instead.
func (*GachaGuaranteeDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{338}
}

func (x *GachaGuaranteeDataBin) GetGachaRuleId() uint32 {
	if x != nil {
		return x.GachaRuleId
	}
	return 0
}

func (x *GachaGuaranteeDataBin) GetLastGachaGuaranteeTimes() uint32 {
	if x != nil {
		return x.LastGachaGuaranteeTimes
	}
	return 0
}

func (x *GachaGuaranteeDataBin) GetIsCurScheduleTriggered() bool {
	if x != nil {
		return x.IsCurScheduleTriggered
	}
	return false
}

type GachaUpDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GachaNoUpTimes uint32 `protobuf:"varint,1,opt,name=gacha_no_up_times,json=gachaNoUpTimes,proto3" json:"gacha_no_up_times,omitempty"`
}

func (x *GachaUpDataBin) Reset() {
	*x = GachaUpDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaUpDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaUpDataBin) ProtoMessage() {}

func (x *GachaUpDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaUpDataBin.ProtoReflect.Descriptor instead.
func (*GachaUpDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{339}
}

func (x *GachaUpDataBin) GetGachaNoUpTimes() uint32 {
	if x != nil {
		return x.GachaNoUpTimes
	}
	return 0
}

type GachaRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GachaType                     uint32                                 `protobuf:"varint,1,opt,name=gacha_type,json=gachaType,proto3" json:"gacha_type,omitempty"`
	CurScheduleId                 uint32                                 `protobuf:"varint,2,opt,name=cur_schedule_id,json=curScheduleId,proto3" json:"cur_schedule_id,omitempty"`
	TotalGachaTimes               uint32                                 `protobuf:"varint,3,opt,name=total_gacha_times,json=totalGachaTimes,proto3" json:"total_gacha_times,omitempty"`
	GachaGuaranteeMap             map[uint32]*GachaGuaranteeDataBin      `protobuf:"bytes,4,rep,name=gacha_guarantee_map,json=gachaGuaranteeMap,proto3" json:"gacha_guarantee_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CurScheduleTotalGachaTimes    uint32                                 `protobuf:"varint,5,opt,name=cur_schedule_total_gacha_times,json=curScheduleTotalGachaTimes,proto3" json:"cur_schedule_total_gacha_times,omitempty"`
	GachaItemTypeDataMap          map[uint32]*GachaItemTypeDataBin       `protobuf:"bytes,6,rep,name=gacha_item_type_data_map,json=gachaItemTypeDataMap,proto3" json:"gacha_item_type_data_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GachaItemParentTypeDataMap    map[uint32]*GachaItemParentTypeDataBin `protobuf:"bytes,7,rep,name=gacha_item_parent_type_data_map,json=gachaItemParentTypeDataMap,proto3" json:"gacha_item_parent_type_data_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TotalTenGachaTimes            uint32                                 `protobuf:"varint,8,opt,name=total_ten_gacha_times,json=totalTenGachaTimes,proto3" json:"total_ten_gacha_times,omitempty"`
	GachaUpDataMap                map[uint32]*GachaUpDataBin             `protobuf:"bytes,9,rep,name=gacha_up_data_map,json=gachaUpDataMap,proto3" json:"gacha_up_data_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WishItemId                    uint32                                 `protobuf:"varint,10,opt,name=wish_item_id,json=wishItemId,proto3" json:"wish_item_id,omitempty"`
	WishProgress                  uint32                                 `protobuf:"varint,11,opt,name=wish_progress,json=wishProgress,proto3" json:"wish_progress,omitempty"`
	IsNewWish                     bool                                   `protobuf:"varint,12,opt,name=is_new_wish,json=isNewWish,proto3" json:"is_new_wish,omitempty"`
	CurScheduleDailyLastGachaTime uint32                                 `protobuf:"varint,13,opt,name=cur_schedule_daily_last_gacha_time,json=curScheduleDailyLastGachaTime,proto3" json:"cur_schedule_daily_last_gacha_time,omitempty"`
	CurScheduleDailyGachaTimes    uint32                                 `protobuf:"varint,14,opt,name=cur_schedule_daily_gacha_times,json=curScheduleDailyGachaTimes,proto3" json:"cur_schedule_daily_gacha_times,omitempty"`
}

func (x *GachaRecordBin) Reset() {
	*x = GachaRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaRecordBin) ProtoMessage() {}

func (x *GachaRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaRecordBin.ProtoReflect.Descriptor instead.
func (*GachaRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{340}
}

func (x *GachaRecordBin) GetGachaType() uint32 {
	if x != nil {
		return x.GachaType
	}
	return 0
}

func (x *GachaRecordBin) GetCurScheduleId() uint32 {
	if x != nil {
		return x.CurScheduleId
	}
	return 0
}

func (x *GachaRecordBin) GetTotalGachaTimes() uint32 {
	if x != nil {
		return x.TotalGachaTimes
	}
	return 0
}

func (x *GachaRecordBin) GetGachaGuaranteeMap() map[uint32]*GachaGuaranteeDataBin {
	if x != nil {
		return x.GachaGuaranteeMap
	}
	return nil
}

func (x *GachaRecordBin) GetCurScheduleTotalGachaTimes() uint32 {
	if x != nil {
		return x.CurScheduleTotalGachaTimes
	}
	return 0
}

func (x *GachaRecordBin) GetGachaItemTypeDataMap() map[uint32]*GachaItemTypeDataBin {
	if x != nil {
		return x.GachaItemTypeDataMap
	}
	return nil
}

func (x *GachaRecordBin) GetGachaItemParentTypeDataMap() map[uint32]*GachaItemParentTypeDataBin {
	if x != nil {
		return x.GachaItemParentTypeDataMap
	}
	return nil
}

func (x *GachaRecordBin) GetTotalTenGachaTimes() uint32 {
	if x != nil {
		return x.TotalTenGachaTimes
	}
	return 0
}

func (x *GachaRecordBin) GetGachaUpDataMap() map[uint32]*GachaUpDataBin {
	if x != nil {
		return x.GachaUpDataMap
	}
	return nil
}

func (x *GachaRecordBin) GetWishItemId() uint32 {
	if x != nil {
		return x.WishItemId
	}
	return 0
}

func (x *GachaRecordBin) GetWishProgress() uint32 {
	if x != nil {
		return x.WishProgress
	}
	return 0
}

func (x *GachaRecordBin) GetIsNewWish() bool {
	if x != nil {
		return x.IsNewWish
	}
	return false
}

func (x *GachaRecordBin) GetCurScheduleDailyLastGachaTime() uint32 {
	if x != nil {
		return x.CurScheduleDailyLastGachaTime
	}
	return 0
}

func (x *GachaRecordBin) GetCurScheduleDailyGachaTimes() uint32 {
	if x != nil {
		return x.CurScheduleDailyGachaTimes
	}
	return 0
}

type PlayerGachaCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GachaRecordMap  map[uint32]*GachaRecordBin `protobuf:"bytes,1,rep,name=gacha_record_map,json=gachaRecordMap,proto3" json:"gacha_record_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GachaRandom     uint32                     `protobuf:"varint,2,opt,name=gacha_random,json=gachaRandom,proto3" json:"gacha_random,omitempty"`
	DailyGachaTimes uint32                     `protobuf:"varint,3,opt,name=daily_gacha_times,json=dailyGachaTimes,proto3" json:"daily_gacha_times,omitempty"`
	LastGachaTime   uint32                     `protobuf:"varint,4,opt,name=last_gacha_time,json=lastGachaTime,proto3" json:"last_gacha_time,omitempty"`
}

func (x *PlayerGachaCompBin) Reset() {
	*x = PlayerGachaCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGachaCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGachaCompBin) ProtoMessage() {}

func (x *PlayerGachaCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGachaCompBin.ProtoReflect.Descriptor instead.
func (*PlayerGachaCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{341}
}

func (x *PlayerGachaCompBin) GetGachaRecordMap() map[uint32]*GachaRecordBin {
	if x != nil {
		return x.GachaRecordMap
	}
	return nil
}

func (x *PlayerGachaCompBin) GetGachaRandom() uint32 {
	if x != nil {
		return x.GachaRandom
	}
	return 0
}

func (x *PlayerGachaCompBin) GetDailyGachaTimes() uint32 {
	if x != nil {
		return x.DailyGachaTimes
	}
	return 0
}

func (x *PlayerGachaCompBin) GetLastGachaTime() uint32 {
	if x != nil {
		return x.LastGachaTime
	}
	return 0
}

type GivingRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GivingId       uint32            `protobuf:"varint,1,opt,name=giving_id,json=givingId,proto3" json:"giving_id,omitempty"`
	IsFinished     bool              `protobuf:"varint,2,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	LastGroupId    uint32            `protobuf:"varint,3,opt,name=last_group_id,json=lastGroupId,proto3" json:"last_group_id,omitempty"`
	IsGadgetGiving bool              `protobuf:"varint,4,opt,name=is_gadget_giving,json=isGadgetGiving,proto3" json:"is_gadget_giving,omitempty"`
	GroupId        uint32            `protobuf:"varint,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ConfigId       uint32            `protobuf:"varint,6,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	MaterialCntMap map[uint32]uint32 `protobuf:"bytes,8,rep,name=material_cnt_map,json=materialCntMap,proto3" json:"material_cnt_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GivingRecordBin) Reset() {
	*x = GivingRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GivingRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GivingRecordBin) ProtoMessage() {}

func (x *GivingRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GivingRecordBin.ProtoReflect.Descriptor instead.
func (*GivingRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{342}
}

func (x *GivingRecordBin) GetGivingId() uint32 {
	if x != nil {
		return x.GivingId
	}
	return 0
}

func (x *GivingRecordBin) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *GivingRecordBin) GetLastGroupId() uint32 {
	if x != nil {
		return x.LastGroupId
	}
	return 0
}

func (x *GivingRecordBin) GetIsGadgetGiving() bool {
	if x != nil {
		return x.IsGadgetGiving
	}
	return false
}

func (x *GivingRecordBin) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GivingRecordBin) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *GivingRecordBin) GetMaterialCntMap() map[uint32]uint32 {
	if x != nil {
		return x.MaterialCntMap
	}
	return nil
}

type PlayerGivingCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GivingRecordMap map[uint32]*GivingRecordBin `protobuf:"bytes,1,rep,name=giving_record_map,json=givingRecordMap,proto3" json:"giving_record_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlayerGivingCompBin) Reset() {
	*x = PlayerGivingCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGivingCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGivingCompBin) ProtoMessage() {}

func (x *PlayerGivingCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGivingCompBin.ProtoReflect.Descriptor instead.
func (*PlayerGivingCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{343}
}

func (x *PlayerGivingCompBin) GetGivingRecordMap() map[uint32]*GivingRecordBin {
	if x != nil {
		return x.GivingRecordMap
	}
	return nil
}

type ForgeQueueBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionNo    uint32   `protobuf:"varint,1,opt,name=transaction_no,json=transactionNo,proto3" json:"transaction_no,omitempty"`
	QueueId          uint32   `protobuf:"varint,2,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	ForgeId          uint32   `protobuf:"varint,3,opt,name=forge_id,json=forgeId,proto3" json:"forge_id,omitempty"`
	ForgeCount       uint32   `protobuf:"varint,4,opt,name=forge_count,json=forgeCount,proto3" json:"forge_count,omitempty"`
	FinishCount      uint32   `protobuf:"varint,5,opt,name=finish_count,json=finishCount,proto3" json:"finish_count,omitempty"`
	TakenCount       uint32   `protobuf:"varint,6,opt,name=taken_count,json=takenCount,proto3" json:"taken_count,omitempty"`
	StartTime        uint32   `protobuf:"fixed32,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	SingleTimeCost   uint32   `protobuf:"varint,8,opt,name=single_time_cost,json=singleTimeCost,proto3" json:"single_time_cost,omitempty"`
	ProudSkillIdList []uint32 `protobuf:"varint,9,rep,packed,name=proud_skill_id_list,json=proudSkillIdList,proto3" json:"proud_skill_id_list,omitempty"`
	AvatarId         uint32   `protobuf:"varint,10,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
}

func (x *ForgeQueueBin) Reset() {
	*x = ForgeQueueBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForgeQueueBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForgeQueueBin) ProtoMessage() {}

func (x *ForgeQueueBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForgeQueueBin.ProtoReflect.Descriptor instead.
func (*ForgeQueueBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{344}
}

func (x *ForgeQueueBin) GetTransactionNo() uint32 {
	if x != nil {
		return x.TransactionNo
	}
	return 0
}

func (x *ForgeQueueBin) GetQueueId() uint32 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *ForgeQueueBin) GetForgeId() uint32 {
	if x != nil {
		return x.ForgeId
	}
	return 0
}

func (x *ForgeQueueBin) GetForgeCount() uint32 {
	if x != nil {
		return x.ForgeCount
	}
	return 0
}

func (x *ForgeQueueBin) GetFinishCount() uint32 {
	if x != nil {
		return x.FinishCount
	}
	return 0
}

func (x *ForgeQueueBin) GetTakenCount() uint32 {
	if x != nil {
		return x.TakenCount
	}
	return 0
}

func (x *ForgeQueueBin) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ForgeQueueBin) GetSingleTimeCost() uint32 {
	if x != nil {
		return x.SingleTimeCost
	}
	return 0
}

func (x *ForgeQueueBin) GetProudSkillIdList() []uint32 {
	if x != nil {
		return x.ProudSkillIdList
	}
	return nil
}

func (x *ForgeQueueBin) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

type PlayerForgeCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastTransactionNo uint32                    `protobuf:"varint,1,opt,name=last_transaction_no,json=lastTransactionNo,proto3" json:"last_transaction_no,omitempty"`
	ForgeQueueMap     map[uint32]*ForgeQueueBin `protobuf:"bytes,2,rep,name=forge_queue_map,json=forgeQueueMap,proto3" json:"forge_queue_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ForgePoint        uint32                    `protobuf:"varint,3,opt,name=forge_point,json=forgePoint,proto3" json:"forge_point,omitempty"`
	LastRefreshTime   uint32                    `protobuf:"fixed32,4,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	UnlockForgeIdList []uint32                  `protobuf:"varint,5,rep,packed,name=unlock_forge_id_list,json=unlockForgeIdList,proto3" json:"unlock_forge_id_list,omitempty"`
}

func (x *PlayerForgeCompBin) Reset() {
	*x = PlayerForgeCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerForgeCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerForgeCompBin) ProtoMessage() {}

func (x *PlayerForgeCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerForgeCompBin.ProtoReflect.Descriptor instead.
func (*PlayerForgeCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{345}
}

func (x *PlayerForgeCompBin) GetLastTransactionNo() uint32 {
	if x != nil {
		return x.LastTransactionNo
	}
	return 0
}

func (x *PlayerForgeCompBin) GetForgeQueueMap() map[uint32]*ForgeQueueBin {
	if x != nil {
		return x.ForgeQueueMap
	}
	return nil
}

func (x *PlayerForgeCompBin) GetForgePoint() uint32 {
	if x != nil {
		return x.ForgePoint
	}
	return 0
}

func (x *PlayerForgeCompBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

func (x *PlayerForgeCompBin) GetUnlockForgeIdList() []uint32 {
	if x != nil {
		return x.UnlockForgeIdList
	}
	return nil
}

type PlayerCombineCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnlockCombineIdList []uint32 `protobuf:"varint,1,rep,packed,name=unlock_combine_id_list,json=unlockCombineIdList,proto3" json:"unlock_combine_id_list,omitempty"`
}

func (x *PlayerCombineCompBin) Reset() {
	*x = PlayerCombineCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerCombineCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerCombineCompBin) ProtoMessage() {}

func (x *PlayerCombineCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerCombineCompBin.ProtoReflect.Descriptor instead.
func (*PlayerCombineCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{346}
}

func (x *PlayerCombineCompBin) GetUnlockCombineIdList() []uint32 {
	if x != nil {
		return x.UnlockCombineIdList
	}
	return nil
}

type WatcherBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WatcherId uint32            `protobuf:"varint,1,opt,name=watcher_id,json=watcherId,proto3" json:"watcher_id,omitempty"`
	Progress  uint32            `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
	VarList   []*WatcherBin_Var `protobuf:"bytes,3,rep,name=var_list,json=varList,proto3" json:"var_list,omitempty"`
}

func (x *WatcherBin) Reset() {
	*x = WatcherBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatcherBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatcherBin) ProtoMessage() {}

func (x *WatcherBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatcherBin.ProtoReflect.Descriptor instead.
func (*WatcherBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{347}
}

func (x *WatcherBin) GetWatcherId() uint32 {
	if x != nil {
		return x.WatcherId
	}
	return 0
}

func (x *WatcherBin) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *WatcherBin) GetVarList() []*WatcherBin_Var {
	if x != nil {
		return x.VarList
	}
	return nil
}

type PushTipsBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PushTipsId uint32 `protobuf:"varint,1,opt,name=push_tips_id,json=pushTipsId,proto3" json:"push_tips_id,omitempty"`
	State      uint32 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *PushTipsBin) Reset() {
	*x = PushTipsBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushTipsBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushTipsBin) ProtoMessage() {}

func (x *PushTipsBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushTipsBin.ProtoReflect.Descriptor instead.
func (*PushTipsBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{348}
}

func (x *PushTipsBin) GetPushTipsId() uint32 {
	if x != nil {
		return x.PushTipsId
	}
	return 0
}

func (x *PushTipsBin) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

type RecordValueBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxCriticalDamage float32 `protobuf:"fixed32,1,opt,name=max_critical_damage,json=maxCriticalDamage,proto3" json:"max_critical_damage,omitempty"`
	MaxFlyMapDistance float32 `protobuf:"fixed32,2,opt,name=max_fly_map_distance,json=maxFlyMapDistance,proto3" json:"max_fly_map_distance,omitempty"`
	MaxFlyTime        float32 `protobuf:"fixed32,3,opt,name=max_fly_time,json=maxFlyTime,proto3" json:"max_fly_time,omitempty"`
	MaxDashTime       float32 `protobuf:"fixed32,4,opt,name=max_dash_time,json=maxDashTime,proto3" json:"max_dash_time,omitempty"`
}

func (x *RecordValueBin) Reset() {
	*x = RecordValueBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordValueBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordValueBin) ProtoMessage() {}

func (x *RecordValueBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordValueBin.ProtoReflect.Descriptor instead.
func (*RecordValueBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{349}
}

func (x *RecordValueBin) GetMaxCriticalDamage() float32 {
	if x != nil {
		return x.MaxCriticalDamage
	}
	return 0
}

func (x *RecordValueBin) GetMaxFlyMapDistance() float32 {
	if x != nil {
		return x.MaxFlyMapDistance
	}
	return 0
}

func (x *RecordValueBin) GetMaxFlyTime() float32 {
	if x != nil {
		return x.MaxFlyTime
	}
	return 0
}

func (x *RecordValueBin) GetMaxDashTime() float32 {
	if x != nil {
		return x.MaxDashTime
	}
	return 0
}

type PlayerWatcherCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalWatcherProgressMap  map[uint32]uint32 `protobuf:"bytes,1,rep,name=global_watcher_progress_map,json=globalWatcherProgressMap,proto3" json:"global_watcher_progress_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FinishedGlobalWatcherList []uint32          `protobuf:"varint,2,rep,packed,name=finished_global_watcher_list,json=finishedGlobalWatcherList,proto3" json:"finished_global_watcher_list,omitempty"`
	PushTipsList              []*PushTipsBin    `protobuf:"bytes,3,rep,name=push_tips_list,json=pushTipsList,proto3" json:"push_tips_list,omitempty"`
	WatcherList               []*WatcherBin     `protobuf:"bytes,4,rep,name=watcher_list,json=watcherList,proto3" json:"watcher_list,omitempty"`
	RecordValue               *RecordValueBin   `protobuf:"bytes,5,opt,name=record_value,json=recordValue,proto3" json:"record_value,omitempty"`
}

func (x *PlayerWatcherCompBin) Reset() {
	*x = PlayerWatcherCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerWatcherCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerWatcherCompBin) ProtoMessage() {}

func (x *PlayerWatcherCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerWatcherCompBin.ProtoReflect.Descriptor instead.
func (*PlayerWatcherCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{350}
}

func (x *PlayerWatcherCompBin) GetGlobalWatcherProgressMap() map[uint32]uint32 {
	if x != nil {
		return x.GlobalWatcherProgressMap
	}
	return nil
}

func (x *PlayerWatcherCompBin) GetFinishedGlobalWatcherList() []uint32 {
	if x != nil {
		return x.FinishedGlobalWatcherList
	}
	return nil
}

func (x *PlayerWatcherCompBin) GetPushTipsList() []*PushTipsBin {
	if x != nil {
		return x.PushTipsList
	}
	return nil
}

func (x *PlayerWatcherCompBin) GetWatcherList() []*WatcherBin {
	if x != nil {
		return x.WatcherList
	}
	return nil
}

func (x *PlayerWatcherCompBin) GetRecordValue() *RecordValueBin {
	if x != nil {
		return x.RecordValue
	}
	return nil
}

type TowerTeamBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TowerTeamId    uint32   `protobuf:"varint,1,opt,name=tower_team_id,json=towerTeamId,proto3" json:"tower_team_id,omitempty"`
	AvatarGuidList []uint64 `protobuf:"varint,2,rep,packed,name=avatar_guid_list,json=avatarGuidList,proto3" json:"avatar_guid_list,omitempty"`
}

func (x *TowerTeamBin) Reset() {
	*x = TowerTeamBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerTeamBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerTeamBin) ProtoMessage() {}

func (x *TowerTeamBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerTeamBin.ProtoReflect.Descriptor instead.
func (*TowerTeamBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{351}
}

func (x *TowerTeamBin) GetTowerTeamId() uint32 {
	if x != nil {
		return x.TowerTeamId
	}
	return 0
}

func (x *TowerTeamBin) GetAvatarGuidList() []uint64 {
	if x != nil {
		return x.AvatarGuidList
	}
	return nil
}

type TowerLevelRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId           uint32   `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	SatisfiedCondList []uint32 `protobuf:"varint,2,rep,packed,name=satisfied_cond_list,json=satisfiedCondList,proto3" json:"satisfied_cond_list,omitempty"`
}

func (x *TowerLevelRecordBin) Reset() {
	*x = TowerLevelRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerLevelRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerLevelRecordBin) ProtoMessage() {}

func (x *TowerLevelRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerLevelRecordBin.ProtoReflect.Descriptor instead.
func (*TowerLevelRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{352}
}

func (x *TowerLevelRecordBin) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *TowerLevelRecordBin) GetSatisfiedCondList() []uint32 {
	if x != nil {
		return x.SatisfiedCondList
	}
	return nil
}

type TowerFloorRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FloorId                 uint32                 `protobuf:"varint,1,opt,name=floor_id,json=floorId,proto3" json:"floor_id,omitempty"`
	PassedLevelRecordList   []*TowerLevelRecordBin `protobuf:"bytes,2,rep,name=passed_level_record_list,json=passedLevelRecordList,proto3" json:"passed_level_record_list,omitempty"`
	FloorStarRewardProgress uint32                 `protobuf:"varint,3,opt,name=floor_star_reward_progress,json=floorStarRewardProgress,proto3" json:"floor_star_reward_progress,omitempty"`
}

func (x *TowerFloorRecordBin) Reset() {
	*x = TowerFloorRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerFloorRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerFloorRecordBin) ProtoMessage() {}

func (x *TowerFloorRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerFloorRecordBin.ProtoReflect.Descriptor instead.
func (*TowerFloorRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{353}
}

func (x *TowerFloorRecordBin) GetFloorId() uint32 {
	if x != nil {
		return x.FloorId
	}
	return 0
}

func (x *TowerFloorRecordBin) GetPassedLevelRecordList() []*TowerLevelRecordBin {
	if x != nil {
		return x.PassedLevelRecordList
	}
	return nil
}

func (x *TowerFloorRecordBin) GetFloorStarRewardProgress() uint32 {
	if x != nil {
		return x.FloorStarRewardProgress
	}
	return 0
}

type TowerAvatarRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurFightPropMap map[uint32]float32 `protobuf:"bytes,1,rep,name=cur_fight_prop_map,json=curFightPropMap,proto3" json:"cur_fight_prop_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *TowerAvatarRecordBin) Reset() {
	*x = TowerAvatarRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerAvatarRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerAvatarRecordBin) ProtoMessage() {}

func (x *TowerAvatarRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerAvatarRecordBin.ProtoReflect.Descriptor instead.
func (*TowerAvatarRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{354}
}

func (x *TowerAvatarRecordBin) GetCurFightPropMap() map[uint32]float32 {
	if x != nil {
		return x.CurFightPropMap
	}
	return nil
}

type TowerCurLevelRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurFloorIndex   uint32                           `protobuf:"varint,1,opt,name=cur_floor_index,json=curFloorIndex,proto3" json:"cur_floor_index,omitempty"`
	CurLevelIndex   uint32                           `protobuf:"varint,2,opt,name=cur_level_index,json=curLevelIndex,proto3" json:"cur_level_index,omitempty"`
	TowerTeamList   []*TowerTeamBin                  `protobuf:"bytes,3,rep,name=tower_team_list,json=towerTeamList,proto3" json:"tower_team_list,omitempty"`
	AvatarRecordMap map[uint64]*TowerAvatarRecordBin `protobuf:"bytes,4,rep,name=avatar_record_map,json=avatarRecordMap,proto3" json:"avatar_record_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TowerBuffMap    map[uint32]uint32                `protobuf:"bytes,5,rep,name=tower_buff_map,json=towerBuffMap,proto3" json:"tower_buff_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IsFloorFinished bool                             `protobuf:"varint,6,opt,name=is_floor_finished,json=isFloorFinished,proto3" json:"is_floor_finished,omitempty"`
}

func (x *TowerCurLevelRecordBin) Reset() {
	*x = TowerCurLevelRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerCurLevelRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerCurLevelRecordBin) ProtoMessage() {}

func (x *TowerCurLevelRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerCurLevelRecordBin.ProtoReflect.Descriptor instead.
func (*TowerCurLevelRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{355}
}

func (x *TowerCurLevelRecordBin) GetCurFloorIndex() uint32 {
	if x != nil {
		return x.CurFloorIndex
	}
	return 0
}

func (x *TowerCurLevelRecordBin) GetCurLevelIndex() uint32 {
	if x != nil {
		return x.CurLevelIndex
	}
	return 0
}

func (x *TowerCurLevelRecordBin) GetTowerTeamList() []*TowerTeamBin {
	if x != nil {
		return x.TowerTeamList
	}
	return nil
}

func (x *TowerCurLevelRecordBin) GetAvatarRecordMap() map[uint64]*TowerAvatarRecordBin {
	if x != nil {
		return x.AvatarRecordMap
	}
	return nil
}

func (x *TowerCurLevelRecordBin) GetTowerBuffMap() map[uint32]uint32 {
	if x != nil {
		return x.TowerBuffMap
	}
	return nil
}

func (x *TowerCurLevelRecordBin) GetIsFloorFinished() bool {
	if x != nil {
		return x.IsFloorFinished
	}
	return false
}

type TowerLevelBuffListBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TowerBuffIdList []uint32 `protobuf:"varint,1,rep,packed,name=tower_buff_id_list,json=towerBuffIdList,proto3" json:"tower_buff_id_list,omitempty"`
}

func (x *TowerLevelBuffListBin) Reset() {
	*x = TowerLevelBuffListBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerLevelBuffListBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerLevelBuffListBin) ProtoMessage() {}

func (x *TowerLevelBuffListBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerLevelBuffListBin.ProtoReflect.Descriptor instead.
func (*TowerLevelBuffListBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{356}
}

func (x *TowerLevelBuffListBin) GetTowerBuffIdList() []uint32 {
	if x != nil {
		return x.TowerBuffIdList
	}
	return nil
}

type TowerFloorLevelBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FloorIndex uint32 `protobuf:"varint,1,opt,name=floor_index,json=floorIndex,proto3" json:"floor_index,omitempty"`
	LevelIndex uint32 `protobuf:"varint,2,opt,name=level_index,json=levelIndex,proto3" json:"level_index,omitempty"`
}

func (x *TowerFloorLevelBin) Reset() {
	*x = TowerFloorLevelBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerFloorLevelBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerFloorLevelBin) ProtoMessage() {}

func (x *TowerFloorLevelBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerFloorLevelBin.ProtoReflect.Descriptor instead.
func (*TowerFloorLevelBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{357}
}

func (x *TowerFloorLevelBin) GetFloorIndex() uint32 {
	if x != nil {
		return x.FloorIndex
	}
	return 0
}

func (x *TowerFloorLevelBin) GetLevelIndex() uint32 {
	if x != nil {
		return x.LevelIndex
	}
	return 0
}

type TowerFightStatisticBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarRevealCountMap    map[uint32]uint32 `protobuf:"bytes,1,rep,name=avatar_reveal_count_map,json=avatarRevealCountMap,proto3" json:"avatar_reveal_count_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	KillCountMap            map[uint32]uint32 `protobuf:"bytes,2,rep,name=kill_count_map,json=killCountMap,proto3" json:"kill_count_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MaxSingleDamageAvatarId uint32            `protobuf:"varint,3,opt,name=max_single_damage_avatar_id,json=maxSingleDamageAvatarId,proto3" json:"max_single_damage_avatar_id,omitempty"`
	MaxSingleDamageValue    uint32            `protobuf:"varint,4,opt,name=max_single_damage_value,json=maxSingleDamageValue,proto3" json:"max_single_damage_value,omitempty"`
	TakeDamageCountMap      map[uint32]uint32 `protobuf:"bytes,5,rep,name=take_damage_count_map,json=takeDamageCountMap,proto3" json:"take_damage_count_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NormalSkillCountMap     map[uint32]uint32 `protobuf:"bytes,6,rep,name=normal_skill_count_map,json=normalSkillCountMap,proto3" json:"normal_skill_count_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	EnergySkillCountMap     map[uint32]uint32 `protobuf:"bytes,7,rep,name=energy_skill_count_map,json=energySkillCountMap,proto3" json:"energy_skill_count_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *TowerFightStatisticBin) Reset() {
	*x = TowerFightStatisticBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerFightStatisticBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerFightStatisticBin) ProtoMessage() {}

func (x *TowerFightStatisticBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerFightStatisticBin.ProtoReflect.Descriptor instead.
func (*TowerFightStatisticBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{358}
}

func (x *TowerFightStatisticBin) GetAvatarRevealCountMap() map[uint32]uint32 {
	if x != nil {
		return x.AvatarRevealCountMap
	}
	return nil
}

func (x *TowerFightStatisticBin) GetKillCountMap() map[uint32]uint32 {
	if x != nil {
		return x.KillCountMap
	}
	return nil
}

func (x *TowerFightStatisticBin) GetMaxSingleDamageAvatarId() uint32 {
	if x != nil {
		return x.MaxSingleDamageAvatarId
	}
	return 0
}

func (x *TowerFightStatisticBin) GetMaxSingleDamageValue() uint32 {
	if x != nil {
		return x.MaxSingleDamageValue
	}
	return 0
}

func (x *TowerFightStatisticBin) GetTakeDamageCountMap() map[uint32]uint32 {
	if x != nil {
		return x.TakeDamageCountMap
	}
	return nil
}

func (x *TowerFightStatisticBin) GetNormalSkillCountMap() map[uint32]uint32 {
	if x != nil {
		return x.NormalSkillCountMap
	}
	return nil
}

func (x *TowerFightStatisticBin) GetEnergySkillCountMap() map[uint32]uint32 {
	if x != nil {
		return x.EnergySkillCountMap
	}
	return nil
}

type TowerFightSummaryPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId uint32 `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	Data     uint32 `protobuf:"varint,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TowerFightSummaryPair) Reset() {
	*x = TowerFightSummaryPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerFightSummaryPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerFightSummaryPair) ProtoMessage() {}

func (x *TowerFightSummaryPair) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerFightSummaryPair.ProtoReflect.Descriptor instead.
func (*TowerFightSummaryPair) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{359}
}

func (x *TowerFightSummaryPair) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *TowerFightSummaryPair) GetData() uint32 {
	if x != nil {
		return x.Data
	}
	return 0
}

type TowerMonthlyCombatSummaryBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MostRevealAvatarList          []*TowerFightSummaryPair `protobuf:"bytes,1,rep,name=most_reveal_avatar_list,json=mostRevealAvatarList,proto3" json:"most_reveal_avatar_list,omitempty"`
	MostKillAvatarPair            *TowerFightSummaryPair   `protobuf:"bytes,2,opt,name=most_kill_avatar_pair,json=mostKillAvatarPair,proto3" json:"most_kill_avatar_pair,omitempty"`
	HighestDpsAvatrPair           *TowerFightSummaryPair   `protobuf:"bytes,3,opt,name=highest_dps_avatr_pair,json=highestDpsAvatrPair,proto3" json:"highest_dps_avatr_pair,omitempty"`
	MostTakeDamageAvatarPair      *TowerFightSummaryPair   `protobuf:"bytes,4,opt,name=most_take_damage_avatar_pair,json=mostTakeDamageAvatarPair,proto3" json:"most_take_damage_avatar_pair,omitempty"`
	MostCastNormalSkillAvatarPair *TowerFightSummaryPair   `protobuf:"bytes,5,opt,name=most_cast_normal_skill_avatar_pair,json=mostCastNormalSkillAvatarPair,proto3" json:"most_cast_normal_skill_avatar_pair,omitempty"`
	MostCastEnergySkillAvatarPair *TowerFightSummaryPair   `protobuf:"bytes,6,opt,name=most_cast_energy_skill_avatar_pair,json=mostCastEnergySkillAvatarPair,proto3" json:"most_cast_energy_skill_avatar_pair,omitempty"`
}

func (x *TowerMonthlyCombatSummaryBin) Reset() {
	*x = TowerMonthlyCombatSummaryBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerMonthlyCombatSummaryBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerMonthlyCombatSummaryBin) ProtoMessage() {}

func (x *TowerMonthlyCombatSummaryBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerMonthlyCombatSummaryBin.ProtoReflect.Descriptor instead.
func (*TowerMonthlyCombatSummaryBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{360}
}

func (x *TowerMonthlyCombatSummaryBin) GetMostRevealAvatarList() []*TowerFightSummaryPair {
	if x != nil {
		return x.MostRevealAvatarList
	}
	return nil
}

func (x *TowerMonthlyCombatSummaryBin) GetMostKillAvatarPair() *TowerFightSummaryPair {
	if x != nil {
		return x.MostKillAvatarPair
	}
	return nil
}

func (x *TowerMonthlyCombatSummaryBin) GetHighestDpsAvatrPair() *TowerFightSummaryPair {
	if x != nil {
		return x.HighestDpsAvatrPair
	}
	return nil
}

func (x *TowerMonthlyCombatSummaryBin) GetMostTakeDamageAvatarPair() *TowerFightSummaryPair {
	if x != nil {
		return x.MostTakeDamageAvatarPair
	}
	return nil
}

func (x *TowerMonthlyCombatSummaryBin) GetMostCastNormalSkillAvatarPair() *TowerFightSummaryPair {
	if x != nil {
		return x.MostCastNormalSkillAvatarPair
	}
	return nil
}

func (x *TowerMonthlyCombatSummaryBin) GetMostCastEnergySkillAvatarPair() *TowerFightSummaryPair {
	if x != nil {
		return x.MostCastEnergySkillAvatarPair
	}
	return nil
}

type TowerMonthlySummaryBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TowerScheduleId      uint32                        `protobuf:"varint,1,opt,name=tower_schedule_id,json=towerScheduleId,proto3" json:"tower_schedule_id,omitempty"`
	BestFloorIndex       uint32                        `protobuf:"varint,2,opt,name=best_floor_index,json=bestFloorIndex,proto3" json:"best_floor_index,omitempty"`
	BestLevelIndex       uint32                        `protobuf:"varint,3,opt,name=best_level_index,json=bestLevelIndex,proto3" json:"best_level_index,omitempty"`
	TotalStarCount       uint32                        `protobuf:"varint,4,opt,name=total_star_count,json=totalStarCount,proto3" json:"total_star_count,omitempty"`
	MonthlyCombatSummary *TowerMonthlyCombatSummaryBin `protobuf:"bytes,5,opt,name=monthly_combat_summary,json=monthlyCombatSummary,proto3" json:"monthly_combat_summary,omitempty"`
	LastPassedFloorIndex uint32                        `protobuf:"varint,6,opt,name=last_passed_floor_index,json=lastPassedFloorIndex,proto3" json:"last_passed_floor_index,omitempty"`
	IsInteract           bool                          `protobuf:"varint,7,opt,name=is_interact,json=isInteract,proto3" json:"is_interact,omitempty"`
}

func (x *TowerMonthlySummaryBin) Reset() {
	*x = TowerMonthlySummaryBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerMonthlySummaryBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerMonthlySummaryBin) ProtoMessage() {}

func (x *TowerMonthlySummaryBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerMonthlySummaryBin.ProtoReflect.Descriptor instead.
func (*TowerMonthlySummaryBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{361}
}

func (x *TowerMonthlySummaryBin) GetTowerScheduleId() uint32 {
	if x != nil {
		return x.TowerScheduleId
	}
	return 0
}

func (x *TowerMonthlySummaryBin) GetBestFloorIndex() uint32 {
	if x != nil {
		return x.BestFloorIndex
	}
	return 0
}

func (x *TowerMonthlySummaryBin) GetBestLevelIndex() uint32 {
	if x != nil {
		return x.BestLevelIndex
	}
	return 0
}

func (x *TowerMonthlySummaryBin) GetTotalStarCount() uint32 {
	if x != nil {
		return x.TotalStarCount
	}
	return 0
}

func (x *TowerMonthlySummaryBin) GetMonthlyCombatSummary() *TowerMonthlyCombatSummaryBin {
	if x != nil {
		return x.MonthlyCombatSummary
	}
	return nil
}

func (x *TowerMonthlySummaryBin) GetLastPassedFloorIndex() uint32 {
	if x != nil {
		return x.LastPassedFloorIndex
	}
	return 0
}

func (x *TowerMonthlySummaryBin) GetIsInteract() bool {
	if x != nil {
		return x.IsInteract
	}
	return false
}

type PlayerTowerCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TowerScheduleId              uint32                             `protobuf:"varint,1,opt,name=tower_schedule_id,json=towerScheduleId,proto3" json:"tower_schedule_id,omitempty"`
	TowerFloorRecordList         []*TowerFloorRecordBin             `protobuf:"bytes,2,rep,name=tower_floor_record_list,json=towerFloorRecordList,proto3" json:"tower_floor_record_list,omitempty"`
	LastDailyRewardTime          uint32                             `protobuf:"fixed32,3,opt,name=last_daily_reward_time,json=lastDailyRewardTime,proto3" json:"last_daily_reward_time,omitempty"`
	DailyFloorIndex              uint32                             `protobuf:"varint,4,opt,name=daily_floor_index,json=dailyFloorIndex,proto3" json:"daily_floor_index,omitempty"`
	DailyLevelIndex              uint32                             `protobuf:"varint,5,opt,name=daily_level_index,json=dailyLevelIndex,proto3" json:"daily_level_index,omitempty"`
	DailyLevelBuffMap            map[uint32]*TowerLevelBuffListBin  `protobuf:"bytes,6,rep,name=daily_level_buff_map,json=dailyLevelBuffMap,proto3" json:"daily_level_buff_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CurLevelRecord               *TowerCurLevelRecordBin            `protobuf:"bytes,7,opt,name=cur_level_record,json=curLevelRecord,proto3" json:"cur_level_record,omitempty"`
	IsInteractThisSchedule       bool                               `protobuf:"varint,8,opt,name=is_interact_this_schedule,json=isInteractThisSchedule,proto3" json:"is_interact_this_schedule,omitempty"`
	FightStatistic               *TowerFightStatisticBin            `protobuf:"bytes,9,opt,name=fight_statistic,json=fightStatistic,proto3" json:"fight_statistic,omitempty"`
	TowerMonthlySummaryMap       map[uint32]*TowerMonthlySummaryBin `protobuf:"bytes,10,rep,name=tower_monthly_summary_map,json=towerMonthlySummaryMap,proto3" json:"tower_monthly_summary_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TowerEntranceFloorRecordList []*TowerFloorRecordBin             `protobuf:"bytes,11,rep,name=tower_entrance_floor_record_list,json=towerEntranceFloorRecordList,proto3" json:"tower_entrance_floor_record_list,omitempty"`
}

func (x *PlayerTowerCompBin) Reset() {
	*x = PlayerTowerCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerTowerCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerTowerCompBin) ProtoMessage() {}

func (x *PlayerTowerCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerTowerCompBin.ProtoReflect.Descriptor instead.
func (*PlayerTowerCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{362}
}

func (x *PlayerTowerCompBin) GetTowerScheduleId() uint32 {
	if x != nil {
		return x.TowerScheduleId
	}
	return 0
}

func (x *PlayerTowerCompBin) GetTowerFloorRecordList() []*TowerFloorRecordBin {
	if x != nil {
		return x.TowerFloorRecordList
	}
	return nil
}

func (x *PlayerTowerCompBin) GetLastDailyRewardTime() uint32 {
	if x != nil {
		return x.LastDailyRewardTime
	}
	return 0
}

func (x *PlayerTowerCompBin) GetDailyFloorIndex() uint32 {
	if x != nil {
		return x.DailyFloorIndex
	}
	return 0
}

func (x *PlayerTowerCompBin) GetDailyLevelIndex() uint32 {
	if x != nil {
		return x.DailyLevelIndex
	}
	return 0
}

func (x *PlayerTowerCompBin) GetDailyLevelBuffMap() map[uint32]*TowerLevelBuffListBin {
	if x != nil {
		return x.DailyLevelBuffMap
	}
	return nil
}

func (x *PlayerTowerCompBin) GetCurLevelRecord() *TowerCurLevelRecordBin {
	if x != nil {
		return x.CurLevelRecord
	}
	return nil
}

func (x *PlayerTowerCompBin) GetIsInteractThisSchedule() bool {
	if x != nil {
		return x.IsInteractThisSchedule
	}
	return false
}

func (x *PlayerTowerCompBin) GetFightStatistic() *TowerFightStatisticBin {
	if x != nil {
		return x.FightStatistic
	}
	return nil
}

func (x *PlayerTowerCompBin) GetTowerMonthlySummaryMap() map[uint32]*TowerMonthlySummaryBin {
	if x != nil {
		return x.TowerMonthlySummaryMap
	}
	return nil
}

func (x *PlayerTowerCompBin) GetTowerEntranceFloorRecordList() []*TowerFloorRecordBin {
	if x != nil {
		return x.TowerEntranceFloorRecordList
	}
	return nil
}

type BlossomCircleCampDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshId       uint32   `protobuf:"varint,1,opt,name=refresh_id,json=refreshId,proto3" json:"refresh_id,omitempty"`
	CircleCampId    uint32   `protobuf:"varint,2,opt,name=circle_camp_id,json=circleCampId,proto3" json:"circle_camp_id,omitempty"`
	DropId          uint32   `protobuf:"varint,3,opt,name=drop_id,json=dropId,proto3" json:"drop_id,omitempty"`
	PreviewReward   uint32   `protobuf:"varint,4,opt,name=preview_reward,json=previewReward,proto3" json:"preview_reward,omitempty"`
	Round           uint32   `protobuf:"varint,5,opt,name=round,proto3" json:"round,omitempty"`
	State           uint32   `protobuf:"varint,6,opt,name=state,proto3" json:"state,omitempty"`
	Progress        uint32   `protobuf:"varint,7,opt,name=progress,proto3" json:"progress,omitempty"`
	IsGuideOpened   bool     `protobuf:"varint,8,opt,name=is_guide_opened,json=isGuideOpened,proto3" json:"is_guide_opened,omitempty"`
	UpdateRoundList []uint32 `protobuf:"varint,9,rep,packed,name=update_round_list,json=updateRoundList,proto3" json:"update_round_list,omitempty"`
	ValidWorldLevel uint32   `protobuf:"varint,10,opt,name=valid_world_level,json=validWorldLevel,proto3" json:"valid_world_level,omitempty"`
}

func (x *BlossomCircleCampDataBin) Reset() {
	*x = BlossomCircleCampDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlossomCircleCampDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlossomCircleCampDataBin) ProtoMessage() {}

func (x *BlossomCircleCampDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlossomCircleCampDataBin.ProtoReflect.Descriptor instead.
func (*BlossomCircleCampDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{363}
}

func (x *BlossomCircleCampDataBin) GetRefreshId() uint32 {
	if x != nil {
		return x.RefreshId
	}
	return 0
}

func (x *BlossomCircleCampDataBin) GetCircleCampId() uint32 {
	if x != nil {
		return x.CircleCampId
	}
	return 0
}

func (x *BlossomCircleCampDataBin) GetDropId() uint32 {
	if x != nil {
		return x.DropId
	}
	return 0
}

func (x *BlossomCircleCampDataBin) GetPreviewReward() uint32 {
	if x != nil {
		return x.PreviewReward
	}
	return 0
}

func (x *BlossomCircleCampDataBin) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *BlossomCircleCampDataBin) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *BlossomCircleCampDataBin) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *BlossomCircleCampDataBin) GetIsGuideOpened() bool {
	if x != nil {
		return x.IsGuideOpened
	}
	return false
}

func (x *BlossomCircleCampDataBin) GetUpdateRoundList() []uint32 {
	if x != nil {
		return x.UpdateRoundList
	}
	return nil
}

func (x *BlossomCircleCampDataBin) GetValidWorldLevel() uint32 {
	if x != nil {
		return x.ValidWorldLevel
	}
	return 0
}

type BlossomRefreshDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CircleCampList  []*BlossomCircleCampDataBin `protobuf:"bytes,1,rep,name=circle_camp_list,json=circleCampList,proto3" json:"circle_camp_list,omitempty"`
	LastRefreshTime uint32                      `protobuf:"fixed32,2,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	UsedCampIdList  []uint32                    `protobuf:"varint,3,rep,packed,name=used_camp_id_list,json=usedCampIdList,proto3" json:"used_camp_id_list,omitempty"`
}

func (x *BlossomRefreshDataBin) Reset() {
	*x = BlossomRefreshDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlossomRefreshDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlossomRefreshDataBin) ProtoMessage() {}

func (x *BlossomRefreshDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlossomRefreshDataBin.ProtoReflect.Descriptor instead.
func (*BlossomRefreshDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{364}
}

func (x *BlossomRefreshDataBin) GetCircleCampList() []*BlossomCircleCampDataBin {
	if x != nil {
		return x.CircleCampList
	}
	return nil
}

func (x *BlossomRefreshDataBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

func (x *BlossomRefreshDataBin) GetUsedCampIdList() []uint32 {
	if x != nil {
		return x.UsedCampIdList
	}
	return nil
}

type BlossomInitialSectionDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SectionId uint32 `protobuf:"varint,1,opt,name=section_id,json=sectionId,proto3" json:"section_id,omitempty"`
	Timestamp uint32 `protobuf:"fixed32,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *BlossomInitialSectionDataBin) Reset() {
	*x = BlossomInitialSectionDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlossomInitialSectionDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlossomInitialSectionDataBin) ProtoMessage() {}

func (x *BlossomInitialSectionDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlossomInitialSectionDataBin.ProtoReflect.Descriptor instead.
func (*BlossomInitialSectionDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{365}
}

func (x *BlossomInitialSectionDataBin) GetSectionId() uint32 {
	if x != nil {
		return x.SectionId
	}
	return 0
}

func (x *BlossomInitialSectionDataBin) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type PlayerBlossomCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecentUsedSectionIdMap map[uint32]uint32                        `protobuf:"bytes,1,rep,name=recent_used_section_id_map,json=recentUsedSectionIdMap,proto3" json:"recent_used_section_id_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	InitialSectionMap      map[uint32]*BlossomInitialSectionDataBin `protobuf:"bytes,2,rep,name=initial_section_map,json=initialSectionMap,proto3" json:"initial_section_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RefreshDataMap         map[uint32]*BlossomRefreshDataBin        `protobuf:"bytes,3,rep,name=refresh_data_map,json=refreshDataMap,proto3" json:"refresh_data_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlayerBlossomCompBin) Reset() {
	*x = PlayerBlossomCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerBlossomCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBlossomCompBin) ProtoMessage() {}

func (x *PlayerBlossomCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBlossomCompBin.ProtoReflect.Descriptor instead.
func (*PlayerBlossomCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{366}
}

func (x *PlayerBlossomCompBin) GetRecentUsedSectionIdMap() map[uint32]uint32 {
	if x != nil {
		return x.RecentUsedSectionIdMap
	}
	return nil
}

func (x *PlayerBlossomCompBin) GetInitialSectionMap() map[uint32]*BlossomInitialSectionDataBin {
	if x != nil {
		return x.InitialSectionMap
	}
	return nil
}

func (x *PlayerBlossomCompBin) GetRefreshDataMap() map[uint32]*BlossomRefreshDataBin {
	if x != nil {
		return x.RefreshDataMap
	}
	return nil
}

type SignInRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId     uint32   `protobuf:"varint,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	SignInCount    uint32   `protobuf:"varint,2,opt,name=sign_in_count,json=signInCount,proto3" json:"sign_in_count,omitempty"`
	LastSignInTime uint32   `protobuf:"fixed32,3,opt,name=last_sign_in_time,json=lastSignInTime,proto3" json:"last_sign_in_time,omitempty"`
	RewardDayList  []uint32 `protobuf:"varint,4,rep,packed,name=reward_day_list,json=rewardDayList,proto3" json:"reward_day_list,omitempty"`
}

func (x *SignInRecordBin) Reset() {
	*x = SignInRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInRecordBin) ProtoMessage() {}

func (x *SignInRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInRecordBin.ProtoReflect.Descriptor instead.
func (*SignInRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{367}
}

func (x *SignInRecordBin) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *SignInRecordBin) GetSignInCount() uint32 {
	if x != nil {
		return x.SignInCount
	}
	return 0
}

func (x *SignInRecordBin) GetLastSignInTime() uint32 {
	if x != nil {
		return x.LastSignInTime
	}
	return 0
}

func (x *SignInRecordBin) GetRewardDayList() []uint32 {
	if x != nil {
		return x.RewardDayList
	}
	return nil
}

type BonusActivityRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BonusActivityId uint32 `protobuf:"varint,1,opt,name=bonus_activity_id,json=bonusActivityId,proto3" json:"bonus_activity_id,omitempty"`
	State           uint32 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BonusActivityRecordBin) Reset() {
	*x = BonusActivityRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BonusActivityRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BonusActivityRecordBin) ProtoMessage() {}

func (x *BonusActivityRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BonusActivityRecordBin.ProtoReflect.Descriptor instead.
func (*BonusActivityRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{368}
}

func (x *BonusActivityRecordBin) GetBonusActivityId() uint32 {
	if x != nil {
		return x.BonusActivityId
	}
	return 0
}

func (x *BonusActivityRecordBin) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

type PlayerSignInCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignInRecordList        []*SignInRecordBin        `protobuf:"bytes,1,rep,name=sign_in_record_list,json=signInRecordList,proto3" json:"sign_in_record_list,omitempty"`
	BonusActivityRecordList []*BonusActivityRecordBin `protobuf:"bytes,2,rep,name=bonus_activity_record_list,json=bonusActivityRecordList,proto3" json:"bonus_activity_record_list,omitempty"`
}

func (x *PlayerSignInCompBin) Reset() {
	*x = PlayerSignInCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSignInCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSignInCompBin) ProtoMessage() {}

func (x *PlayerSignInCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSignInCompBin.ProtoReflect.Descriptor instead.
func (*PlayerSignInCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{369}
}

func (x *PlayerSignInCompBin) GetSignInRecordList() []*SignInRecordBin {
	if x != nil {
		return x.SignInRecordList
	}
	return nil
}

func (x *PlayerSignInCompBin) GetBonusActivityRecordList() []*BonusActivityRecordBin {
	if x != nil {
		return x.BonusActivityRecordList
	}
	return nil
}

type McoinProductConfigBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastBuyTime   uint32   `protobuf:"fixed32,1,opt,name=last_buy_time,json=lastBuyTime,proto3" json:"last_buy_time,omitempty"`
	BuyTimes      uint32   `protobuf:"varint,2,opt,name=buy_times,json=buyTimes,proto3" json:"buy_times,omitempty"`
	ConfigId      uint32   `protobuf:"varint,3,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	ProductIdList []string `protobuf:"bytes,4,rep,name=product_id_list,json=productIdList,proto3" json:"product_id_list,omitempty"`
}

func (x *McoinProductConfigBin) Reset() {
	*x = McoinProductConfigBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *McoinProductConfigBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McoinProductConfigBin) ProtoMessage() {}

func (x *McoinProductConfigBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McoinProductConfigBin.ProtoReflect.Descriptor instead.
func (*McoinProductConfigBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{370}
}

func (x *McoinProductConfigBin) GetLastBuyTime() uint32 {
	if x != nil {
		return x.LastBuyTime
	}
	return 0
}

func (x *McoinProductConfigBin) GetBuyTimes() uint32 {
	if x != nil {
		return x.BuyTimes
	}
	return 0
}

func (x *McoinProductConfigBin) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *McoinProductConfigBin) GetProductIdList() []string {
	if x != nil {
		return x.ProductIdList
	}
	return nil
}

type CardProductConfigBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastDailyRewardTime    uint32   `protobuf:"fixed32,1,opt,name=last_daily_reward_time,json=lastDailyRewardTime,proto3" json:"last_daily_reward_time,omitempty"`
	TakeEffectTime         uint32   `protobuf:"fixed32,2,opt,name=take_effect_time,json=takeEffectTime,proto3" json:"take_effect_time,omitempty"`
	ExpireTime             uint32   `protobuf:"fixed32,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	ConfigId               uint32   `protobuf:"varint,4,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	ProductIdList          []string `protobuf:"bytes,5,rep,name=product_id_list,json=productIdList,proto3" json:"product_id_list,omitempty"`
	LastSendRemindMailTime uint32   `protobuf:"fixed32,6,opt,name=last_send_remind_mail_time,json=lastSendRemindMailTime,proto3" json:"last_send_remind_mail_time,omitempty"`
}

func (x *CardProductConfigBin) Reset() {
	*x = CardProductConfigBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardProductConfigBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardProductConfigBin) ProtoMessage() {}

func (x *CardProductConfigBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardProductConfigBin.ProtoReflect.Descriptor instead.
func (*CardProductConfigBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{371}
}

func (x *CardProductConfigBin) GetLastDailyRewardTime() uint32 {
	if x != nil {
		return x.LastDailyRewardTime
	}
	return 0
}

func (x *CardProductConfigBin) GetTakeEffectTime() uint32 {
	if x != nil {
		return x.TakeEffectTime
	}
	return 0
}

func (x *CardProductConfigBin) GetExpireTime() uint32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *CardProductConfigBin) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *CardProductConfigBin) GetProductIdList() []string {
	if x != nil {
		return x.ProductIdList
	}
	return nil
}

func (x *CardProductConfigBin) GetLastSendRemindMailTime() uint32 {
	if x != nil {
		return x.LastSendRemindMailTime
	}
	return 0
}

type GoogleGiftCardProductBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId uint32 `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	BuyTimes uint32 `protobuf:"varint,2,opt,name=buy_times,json=buyTimes,proto3" json:"buy_times,omitempty"`
}

func (x *GoogleGiftCardProductBin) Reset() {
	*x = GoogleGiftCardProductBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleGiftCardProductBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleGiftCardProductBin) ProtoMessage() {}

func (x *GoogleGiftCardProductBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleGiftCardProductBin.ProtoReflect.Descriptor instead.
func (*GoogleGiftCardProductBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{372}
}

func (x *GoogleGiftCardProductBin) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *GoogleGiftCardProductBin) GetBuyTimes() uint32 {
	if x != nil {
		return x.BuyTimes
	}
	return 0
}

type ConcertProductBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId   uint32   `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	BuyTimes   uint32   `protobuf:"varint,2,opt,name=buy_times,json=buyTimes,proto3" json:"buy_times,omitempty"`
	TicketList []string `protobuf:"bytes,3,rep,name=ticket_list,json=ticketList,proto3" json:"ticket_list,omitempty"`
}

func (x *ConcertProductBin) Reset() {
	*x = ConcertProductBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcertProductBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcertProductBin) ProtoMessage() {}

func (x *ConcertProductBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcertProductBin.ProtoReflect.Descriptor instead.
func (*ConcertProductBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{373}
}

func (x *ConcertProductBin) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *ConcertProductBin) GetBuyTimes() uint32 {
	if x != nil {
		return x.BuyTimes
	}
	return 0
}

func (x *ConcertProductBin) GetTicketList() []string {
	if x != nil {
		return x.TicketList
	}
	return nil
}

type AppleGiftCardProductBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId uint32 `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	BuyTimes uint32 `protobuf:"varint,2,opt,name=buy_times,json=buyTimes,proto3" json:"buy_times,omitempty"`
}

func (x *AppleGiftCardProductBin) Reset() {
	*x = AppleGiftCardProductBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppleGiftCardProductBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppleGiftCardProductBin) ProtoMessage() {}

func (x *AppleGiftCardProductBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppleGiftCardProductBin.ProtoReflect.Descriptor instead.
func (*AppleGiftCardProductBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{374}
}

func (x *AppleGiftCardProductBin) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *AppleGiftCardProductBin) GetBuyTimes() uint32 {
	if x != nil {
		return x.BuyTimes
	}
	return 0
}

type PsnCompensationProductBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId         uint32 `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	BuyTimes         uint32 `protobuf:"varint,2,opt,name=buy_times,json=buyTimes,proto3" json:"buy_times,omitempty"`
	LastBuyTime      uint32 `protobuf:"varint,3,opt,name=last_buy_time,json=lastBuyTime,proto3" json:"last_buy_time,omitempty"`
	MonthBuyTimes    uint32 `protobuf:"varint,4,opt,name=month_buy_times,json=monthBuyTimes,proto3" json:"month_buy_times,omitempty"`
	MonthLastBuyTime uint32 `protobuf:"varint,5,opt,name=month_last_buy_time,json=monthLastBuyTime,proto3" json:"month_last_buy_time,omitempty"`
}

func (x *PsnCompensationProductBin) Reset() {
	*x = PsnCompensationProductBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PsnCompensationProductBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PsnCompensationProductBin) ProtoMessage() {}

func (x *PsnCompensationProductBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PsnCompensationProductBin.ProtoReflect.Descriptor instead.
func (*PsnCompensationProductBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{375}
}

func (x *PsnCompensationProductBin) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *PsnCompensationProductBin) GetBuyTimes() uint32 {
	if x != nil {
		return x.BuyTimes
	}
	return 0
}

func (x *PsnCompensationProductBin) GetLastBuyTime() uint32 {
	if x != nil {
		return x.LastBuyTime
	}
	return 0
}

func (x *PsnCompensationProductBin) GetMonthBuyTimes() uint32 {
	if x != nil {
		return x.MonthBuyTimes
	}
	return 0
}

func (x *PsnCompensationProductBin) GetMonthLastBuyTime() uint32 {
	if x != nil {
		return x.MonthLastBuyTime
	}
	return 0
}

type OrderFinishNotifyItemBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId uint32 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Count  uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *OrderFinishNotifyItemBin) Reset() {
	*x = OrderFinishNotifyItemBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderFinishNotifyItemBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderFinishNotifyItemBin) ProtoMessage() {}

func (x *OrderFinishNotifyItemBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderFinishNotifyItemBin.ProtoReflect.Descriptor instead.
func (*OrderFinishNotifyItemBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{376}
}

func (x *OrderFinishNotifyItemBin) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *OrderFinishNotifyItemBin) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type OrderFinishNotifyBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId             string                      `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	AddMcoin              uint32                      `protobuf:"varint,2,opt,name=add_mcoin,json=addMcoin,proto3" json:"add_mcoin,omitempty"`
	CardProductRemainDays uint32                      `protobuf:"varint,3,opt,name=card_product_remain_days,json=cardProductRemainDays,proto3" json:"card_product_remain_days,omitempty"`
	OrderId               uint32                      `protobuf:"varint,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	ItemList              []*OrderFinishNotifyItemBin `protobuf:"bytes,5,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
}

func (x *OrderFinishNotifyBin) Reset() {
	*x = OrderFinishNotifyBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderFinishNotifyBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderFinishNotifyBin) ProtoMessage() {}

func (x *OrderFinishNotifyBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderFinishNotifyBin.ProtoReflect.Descriptor instead.
func (*OrderFinishNotifyBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{377}
}

func (x *OrderFinishNotifyBin) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *OrderFinishNotifyBin) GetAddMcoin() uint32 {
	if x != nil {
		return x.AddMcoin
	}
	return 0
}

func (x *OrderFinishNotifyBin) GetCardProductRemainDays() uint32 {
	if x != nil {
		return x.CardProductRemainDays
	}
	return 0
}

func (x *OrderFinishNotifyBin) GetOrderId() uint32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *OrderFinishNotifyBin) GetItemList() []*OrderFinishNotifyItemBin {
	if x != nil {
		return x.ItemList
	}
	return nil
}

type OrderNotifySaveBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformType    uint32                  `protobuf:"varint,1,opt,name=platform_type,json=platformType,proto3" json:"platform_type,omitempty"`
	OrderNotifyList []*OrderFinishNotifyBin `protobuf:"bytes,3,rep,name=order_notify_list,json=orderNotifyList,proto3" json:"order_notify_list,omitempty"`
}

func (x *OrderNotifySaveBin) Reset() {
	*x = OrderNotifySaveBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderNotifySaveBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderNotifySaveBin) ProtoMessage() {}

func (x *OrderNotifySaveBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderNotifySaveBin.ProtoReflect.Descriptor instead.
func (*OrderNotifySaveBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{378}
}

func (x *OrderNotifySaveBin) GetPlatformType() uint32 {
	if x != nil {
		return x.PlatformType
	}
	return 0
}

func (x *OrderNotifySaveBin) GetOrderNotifyList() []*OrderFinishNotifyBin {
	if x != nil {
		return x.OrderNotifyList
	}
	return nil
}

type PlayerRechargeCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinishedOrderMap           map[uint32]uint32            `protobuf:"bytes,1,rep,name=finished_order_map,json=finishedOrderMap,proto3" json:"finished_order_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	WaitMarkDbMap              map[uint32]uint32            `protobuf:"bytes,2,rep,name=wait_mark_db_map,json=waitMarkDbMap,proto3" json:"wait_mark_db_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	McoinProductList           []*McoinProductConfigBin     `protobuf:"bytes,3,rep,name=mcoin_product_list,json=mcoinProductList,proto3" json:"mcoin_product_list,omitempty"`
	CardProductList            []*CardProductConfigBin      `protobuf:"bytes,4,rep,name=card_product_list,json=cardProductList,proto3" json:"card_product_list,omitempty"`
	McoinProductRefreshTime    uint32                       `protobuf:"fixed32,5,opt,name=mcoin_product_refresh_time,json=mcoinProductRefreshTime,proto3" json:"mcoin_product_refresh_time,omitempty"`
	VipPoint                   uint32                       `protobuf:"varint,6,opt,name=vip_point,json=vipPoint,proto3" json:"vip_point,omitempty"`
	Ps4PackageProductList      []string                     `protobuf:"bytes,7,rep,name=ps4_package_product_list,json=ps4PackageProductList,proto3" json:"ps4_package_product_list,omitempty"`
	GoogleGiftCardList         []*GoogleGiftCardProductBin  `protobuf:"bytes,8,rep,name=google_gift_card_list,json=googleGiftCardList,proto3" json:"google_gift_card_list,omitempty"`
	OrderNotifySaveList        []*OrderNotifySaveBin        `protobuf:"bytes,9,rep,name=order_notify_save_list,json=orderNotifySaveList,proto3" json:"order_notify_save_list,omitempty"`
	ConcertProductList         []*ConcertProductBin         `protobuf:"bytes,10,rep,name=concert_product_list,json=concertProductList,proto3" json:"concert_product_list,omitempty"`
	AppleGiftCardList          []*AppleGiftCardProductBin   `protobuf:"bytes,11,rep,name=apple_gift_card_list,json=appleGiftCardList,proto3" json:"apple_gift_card_list,omitempty"`
	PsnCompensationProductList []*PsnCompensationProductBin `protobuf:"bytes,12,rep,name=psn_compensation_product_list,json=psnCompensationProductList,proto3" json:"psn_compensation_product_list,omitempty"`
}

func (x *PlayerRechargeCompBin) Reset() {
	*x = PlayerRechargeCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRechargeCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRechargeCompBin) ProtoMessage() {}

func (x *PlayerRechargeCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRechargeCompBin.ProtoReflect.Descriptor instead.
func (*PlayerRechargeCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{379}
}

func (x *PlayerRechargeCompBin) GetFinishedOrderMap() map[uint32]uint32 {
	if x != nil {
		return x.FinishedOrderMap
	}
	return nil
}

func (x *PlayerRechargeCompBin) GetWaitMarkDbMap() map[uint32]uint32 {
	if x != nil {
		return x.WaitMarkDbMap
	}
	return nil
}

func (x *PlayerRechargeCompBin) GetMcoinProductList() []*McoinProductConfigBin {
	if x != nil {
		return x.McoinProductList
	}
	return nil
}

func (x *PlayerRechargeCompBin) GetCardProductList() []*CardProductConfigBin {
	if x != nil {
		return x.CardProductList
	}
	return nil
}

func (x *PlayerRechargeCompBin) GetMcoinProductRefreshTime() uint32 {
	if x != nil {
		return x.McoinProductRefreshTime
	}
	return 0
}

func (x *PlayerRechargeCompBin) GetVipPoint() uint32 {
	if x != nil {
		return x.VipPoint
	}
	return 0
}

func (x *PlayerRechargeCompBin) GetPs4PackageProductList() []string {
	if x != nil {
		return x.Ps4PackageProductList
	}
	return nil
}

func (x *PlayerRechargeCompBin) GetGoogleGiftCardList() []*GoogleGiftCardProductBin {
	if x != nil {
		return x.GoogleGiftCardList
	}
	return nil
}

func (x *PlayerRechargeCompBin) GetOrderNotifySaveList() []*OrderNotifySaveBin {
	if x != nil {
		return x.OrderNotifySaveList
	}
	return nil
}

func (x *PlayerRechargeCompBin) GetConcertProductList() []*ConcertProductBin {
	if x != nil {
		return x.ConcertProductList
	}
	return nil
}

func (x *PlayerRechargeCompBin) GetAppleGiftCardList() []*AppleGiftCardProductBin {
	if x != nil {
		return x.AppleGiftCardList
	}
	return nil
}

func (x *PlayerRechargeCompBin) GetPsnCompensationProductList() []*PsnCompensationProductBin {
	if x != nil {
		return x.PsnCompensationProductList
	}
	return nil
}

type BattlePassRewardTagBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnlockStatus uint32 `protobuf:"varint,1,opt,name=unlock_status,json=unlockStatus,proto3" json:"unlock_status,omitempty"`
	Level        uint32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	RewardId     uint32 `protobuf:"varint,3,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
}

func (x *BattlePassRewardTagBin) Reset() {
	*x = BattlePassRewardTagBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePassRewardTagBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePassRewardTagBin) ProtoMessage() {}

func (x *BattlePassRewardTagBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePassRewardTagBin.ProtoReflect.Descriptor instead.
func (*BattlePassRewardTagBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{380}
}

func (x *BattlePassRewardTagBin) GetUnlockStatus() uint32 {
	if x != nil {
		return x.UnlockStatus
	}
	return 0
}

func (x *BattlePassRewardTagBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *BattlePassRewardTagBin) GetRewardId() uint32 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

type BattlePassScheduleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId             uint32                    `protobuf:"varint,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Level                  uint32                    `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Point                  uint32                    `protobuf:"varint,3,opt,name=point,proto3" json:"point,omitempty"`
	UnlockStatus           uint32                    `protobuf:"varint,4,opt,name=unlock_status,json=unlockStatus,proto3" json:"unlock_status,omitempty"`
	RewardTakenList        []*BattlePassRewardTagBin `protobuf:"bytes,5,rep,name=reward_taken_list,json=rewardTakenList,proto3" json:"reward_taken_list,omitempty"`
	IsExtraPaidRewardTaken bool                      `protobuf:"varint,6,opt,name=is_extra_paid_reward_taken,json=isExtraPaidRewardTaken,proto3" json:"is_extra_paid_reward_taken,omitempty"`
	IsViewed               bool                      `protobuf:"varint,7,opt,name=is_viewed,json=isViewed,proto3" json:"is_viewed,omitempty"`
	CurCyclePoints         uint32                    `protobuf:"varint,8,opt,name=cur_cycle_points,json=curCyclePoints,proto3" json:"cur_cycle_points,omitempty"`
	IsNotifyMailSent       bool                      `protobuf:"varint,9,opt,name=is_notify_mail_sent,json=isNotifyMailSent,proto3" json:"is_notify_mail_sent,omitempty"`
	PaidPlatformFlags      uint32                    `protobuf:"varint,10,opt,name=paid_platform_flags,json=paidPlatformFlags,proto3" json:"paid_platform_flags,omitempty"`
}

func (x *BattlePassScheduleBin) Reset() {
	*x = BattlePassScheduleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePassScheduleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePassScheduleBin) ProtoMessage() {}

func (x *BattlePassScheduleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePassScheduleBin.ProtoReflect.Descriptor instead.
func (*BattlePassScheduleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{381}
}

func (x *BattlePassScheduleBin) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *BattlePassScheduleBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *BattlePassScheduleBin) GetPoint() uint32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *BattlePassScheduleBin) GetUnlockStatus() uint32 {
	if x != nil {
		return x.UnlockStatus
	}
	return 0
}

func (x *BattlePassScheduleBin) GetRewardTakenList() []*BattlePassRewardTagBin {
	if x != nil {
		return x.RewardTakenList
	}
	return nil
}

func (x *BattlePassScheduleBin) GetIsExtraPaidRewardTaken() bool {
	if x != nil {
		return x.IsExtraPaidRewardTaken
	}
	return false
}

func (x *BattlePassScheduleBin) GetIsViewed() bool {
	if x != nil {
		return x.IsViewed
	}
	return false
}

func (x *BattlePassScheduleBin) GetCurCyclePoints() uint32 {
	if x != nil {
		return x.CurCyclePoints
	}
	return 0
}

func (x *BattlePassScheduleBin) GetIsNotifyMailSent() bool {
	if x != nil {
		return x.IsNotifyMailSent
	}
	return false
}

func (x *BattlePassScheduleBin) GetPaidPlatformFlags() uint32 {
	if x != nil {
		return x.PaidPlatformFlags
	}
	return 0
}

type BattlePassMissionBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissionId     uint32 `protobuf:"varint,1,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"`
	MissionStatus uint32 `protobuf:"varint,2,opt,name=mission_status,json=missionStatus,proto3" json:"mission_status,omitempty"`
}

func (x *BattlePassMissionBin) Reset() {
	*x = BattlePassMissionBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePassMissionBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePassMissionBin) ProtoMessage() {}

func (x *BattlePassMissionBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePassMissionBin.ProtoReflect.Descriptor instead.
func (*BattlePassMissionBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{382}
}

func (x *BattlePassMissionBin) GetMissionId() uint32 {
	if x != nil {
		return x.MissionId
	}
	return 0
}

func (x *BattlePassMissionBin) GetMissionStatus() uint32 {
	if x != nil {
		return x.MissionStatus
	}
	return 0
}

type PlayerBattlePassCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleBinList                []*BattlePassScheduleBin `protobuf:"bytes,1,rep,name=schedule_bin_list,json=scheduleBinList,proto3" json:"schedule_bin_list,omitempty"`
	CurBattlePassMissionBinList    []*BattlePassMissionBin  `protobuf:"bytes,2,rep,name=cur_battle_pass_mission_bin_list,json=curBattlePassMissionBinList,proto3" json:"cur_battle_pass_mission_bin_list,omitempty"`
	CurScheduleId                  uint32                   `protobuf:"varint,3,opt,name=cur_schedule_id,json=curScheduleId,proto3" json:"cur_schedule_id,omitempty"`
	LastRefreshTime                uint32                   `protobuf:"fixed32,4,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	WeeklyLastRefreshTime          uint32                   `protobuf:"fixed32,5,opt,name=weekly_last_refresh_time,json=weeklyLastRefreshTime,proto3" json:"weekly_last_refresh_time,omitempty"`
	CrossScheduleWeeklyWatcherList []uint32                 `protobuf:"varint,6,rep,packed,name=cross_schedule_weekly_watcher_list,json=crossScheduleWeeklyWatcherList,proto3" json:"cross_schedule_weekly_watcher_list,omitempty"`
}

func (x *PlayerBattlePassCompBin) Reset() {
	*x = PlayerBattlePassCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerBattlePassCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBattlePassCompBin) ProtoMessage() {}

func (x *PlayerBattlePassCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBattlePassCompBin.ProtoReflect.Descriptor instead.
func (*PlayerBattlePassCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{383}
}

func (x *PlayerBattlePassCompBin) GetScheduleBinList() []*BattlePassScheduleBin {
	if x != nil {
		return x.ScheduleBinList
	}
	return nil
}

func (x *PlayerBattlePassCompBin) GetCurBattlePassMissionBinList() []*BattlePassMissionBin {
	if x != nil {
		return x.CurBattlePassMissionBinList
	}
	return nil
}

func (x *PlayerBattlePassCompBin) GetCurScheduleId() uint32 {
	if x != nil {
		return x.CurScheduleId
	}
	return 0
}

func (x *PlayerBattlePassCompBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

func (x *PlayerBattlePassCompBin) GetWeeklyLastRefreshTime() uint32 {
	if x != nil {
		return x.WeeklyLastRefreshTime
	}
	return 0
}

func (x *PlayerBattlePassCompBin) GetCrossScheduleWeeklyWatcherList() []uint32 {
	if x != nil {
		return x.CrossScheduleWeeklyWatcherList
	}
	return nil
}

type ChatEmojiCollectionBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmojiIdList []uint32 `protobuf:"varint,1,rep,packed,name=emoji_id_list,json=emojiIdList,proto3" json:"emoji_id_list,omitempty"`
}

func (x *ChatEmojiCollectionBin) Reset() {
	*x = ChatEmojiCollectionBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEmojiCollectionBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEmojiCollectionBin) ProtoMessage() {}

func (x *ChatEmojiCollectionBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEmojiCollectionBin.ProtoReflect.Descriptor instead.
func (*ChatEmojiCollectionBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{384}
}

func (x *ChatEmojiCollectionBin) GetEmojiIdList() []uint32 {
	if x != nil {
		return x.EmojiIdList
	}
	return nil
}

type PlayerSocialCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnlockNameCardList           []uint32                `protobuf:"varint,1,rep,packed,name=unlock_name_card_list,json=unlockNameCardList,proto3" json:"unlock_name_card_list,omitempty"`
	Birthday                     *Birthday               `protobuf:"bytes,2,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Signature                    string                  `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	NameCardId                   uint32                  `protobuf:"varint,4,opt,name=name_card_id,json=nameCardId,proto3" json:"name_card_id,omitempty"`
	RecentMpPlayerUidList        []uint32                `protobuf:"varint,5,rep,packed,name=recent_mp_player_uid_list,json=recentMpPlayerUidList,proto3" json:"recent_mp_player_uid_list,omitempty"`
	LastGrantBirthdayBenefitYear uint32                  `protobuf:"varint,6,opt,name=last_grant_birthday_benefit_year,json=lastGrantBirthdayBenefitYear,proto3" json:"last_grant_birthday_benefit_year,omitempty"`
	IsHaveFirstShare             bool                    `protobuf:"varint,7,opt,name=is_have_first_share,json=isHaveFirstShare,proto3" json:"is_have_first_share,omitempty"`
	IsLoginOnBirthday            bool                    `protobuf:"varint,8,opt,name=is_login_on_birthday,json=isLoginOnBirthday,proto3" json:"is_login_on_birthday,omitempty"`
	ReportDuringLastTimeCount    uint32                  `protobuf:"varint,9,opt,name=report_during_last_time_count,json=reportDuringLastTimeCount,proto3" json:"report_during_last_time_count,omitempty"`
	ReportNextLimitTime          uint32                  `protobuf:"varint,10,opt,name=report_next_limit_time,json=reportNextLimitTime,proto3" json:"report_next_limit_time,omitempty"`
	NextReportTime               uint32                  `protobuf:"varint,11,opt,name=next_report_time,json=nextReportTime,proto3" json:"next_report_time,omitempty"`
	CurDaySocialRequestNum       uint32                  `protobuf:"varint,12,opt,name=cur_day_social_request_num,json=curDaySocialRequestNum,proto3" json:"cur_day_social_request_num,omitempty"`
	LastClearSocialRequestTime   uint32                  `protobuf:"fixed32,13,opt,name=last_clear_social_request_time,json=lastClearSocialRequestTime,proto3" json:"last_clear_social_request_time,omitempty"`
	FriendRemarkNameMap          map[uint32]string       `protobuf:"bytes,14,rep,name=friend_remark_name_map,json=friendRemarkNameMap,proto3" json:"friend_remark_name_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CurDayAskFriendNum           uint32                  `protobuf:"varint,15,opt,name=cur_day_ask_friend_num,json=curDayAskFriendNum,proto3" json:"cur_day_ask_friend_num,omitempty"`
	LastAskFriendTime            uint32                  `protobuf:"fixed32,16,opt,name=last_ask_friend_time,json=lastAskFriendTime,proto3" json:"last_ask_friend_time,omitempty"`
	ShowAvatarIdList             []uint32                `protobuf:"varint,17,rep,packed,name=show_avatar_id_list,json=showAvatarIdList,proto3" json:"show_avatar_id_list,omitempty"`
	IsShowAvatar                 bool                    `protobuf:"varint,18,opt,name=is_show_avatar,json=isShowAvatar,proto3" json:"is_show_avatar,omitempty"`
	ShowNameCardIdList           []uint32                `protobuf:"varint,19,rep,packed,name=show_name_card_id_list,json=showNameCardIdList,proto3" json:"show_name_card_id_list,omitempty"`
	ChatEmojiCollection          *ChatEmojiCollectionBin `protobuf:"bytes,20,opt,name=chat_emoji_collection,json=chatEmojiCollection,proto3" json:"chat_emoji_collection,omitempty"`
	SignatureAuditBin            *ContentAuditBin        `protobuf:"bytes,21,opt,name=signature_audit_bin,json=signatureAuditBin,proto3" json:"signature_audit_bin,omitempty"`
	ShieldChannelSet             []uint32                `protobuf:"varint,22,rep,packed,name=shield_channel_set,json=shieldChannelSet,proto3" json:"shield_channel_set,omitempty"`
}

func (x *PlayerSocialCompBin) Reset() {
	*x = PlayerSocialCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSocialCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSocialCompBin) ProtoMessage() {}

func (x *PlayerSocialCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSocialCompBin.ProtoReflect.Descriptor instead.
func (*PlayerSocialCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{385}
}

func (x *PlayerSocialCompBin) GetUnlockNameCardList() []uint32 {
	if x != nil {
		return x.UnlockNameCardList
	}
	return nil
}

func (x *PlayerSocialCompBin) GetBirthday() *Birthday {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *PlayerSocialCompBin) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *PlayerSocialCompBin) GetNameCardId() uint32 {
	if x != nil {
		return x.NameCardId
	}
	return 0
}

func (x *PlayerSocialCompBin) GetRecentMpPlayerUidList() []uint32 {
	if x != nil {
		return x.RecentMpPlayerUidList
	}
	return nil
}

func (x *PlayerSocialCompBin) GetLastGrantBirthdayBenefitYear() uint32 {
	if x != nil {
		return x.LastGrantBirthdayBenefitYear
	}
	return 0
}

func (x *PlayerSocialCompBin) GetIsHaveFirstShare() bool {
	if x != nil {
		return x.IsHaveFirstShare
	}
	return false
}

func (x *PlayerSocialCompBin) GetIsLoginOnBirthday() bool {
	if x != nil {
		return x.IsLoginOnBirthday
	}
	return false
}

func (x *PlayerSocialCompBin) GetReportDuringLastTimeCount() uint32 {
	if x != nil {
		return x.ReportDuringLastTimeCount
	}
	return 0
}

func (x *PlayerSocialCompBin) GetReportNextLimitTime() uint32 {
	if x != nil {
		return x.ReportNextLimitTime
	}
	return 0
}

func (x *PlayerSocialCompBin) GetNextReportTime() uint32 {
	if x != nil {
		return x.NextReportTime
	}
	return 0
}

func (x *PlayerSocialCompBin) GetCurDaySocialRequestNum() uint32 {
	if x != nil {
		return x.CurDaySocialRequestNum
	}
	return 0
}

func (x *PlayerSocialCompBin) GetLastClearSocialRequestTime() uint32 {
	if x != nil {
		return x.LastClearSocialRequestTime
	}
	return 0
}

func (x *PlayerSocialCompBin) GetFriendRemarkNameMap() map[uint32]string {
	if x != nil {
		return x.FriendRemarkNameMap
	}
	return nil
}

func (x *PlayerSocialCompBin) GetCurDayAskFriendNum() uint32 {
	if x != nil {
		return x.CurDayAskFriendNum
	}
	return 0
}

func (x *PlayerSocialCompBin) GetLastAskFriendTime() uint32 {
	if x != nil {
		return x.LastAskFriendTime
	}
	return 0
}

func (x *PlayerSocialCompBin) GetShowAvatarIdList() []uint32 {
	if x != nil {
		return x.ShowAvatarIdList
	}
	return nil
}

func (x *PlayerSocialCompBin) GetIsShowAvatar() bool {
	if x != nil {
		return x.IsShowAvatar
	}
	return false
}

func (x *PlayerSocialCompBin) GetShowNameCardIdList() []uint32 {
	if x != nil {
		return x.ShowNameCardIdList
	}
	return nil
}

func (x *PlayerSocialCompBin) GetChatEmojiCollection() *ChatEmojiCollectionBin {
	if x != nil {
		return x.ChatEmojiCollection
	}
	return nil
}

func (x *PlayerSocialCompBin) GetSignatureAuditBin() *ContentAuditBin {
	if x != nil {
		return x.SignatureAuditBin
	}
	return nil
}

func (x *PlayerSocialCompBin) GetShieldChannelSet() []uint32 {
	if x != nil {
		return x.ShieldChannelSet
	}
	return nil
}

type SecurityAntiOfflineDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityCheckType uint32 `protobuf:"varint,1,opt,name=security_check_type,json=securityCheckType,proto3" json:"security_check_type,omitempty"`
	SecurityLevel     uint32 `protobuf:"varint,2,opt,name=security_level,json=securityLevel,proto3" json:"security_level,omitempty"`
	SuccNum           uint32 `protobuf:"varint,3,opt,name=succ_num,json=succNum,proto3" json:"succ_num,omitempty"`
	EmptyNum          uint32 `protobuf:"varint,4,opt,name=empty_num,json=emptyNum,proto3" json:"empty_num,omitempty"`
	DecryptFailNum    uint32 `protobuf:"varint,5,opt,name=decrypt_fail_num,json=decryptFailNum,proto3" json:"decrypt_fail_num,omitempty"`
	VerifyFailNum     uint32 `protobuf:"varint,6,opt,name=verify_fail_num,json=verifyFailNum,proto3" json:"verify_fail_num,omitempty"`
	CurSuccNum        uint32 `protobuf:"varint,7,opt,name=cur_succ_num,json=curSuccNum,proto3" json:"cur_succ_num,omitempty"`
	CurFailNum        uint32 `protobuf:"varint,8,opt,name=cur_fail_num,json=curFailNum,proto3" json:"cur_fail_num,omitempty"`
}

func (x *SecurityAntiOfflineDataBin) Reset() {
	*x = SecurityAntiOfflineDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityAntiOfflineDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityAntiOfflineDataBin) ProtoMessage() {}

func (x *SecurityAntiOfflineDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityAntiOfflineDataBin.ProtoReflect.Descriptor instead.
func (*SecurityAntiOfflineDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{386}
}

func (x *SecurityAntiOfflineDataBin) GetSecurityCheckType() uint32 {
	if x != nil {
		return x.SecurityCheckType
	}
	return 0
}

func (x *SecurityAntiOfflineDataBin) GetSecurityLevel() uint32 {
	if x != nil {
		return x.SecurityLevel
	}
	return 0
}

func (x *SecurityAntiOfflineDataBin) GetSuccNum() uint32 {
	if x != nil {
		return x.SuccNum
	}
	return 0
}

func (x *SecurityAntiOfflineDataBin) GetEmptyNum() uint32 {
	if x != nil {
		return x.EmptyNum
	}
	return 0
}

func (x *SecurityAntiOfflineDataBin) GetDecryptFailNum() uint32 {
	if x != nil {
		return x.DecryptFailNum
	}
	return 0
}

func (x *SecurityAntiOfflineDataBin) GetVerifyFailNum() uint32 {
	if x != nil {
		return x.VerifyFailNum
	}
	return 0
}

func (x *SecurityAntiOfflineDataBin) GetCurSuccNum() uint32 {
	if x != nil {
		return x.CurSuccNum
	}
	return 0
}

func (x *SecurityAntiOfflineDataBin) GetCurFailNum() uint32 {
	if x != nil {
		return x.CurFailNum
	}
	return 0
}

type MpPlayBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MpPlayId            uint32                        `protobuf:"varint,1,opt,name=mp_play_id,json=mpPlayId,proto3" json:"mp_play_id,omitempty"`
	EntryId             uint32                        `protobuf:"varint,2,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	PlayType            uint32                        `protobuf:"varint,3,opt,name=play_type,json=playType,proto3" json:"play_type,omitempty"`
	IsClose             bool                          `protobuf:"varint,4,opt,name=is_close,json=isClose,proto3" json:"is_close,omitempty"`
	RewardRemainUidList []uint32                      `protobuf:"varint,7,rep,packed,name=reward_remain_uid_list,json=rewardRemainUidList,proto3" json:"reward_remain_uid_list,omitempty"`
	UidWorldLevelList   []*MpPlayBin_UidWorldLevelBin `protobuf:"bytes,8,rep,name=uid_world_level_list,json=uidWorldLevelList,proto3" json:"uid_world_level_list,omitempty"`
}

func (x *MpPlayBin) Reset() {
	*x = MpPlayBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MpPlayBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MpPlayBin) ProtoMessage() {}

func (x *MpPlayBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MpPlayBin.ProtoReflect.Descriptor instead.
func (*MpPlayBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{387}
}

func (x *MpPlayBin) GetMpPlayId() uint32 {
	if x != nil {
		return x.MpPlayId
	}
	return 0
}

func (x *MpPlayBin) GetEntryId() uint32 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

func (x *MpPlayBin) GetPlayType() uint32 {
	if x != nil {
		return x.PlayType
	}
	return 0
}

func (x *MpPlayBin) GetIsClose() bool {
	if x != nil {
		return x.IsClose
	}
	return false
}

func (x *MpPlayBin) GetRewardRemainUidList() []uint32 {
	if x != nil {
		return x.RewardRemainUidList
	}
	return nil
}

func (x *MpPlayBin) GetUidWorldLevelList() []*MpPlayBin_UidWorldLevelBin {
	if x != nil {
		return x.UidWorldLevelList
	}
	return nil
}

type PlayerMpPlayCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MpPlayList []*MpPlayBin `protobuf:"bytes,1,rep,name=mp_play_list,json=mpPlayList,proto3" json:"mp_play_list,omitempty"`
}

func (x *PlayerMpPlayCompBin) Reset() {
	*x = PlayerMpPlayCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMpPlayCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMpPlayCompBin) ProtoMessage() {}

func (x *PlayerMpPlayCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMpPlayCompBin.ProtoReflect.Descriptor instead.
func (*PlayerMpPlayCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{388}
}

func (x *PlayerMpPlayCompBin) GetMpPlayList() []*MpPlayBin {
	if x != nil {
		return x.MpPlayList
	}
	return nil
}

type CodexTypeDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                      uint32           `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	CodexIdList               []uint32         `protobuf:"varint,2,rep,packed,name=codex_id_list,json=codexIdList,proto3" json:"codex_id_list,omitempty"`
	ViewedCodexIdList         []uint32         `protobuf:"varint,3,rep,packed,name=viewed_codex_id_list,json=viewedCodexIdList,proto3" json:"viewed_codex_id_list,omitempty"`
	WeaponMaxPromoteLevelList []*Uint32PairBin `protobuf:"bytes,4,rep,name=weapon_max_promote_level_list,json=weaponMaxPromoteLevelList,proto3" json:"weapon_max_promote_level_list,omitempty"`
}

func (x *CodexTypeDataBin) Reset() {
	*x = CodexTypeDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodexTypeDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodexTypeDataBin) ProtoMessage() {}

func (x *CodexTypeDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodexTypeDataBin.ProtoReflect.Descriptor instead.
func (*CodexTypeDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{389}
}

func (x *CodexTypeDataBin) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CodexTypeDataBin) GetCodexIdList() []uint32 {
	if x != nil {
		return x.CodexIdList
	}
	return nil
}

func (x *CodexTypeDataBin) GetViewedCodexIdList() []uint32 {
	if x != nil {
		return x.ViewedCodexIdList
	}
	return nil
}

func (x *CodexTypeDataBin) GetWeaponMaxPromoteLevelList() []*Uint32PairBin {
	if x != nil {
		return x.WeaponMaxPromoteLevelList
	}
	return nil
}

type PlayerCodexCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeDataList             []*CodexTypeDataBin `protobuf:"bytes,1,rep,name=type_data_list,json=typeDataList,proto3" json:"type_data_list,omitempty"`
	RecentViewedPushtipsList []uint32            `protobuf:"varint,5,rep,packed,name=recent_viewed_pushtips_list,json=recentViewedPushtipsList,proto3" json:"recent_viewed_pushtips_list,omitempty"`
	LastReadPushtipsCodexId  uint32              `protobuf:"varint,6,opt,name=last_read_pushtips_codex_id,json=lastReadPushtipsCodexId,proto3" json:"last_read_pushtips_codex_id,omitempty"`
	LastReadPushtipsTypeId   uint32              `protobuf:"varint,7,opt,name=last_read_pushtips_type_id,json=lastReadPushtipsTypeId,proto3" json:"last_read_pushtips_type_id,omitempty"`
}

func (x *PlayerCodexCompBin) Reset() {
	*x = PlayerCodexCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerCodexCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerCodexCompBin) ProtoMessage() {}

func (x *PlayerCodexCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerCodexCompBin.ProtoReflect.Descriptor instead.
func (*PlayerCodexCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{390}
}

func (x *PlayerCodexCompBin) GetTypeDataList() []*CodexTypeDataBin {
	if x != nil {
		return x.TypeDataList
	}
	return nil
}

func (x *PlayerCodexCompBin) GetRecentViewedPushtipsList() []uint32 {
	if x != nil {
		return x.RecentViewedPushtipsList
	}
	return nil
}

func (x *PlayerCodexCompBin) GetLastReadPushtipsCodexId() uint32 {
	if x != nil {
		return x.LastReadPushtipsCodexId
	}
	return 0
}

func (x *PlayerCodexCompBin) GetLastReadPushtipsTypeId() uint32 {
	if x != nil {
		return x.LastReadPushtipsTypeId
	}
	return 0
}

type AchievementBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status          uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	FinishTimestamp uint32 `protobuf:"varint,3,opt,name=finish_timestamp,json=finishTimestamp,proto3" json:"finish_timestamp,omitempty"`
}

func (x *AchievementBin) Reset() {
	*x = AchievementBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementBin) ProtoMessage() {}

func (x *AchievementBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementBin.ProtoReflect.Descriptor instead.
func (*AchievementBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{391}
}

func (x *AchievementBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AchievementBin) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AchievementBin) GetFinishTimestamp() uint32 {
	if x != nil {
		return x.FinishTimestamp
	}
	return 0
}

type PlayerAchievementCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AchievementList       []*AchievementBin `protobuf:"bytes,1,rep,name=achievement_list,json=achievementList,proto3" json:"achievement_list,omitempty"`
	RewardTakenGoalIdList []uint32          `protobuf:"varint,2,rep,packed,name=reward_taken_goal_id_list,json=rewardTakenGoalIdList,proto3" json:"reward_taken_goal_id_list,omitempty"`
}

func (x *PlayerAchievementCompBin) Reset() {
	*x = PlayerAchievementCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerAchievementCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAchievementCompBin) ProtoMessage() {}

func (x *PlayerAchievementCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAchievementCompBin.ProtoReflect.Descriptor instead.
func (*PlayerAchievementCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{392}
}

func (x *PlayerAchievementCompBin) GetAchievementList() []*AchievementBin {
	if x != nil {
		return x.AchievementList
	}
	return nil
}

func (x *PlayerAchievementCompBin) GetRewardTakenGoalIdList() []uint32 {
	if x != nil {
		return x.RewardTakenGoalIdList
	}
	return nil
}

type PlayerPersonalLineCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinishedDailyTaskNum     uint32   `protobuf:"varint,1,opt,name=finished_daily_task_num,json=finishedDailyTaskNum,proto3" json:"finished_daily_task_num,omitempty"`
	UnlockPersonalLineIdList []uint32 `protobuf:"varint,2,rep,packed,name=unlock_personal_line_id_list,json=unlockPersonalLineIdList,proto3" json:"unlock_personal_line_id_list,omitempty"`
}

func (x *PlayerPersonalLineCompBin) Reset() {
	*x = PlayerPersonalLineCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerPersonalLineCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerPersonalLineCompBin) ProtoMessage() {}

func (x *PlayerPersonalLineCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerPersonalLineCompBin.ProtoReflect.Descriptor instead.
func (*PlayerPersonalLineCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{393}
}

func (x *PlayerPersonalLineCompBin) GetFinishedDailyTaskNum() uint32 {
	if x != nil {
		return x.FinishedDailyTaskNum
	}
	return 0
}

func (x *PlayerPersonalLineCompBin) GetUnlockPersonalLineIdList() []uint32 {
	if x != nil {
		return x.UnlockPersonalLineIdList
	}
	return nil
}

type PlayerTrialAvatarCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrialAvatarIndexId uint32 `protobuf:"varint,1,opt,name=trial_avatar_index_id,json=trialAvatarIndexId,proto3" json:"trial_avatar_index_id,omitempty"`
}

func (x *PlayerTrialAvatarCompBin) Reset() {
	*x = PlayerTrialAvatarCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerTrialAvatarCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerTrialAvatarCompBin) ProtoMessage() {}

func (x *PlayerTrialAvatarCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerTrialAvatarCompBin.ProtoReflect.Descriptor instead.
func (*PlayerTrialAvatarCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{394}
}

func (x *PlayerTrialAvatarCompBin) GetTrialAvatarIndexId() uint32 {
	if x != nil {
		return x.TrialAvatarIndexId
	}
	return 0
}

type HuntingOfferDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshId       uint32            `protobuf:"varint,1,opt,name=refresh_id,json=refreshId,proto3" json:"refresh_id,omitempty"`
	MonsterConfigId uint32            `protobuf:"varint,2,opt,name=monster_config_id,json=monsterConfigId,proto3" json:"monster_config_id,omitempty"`
	CityId          uint32            `protobuf:"varint,3,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	Difficulty      uint32            `protobuf:"varint,4,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	State           HuntingOfferState `protobuf:"varint,5,opt,name=state,proto3,enum=proto.HuntingOfferState" json:"state,omitempty"`
	IsTakenReward   bool              `protobuf:"varint,6,opt,name=is_taken_reward,json=isTakenReward,proto3" json:"is_taken_reward,omitempty"`
}

func (x *HuntingOfferDataBin) Reset() {
	*x = HuntingOfferDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HuntingOfferDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuntingOfferDataBin) ProtoMessage() {}

func (x *HuntingOfferDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuntingOfferDataBin.ProtoReflect.Descriptor instead.
func (*HuntingOfferDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{395}
}

func (x *HuntingOfferDataBin) GetRefreshId() uint32 {
	if x != nil {
		return x.RefreshId
	}
	return 0
}

func (x *HuntingOfferDataBin) GetMonsterConfigId() uint32 {
	if x != nil {
		return x.MonsterConfigId
	}
	return 0
}

func (x *HuntingOfferDataBin) GetCityId() uint32 {
	if x != nil {
		return x.CityId
	}
	return 0
}

func (x *HuntingOfferDataBin) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *HuntingOfferDataBin) GetState() HuntingOfferState {
	if x != nil {
		return x.State
	}
	return HuntingOfferState_HUNTING_OFFER_STATE_NONE
}

func (x *HuntingOfferDataBin) GetIsTakenReward() bool {
	if x != nil {
		return x.IsTakenReward
	}
	return false
}

type HuntingOfferPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshId       uint32 `protobuf:"varint,1,opt,name=refresh_id,json=refreshId,proto3" json:"refresh_id,omitempty"`
	MonsterConfigId uint32 `protobuf:"varint,2,opt,name=monster_config_id,json=monsterConfigId,proto3" json:"monster_config_id,omitempty"`
}

func (x *HuntingOfferPair) Reset() {
	*x = HuntingOfferPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HuntingOfferPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuntingOfferPair) ProtoMessage() {}

func (x *HuntingOfferPair) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuntingOfferPair.ProtoReflect.Descriptor instead.
func (*HuntingOfferPair) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{396}
}

func (x *HuntingOfferPair) GetRefreshId() uint32 {
	if x != nil {
		return x.RefreshId
	}
	return 0
}

func (x *HuntingOfferPair) GetMonsterConfigId() uint32 {
	if x != nil {
		return x.MonsterConfigId
	}
	return 0
}

type PlayerHuntingCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HuntingOfferDataList          []*HuntingOfferDataBin `protobuf:"bytes,1,rep,name=hunting_offer_data_list,json=huntingOfferDataList,proto3" json:"hunting_offer_data_list,omitempty"`
	CurWeekFinishedHuntingPairVec []*HuntingOfferPair    `protobuf:"bytes,2,rep,name=cur_week_finished_hunting_pair_vec,json=curWeekFinishedHuntingPairVec,proto3" json:"cur_week_finished_hunting_pair_vec,omitempty"`
	LastRefreshTime               uint32                 `protobuf:"fixed32,3,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	CurWeekRefreshedMonsterIdList []uint32               `protobuf:"varint,4,rep,packed,name=cur_week_refreshed_monster_id_list,json=curWeekRefreshedMonsterIdList,proto3" json:"cur_week_refreshed_monster_id_list,omitempty"`
	CurWeekRefreshedRefreshIdList []uint32               `protobuf:"varint,5,rep,packed,name=cur_week_refreshed_refresh_id_list,json=curWeekRefreshedRefreshIdList,proto3" json:"cur_week_refreshed_refresh_id_list,omitempty"`
	IsNewHunting                  bool                   `protobuf:"varint,6,opt,name=is_new_hunting,json=isNewHunting,proto3" json:"is_new_hunting,omitempty"`
}

func (x *PlayerHuntingCompBin) Reset() {
	*x = PlayerHuntingCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerHuntingCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerHuntingCompBin) ProtoMessage() {}

func (x *PlayerHuntingCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerHuntingCompBin.ProtoReflect.Descriptor instead.
func (*PlayerHuntingCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{397}
}

func (x *PlayerHuntingCompBin) GetHuntingOfferDataList() []*HuntingOfferDataBin {
	if x != nil {
		return x.HuntingOfferDataList
	}
	return nil
}

func (x *PlayerHuntingCompBin) GetCurWeekFinishedHuntingPairVec() []*HuntingOfferPair {
	if x != nil {
		return x.CurWeekFinishedHuntingPairVec
	}
	return nil
}

func (x *PlayerHuntingCompBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

func (x *PlayerHuntingCompBin) GetCurWeekRefreshedMonsterIdList() []uint32 {
	if x != nil {
		return x.CurWeekRefreshedMonsterIdList
	}
	return nil
}

func (x *PlayerHuntingCompBin) GetCurWeekRefreshedRefreshIdList() []uint32 {
	if x != nil {
		return x.CurWeekRefreshedRefreshIdList
	}
	return nil
}

func (x *PlayerHuntingCompBin) GetIsNewHunting() bool {
	if x != nil {
		return x.IsNewHunting
	}
	return false
}

type CityReputationRequestBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId     uint32 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	QuestId       uint32 `protobuf:"varint,2,opt,name=quest_id,json=questId,proto3" json:"quest_id,omitempty"`
	IsTakenReward bool   `protobuf:"varint,3,opt,name=is_taken_reward,json=isTakenReward,proto3" json:"is_taken_reward,omitempty"`
}

func (x *CityReputationRequestBin) Reset() {
	*x = CityReputationRequestBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[398]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityReputationRequestBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityReputationRequestBin) ProtoMessage() {}

func (x *CityReputationRequestBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[398]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityReputationRequestBin.ProtoReflect.Descriptor instead.
func (*CityReputationRequestBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{398}
}

func (x *CityReputationRequestBin) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *CityReputationRequestBin) GetQuestId() uint32 {
	if x != nil {
		return x.QuestId
	}
	return 0
}

func (x *CityReputationRequestBin) GetIsTakenReward() bool {
	if x != nil {
		return x.IsTakenReward
	}
	return false
}

type CityReputationBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityId                     uint32                      `protobuf:"varint,1,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	Level                      uint32                      `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Exp                        uint32                      `protobuf:"varint,3,opt,name=exp,proto3" json:"exp,omitempty"`
	TakenLevelRewardList       []uint32                    `protobuf:"varint,4,rep,packed,name=taken_level_reward_list,json=takenLevelRewardList,proto3" json:"taken_level_reward_list,omitempty"`
	TakenParentQuestRewardList []uint32                    `protobuf:"varint,5,rep,packed,name=taken_parent_quest_reward_list,json=takenParentQuestRewardList,proto3" json:"taken_parent_quest_reward_list,omitempty"`
	HistoryRequestList         []uint32                    `protobuf:"varint,6,rep,packed,name=history_request_list,json=historyRequestList,proto3" json:"history_request_list,omitempty"`
	RequestList                []*CityReputationRequestBin `protobuf:"bytes,7,rep,name=request_list,json=requestList,proto3" json:"request_list,omitempty"`
	LastRefreshRequestTime     uint32                      `protobuf:"fixed32,8,opt,name=last_refresh_request_time,json=lastRefreshRequestTime,proto3" json:"last_refresh_request_time,omitempty"`
	IsNewRequest               bool                        `protobuf:"varint,9,opt,name=is_new_request,json=isNewRequest,proto3" json:"is_new_request,omitempty"`
	TakenExploreRewardList     []uint32                    `protobuf:"varint,10,rep,packed,name=taken_explore_reward_list,json=takenExploreRewardList,proto3" json:"taken_explore_reward_list,omitempty"`
}

func (x *CityReputationBin) Reset() {
	*x = CityReputationBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[399]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityReputationBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityReputationBin) ProtoMessage() {}

func (x *CityReputationBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[399]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityReputationBin.ProtoReflect.Descriptor instead.
func (*CityReputationBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{399}
}

func (x *CityReputationBin) GetCityId() uint32 {
	if x != nil {
		return x.CityId
	}
	return 0
}

func (x *CityReputationBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CityReputationBin) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *CityReputationBin) GetTakenLevelRewardList() []uint32 {
	if x != nil {
		return x.TakenLevelRewardList
	}
	return nil
}

func (x *CityReputationBin) GetTakenParentQuestRewardList() []uint32 {
	if x != nil {
		return x.TakenParentQuestRewardList
	}
	return nil
}

func (x *CityReputationBin) GetHistoryRequestList() []uint32 {
	if x != nil {
		return x.HistoryRequestList
	}
	return nil
}

func (x *CityReputationBin) GetRequestList() []*CityReputationRequestBin {
	if x != nil {
		return x.RequestList
	}
	return nil
}

func (x *CityReputationBin) GetLastRefreshRequestTime() uint32 {
	if x != nil {
		return x.LastRefreshRequestTime
	}
	return 0
}

func (x *CityReputationBin) GetIsNewRequest() bool {
	if x != nil {
		return x.IsNewRequest
	}
	return false
}

func (x *CityReputationBin) GetTakenExploreRewardList() []uint32 {
	if x != nil {
		return x.TakenExploreRewardList
	}
	return nil
}

type PlayerReputationCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityReputationList []*CityReputationBin `protobuf:"bytes,1,rep,name=city_reputation_list,json=cityReputationList,proto3" json:"city_reputation_list,omitempty"`
}

func (x *PlayerReputationCompBin) Reset() {
	*x = PlayerReputationCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerReputationCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerReputationCompBin) ProtoMessage() {}

func (x *PlayerReputationCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerReputationCompBin.ProtoReflect.Descriptor instead.
func (*PlayerReputationCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{400}
}

func (x *PlayerReputationCompBin) GetCityReputationList() []*CityReputationBin {
	if x != nil {
		return x.CityReputationList
	}
	return nil
}

type WidgetAnchorPointBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pos     *VectorBin `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Rot     *VectorBin `protobuf:"bytes,3,opt,name=rot,proto3" json:"rot,omitempty"`
	EndTime uint32     `protobuf:"fixed32,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	SceneId uint32     `protobuf:"varint,5,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
}

func (x *WidgetAnchorPointBin) Reset() {
	*x = WidgetAnchorPointBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidgetAnchorPointBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidgetAnchorPointBin) ProtoMessage() {}

func (x *WidgetAnchorPointBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidgetAnchorPointBin.ProtoReflect.Descriptor instead.
func (*WidgetAnchorPointBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{401}
}

func (x *WidgetAnchorPointBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WidgetAnchorPointBin) GetPos() *VectorBin {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *WidgetAnchorPointBin) GetRot() *VectorBin {
	if x != nil {
		return x.Rot
	}
	return nil
}

func (x *WidgetAnchorPointBin) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *WidgetAnchorPointBin) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

type WidgetLunchBoxBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotMaterialMap map[uint32]uint32 `protobuf:"bytes,1,rep,name=slot_material_map,json=slotMaterialMap,proto3" json:"slot_material_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *WidgetLunchBoxBin) Reset() {
	*x = WidgetLunchBoxBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidgetLunchBoxBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidgetLunchBoxBin) ProtoMessage() {}

func (x *WidgetLunchBoxBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidgetLunchBoxBin.ProtoReflect.Descriptor instead.
func (*WidgetLunchBoxBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{402}
}

func (x *WidgetLunchBoxBin) GetSlotMaterialMap() map[uint32]uint32 {
	if x != nil {
		return x.SlotMaterialMap
	}
	return nil
}

type WidgetOneoffGatherPointDetectorBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaterialId    uint32     `protobuf:"varint,1,opt,name=material_id,json=materialId,proto3" json:"material_id,omitempty"`
	IsHintValid   bool       `protobuf:"varint,2,opt,name=is_hint_valid,json=isHintValid,proto3" json:"is_hint_valid,omitempty"`
	HintCenterPos *VectorBin `protobuf:"bytes,3,opt,name=hint_center_pos,json=hintCenterPos,proto3" json:"hint_center_pos,omitempty"`
	GroupId       uint32     `protobuf:"varint,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ConfigId      uint32     `protobuf:"varint,6,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
}

func (x *WidgetOneoffGatherPointDetectorBin) Reset() {
	*x = WidgetOneoffGatherPointDetectorBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[403]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidgetOneoffGatherPointDetectorBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidgetOneoffGatherPointDetectorBin) ProtoMessage() {}

func (x *WidgetOneoffGatherPointDetectorBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[403]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidgetOneoffGatherPointDetectorBin.ProtoReflect.Descriptor instead.
func (*WidgetOneoffGatherPointDetectorBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{403}
}

func (x *WidgetOneoffGatherPointDetectorBin) GetMaterialId() uint32 {
	if x != nil {
		return x.MaterialId
	}
	return 0
}

func (x *WidgetOneoffGatherPointDetectorBin) GetIsHintValid() bool {
	if x != nil {
		return x.IsHintValid
	}
	return false
}

func (x *WidgetOneoffGatherPointDetectorBin) GetHintCenterPos() *VectorBin {
	if x != nil {
		return x.HintCenterPos
	}
	return nil
}

func (x *WidgetOneoffGatherPointDetectorBin) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *WidgetOneoffGatherPointDetectorBin) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

type WidgetClientCollectorBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaterialId uint32 `protobuf:"varint,1,opt,name=material_id,json=materialId,proto3" json:"material_id,omitempty"`
	CurrPoints uint32 `protobuf:"varint,2,opt,name=curr_points,json=currPoints,proto3" json:"curr_points,omitempty"`
}

func (x *WidgetClientCollectorBin) Reset() {
	*x = WidgetClientCollectorBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[404]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidgetClientCollectorBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidgetClientCollectorBin) ProtoMessage() {}

func (x *WidgetClientCollectorBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[404]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidgetClientCollectorBin.ProtoReflect.Descriptor instead.
func (*WidgetClientCollectorBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{404}
}

func (x *WidgetClientCollectorBin) GetMaterialId() uint32 {
	if x != nil {
		return x.MaterialId
	}
	return 0
}

func (x *WidgetClientCollectorBin) GetCurrPoints() uint32 {
	if x != nil {
		return x.CurrPoints
	}
	return 0
}

type WidgetCoolDownInfoBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LastUseTime uint64 `protobuf:"varint,2,opt,name=last_use_time,json=lastUseTime,proto3" json:"last_use_time,omitempty"`
	IsSuccess   bool   `protobuf:"varint,3,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
}

func (x *WidgetCoolDownInfoBin) Reset() {
	*x = WidgetCoolDownInfoBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[405]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidgetCoolDownInfoBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidgetCoolDownInfoBin) ProtoMessage() {}

func (x *WidgetCoolDownInfoBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[405]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidgetCoolDownInfoBin.ProtoReflect.Descriptor instead.
func (*WidgetCoolDownInfoBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{405}
}

func (x *WidgetCoolDownInfoBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WidgetCoolDownInfoBin) GetLastUseTime() uint64 {
	if x != nil {
		return x.LastUseTime
	}
	return 0
}

func (x *WidgetCoolDownInfoBin) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

type AttachAvatarWidgetBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaterialId uint32 `protobuf:"varint,1,opt,name=material_id,json=materialId,proto3" json:"material_id,omitempty"`
	CdOverTime uint32 `protobuf:"varint,2,opt,name=cd_over_time,json=cdOverTime,proto3" json:"cd_over_time,omitempty"`
}

func (x *AttachAvatarWidgetBin) Reset() {
	*x = AttachAvatarWidgetBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[406]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachAvatarWidgetBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachAvatarWidgetBin) ProtoMessage() {}

func (x *AttachAvatarWidgetBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[406]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachAvatarWidgetBin.ProtoReflect.Descriptor instead.
func (*AttachAvatarWidgetBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{406}
}

func (x *AttachAvatarWidgetBin) GetMaterialId() uint32 {
	if x != nil {
		return x.MaterialId
	}
	return 0
}

func (x *AttachAvatarWidgetBin) GetCdOverTime() uint32 {
	if x != nil {
		return x.CdOverTime
	}
	return 0
}

type WidgetCaptureAnimalBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillFlag uint32 `protobuf:"varint,1,opt,name=skill_flag,json=skillFlag,proto3" json:"skill_flag,omitempty"`
}

func (x *WidgetCaptureAnimalBin) Reset() {
	*x = WidgetCaptureAnimalBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[407]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidgetCaptureAnimalBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidgetCaptureAnimalBin) ProtoMessage() {}

func (x *WidgetCaptureAnimalBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[407]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidgetCaptureAnimalBin.ProtoReflect.Descriptor instead.
func (*WidgetCaptureAnimalBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{407}
}

func (x *WidgetCaptureAnimalBin) GetSkillFlag() uint32 {
	if x != nil {
		return x.SkillFlag
	}
	return 0
}

type WidgetLightStoneBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHintValid   bool       `protobuf:"varint,1,opt,name=is_hint_valid,json=isHintValid,proto3" json:"is_hint_valid,omitempty"`
	HintCenterPos *VectorBin `protobuf:"bytes,2,opt,name=hint_center_pos,json=hintCenterPos,proto3" json:"hint_center_pos,omitempty"`
	GroupId       uint32     `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ConfigId      uint32     `protobuf:"varint,5,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
}

func (x *WidgetLightStoneBin) Reset() {
	*x = WidgetLightStoneBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[408]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidgetLightStoneBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidgetLightStoneBin) ProtoMessage() {}

func (x *WidgetLightStoneBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[408]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidgetLightStoneBin.ProtoReflect.Descriptor instead.
func (*WidgetLightStoneBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{408}
}

func (x *WidgetLightStoneBin) GetIsHintValid() bool {
	if x != nil {
		return x.IsHintValid
	}
	return false
}

func (x *WidgetLightStoneBin) GetHintCenterPos() *VectorBin {
	if x != nil {
		return x.HintCenterPos
	}
	return nil
}

func (x *WidgetLightStoneBin) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *WidgetLightStoneBin) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

type WidgetBackgroundBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsActive bool `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *WidgetBackgroundBin) Reset() {
	*x = WidgetBackgroundBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[409]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidgetBackgroundBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidgetBackgroundBin) ProtoMessage() {}

func (x *WidgetBackgroundBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[409]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidgetBackgroundBin.ProtoReflect.Descriptor instead.
func (*WidgetBackgroundBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{409}
}

func (x *WidgetBackgroundBin) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type WidgetWeatherWizardBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShieldValue uint32 `protobuf:"varint,1,opt,name=shield_value,json=shieldValue,proto3" json:"shield_value,omitempty"`
}

func (x *WidgetWeatherWizardBin) Reset() {
	*x = WidgetWeatherWizardBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidgetWeatherWizardBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidgetWeatherWizardBin) ProtoMessage() {}

func (x *WidgetWeatherWizardBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidgetWeatherWizardBin.ProtoReflect.Descriptor instead.
func (*WidgetWeatherWizardBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{410}
}

func (x *WidgetWeatherWizardBin) GetShieldValue() uint32 {
	if x != nil {
		return x.ShieldValue
	}
	return 0
}

type WidgetDetailBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DetailBin:
	//
	//	*WidgetDetailBin_AttachAvatarWidget
	//	*WidgetDetailBin_OneoffGatherPointDetector
	//	*WidgetDetailBin_ClientCollector
	//	*WidgetDetailBin_CaptureAnimal
	//	*WidgetDetailBin_LightStone
	//	*WidgetDetailBin_BackgroundWidget
	//	*WidgetDetailBin_WeatherWizard
	DetailBin isWidgetDetailBin_DetailBin `protobuf_oneof:"detail_bin"`
}

func (x *WidgetDetailBin) Reset() {
	*x = WidgetDetailBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[411]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidgetDetailBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidgetDetailBin) ProtoMessage() {}

func (x *WidgetDetailBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[411]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidgetDetailBin.ProtoReflect.Descriptor instead.
func (*WidgetDetailBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{411}
}

func (m *WidgetDetailBin) GetDetailBin() isWidgetDetailBin_DetailBin {
	if m != nil {
		return m.DetailBin
	}
	return nil
}

func (x *WidgetDetailBin) GetAttachAvatarWidget() *AttachAvatarWidgetBin {
	if x, ok := x.GetDetailBin().(*WidgetDetailBin_AttachAvatarWidget); ok {
		return x.AttachAvatarWidget
	}
	return nil
}

func (x *WidgetDetailBin) GetOneoffGatherPointDetector() *WidgetOneoffGatherPointDetectorBin {
	if x, ok := x.GetDetailBin().(*WidgetDetailBin_OneoffGatherPointDetector); ok {
		return x.OneoffGatherPointDetector
	}
	return nil
}

func (x *WidgetDetailBin) GetClientCollector() *WidgetClientCollectorBin {
	if x, ok := x.GetDetailBin().(*WidgetDetailBin_ClientCollector); ok {
		return x.ClientCollector
	}
	return nil
}

func (x *WidgetDetailBin) GetCaptureAnimal() *WidgetCaptureAnimalBin {
	if x, ok := x.GetDetailBin().(*WidgetDetailBin_CaptureAnimal); ok {
		return x.CaptureAnimal
	}
	return nil
}

func (x *WidgetDetailBin) GetLightStone() *WidgetLightStoneBin {
	if x, ok := x.GetDetailBin().(*WidgetDetailBin_LightStone); ok {
		return x.LightStone
	}
	return nil
}

func (x *WidgetDetailBin) GetBackgroundWidget() *WidgetBackgroundBin {
	if x, ok := x.GetDetailBin().(*WidgetDetailBin_BackgroundWidget); ok {
		return x.BackgroundWidget
	}
	return nil
}

func (x *WidgetDetailBin) GetWeatherWizard() *WidgetWeatherWizardBin {
	if x, ok := x.GetDetailBin().(*WidgetDetailBin_WeatherWizard); ok {
		return x.WeatherWizard
	}
	return nil
}

type isWidgetDetailBin_DetailBin interface {
	isWidgetDetailBin_DetailBin()
}

type WidgetDetailBin_AttachAvatarWidget struct {
	AttachAvatarWidget *AttachAvatarWidgetBin `protobuf:"bytes,1,opt,name=attach_avatar_widget,json=attachAvatarWidget,proto3,oneof"`
}

type WidgetDetailBin_OneoffGatherPointDetector struct {
	OneoffGatherPointDetector *WidgetOneoffGatherPointDetectorBin `protobuf:"bytes,2,opt,name=oneoff_gather_point_detector,json=oneoffGatherPointDetector,proto3,oneof"`
}

type WidgetDetailBin_ClientCollector struct {
	ClientCollector *WidgetClientCollectorBin `protobuf:"bytes,3,opt,name=client_collector,json=clientCollector,proto3,oneof"`
}

type WidgetDetailBin_CaptureAnimal struct {
	CaptureAnimal *WidgetCaptureAnimalBin `protobuf:"bytes,4,opt,name=capture_animal,json=captureAnimal,proto3,oneof"`
}

type WidgetDetailBin_LightStone struct {
	LightStone *WidgetLightStoneBin `protobuf:"bytes,2601,opt,name=light_stone,json=lightStone,proto3,oneof"`
}

type WidgetDetailBin_BackgroundWidget struct {
	BackgroundWidget *WidgetBackgroundBin `protobuf:"bytes,3001,opt,name=background_widget,json=backgroundWidget,proto3,oneof"`
}

type WidgetDetailBin_WeatherWizard struct {
	WeatherWizard *WidgetWeatherWizardBin `protobuf:"bytes,3301,opt,name=weather_wizard,json=weatherWizard,proto3,oneof"`
}

func (*WidgetDetailBin_AttachAvatarWidget) isWidgetDetailBin_DetailBin() {}

func (*WidgetDetailBin_OneoffGatherPointDetector) isWidgetDetailBin_DetailBin() {}

func (*WidgetDetailBin_ClientCollector) isWidgetDetailBin_DetailBin() {}

func (*WidgetDetailBin_CaptureAnimal) isWidgetDetailBin_DetailBin() {}

func (*WidgetDetailBin_LightStone) isWidgetDetailBin_DetailBin() {}

func (*WidgetDetailBin_BackgroundWidget) isWidgetDetailBin_DetailBin() {}

func (*WidgetDetailBin_WeatherWizard) isWidgetDetailBin_DetailBin() {}

type WidgetBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaterialId       uint32           `protobuf:"varint,1,opt,name=material_id,json=materialId,proto3" json:"material_id,omitempty"`
	SlotOccupiedList []bool           `protobuf:"varint,2,rep,packed,name=slot_occupied_list,json=slotOccupiedList,proto3" json:"slot_occupied_list,omitempty"`
	DetailBin        *WidgetDetailBin `protobuf:"bytes,3,opt,name=detail_bin,json=detailBin,proto3" json:"detail_bin,omitempty"`
}

func (x *WidgetBin) Reset() {
	*x = WidgetBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidgetBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidgetBin) ProtoMessage() {}

func (x *WidgetBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidgetBin.ProtoReflect.Descriptor instead.
func (*WidgetBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{412}
}

func (x *WidgetBin) GetMaterialId() uint32 {
	if x != nil {
		return x.MaterialId
	}
	return 0
}

func (x *WidgetBin) GetSlotOccupiedList() []bool {
	if x != nil {
		return x.SlotOccupiedList
	}
	return nil
}

func (x *WidgetBin) GetDetailBin() *WidgetDetailBin {
	if x != nil {
		return x.DetailBin
	}
	return nil
}

type PlayerWidgetCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextWidgetId                          uint32                                `protobuf:"varint,1,opt,name=next_widget_id,json=nextWidgetId,proto3" json:"next_widget_id,omitempty"`
	QuickUseMaterialId                    uint32                                `protobuf:"varint,2,opt,name=quick_use_material_id,json=quickUseMaterialId,proto3" json:"quick_use_material_id,omitempty"`
	LastUseAnchorPointTime                uint32                                `protobuf:"varint,3,opt,name=last_use_anchor_point_time,json=lastUseAnchorPointTime,proto3" json:"last_use_anchor_point_time,omitempty"`
	AnchorPointList                       []*WidgetAnchorPointBin               `protobuf:"bytes,4,rep,name=anchor_point_list,json=anchorPointList,proto3" json:"anchor_point_list,omitempty"`
	LastUseBonfireTime                    uint32                                `protobuf:"varint,5,opt,name=last_use_bonfire_time,json=lastUseBonfireTime,proto3" json:"last_use_bonfire_time,omitempty"`
	LunchBox                              *WidgetLunchBoxBin                    `protobuf:"bytes,6,opt,name=lunch_box,json=lunchBox,proto3" json:"lunch_box,omitempty"`
	OneoffGatherPointDetectorList         []*WidgetOneoffGatherPointDetectorBin `protobuf:"bytes,7,rep,name=oneoff_gather_point_detector_list,json=oneoffGatherPointDetectorList,proto3" json:"oneoff_gather_point_detector_list,omitempty"`
	ClientCollectorList                   []*WidgetClientCollectorBin           `protobuf:"bytes,8,rep,name=client_collector_list,json=clientCollectorList,proto3" json:"client_collector_list,omitempty"`
	GroupCoolDownDataList                 []*WidgetCoolDownInfoBin              `protobuf:"bytes,9,rep,name=group_cool_down_data_list,json=groupCoolDownDataList,proto3" json:"group_cool_down_data_list,omitempty"`
	NormalCoolDownDataList                []*WidgetCoolDownInfoBin              `protobuf:"bytes,10,rep,name=normal_cool_down_data_list,json=normalCoolDownDataList,proto3" json:"normal_cool_down_data_list,omitempty"`
	AttachAvatarWidget                    *AttachAvatarWidgetBin                `protobuf:"bytes,11,opt,name=attach_avatar_widget,json=attachAvatarWidget,proto3" json:"attach_avatar_widget,omitempty"`
	WidgetBinList                         []*WidgetBin                          `protobuf:"bytes,20,rep,name=widget_bin_list,json=widgetBinList,proto3" json:"widget_bin_list,omitempty"`
	SlotMaterialMap                       map[uint32]uint32                     `protobuf:"bytes,21,rep,name=slot_material_map,json=slotMaterialMap,proto3" json:"slot_material_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IsOneoffGatherPointDetectorTransfered bool                                  `protobuf:"varint,22,opt,name=is_oneoff_gather_point_detector_transfered,json=isOneoffGatherPointDetectorTransfered,proto3" json:"is_oneoff_gather_point_detector_transfered,omitempty"`
	IsClientCollectorTransfered           bool                                  `protobuf:"varint,23,opt,name=is_client_collector_transfered,json=isClientCollectorTransfered,proto3" json:"is_client_collector_transfered,omitempty"`
}

func (x *PlayerWidgetCompBin) Reset() {
	*x = PlayerWidgetCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerWidgetCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerWidgetCompBin) ProtoMessage() {}

func (x *PlayerWidgetCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerWidgetCompBin.ProtoReflect.Descriptor instead.
func (*PlayerWidgetCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{413}
}

func (x *PlayerWidgetCompBin) GetNextWidgetId() uint32 {
	if x != nil {
		return x.NextWidgetId
	}
	return 0
}

func (x *PlayerWidgetCompBin) GetQuickUseMaterialId() uint32 {
	if x != nil {
		return x.QuickUseMaterialId
	}
	return 0
}

func (x *PlayerWidgetCompBin) GetLastUseAnchorPointTime() uint32 {
	if x != nil {
		return x.LastUseAnchorPointTime
	}
	return 0
}

func (x *PlayerWidgetCompBin) GetAnchorPointList() []*WidgetAnchorPointBin {
	if x != nil {
		return x.AnchorPointList
	}
	return nil
}

func (x *PlayerWidgetCompBin) GetLastUseBonfireTime() uint32 {
	if x != nil {
		return x.LastUseBonfireTime
	}
	return 0
}

func (x *PlayerWidgetCompBin) GetLunchBox() *WidgetLunchBoxBin {
	if x != nil {
		return x.LunchBox
	}
	return nil
}

func (x *PlayerWidgetCompBin) GetOneoffGatherPointDetectorList() []*WidgetOneoffGatherPointDetectorBin {
	if x != nil {
		return x.OneoffGatherPointDetectorList
	}
	return nil
}

func (x *PlayerWidgetCompBin) GetClientCollectorList() []*WidgetClientCollectorBin {
	if x != nil {
		return x.ClientCollectorList
	}
	return nil
}

func (x *PlayerWidgetCompBin) GetGroupCoolDownDataList() []*WidgetCoolDownInfoBin {
	if x != nil {
		return x.GroupCoolDownDataList
	}
	return nil
}

func (x *PlayerWidgetCompBin) GetNormalCoolDownDataList() []*WidgetCoolDownInfoBin {
	if x != nil {
		return x.NormalCoolDownDataList
	}
	return nil
}

func (x *PlayerWidgetCompBin) GetAttachAvatarWidget() *AttachAvatarWidgetBin {
	if x != nil {
		return x.AttachAvatarWidget
	}
	return nil
}

func (x *PlayerWidgetCompBin) GetWidgetBinList() []*WidgetBin {
	if x != nil {
		return x.WidgetBinList
	}
	return nil
}

func (x *PlayerWidgetCompBin) GetSlotMaterialMap() map[uint32]uint32 {
	if x != nil {
		return x.SlotMaterialMap
	}
	return nil
}

func (x *PlayerWidgetCompBin) GetIsOneoffGatherPointDetectorTransfered() bool {
	if x != nil {
		return x.IsOneoffGatherPointDetectorTransfered
	}
	return false
}

func (x *PlayerWidgetCompBin) GetIsClientCollectorTransfered() bool {
	if x != nil {
		return x.IsClientCollectorTransfered
	}
	return false
}

type ScenePlaySourceBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Param uint32 `protobuf:"varint,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *ScenePlaySourceBin) Reset() {
	*x = ScenePlaySourceBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlaySourceBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlaySourceBin) ProtoMessage() {}

func (x *ScenePlaySourceBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlaySourceBin.ProtoReflect.Descriptor instead.
func (*ScenePlaySourceBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{414}
}

func (x *ScenePlaySourceBin) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ScenePlaySourceBin) GetParam() uint32 {
	if x != nil {
		return x.Param
	}
	return 0
}

type ScenePlayBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayId    uint32              `protobuf:"varint,1,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
	PlayType  uint32              `protobuf:"varint,2,opt,name=play_type,json=playType,proto3" json:"play_type,omitempty"`
	EntryId   uint32              `protobuf:"varint,3,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	Phase     uint32              `protobuf:"varint,4,opt,name=phase,proto3" json:"phase,omitempty"`
	SourceBin *ScenePlaySourceBin `protobuf:"bytes,5,opt,name=source_bin,json=sourceBin,proto3" json:"source_bin,omitempty"`
}

func (x *ScenePlayBin) Reset() {
	*x = ScenePlayBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[415]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlayBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlayBin) ProtoMessage() {}

func (x *ScenePlayBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[415]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlayBin.ProtoReflect.Descriptor instead.
func (*ScenePlayBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{415}
}

func (x *ScenePlayBin) GetPlayId() uint32 {
	if x != nil {
		return x.PlayId
	}
	return 0
}

func (x *ScenePlayBin) GetPlayType() uint32 {
	if x != nil {
		return x.PlayType
	}
	return 0
}

func (x *ScenePlayBin) GetEntryId() uint32 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

func (x *ScenePlayBin) GetPhase() uint32 {
	if x != nil {
		return x.Phase
	}
	return 0
}

func (x *ScenePlayBin) GetSourceBin() *ScenePlaySourceBin {
	if x != nil {
		return x.SourceBin
	}
	return nil
}

type PlayerScenePlayCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayList []*ScenePlayBin `protobuf:"bytes,1,rep,name=play_list,json=playList,proto3" json:"play_list,omitempty"`
}

func (x *PlayerScenePlayCompBin) Reset() {
	*x = PlayerScenePlayCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[416]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerScenePlayCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerScenePlayCompBin) ProtoMessage() {}

func (x *PlayerScenePlayCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[416]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerScenePlayCompBin.ProtoReflect.Descriptor instead.
func (*PlayerScenePlayCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{416}
}

func (x *PlayerScenePlayCompBin) GetPlayList() []*ScenePlayBin {
	if x != nil {
		return x.PlayList
	}
	return nil
}

type MainCoopBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status          uint32                  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	SavePointIdList []uint32                `protobuf:"varint,3,rep,packed,name=save_point_id_list,json=savePointIdList,proto3" json:"save_point_id_list,omitempty"`
	SelfConfidence  int32                   `protobuf:"varint,4,opt,name=self_confidence,json=selfConfidence,proto3" json:"self_confidence,omitempty"`
	NormalVarList   []*Uint32ToInt32PairBin `protobuf:"bytes,5,rep,name=normal_var_list,json=normalVarList,proto3" json:"normal_var_list,omitempty"`
	TempVarList     []*Uint32ToInt32PairBin `protobuf:"bytes,6,rep,name=temp_var_list,json=tempVarList,proto3" json:"temp_var_list,omitempty"`
	SeenEndingList  []*Uint32PairBin        `protobuf:"bytes,7,rep,name=seen_ending_list,json=seenEndingList,proto3" json:"seen_ending_list,omitempty"`
	Confidence      uint32                  `protobuf:"varint,8,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (x *MainCoopBin) Reset() {
	*x = MainCoopBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[417]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainCoopBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainCoopBin) ProtoMessage() {}

func (x *MainCoopBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[417]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainCoopBin.ProtoReflect.Descriptor instead.
func (*MainCoopBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{417}
}

func (x *MainCoopBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MainCoopBin) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MainCoopBin) GetSavePointIdList() []uint32 {
	if x != nil {
		return x.SavePointIdList
	}
	return nil
}

func (x *MainCoopBin) GetSelfConfidence() int32 {
	if x != nil {
		return x.SelfConfidence
	}
	return 0
}

func (x *MainCoopBin) GetNormalVarList() []*Uint32ToInt32PairBin {
	if x != nil {
		return x.NormalVarList
	}
	return nil
}

func (x *MainCoopBin) GetTempVarList() []*Uint32ToInt32PairBin {
	if x != nil {
		return x.TempVarList
	}
	return nil
}

func (x *MainCoopBin) GetSeenEndingList() []*Uint32PairBin {
	if x != nil {
		return x.SeenEndingList
	}
	return nil
}

func (x *MainCoopBin) GetConfidence() uint32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

type CoopPointBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	State         uint32       `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	StartMainCoop *MainCoopBin `protobuf:"bytes,3,opt,name=start_main_coop,json=startMainCoop,proto3" json:"start_main_coop,omitempty"`
}

func (x *CoopPointBin) Reset() {
	*x = CoopPointBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[418]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoopPointBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoopPointBin) ProtoMessage() {}

func (x *CoopPointBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[418]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoopPointBin.ProtoReflect.Descriptor instead.
func (*CoopPointBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{418}
}

func (x *CoopPointBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CoopPointBin) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *CoopPointBin) GetStartMainCoop() *MainCoopBin {
	if x != nil {
		return x.StartMainCoop
	}
	return nil
}

type CoopChapterBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint32           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	State          uint32           `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	CgList         []uint32         `protobuf:"varint,3,rep,packed,name=cg_list,json=cgList,proto3" json:"cg_list,omitempty"`
	RewardList     []uint32         `protobuf:"varint,4,rep,packed,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`
	DialogList     []uint32         `protobuf:"varint,5,rep,packed,name=dialog_list,json=dialogList,proto3" json:"dialog_list,omitempty"`
	CoopPointList  []*CoopPointBin  `protobuf:"bytes,6,rep,name=coop_point_list,json=coopPointList,proto3" json:"coop_point_list,omitempty"`
	SeenEndingList []*Uint32PairBin `protobuf:"bytes,7,rep,name=seen_ending_list,json=seenEndingList,proto3" json:"seen_ending_list,omitempty"`
}

func (x *CoopChapterBin) Reset() {
	*x = CoopChapterBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[419]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoopChapterBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoopChapterBin) ProtoMessage() {}

func (x *CoopChapterBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[419]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoopChapterBin.ProtoReflect.Descriptor instead.
func (*CoopChapterBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{419}
}

func (x *CoopChapterBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CoopChapterBin) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *CoopChapterBin) GetCgList() []uint32 {
	if x != nil {
		return x.CgList
	}
	return nil
}

func (x *CoopChapterBin) GetRewardList() []uint32 {
	if x != nil {
		return x.RewardList
	}
	return nil
}

func (x *CoopChapterBin) GetDialogList() []uint32 {
	if x != nil {
		return x.DialogList
	}
	return nil
}

func (x *CoopChapterBin) GetCoopPointList() []*CoopPointBin {
	if x != nil {
		return x.CoopPointList
	}
	return nil
}

func (x *CoopChapterBin) GetSeenEndingList() []*Uint32PairBin {
	if x != nil {
		return x.SeenEndingList
	}
	return nil
}

type CoopProgressBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoopPointId uint32                  `protobuf:"varint,1,opt,name=coop_point_id,json=coopPointId,proto3" json:"coop_point_id,omitempty"`
	MainCoopMap map[uint32]*MainCoopBin `protobuf:"bytes,4,rep,name=main_coop_map,json=mainCoopMap,proto3" json:"main_coop_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CoopProgressBin) Reset() {
	*x = CoopProgressBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[420]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoopProgressBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoopProgressBin) ProtoMessage() {}

func (x *CoopProgressBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[420]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoopProgressBin.ProtoReflect.Descriptor instead.
func (*CoopProgressBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{420}
}

func (x *CoopProgressBin) GetCoopPointId() uint32 {
	if x != nil {
		return x.CoopPointId
	}
	return 0
}

func (x *CoopProgressBin) GetMainCoopMap() map[uint32]*MainCoopBin {
	if x != nil {
		return x.MainCoopMap
	}
	return nil
}

type PlayerCoopCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainCoopList      []*MainCoopBin    `protobuf:"bytes,1,rep,name=main_coop_list,json=mainCoopList,proto3" json:"main_coop_list,omitempty"`
	ChapterBinList    []*CoopChapterBin `protobuf:"bytes,2,rep,name=chapter_bin_list,json=chapterBinList,proto3" json:"chapter_bin_list,omitempty"`
	ProgressBin       *CoopProgressBin  `protobuf:"bytes,3,opt,name=progress_bin,json=progressBin,proto3" json:"progress_bin,omitempty"`
	ViewedChapterList []uint32          `protobuf:"varint,4,rep,packed,name=viewed_chapter_list,json=viewedChapterList,proto3" json:"viewed_chapter_list,omitempty"`
}

func (x *PlayerCoopCompBin) Reset() {
	*x = PlayerCoopCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[421]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerCoopCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerCoopCompBin) ProtoMessage() {}

func (x *PlayerCoopCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[421]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerCoopCompBin.ProtoReflect.Descriptor instead.
func (*PlayerCoopCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{421}
}

func (x *PlayerCoopCompBin) GetMainCoopList() []*MainCoopBin {
	if x != nil {
		return x.MainCoopList
	}
	return nil
}

func (x *PlayerCoopCompBin) GetChapterBinList() []*CoopChapterBin {
	if x != nil {
		return x.ChapterBinList
	}
	return nil
}

func (x *PlayerCoopCompBin) GetProgressBin() *CoopProgressBin {
	if x != nil {
		return x.ProgressBin
	}
	return nil
}

func (x *PlayerCoopCompBin) GetViewedChapterList() []uint32 {
	if x != nil {
		return x.ViewedChapterList
	}
	return nil
}

type PlayerOfferingInfoBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfferingId           uint32   `protobuf:"varint,1,opt,name=offering_id,json=offeringId,proto3" json:"offering_id,omitempty"`
	Level                uint32   `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	TakenLevelRewardList []uint32 `protobuf:"varint,3,rep,packed,name=taken_level_reward_list,json=takenLevelRewardList,proto3" json:"taken_level_reward_list,omitempty"`
	IsReachMaxLevel      bool     `protobuf:"varint,4,opt,name=is_reach_max_level,json=isReachMaxLevel,proto3" json:"is_reach_max_level,omitempty"`
	IsNeedNotifyNewMax   bool     `protobuf:"varint,5,opt,name=is_need_notify_new_max,json=isNeedNotifyNewMax,proto3" json:"is_need_notify_new_max,omitempty"`
	LastVersionMaxLevel  uint32   `protobuf:"varint,6,opt,name=last_version_max_level,json=lastVersionMaxLevel,proto3" json:"last_version_max_level,omitempty"`
	IsFirstInteract      bool     `protobuf:"varint,7,opt,name=is_first_interact,json=isFirstInteract,proto3" json:"is_first_interact,omitempty"`
}

func (x *PlayerOfferingInfoBin) Reset() {
	*x = PlayerOfferingInfoBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[422]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerOfferingInfoBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerOfferingInfoBin) ProtoMessage() {}

func (x *PlayerOfferingInfoBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[422]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerOfferingInfoBin.ProtoReflect.Descriptor instead.
func (*PlayerOfferingInfoBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{422}
}

func (x *PlayerOfferingInfoBin) GetOfferingId() uint32 {
	if x != nil {
		return x.OfferingId
	}
	return 0
}

func (x *PlayerOfferingInfoBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PlayerOfferingInfoBin) GetTakenLevelRewardList() []uint32 {
	if x != nil {
		return x.TakenLevelRewardList
	}
	return nil
}

func (x *PlayerOfferingInfoBin) GetIsReachMaxLevel() bool {
	if x != nil {
		return x.IsReachMaxLevel
	}
	return false
}

func (x *PlayerOfferingInfoBin) GetIsNeedNotifyNewMax() bool {
	if x != nil {
		return x.IsNeedNotifyNewMax
	}
	return false
}

func (x *PlayerOfferingInfoBin) GetLastVersionMaxLevel() uint32 {
	if x != nil {
		return x.LastVersionMaxLevel
	}
	return 0
}

func (x *PlayerOfferingInfoBin) GetIsFirstInteract() bool {
	if x != nil {
		return x.IsFirstInteract
	}
	return false
}

type PlayerOfferingCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfferingBinList []*PlayerOfferingInfoBin `protobuf:"bytes,1,rep,name=offering_bin_list,json=offeringBinList,proto3" json:"offering_bin_list,omitempty"`
}

func (x *PlayerOfferingCompBin) Reset() {
	*x = PlayerOfferingCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[423]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerOfferingCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerOfferingCompBin) ProtoMessage() {}

func (x *PlayerOfferingCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[423]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerOfferingCompBin.ProtoReflect.Descriptor instead.
func (*PlayerOfferingCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{423}
}

func (x *PlayerOfferingCompBin) GetOfferingBinList() []*PlayerOfferingInfoBin {
	if x != nil {
		return x.OfferingBinList
	}
	return nil
}

type ReunionSignInBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReunionSignInId uint32   `protobuf:"varint,1,opt,name=reunion_sign_in_id,json=reunionSignInId,proto3" json:"reunion_sign_in_id,omitempty"`
	SignInCount     uint32   `protobuf:"varint,2,opt,name=sign_in_count,json=signInCount,proto3" json:"sign_in_count,omitempty"`
	LastSignInTime  uint32   `protobuf:"fixed32,3,opt,name=last_sign_in_time,json=lastSignInTime,proto3" json:"last_sign_in_time,omitempty"`
	RewardDayList   []uint32 `protobuf:"varint,4,rep,packed,name=reward_day_list,json=rewardDayList,proto3" json:"reward_day_list,omitempty"`
}

func (x *ReunionSignInBin) Reset() {
	*x = ReunionSignInBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[424]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReunionSignInBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReunionSignInBin) ProtoMessage() {}

func (x *ReunionSignInBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[424]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReunionSignInBin.ProtoReflect.Descriptor instead.
func (*ReunionSignInBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{424}
}

func (x *ReunionSignInBin) GetReunionSignInId() uint32 {
	if x != nil {
		return x.ReunionSignInId
	}
	return 0
}

func (x *ReunionSignInBin) GetSignInCount() uint32 {
	if x != nil {
		return x.SignInCount
	}
	return 0
}

func (x *ReunionSignInBin) GetLastSignInTime() uint32 {
	if x != nil {
		return x.LastSignInTime
	}
	return 0
}

func (x *ReunionSignInBin) GetRewardDayList() []uint32 {
	if x != nil {
		return x.RewardDayList
	}
	return nil
}

type ReunionMissionBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissionId              uint32   `protobuf:"varint,1,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"`
	TakenRewardWatcherList []uint32 `protobuf:"varint,2,rep,packed,name=taken_reward_watcher_list,json=takenRewardWatcherList,proto3" json:"taken_reward_watcher_list,omitempty"`
	FinishedWatcherList    []uint32 `protobuf:"varint,3,rep,packed,name=finished_watcher_list,json=finishedWatcherList,proto3" json:"finished_watcher_list,omitempty"`
	CurDayWatcherList      []uint32 `protobuf:"varint,4,rep,packed,name=cur_day_watcher_list,json=curDayWatcherList,proto3" json:"cur_day_watcher_list,omitempty"`
	CurScore               uint32   `protobuf:"varint,5,opt,name=cur_score,json=curScore,proto3" json:"cur_score,omitempty"`
	IsFinished             bool     `protobuf:"varint,6,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	IsTakenReward          bool     `protobuf:"varint,7,opt,name=is_taken_reward,json=isTakenReward,proto3" json:"is_taken_reward,omitempty"`
	LastRefreshTime        uint32   `protobuf:"varint,8,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	IsTakenRewardList      []bool   `protobuf:"varint,9,rep,packed,name=is_taken_reward_list,json=isTakenRewardList,proto3" json:"is_taken_reward_list,omitempty"`
	WatcherList            []uint32 `protobuf:"varint,10,rep,packed,name=watcher_list,json=watcherList,proto3" json:"watcher_list,omitempty"`
}

func (x *ReunionMissionBin) Reset() {
	*x = ReunionMissionBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[425]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReunionMissionBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReunionMissionBin) ProtoMessage() {}

func (x *ReunionMissionBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[425]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReunionMissionBin.ProtoReflect.Descriptor instead.
func (*ReunionMissionBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{425}
}

func (x *ReunionMissionBin) GetMissionId() uint32 {
	if x != nil {
		return x.MissionId
	}
	return 0
}

func (x *ReunionMissionBin) GetTakenRewardWatcherList() []uint32 {
	if x != nil {
		return x.TakenRewardWatcherList
	}
	return nil
}

func (x *ReunionMissionBin) GetFinishedWatcherList() []uint32 {
	if x != nil {
		return x.FinishedWatcherList
	}
	return nil
}

func (x *ReunionMissionBin) GetCurDayWatcherList() []uint32 {
	if x != nil {
		return x.CurDayWatcherList
	}
	return nil
}

func (x *ReunionMissionBin) GetCurScore() uint32 {
	if x != nil {
		return x.CurScore
	}
	return 0
}

func (x *ReunionMissionBin) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *ReunionMissionBin) GetIsTakenReward() bool {
	if x != nil {
		return x.IsTakenReward
	}
	return false
}

func (x *ReunionMissionBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

func (x *ReunionMissionBin) GetIsTakenRewardList() []bool {
	if x != nil {
		return x.IsTakenRewardList
	}
	return nil
}

func (x *ReunionMissionBin) GetWatcherList() []uint32 {
	if x != nil {
		return x.WatcherList
	}
	return nil
}

type ReunionPrivilegeBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivilegeId     uint32 `protobuf:"varint,1,opt,name=privilege_id,json=privilegeId,proto3" json:"privilege_id,omitempty"`
	CurDayCount     uint32 `protobuf:"varint,2,opt,name=cur_day_count,json=curDayCount,proto3" json:"cur_day_count,omitempty"`
	LastRefreshTime uint32 `protobuf:"varint,3,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	TotalCount      uint32 `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *ReunionPrivilegeBin) Reset() {
	*x = ReunionPrivilegeBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[426]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReunionPrivilegeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReunionPrivilegeBin) ProtoMessage() {}

func (x *ReunionPrivilegeBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[426]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReunionPrivilegeBin.ProtoReflect.Descriptor instead.
func (*ReunionPrivilegeBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{426}
}

func (x *ReunionPrivilegeBin) GetPrivilegeId() uint32 {
	if x != nil {
		return x.PrivilegeId
	}
	return 0
}

func (x *ReunionPrivilegeBin) GetCurDayCount() uint32 {
	if x != nil {
		return x.CurDayCount
	}
	return 0
}

func (x *ReunionPrivilegeBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

func (x *ReunionPrivilegeBin) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type ReunionRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsTakenFirstGiftReward bool                 `protobuf:"varint,1,opt,name=is_taken_first_gift_reward,json=isTakenFirstGiftReward,proto3" json:"is_taken_first_gift_reward,omitempty"`
	FirstGiftRewardId      uint32               `protobuf:"varint,2,opt,name=first_gift_reward_id,json=firstGiftRewardId,proto3" json:"first_gift_reward_id,omitempty"`
	SignInBin              *ReunionSignInBin    `protobuf:"bytes,3,opt,name=sign_in_bin,json=signInBin,proto3" json:"sign_in_bin,omitempty"`
	MissionBin             *ReunionMissionBin   `protobuf:"bytes,4,opt,name=mission_bin,json=missionBin,proto3" json:"mission_bin,omitempty"`
	PrivilegeBin           *ReunionPrivilegeBin `protobuf:"bytes,5,opt,name=privilege_bin,json=privilegeBin,proto3" json:"privilege_bin,omitempty"`
	ReunionFinishTime      uint32               `protobuf:"fixed32,6,opt,name=reunion_finish_time,json=reunionFinishTime,proto3" json:"reunion_finish_time,omitempty"`
	IsActivated            bool                 `protobuf:"varint,7,opt,name=is_activated,json=isActivated,proto3" json:"is_activated,omitempty"`
	GameVersion            string               `protobuf:"bytes,8,opt,name=game_version,json=gameVersion,proto3" json:"game_version,omitempty"`
}

func (x *ReunionRecordBin) Reset() {
	*x = ReunionRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[427]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReunionRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReunionRecordBin) ProtoMessage() {}

func (x *ReunionRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[427]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReunionRecordBin.ProtoReflect.Descriptor instead.
func (*ReunionRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{427}
}

func (x *ReunionRecordBin) GetIsTakenFirstGiftReward() bool {
	if x != nil {
		return x.IsTakenFirstGiftReward
	}
	return false
}

func (x *ReunionRecordBin) GetFirstGiftRewardId() uint32 {
	if x != nil {
		return x.FirstGiftRewardId
	}
	return 0
}

func (x *ReunionRecordBin) GetSignInBin() *ReunionSignInBin {
	if x != nil {
		return x.SignInBin
	}
	return nil
}

func (x *ReunionRecordBin) GetMissionBin() *ReunionMissionBin {
	if x != nil {
		return x.MissionBin
	}
	return nil
}

func (x *ReunionRecordBin) GetPrivilegeBin() *ReunionPrivilegeBin {
	if x != nil {
		return x.PrivilegeBin
	}
	return nil
}

func (x *ReunionRecordBin) GetReunionFinishTime() uint32 {
	if x != nil {
		return x.ReunionFinishTime
	}
	return 0
}

func (x *ReunionRecordBin) GetIsActivated() bool {
	if x != nil {
		return x.IsActivated
	}
	return false
}

func (x *ReunionRecordBin) GetGameVersion() string {
	if x != nil {
		return x.GameVersion
	}
	return ""
}

type PlayerReunionCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastActivateReunionTime uint32            `protobuf:"fixed32,1,opt,name=last_activate_reunion_time,json=lastActivateReunionTime,proto3" json:"last_activate_reunion_time,omitempty"`
	ReunionRecord           *ReunionRecordBin `protobuf:"bytes,2,opt,name=reunion_record,json=reunionRecord,proto3" json:"reunion_record,omitempty"`
	IsActivatedWhenClose    bool              `protobuf:"varint,3,opt,name=is_activated_when_close,json=isActivatedWhenClose,proto3" json:"is_activated_when_close,omitempty"`
}

func (x *PlayerReunionCompBin) Reset() {
	*x = PlayerReunionCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[428]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerReunionCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerReunionCompBin) ProtoMessage() {}

func (x *PlayerReunionCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[428]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerReunionCompBin.ProtoReflect.Descriptor instead.
func (*PlayerReunionCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{428}
}

func (x *PlayerReunionCompBin) GetLastActivateReunionTime() uint32 {
	if x != nil {
		return x.LastActivateReunionTime
	}
	return 0
}

func (x *PlayerReunionCompBin) GetReunionRecord() *ReunionRecordBin {
	if x != nil {
		return x.ReunionRecord
	}
	return nil
}

func (x *PlayerReunionCompBin) GetIsActivatedWhenClose() bool {
	if x != nil {
		return x.IsActivatedWhenClose
	}
	return false
}

type PlayerRoutineBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoutineId  uint32 `protobuf:"varint,1,opt,name=routine_id,json=routineId,proto3" json:"routine_id,omitempty"`
	Progress   uint32 `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
	IsFinished uint32 `protobuf:"varint,3,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
}

func (x *PlayerRoutineBin) Reset() {
	*x = PlayerRoutineBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[429]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRoutineBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRoutineBin) ProtoMessage() {}

func (x *PlayerRoutineBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[429]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRoutineBin.ProtoReflect.Descriptor instead.
func (*PlayerRoutineBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{429}
}

func (x *PlayerRoutineBin) GetRoutineId() uint32 {
	if x != nil {
		return x.RoutineId
	}
	return 0
}

func (x *PlayerRoutineBin) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *PlayerRoutineBin) GetIsFinished() uint32 {
	if x != nil {
		return x.IsFinished
	}
	return 0
}

type PlayerRoutineTypeBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoutineType     uint32              `protobuf:"varint,1,opt,name=routine_type,json=routineType,proto3" json:"routine_type,omitempty"`
	FinishedNum     uint32              `protobuf:"varint,2,opt,name=finished_num,json=finishedNum,proto3" json:"finished_num,omitempty"`
	LastRefreshTime uint32              `protobuf:"varint,3,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	RoutineBinList  []*PlayerRoutineBin `protobuf:"bytes,4,rep,name=routine_bin_list,json=routineBinList,proto3" json:"routine_bin_list,omitempty"`
}

func (x *PlayerRoutineTypeBin) Reset() {
	*x = PlayerRoutineTypeBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[430]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRoutineTypeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRoutineTypeBin) ProtoMessage() {}

func (x *PlayerRoutineTypeBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[430]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRoutineTypeBin.ProtoReflect.Descriptor instead.
func (*PlayerRoutineTypeBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{430}
}

func (x *PlayerRoutineTypeBin) GetRoutineType() uint32 {
	if x != nil {
		return x.RoutineType
	}
	return 0
}

func (x *PlayerRoutineTypeBin) GetFinishedNum() uint32 {
	if x != nil {
		return x.FinishedNum
	}
	return 0
}

func (x *PlayerRoutineTypeBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

func (x *PlayerRoutineTypeBin) GetRoutineBinList() []*PlayerRoutineBin {
	if x != nil {
		return x.RoutineBinList
	}
	return nil
}

type PlayerRoutineCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoutineTypeBinList []*PlayerRoutineTypeBin `protobuf:"bytes,1,rep,name=routine_type_bin_list,json=routineTypeBinList,proto3" json:"routine_type_bin_list,omitempty"`
}

func (x *PlayerRoutineCompBin) Reset() {
	*x = PlayerRoutineCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[431]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRoutineCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRoutineCompBin) ProtoMessage() {}

func (x *PlayerRoutineCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[431]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRoutineCompBin.ProtoReflect.Descriptor instead.
func (*PlayerRoutineCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{431}
}

func (x *PlayerRoutineCompBin) GetRoutineTypeBinList() []*PlayerRoutineTypeBin {
	if x != nil {
		return x.RoutineTypeBinList
	}
	return nil
}

type MiracleRingDropParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag   uint32 `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Count uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *MiracleRingDropParam) Reset() {
	*x = MiracleRingDropParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[432]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiracleRingDropParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiracleRingDropParam) ProtoMessage() {}

func (x *MiracleRingDropParam) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[432]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiracleRingDropParam.ProtoReflect.Descriptor instead.
func (*MiracleRingDropParam) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{432}
}

func (x *MiracleRingDropParam) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *MiracleRingDropParam) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type PlayerMiracleRingCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastTakeRewardTime uint32                  `protobuf:"varint,1,opt,name=last_take_reward_time,json=lastTakeRewardTime,proto3" json:"last_take_reward_time,omitempty"`
	DropParamList      []*MiracleRingDropParam `protobuf:"bytes,2,rep,name=drop_param_list,json=dropParamList,proto3" json:"drop_param_list,omitempty"`
}

func (x *PlayerMiracleRingCompBin) Reset() {
	*x = PlayerMiracleRingCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[433]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMiracleRingCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMiracleRingCompBin) ProtoMessage() {}

func (x *PlayerMiracleRingCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[433]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMiracleRingCompBin.ProtoReflect.Descriptor instead.
func (*PlayerMiracleRingCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{433}
}

func (x *PlayerMiracleRingCompBin) GetLastTakeRewardTime() uint32 {
	if x != nil {
		return x.LastTakeRewardTime
	}
	return 0
}

func (x *PlayerMiracleRingCompBin) GetDropParamList() []*MiracleRingDropParam {
	if x != nil {
		return x.DropParamList
	}
	return nil
}

type MechanicusBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MechanicusId             uint32           `protobuf:"varint,1,opt,name=mechanicus_id,json=mechanicusId,proto3" json:"mechanicus_id,omitempty"`
	Coin                     uint32           `protobuf:"varint,2,opt,name=coin,proto3" json:"coin,omitempty"`
	GearLevelPairList        []*Uint32PairBin `protobuf:"bytes,3,rep,name=gear_level_pair_list,json=gearLevelPairList,proto3" json:"gear_level_pair_list,omitempty"`
	OpenSequenceIdList       []uint32         `protobuf:"varint,4,rep,packed,name=open_sequence_id_list,json=openSequenceIdList,proto3" json:"open_sequence_id_list,omitempty"`
	IsFinishTeachDungeon     bool             `protobuf:"varint,5,opt,name=is_finish_teach_dungeon,json=isFinishTeachDungeon,proto3" json:"is_finish_teach_dungeon,omitempty"`
	FinishDifficultLevelList []uint32         `protobuf:"varint,6,rep,packed,name=finish_difficult_level_list,json=finishDifficultLevelList,proto3" json:"finish_difficult_level_list,omitempty"`
	PunishOverTime           uint32           `protobuf:"varint,7,opt,name=punish_over_time,json=punishOverTime,proto3" json:"punish_over_time,omitempty"`
}

func (x *MechanicusBin) Reset() {
	*x = MechanicusBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[434]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MechanicusBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MechanicusBin) ProtoMessage() {}

func (x *MechanicusBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[434]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MechanicusBin.ProtoReflect.Descriptor instead.
func (*MechanicusBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{434}
}

func (x *MechanicusBin) GetMechanicusId() uint32 {
	if x != nil {
		return x.MechanicusId
	}
	return 0
}

func (x *MechanicusBin) GetCoin() uint32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *MechanicusBin) GetGearLevelPairList() []*Uint32PairBin {
	if x != nil {
		return x.GearLevelPairList
	}
	return nil
}

func (x *MechanicusBin) GetOpenSequenceIdList() []uint32 {
	if x != nil {
		return x.OpenSequenceIdList
	}
	return nil
}

func (x *MechanicusBin) GetIsFinishTeachDungeon() bool {
	if x != nil {
		return x.IsFinishTeachDungeon
	}
	return false
}

func (x *MechanicusBin) GetFinishDifficultLevelList() []uint32 {
	if x != nil {
		return x.FinishDifficultLevelList
	}
	return nil
}

func (x *MechanicusBin) GetPunishOverTime() uint32 {
	if x != nil {
		return x.PunishOverTime
	}
	return 0
}

type PlayerMechanicusCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurMechanicusBin *MechanicusBin `protobuf:"bytes,1,opt,name=cur_mechanicus_bin,json=curMechanicusBin,proto3" json:"cur_mechanicus_bin,omitempty"`
}

func (x *PlayerMechanicusCompBin) Reset() {
	*x = PlayerMechanicusCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[435]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMechanicusCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMechanicusCompBin) ProtoMessage() {}

func (x *PlayerMechanicusCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[435]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMechanicusCompBin.ProtoReflect.Descriptor instead.
func (*PlayerMechanicusCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{435}
}

func (x *PlayerMechanicusCompBin) GetCurMechanicusBin() *MechanicusBin {
	if x != nil {
		return x.CurMechanicusBin
	}
	return nil
}

type OpActivityRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId      uint32 `protobuf:"varint,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	UseBonusCount   uint32 `protobuf:"varint,2,opt,name=use_bonus_count,json=useBonusCount,proto3" json:"use_bonus_count,omitempty"`
	LastRefreshTime uint32 `protobuf:"varint,3,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
}

func (x *OpActivityRecordBin) Reset() {
	*x = OpActivityRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[436]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpActivityRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpActivityRecordBin) ProtoMessage() {}

func (x *OpActivityRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[436]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpActivityRecordBin.ProtoReflect.Descriptor instead.
func (*OpActivityRecordBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{436}
}

func (x *OpActivityRecordBin) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *OpActivityRecordBin) GetUseBonusCount() uint32 {
	if x != nil {
		return x.UseBonusCount
	}
	return 0
}

func (x *OpActivityRecordBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

type PlayerOpActivityCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpActivityRecoredList []*OpActivityRecordBin `protobuf:"bytes,1,rep,name=op_activity_recored_list,json=opActivityRecoredList,proto3" json:"op_activity_recored_list,omitempty"`
}

func (x *PlayerOpActivityCompBin) Reset() {
	*x = PlayerOpActivityCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[437]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerOpActivityCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerOpActivityCompBin) ProtoMessage() {}

func (x *PlayerOpActivityCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[437]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerOpActivityCompBin.ProtoReflect.Descriptor instead.
func (*PlayerOpActivityCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{437}
}

func (x *PlayerOpActivityCompBin) GetOpActivityRecoredList() []*OpActivityRecordBin {
	if x != nil {
		return x.OpActivityRecoredList
	}
	return nil
}

type PlayerGalleryCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidGalleryIdList []uint32 `protobuf:"varint,1,rep,packed,name=valid_gallery_id_list,json=validGalleryIdList,proto3" json:"valid_gallery_id_list,omitempty"`
}

func (x *PlayerGalleryCompBin) Reset() {
	*x = PlayerGalleryCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[438]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGalleryCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGalleryCompBin) ProtoMessage() {}

func (x *PlayerGalleryCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[438]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGalleryCompBin.ProtoReflect.Descriptor instead.
func (*PlayerGalleryCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{438}
}

func (x *PlayerGalleryCompBin) GetValidGalleryIdList() []uint32 {
	if x != nil {
		return x.ValidGalleryIdList
	}
	return nil
}

type RegionSearchSourceBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Param uint32 `protobuf:"varint,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *RegionSearchSourceBin) Reset() {
	*x = RegionSearchSourceBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[439]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionSearchSourceBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionSearchSourceBin) ProtoMessage() {}

func (x *RegionSearchSourceBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[439]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionSearchSourceBin.ProtoReflect.Descriptor instead.
func (*RegionSearchSourceBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{439}
}

func (x *RegionSearchSourceBin) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RegionSearchSourceBin) GetParam() uint32 {
	if x != nil {
		return x.Param
	}
	return 0
}

type RegionSearchRegionBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId         uint32   `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	OneoffGroupList  []uint32 `protobuf:"varint,2,rep,packed,name=oneoff_group_list,json=oneoffGroupList,proto3" json:"oneoff_group_list,omitempty"`
	RecycleGroupList []uint32 `protobuf:"varint,3,rep,packed,name=recycle_group_list,json=recycleGroupList,proto3" json:"recycle_group_list,omitempty"`
	RecycleProgress  uint32   `protobuf:"varint,4,opt,name=recycle_progress,json=recycleProgress,proto3" json:"recycle_progress,omitempty"`
}

func (x *RegionSearchRegionBin) Reset() {
	*x = RegionSearchRegionBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[440]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionSearchRegionBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionSearchRegionBin) ProtoMessage() {}

func (x *RegionSearchRegionBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[440]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionSearchRegionBin.ProtoReflect.Descriptor instead.
func (*RegionSearchRegionBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{440}
}

func (x *RegionSearchRegionBin) GetRegionId() uint32 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *RegionSearchRegionBin) GetOneoffGroupList() []uint32 {
	if x != nil {
		return x.OneoffGroupList
	}
	return nil
}

func (x *RegionSearchRegionBin) GetRecycleGroupList() []uint32 {
	if x != nil {
		return x.RecycleGroupList
	}
	return nil
}

func (x *RegionSearchRegionBin) GetRecycleProgress() uint32 {
	if x != nil {
		return x.RecycleProgress
	}
	return 0
}

type RegionSearchBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchId   uint32                   `protobuf:"varint,1,opt,name=search_id,json=searchId,proto3" json:"search_id,omitempty"`
	State      uint32                   `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Progress   uint32                   `protobuf:"varint,3,opt,name=progress,proto3" json:"progress,omitempty"`
	RegionList []*RegionSearchRegionBin `protobuf:"bytes,4,rep,name=region_list,json=regionList,proto3" json:"region_list,omitempty"`
	IsEntered  bool                     `protobuf:"varint,5,opt,name=is_entered,json=isEntered,proto3" json:"is_entered,omitempty"`
}

func (x *RegionSearchBin) Reset() {
	*x = RegionSearchBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[441]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionSearchBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionSearchBin) ProtoMessage() {}

func (x *RegionSearchBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[441]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionSearchBin.ProtoReflect.Descriptor instead.
func (*RegionSearchBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{441}
}

func (x *RegionSearchBin) GetSearchId() uint32 {
	if x != nil {
		return x.SearchId
	}
	return 0
}

func (x *RegionSearchBin) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *RegionSearchBin) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *RegionSearchBin) GetRegionList() []*RegionSearchRegionBin {
	if x != nil {
		return x.RegionList
	}
	return nil
}

func (x *RegionSearchBin) GetIsEntered() bool {
	if x != nil {
		return x.IsEntered
	}
	return false
}

type RegionSearchPlayBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Source     *RegionSearchSourceBin `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	SearchList []*RegionSearchBin     `protobuf:"bytes,3,rep,name=search_list,json=searchList,proto3" json:"search_list,omitempty"`
	IsEntered  bool                   `protobuf:"varint,4,opt,name=is_entered,json=isEntered,proto3" json:"is_entered,omitempty"`
}

func (x *RegionSearchPlayBin) Reset() {
	*x = RegionSearchPlayBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[442]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionSearchPlayBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionSearchPlayBin) ProtoMessage() {}

func (x *RegionSearchPlayBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[442]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionSearchPlayBin.ProtoReflect.Descriptor instead.
func (*RegionSearchPlayBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{442}
}

func (x *RegionSearchPlayBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RegionSearchPlayBin) GetSource() *RegionSearchSourceBin {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *RegionSearchPlayBin) GetSearchList() []*RegionSearchBin {
	if x != nil {
		return x.SearchList
	}
	return nil
}

func (x *RegionSearchPlayBin) GetIsEntered() bool {
	if x != nil {
		return x.IsEntered
	}
	return false
}

type PlayerRegionSearchCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayList []*RegionSearchPlayBin `protobuf:"bytes,1,rep,name=play_list,json=playList,proto3" json:"play_list,omitempty"`
}

func (x *PlayerRegionSearchCompBin) Reset() {
	*x = PlayerRegionSearchCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[443]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRegionSearchCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRegionSearchCompBin) ProtoMessage() {}

func (x *PlayerRegionSearchCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[443]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRegionSearchCompBin.ProtoReflect.Descriptor instead.
func (*PlayerRegionSearchCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{443}
}

func (x *PlayerRegionSearchCompBin) GetPlayList() []*RegionSearchPlayBin {
	if x != nil {
		return x.PlayList
	}
	return nil
}

type PlayerTalkCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NpcFisrtMetIdList  []uint32 `protobuf:"varint,1,rep,packed,name=npc_fisrt_met_id_list,json=npcFisrtMetIdList,proto3" json:"npc_fisrt_met_id_list,omitempty"`
	FinishedTalkIdList []uint32 `protobuf:"varint,2,rep,packed,name=finished_talk_id_list,json=finishedTalkIdList,proto3" json:"finished_talk_id_list,omitempty"`
}

func (x *PlayerTalkCompBin) Reset() {
	*x = PlayerTalkCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[444]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerTalkCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerTalkCompBin) ProtoMessage() {}

func (x *PlayerTalkCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[444]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerTalkCompBin.ProtoReflect.Descriptor instead.
func (*PlayerTalkCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{444}
}

func (x *PlayerTalkCompBin) GetNpcFisrtMetIdList() []uint32 {
	if x != nil {
		return x.NpcFisrtMetIdList
	}
	return nil
}

func (x *PlayerTalkCompBin) GetFinishedTalkIdList() []uint32 {
	if x != nil {
		return x.FinishedTalkIdList
	}
	return nil
}

type PlayerFishingCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastFishRod uint32 `protobuf:"varint,1,opt,name=last_fish_rod,json=lastFishRod,proto3" json:"last_fish_rod,omitempty"`
}

func (x *PlayerFishingCompBin) Reset() {
	*x = PlayerFishingCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[445]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerFishingCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerFishingCompBin) ProtoMessage() {}

func (x *PlayerFishingCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[445]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerFishingCompBin.ProtoReflect.Descriptor instead.
func (*PlayerFishingCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{445}
}

func (x *PlayerFishingCompBin) GetLastFishRod() uint32 {
	if x != nil {
		return x.LastFishRod
	}
	return 0
}

type CustomDungeonBriefBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonGuid   uint64                    `protobuf:"varint,1,opt,name=dungeon_guid,json=dungeonGuid,proto3" json:"dungeon_guid,omitempty"`
	DungeonId     uint32                    `protobuf:"varint,2,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	State         uint32                    `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	LastSaveTime  uint32                    `protobuf:"varint,4,opt,name=last_save_time,json=lastSaveTime,proto3" json:"last_save_time,omitempty"`
	Setting       *CustomDungeonSettingBin  `protobuf:"bytes,5,opt,name=setting,proto3" json:"setting,omitempty"`
	Abstract      *CustomDungeonAbstractBin `protobuf:"bytes,6,opt,name=abstract,proto3" json:"abstract,omitempty"`
	TagList       []uint32                  `protobuf:"varint,7,rep,packed,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty"`
	IsPsnPlatform bool                      `protobuf:"varint,8,opt,name=is_psn_platform,json=isPsnPlatform,proto3" json:"is_psn_platform,omitempty"`
}

func (x *CustomDungeonBriefBin) Reset() {
	*x = CustomDungeonBriefBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[446]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDungeonBriefBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDungeonBriefBin) ProtoMessage() {}

func (x *CustomDungeonBriefBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[446]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDungeonBriefBin.ProtoReflect.Descriptor instead.
func (*CustomDungeonBriefBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{446}
}

func (x *CustomDungeonBriefBin) GetDungeonGuid() uint64 {
	if x != nil {
		return x.DungeonGuid
	}
	return 0
}

func (x *CustomDungeonBriefBin) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *CustomDungeonBriefBin) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *CustomDungeonBriefBin) GetLastSaveTime() uint32 {
	if x != nil {
		return x.LastSaveTime
	}
	return 0
}

func (x *CustomDungeonBriefBin) GetSetting() *CustomDungeonSettingBin {
	if x != nil {
		return x.Setting
	}
	return nil
}

func (x *CustomDungeonBriefBin) GetAbstract() *CustomDungeonAbstractBin {
	if x != nil {
		return x.Abstract
	}
	return nil
}

func (x *CustomDungeonBriefBin) GetTagList() []uint32 {
	if x != nil {
		return x.TagList
	}
	return nil
}

func (x *CustomDungeonBriefBin) GetIsPsnPlatform() bool {
	if x != nil {
		return x.IsPsnPlatform
	}
	return false
}

type OfficialCustomDungeonBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonId   uint32 `protobuf:"varint,1,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	WinTimes    uint32 `protobuf:"varint,2,opt,name=win_times,json=winTimes,proto3" json:"win_times,omitempty"`
	DungeonGuid uint64 `protobuf:"varint,3,opt,name=dungeon_guid,json=dungeonGuid,proto3" json:"dungeon_guid,omitempty"`
}

func (x *OfficialCustomDungeonBin) Reset() {
	*x = OfficialCustomDungeonBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[447]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfficialCustomDungeonBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficialCustomDungeonBin) ProtoMessage() {}

func (x *OfficialCustomDungeonBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[447]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficialCustomDungeonBin.ProtoReflect.Descriptor instead.
func (*OfficialCustomDungeonBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{447}
}

func (x *OfficialCustomDungeonBin) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *OfficialCustomDungeonBin) GetWinTimes() uint32 {
	if x != nil {
		return x.WinTimes
	}
	return 0
}

func (x *OfficialCustomDungeonBin) GetDungeonGuid() uint64 {
	if x != nil {
		return x.DungeonGuid
	}
	return 0
}

type CustomDungeonBattleRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonGuid uint64 `protobuf:"varint,1,opt,name=dungeon_guid,json=dungeonGuid,proto3" json:"dungeon_guid,omitempty"`
	MinCostTime uint32 `protobuf:"varint,2,opt,name=min_cost_time,json=minCostTime,proto3" json:"min_cost_time,omitempty"`
}

func (x *CustomDungeonBattleRecord) Reset() {
	*x = CustomDungeonBattleRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[448]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDungeonBattleRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDungeonBattleRecord) ProtoMessage() {}

func (x *CustomDungeonBattleRecord) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[448]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDungeonBattleRecord.ProtoReflect.Descriptor instead.
func (*CustomDungeonBattleRecord) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{448}
}

func (x *CustomDungeonBattleRecord) GetDungeonGuid() uint64 {
	if x != nil {
		return x.DungeonGuid
	}
	return 0
}

func (x *CustomDungeonBattleRecord) GetMinCostTime() uint32 {
	if x != nil {
		return x.MinCostTime
	}
	return 0
}

type PlayerCustomDungeonCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BriefList            []*CustomDungeonBriefBin     `protobuf:"bytes,1,rep,name=brief_list,json=briefList,proto3" json:"brief_list,omitempty"`
	DungeonGuidIdx       uint32                       `protobuf:"varint,2,opt,name=dungeon_guid_idx,json=dungeonGuidIdx,proto3" json:"dungeon_guid_idx,omitempty"`
	StoreDungeonList     []uint64                     `protobuf:"varint,3,rep,packed,name=store_dungeon_list,json=storeDungeonList,proto3" json:"store_dungeon_list,omitempty"`
	LastRecommendList    []uint64                     `protobuf:"varint,4,rep,packed,name=last_recommend_list,json=lastRecommendList,proto3" json:"last_recommend_list,omitempty"`
	GroupId              uint32                       `protobuf:"varint,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	OfficialDungeonList  []*OfficialCustomDungeonBin  `protobuf:"bytes,6,rep,name=official_dungeon_list,json=officialDungeonList,proto3" json:"official_dungeon_list,omitempty"`
	IsEnableUgc          bool                         `protobuf:"varint,7,opt,name=is_enable_ugc,json=isEnableUgc,proto3" json:"is_enable_ugc,omitempty"`
	BanExpireTime        uint32                       `protobuf:"varint,8,opt,name=ban_expire_time,json=banExpireTime,proto3" json:"ban_expire_time,omitempty"`
	BattleRecordList     []*CustomDungeonBattleRecord `protobuf:"bytes,9,rep,name=battle_record_list,json=battleRecordList,proto3" json:"battle_record_list,omitempty"`
	IsEverLiked          bool                         `protobuf:"varint,10,opt,name=is_ever_liked,json=isEverLiked,proto3" json:"is_ever_liked,omitempty"`
	LastGotRecommendTime uint32                       `protobuf:"varint,11,opt,name=last_got_recommend_time,json=lastGotRecommendTime,proto3" json:"last_got_recommend_time,omitempty"`
}

func (x *PlayerCustomDungeonCompBin) Reset() {
	*x = PlayerCustomDungeonCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[449]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerCustomDungeonCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerCustomDungeonCompBin) ProtoMessage() {}

func (x *PlayerCustomDungeonCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[449]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerCustomDungeonCompBin.ProtoReflect.Descriptor instead.
func (*PlayerCustomDungeonCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{449}
}

func (x *PlayerCustomDungeonCompBin) GetBriefList() []*CustomDungeonBriefBin {
	if x != nil {
		return x.BriefList
	}
	return nil
}

func (x *PlayerCustomDungeonCompBin) GetDungeonGuidIdx() uint32 {
	if x != nil {
		return x.DungeonGuidIdx
	}
	return 0
}

func (x *PlayerCustomDungeonCompBin) GetStoreDungeonList() []uint64 {
	if x != nil {
		return x.StoreDungeonList
	}
	return nil
}

func (x *PlayerCustomDungeonCompBin) GetLastRecommendList() []uint64 {
	if x != nil {
		return x.LastRecommendList
	}
	return nil
}

func (x *PlayerCustomDungeonCompBin) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *PlayerCustomDungeonCompBin) GetOfficialDungeonList() []*OfficialCustomDungeonBin {
	if x != nil {
		return x.OfficialDungeonList
	}
	return nil
}

func (x *PlayerCustomDungeonCompBin) GetIsEnableUgc() bool {
	if x != nil {
		return x.IsEnableUgc
	}
	return false
}

func (x *PlayerCustomDungeonCompBin) GetBanExpireTime() uint32 {
	if x != nil {
		return x.BanExpireTime
	}
	return 0
}

func (x *PlayerCustomDungeonCompBin) GetBattleRecordList() []*CustomDungeonBattleRecord {
	if x != nil {
		return x.BattleRecordList
	}
	return nil
}

func (x *PlayerCustomDungeonCompBin) GetIsEverLiked() bool {
	if x != nil {
		return x.IsEverLiked
	}
	return false
}

func (x *PlayerCustomDungeonCompBin) GetLastGotRecommendTime() uint32 {
	if x != nil {
		return x.LastGotRecommendTime
	}
	return 0
}

type UgcBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UgcBin) Reset() {
	*x = UgcBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[450]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UgcBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UgcBin) ProtoMessage() {}

func (x *UgcBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[450]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UgcBin.ProtoReflect.Descriptor instead.
func (*UgcBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{450}
}

type PlayerUgcCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UgcBinMap            map[uint32]*UgcBin `protobuf:"bytes,1,rep,name=ugc_bin_map,json=ugcBinMap,proto3" json:"ugc_bin_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BanPublishExpireTime uint32             `protobuf:"varint,2,opt,name=ban_publish_expire_time,json=banPublishExpireTime,proto3" json:"ban_publish_expire_time,omitempty"`
}

func (x *PlayerUgcCompBin) Reset() {
	*x = PlayerUgcCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[451]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerUgcCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerUgcCompBin) ProtoMessage() {}

func (x *PlayerUgcCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[451]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerUgcCompBin.ProtoReflect.Descriptor instead.
func (*PlayerUgcCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{451}
}

func (x *PlayerUgcCompBin) GetUgcBinMap() map[uint32]*UgcBin {
	if x != nil {
		return x.UgcBinMap
	}
	return nil
}

func (x *PlayerUgcCompBin) GetBanPublishExpireTime() uint32 {
	if x != nil {
		return x.BanPublishExpireTime
	}
	return 0
}

type PlayerHomeBlockBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId              uint32 `protobuf:"varint,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	IsUnlocked           bool   `protobuf:"varint,2,opt,name=is_unlocked,json=isUnlocked,proto3" json:"is_unlocked,omitempty"`
	DeployFurnitureCount uint32 `protobuf:"varint,3,opt,name=deploy_furniture_count,json=deployFurnitureCount,proto3" json:"deploy_furniture_count,omitempty"`
}

func (x *PlayerHomeBlockBin) Reset() {
	*x = PlayerHomeBlockBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[452]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerHomeBlockBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerHomeBlockBin) ProtoMessage() {}

func (x *PlayerHomeBlockBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[452]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerHomeBlockBin.ProtoReflect.Descriptor instead.
func (*PlayerHomeBlockBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{452}
}

func (x *PlayerHomeBlockBin) GetBlockId() uint32 {
	if x != nil {
		return x.BlockId
	}
	return 0
}

func (x *PlayerHomeBlockBin) GetIsUnlocked() bool {
	if x != nil {
		return x.IsUnlocked
	}
	return false
}

func (x *PlayerHomeBlockBin) GetDeployFurnitureCount() uint32 {
	if x != nil {
		return x.DeployFurnitureCount
	}
	return 0
}

type PlayerHomeSceneBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId      uint32                `protobuf:"varint,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	BlockBinList []*PlayerHomeBlockBin `protobuf:"bytes,2,rep,name=block_bin_list,json=blockBinList,proto3" json:"block_bin_list,omitempty"`
	IsUnlocked   bool                  `protobuf:"varint,3,opt,name=is_unlocked,json=isUnlocked,proto3" json:"is_unlocked,omitempty"`
	Version      uint32                `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	AuditState   uint32                `protobuf:"varint,5,opt,name=audit_state,json=auditState,proto3" json:"audit_state,omitempty"`
	SubmitTime   uint32                `protobuf:"varint,6,opt,name=submit_time,json=submitTime,proto3" json:"submit_time,omitempty"`
}

func (x *PlayerHomeSceneBin) Reset() {
	*x = PlayerHomeSceneBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[453]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerHomeSceneBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerHomeSceneBin) ProtoMessage() {}

func (x *PlayerHomeSceneBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[453]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerHomeSceneBin.ProtoReflect.Descriptor instead.
func (*PlayerHomeSceneBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{453}
}

func (x *PlayerHomeSceneBin) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *PlayerHomeSceneBin) GetBlockBinList() []*PlayerHomeBlockBin {
	if x != nil {
		return x.BlockBinList
	}
	return nil
}

func (x *PlayerHomeSceneBin) GetIsUnlocked() bool {
	if x != nil {
		return x.IsUnlocked
	}
	return false
}

func (x *PlayerHomeSceneBin) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PlayerHomeSceneBin) GetAuditState() uint32 {
	if x != nil {
		return x.AuditState
	}
	return 0
}

func (x *PlayerHomeSceneBin) GetSubmitTime() uint32 {
	if x != nil {
		return x.SubmitTime
	}
	return 0
}

type PlayerHomeModuleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleId     uint32                `protobuf:"varint,1,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	SceneBinList []*PlayerHomeSceneBin `protobuf:"bytes,2,rep,name=scene_bin_list,json=sceneBinList,proto3" json:"scene_bin_list,omitempty"`
}

func (x *PlayerHomeModuleBin) Reset() {
	*x = PlayerHomeModuleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[454]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerHomeModuleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerHomeModuleBin) ProtoMessage() {}

func (x *PlayerHomeModuleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[454]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerHomeModuleBin.ProtoReflect.Descriptor instead.
func (*PlayerHomeModuleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{454}
}

func (x *PlayerHomeModuleBin) GetModuleId() uint32 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

func (x *PlayerHomeModuleBin) GetSceneBinList() []*PlayerHomeSceneBin {
	if x != nil {
		return x.SceneBinList
	}
	return nil
}

type HomeBasicCompSnapshotBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level uint32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Exp   uint64 `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
}

func (x *HomeBasicCompSnapshotBin) Reset() {
	*x = HomeBasicCompSnapshotBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[455]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeBasicCompSnapshotBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeBasicCompSnapshotBin) ProtoMessage() {}

func (x *HomeBasicCompSnapshotBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[455]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeBasicCompSnapshotBin.ProtoReflect.Descriptor instead.
func (*HomeBasicCompSnapshotBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{455}
}

func (x *HomeBasicCompSnapshotBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *HomeBasicCompSnapshotBin) GetExp() uint64 {
	if x != nil {
		return x.Exp
	}
	return 0
}

type HomeSubFieldSnapShotBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeedId       uint32 `protobuf:"varint,1,opt,name=seed_id,json=seedId,proto3" json:"seed_id,omitempty"`
	EndTime      uint32 `protobuf:"fixed32,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	HomeGatherId uint32 `protobuf:"varint,3,opt,name=home_gather_id,json=homeGatherId,proto3" json:"home_gather_id,omitempty"`
}

func (x *HomeSubFieldSnapShotBin) Reset() {
	*x = HomeSubFieldSnapShotBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[456]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeSubFieldSnapShotBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeSubFieldSnapShotBin) ProtoMessage() {}

func (x *HomeSubFieldSnapShotBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[456]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeSubFieldSnapShotBin.ProtoReflect.Descriptor instead.
func (*HomeSubFieldSnapShotBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{456}
}

func (x *HomeSubFieldSnapShotBin) GetSeedId() uint32 {
	if x != nil {
		return x.SeedId
	}
	return 0
}

func (x *HomeSubFieldSnapShotBin) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *HomeSubFieldSnapShotBin) GetHomeGatherId() uint32 {
	if x != nil {
		return x.HomeGatherId
	}
	return 0
}

type HomeFieldSnapShotBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldGuid    uint32                     `protobuf:"varint,1,opt,name=field_guid,json=fieldGuid,proto3" json:"field_guid,omitempty"`
	FurnitureId  uint32                     `protobuf:"varint,2,opt,name=furniture_id,json=furnitureId,proto3" json:"furniture_id,omitempty"`
	SpawnPos     *VectorBin                 `protobuf:"bytes,3,opt,name=spawn_pos,json=spawnPos,proto3" json:"spawn_pos,omitempty"`
	SubFieldList []*HomeSubFieldSnapShotBin `protobuf:"bytes,4,rep,name=sub_field_list,json=subFieldList,proto3" json:"sub_field_list,omitempty"`
}

func (x *HomeFieldSnapShotBin) Reset() {
	*x = HomeFieldSnapShotBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[457]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeFieldSnapShotBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeFieldSnapShotBin) ProtoMessage() {}

func (x *HomeFieldSnapShotBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[457]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeFieldSnapShotBin.ProtoReflect.Descriptor instead.
func (*HomeFieldSnapShotBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{457}
}

func (x *HomeFieldSnapShotBin) GetFieldGuid() uint32 {
	if x != nil {
		return x.FieldGuid
	}
	return 0
}

func (x *HomeFieldSnapShotBin) GetFurnitureId() uint32 {
	if x != nil {
		return x.FurnitureId
	}
	return 0
}

func (x *HomeFieldSnapShotBin) GetSpawnPos() *VectorBin {
	if x != nil {
		return x.SpawnPos
	}
	return nil
}

func (x *HomeFieldSnapShotBin) GetSubFieldList() []*HomeSubFieldSnapShotBin {
	if x != nil {
		return x.SubFieldList
	}
	return nil
}

type HomeTransferSnapShotBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FurnitureGuid uint32     `protobuf:"varint,1,opt,name=furniture_guid,json=furnitureGuid,proto3" json:"furniture_guid,omitempty"`
	SpawnPos      *VectorBin `protobuf:"bytes,2,opt,name=spawn_pos,json=spawnPos,proto3" json:"spawn_pos,omitempty"`
	FurnitureId   uint32     `protobuf:"varint,3,opt,name=furniture_id,json=furnitureId,proto3" json:"furniture_id,omitempty"`
}

func (x *HomeTransferSnapShotBin) Reset() {
	*x = HomeTransferSnapShotBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[458]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeTransferSnapShotBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeTransferSnapShotBin) ProtoMessage() {}

func (x *HomeTransferSnapShotBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[458]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeTransferSnapShotBin.ProtoReflect.Descriptor instead.
func (*HomeTransferSnapShotBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{458}
}

func (x *HomeTransferSnapShotBin) GetFurnitureGuid() uint32 {
	if x != nil {
		return x.FurnitureGuid
	}
	return 0
}

func (x *HomeTransferSnapShotBin) GetSpawnPos() *VectorBin {
	if x != nil {
		return x.SpawnPos
	}
	return nil
}

func (x *HomeTransferSnapShotBin) GetFurnitureId() uint32 {
	if x != nil {
		return x.FurnitureId
	}
	return 0
}

type HomeMarkPointNPCDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId  uint32 `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	CostumeId uint32 `protobuf:"varint,2,opt,name=costume_id,json=costumeId,proto3" json:"costume_id,omitempty"`
}

func (x *HomeMarkPointNPCDataBin) Reset() {
	*x = HomeMarkPointNPCDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[459]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeMarkPointNPCDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeMarkPointNPCDataBin) ProtoMessage() {}

func (x *HomeMarkPointNPCDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[459]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeMarkPointNPCDataBin.ProtoReflect.Descriptor instead.
func (*HomeMarkPointNPCDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{459}
}

func (x *HomeMarkPointNPCDataBin) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *HomeMarkPointNPCDataBin) GetCostumeId() uint32 {
	if x != nil {
		return x.CostumeId
	}
	return 0
}

type HomeMarkPointSuiteDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuiteId uint32 `protobuf:"varint,1,opt,name=suite_id,json=suiteId,proto3" json:"suite_id,omitempty"`
}

func (x *HomeMarkPointSuiteDataBin) Reset() {
	*x = HomeMarkPointSuiteDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[460]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeMarkPointSuiteDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeMarkPointSuiteDataBin) ProtoMessage() {}

func (x *HomeMarkPointSuiteDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[460]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeMarkPointSuiteDataBin.ProtoReflect.Descriptor instead.
func (*HomeMarkPointSuiteDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{460}
}

func (x *HomeMarkPointSuiteDataBin) GetSuiteId() uint32 {
	if x != nil {
		return x.SuiteId
	}
	return 0
}

type HomeMarkPointFurnitureDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid          uint32     `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	FurnitureId   uint32     `protobuf:"varint,2,opt,name=furniture_id,json=furnitureId,proto3" json:"furniture_id,omitempty"`
	FurnitureType uint32     `protobuf:"varint,3,opt,name=furniture_type,json=furnitureType,proto3" json:"furniture_type,omitempty"`
	Pos           *VectorBin `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
	// Types that are assignable to Extra:
	//
	//	*HomeMarkPointFurnitureDataBin_NpcData
	//	*HomeMarkPointFurnitureDataBin_SuiteData
	Extra isHomeMarkPointFurnitureDataBin_Extra `protobuf_oneof:"extra"`
}

func (x *HomeMarkPointFurnitureDataBin) Reset() {
	*x = HomeMarkPointFurnitureDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[461]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeMarkPointFurnitureDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeMarkPointFurnitureDataBin) ProtoMessage() {}

func (x *HomeMarkPointFurnitureDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[461]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeMarkPointFurnitureDataBin.ProtoReflect.Descriptor instead.
func (*HomeMarkPointFurnitureDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{461}
}

func (x *HomeMarkPointFurnitureDataBin) GetGuid() uint32 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *HomeMarkPointFurnitureDataBin) GetFurnitureId() uint32 {
	if x != nil {
		return x.FurnitureId
	}
	return 0
}

func (x *HomeMarkPointFurnitureDataBin) GetFurnitureType() uint32 {
	if x != nil {
		return x.FurnitureType
	}
	return 0
}

func (x *HomeMarkPointFurnitureDataBin) GetPos() *VectorBin {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (m *HomeMarkPointFurnitureDataBin) GetExtra() isHomeMarkPointFurnitureDataBin_Extra {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (x *HomeMarkPointFurnitureDataBin) GetNpcData() *HomeMarkPointNPCDataBin {
	if x, ok := x.GetExtra().(*HomeMarkPointFurnitureDataBin_NpcData); ok {
		return x.NpcData
	}
	return nil
}

func (x *HomeMarkPointFurnitureDataBin) GetSuiteData() *HomeMarkPointSuiteDataBin {
	if x, ok := x.GetExtra().(*HomeMarkPointFurnitureDataBin_SuiteData); ok {
		return x.SuiteData
	}
	return nil
}

type isHomeMarkPointFurnitureDataBin_Extra interface {
	isHomeMarkPointFurnitureDataBin_Extra()
}

type HomeMarkPointFurnitureDataBin_NpcData struct {
	NpcData *HomeMarkPointNPCDataBin `protobuf:"bytes,6,opt,name=npc_data,json=npcData,proto3,oneof"`
}

type HomeMarkPointFurnitureDataBin_SuiteData struct {
	SuiteData *HomeMarkPointSuiteDataBin `protobuf:"bytes,7,opt,name=suite_data,json=suiteData,proto3,oneof"`
}

func (*HomeMarkPointFurnitureDataBin_NpcData) isHomeMarkPointFurnitureDataBin_Extra() {}

func (*HomeMarkPointFurnitureDataBin_SuiteData) isHomeMarkPointFurnitureDataBin_Extra() {}

type HomeSceneSnapshotBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId             uint32                           `protobuf:"varint,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	DeployNpcList       []*HomeNpcBin                    `protobuf:"bytes,2,rep,name=deploy_npc_list,json=deployNpcList,proto3" json:"deploy_npc_list,omitempty"`
	FurnitureSuiteList  []*HomeFurnitureSuiteBin         `protobuf:"bytes,3,rep,name=furniture_suite_list,json=furnitureSuiteList,proto3" json:"furniture_suite_list,omitempty"`
	MainHouse           *HomeFurnitureBin                `protobuf:"bytes,4,opt,name=main_house,json=mainHouse,proto3" json:"main_house,omitempty"`
	DjinnPos            *VectorBin                       `protobuf:"bytes,5,opt,name=djinn_pos,json=djinnPos,proto3" json:"djinn_pos,omitempty"`
	FieldBinList        []*HomeFieldSnapShotBin          `protobuf:"bytes,6,rep,name=field_bin_list,json=fieldBinList,proto3" json:"field_bin_list,omitempty"`
	TransferBinList     []*HomeTransferSnapShotBin       `protobuf:"bytes,7,rep,name=transfer_bin_list,json=transferBinList,proto3" json:"transfer_bin_list,omitempty"`
	NormalMarkPointList []*HomeMarkPointFurnitureDataBin `protobuf:"bytes,8,rep,name=normal_mark_point_list,json=normalMarkPointList,proto3" json:"normal_mark_point_list,omitempty"`
}

func (x *HomeSceneSnapshotBin) Reset() {
	*x = HomeSceneSnapshotBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[462]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeSceneSnapshotBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeSceneSnapshotBin) ProtoMessage() {}

func (x *HomeSceneSnapshotBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[462]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeSceneSnapshotBin.ProtoReflect.Descriptor instead.
func (*HomeSceneSnapshotBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{462}
}

func (x *HomeSceneSnapshotBin) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *HomeSceneSnapshotBin) GetDeployNpcList() []*HomeNpcBin {
	if x != nil {
		return x.DeployNpcList
	}
	return nil
}

func (x *HomeSceneSnapshotBin) GetFurnitureSuiteList() []*HomeFurnitureSuiteBin {
	if x != nil {
		return x.FurnitureSuiteList
	}
	return nil
}

func (x *HomeSceneSnapshotBin) GetMainHouse() *HomeFurnitureBin {
	if x != nil {
		return x.MainHouse
	}
	return nil
}

func (x *HomeSceneSnapshotBin) GetDjinnPos() *VectorBin {
	if x != nil {
		return x.DjinnPos
	}
	return nil
}

func (x *HomeSceneSnapshotBin) GetFieldBinList() []*HomeFieldSnapShotBin {
	if x != nil {
		return x.FieldBinList
	}
	return nil
}

func (x *HomeSceneSnapshotBin) GetTransferBinList() []*HomeTransferSnapShotBin {
	if x != nil {
		return x.TransferBinList
	}
	return nil
}

func (x *HomeSceneSnapshotBin) GetNormalMarkPointList() []*HomeMarkPointFurnitureDataBin {
	if x != nil {
		return x.NormalMarkPointList
	}
	return nil
}

type HomeModuleSnapshotBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleId                        uint32                  `protobuf:"varint,1,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	CurRoomSceneId                  uint32                  `protobuf:"varint,2,opt,name=cur_room_scene_id,json=curRoomSceneId,proto3" json:"cur_room_scene_id,omitempty"`
	SceneBinList                    []*HomeSceneSnapshotBin `protobuf:"bytes,3,rep,name=scene_bin_list,json=sceneBinList,proto3" json:"scene_bin_list,omitempty"`
	FurnitureArrangeCountList       []*Uint32PairBin        `protobuf:"bytes,4,rep,name=furniture_arrange_count_list,json=furnitureArrangeCountList,proto3" json:"furniture_arrange_count_list,omitempty"`
	WorldSceneBlockComfortValueList []uint32                `protobuf:"varint,5,rep,packed,name=world_scene_block_comfort_value_list,json=worldSceneBlockComfortValueList,proto3" json:"world_scene_block_comfort_value_list,omitempty"`
	RoomSceneComfortValue           uint32                  `protobuf:"varint,6,opt,name=room_scene_comfort_value,json=roomSceneComfortValue,proto3" json:"room_scene_comfort_value,omitempty"`
}

func (x *HomeModuleSnapshotBin) Reset() {
	*x = HomeModuleSnapshotBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[463]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeModuleSnapshotBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeModuleSnapshotBin) ProtoMessage() {}

func (x *HomeModuleSnapshotBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[463]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeModuleSnapshotBin.ProtoReflect.Descriptor instead.
func (*HomeModuleSnapshotBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{463}
}

func (x *HomeModuleSnapshotBin) GetModuleId() uint32 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

func (x *HomeModuleSnapshotBin) GetCurRoomSceneId() uint32 {
	if x != nil {
		return x.CurRoomSceneId
	}
	return 0
}

func (x *HomeModuleSnapshotBin) GetSceneBinList() []*HomeSceneSnapshotBin {
	if x != nil {
		return x.SceneBinList
	}
	return nil
}

func (x *HomeModuleSnapshotBin) GetFurnitureArrangeCountList() []*Uint32PairBin {
	if x != nil {
		return x.FurnitureArrangeCountList
	}
	return nil
}

func (x *HomeModuleSnapshotBin) GetWorldSceneBlockComfortValueList() []uint32 {
	if x != nil {
		return x.WorldSceneBlockComfortValueList
	}
	return nil
}

func (x *HomeModuleSnapshotBin) GetRoomSceneComfortValue() uint32 {
	if x != nil {
		return x.RoomSceneComfortValue
	}
	return 0
}

type HomeSceneCompSnapshotBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurModuleId   uint32                   `protobuf:"varint,1,opt,name=cur_module_id,json=curModuleId,proto3" json:"cur_module_id,omitempty"`
	ModuleBinList []*HomeModuleSnapshotBin `protobuf:"bytes,2,rep,name=module_bin_list,json=moduleBinList,proto3" json:"module_bin_list,omitempty"`
}

func (x *HomeSceneCompSnapshotBin) Reset() {
	*x = HomeSceneCompSnapshotBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[464]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeSceneCompSnapshotBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeSceneCompSnapshotBin) ProtoMessage() {}

func (x *HomeSceneCompSnapshotBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[464]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeSceneCompSnapshotBin.ProtoReflect.Descriptor instead.
func (*HomeSceneCompSnapshotBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{464}
}

func (x *HomeSceneCompSnapshotBin) GetCurModuleId() uint32 {
	if x != nil {
		return x.CurModuleId
	}
	return 0
}

func (x *HomeSceneCompSnapshotBin) GetModuleBinList() []*HomeModuleSnapshotBin {
	if x != nil {
		return x.ModuleBinList
	}
	return nil
}

type HomeSnapshotBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicSnapshot *HomeBasicCompSnapshotBin `protobuf:"bytes,1,opt,name=basic_snapshot,json=basicSnapshot,proto3" json:"basic_snapshot,omitempty"`
	SceneSnapshot *HomeSceneCompSnapshotBin `protobuf:"bytes,2,opt,name=scene_snapshot,json=sceneSnapshot,proto3" json:"scene_snapshot,omitempty"`
}

func (x *HomeSnapshotBin) Reset() {
	*x = HomeSnapshotBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[465]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeSnapshotBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeSnapshotBin) ProtoMessage() {}

func (x *HomeSnapshotBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[465]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeSnapshotBin.ProtoReflect.Descriptor instead.
func (*HomeSnapshotBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{465}
}

func (x *HomeSnapshotBin) GetBasicSnapshot() *HomeBasicCompSnapshotBin {
	if x != nil {
		return x.BasicSnapshot
	}
	return nil
}

func (x *HomeSnapshotBin) GetSceneSnapshot() *HomeSceneCompSnapshotBin {
	if x != nil {
		return x.SceneSnapshot
	}
	return nil
}

type FurnitureMakeBeHelpedBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerName        string             `protobuf:"bytes,1,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	Time              uint32             `protobuf:"fixed32,2,opt,name=time,proto3" json:"time,omitempty"`
	Uid               uint32             `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Icon              uint32             `protobuf:"varint,4,opt,name=icon,proto3" json:"icon,omitempty"`
	ProfilePictureBin *ProfilePictureBin `protobuf:"bytes,5,opt,name=profile_picture_bin,json=profilePictureBin,proto3" json:"profile_picture_bin,omitempty"`
}

func (x *FurnitureMakeBeHelpedBin) Reset() {
	*x = FurnitureMakeBeHelpedBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[466]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FurnitureMakeBeHelpedBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FurnitureMakeBeHelpedBin) ProtoMessage() {}

func (x *FurnitureMakeBeHelpedBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[466]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FurnitureMakeBeHelpedBin.ProtoReflect.Descriptor instead.
func (*FurnitureMakeBeHelpedBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{466}
}

func (x *FurnitureMakeBeHelpedBin) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *FurnitureMakeBeHelpedBin) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *FurnitureMakeBeHelpedBin) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FurnitureMakeBeHelpedBin) GetIcon() uint32 {
	if x != nil {
		return x.Icon
	}
	return 0
}

func (x *FurnitureMakeBeHelpedBin) GetProfilePictureBin() *ProfilePictureBin {
	if x != nil {
		return x.ProfilePictureBin
	}
	return nil
}

type FurnitureMakeHelpBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Times uint32 `protobuf:"varint,2,opt,name=times,proto3" json:"times,omitempty"`
}

func (x *FurnitureMakeHelpBin) Reset() {
	*x = FurnitureMakeHelpBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[467]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FurnitureMakeHelpBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FurnitureMakeHelpBin) ProtoMessage() {}

func (x *FurnitureMakeHelpBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[467]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FurnitureMakeHelpBin.ProtoReflect.Descriptor instead.
func (*FurnitureMakeHelpBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{467}
}

func (x *FurnitureMakeHelpBin) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FurnitureMakeHelpBin) GetTimes() uint32 {
	if x != nil {
		return x.Times
	}
	return 0
}

type FurnitureMakeTimesBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FurnitureId uint32 `protobuf:"varint,1,opt,name=furniture_id,json=furnitureId,proto3" json:"furniture_id,omitempty"`
	MakeTimes   uint32 `protobuf:"varint,2,opt,name=make_times,json=makeTimes,proto3" json:"make_times,omitempty"`
}

func (x *FurnitureMakeTimesBin) Reset() {
	*x = FurnitureMakeTimesBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[468]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FurnitureMakeTimesBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FurnitureMakeTimesBin) ProtoMessage() {}

func (x *FurnitureMakeTimesBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[468]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FurnitureMakeTimesBin.ProtoReflect.Descriptor instead.
func (*FurnitureMakeTimesBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{468}
}

func (x *FurnitureMakeTimesBin) GetFurnitureId() uint32 {
	if x != nil {
		return x.FurnitureId
	}
	return 0
}

func (x *FurnitureMakeTimesBin) GetMakeTimes() uint32 {
	if x != nil {
		return x.MakeTimes
	}
	return 0
}

type PlayerFunitureMakeBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MakeTimesBinList []*FurnitureMakeTimesBin    `protobuf:"bytes,1,rep,name=make_times_bin_list,json=makeTimesBinList,proto3" json:"make_times_bin_list,omitempty"`
	MakeSlotsBinList []*FurnitureMakeSlotsBin    `protobuf:"bytes,2,rep,name=make_slots_bin_list,json=makeSlotsBinList,proto3" json:"make_slots_bin_list,omitempty"`
	HelpBinList      []*FurnitureMakeHelpBin     `protobuf:"bytes,3,rep,name=help_bin_list,json=helpBinList,proto3" json:"help_bin_list,omitempty"`
	HelpedBinList    []*FurnitureMakeBeHelpedBin `protobuf:"bytes,4,rep,name=helped_bin_list,json=helpedBinList,proto3" json:"helped_bin_list,omitempty"`
}

func (x *PlayerFunitureMakeBin) Reset() {
	*x = PlayerFunitureMakeBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[469]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerFunitureMakeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerFunitureMakeBin) ProtoMessage() {}

func (x *PlayerFunitureMakeBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[469]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerFunitureMakeBin.ProtoReflect.Descriptor instead.
func (*PlayerFunitureMakeBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{469}
}

func (x *PlayerFunitureMakeBin) GetMakeTimesBinList() []*FurnitureMakeTimesBin {
	if x != nil {
		return x.MakeTimesBinList
	}
	return nil
}

func (x *PlayerFunitureMakeBin) GetMakeSlotsBinList() []*FurnitureMakeSlotsBin {
	if x != nil {
		return x.MakeSlotsBinList
	}
	return nil
}

func (x *PlayerFunitureMakeBin) GetHelpBinList() []*FurnitureMakeHelpBin {
	if x != nil {
		return x.HelpBinList
	}
	return nil
}

func (x *PlayerFunitureMakeBin) GetHelpedBinList() []*FurnitureMakeBeHelpedBin {
	if x != nil {
		return x.HelpedBinList
	}
	return nil
}

type PlayerLimitedShopNPCPosBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleId uint32 `protobuf:"varint,1,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	SceneId  uint32 `protobuf:"varint,4,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	BlockId  uint32 `protobuf:"varint,5,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Index    uint32 `protobuf:"varint,6,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *PlayerLimitedShopNPCPosBin) Reset() {
	*x = PlayerLimitedShopNPCPosBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[470]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerLimitedShopNPCPosBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerLimitedShopNPCPosBin) ProtoMessage() {}

func (x *PlayerLimitedShopNPCPosBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[470]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerLimitedShopNPCPosBin.ProtoReflect.Descriptor instead.
func (*PlayerLimitedShopNPCPosBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{470}
}

func (x *PlayerLimitedShopNPCPosBin) GetModuleId() uint32 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

func (x *PlayerLimitedShopNPCPosBin) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *PlayerLimitedShopNPCPosBin) GetBlockId() uint32 {
	if x != nil {
		return x.BlockId
	}
	return 0
}

func (x *PlayerLimitedShopNPCPosBin) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type PlayerHomeLimitedShopBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastRefreshTime uint32                        `protobuf:"varint,1,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	NpcPosBinList   []*PlayerLimitedShopNPCPosBin `protobuf:"bytes,2,rep,name=npc_pos_bin_list,json=npcPosBinList,proto3" json:"npc_pos_bin_list,omitempty"`
}

func (x *PlayerHomeLimitedShopBin) Reset() {
	*x = PlayerHomeLimitedShopBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[471]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerHomeLimitedShopBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerHomeLimitedShopBin) ProtoMessage() {}

func (x *PlayerHomeLimitedShopBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[471]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerHomeLimitedShopBin.ProtoReflect.Descriptor instead.
func (*PlayerHomeLimitedShopBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{471}
}

func (x *PlayerHomeLimitedShopBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

func (x *PlayerHomeLimitedShopBin) GetNpcPosBinList() []*PlayerLimitedShopNPCPosBin {
	if x != nil {
		return x.NpcPosBinList
	}
	return nil
}

type HomeResourceBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreValue      uint32 `protobuf:"varint,1,opt,name=store_value,json=storeValue,proto3" json:"store_value,omitempty"`
	LastRefreshTime uint32 `protobuf:"fixed32,2,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
}

func (x *HomeResourceBin) Reset() {
	*x = HomeResourceBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[472]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeResourceBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeResourceBin) ProtoMessage() {}

func (x *HomeResourceBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[472]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeResourceBin.ProtoReflect.Descriptor instead.
func (*HomeResourceBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{472}
}

func (x *HomeResourceBin) GetStoreValue() uint32 {
	if x != nil {
		return x.StoreValue
	}
	return 0
}

func (x *HomeResourceBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

type PlayerHomeResourceBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomeCoinBin  *HomeResourceBin `protobuf:"bytes,1,opt,name=home_coin_bin,json=homeCoinBin,proto3" json:"home_coin_bin,omitempty"`
	FetterExpBin *HomeResourceBin `protobuf:"bytes,2,opt,name=fetter_exp_bin,json=fetterExpBin,proto3" json:"fetter_exp_bin,omitempty"`
}

func (x *PlayerHomeResourceBin) Reset() {
	*x = PlayerHomeResourceBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[473]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerHomeResourceBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerHomeResourceBin) ProtoMessage() {}

func (x *PlayerHomeResourceBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[473]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerHomeResourceBin.ProtoReflect.Descriptor instead.
func (*PlayerHomeResourceBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{473}
}

func (x *PlayerHomeResourceBin) GetHomeCoinBin() *HomeResourceBin {
	if x != nil {
		return x.HomeCoinBin
	}
	return nil
}

func (x *PlayerHomeResourceBin) GetFetterExpBin() *HomeResourceBin {
	if x != nil {
		return x.FetterExpBin
	}
	return nil
}

type HomeAvatarDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId    uint32   `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	TalkIdList  []uint32 `protobuf:"varint,2,rep,packed,name=talk_id_list,json=talkIdList,proto3" json:"talk_id_list,omitempty"`
	EventIdList []uint32 `protobuf:"varint,3,rep,packed,name=event_id_list,json=eventIdList,proto3" json:"event_id_list,omitempty"`
}

func (x *HomeAvatarDataBin) Reset() {
	*x = HomeAvatarDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[474]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeAvatarDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeAvatarDataBin) ProtoMessage() {}

func (x *HomeAvatarDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[474]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeAvatarDataBin.ProtoReflect.Descriptor instead.
func (*HomeAvatarDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{474}
}

func (x *HomeAvatarDataBin) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *HomeAvatarDataBin) GetTalkIdList() []uint32 {
	if x != nil {
		return x.TalkIdList
	}
	return nil
}

func (x *HomeAvatarDataBin) GetEventIdList() []uint32 {
	if x != nil {
		return x.EventIdList
	}
	return nil
}

type HomeAvatarRewardEventBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order          uint32 `protobuf:"varint,1,opt,name=order,proto3" json:"order,omitempty"`
	EventId        uint32 `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	RandomPosition uint32 `protobuf:"varint,3,opt,name=random_position,json=randomPosition,proto3" json:"random_position,omitempty"`
	Guid           uint32 `protobuf:"varint,4,opt,name=guid,proto3" json:"guid,omitempty"`
}

func (x *HomeAvatarRewardEventBin) Reset() {
	*x = HomeAvatarRewardEventBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[475]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeAvatarRewardEventBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeAvatarRewardEventBin) ProtoMessage() {}

func (x *HomeAvatarRewardEventBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[475]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeAvatarRewardEventBin.ProtoReflect.Descriptor instead.
func (*HomeAvatarRewardEventBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{475}
}

func (x *HomeAvatarRewardEventBin) GetOrder() uint32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *HomeAvatarRewardEventBin) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *HomeAvatarRewardEventBin) GetRandomPosition() uint32 {
	if x != nil {
		return x.RandomPosition
	}
	return 0
}

func (x *HomeAvatarRewardEventBin) GetGuid() uint32 {
	if x != nil {
		return x.Guid
	}
	return 0
}

type PlayerHomeAvatarBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomeAvatarList   []*HomeAvatarDataBin        `protobuf:"bytes,1,rep,name=home_avatar_list,json=homeAvatarList,proto3" json:"home_avatar_list,omitempty"`
	ShowAvatarIdList []uint32                    `protobuf:"varint,2,rep,packed,name=show_avatar_id_list,json=showAvatarIdList,proto3" json:"show_avatar_id_list,omitempty"`
	RewardEventList  []*HomeAvatarRewardEventBin `protobuf:"bytes,3,rep,name=reward_event_list,json=rewardEventList,proto3" json:"reward_event_list,omitempty"`
}

func (x *PlayerHomeAvatarBin) Reset() {
	*x = PlayerHomeAvatarBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[476]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerHomeAvatarBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerHomeAvatarBin) ProtoMessage() {}

func (x *PlayerHomeAvatarBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[476]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerHomeAvatarBin.ProtoReflect.Descriptor instead.
func (*PlayerHomeAvatarBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{476}
}

func (x *PlayerHomeAvatarBin) GetHomeAvatarList() []*HomeAvatarDataBin {
	if x != nil {
		return x.HomeAvatarList
	}
	return nil
}

func (x *PlayerHomeAvatarBin) GetShowAvatarIdList() []uint32 {
	if x != nil {
		return x.ShowAvatarIdList
	}
	return nil
}

func (x *PlayerHomeAvatarBin) GetRewardEventList() []*HomeAvatarRewardEventBin {
	if x != nil {
		return x.RewardEventList
	}
	return nil
}

type HomeWorldWoodExchangeDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WoodId          uint32 `protobuf:"varint,1,opt,name=wood_id,json=woodId,proto3" json:"wood_id,omitempty"`
	ExchangeCount   uint32 `protobuf:"varint,2,opt,name=exchange_count,json=exchangeCount,proto3" json:"exchange_count,omitempty"`
	LastRefreshTime uint32 `protobuf:"fixed32,3,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
}

func (x *HomeWorldWoodExchangeDataBin) Reset() {
	*x = HomeWorldWoodExchangeDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[477]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeWorldWoodExchangeDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeWorldWoodExchangeDataBin) ProtoMessage() {}

func (x *HomeWorldWoodExchangeDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[477]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeWorldWoodExchangeDataBin.ProtoReflect.Descriptor instead.
func (*HomeWorldWoodExchangeDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{477}
}

func (x *HomeWorldWoodExchangeDataBin) GetWoodId() uint32 {
	if x != nil {
		return x.WoodId
	}
	return 0
}

func (x *HomeWorldWoodExchangeDataBin) GetExchangeCount() uint32 {
	if x != nil {
		return x.ExchangeCount
	}
	return 0
}

func (x *HomeWorldWoodExchangeDataBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

type PlayerHomeBlueprintSlotBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId    uint32 `protobuf:"varint,1,opt,name=slot_id,json=slotId,proto3" json:"slot_id,omitempty"`
	ShareCode string `protobuf:"bytes,2,opt,name=share_code,json=shareCode,proto3" json:"share_code,omitempty"`
}

func (x *PlayerHomeBlueprintSlotBin) Reset() {
	*x = PlayerHomeBlueprintSlotBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[478]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerHomeBlueprintSlotBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerHomeBlueprintSlotBin) ProtoMessage() {}

func (x *PlayerHomeBlueprintSlotBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[478]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerHomeBlueprintSlotBin.ProtoReflect.Descriptor instead.
func (*PlayerHomeBlueprintSlotBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{478}
}

func (x *PlayerHomeBlueprintSlotBin) GetSlotId() uint32 {
	if x != nil {
		return x.SlotId
	}
	return 0
}

func (x *PlayerHomeBlueprintSlotBin) GetShareCode() string {
	if x != nil {
		return x.ShareCode
	}
	return ""
}

type PlayerHomeBlueprintBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlueprintGuidIdx uint32                        `protobuf:"varint,1,opt,name=blueprint_guid_idx,json=blueprintGuidIdx,proto3" json:"blueprint_guid_idx,omitempty"`
	SlotBinList      []*PlayerHomeBlueprintSlotBin `protobuf:"bytes,2,rep,name=slot_bin_list,json=slotBinList,proto3" json:"slot_bin_list,omitempty"`
}

func (x *PlayerHomeBlueprintBin) Reset() {
	*x = PlayerHomeBlueprintBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[479]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerHomeBlueprintBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerHomeBlueprintBin) ProtoMessage() {}

func (x *PlayerHomeBlueprintBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[479]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerHomeBlueprintBin.ProtoReflect.Descriptor instead.
func (*PlayerHomeBlueprintBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{479}
}

func (x *PlayerHomeBlueprintBin) GetBlueprintGuidIdx() uint32 {
	if x != nil {
		return x.BlueprintGuidIdx
	}
	return 0
}

func (x *PlayerHomeBlueprintBin) GetSlotBinList() []*PlayerHomeBlueprintSlotBin {
	if x != nil {
		return x.SlotBinList
	}
	return nil
}

type PlayerHomeCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendEnterHomeOption           int32                           `protobuf:"varint,1,opt,name=friend_enter_home_option,json=friendEnterHomeOption,proto3" json:"friend_enter_home_option,omitempty"`
	InitHomeModueId                 uint32                          `protobuf:"varint,2,opt,name=init_home_modue_id,json=initHomeModueId,proto3" json:"init_home_modue_id,omitempty"`
	ModuleList                      []*PlayerHomeModuleBin          `protobuf:"bytes,4,rep,name=module_list,json=moduleList,proto3" json:"module_list,omitempty"`
	UnlockedModuleIdList            []uint32                        `protobuf:"varint,5,rep,packed,name=unlocked_module_id_list,json=unlockedModuleIdList,proto3" json:"unlocked_module_id_list,omitempty"`
	Snapshot                        *HomeSnapshotBin                `protobuf:"bytes,6,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	UnlockedFormulaFurnitureIdList  []uint32                        `protobuf:"varint,7,rep,packed,name=unlocked_formula_furniture_id_list,json=unlockedFormulaFurnitureIdList,proto3" json:"unlocked_formula_furniture_id_list,omitempty"`
	UnlockedFurnitureSuiteIdList    []uint32                        `protobuf:"varint,8,rep,packed,name=unlocked_furniture_suite_id_list,json=unlockedFurnitureSuiteIdList,proto3" json:"unlocked_furniture_suite_id_list,omitempty"`
	LevelupRewardGotLevelList       []uint32                        `protobuf:"varint,9,rep,packed,name=levelup_reward_got_level_list,json=levelupRewardGotLevelList,proto3" json:"levelup_reward_got_level_list,omitempty"`
	FurnitureMakeBin                *PlayerFunitureMakeBin          `protobuf:"bytes,10,opt,name=furniture_make_bin,json=furnitureMakeBin,proto3" json:"furniture_make_bin,omitempty"`
	HomeResourceBin                 *PlayerHomeResourceBin          `protobuf:"bytes,11,opt,name=home_resource_bin,json=homeResourceBin,proto3" json:"home_resource_bin,omitempty"`
	ArrangementFurnitureSuiteIdList []uint32                        `protobuf:"varint,12,rep,packed,name=arrangement_furniture_suite_id_list,json=arrangementFurnitureSuiteIdList,proto3" json:"arrangement_furniture_suite_id_list,omitempty"`
	LimitedShopBin                  *PlayerHomeLimitedShopBin       `protobuf:"bytes,13,opt,name=limited_shop_bin,json=limitedShopBin,proto3" json:"limited_shop_bin,omitempty"`
	IsEverEnterSelfHomeWorld        bool                            `protobuf:"varint,14,opt,name=is_ever_enter_self_home_world,json=isEverEnterSelfHomeWorld,proto3" json:"is_ever_enter_self_home_world,omitempty"`
	HomeAvatarBin                   *PlayerHomeAvatarBin            `protobuf:"bytes,15,opt,name=home_avatar_bin,json=homeAvatarBin,proto3" json:"home_avatar_bin,omitempty"`
	LastSaveTime                    uint32                          `protobuf:"fixed32,16,opt,name=last_save_time,json=lastSaveTime,proto3" json:"last_save_time,omitempty"`
	PriorCheckTime                  uint32                          `protobuf:"varint,17,opt,name=prior_check_time,json=priorCheckTime,proto3" json:"prior_check_time,omitempty"`
	TransferHomePoint               uint32                          `protobuf:"varint,19,opt,name=transfer_home_point,json=transferHomePoint,proto3" json:"transfer_home_point,omitempty"`
	SeenModuleIdList                []uint32                        `protobuf:"varint,20,rep,packed,name=seen_module_id_list,json=seenModuleIdList,proto3" json:"seen_module_id_list,omitempty"`
	UnlockedBgmIdList               []uint32                        `protobuf:"varint,21,rep,packed,name=unlocked_bgm_id_list,json=unlockedBgmIdList,proto3" json:"unlocked_bgm_id_list,omitempty"`
	IsTransferToSafePoint           bool                            `protobuf:"varint,22,opt,name=is_transfer_to_safe_point,json=isTransferToSafePoint,proto3" json:"is_transfer_to_safe_point,omitempty"`
	AuditVersionIndex               uint32                          `protobuf:"varint,23,opt,name=audit_version_index,json=auditVersionIndex,proto3" json:"audit_version_index,omitempty"`
	WoodExchangeDataBinList         []*HomeWorldWoodExchangeDataBin `protobuf:"bytes,24,rep,name=wood_exchange_data_bin_list,json=woodExchangeDataBinList,proto3" json:"wood_exchange_data_bin_list,omitempty"`
	BlueprintBin                    *PlayerHomeBlueprintBin         `protobuf:"bytes,25,opt,name=blueprint_bin,json=blueprintBin,proto3" json:"blueprint_bin,omitempty"`
}

func (x *PlayerHomeCompBin) Reset() {
	*x = PlayerHomeCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[480]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerHomeCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerHomeCompBin) ProtoMessage() {}

func (x *PlayerHomeCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[480]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerHomeCompBin.ProtoReflect.Descriptor instead.
func (*PlayerHomeCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{480}
}

func (x *PlayerHomeCompBin) GetFriendEnterHomeOption() int32 {
	if x != nil {
		return x.FriendEnterHomeOption
	}
	return 0
}

func (x *PlayerHomeCompBin) GetInitHomeModueId() uint32 {
	if x != nil {
		return x.InitHomeModueId
	}
	return 0
}

func (x *PlayerHomeCompBin) GetModuleList() []*PlayerHomeModuleBin {
	if x != nil {
		return x.ModuleList
	}
	return nil
}

func (x *PlayerHomeCompBin) GetUnlockedModuleIdList() []uint32 {
	if x != nil {
		return x.UnlockedModuleIdList
	}
	return nil
}

func (x *PlayerHomeCompBin) GetSnapshot() *HomeSnapshotBin {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *PlayerHomeCompBin) GetUnlockedFormulaFurnitureIdList() []uint32 {
	if x != nil {
		return x.UnlockedFormulaFurnitureIdList
	}
	return nil
}

func (x *PlayerHomeCompBin) GetUnlockedFurnitureSuiteIdList() []uint32 {
	if x != nil {
		return x.UnlockedFurnitureSuiteIdList
	}
	return nil
}

func (x *PlayerHomeCompBin) GetLevelupRewardGotLevelList() []uint32 {
	if x != nil {
		return x.LevelupRewardGotLevelList
	}
	return nil
}

func (x *PlayerHomeCompBin) GetFurnitureMakeBin() *PlayerFunitureMakeBin {
	if x != nil {
		return x.FurnitureMakeBin
	}
	return nil
}

func (x *PlayerHomeCompBin) GetHomeResourceBin() *PlayerHomeResourceBin {
	if x != nil {
		return x.HomeResourceBin
	}
	return nil
}

func (x *PlayerHomeCompBin) GetArrangementFurnitureSuiteIdList() []uint32 {
	if x != nil {
		return x.ArrangementFurnitureSuiteIdList
	}
	return nil
}

func (x *PlayerHomeCompBin) GetLimitedShopBin() *PlayerHomeLimitedShopBin {
	if x != nil {
		return x.LimitedShopBin
	}
	return nil
}

func (x *PlayerHomeCompBin) GetIsEverEnterSelfHomeWorld() bool {
	if x != nil {
		return x.IsEverEnterSelfHomeWorld
	}
	return false
}

func (x *PlayerHomeCompBin) GetHomeAvatarBin() *PlayerHomeAvatarBin {
	if x != nil {
		return x.HomeAvatarBin
	}
	return nil
}

func (x *PlayerHomeCompBin) GetLastSaveTime() uint32 {
	if x != nil {
		return x.LastSaveTime
	}
	return 0
}

func (x *PlayerHomeCompBin) GetPriorCheckTime() uint32 {
	if x != nil {
		return x.PriorCheckTime
	}
	return 0
}

func (x *PlayerHomeCompBin) GetTransferHomePoint() uint32 {
	if x != nil {
		return x.TransferHomePoint
	}
	return 0
}

func (x *PlayerHomeCompBin) GetSeenModuleIdList() []uint32 {
	if x != nil {
		return x.SeenModuleIdList
	}
	return nil
}

func (x *PlayerHomeCompBin) GetUnlockedBgmIdList() []uint32 {
	if x != nil {
		return x.UnlockedBgmIdList
	}
	return nil
}

func (x *PlayerHomeCompBin) GetIsTransferToSafePoint() bool {
	if x != nil {
		return x.IsTransferToSafePoint
	}
	return false
}

func (x *PlayerHomeCompBin) GetAuditVersionIndex() uint32 {
	if x != nil {
		return x.AuditVersionIndex
	}
	return 0
}

func (x *PlayerHomeCompBin) GetWoodExchangeDataBinList() []*HomeWorldWoodExchangeDataBin {
	if x != nil {
		return x.WoodExchangeDataBinList
	}
	return nil
}

func (x *PlayerHomeCompBin) GetBlueprintBin() *PlayerHomeBlueprintBin {
	if x != nil {
		return x.BlueprintBin
	}
	return nil
}

type PlayerOfflineOpBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexMap map[uint32]uint32 `protobuf:"bytes,1,rep,name=index_map,json=indexMap,proto3" json:"index_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PlayerOfflineOpBin) Reset() {
	*x = PlayerOfflineOpBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[481]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerOfflineOpBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerOfflineOpBin) ProtoMessage() {}

func (x *PlayerOfflineOpBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[481]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerOfflineOpBin.ProtoReflect.Descriptor instead.
func (*PlayerOfflineOpBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{481}
}

func (x *PlayerOfflineOpBin) GetIndexMap() map[uint32]uint32 {
	if x != nil {
		return x.IndexMap
	}
	return nil
}

type H5ActivityWatcherBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	H5ActivityWatcherId uint32 `protobuf:"varint,1,opt,name=h5_activity_watcher_id,json=h5ActivityWatcherId,proto3" json:"h5_activity_watcher_id,omitempty"`
	Progress            uint32 `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *H5ActivityWatcherBin) Reset() {
	*x = H5ActivityWatcherBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[482]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *H5ActivityWatcherBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*H5ActivityWatcherBin) ProtoMessage() {}

func (x *H5ActivityWatcherBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[482]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use H5ActivityWatcherBin.ProtoReflect.Descriptor instead.
func (*H5ActivityWatcherBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{482}
}

func (x *H5ActivityWatcherBin) GetH5ActivityWatcherId() uint32 {
	if x != nil {
		return x.H5ActivityWatcherId
	}
	return 0
}

func (x *H5ActivityWatcherBin) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type H5ActivityBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	H5ActivityScheduleId          uint32                  `protobuf:"varint,1,opt,name=h5_activity_schedule_id,json=h5ActivityScheduleId,proto3" json:"h5_activity_schedule_id,omitempty"`
	LastRefreshTime               uint32                  `protobuf:"varint,2,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	FinishedH5ActivityWatcherList []uint32                `protobuf:"varint,3,rep,packed,name=finished_h5_activity_watcher_list,json=finishedH5ActivityWatcherList,proto3" json:"finished_h5_activity_watcher_list,omitempty"`
	H5ActivityWatcherList         []*H5ActivityWatcherBin `protobuf:"bytes,4,rep,name=h5_activity_watcher_list,json=h5ActivityWatcherList,proto3" json:"h5_activity_watcher_list,omitempty"`
	H5ActivityId                  uint32                  `protobuf:"varint,5,opt,name=h5_activity_id,json=h5ActivityId,proto3" json:"h5_activity_id,omitempty"`
	UnacceptH5ActivityWatcherList []uint32                `protobuf:"varint,6,rep,packed,name=unaccept_h5_activity_watcher_list,json=unacceptH5ActivityWatcherList,proto3" json:"unaccept_h5_activity_watcher_list,omitempty"`
	IsFinishWatcherLogged         bool                    `protobuf:"varint,7,opt,name=is_finish_watcher_logged,json=isFinishWatcherLogged,proto3" json:"is_finish_watcher_logged,omitempty"`
}

func (x *H5ActivityBin) Reset() {
	*x = H5ActivityBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[483]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *H5ActivityBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*H5ActivityBin) ProtoMessage() {}

func (x *H5ActivityBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[483]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use H5ActivityBin.ProtoReflect.Descriptor instead.
func (*H5ActivityBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{483}
}

func (x *H5ActivityBin) GetH5ActivityScheduleId() uint32 {
	if x != nil {
		return x.H5ActivityScheduleId
	}
	return 0
}

func (x *H5ActivityBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

func (x *H5ActivityBin) GetFinishedH5ActivityWatcherList() []uint32 {
	if x != nil {
		return x.FinishedH5ActivityWatcherList
	}
	return nil
}

func (x *H5ActivityBin) GetH5ActivityWatcherList() []*H5ActivityWatcherBin {
	if x != nil {
		return x.H5ActivityWatcherList
	}
	return nil
}

func (x *H5ActivityBin) GetH5ActivityId() uint32 {
	if x != nil {
		return x.H5ActivityId
	}
	return 0
}

func (x *H5ActivityBin) GetUnacceptH5ActivityWatcherList() []uint32 {
	if x != nil {
		return x.UnacceptH5ActivityWatcherList
	}
	return nil
}

func (x *H5ActivityBin) GetIsFinishWatcherLogged() bool {
	if x != nil {
		return x.IsFinishWatcherLogged
	}
	return false
}

type PlayerH5ActivityCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	H5ActivityList        []*H5ActivityBin `protobuf:"bytes,1,rep,name=h5_activity_list,json=h5ActivityList,proto3" json:"h5_activity_list,omitempty"`
	ClientRedDotTimestamp uint32           `protobuf:"fixed32,2,opt,name=client_red_dot_timestamp,json=clientRedDotTimestamp,proto3" json:"client_red_dot_timestamp,omitempty"`
}

func (x *PlayerH5ActivityCompBin) Reset() {
	*x = PlayerH5ActivityCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[484]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerH5ActivityCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerH5ActivityCompBin) ProtoMessage() {}

func (x *PlayerH5ActivityCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[484]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerH5ActivityCompBin.ProtoReflect.Descriptor instead.
func (*PlayerH5ActivityCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{484}
}

func (x *PlayerH5ActivityCompBin) GetH5ActivityList() []*H5ActivityBin {
	if x != nil {
		return x.H5ActivityList
	}
	return nil
}

func (x *PlayerH5ActivityCompBin) GetClientRedDotTimestamp() uint32 {
	if x != nil {
		return x.ClientRedDotTimestamp
	}
	return 0
}

type MatchPunishBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId       uint32 `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	PunishTimes   uint32 `protobuf:"varint,2,opt,name=punish_times,json=punishTimes,proto3" json:"punish_times,omitempty"`
	PunishEndTime uint32 `protobuf:"varint,3,opt,name=punish_end_time,json=punishEndTime,proto3" json:"punish_end_time,omitempty"`
}

func (x *MatchPunishBin) Reset() {
	*x = MatchPunishBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[485]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchPunishBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchPunishBin) ProtoMessage() {}

func (x *MatchPunishBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[485]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchPunishBin.ProtoReflect.Descriptor instead.
func (*MatchPunishBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{485}
}

func (x *MatchPunishBin) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *MatchPunishBin) GetPunishTimes() uint32 {
	if x != nil {
		return x.PunishTimes
	}
	return 0
}

func (x *MatchPunishBin) GetPunishEndTime() uint32 {
	if x != nil {
		return x.PunishEndTime
	}
	return 0
}

type PlayerMatchCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PunishList            []*MatchPunishBin `protobuf:"bytes,1,rep,name=punish_list,json=punishList,proto3" json:"punish_list,omitempty"`
	LastPunishRefreshTime uint32            `protobuf:"varint,2,opt,name=last_punish_refresh_time,json=lastPunishRefreshTime,proto3" json:"last_punish_refresh_time,omitempty"`
}

func (x *PlayerMatchCompBin) Reset() {
	*x = PlayerMatchCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[486]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMatchCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMatchCompBin) ProtoMessage() {}

func (x *PlayerMatchCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[486]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMatchCompBin.ProtoReflect.Descriptor instead.
func (*PlayerMatchCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{486}
}

func (x *PlayerMatchCompBin) GetPunishList() []*MatchPunishBin {
	if x != nil {
		return x.PunishList
	}
	return nil
}

func (x *PlayerMatchCompBin) GetLastPunishRefreshTime() uint32 {
	if x != nil {
		return x.LastPunishRefreshTime
	}
	return 0
}

type PlayerExhibitionBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ReplaceableValue uint32 `protobuf:"varint,2,opt,name=replaceable_value,json=replaceableValue,proto3" json:"replaceable_value,omitempty"`
	AccumulableValue uint32 `protobuf:"varint,3,opt,name=accumulable_value,json=accumulableValue,proto3" json:"accumulable_value,omitempty"`
}

func (x *PlayerExhibitionBin) Reset() {
	*x = PlayerExhibitionBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[487]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerExhibitionBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerExhibitionBin) ProtoMessage() {}

func (x *PlayerExhibitionBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[487]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerExhibitionBin.ProtoReflect.Descriptor instead.
func (*PlayerExhibitionBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{487}
}

func (x *PlayerExhibitionBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PlayerExhibitionBin) GetReplaceableValue() uint32 {
	if x != nil {
		return x.ReplaceableValue
	}
	return 0
}

func (x *PlayerExhibitionBin) GetAccumulableValue() uint32 {
	if x != nil {
		return x.AccumulableValue
	}
	return 0
}

type PlayerExhibitionCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExhibitionList []*PlayerExhibitionBin `protobuf:"bytes,1,rep,name=exhibition_list,json=exhibitionList,proto3" json:"exhibition_list,omitempty"`
}

func (x *PlayerExhibitionCompBin) Reset() {
	*x = PlayerExhibitionCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[488]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerExhibitionCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerExhibitionCompBin) ProtoMessage() {}

func (x *PlayerExhibitionCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[488]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerExhibitionCompBin.ProtoReflect.Descriptor instead.
func (*PlayerExhibitionCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{488}
}

func (x *PlayerExhibitionCompBin) GetExhibitionList() []*PlayerExhibitionBin {
	if x != nil {
		return x.ExhibitionList
	}
	return nil
}

type PlayerGroupLinkBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkId      uint32 `protobuf:"varint,1,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	ActivityId  uint32 `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	CurBundleId uint32 `protobuf:"varint,3,opt,name=cur_bundle_id,json=curBundleId,proto3" json:"cur_bundle_id,omitempty"`
	ScheduleId  uint32 `protobuf:"varint,4,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *PlayerGroupLinkBin) Reset() {
	*x = PlayerGroupLinkBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[489]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGroupLinkBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGroupLinkBin) ProtoMessage() {}

func (x *PlayerGroupLinkBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[489]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGroupLinkBin.ProtoReflect.Descriptor instead.
func (*PlayerGroupLinkBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{489}
}

func (x *PlayerGroupLinkBin) GetLinkId() uint32 {
	if x != nil {
		return x.LinkId
	}
	return 0
}

func (x *PlayerGroupLinkBin) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *PlayerGroupLinkBin) GetCurBundleId() uint32 {
	if x != nil {
		return x.CurBundleId
	}
	return 0
}

func (x *PlayerGroupLinkBin) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type PlayerGroupBundleBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BundleId    uint32 `protobuf:"varint,1,opt,name=bundle_id,json=bundleId,proto3" json:"bundle_id,omitempty"`
	ActivityId  uint32 `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	IsActivated bool   `protobuf:"varint,3,opt,name=is_activated,json=isActivated,proto3" json:"is_activated,omitempty"`
	ScheduleId  uint32 `protobuf:"varint,4,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	IsShowMark  bool   `protobuf:"varint,5,opt,name=is_show_mark,json=isShowMark,proto3" json:"is_show_mark,omitempty"`
}

func (x *PlayerGroupBundleBin) Reset() {
	*x = PlayerGroupBundleBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[490]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGroupBundleBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGroupBundleBin) ProtoMessage() {}

func (x *PlayerGroupBundleBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[490]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGroupBundleBin.ProtoReflect.Descriptor instead.
func (*PlayerGroupBundleBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{490}
}

func (x *PlayerGroupBundleBin) GetBundleId() uint32 {
	if x != nil {
		return x.BundleId
	}
	return 0
}

func (x *PlayerGroupBundleBin) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *PlayerGroupBundleBin) GetIsActivated() bool {
	if x != nil {
		return x.IsActivated
	}
	return false
}

func (x *PlayerGroupBundleBin) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *PlayerGroupBundleBin) GetIsShowMark() bool {
	if x != nil {
		return x.IsShowMark
	}
	return false
}

type PlayerGroupBundleFinishBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId   uint32   `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	BundleIdList []uint32 `protobuf:"varint,2,rep,packed,name=bundle_id_list,json=bundleIdList,proto3" json:"bundle_id_list,omitempty"`
	ScheduleId   uint32   `protobuf:"varint,3,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *PlayerGroupBundleFinishBin) Reset() {
	*x = PlayerGroupBundleFinishBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[491]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGroupBundleFinishBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGroupBundleFinishBin) ProtoMessage() {}

func (x *PlayerGroupBundleFinishBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[491]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGroupBundleFinishBin.ProtoReflect.Descriptor instead.
func (*PlayerGroupBundleFinishBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{491}
}

func (x *PlayerGroupBundleFinishBin) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *PlayerGroupBundleFinishBin) GetBundleIdList() []uint32 {
	if x != nil {
		return x.BundleIdList
	}
	return nil
}

func (x *PlayerGroupBundleFinishBin) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type PlayerGroupLinkCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkBinList         []*PlayerGroupLinkBin         `protobuf:"bytes,2,rep,name=link_bin_list,json=linkBinList,proto3" json:"link_bin_list,omitempty"`
	BundleBinList       []*PlayerGroupBundleBin       `protobuf:"bytes,3,rep,name=bundle_bin_list,json=bundleBinList,proto3" json:"bundle_bin_list,omitempty"`
	FinishBundleBinList []*PlayerGroupBundleFinishBin `protobuf:"bytes,4,rep,name=finish_bundle_bin_list,json=finishBundleBinList,proto3" json:"finish_bundle_bin_list,omitempty"`
}

func (x *PlayerGroupLinkCompBin) Reset() {
	*x = PlayerGroupLinkCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[492]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGroupLinkCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGroupLinkCompBin) ProtoMessage() {}

func (x *PlayerGroupLinkCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[492]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGroupLinkCompBin.ProtoReflect.Descriptor instead.
func (*PlayerGroupLinkCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{492}
}

func (x *PlayerGroupLinkCompBin) GetLinkBinList() []*PlayerGroupLinkBin {
	if x != nil {
		return x.LinkBinList
	}
	return nil
}

func (x *PlayerGroupLinkCompBin) GetBundleBinList() []*PlayerGroupBundleBin {
	if x != nil {
		return x.BundleBinList
	}
	return nil
}

func (x *PlayerGroupLinkCompBin) GetFinishBundleBinList() []*PlayerGroupBundleFinishBin {
	if x != nil {
		return x.FinishBundleBinList
	}
	return nil
}

type FireworksParamBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Value int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FireworksParamBin) Reset() {
	*x = FireworksParamBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[493]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireworksParamBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireworksParamBin) ProtoMessage() {}

func (x *FireworksParamBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[493]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireworksParamBin.ProtoReflect.Descriptor instead.
func (*FireworksParamBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{493}
}

func (x *FireworksParamBin) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FireworksParamBin) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type FireworksReformBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint32               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ReformParamBinList []*FireworksParamBin `protobuf:"bytes,2,rep,name=reform_param_bin_list,json=reformParamBinList,proto3" json:"reform_param_bin_list,omitempty"`
}

func (x *FireworksReformBin) Reset() {
	*x = FireworksReformBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[494]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireworksReformBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireworksReformBin) ProtoMessage() {}

func (x *FireworksReformBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[494]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireworksReformBin.ProtoReflect.Descriptor instead.
func (*FireworksReformBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{494}
}

func (x *FireworksReformBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FireworksReformBin) GetReformParamBinList() []*FireworksParamBin {
	if x != nil {
		return x.ReformParamBinList
	}
	return nil
}

type FireworksLaunchSchemeBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemeId           uint32               `protobuf:"varint,1,opt,name=scheme_id,json=schemeId,proto3" json:"scheme_id,omitempty"`
	FireworksIdList    []uint32             `protobuf:"varint,2,rep,packed,name=fireworks_id_list,json=fireworksIdList,proto3" json:"fireworks_id_list,omitempty"`
	LaunchParamBinList []*FireworksParamBin `protobuf:"bytes,3,rep,name=launch_param_bin_list,json=launchParamBinList,proto3" json:"launch_param_bin_list,omitempty"`
}

func (x *FireworksLaunchSchemeBin) Reset() {
	*x = FireworksLaunchSchemeBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[495]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireworksLaunchSchemeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireworksLaunchSchemeBin) ProtoMessage() {}

func (x *FireworksLaunchSchemeBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[495]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireworksLaunchSchemeBin.ProtoReflect.Descriptor instead.
func (*FireworksLaunchSchemeBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{495}
}

func (x *FireworksLaunchSchemeBin) GetSchemeId() uint32 {
	if x != nil {
		return x.SchemeId
	}
	return 0
}

func (x *FireworksLaunchSchemeBin) GetFireworksIdList() []uint32 {
	if x != nil {
		return x.FireworksIdList
	}
	return nil
}

func (x *FireworksLaunchSchemeBin) GetLaunchParamBinList() []*FireworksParamBin {
	if x != nil {
		return x.LaunchParamBinList
	}
	return nil
}

type PlayerFireworksCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FireworksReformBinList []*FireworksReformBin       `protobuf:"bytes,1,rep,name=fireworks_reform_bin_list,json=fireworksReformBinList,proto3" json:"fireworks_reform_bin_list,omitempty"`
	LastUseLaunchSchemeId  uint32                      `protobuf:"varint,2,opt,name=last_use_launch_scheme_id,json=lastUseLaunchSchemeId,proto3" json:"last_use_launch_scheme_id,omitempty"`
	LaunchSchemeBinList    []*FireworksLaunchSchemeBin `protobuf:"bytes,3,rep,name=launch_scheme_bin_list,json=launchSchemeBinList,proto3" json:"launch_scheme_bin_list,omitempty"`
}

func (x *PlayerFireworksCompBin) Reset() {
	*x = PlayerFireworksCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[496]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerFireworksCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerFireworksCompBin) ProtoMessage() {}

func (x *PlayerFireworksCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[496]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerFireworksCompBin.ProtoReflect.Descriptor instead.
func (*PlayerFireworksCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{496}
}

func (x *PlayerFireworksCompBin) GetFireworksReformBinList() []*FireworksReformBin {
	if x != nil {
		return x.FireworksReformBinList
	}
	return nil
}

func (x *PlayerFireworksCompBin) GetLastUseLaunchSchemeId() uint32 {
	if x != nil {
		return x.LastUseLaunchSchemeId
	}
	return 0
}

func (x *PlayerFireworksCompBin) GetLaunchSchemeBinList() []*FireworksLaunchSchemeBin {
	if x != nil {
		return x.LaunchSchemeBinList
	}
	return nil
}

type PlayerCityCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityMap map[uint32]*CityBin `protobuf:"bytes,1,rep,name=city_map,json=cityMap,proto3" json:"city_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlayerCityCompBin) Reset() {
	*x = PlayerCityCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[497]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerCityCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerCityCompBin) ProtoMessage() {}

func (x *PlayerCityCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[497]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerCityCompBin.ProtoReflect.Descriptor instead.
func (*PlayerCityCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{497}
}

func (x *PlayerCityCompBin) GetCityMap() map[uint32]*CityBin {
	if x != nil {
		return x.CityMap
	}
	return nil
}

type RegionalPlayVarBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  uint32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RegionalPlayVarBin) Reset() {
	*x = RegionalPlayVarBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[498]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionalPlayVarBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionalPlayVarBin) ProtoMessage() {}

func (x *RegionalPlayVarBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[498]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionalPlayVarBin.ProtoReflect.Descriptor instead.
func (*RegionalPlayVarBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{498}
}

func (x *RegionalPlayVarBin) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RegionalPlayVarBin) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type DeathZoneBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsOpen bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *DeathZoneBin) Reset() {
	*x = DeathZoneBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[499]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeathZoneBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeathZoneBin) ProtoMessage() {}

func (x *DeathZoneBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[499]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeathZoneBin.ProtoReflect.Descriptor instead.
func (*DeathZoneBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{499}
}

func (x *DeathZoneBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeathZoneBin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type PlayerRegionalPlayCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VarBinList       []*RegionalPlayVarBin `protobuf:"bytes,1,rep,name=var_bin_list,json=varBinList,proto3" json:"var_bin_list,omitempty"`
	DeathZoneBinList []*DeathZoneBin       `protobuf:"bytes,2,rep,name=death_zone_bin_list,json=deathZoneBinList,proto3" json:"death_zone_bin_list,omitempty"`
	LastPlayName     string                `protobuf:"bytes,3,opt,name=last_play_name,json=lastPlayName,proto3" json:"last_play_name,omitempty"`
}

func (x *PlayerRegionalPlayCompBin) Reset() {
	*x = PlayerRegionalPlayCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[500]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRegionalPlayCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRegionalPlayCompBin) ProtoMessage() {}

func (x *PlayerRegionalPlayCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[500]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRegionalPlayCompBin.ProtoReflect.Descriptor instead.
func (*PlayerRegionalPlayCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{500}
}

func (x *PlayerRegionalPlayCompBin) GetVarBinList() []*RegionalPlayVarBin {
	if x != nil {
		return x.VarBinList
	}
	return nil
}

func (x *PlayerRegionalPlayCompBin) GetDeathZoneBinList() []*DeathZoneBin {
	if x != nil {
		return x.DeathZoneBinList
	}
	return nil
}

func (x *PlayerRegionalPlayCompBin) GetLastPlayName() string {
	if x != nil {
		return x.LastPlayName
	}
	return ""
}

type ShareCDInfoBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareCdId   uint32 `protobuf:"varint,1,opt,name=share_cd_id,json=shareCdId,proto3" json:"share_cd_id,omitempty"`
	ConfigIndex uint32 `protobuf:"varint,2,opt,name=config_index,json=configIndex,proto3" json:"config_index,omitempty"`
	LastUseTime uint64 `protobuf:"varint,3,opt,name=last_use_time,json=lastUseTime,proto3" json:"last_use_time,omitempty"`
	CdToken     uint32 `protobuf:"varint,4,opt,name=cd_token,json=cdToken,proto3" json:"cd_token,omitempty"`
}

func (x *ShareCDInfoBin) Reset() {
	*x = ShareCDInfoBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[501]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareCDInfoBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareCDInfoBin) ProtoMessage() {}

func (x *ShareCDInfoBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[501]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareCDInfoBin.ProtoReflect.Descriptor instead.
func (*ShareCDInfoBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{501}
}

func (x *ShareCDInfoBin) GetShareCdId() uint32 {
	if x != nil {
		return x.ShareCdId
	}
	return 0
}

func (x *ShareCDInfoBin) GetConfigIndex() uint32 {
	if x != nil {
		return x.ConfigIndex
	}
	return 0
}

func (x *ShareCDInfoBin) GetLastUseTime() uint64 {
	if x != nil {
		return x.LastUseTime
	}
	return 0
}

func (x *ShareCDInfoBin) GetCdToken() uint32 {
	if x != nil {
		return x.CdToken
	}
	return 0
}

type PlayerShareCDCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareCdInfoMap map[uint32]*ShareCDInfoBin `protobuf:"bytes,1,rep,name=share_cd_info_map,json=shareCdInfoMap,proto3" json:"share_cd_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlayerShareCDCompBin) Reset() {
	*x = PlayerShareCDCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[502]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerShareCDCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerShareCDCompBin) ProtoMessage() {}

func (x *PlayerShareCDCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[502]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerShareCDCompBin.ProtoReflect.Descriptor instead.
func (*PlayerShareCDCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{502}
}

func (x *PlayerShareCDCompBin) GetShareCdInfoMap() map[uint32]*ShareCDInfoBin {
	if x != nil {
		return x.ShareCdInfoMap
	}
	return nil
}

type GCGPlayerBriefBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId   uint32             `protobuf:"varint,1,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	Uid            uint32             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	NickName       string             `protobuf:"bytes,3,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	ProfilePicture *ProfilePictureBin `protobuf:"bytes,4,opt,name=profile_picture,json=profilePicture,proto3" json:"profile_picture,omitempty"`
	CardIdList     []uint32           `protobuf:"varint,5,rep,packed,name=card_id_list,json=cardIdList,proto3" json:"card_id_list,omitempty"`
	CardFaceMap    map[uint32]uint32  `protobuf:"bytes,6,rep,name=card_face_map,json=cardFaceMap,proto3" json:"card_face_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GCGPlayerBriefBin) Reset() {
	*x = GCGPlayerBriefBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[503]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGPlayerBriefBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGPlayerBriefBin) ProtoMessage() {}

func (x *GCGPlayerBriefBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[503]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGPlayerBriefBin.ProtoReflect.Descriptor instead.
func (*GCGPlayerBriefBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{503}
}

func (x *GCGPlayerBriefBin) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *GCGPlayerBriefBin) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GCGPlayerBriefBin) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *GCGPlayerBriefBin) GetProfilePicture() *ProfilePictureBin {
	if x != nil {
		return x.ProfilePicture
	}
	return nil
}

func (x *GCGPlayerBriefBin) GetCardIdList() []uint32 {
	if x != nil {
		return x.CardIdList
	}
	return nil
}

func (x *GCGPlayerBriefBin) GetCardFaceMap() map[uint32]uint32 {
	if x != nil {
		return x.CardFaceMap
	}
	return nil
}

type GCGGameBriefBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId              uint32               `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	GameUid            uint32               `protobuf:"varint,2,opt,name=game_uid,json=gameUid,proto3" json:"game_uid,omitempty"`
	BusinessType       uint32               `protobuf:"varint,3,opt,name=business_type,json=businessType,proto3" json:"business_type,omitempty"`
	PlayerBriefBinList []*GCGPlayerBriefBin `protobuf:"bytes,4,rep,name=player_brief_bin_list,json=playerBriefBinList,proto3" json:"player_brief_bin_list,omitempty"`
	VerifyCode         uint32               `protobuf:"varint,5,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`
	GameId             uint32               `protobuf:"varint,6,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	ThreadIndex        uint32               `protobuf:"varint,7,opt,name=thread_index,json=threadIndex,proto3" json:"thread_index,omitempty"`
}

func (x *GCGGameBriefBin) Reset() {
	*x = GCGGameBriefBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[504]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGGameBriefBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGGameBriefBin) ProtoMessage() {}

func (x *GCGGameBriefBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[504]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGGameBriefBin.ProtoReflect.Descriptor instead.
func (*GCGGameBriefBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{504}
}

func (x *GCGGameBriefBin) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *GCGGameBriefBin) GetGameUid() uint32 {
	if x != nil {
		return x.GameUid
	}
	return 0
}

func (x *GCGGameBriefBin) GetBusinessType() uint32 {
	if x != nil {
		return x.BusinessType
	}
	return 0
}

func (x *GCGGameBriefBin) GetPlayerBriefBinList() []*GCGPlayerBriefBin {
	if x != nil {
		return x.PlayerBriefBinList
	}
	return nil
}

func (x *GCGGameBriefBin) GetVerifyCode() uint32 {
	if x != nil {
		return x.VerifyCode
	}
	return 0
}

func (x *GCGGameBriefBin) GetGameId() uint32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *GCGGameBriefBin) GetThreadIndex() uint32 {
	if x != nil {
		return x.ThreadIndex
	}
	return 0
}

type GCGDSDeckBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CharacterCardList []uint32 `protobuf:"varint,3,rep,packed,name=character_card_list,json=characterCardList,proto3" json:"character_card_list,omitempty"`
	CardList          []uint32 `protobuf:"varint,4,rep,packed,name=card_list,json=cardList,proto3" json:"card_list,omitempty"`
	CardBackId        uint32   `protobuf:"varint,5,opt,name=card_back_id,json=cardBackId,proto3" json:"card_back_id,omitempty"`
	FieldId           uint32   `protobuf:"varint,6,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	CreateTime        uint32   `protobuf:"fixed32,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *GCGDSDeckBin) Reset() {
	*x = GCGDSDeckBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[505]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSDeckBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSDeckBin) ProtoMessage() {}

func (x *GCGDSDeckBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[505]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSDeckBin.ProtoReflect.Descriptor instead.
func (*GCGDSDeckBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{505}
}

func (x *GCGDSDeckBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GCGDSDeckBin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GCGDSDeckBin) GetCharacterCardList() []uint32 {
	if x != nil {
		return x.CharacterCardList
	}
	return nil
}

func (x *GCGDSDeckBin) GetCardList() []uint32 {
	if x != nil {
		return x.CardList
	}
	return nil
}

func (x *GCGDSDeckBin) GetCardBackId() uint32 {
	if x != nil {
		return x.CardBackId
	}
	return 0
}

func (x *GCGDSDeckBin) GetFieldId() uint32 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (x *GCGDSDeckBin) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type GCGDSCardBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId                        uint32   `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	Num                           uint32   `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	UnlockFaceTypeList            []uint32 `protobuf:"varint,3,rep,packed,name=unlock_face_type_list,json=unlockFaceTypeList,proto3" json:"unlock_face_type_list,omitempty"`
	FaceType                      uint32   `protobuf:"varint,4,opt,name=face_type,json=faceType,proto3" json:"face_type,omitempty"`
	Proficiency                   uint32   `protobuf:"varint,5,opt,name=proficiency,proto3" json:"proficiency,omitempty"`
	ProficiencyRewardTakenIdxList []uint32 `protobuf:"varint,6,rep,packed,name=proficiency_reward_taken_idx_list,json=proficiencyRewardTakenIdxList,proto3" json:"proficiency_reward_taken_idx_list,omitempty"`
}

func (x *GCGDSCardBin) Reset() {
	*x = GCGDSCardBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[506]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSCardBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSCardBin) ProtoMessage() {}

func (x *GCGDSCardBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[506]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSCardBin.ProtoReflect.Descriptor instead.
func (*GCGDSCardBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{506}
}

func (x *GCGDSCardBin) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *GCGDSCardBin) GetNum() uint32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *GCGDSCardBin) GetUnlockFaceTypeList() []uint32 {
	if x != nil {
		return x.UnlockFaceTypeList
	}
	return nil
}

func (x *GCGDSCardBin) GetFaceType() uint32 {
	if x != nil {
		return x.FaceType
	}
	return 0
}

func (x *GCGDSCardBin) GetProficiency() uint32 {
	if x != nil {
		return x.Proficiency
	}
	return 0
}

func (x *GCGDSCardBin) GetProficiencyRewardTakenIdxList() []uint32 {
	if x != nil {
		return x.ProficiencyRewardTakenIdxList
	}
	return nil
}

type GCGDeckSystemBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckList             []*GCGDSDeckBin `protobuf:"bytes,1,rep,name=deck_list,json=deckList,proto3" json:"deck_list,omitempty"`
	CardList             []*GCGDSCardBin `protobuf:"bytes,2,rep,name=card_list,json=cardList,proto3" json:"card_list,omitempty"`
	UnlockCardBackIdList []uint32        `protobuf:"varint,3,rep,packed,name=unlock_card_back_id_list,json=unlockCardBackIdList,proto3" json:"unlock_card_back_id_list,omitempty"`
	UnlockFieldIdList    []uint32        `protobuf:"varint,4,rep,packed,name=unlock_field_id_list,json=unlockFieldIdList,proto3" json:"unlock_field_id_list,omitempty"`
	CurDeckId            uint32          `protobuf:"varint,5,opt,name=cur_deck_id,json=curDeckId,proto3" json:"cur_deck_id,omitempty"`
	UnlockDeckIdList     []uint32        `protobuf:"varint,6,rep,packed,name=unlock_deck_id_list,json=unlockDeckIdList,proto3" json:"unlock_deck_id_list,omitempty"`
}

func (x *GCGDeckSystemBin) Reset() {
	*x = GCGDeckSystemBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[507]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDeckSystemBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDeckSystemBin) ProtoMessage() {}

func (x *GCGDeckSystemBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[507]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDeckSystemBin.ProtoReflect.Descriptor instead.
func (*GCGDeckSystemBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{507}
}

func (x *GCGDeckSystemBin) GetDeckList() []*GCGDSDeckBin {
	if x != nil {
		return x.DeckList
	}
	return nil
}

func (x *GCGDeckSystemBin) GetCardList() []*GCGDSCardBin {
	if x != nil {
		return x.CardList
	}
	return nil
}

func (x *GCGDeckSystemBin) GetUnlockCardBackIdList() []uint32 {
	if x != nil {
		return x.UnlockCardBackIdList
	}
	return nil
}

func (x *GCGDeckSystemBin) GetUnlockFieldIdList() []uint32 {
	if x != nil {
		return x.UnlockFieldIdList
	}
	return nil
}

func (x *GCGDeckSystemBin) GetCurDeckId() uint32 {
	if x != nil {
		return x.CurDeckId
	}
	return 0
}

func (x *GCGDeckSystemBin) GetUnlockDeckIdList() []uint32 {
	if x != nil {
		return x.UnlockDeckIdList
	}
	return nil
}

type GCGTCTavernChallengeBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId       uint32   `protobuf:"varint,1,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
	UnlockLevelIdList []uint32 `protobuf:"varint,3,rep,packed,name=unlock_level_id_list,json=unlockLevelIdList,proto3" json:"unlock_level_id_list,omitempty"`
}

func (x *GCGTCTavernChallengeBin) Reset() {
	*x = GCGTCTavernChallengeBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[508]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGTCTavernChallengeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGTCTavernChallengeBin) ProtoMessage() {}

func (x *GCGTCTavernChallengeBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[508]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGTCTavernChallengeBin.ProtoReflect.Descriptor instead.
func (*GCGTCTavernChallengeBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{508}
}

func (x *GCGTCTavernChallengeBin) GetCharacterId() uint32 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *GCGTCTavernChallengeBin) GetUnlockLevelIdList() []uint32 {
	if x != nil {
		return x.UnlockLevelIdList
	}
	return nil
}

type GCGTavernBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId            uint32                     `protobuf:"varint,1,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
	LevelId                uint32                     `protobuf:"varint,2,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	PointId                uint32                     `protobuf:"varint,3,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
	IsLastDuelWin          bool                       `protobuf:"varint,4,opt,name=is_last_duel_win,json=isLastDuelWin,proto3" json:"is_last_duel_win,omitempty"`
	TavernChallengeBinList []*GCGTCTavernChallengeBin `protobuf:"bytes,5,rep,name=tavern_challenge_bin_list,json=tavernChallengeBinList,proto3" json:"tavern_challenge_bin_list,omitempty"`
}

func (x *GCGTavernBin) Reset() {
	*x = GCGTavernBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[509]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGTavernBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGTavernBin) ProtoMessage() {}

func (x *GCGTavernBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[509]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGTavernBin.ProtoReflect.Descriptor instead.
func (*GCGTavernBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{509}
}

func (x *GCGTavernBin) GetCharacterId() uint32 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *GCGTavernBin) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *GCGTavernBin) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

func (x *GCGTavernBin) GetIsLastDuelWin() bool {
	if x != nil {
		return x.IsLastDuelWin
	}
	return false
}

func (x *GCGTavernBin) GetTavernChallengeBinList() []*GCGTCTavernChallengeBin {
	if x != nil {
		return x.TavernChallengeBinList
	}
	return nil
}

type GCGMatchBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId         uint32 `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Score           uint32 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	WinStreakCount  uint32 `protobuf:"varint,3,opt,name=win_streak_count,json=winStreakCount,proto3" json:"win_streak_count,omitempty"`
	LoseStreakCount uint32 `protobuf:"varint,4,opt,name=lose_streak_count,json=loseStreakCount,proto3" json:"lose_streak_count,omitempty"`
	RefuseCount     uint32 `protobuf:"varint,5,opt,name=refuse_count,json=refuseCount,proto3" json:"refuse_count,omitempty"`
	PunishEndTime   uint32 `protobuf:"fixed32,6,opt,name=punish_end_time,json=punishEndTime,proto3" json:"punish_end_time,omitempty"`
	Version         uint32 `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GCGMatchBin) Reset() {
	*x = GCGMatchBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[510]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMatchBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMatchBin) ProtoMessage() {}

func (x *GCGMatchBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[510]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMatchBin.ProtoReflect.Descriptor instead.
func (*GCGMatchBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{510}
}

func (x *GCGMatchBin) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *GCGMatchBin) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GCGMatchBin) GetWinStreakCount() uint32 {
	if x != nil {
		return x.WinStreakCount
	}
	return 0
}

func (x *GCGMatchBin) GetLoseStreakCount() uint32 {
	if x != nil {
		return x.LoseStreakCount
	}
	return 0
}

func (x *GCGMatchBin) GetRefuseCount() uint32 {
	if x != nil {
		return x.RefuseCount
	}
	return 0
}

func (x *GCGMatchBin) GetPunishEndTime() uint32 {
	if x != nil {
		return x.PunishEndTime
	}
	return 0
}

func (x *GCGMatchBin) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type GCGBasicBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level                uint32         `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Exp                  uint32         `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
	LevelRewardTakenList []uint32       `protobuf:"varint,3,rep,packed,name=level_reward_taken_list,json=levelRewardTakenList,proto3" json:"level_reward_taken_list,omitempty"`
	MatchBinList         []*GCGMatchBin `protobuf:"bytes,4,rep,name=match_bin_list,json=matchBinList,proto3" json:"match_bin_list,omitempty"`
	BanMatchExpireTime   uint32         `protobuf:"varint,5,opt,name=ban_match_expire_time,json=banMatchExpireTime,proto3" json:"ban_match_expire_time,omitempty"`
	BanInviteExpireTime  uint32         `protobuf:"varint,6,opt,name=ban_invite_expire_time,json=banInviteExpireTime,proto3" json:"ban_invite_expire_time,omitempty"`
}

func (x *GCGBasicBin) Reset() {
	*x = GCGBasicBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[511]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGBasicBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGBasicBin) ProtoMessage() {}

func (x *GCGBasicBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[511]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGBasicBin.ProtoReflect.Descriptor instead.
func (*GCGBasicBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{511}
}

func (x *GCGBasicBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GCGBasicBin) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *GCGBasicBin) GetLevelRewardTakenList() []uint32 {
	if x != nil {
		return x.LevelRewardTakenList
	}
	return nil
}

func (x *GCGBasicBin) GetMatchBinList() []*GCGMatchBin {
	if x != nil {
		return x.MatchBinList
	}
	return nil
}

func (x *GCGBasicBin) GetBanMatchExpireTime() uint32 {
	if x != nil {
		return x.BanMatchExpireTime
	}
	return 0
}

func (x *GCGBasicBin) GetBanInviteExpireTime() uint32 {
	if x != nil {
		return x.BanInviteExpireTime
	}
	return 0
}

type GCGLevelBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId                 uint32   `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	FinishedChallengeIdList []uint32 `protobuf:"varint,2,rep,packed,name=finished_challenge_id_list,json=finishedChallengeIdList,proto3" json:"finished_challenge_id_list,omitempty"`
}

func (x *GCGLevelBin) Reset() {
	*x = GCGLevelBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[512]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGLevelBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGLevelBin) ProtoMessage() {}

func (x *GCGLevelBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[512]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGLevelBin.ProtoReflect.Descriptor instead.
func (*GCGLevelBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{512}
}

func (x *GCGLevelBin) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *GCGLevelBin) GetFinishedChallengeIdList() []uint32 {
	if x != nil {
		return x.FinishedChallengeIdList
	}
	return nil
}

type GCGBossChallengeBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UnlockLevelIdList []uint32 `protobuf:"varint,2,rep,packed,name=unlock_level_id_list,json=unlockLevelIdList,proto3" json:"unlock_level_id_list,omitempty"`
}

func (x *GCGBossChallengeBin) Reset() {
	*x = GCGBossChallengeBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[513]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGBossChallengeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGBossChallengeBin) ProtoMessage() {}

func (x *GCGBossChallengeBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[513]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGBossChallengeBin.ProtoReflect.Descriptor instead.
func (*GCGBossChallengeBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{513}
}

func (x *GCGBossChallengeBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GCGBossChallengeBin) GetUnlockLevelIdList() []uint32 {
	if x != nil {
		return x.UnlockLevelIdList
	}
	return nil
}

type GCGGuideGroupBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Progress uint32 `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *GCGGuideGroupBin) Reset() {
	*x = GCGGuideGroupBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[514]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGGuideGroupBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGGuideGroupBin) ProtoMessage() {}

func (x *GCGGuideGroupBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[514]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGGuideGroupBin.ProtoReflect.Descriptor instead.
func (*GCGGuideGroupBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{514}
}

func (x *GCGGuideGroupBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GCGGuideGroupBin) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type GCGLevelChallengeBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelBinList             []*GCGLevelBin         `protobuf:"bytes,1,rep,name=level_bin_list,json=levelBinList,proto3" json:"level_bin_list,omitempty"`
	PreConfigId              uint32                 `protobuf:"varint,2,opt,name=pre_config_id,json=preConfigId,proto3" json:"pre_config_id,omitempty"`
	PreLevelId               uint32                 `protobuf:"varint,3,opt,name=pre_level_id,json=preLevelId,proto3" json:"pre_level_id,omitempty"`
	PreLevelType             uint32                 `protobuf:"varint,4,opt,name=pre_level_type,json=preLevelType,proto3" json:"pre_level_type,omitempty"`
	UnlockWorldChallengeList []uint32               `protobuf:"varint,5,rep,packed,name=unlock_world_challenge_list,json=unlockWorldChallengeList,proto3" json:"unlock_world_challenge_list,omitempty"`
	UnlockBossChallengeList  []*GCGBossChallengeBin `protobuf:"bytes,6,rep,name=unlock_boss_challenge_list,json=unlockBossChallengeList,proto3" json:"unlock_boss_challenge_list,omitempty"`
	GuideGroupBinList        []*GCGGuideGroupBin    `protobuf:"bytes,7,rep,name=guide_group_bin_list,json=guideGroupBinList,proto3" json:"guide_group_bin_list,omitempty"`
	WinLevelIdSet            []uint32               `protobuf:"varint,8,rep,packed,name=win_level_id_set,json=winLevelIdSet,proto3" json:"win_level_id_set,omitempty"`
}

func (x *GCGLevelChallengeBin) Reset() {
	*x = GCGLevelChallengeBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[515]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGLevelChallengeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGLevelChallengeBin) ProtoMessage() {}

func (x *GCGLevelChallengeBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[515]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGLevelChallengeBin.ProtoReflect.Descriptor instead.
func (*GCGLevelChallengeBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{515}
}

func (x *GCGLevelChallengeBin) GetLevelBinList() []*GCGLevelBin {
	if x != nil {
		return x.LevelBinList
	}
	return nil
}

func (x *GCGLevelChallengeBin) GetPreConfigId() uint32 {
	if x != nil {
		return x.PreConfigId
	}
	return 0
}

func (x *GCGLevelChallengeBin) GetPreLevelId() uint32 {
	if x != nil {
		return x.PreLevelId
	}
	return 0
}

func (x *GCGLevelChallengeBin) GetPreLevelType() uint32 {
	if x != nil {
		return x.PreLevelType
	}
	return 0
}

func (x *GCGLevelChallengeBin) GetUnlockWorldChallengeList() []uint32 {
	if x != nil {
		return x.UnlockWorldChallengeList
	}
	return nil
}

func (x *GCGLevelChallengeBin) GetUnlockBossChallengeList() []*GCGBossChallengeBin {
	if x != nil {
		return x.UnlockBossChallengeList
	}
	return nil
}

func (x *GCGLevelChallengeBin) GetGuideGroupBinList() []*GCGGuideGroupBin {
	if x != nil {
		return x.GuideGroupBinList
	}
	return nil
}

func (x *GCGLevelChallengeBin) GetWinLevelIdSet() []uint32 {
	if x != nil {
		return x.WinLevelIdSet
	}
	return nil
}

type GCGConstNpcBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NpcId        uint32 `protobuf:"varint,1,opt,name=npc_id,json=npcId,proto3" json:"npc_id,omitempty"`
	ScenePointId uint32 `protobuf:"varint,2,opt,name=scene_point_id,json=scenePointId,proto3" json:"scene_point_id,omitempty"`
}

func (x *GCGConstNpcBin) Reset() {
	*x = GCGConstNpcBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[516]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGConstNpcBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGConstNpcBin) ProtoMessage() {}

func (x *GCGConstNpcBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[516]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGConstNpcBin.ProtoReflect.Descriptor instead.
func (*GCGConstNpcBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{516}
}

func (x *GCGConstNpcBin) GetNpcId() uint32 {
	if x != nil {
		return x.NpcId
	}
	return 0
}

func (x *GCGConstNpcBin) GetScenePointId() uint32 {
	if x != nil {
		return x.ScenePointId
	}
	return 0
}

type GCGTavernSceneBuilderBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DistributionId      uint32            `protobuf:"varint,1,opt,name=distribution_id,json=distributionId,proto3" json:"distribution_id,omitempty"`
	LastRefreshGameTime uint32            `protobuf:"varint,2,opt,name=last_refresh_game_time,json=lastRefreshGameTime,proto3" json:"last_refresh_game_time,omitempty"`
	ConstNpcList        []*GCGConstNpcBin `protobuf:"bytes,3,rep,name=const_npc_list,json=constNpcList,proto3" json:"const_npc_list,omitempty"`
}

func (x *GCGTavernSceneBuilderBin) Reset() {
	*x = GCGTavernSceneBuilderBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[517]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGTavernSceneBuilderBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGTavernSceneBuilderBin) ProtoMessage() {}

func (x *GCGTavernSceneBuilderBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[517]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGTavernSceneBuilderBin.ProtoReflect.Descriptor instead.
func (*GCGTavernSceneBuilderBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{517}
}

func (x *GCGTavernSceneBuilderBin) GetDistributionId() uint32 {
	if x != nil {
		return x.DistributionId
	}
	return 0
}

func (x *GCGTavernSceneBuilderBin) GetLastRefreshGameTime() uint32 {
	if x != nil {
		return x.LastRefreshGameTime
	}
	return 0
}

func (x *GCGTavernSceneBuilderBin) GetConstNpcList() []*GCGConstNpcBin {
	if x != nil {
		return x.ConstNpcList
	}
	return nil
}

type GCGWeekNpcBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NpcId        uint32 `protobuf:"varint,1,opt,name=npc_id,json=npcId,proto3" json:"npc_id,omitempty"`
	LevelId      uint32 `protobuf:"varint,2,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsUnlock     bool   `protobuf:"varint,3,opt,name=is_unlock,json=isUnlock,proto3" json:"is_unlock,omitempty"`
	FinishTime   uint32 `protobuf:"varint,4,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	ScenePointId uint32 `protobuf:"varint,5,opt,name=scene_point_id,json=scenePointId,proto3" json:"scene_point_id,omitempty"`
}

func (x *GCGWeekNpcBin) Reset() {
	*x = GCGWeekNpcBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[518]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGWeekNpcBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGWeekNpcBin) ProtoMessage() {}

func (x *GCGWeekNpcBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[518]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGWeekNpcBin.ProtoReflect.Descriptor instead.
func (*GCGWeekNpcBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{518}
}

func (x *GCGWeekNpcBin) GetNpcId() uint32 {
	if x != nil {
		return x.NpcId
	}
	return 0
}

func (x *GCGWeekNpcBin) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *GCGWeekNpcBin) GetIsUnlock() bool {
	if x != nil {
		return x.IsUnlock
	}
	return false
}

func (x *GCGWeekNpcBin) GetFinishTime() uint32 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *GCGWeekNpcBin) GetScenePointId() uint32 {
	if x != nil {
		return x.ScenePointId
	}
	return 0
}

type GCGWeekChallengeBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastRefreshTime              uint32           `protobuf:"varint,1,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	LastRefreshGcgLevel          uint32           `protobuf:"varint,2,opt,name=last_refresh_gcg_level,json=lastRefreshGcgLevel,proto3" json:"last_refresh_gcg_level,omitempty"`
	WeekNpcList                  []*GCGWeekNpcBin `protobuf:"bytes,3,rep,name=week_npc_list,json=weekNpcList,proto3" json:"week_npc_list,omitempty"`
	GmRefreshStartWeekDay        int32            `protobuf:"varint,4,opt,name=gm_refresh_start_week_day,json=gmRefreshStartWeekDay,proto3" json:"gm_refresh_start_week_day,omitempty"`
	GmRefreshStartWeekDaySetTime uint32           `protobuf:"varint,5,opt,name=gm_refresh_start_week_day_set_time,json=gmRefreshStartWeekDaySetTime,proto3" json:"gm_refresh_start_week_day_set_time,omitempty"`
}

func (x *GCGWeekChallengeBin) Reset() {
	*x = GCGWeekChallengeBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[519]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGWeekChallengeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGWeekChallengeBin) ProtoMessage() {}

func (x *GCGWeekChallengeBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[519]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGWeekChallengeBin.ProtoReflect.Descriptor instead.
func (*GCGWeekChallengeBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{519}
}

func (x *GCGWeekChallengeBin) GetLastRefreshTime() uint32 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

func (x *GCGWeekChallengeBin) GetLastRefreshGcgLevel() uint32 {
	if x != nil {
		return x.LastRefreshGcgLevel
	}
	return 0
}

func (x *GCGWeekChallengeBin) GetWeekNpcList() []*GCGWeekNpcBin {
	if x != nil {
		return x.WeekNpcList
	}
	return nil
}

func (x *GCGWeekChallengeBin) GetGmRefreshStartWeekDay() int32 {
	if x != nil {
		return x.GmRefreshStartWeekDay
	}
	return 0
}

func (x *GCGWeekChallengeBin) GetGmRefreshStartWeekDaySetTime() uint32 {
	if x != nil {
		return x.GmRefreshStartWeekDaySetTime
	}
	return 0
}

type PlayerGCGCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckSystemBin         *GCGDeckSystemBin         `protobuf:"bytes,1,opt,name=deck_system_bin,json=deckSystemBin,proto3" json:"deck_system_bin,omitempty"`
	TavernBin             *GCGTavernBin             `protobuf:"bytes,2,opt,name=tavern_bin,json=tavernBin,proto3" json:"tavern_bin,omitempty"`
	BasicBin              *GCGBasicBin              `protobuf:"bytes,3,opt,name=basic_bin,json=basicBin,proto3" json:"basic_bin,omitempty"`
	LevelChallengeBin     *GCGLevelChallengeBin     `protobuf:"bytes,4,opt,name=level_challenge_bin,json=levelChallengeBin,proto3" json:"level_challenge_bin,omitempty"`
	TavernSceneBuilderBin *GCGTavernSceneBuilderBin `protobuf:"bytes,5,opt,name=tavern_scene_builder_bin,json=tavernSceneBuilderBin,proto3" json:"tavern_scene_builder_bin,omitempty"`
	WeekChallengeBin      *GCGWeekChallengeBin      `protobuf:"bytes,6,opt,name=week_challenge_bin,json=weekChallengeBin,proto3" json:"week_challenge_bin,omitempty"`
	GameBriefBin          *GCGGameBriefBin          `protobuf:"bytes,101,opt,name=game_brief_bin,json=gameBriefBin,proto3" json:"game_brief_bin,omitempty"`
}

func (x *PlayerGCGCompBin) Reset() {
	*x = PlayerGCGCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[520]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGCGCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGCGCompBin) ProtoMessage() {}

func (x *PlayerGCGCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[520]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGCGCompBin.ProtoReflect.Descriptor instead.
func (*PlayerGCGCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{520}
}

func (x *PlayerGCGCompBin) GetDeckSystemBin() *GCGDeckSystemBin {
	if x != nil {
		return x.DeckSystemBin
	}
	return nil
}

func (x *PlayerGCGCompBin) GetTavernBin() *GCGTavernBin {
	if x != nil {
		return x.TavernBin
	}
	return nil
}

func (x *PlayerGCGCompBin) GetBasicBin() *GCGBasicBin {
	if x != nil {
		return x.BasicBin
	}
	return nil
}

func (x *PlayerGCGCompBin) GetLevelChallengeBin() *GCGLevelChallengeBin {
	if x != nil {
		return x.LevelChallengeBin
	}
	return nil
}

func (x *PlayerGCGCompBin) GetTavernSceneBuilderBin() *GCGTavernSceneBuilderBin {
	if x != nil {
		return x.TavernSceneBuilderBin
	}
	return nil
}

func (x *PlayerGCGCompBin) GetWeekChallengeBin() *GCGWeekChallengeBin {
	if x != nil {
		return x.WeekChallengeBin
	}
	return nil
}

func (x *PlayerGCGCompBin) GetGameBriefBin() *GCGGameBriefBin {
	if x != nil {
		return x.GameBriefBin
	}
	return nil
}

type AranaraCollectionListBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionIdList []uint32 `protobuf:"varint,1,rep,packed,name=collection_id_list,json=collectionIdList,proto3" json:"collection_id_list,omitempty"`
}

func (x *AranaraCollectionListBin) Reset() {
	*x = AranaraCollectionListBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[521]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AranaraCollectionListBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AranaraCollectionListBin) ProtoMessage() {}

func (x *AranaraCollectionListBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[521]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AranaraCollectionListBin.ProtoReflect.Descriptor instead.
func (*AranaraCollectionListBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{521}
}

func (x *AranaraCollectionListBin) GetCollectionIdList() []uint32 {
	if x != nil {
		return x.CollectionIdList
	}
	return nil
}

type AranaraCollectionSuiteBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionType     uint32                               `protobuf:"varint,1,opt,name=collection_type,json=collectionType,proto3" json:"collection_type,omitempty"`
	StateCollectionMap map[uint32]*AranaraCollectionListBin `protobuf:"bytes,2,rep,name=state_collection_map,json=stateCollectionMap,proto3" json:"state_collection_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AranaraCollectionSuiteBin) Reset() {
	*x = AranaraCollectionSuiteBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[522]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AranaraCollectionSuiteBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AranaraCollectionSuiteBin) ProtoMessage() {}

func (x *AranaraCollectionSuiteBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[522]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AranaraCollectionSuiteBin.ProtoReflect.Descriptor instead.
func (*AranaraCollectionSuiteBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{522}
}

func (x *AranaraCollectionSuiteBin) GetCollectionType() uint32 {
	if x != nil {
		return x.CollectionType
	}
	return 0
}

func (x *AranaraCollectionSuiteBin) GetStateCollectionMap() map[uint32]*AranaraCollectionListBin {
	if x != nil {
		return x.StateCollectionMap
	}
	return nil
}

type PlayerAranaraCollectionCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionSuiteList []*AranaraCollectionSuiteBin `protobuf:"bytes,1,rep,name=collection_suite_list,json=collectionSuiteList,proto3" json:"collection_suite_list,omitempty"`
}

func (x *PlayerAranaraCollectionCompBin) Reset() {
	*x = PlayerAranaraCollectionCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[523]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerAranaraCollectionCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAranaraCollectionCompBin) ProtoMessage() {}

func (x *PlayerAranaraCollectionCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[523]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAranaraCollectionCompBin.ProtoReflect.Descriptor instead.
func (*PlayerAranaraCollectionCompBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{523}
}

func (x *PlayerAranaraCollectionCompBin) GetCollectionSuiteList() []*AranaraCollectionSuiteBin {
	if x != nil {
		return x.CollectionSuiteList
	}
	return nil
}

type PlayerDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicBin             *PlayerBasicCompBin             `protobuf:"bytes,1,opt,name=basic_bin,json=basicBin,proto3" json:"basic_bin,omitempty"`
	AvatarBin            *PlayerAvatarCompBin            `protobuf:"bytes,2,opt,name=avatar_bin,json=avatarBin,proto3" json:"avatar_bin,omitempty"`
	QuestBin             *PlayerQuestCompBin             `protobuf:"bytes,3,opt,name=quest_bin,json=questBin,proto3" json:"quest_bin,omitempty"`
	ShopBin              *PlayerShopCompBin              `protobuf:"bytes,4,opt,name=shop_bin,json=shopBin,proto3" json:"shop_bin,omitempty"`
	ItemBin              *PlayerItemCompBin              `protobuf:"bytes,5,opt,name=item_bin,json=itemBin,proto3" json:"item_bin,omitempty"`
	DungeonBin           *PlayerDungeonCompBin           `protobuf:"bytes,6,opt,name=dungeon_bin,json=dungeonBin,proto3" json:"dungeon_bin,omitempty"`
	SceneBin             *PlayerSceneCompBin             `protobuf:"bytes,7,opt,name=scene_bin,json=sceneBin,proto3" json:"scene_bin,omitempty"`
	BoredBin             *PlayerBoredCompBin             `protobuf:"bytes,8,opt,name=bored_bin,json=boredBin,proto3" json:"bored_bin,omitempty"`
	MpBin                *PlayerMpCompBin                `protobuf:"bytes,9,opt,name=mp_bin,json=mpBin,proto3" json:"mp_bin,omitempty"`
	CookBin              *PlayerCookCompBin              `protobuf:"bytes,10,opt,name=cook_bin,json=cookBin,proto3" json:"cook_bin,omitempty"`
	MailBin              *PlayerMailCompBin              `protobuf:"bytes,11,opt,name=mail_bin,json=mailBin,proto3" json:"mail_bin,omitempty"`
	LoginBin             *PlayerLoginCompBin             `protobuf:"bytes,12,opt,name=login_bin,json=loginBin,proto3" json:"login_bin,omitempty"`
	OfflineMsgBin        *PlayerOfflineMsgCompBin        `protobuf:"bytes,13,opt,name=offline_msg_bin,json=offlineMsgBin,proto3" json:"offline_msg_bin,omitempty"`
	DailyTaskBin         *PlayerDailyTaskCompBin         `protobuf:"bytes,14,opt,name=daily_task_bin,json=dailyTaskBin,proto3" json:"daily_task_bin,omitempty"`
	RandTaskBin          *PlayerRandTaskCompBin          `protobuf:"bytes,15,opt,name=rand_task_bin,json=randTaskBin,proto3" json:"rand_task_bin,omitempty"`
	GachaBin             *PlayerGachaCompBin             `protobuf:"bytes,16,opt,name=gacha_bin,json=gachaBin,proto3" json:"gacha_bin,omitempty"`
	GivingBin            *PlayerGivingCompBin            `protobuf:"bytes,17,opt,name=giving_bin,json=givingBin,proto3" json:"giving_bin,omitempty"`
	ForgeBin             *PlayerForgeCompBin             `protobuf:"bytes,18,opt,name=forge_bin,json=forgeBin,proto3" json:"forge_bin,omitempty"`
	InvestigationBin     *PlayerInvestigationCompBin     `protobuf:"bytes,19,opt,name=investigation_bin,json=investigationBin,proto3" json:"investigation_bin,omitempty"`
	ActivityBin          *PlayerActivityCompBin          `protobuf:"bytes,20,opt,name=activity_bin,json=activityBin,proto3" json:"activity_bin,omitempty"`
	WatcherBin           *PlayerWatcherCompBin           `protobuf:"bytes,21,opt,name=watcher_bin,json=watcherBin,proto3" json:"watcher_bin,omitempty"`
	TowerBin             *PlayerTowerCompBin             `protobuf:"bytes,22,opt,name=tower_bin,json=towerBin,proto3" json:"tower_bin,omitempty"`
	SignInBin            *PlayerSignInCompBin            `protobuf:"bytes,23,opt,name=sign_in_bin,json=signInBin,proto3" json:"sign_in_bin,omitempty"`
	BattlePassBin        *PlayerBattlePassCompBin        `protobuf:"bytes,24,opt,name=battle_pass_bin,json=battlePassBin,proto3" json:"battle_pass_bin,omitempty"`
	BlossomBin           *PlayerBlossomCompBin           `protobuf:"bytes,25,opt,name=blossom_bin,json=blossomBin,proto3" json:"blossom_bin,omitempty"`
	RechargeBin          *PlayerRechargeCompBin          `protobuf:"bytes,26,opt,name=recharge_bin,json=rechargeBin,proto3" json:"recharge_bin,omitempty"`
	MpPlayBin            *PlayerMpPlayCompBin            `protobuf:"bytes,27,opt,name=mp_play_bin,json=mpPlayBin,proto3" json:"mp_play_bin,omitempty"`
	SocialBin            *PlayerSocialCompBin            `protobuf:"bytes,28,opt,name=social_bin,json=socialBin,proto3" json:"social_bin,omitempty"`
	CodexBin             *PlayerCodexCompBin             `protobuf:"bytes,29,opt,name=codex_bin,json=codexBin,proto3" json:"codex_bin,omitempty"`
	AchievementBin       *PlayerAchievementCompBin       `protobuf:"bytes,30,opt,name=achievement_bin,json=achievementBin,proto3" json:"achievement_bin,omitempty"`
	TrialAvatarBin       *PlayerTrialAvatarCompBin       `protobuf:"bytes,31,opt,name=trial_avatar_bin,json=trialAvatarBin,proto3" json:"trial_avatar_bin,omitempty"`
	PersonalLineBin      *PlayerPersonalLineCompBin      `protobuf:"bytes,32,opt,name=personal_line_bin,json=personalLineBin,proto3" json:"personal_line_bin,omitempty"`
	ReputationBin        *PlayerReputationCompBin        `protobuf:"bytes,33,opt,name=reputation_bin,json=reputationBin,proto3" json:"reputation_bin,omitempty"`
	WidgetCompBin        *PlayerWidgetCompBin            `protobuf:"bytes,34,opt,name=widget_comp_bin,json=widgetCompBin,proto3" json:"widget_comp_bin,omitempty"`
	HuntingBin           *PlayerHuntingCompBin           `protobuf:"bytes,35,opt,name=hunting_bin,json=huntingBin,proto3" json:"hunting_bin,omitempty"`
	ScenePlayBin         *PlayerScenePlayCompBin         `protobuf:"bytes,36,opt,name=scene_play_bin,json=scenePlayBin,proto3" json:"scene_play_bin,omitempty"`
	CombineBin           *PlayerCombineCompBin           `protobuf:"bytes,37,opt,name=combine_bin,json=combineBin,proto3" json:"combine_bin,omitempty"`
	CoopBin              *PlayerCoopCompBin              `protobuf:"bytes,38,opt,name=coop_bin,json=coopBin,proto3" json:"coop_bin,omitempty"`
	OfferingBin          *PlayerOfferingCompBin          `protobuf:"bytes,39,opt,name=offering_bin,json=offeringBin,proto3" json:"offering_bin,omitempty"`
	RoutineBin           *PlayerRoutineCompBin           `protobuf:"bytes,40,opt,name=routine_bin,json=routineBin,proto3" json:"routine_bin,omitempty"`
	ReunionBin           *PlayerReunionCompBin           `protobuf:"bytes,41,opt,name=reunion_bin,json=reunionBin,proto3" json:"reunion_bin,omitempty"`
	MiracleRingBin       *PlayerMiracleRingCompBin       `protobuf:"bytes,42,opt,name=miracle_ring_bin,json=miracleRingBin,proto3" json:"miracle_ring_bin,omitempty"`
	MechanicusBin        *PlayerMechanicusCompBin        `protobuf:"bytes,43,opt,name=mechanicus_bin,json=mechanicusBin,proto3" json:"mechanicus_bin,omitempty"`
	OpActivityBin        *PlayerOpActivityCompBin        `protobuf:"bytes,44,opt,name=op_activity_bin,json=opActivityBin,proto3" json:"op_activity_bin,omitempty"`
	GalleryBin           *PlayerGalleryCompBin           `protobuf:"bytes,45,opt,name=gallery_bin,json=galleryBin,proto3" json:"gallery_bin,omitempty"`
	RegionSearchBin      *PlayerRegionSearchCompBin      `protobuf:"bytes,46,opt,name=region_search_bin,json=regionSearchBin,proto3" json:"region_search_bin,omitempty"`
	TalkBin              *PlayerTalkCompBin              `protobuf:"bytes,47,opt,name=talk_bin,json=talkBin,proto3" json:"talk_bin,omitempty"`
	HomeBin              *PlayerHomeCompBin              `protobuf:"bytes,48,opt,name=home_bin,json=homeBin,proto3" json:"home_bin,omitempty"`
	OfflineOpBin         *PlayerOfflineOpBin             `protobuf:"bytes,49,opt,name=offline_op_bin,json=offlineOpBin,proto3" json:"offline_op_bin,omitempty"`
	H5ActivityBin        *PlayerH5ActivityCompBin        `protobuf:"bytes,50,opt,name=h5_activity_bin,json=h5ActivityBin,proto3" json:"h5_activity_bin,omitempty"`
	MatchBin             *PlayerMatchCompBin             `protobuf:"bytes,51,opt,name=match_bin,json=matchBin,proto3" json:"match_bin,omitempty"`
	ExhibitionBin        *PlayerExhibitionCompBin        `protobuf:"bytes,52,opt,name=exhibition_bin,json=exhibitionBin,proto3" json:"exhibition_bin,omitempty"`
	GroupLinkBin         *PlayerGroupLinkCompBin         `protobuf:"bytes,53,opt,name=group_link_bin,json=groupLinkBin,proto3" json:"group_link_bin,omitempty"`
	FishingBin           *PlayerFishingCompBin           `protobuf:"bytes,54,opt,name=fishing_bin,json=fishingBin,proto3" json:"fishing_bin,omitempty"`
	CityBin              *PlayerCityCompBin              `protobuf:"bytes,55,opt,name=city_bin,json=cityBin,proto3" json:"city_bin,omitempty"`
	FireworksBin         *PlayerFireworksCompBin         `protobuf:"bytes,56,opt,name=fireworks_bin,json=fireworksBin,proto3" json:"fireworks_bin,omitempty"`
	RegionalPlayBin      *PlayerRegionalPlayCompBin      `protobuf:"bytes,57,opt,name=regional_play_bin,json=regionalPlayBin,proto3" json:"regional_play_bin,omitempty"`
	CustomDungeonBin     *PlayerCustomDungeonCompBin     `protobuf:"bytes,58,opt,name=custom_dungeon_bin,json=customDungeonBin,proto3" json:"custom_dungeon_bin,omitempty"`
	ShareCdBin           *PlayerShareCDCompBin           `protobuf:"bytes,59,opt,name=share_cd_bin,json=shareCdBin,proto3" json:"share_cd_bin,omitempty"`
	UgcBin               *PlayerUgcCompBin               `protobuf:"bytes,60,opt,name=ugc_bin,json=ugcBin,proto3" json:"ugc_bin,omitempty"`
	AranaraCollectionBin *PlayerAranaraCollectionCompBin `protobuf:"bytes,61,opt,name=aranara_collection_bin,json=aranaraCollectionBin,proto3" json:"aranara_collection_bin,omitempty"`
	GcgBin               *PlayerGCGCompBin               `protobuf:"bytes,65,opt,name=gcg_bin,json=gcgBin,proto3" json:"gcg_bin,omitempty"`
}

func (x *PlayerDataBin) Reset() {
	*x = PlayerDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[524]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDataBin) ProtoMessage() {}

func (x *PlayerDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[524]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDataBin.ProtoReflect.Descriptor instead.
func (*PlayerDataBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{524}
}

func (x *PlayerDataBin) GetBasicBin() *PlayerBasicCompBin {
	if x != nil {
		return x.BasicBin
	}
	return nil
}

func (x *PlayerDataBin) GetAvatarBin() *PlayerAvatarCompBin {
	if x != nil {
		return x.AvatarBin
	}
	return nil
}

func (x *PlayerDataBin) GetQuestBin() *PlayerQuestCompBin {
	if x != nil {
		return x.QuestBin
	}
	return nil
}

func (x *PlayerDataBin) GetShopBin() *PlayerShopCompBin {
	if x != nil {
		return x.ShopBin
	}
	return nil
}

func (x *PlayerDataBin) GetItemBin() *PlayerItemCompBin {
	if x != nil {
		return x.ItemBin
	}
	return nil
}

func (x *PlayerDataBin) GetDungeonBin() *PlayerDungeonCompBin {
	if x != nil {
		return x.DungeonBin
	}
	return nil
}

func (x *PlayerDataBin) GetSceneBin() *PlayerSceneCompBin {
	if x != nil {
		return x.SceneBin
	}
	return nil
}

func (x *PlayerDataBin) GetBoredBin() *PlayerBoredCompBin {
	if x != nil {
		return x.BoredBin
	}
	return nil
}

func (x *PlayerDataBin) GetMpBin() *PlayerMpCompBin {
	if x != nil {
		return x.MpBin
	}
	return nil
}

func (x *PlayerDataBin) GetCookBin() *PlayerCookCompBin {
	if x != nil {
		return x.CookBin
	}
	return nil
}

func (x *PlayerDataBin) GetMailBin() *PlayerMailCompBin {
	if x != nil {
		return x.MailBin
	}
	return nil
}

func (x *PlayerDataBin) GetLoginBin() *PlayerLoginCompBin {
	if x != nil {
		return x.LoginBin
	}
	return nil
}

func (x *PlayerDataBin) GetOfflineMsgBin() *PlayerOfflineMsgCompBin {
	if x != nil {
		return x.OfflineMsgBin
	}
	return nil
}

func (x *PlayerDataBin) GetDailyTaskBin() *PlayerDailyTaskCompBin {
	if x != nil {
		return x.DailyTaskBin
	}
	return nil
}

func (x *PlayerDataBin) GetRandTaskBin() *PlayerRandTaskCompBin {
	if x != nil {
		return x.RandTaskBin
	}
	return nil
}

func (x *PlayerDataBin) GetGachaBin() *PlayerGachaCompBin {
	if x != nil {
		return x.GachaBin
	}
	return nil
}

func (x *PlayerDataBin) GetGivingBin() *PlayerGivingCompBin {
	if x != nil {
		return x.GivingBin
	}
	return nil
}

func (x *PlayerDataBin) GetForgeBin() *PlayerForgeCompBin {
	if x != nil {
		return x.ForgeBin
	}
	return nil
}

func (x *PlayerDataBin) GetInvestigationBin() *PlayerInvestigationCompBin {
	if x != nil {
		return x.InvestigationBin
	}
	return nil
}

func (x *PlayerDataBin) GetActivityBin() *PlayerActivityCompBin {
	if x != nil {
		return x.ActivityBin
	}
	return nil
}

func (x *PlayerDataBin) GetWatcherBin() *PlayerWatcherCompBin {
	if x != nil {
		return x.WatcherBin
	}
	return nil
}

func (x *PlayerDataBin) GetTowerBin() *PlayerTowerCompBin {
	if x != nil {
		return x.TowerBin
	}
	return nil
}

func (x *PlayerDataBin) GetSignInBin() *PlayerSignInCompBin {
	if x != nil {
		return x.SignInBin
	}
	return nil
}

func (x *PlayerDataBin) GetBattlePassBin() *PlayerBattlePassCompBin {
	if x != nil {
		return x.BattlePassBin
	}
	return nil
}

func (x *PlayerDataBin) GetBlossomBin() *PlayerBlossomCompBin {
	if x != nil {
		return x.BlossomBin
	}
	return nil
}

func (x *PlayerDataBin) GetRechargeBin() *PlayerRechargeCompBin {
	if x != nil {
		return x.RechargeBin
	}
	return nil
}

func (x *PlayerDataBin) GetMpPlayBin() *PlayerMpPlayCompBin {
	if x != nil {
		return x.MpPlayBin
	}
	return nil
}

func (x *PlayerDataBin) GetSocialBin() *PlayerSocialCompBin {
	if x != nil {
		return x.SocialBin
	}
	return nil
}

func (x *PlayerDataBin) GetCodexBin() *PlayerCodexCompBin {
	if x != nil {
		return x.CodexBin
	}
	return nil
}

func (x *PlayerDataBin) GetAchievementBin() *PlayerAchievementCompBin {
	if x != nil {
		return x.AchievementBin
	}
	return nil
}

func (x *PlayerDataBin) GetTrialAvatarBin() *PlayerTrialAvatarCompBin {
	if x != nil {
		return x.TrialAvatarBin
	}
	return nil
}

func (x *PlayerDataBin) GetPersonalLineBin() *PlayerPersonalLineCompBin {
	if x != nil {
		return x.PersonalLineBin
	}
	return nil
}

func (x *PlayerDataBin) GetReputationBin() *PlayerReputationCompBin {
	if x != nil {
		return x.ReputationBin
	}
	return nil
}

func (x *PlayerDataBin) GetWidgetCompBin() *PlayerWidgetCompBin {
	if x != nil {
		return x.WidgetCompBin
	}
	return nil
}

func (x *PlayerDataBin) GetHuntingBin() *PlayerHuntingCompBin {
	if x != nil {
		return x.HuntingBin
	}
	return nil
}

func (x *PlayerDataBin) GetScenePlayBin() *PlayerScenePlayCompBin {
	if x != nil {
		return x.ScenePlayBin
	}
	return nil
}

func (x *PlayerDataBin) GetCombineBin() *PlayerCombineCompBin {
	if x != nil {
		return x.CombineBin
	}
	return nil
}

func (x *PlayerDataBin) GetCoopBin() *PlayerCoopCompBin {
	if x != nil {
		return x.CoopBin
	}
	return nil
}

func (x *PlayerDataBin) GetOfferingBin() *PlayerOfferingCompBin {
	if x != nil {
		return x.OfferingBin
	}
	return nil
}

func (x *PlayerDataBin) GetRoutineBin() *PlayerRoutineCompBin {
	if x != nil {
		return x.RoutineBin
	}
	return nil
}

func (x *PlayerDataBin) GetReunionBin() *PlayerReunionCompBin {
	if x != nil {
		return x.ReunionBin
	}
	return nil
}

func (x *PlayerDataBin) GetMiracleRingBin() *PlayerMiracleRingCompBin {
	if x != nil {
		return x.MiracleRingBin
	}
	return nil
}

func (x *PlayerDataBin) GetMechanicusBin() *PlayerMechanicusCompBin {
	if x != nil {
		return x.MechanicusBin
	}
	return nil
}

func (x *PlayerDataBin) GetOpActivityBin() *PlayerOpActivityCompBin {
	if x != nil {
		return x.OpActivityBin
	}
	return nil
}

func (x *PlayerDataBin) GetGalleryBin() *PlayerGalleryCompBin {
	if x != nil {
		return x.GalleryBin
	}
	return nil
}

func (x *PlayerDataBin) GetRegionSearchBin() *PlayerRegionSearchCompBin {
	if x != nil {
		return x.RegionSearchBin
	}
	return nil
}

func (x *PlayerDataBin) GetTalkBin() *PlayerTalkCompBin {
	if x != nil {
		return x.TalkBin
	}
	return nil
}

func (x *PlayerDataBin) GetHomeBin() *PlayerHomeCompBin {
	if x != nil {
		return x.HomeBin
	}
	return nil
}

func (x *PlayerDataBin) GetOfflineOpBin() *PlayerOfflineOpBin {
	if x != nil {
		return x.OfflineOpBin
	}
	return nil
}

func (x *PlayerDataBin) GetH5ActivityBin() *PlayerH5ActivityCompBin {
	if x != nil {
		return x.H5ActivityBin
	}
	return nil
}

func (x *PlayerDataBin) GetMatchBin() *PlayerMatchCompBin {
	if x != nil {
		return x.MatchBin
	}
	return nil
}

func (x *PlayerDataBin) GetExhibitionBin() *PlayerExhibitionCompBin {
	if x != nil {
		return x.ExhibitionBin
	}
	return nil
}

func (x *PlayerDataBin) GetGroupLinkBin() *PlayerGroupLinkCompBin {
	if x != nil {
		return x.GroupLinkBin
	}
	return nil
}

func (x *PlayerDataBin) GetFishingBin() *PlayerFishingCompBin {
	if x != nil {
		return x.FishingBin
	}
	return nil
}

func (x *PlayerDataBin) GetCityBin() *PlayerCityCompBin {
	if x != nil {
		return x.CityBin
	}
	return nil
}

func (x *PlayerDataBin) GetFireworksBin() *PlayerFireworksCompBin {
	if x != nil {
		return x.FireworksBin
	}
	return nil
}

func (x *PlayerDataBin) GetRegionalPlayBin() *PlayerRegionalPlayCompBin {
	if x != nil {
		return x.RegionalPlayBin
	}
	return nil
}

func (x *PlayerDataBin) GetCustomDungeonBin() *PlayerCustomDungeonCompBin {
	if x != nil {
		return x.CustomDungeonBin
	}
	return nil
}

func (x *PlayerDataBin) GetShareCdBin() *PlayerShareCDCompBin {
	if x != nil {
		return x.ShareCdBin
	}
	return nil
}

func (x *PlayerDataBin) GetUgcBin() *PlayerUgcCompBin {
	if x != nil {
		return x.UgcBin
	}
	return nil
}

func (x *PlayerDataBin) GetAranaraCollectionBin() *PlayerAranaraCollectionCompBin {
	if x != nil {
		return x.AranaraCollectionBin
	}
	return nil
}

func (x *PlayerDataBin) GetGcgBin() *PlayerGCGCompBin {
	if x != nil {
		return x.GcgBin
	}
	return nil
}

type PlayerJsonData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsProficientPlayer bool `protobuf:"varint,1,opt,name=is_proficient_player,json=isProficientPlayer,proto3" json:"is_proficient_player,omitempty"`
}

func (x *PlayerJsonData) Reset() {
	*x = PlayerJsonData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[525]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerJsonData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerJsonData) ProtoMessage() {}

func (x *PlayerJsonData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[525]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerJsonData.ProtoReflect.Descriptor instead.
func (*PlayerJsonData) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{525}
}

func (x *PlayerJsonData) GetIsProficientPlayer() bool {
	if x != nil {
		return x.IsProficientPlayer
	}
	return false
}

type PlayerExtJsonData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegPlatform uint32 `protobuf:"varint,1,opt,name=reg_platform,json=regPlatform,proto3" json:"reg_platform,omitempty"`
}

func (x *PlayerExtJsonData) Reset() {
	*x = PlayerExtJsonData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[526]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerExtJsonData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerExtJsonData) ProtoMessage() {}

func (x *PlayerExtJsonData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[526]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerExtJsonData.ProtoReflect.Descriptor instead.
func (*PlayerExtJsonData) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{526}
}

func (x *PlayerExtJsonData) GetRegPlatform() uint32 {
	if x != nil {
		return x.RegPlatform
	}
	return 0
}

type PlayerExtraBinData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AntiOfflineDataMap map[uint32]*SecurityAntiOfflineDataBin `protobuf:"bytes,1,rep,name=anti_offline_data_map,json=antiOfflineDataMap,proto3" json:"anti_offline_data_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlayerExtraBinData) Reset() {
	*x = PlayerExtraBinData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[527]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerExtraBinData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerExtraBinData) ProtoMessage() {}

func (x *PlayerExtraBinData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[527]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerExtraBinData.ProtoReflect.Descriptor instead.
func (*PlayerExtraBinData) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{527}
}

func (x *PlayerExtraBinData) GetAntiOfflineDataMap() map[uint32]*SecurityAntiOfflineDataBin {
	if x != nil {
		return x.AntiOfflineDataMap
	}
	return nil
}

type PlayerBeforeLoginBinData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinishQuestResCollection []uint32 `protobuf:"varint,1,rep,packed,name=finish_quest_res_collection,json=finishQuestResCollection,proto3" json:"finish_quest_res_collection,omitempty"`
}

func (x *PlayerBeforeLoginBinData) Reset() {
	*x = PlayerBeforeLoginBinData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[528]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerBeforeLoginBinData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBeforeLoginBinData) ProtoMessage() {}

func (x *PlayerBeforeLoginBinData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[528]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBeforeLoginBinData.ProtoReflect.Descriptor instead.
func (*PlayerBeforeLoginBinData) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{528}
}

func (x *PlayerBeforeLoginBinData) GetFinishQuestResCollection() []uint32 {
	if x != nil {
		return x.FinishQuestResCollection
	}
	return nil
}

type PlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nickname           string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	LastLoginTime      uint32 `protobuf:"fixed32,3,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"`
	Bin                []byte `protobuf:"bytes,4,opt,name=bin,proto3" json:"bin,omitempty"`
	DataVersion        uint32 `protobuf:"varint,5,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"`
	Level              uint32 `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	Exp                uint32 `protobuf:"varint,7,opt,name=exp,proto3" json:"exp,omitempty"`
	JsonData           string `protobuf:"bytes,8,opt,name=json_data,json=jsonData,proto3" json:"json_data,omitempty"`
	ExtraBinData       []byte `protobuf:"bytes,9,opt,name=extra_bin_data,json=extraBinData,proto3" json:"extra_bin_data,omitempty"`
	OnlineId           string `protobuf:"bytes,10,opt,name=online_id,json=onlineId,proto3" json:"online_id,omitempty"`
	PsnId              string `protobuf:"bytes,11,opt,name=psn_id,json=psnId,proto3" json:"psn_id,omitempty"`
	BeforeLoginBinData []byte `protobuf:"bytes,12,opt,name=before_login_bin_data,json=beforeLoginBinData,proto3" json:"before_login_bin_data,omitempty"`
}

func (x *PlayerData) Reset() {
	*x = PlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[529]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerData) ProtoMessage() {}

func (x *PlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[529]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerData.ProtoReflect.Descriptor instead.
func (*PlayerData) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{529}
}

func (x *PlayerData) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlayerData) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *PlayerData) GetLastLoginTime() uint32 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *PlayerData) GetBin() []byte {
	if x != nil {
		return x.Bin
	}
	return nil
}

func (x *PlayerData) GetDataVersion() uint32 {
	if x != nil {
		return x.DataVersion
	}
	return 0
}

func (x *PlayerData) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PlayerData) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *PlayerData) GetJsonData() string {
	if x != nil {
		return x.JsonData
	}
	return ""
}

func (x *PlayerData) GetExtraBinData() []byte {
	if x != nil {
		return x.ExtraBinData
	}
	return nil
}

func (x *PlayerData) GetOnlineId() string {
	if x != nil {
		return x.OnlineId
	}
	return ""
}

func (x *PlayerData) GetPsnId() string {
	if x != nil {
		return x.PsnId
	}
	return ""
}

func (x *PlayerData) GetBeforeLoginBinData() []byte {
	if x != nil {
		return x.BeforeLoginBinData
	}
	return nil
}

type ContentAuditBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content     string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	AuditState  uint32 `protobuf:"varint,2,opt,name=audit_state,json=auditState,proto3" json:"audit_state,omitempty"`
	SubmitTime  uint32 `protobuf:"varint,3,opt,name=submit_time,json=submitTime,proto3" json:"submit_time,omitempty"`
	SubmitCount uint32 `protobuf:"varint,4,opt,name=submit_count,json=submitCount,proto3" json:"submit_count,omitempty"`
}

func (x *ContentAuditBin) Reset() {
	*x = ContentAuditBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[530]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentAuditBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentAuditBin) ProtoMessage() {}

func (x *ContentAuditBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[530]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentAuditBin.ProtoReflect.Descriptor instead.
func (*ContentAuditBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{530}
}

func (x *ContentAuditBin) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ContentAuditBin) GetAuditState() uint32 {
	if x != nil {
		return x.AuditState
	}
	return 0
}

func (x *ContentAuditBin) GetSubmitTime() uint32 {
	if x != nil {
		return x.SubmitTime
	}
	return 0
}

func (x *ContentAuditBin) GetSubmitCount() uint32 {
	if x != nil {
		return x.SubmitCount
	}
	return 0
}

type WatcherBin_Var struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   uint32 `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Value int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WatcherBin_Var) Reset() {
	*x = WatcherBin_Var{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[622]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatcherBin_Var) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatcherBin_Var) ProtoMessage() {}

func (x *WatcherBin_Var) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[622]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatcherBin_Var.ProtoReflect.Descriptor instead.
func (*WatcherBin_Var) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{347, 0}
}

func (x *WatcherBin_Var) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *WatcherBin_Var) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type MpPlayBin_UidWorldLevelBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	WorldLevel uint32 `protobuf:"varint,2,opt,name=world_level,json=worldLevel,proto3" json:"world_level,omitempty"`
}

func (x *MpPlayBin_UidWorldLevelBin) Reset() {
	*x = MpPlayBin_UidWorldLevelBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_bin_server_proto_msgTypes[640]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MpPlayBin_UidWorldLevelBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MpPlayBin_UidWorldLevelBin) ProtoMessage() {}

func (x *MpPlayBin_UidWorldLevelBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_bin_server_proto_msgTypes[640]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MpPlayBin_UidWorldLevelBin.ProtoReflect.Descriptor instead.
func (*MpPlayBin_UidWorldLevelBin) Descriptor() ([]byte, []int) {
	return file_server_only_bin_server_proto_rawDescGZIP(), []int{387, 0}
}

func (x *MpPlayBin_UidWorldLevelBin) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MpPlayBin_UidWorldLevelBin) GetWorldLevel() uint32 {
	if x != nil {
		return x.WorldLevel
	}
	return 0
}

var File_server_only_bin_server_proto protoreflect.FileDescriptor

var file_server_only_bin_server_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x2f, 0x62, 0x69,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x2f, 0x62, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x2f, 0x62, 0x69, 0x6e, 0x2e, 0x68, 0x6f, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x10, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x65, 0x78, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x4e, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x73, 0x5f, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x57, 0x65, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x75, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6d,
	0x69, 0x6e, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x63, 0x75, 0x72, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x12, 0x32, 0x0a, 0x15,
	0x63, 0x75, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x6d, 0x69, 0x6e, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x63, 0x75, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61,
	0x12, 0x51, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70,
	0x42, 0x69, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73,
	0x12, 0x33, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61,
	0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x47, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x12, 0x2f, 0x0a, 0x14, 0x68, 0x65, 0x61,
	0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x75,
	0x69, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x67, 0x75, 0x69, 0x64, 0x53, 0x65, 0x71, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x52, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x52, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x70, 0x73,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x70, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x75, 0x72, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x5f, 0x63, 0x6c,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69,
	0x73, 0x41, 0x75, 0x74, 0x6f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x73, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x73, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x69, 0x76,
	0x6f, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x75,
	0x6e, 0x69, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x70, 0x69, 0x76, 0x6f, 0x74, 0x55, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x16, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69,
	0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x12, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x10, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x3f, 0x0a, 0x11,
	0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5d, 0x0a,
	0x0e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x12,
	0x20, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x43, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x11, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x75,
	0x6c, 0x6c, 0x43, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xaf, 0x01, 0x0a,
	0x0d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x75, 0x66, 0x66, 0x42, 0x69, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x75, 0x66, 0x66, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62,
	0x75, 0x66, 0x66, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x6f, 0x6e, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x12, 0x6f, 0x6e, 0x61, 0x64,
	0x64, 0x65, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa7,
	0x01, 0x0a, 0x0f, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x42,
	0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x17,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4f, 0x6e,
	0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x22, 0xc5, 0x01, 0x0a, 0x13, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x78, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x68, 0x6f, 0x75, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x65, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x22, 0xc4, 0x02, 0x0a, 0x13, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x44, 0x65, 0x70, 0x6f, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0c, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x16, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x75, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x75, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x55,
	0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x74,
	0x42, 0x69, 0x6e, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x4d, 0x61, 0x70, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x57, 0x0a, 0x13, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x41, 0x66, 0x66, 0x69, 0x78, 0x42, 0x69, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x63, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x63, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x43, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x3a, 0x0a, 0x12, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50,
	0x72, 0x6f, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc3, 0x0a, 0x0a,
	0x09, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x5f, 0x68, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x63, 0x75, 0x72, 0x48, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x5f,
	0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x64,
	0x65, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e,
	0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x38, 0x0a, 0x08, 0x62, 0x75, 0x66, 0x66,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x2e, 0x42, 0x75, 0x66,
	0x66, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62, 0x75, 0x66, 0x66, 0x4d,
	0x61, 0x70, 0x12, 0x3b, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x4d, 0x61, 0x70, 0x12,
	0x2d, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x69, 0x6e, 0x52, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x61, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x61, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x61, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x14, 0x73, 0x61, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x79,
	0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x66, 0x6c, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x17, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x78,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x41,
	0x66, 0x66, 0x69, 0x78, 0x42, 0x69, 0x6e, 0x52, 0x14, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x41, 0x66, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x62, 0x6f, 0x72, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x62, 0x75,
	0x66, 0x66, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x75, 0x66, 0x66,
	0x42, 0x69, 0x6e, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0f,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x70, 0x42, 0x69, 0x6e,
	0x52, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x48, 0x00,
	0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x3a,
	0x0a, 0x0c, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x74,
	0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x3d, 0x0a, 0x0d, 0x6d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x67, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x1a, 0x52, 0x0a, 0x0d, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x42,
	0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x50, 0x0a,
	0x0c, 0x42, 0x75, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x75, 0x66,
	0x66, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x57, 0x0a, 0x0d, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x22, 0x76, 0x0a, 0x11, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x52,
	0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x19, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x0b,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x52, 0x41, 0x4e,
	0x54, 0x5f, 0x42, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x22, 0xf0, 0x02, 0x0a,
	0x0f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65,
	0x78, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x47, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x66, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x42,
	0x69, 0x6e, 0x52, 0x06, 0x66, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x78,
	0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x52,
	0x0e, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2e, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x74, 0x61,
	0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x1b, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x22,
	0xa3, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42,
	0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x10, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x0e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x68,
	0x65, 0x72, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x49, 0x6e,
	0x68, 0x65, 0x72, 0x69, 0x74, 0x22, 0x43, 0x0a, 0x0f, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x0d, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x75,
	0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x5f,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x75, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x47, 0x75, 0x69, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x14, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xc8, 0x01, 0x0a, 0x0f, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x79,
	0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61,
	0x73, 0x53, 0x65, 0x74, 0x42, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x75, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xfc, 0x0d, 0x0a,
	0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x42, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0a, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x5f, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x63, 0x75, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x75, 0x69, 0x64, 0x12,
	0x37, 0x0a, 0x0f, 0x70, 0x62, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x63, 0x75, 0x72, 0x5f, 0x70,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x70, 0x62, 0x4f, 0x6e,
	0x6c, 0x79, 0x43, 0x75, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x37, 0x0a, 0x0f, 0x70, 0x62, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x5f, 0x63, 0x75, 0x72, 0x5f, 0x72, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x42, 0x69, 0x6e, 0x52, 0x0c, 0x70, 0x62, 0x4f, 0x6e, 0x6c, 0x79, 0x43, 0x75, 0x72, 0x52, 0x6f,
	0x74, 0x12, 0x42, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x74, 0x65,
	0x61, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x75, 0x72, 0x54,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12,
	0x69, 0x73, 0x5f, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75,
	0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x53, 0x70, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x75, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x70, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x70, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x75, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x4a, 0x0a, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x64, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x07, 0x52, 0x1e, 0x6c, 0x61,
	0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x75, 0x72, 0x5f, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x53, 0x70, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x66,
	0x6c, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x46, 0x6c, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x75, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68,
	0x6f, 0x6f, 0x73, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x47, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x69, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x69, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x75,
	0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e,
	0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x75, 0x66, 0x66, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54,
	0x65, 0x61, 0x6d, 0x42, 0x75, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x55, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a,
	0x13, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x6f, 0x77, 0x6e, 0x65,
	0x64, 0x46, 0x6c, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a,
	0x15, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x75, 0x66,
	0x66, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x75, 0x66, 0x66, 0x42,
	0x69, 0x6e, 0x52, 0x12, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x75,
	0x66, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74,
	0x75, 0x6d, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x14, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x69,
	0x6e, 0x52, 0x12, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x19, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x15, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x44, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x69, 0x6e, 0x52, 0x10, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x24, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1d, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x72,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x50, 0x0a,
	0x0c, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x65, 0x61,
	0x6d, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x5a, 0x0a, 0x16, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x75, 0x66,
	0x66, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x75, 0x66, 0x66, 0x42, 0x69, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf7, 0x01, 0x0a, 0x08,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x2e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x4c, 0x0a, 0x0d, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6, 0x01, 0x0a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x57, 0x0a, 0x11, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d,
	0x61, 0x70, 0x1a, 0x5a, 0x0a, 0x14, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xca,
	0x01, 0x0a, 0x11, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x42, 0x69, 0x6e, 0x12, 0x59, 0x0a, 0x11, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x1a,
	0x5a, 0x0a, 0x14, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x69, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x01, 0x0a, 0x0f,
	0x4d, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x11, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x50,
	0x0a, 0x0e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e,
	0x2e, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x62, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70,
	0x1a, 0x3f, 0x0a, 0x11, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xf2, 0x01, 0x0a, 0x11, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x6f, 0x73, 0x73, 0x43,
	0x68, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x60, 0x0a, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x6f, 0x73,
	0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x74, 0x61,
	0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x5e, 0x0a, 0x16, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9a, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x48, 0x0a, 0x0c, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x4e, 0x75, 0x6d,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x4e, 0x75,
	0x6d, 0x4d, 0x61, 0x70, 0x1a, 0x3d, 0x0a, 0x0f, 0x44, 0x72, 0x6f, 0x70, 0x4e, 0x75, 0x6d, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x5a, 0x0a, 0x15, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x42, 0x65,
	0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x62,
	0x65, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x62, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x22,
	0x49, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69,
	0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x41, 0x72, 0x65, 0x61, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x60, 0x0a, 0x17, 0x4d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x42, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4e,
	0x75, 0x6d, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62,
	0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x22, 0x56, 0x0a, 0x11,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69,
	0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x61,
	0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x0b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x67,
	0x42, 0x69, 0x6e, 0x12, 0x4b, 0x0a, 0x15, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x67,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x54, 0x61, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x12, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x73, 0x0a, 0x19, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x11, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x42, 0x69, 0x6e, 0x52, 0x0f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x42, 0x69, 0x6e, 0x22, 0x4b, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x68, 0x72, 0x65, 0x74,
	0x4f, 0x62, 0x65, 0x6c, 0x69, 0x73, 0x6b, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x64, 0x22, 0x96, 0x18, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x05, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x12, 0x2d, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63,
	0x75, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12,
	0x27, 0x0a, 0x10, 0x6d, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x79, 0x50, 0x72, 0x65,
	0x76, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0b, 0x6d, 0x79, 0x5f, 0x70,
	0x72, 0x65, 0x76, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x52,
	0x09, 0x6d, 0x79, 0x50, 0x72, 0x65, 0x76, 0x50, 0x6f, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x6d, 0x79,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x72, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69,
	0x6e, 0x52, 0x09, 0x6d, 0x79, 0x50, 0x72, 0x65, 0x76, 0x52, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x0f,
	0x6d, 0x79, 0x5f, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x79, 0x43, 0x75, 0x72, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x6e,
	0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x5a, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x35, 0x0a, 0x17, 0x74,
	0x72, 0x69, 0x76, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x72,
	0x69, 0x76, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x72, 0x6f, 0x70, 0x4e,
	0x75, 0x6d, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x72, 0x69, 0x76, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x15, 0x74, 0x72, 0x69, 0x76, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x14, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x74, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x42, 0x69, 0x6e, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68,
	0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x5a,
	0x0a, 0x11, 0x73, 0x75, 0x62, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x42, 0x69, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x72, 0x6f,
	0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75,
	0x62, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x07, 0x52, 0x10, 0x73, 0x75, 0x62, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x44, 0x72, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0e, 0x6d, 0x79, 0x5f, 0x63,
	0x75, 0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6d, 0x79, 0x43, 0x75, 0x72, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x60, 0x0a,
	0x13, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x12,
	0x5b, 0x0a, 0x12, 0x63, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e,
	0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x6a, 0x0a, 0x17,
	0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x14, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x38, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x8d, 0x01, 0x0a, 0x24, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x61, 0x64,
	0x67, 0x65, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x1f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x44, 0x72,
	0x6f, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x61, 0x70, 0x12, 0x6e, 0x0a, 0x36, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x2e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x53, 0x0a, 0x17, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6b, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x42, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x42, 0x69,
	0x6e, 0x52, 0x14, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x16, 0x6d, 0x79, 0x5f, 0x63, 0x75,
	0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x79, 0x43, 0x75, 0x72, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x14, 0x6d,
	0x79, 0x5f, 0x63, 0x75, 0x72, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x79, 0x43, 0x75, 0x72,
	0x48, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6f,
	0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x6f, 0x62,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x57, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x67, 0x0a, 0x16, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x47, 0x61,
	0x64, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x42, 0x0a, 0x1e, 0x77,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x6e,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1a, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x42, 0x6f, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x12,
	0x4d, 0x0a, 0x24, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x62,
	0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x6c,
	0x61, 0x73, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x42, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x69, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42,
	0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69,
	0x6e, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x59, 0x0a, 0x19, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x42, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4e,
	0x75, 0x6d, 0x42, 0x69, 0x6e, 0x52, 0x16, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x0d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x54, 0x61, 0x67, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54,
	0x61, 0x67, 0x42, 0x69, 0x6e, 0x12, 0x6a, 0x0a, 0x21, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x42,
	0x69, 0x6e, 0x52, 0x1d, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x41, 0x72, 0x65, 0x61, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x48, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x68, 0x72, 0x65, 0x74, 0x5f, 0x6f, 0x62, 0x65, 0x6c,
	0x69, 0x73, 0x6b, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x68, 0x72, 0x65, 0x74, 0x4f, 0x62, 0x65,
	0x6c, 0x69, 0x73, 0x6b, 0x42, 0x69, 0x6e, 0x52, 0x11, 0x64, 0x65, 0x73, 0x68, 0x72, 0x65, 0x74,
	0x4f, 0x62, 0x65, 0x6c, 0x69, 0x73, 0x6b, 0x42, 0x69, 0x6e, 0x1a, 0x5a, 0x0a, 0x14, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x16, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x42,
	0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x42,
	0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x44, 0x72, 0x6f, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x16, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x4e,
	0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x52, 0x0a, 0x24, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x44, 0x72,
	0x6f, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x57, 0x0a, 0x0f, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x4a, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x73, 0x74, 0x54, 0x61, 0x6c,
	0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x6c, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x6c,
	0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x74, 0x61, 0x6c, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xca, 0x02, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x61,
	0x69, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a,
	0x11, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x54, 0x61, 0x6c, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x42, 0x69, 0x6e, 0x52, 0x0f, 0x74, 0x61, 0x6c, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x40, 0x0a,
	0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x12,
	0x2e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x69, 0x6e, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x8f, 0x02, 0x0a, 0x18, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x51, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x4d,
	0x61, 0x70, 0x1a, 0x3d, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xc4, 0x01, 0x0a, 0x1b, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x42, 0x69,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x29, 0x0a,
	0x11, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0xc3, 0x05, 0x0a, 0x0e, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74,
	0x6f, 0x64, 0x61, 0x79, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x16, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x69, 0x72, 0x42, 0x69, 0x6e, 0x52,
	0x13, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61,
	0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x61,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x50, 0x61, 0x69, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x1a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x17, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x57, 0x6f, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x20, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x1d, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x59,
	0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x76, 0x0a, 0x0a, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69,
	0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x6e,
	0x74, 0x22, 0x48, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x11, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x42, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6c, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb9, 0x05, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x32, 0x0a,
	0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69,
	0x6e, 0x12, 0x45, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x1b, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6c,
	0x61, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x42, 0x69, 0x6e, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x6c,
	0x61, 0x73, 0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x4d, 0x61, 0x70, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x62,
	0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x42, 0x69,
	0x6e, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x4b, 0x0a,
	0x15, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x76, 0x61,
	0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x56, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x12, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x18, 0x70, 0x72,
	0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72,
	0x65, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x45, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x47, 0x0a, 0x19, 0x4c, 0x61, 0x73,
	0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x92, 0x01, 0x0a, 0x08, 0x45, 0x71, 0x75, 0x69, 0x70, 0x42, 0x69, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x09,
	0x72, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72,
	0x79, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72,
	0x79, 0x12, 0x2a, 0x0a, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x42, 0x08, 0x0a,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xb7, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x5d, 0x0a,
	0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4e,
	0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x1a, 0x43, 0x0a, 0x15,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x5c, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x69, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x62, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x69, 0x6e, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x22,
	0x24, 0x0a, 0x0c, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xed, 0x01, 0x0a, 0x07, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x69,
	0x6e, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x27, 0x0a,
	0x05, 0x65, 0x71, 0x75, 0x69, 0x70, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x71, 0x75, 0x69, 0x70, 0x12, 0x33, 0x0a, 0x09, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00,
	0x52, 0x09, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x12, 0x0a, 0x10, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x49, 0x74,
	0x65, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x09, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x52, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x5f,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69,
	0x73, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x42, 0x05, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x12, 0x41, 0x75, 0x74,
	0x6f, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x75, 0x67, 0x68,
	0x74, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x75,
	0x67, 0x68, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x76, 0x0a, 0x17, 0x49, 0x74,
	0x65, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x12, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5e, 0x0a,
	0x1c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x42, 0x69, 0x6e, 0x52, 0x18, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xf5, 0x02,
	0x0a, 0x1d, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12,
	0x6b, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42,
	0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x5f, 0x0a, 0x0f,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x1a, 0x44, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4, 0x01, 0x0a, 0x16, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x10,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x69, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0e, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x69, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x7c, 0x0a, 0x18,
	0x53, 0x68, 0x6f, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x75, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x62, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x78, 0x0a, 0x13, 0x53, 0x68,
	0x6f, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69,
	0x6e, 0x12, 0x61, 0x0a, 0x1d, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x68, 0x6f, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x19, 0x73, 0x68, 0x6f, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x18, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x15, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xde, 0x01, 0x0a,
	0x19, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x69, 0x74, 0x65,
	0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5e, 0x0a,
	0x1c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x42, 0x69, 0x6e, 0x52, 0x18, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x90, 0x01,
	0x0a, 0x1c, 0x52, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x75, 0x70, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x51, 0x0a,
	0x1a, 0x72, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x75, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x50, 0x61, 0x69, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x17, 0x72, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61,
	0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x75, 0x70, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xa4, 0x02, 0x0a, 0x15, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x75,
	0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x4b, 0x0a, 0x17, 0x77, 0x65,
	0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x75, 0x70, 0x5f, 0x6e, 0x75, 0x6d,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x69, 0x72, 0x42, 0x69,
	0x6e, 0x52, 0x14, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x75, 0x70,
	0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x1f, 0x77, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x75,
	0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50,
	0x61, 0x69, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x1b, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x75, 0x70, 0x4e, 0x75, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x1b, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x6c, 0x69,
	0x71, 0x75, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x75, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x75,
	0x70, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x18, 0x72,
	0x61, 0x6e, 0x6b, 0x52, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x69,
	0x71, 0x75, 0x61, 0x72, 0x79, 0x53, 0x75, 0x69, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11,
	0x72, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61,
	0x72, 0x79, 0x53, 0x75, 0x69, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2e,
	0x0a, 0x13, 0x72, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x6c,
	0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x94,
	0x01, 0x0a, 0x1c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12,
	0x2e, 0x0a, 0x13, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x44, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x69, 0x72, 0x42,
	0x69, 0x6e, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe0, 0x01, 0x0a, 0x1e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6d, 0x0a, 0x21, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x1d, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x6c,
	0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x47, 0x75,
	0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x20,
	0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x69, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x6c,
	0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x44,
	0x65, 0x70, 0x6f, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x75, 0x61, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x44, 0x65,
	0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x1d, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x4d, 0x61,
	0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x19, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70,
	0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x87, 0x0f, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x69, 0x6e,
	0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x63, 0x6f, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x68, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x69, 0x6e, 0x12, 0x47, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x64, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x42,
	0x69, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x3c, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x72,
	0x65, 0x73, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x4e, 0x0a, 0x16, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x13, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x1c, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50,
	0x61, 0x69, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x18, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x67, 0x0a, 0x1d, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x1a, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x6f, 0x0a, 0x19, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x16, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x61,
	0x69, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x68, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x53, 0x75, 0x62, 0x48, 0x63, 0x6f, 0x69, 0x6e,
	0x12, 0x24, 0x0a, 0x0e, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x63, 0x6f,
	0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x53, 0x75,
	0x62, 0x53, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x64, 0x0a, 0x1e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e,
	0x52, 0x1a, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x18,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x75, 0x70, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x15, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x42, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6d, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x53, 0x75, 0x62, 0x4d, 0x63, 0x6f, 0x69, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72,
	0x79, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x69, 0x71, 0x75,
	0x61, 0x72, 0x79, 0x53, 0x75, 0x69, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x69,
	0x71, 0x75, 0x61, 0x72, 0x79, 0x53, 0x75, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a,
	0x12, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x41, 0x0a, 0x11, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x0f, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x73, 0x0a, 0x23, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x1f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x12,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x6f,
	0x69, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x77, 0x61, 0x69, 0x74, 0x53, 0x75,
	0x62, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x73, 0x6e,
	0x5f, 0x6d, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x73,
	0x6e, 0x4d, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x12, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x73,
	0x75, 0x62, 0x5f, 0x70, 0x73, 0x6e, 0x5f, 0x6d, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x77, 0x61, 0x69, 0x74, 0x53, 0x75, 0x62, 0x50, 0x73, 0x6e, 0x4d, 0x63,
	0x6f, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x70, 0x73, 0x6e, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x50, 0x73, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x66, 0x0a, 0x1e, 0x72, 0x65, 0x6c, 0x69, 0x71, 0x75,
	0x61, 0x72, 0x79, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x5f, 0x64, 0x65,
	0x70, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72, 0x79,
	0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x42, 0x69,
	0x6e, 0x52, 0x1b, 0x72, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x47, 0x75, 0x61, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53,
	0x0a, 0x1b, 0x72, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x50, 0x61, 0x69, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x18, 0x72, 0x65, 0x6c, 0x69, 0x71,
	0x75, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0x3c, 0x0a, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x64, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x68, 0x0a, 0x1b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xae, 0x01, 0x0a, 0x15,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x54, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x65, 0x73,
	0x74, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x61, 0x70, 0x1a, 0x3f, 0x0a, 0x11, 0x43,
	0x68, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6d, 0x0a, 0x10,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x16, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0b,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x17, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x22, 0xe8, 0x04, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x5e,
	0x0a, 0x11, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61, 0x70, 0x12, 0x64,
	0x0a, 0x13, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x11, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x61, 0x70, 0x12, 0x61, 0x0a, 0x12, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x2e,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x4d, 0x61, 0x70, 0x1a, 0x5b, 0x0a, 0x14, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x16, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x15, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x53,
	0x0a, 0x19, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x42,
	0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x6b, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74,
	0x61, 0x6b, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x74, 0x61, 0x6b, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x81, 0x06, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x75, 0x72, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x6a,
	0x6f, 0x69, 0x6e, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x61, 0x64, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x12,
	0x38, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x65, 0x65,
	0x6b, 0x6c, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x65, 0x65, 0x6b,
	0x6c, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x66, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x62,
	0x6f, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e,
	0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x32, 0x0a, 0x16,
	0x69, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x71, 0x75, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73,
	0x48, 0x61, 0x73, 0x51, 0x75, 0x69, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x73,
	0x12, 0x22, 0x0a, 0x0d, 0x71, 0x75, 0x69, 0x74, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x71, 0x75, 0x69, 0x74, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x71, 0x75, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x07, 0x71, 0x75, 0x69, 0x74, 0x50, 0x6f,
	0x73, 0x12, 0x2b, 0x0a, 0x08, 0x71, 0x75, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x07, 0x71, 0x75, 0x69, 0x74, 0x52, 0x6f, 0x74, 0x1a, 0x67,
	0x0a, 0x17, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73,
	0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x42, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x72, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4d, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x70, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x37, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6d, 0x70, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x4d, 0x70, 0x57, 0x69,
	0x74, 0x68, 0x50, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x34, 0x0a, 0x11, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x69, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x4d, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x42, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x42, 0x69, 0x6e, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x35, 0x0a, 0x11, 0x43, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xcd, 0x03, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x53, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6f, 0x6b, 0x43, 0x6f,
	0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x14, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x42, 0x69, 0x6e,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75,
	0x6e, 0x64, 0x51, 0x75, 0x65, 0x42, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x1a, 0x5a, 0x0a, 0x12, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5d, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x42, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7, 0x02, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x42, 0x0a,
	0x1e, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1a, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x72, 0x65, 0x63, 0x76,
	0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x5f, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1f, 0x72, 0x65, 0x63, 0x76, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x21, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x76, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x1d, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x76, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x57, 0x0a, 0x10, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x45, 0x78,
	0x65, 0x42, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x4d, 0x73, 0x67, 0x42, 0x69, 0x6e, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x78, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x65, 0x78, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x17, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x43, 0x6f,
	0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4a, 0x0a, 0x15, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x45, 0x78, 0x65,
	0x42, 0x69, 0x6e, 0x52, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x6f, 0x72, 0x6e, 0x5f,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x62, 0x6f, 0x72, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x62,
	0x6f, 0x72, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x52,
	0x07, 0x62, 0x6f, 0x72, 0x6e, 0x50, 0x6f, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x10, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x12, 0x22, 0x0a,
	0x0d, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x64, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x16, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x79, 0x63, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x74, 0x0a,
	0x1b, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x69, 0x74, 0x79, 0x43, 0x79,
	0x63, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x79, 0x63, 0x6c, 0x65,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xde, 0x05, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x69, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x73,
	0x75, 0x72, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x13, 0x70,
	0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x70, 0x6f, 0x73,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f,
	0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x61, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70,
	0x42, 0x69, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x61, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x56, 0x61, 0x72, 0x4d, 0x61, 0x70, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x24,
	0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x43, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x69, 0x6e, 0x52, 0x0e, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0x4f, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x61, 0x72, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x60, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x22, 0x81, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x54,
	0x61, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x9e, 0x02, 0x0a, 0x1a, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x46, 0x0a, 0x12, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x52, 0x11,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x14, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x17, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x1f, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x64,
	0x61, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x69, 0x73, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x63, 0x6b, 0x22, 0x32, 0x0a, 0x11, 0x53,
	0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xc5, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f,
	0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65,
	0x61, 0x5f, 0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2a,
	0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x75, 0x63,
	0x69, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x42, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x48, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x22, 0xae, 0x01, 0x0a, 0x13, 0x43, 0x72,
	0x75, 0x63, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c,
	0x0a, 0x14, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x75, 0x63, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x11, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x55, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xa2, 0x01, 0x0a, 0x1d, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x15,
	0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22,
	0x90, 0x01, 0x0a, 0x16, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x10, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xf3, 0x04, 0x0a, 0x13, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x21, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x1d, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x22, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1e, 0x6f, 0x62, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x54, 0x61, 0x6c, 0x6b, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x68, 0x0a,
	0x16, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x13, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x52, 0x0a, 0x1b, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x69, 0x72, 0x42,
	0x69, 0x6e, 0x52, 0x17, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x61, 0x73,
	0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x44, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x1a, 0x46, 0x0a, 0x18, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x0e, 0x41, 0x73, 0x74, 0x65,
	0x72, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0xbb, 0x01, 0x0a, 0x0b, 0x41, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x42, 0x69, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x43, 0x61, 0x6d, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x28, 0x0a,
	0x0d, 0x41, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x55, 0x0a, 0x10, 0x41, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61,
	0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xdb,
	0x02, 0x0a, 0x10, 0x41, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x42, 0x69, 0x6e,
	0x52, 0x0b, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x2f, 0x0a,
	0x09, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x69,
	0x64, 0x42, 0x69, 0x6e, 0x52, 0x08, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x12, 0x35,
	0x0a, 0x0b, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x74, 0x65,
	0x72, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0a, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74,
	0x61, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x22, 0xbf, 0x01, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x69, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x58, 0x0a, 0x2a, 0x63, 0x75, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x5f,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x24, 0x63, 0x75, 0x72, 0x44, 0x61, 0x79,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x54,
	0x0a, 0x14, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x54, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0x5c, 0x0a, 0x11, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x47, 0x0a, 0x11, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69,
	0x6e, 0x52, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xd9, 0x01, 0x0a, 0x15, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x53, 0x70, 0x69,
	0x6e, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x32, 0x0a,
	0x15, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5d,
	0x0a, 0x19, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x53, 0x70, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x6e,
	0x44, 0x72, 0x6f, 0x70, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x40, 0x0a, 0x11, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x69, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0f, 0x64, 0x72,
	0x6f, 0x70, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc1, 0x03,
	0x0a, 0x16, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x53, 0x70, 0x69, 0x6e, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x65, 0x61, 0x70,
	0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x45, 0x6e,
	0x68, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x53,
	0x70, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x73,
	0x68, 0x69, 0x6d, 0x6d, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x68, 0x69, 0x6d, 0x6d, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61,
	0x72, 0x6d, 0x5f, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x77, 0x61, 0x72, 0x6d, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x77, 0x6f, 0x6e, 0x64, 0x72, 0x6f, 0x75, 0x73, 0x5f, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x77, 0x6f, 0x6e, 0x64, 0x72, 0x6f, 0x75,
	0x73, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x18, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x53, 0x70, 0x69, 0x6e, 0x65, 0x42, 0x61,
	0x6e, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x15, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x65, 0x61, 0x70,
	0x6f, 0x6e, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x47, 0x75, 0x69,
	0x64, 0x22, 0xc2, 0x01, 0x0a, 0x14, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61,
	0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64,
	0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x73,
	0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x22, 0xc1, 0x01, 0x0a, 0x11, 0x45, 0x66, 0x66, 0x69, 0x67,
	0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x47, 0x0a, 0x11,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x42, 0x69, 0x6e, 0x52, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x84, 0x03, 0x0a, 0x14, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x0e, 0x64,
	0x6f, 0x6e, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e,
	0x2e, 0x44, 0x6f, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x64, 0x6f, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70,
	0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2f,
	0x0a, 0x14, 0x69, 0x73, 0x5f, 0x6d, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73,
	0x4d, 0x70, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x12,
	0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x6d, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69,
	0x73, 0x4d, 0x70, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x6e, 0x65,
	0x1a, 0x3f, 0x0a, 0x11, 0x44, 0x6f, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xb6, 0x02, 0x0a, 0x1c, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61,
	0x70, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42,
	0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x69, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x57, 0x0a, 0x0c, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x2e, 0x46, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x1a, 0x3e, 0x0a, 0x10, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9e, 0x03, 0x0a, 0x16, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x4a, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d,
	0x61, 0x70, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x42, 0x69, 0x6e, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x6d, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x4d, 0x70, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x18, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x61, 0x6b, 0x65,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x68, 0x6f, 0x73,
	0x74, 0x4d, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x4e, 0x75,
	0x6d, 0x12, 0x38, 0x0a, 0x19, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x70, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x67, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x70, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x4e, 0x75, 0x6d, 0x22, 0xd7, 0x04, 0x0a, 0x15,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x4d, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x44, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x44, 0x61, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x3c, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x74,
	0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x48, 0x61, 0x73,
	0x54, 0x61, 0x6b, 0x65, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x1b, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x18, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3f, 0x0a, 0x1c, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x19, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x43, 0x0a, 0x1e, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1b, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x17, 0x6f, 0x62, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x74,
	0x61, 0x6c, 0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x12, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x6c, 0x6b, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8b, 0x03, 0x0a, 0x15, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x55, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x10, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d,
	0x65, 0x49, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x1a, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x22, 0xc9, 0x04, 0x0a, 0x15, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x2a,
	0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65,
	0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4e,
	0x0a, 0x12, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x10, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51,
	0x0a, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x11,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72,
	0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12,
	0x2f, 0x0a, 0x14, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x7d, 0x0a, 0x16, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x61, 0x6e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x22,
	0x6d, 0x0a, 0x13, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x76, 0x50,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x69, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x52, 0x65, 0x63, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xea,
	0x05, 0x0a, 0x13, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x61, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x5b, 0x0a, 0x1b, 0x63, 0x75, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x73,
	0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x61, 0x6e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x17, 0x63, 0x75, 0x72, 0x44, 0x61, 0x79, 0x53,
	0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x61, 0x6e,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x44,
	0x61, 0x79, 0x53, 0x63, 0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x70, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x75, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x49, 0x0a,
	0x0b, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x2e, 0x50,
	0x69, 0x63, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70,
	0x69, 0x63, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x5f, 0x64,
	0x61, 0x79, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x75, 0x72, 0x44, 0x61, 0x79, 0x53, 0x63, 0x61,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x69, 0x63, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x69, 0x63, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x75, 0x6e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e,
	0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11,
	0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x47, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x76,
	0x5f, 0x70, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x76, 0x50, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0f, 0x72, 0x65, 0x63, 0x76, 0x50, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x1a, 0x3c, 0x0a,
	0x0e, 0x50, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x34, 0x0a, 0x13, 0x46,
	0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x42,
	0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0x31, 0x0a, 0x10, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x46, 0x61,
	0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0x70, 0x0a, 0x17, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69,
	0x72, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xdf, 0x01, 0x0a, 0x11, 0x46, 0x6c, 0x65, 0x75, 0x72,
	0x46, 0x61, 0x69, 0x72, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x12, 0x63, 0x0a, 0x15,
	0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x4d, 0x75, 0x73,
	0x69, 0x63, 0x42, 0x69, 0x6e, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x6d,
	0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x61,
	0x70, 0x1a, 0x65, 0x0a, 0x17, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x4d,
	0x75, 0x73, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x88, 0x02, 0x0a, 0x14, 0x46, 0x6c, 0x65,
	0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x42, 0x69,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x0b, 0x62,
	0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61,
	0x69, 0x72, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0a,
	0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x66, 0x61,
	0x6c, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x46, 0x61,
	0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x6c, 0x6c, 0x42, 0x69, 0x6e,
	0x12, 0x37, 0x0a, 0x09, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75,
	0x72, 0x46, 0x61, 0x69, 0x72, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52,
	0x08, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x22, 0x58, 0x0a, 0x1e, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0xff, 0x04,
	0x0a, 0x14, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x12, 0x4f, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x69, 0x6e, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x61,
	0x70, 0x12, 0x62, 0x0a, 0x13, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x2e, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x11, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x5f, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x5b, 0x0a, 0x10, 0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d,
	0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x4d, 0x69, 0x6e, 0x69,
	0x67, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x6b, 0x0a, 0x16, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x6a, 0x0a, 0x18, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x53, 0x63, 0x68, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x13,
	0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x41, 0x6e, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xb8, 0x01, 0x0a, 0x16,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x70, 0x69,
	0x72, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x22, 0x48, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x42, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63,
	0x61, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x8a, 0x01, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53,
	0x6c, 0x61, 0x62, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x48, 0x0a, 0x0e, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x73, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x22, 0xa5, 0x01,
	0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62,
	0x42, 0x75, 0x66, 0x66, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x4a, 0x0a,
	0x08, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x42, 0x75, 0x66, 0x66, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x42, 0x69, 0x6e, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x4d, 0x61, 0x70, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x6c, 0x6f,
	0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6b, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x42, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x22, 0xa1, 0x02, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x53, 0x6c, 0x61, 0x62, 0x42, 0x75, 0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e,
	0x12, 0x20, 0x0a, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x50, 0x0a, 0x12, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x66,
	0x66, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x53, 0x6c, 0x61, 0x62, 0x42, 0x75, 0x66, 0x66, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x42,
	0x69, 0x6e, 0x52, 0x10, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x75, 0x66, 0x66, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x6d, 0x70, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53,
	0x6c, 0x61, 0x62, 0x42, 0x75, 0x66, 0x66, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x42, 0x69, 0x6e,
	0x52, 0x0c, 0x6d, 0x70, 0x42, 0x75, 0x66, 0x66, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x46,
	0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x42,
	0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74,
	0x61, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b,
	0x65, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e,
	0x22, 0xf6, 0x01, 0x0a, 0x21, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53,
	0x6c, 0x61, 0x62, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x53, 0x0a, 0x11, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x0f, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x61, 0x6b,
	0x65, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x61, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x88, 0x02, 0x0a, 0x19, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c,
	0x61, 0x62, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x42,
	0x75, 0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x56, 0x0a, 0x12, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x10, 0x6c, 0x6f, 0x6f, 0x70,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x22, 0x75, 0x0a, 0x16, 0x4d, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x42, 0x65, 0x73, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x22, 0xde, 0x02, 0x0a, 0x11,
	0x4d, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x10,
	0x62, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x65, 0x73, 0x74, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x69,
	0x74, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x42, 0x65, 0x73, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x62,
	0x65, 0x73, 0x74, 0x48, 0x69, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x56, 0x0a, 0x14,
	0x4d, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x62, 0x69,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xb4, 0x04, 0x0a, 0x16, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64,
	0x53, 0x65, 0x65, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12,
	0x65, 0x0a, 0x14, 0x68, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x65,
	0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x2e, 0x48, 0x69, 0x64,
	0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x11, 0x68, 0x69, 0x64, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x68, 0x0a, 0x15, 0x68, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x69,
	0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x69, 0x6e, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x68, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x70,
	0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x4f, 0x70,
	0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x68, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e,
	0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x6e, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x70,
	0x70, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x44,
	0x0a, 0x16, 0x48, 0x69, 0x64, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x6c,
	0x6f, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x74, 0x0a, 0x18, 0x46,
	0x69, 0x6e, 0x64, 0x48, 0x69, 0x6c, 0x69, 0x63, 0x68, 0x75, 0x72, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x61, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x22, 0x48, 0x0a, 0x12, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x57, 0x0a, 0x17, 0x53,
	0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x42,
	0x6f, 0x61, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x54, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x64, 0x22, 0x82, 0x05, 0x0a, 0x15, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x51,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75,
	0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x69, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x4d, 0x61,
	0x70, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x39, 0x0a,
	0x19, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x75, 0x6e, 0x6c, 0x63,
	0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x73, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x75, 0x6e, 0x6c, 0x63, 0x6f,
	0x6b, 0x65, 0x64, 0x4d, 0x69, 0x73, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c,
	0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x6e, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x77, 0x6f, 0x6f, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x72, 0x61, 0x66, 0x74, 0x57, 0x6f, 0x6f, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x69, 0x5f, 0x68, 0x61, 0x72, 0x70, 0x61, 0x73, 0x74,
	0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x48, 0x61,
	0x72, 0x70, 0x61, 0x73, 0x74, 0x75, 0x6d, 0x12, 0x48, 0x0a, 0x10, 0x73, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x5f, 0x62, 0x6f, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x42, 0x6f, 0x61, 0x74, 0x42, 0x69,
	0x6e, 0x52, 0x0e, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x42, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x5f, 0x6d, 0x69, 0x73, 0x74,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x73, 0x53, 0x65, 0x61, 0x4d, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x1a, 0x59,
	0x0a, 0x10, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6d,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x59, 0x0a, 0x19, 0x42, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x1a, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x69, 0x6e, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x22, 0x3c, 0x0a, 0x1b, 0x42, 0x75, 0x6f, 0x79,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x73,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x6a, 0x0a, 0x18, 0x42, 0x75, 0x6f, 0x79, 0x61, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42,
	0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x11, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6f, 0x79, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69,
	0x6e, 0x52, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x14, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61,
	0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f,
	0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xee, 0x01, 0x0a, 0x14, 0x45, 0x63, 0x68, 0x6f, 0x53, 0x68, 0x65, 0x6c, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x6b, 0x65, 0x6e,
	0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0e, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x54, 0x0a, 0x18, 0x73, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6d,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42, 0x69, 0x6e,
	0x52, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xbf, 0x03, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x78, 0x70,
	0x12, 0x39, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x54, 0x65, 0x61, 0x63, 0x68, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x65, 0x0a, 0x16, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x65, 0x78,
	0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x69, 0x6e, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x45, 0x78, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x78, 0x70, 0x4d,
	0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x61,
	0x70, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x75, 0x6e, 0x69, 0x73,
	0x68, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x1a, 0x46, 0x0a,
	0x18, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x78,
	0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x47, 0x0a, 0x11, 0x42, 0x6c, 0x69, 0x74, 0x7a, 0x52, 0x75,
	0x73, 0x68, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x75,
	0x0a, 0x1e, 0x42, 0x6c, 0x69, 0x74, 0x7a, 0x52, 0x75, 0x73, 0x68, 0x50, 0x61, 0x72, 0x6b, 0x6f,
	0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xc2, 0x02, 0x0a, 0x14, 0x42, 0x6c, 0x69, 0x74, 0x7a, 0x52,
	0x75, 0x73, 0x68, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x15,
	0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x63, 0x6f, 0x69, 0x6e, 0x41, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x69, 0x74, 0x7a, 0x52, 0x75,
	0x73, 0x68, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x19, 0x70, 0x61, 0x72, 0x6b,
	0x6f, 0x75, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x69, 0x74, 0x7a, 0x52, 0x75, 0x73, 0x68, 0x50, 0x61, 0x72,
	0x6b, 0x6f, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42,
	0x69, 0x6e, 0x52, 0x16, 0x70, 0x61, 0x72, 0x6b, 0x6f, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73,
	0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x6f, 0x0a, 0x0d, 0x53, 0x75,
	0x6d, 0x6f, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6e,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x22, 0x6f, 0x0a, 0x0b, 0x53,
	0x75, 0x6d, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x0f, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6f,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x90, 0x01, 0x0a,
	0x0c, 0x53, 0x75, 0x6d, 0x6f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x2f,
	0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6f, 0x54, 0x65,
	0x61, 0x6d, 0x42, 0x69, 0x6e, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x95, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x6d, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x14, 0x4c, 0x75, 0x6e, 0x61, 0x52,
	0x69, 0x74, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x0f, 0x4c, 0x75, 0x6e, 0x61, 0x52, 0x69, 0x74,
	0x65, 0x41, 0x72, 0x65, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x61, 0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x61, 0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x61, 0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x13, 0x73, 0x61, 0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x68, 0x69, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x68, 0x65, 0x73, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x75, 0x6e, 0x65, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x75, 0x6e, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x22, 0xe9, 0x01, 0x0a, 0x13, 0x4c, 0x75, 0x6e, 0x61, 0x52, 0x69,
	0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x3a, 0x0a,
	0x0d, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x75, 0x6e,
	0x61, 0x52, 0x69, 0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x61, 0x72,
	0x65, 0x61, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x13, 0x68, 0x69, 0x6e,
	0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x75, 0x6e, 0x61, 0x52, 0x69, 0x74, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x42, 0x69, 0x6e, 0x52, 0x10, 0x68, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x69,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68,
	0x65, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x74, 0x6d, 0x6f, 0x73,
	0x70, 0x68, 0x65, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x61, 0x0a, 0x1a, 0x4d, 0x6f, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x17, 0x4d, 0x6f, 0x6f, 0x6e, 0x66, 0x69, 0x6e,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e,
	0x12, 0x66, 0x0a, 0x1e, 0x6d, 0x6f, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x74, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x6f, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x1b, 0x6d, 0x6f, 0x6f,
	0x6e, 0x66, 0x69, 0x6e, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x73,
	0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xce, 0x01, 0x0a, 0x1c, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x63, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x0e, 0x66, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x63, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x1a, 0x3f, 0x0a, 0x11, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe3, 0x01, 0x0a, 0x21, 0x48, 0x6f, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x0e, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x1a, 0x3f, 0x0a, 0x11,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7a, 0x0a,
	0x1b, 0x48, 0x6f, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x5b, 0x0a, 0x15,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x73,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x73, 0x65,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x1b, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x65, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x65, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x65, 0x64, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x13, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10,
	0x68, 0x6f, 0x6d, 0x65, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xed, 0x01, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x53, 0x68, 0x65, 0x6c, 0x66, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x10,
	0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x75, 0x73, 0x65, 0x64, 0x46,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x1a, 0x43, 0x0a, 0x15, 0x55,
	0x73, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x9a, 0x08, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x44, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x65, 0x64, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x13, 0x77, 0x69, 0x73, 0x68, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x69, 0x6e, 0x2e, 0x57, 0x69, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x77, 0x69, 0x73, 0x68, 0x46,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x56, 0x0a, 0x15, 0x72,
	0x65, 0x63, 0x76, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x52,
	0x12, 0x72, 0x65, 0x63, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12,
	0x7b, 0x0a, 0x1c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65,
	0x64, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x18, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x64,
	0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x55, 0x0a, 0x15,
	0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x52,
	0x12, 0x68, 0x6f, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x14, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x65, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x11, 0x73, 0x65, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x16, 0x66, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x68, 0x65, 0x6c,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x13, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x53, 0x68, 0x65, 0x6c, 0x66, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a,
	0x1f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1b, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x4f, 0x62, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x62,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1c, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x43, 0x0a, 0x15, 0x57,
	0x69, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x4b, 0x0a, 0x1d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x64,
	0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6b, 0x0a,
	0x12, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xe6, 0x02, 0x0a, 0x13, 0x4d,
	0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x67, 0x63, 0x53, 0x61, 0x76, 0x65, 0x42,
	0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x67, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x75, 0x67, 0x63, 0x47, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x76, 0x65,
	0x5f, 0x69, 0x64, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x61, 0x76, 0x65,
	0x49, 0x64, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x61, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x75, 0x67, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x67, 0x63, 0x47,
	0x75, 0x69, 0x64, 0x22, 0xca, 0x02, 0x0a, 0x15, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d,
	0x65, 0x55, 0x67, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x75, 0x67, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x75, 0x67, 0x63, 0x47, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x75, 0x73, 0x69,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x75, 0x73, 0x69,
	0x63, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x70, 0x73,
	0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x73, 0x50, 0x73, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x2f, 0x0a, 0x14, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75,
	0x67, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x67, 0x63, 0x47, 0x75, 0x69, 0x64,
	0x22, 0x60, 0x0a, 0x13, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x67, 0x63,
	0x50, 0x6c, 0x61, 0x79, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x67, 0x63, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x75, 0x67, 0x63, 0x47, 0x75,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0xb6, 0x04, 0x0a, 0x14, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x66, 0x0a, 0x15, 0x6d,
	0x75, 0x73, 0x69, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x12, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4d, 0x61, 0x70, 0x12, 0x50, 0x0a, 0x17, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x75, 0x67, 0x63, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x73,
	0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x67, 0x63, 0x53, 0x61, 0x76, 0x65, 0x42, 0x69, 0x6e,
	0x52, 0x13, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x67, 0x63, 0x53, 0x61,
	0x76, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x56, 0x0a, 0x19, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x75, 0x67, 0x63, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x62,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x67, 0x63, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x42, 0x69, 0x6e, 0x52, 0x15, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d,
	0x65, 0x55, 0x67, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x69, 0x6e, 0x12, 0x50, 0x0a,
	0x17, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x67, 0x63, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65,
	0x55, 0x67, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x69, 0x6e, 0x52, 0x13, 0x6d, 0x75, 0x73, 0x69,
	0x63, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x67, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x69, 0x6e, 0x12,
	0x36, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x61, 0x6c, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x43, 0x6f,
	0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63,
	0x75, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4e, 0x6f, 0x1a, 0x60, 0x0a, 0x17, 0x4d, 0x75, 0x73,
	0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75,
	0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3d, 0x0a, 0x15, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x53, 0x68, 0x69, 0x6b, 0x69, 0x67, 0x61, 0x6d,
	0x69, 0x42, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x78, 0x0a, 0x17, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x75,
	0x6e, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x48, 0x0a, 0x17, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b,
	0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4b,
	0x0a, 0x18, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x43, 0x75, 0x72, 0x73, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x75,
	0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x47, 0x0a, 0x1d, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x47, 0x56, 0x42, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xba, 0x08, 0x0a, 0x10, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69,
	0x6b, 0x65, 0x4d, 0x69, 0x73, 0x63, 0x42, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72,
	0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x42, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x75, 0x6e,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x52, 0x75, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x12, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61,
	0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x75,
	0x72, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x73, 0x65, 0x42, 0x69, 0x6e, 0x52,
	0x09, 0x63, 0x75, 0x72, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x10, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x73, 0x67, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x53, 0x47, 0x56, 0x42, 0x69, 0x6e, 0x52, 0x0e, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x53, 0x67, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x61,
	0x63, 0x68, 0x61, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0d, 0x67, 0x61, 0x63, 0x68, 0x61, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x3e, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x43, 0x65,
	0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x6f, 0x68, 0x65, 0x61, 0x6c, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e,
	0x6e, 0x6f, 0x68, 0x65, 0x61, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x63, 0x75, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x52, 0x61, 0x6e, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x64, 0x43, 0x75, 0x72, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x64,
	0x64, 0x5f, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x04, 0x52, 0x11, 0x61, 0x64, 0x64, 0x54, 0x61, 0x6c,
	0x65, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x1a, 0x63,
	0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b,
	0x65, 0x4d, 0x69, 0x73, 0x63, 0x42, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x43,
	0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x33, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x75, 0x73, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x46, 0x72, 0x65,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x49, 0x0a, 0x1b, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e,
	0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x42,
	0x69, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x15, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x47, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x62,
	0x61, 0x63, 0x6b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x17, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x47, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd3, 0x02, 0x0a, 0x0c, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x15, 0x64,
	0x69, 0x66, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x2e,
	0x44, 0x69, 0x66, 0x66, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x64, 0x69, 0x66, 0x66, 0x4d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x3a, 0x0a, 0x1a, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x16, 0x67, 0x75, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x45, 0x0a, 0x17, 0x44, 0x69, 0x66, 0x66, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x72,
	0x0a, 0x13, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61,
	0x69, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x22, 0xd0, 0x09, 0x0a, 0x0f, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x2e, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x42, 0x69,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x75, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x38, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x52,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x38,
	0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x6f,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63,
	0x75, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x12, 0x72, 0x6f, 0x67, 0x75,
	0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x2e, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0f, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x4d,
	0x61, 0x70, 0x12, 0x3b, 0x0a, 0x0e, 0x62, 0x72, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x69, 0x72, 0x42, 0x69, 0x6e,
	0x52, 0x0d, 0x62, 0x72, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x50, 0x61, 0x69, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x08, 0x74, 0x72, 0x61, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x40, 0x0a, 0x11, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x69, 0x72,
	0x42, 0x69, 0x6e, 0x52, 0x0f, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x6c,
	0x65, 0x61, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x54, 0x65,
	0x6d, 0x70, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5e,
	0x0a, 0x1e, 0x62, 0x72, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42,
	0x69, 0x6e, 0x52, 0x1a, 0x62, 0x72, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x56,
	0x0a, 0x1a, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x67, 0x61, 0x64,
	0x67, 0x65, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x16,
	0x74, 0x72, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x42,
	0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x1b, 0x62, 0x79, 0x6f, 0x62, 0x75, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x69, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x17, 0x62, 0x79, 0x6f, 0x62, 0x75, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x56, 0x0a, 0x1a, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x67,
	0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x6e,
	0x52, 0x16, 0x62, 0x61, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x61, 0x64, 0x67, 0x65,
	0x74, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x62,
	0x61, 0x6e, 0x5f, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x42, 0x61, 0x6e, 0x53, 0x70, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x57, 0x0a, 0x14,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x62, 0x0a, 0x17, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x69,
	0x6e, 0x42, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x43, 0x22, 0xd4, 0x0d, 0x0a, 0x0d, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e,
	0x43, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x6d, 0x61, 0x78, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x6b,
	0x65, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x33,
	0x0a, 0x16, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x69, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x78, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x78, 0x70, 0x6c,
	0x6f, 0x72, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x4e, 0x75, 0x6d, 0x12,
	0x29, 0x0a, 0x11, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x4e, 0x75, 0x6d, 0x12, 0x49, 0x0a, 0x16, 0x64, 0x65,
	0x61, 0x64, 0x5f, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x69, 0x72, 0x42, 0x69, 0x6e,
	0x52, 0x13, 0x64, 0x65, 0x61, 0x64, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x55, 0x73, 0x65, 0x64, 0x53, 0x70, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x72,
	0x0a, 0x1c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x45,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x61, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x64, 0x65, 0x61, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x44, 0x65, 0x61, 0x64, 0x12, 0x78, 0x0a, 0x1e, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d,
	0x61, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x68, 0x0a, 0x18, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x62,
	0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42,
	0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x42, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x69,
	0x6e, 0x4d, 0x61, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x13, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75,
	0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x10, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x61,
	0x70, 0x12, 0x62, 0x0a, 0x16, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x64,
	0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x13, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x68, 0x61, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x64, 0x1a, 0x4b, 0x0a,
	0x1d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x43, 0x65, 0x6c,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x1f, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x68, 0x0a, 0x1a, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x43, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x45, 0x78, 0x70, 0x6c,
	0x6f, 0x72, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xa6, 0x04, 0x0a, 0x1b, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a,
	0x0e, 0x73, 0x68, 0x69, 0x6b, 0x69, 0x67, 0x61, 0x6d, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x53, 0x68, 0x69, 0x6b, 0x69, 0x67, 0x61, 0x6d, 0x69,
	0x42, 0x69, 0x6e, 0x52, 0x0d, 0x73, 0x68, 0x69, 0x6b, 0x69, 0x67, 0x61, 0x6d, 0x69, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x6f, 0x69,
	0x6e, 0x5f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x42,
	0x12, 0x15, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x43, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x52, 0x75, 0x6e,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x6d, 0x69, 0x73, 0x63, 0x5f, 0x62, 0x69,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x4d, 0x69, 0x73, 0x63, 0x42, 0x69, 0x6e,
	0x52, 0x07, 0x6d, 0x69, 0x73, 0x63, 0x42, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x13, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x52, 0x11, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x69,
	0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6e, 0x6f, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x4e, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x11, 0x57, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x72,
	0x6f, 0x70, 0x49, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x14, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43,
	0x61, 0x6d, 0x70, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x42, 0x0a, 0x10, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x43, 0x61, 0x6d, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0e, 0x64, 0x72,
	0x6f, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x13,
	0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x42, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x22, 0x40, 0x0a, 0x11, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61,
	0x6d, 0x70, 0x52, 0x61, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x62, 0x0a, 0x15, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x43, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x63, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x37, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x69,
	0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x71, 0x0a, 0x19, 0x57, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x48, 0x6f, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x69, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x69, 0x6e,
	0x52, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x74, 0x0a,
	0x1c, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x53, 0x6e, 0x6f, 0x77, 0x6d,
	0x61, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x95, 0x06, 0x0a, 0x15, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61,
	0x6d, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x6f, 0x69,
	0x6e, 0x5f, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x41,
	0x12, 0x15, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x67, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x64, 0x72, 0x6f, 0x70, 0x47, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3c, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x43, 0x61, 0x6d, 0x70, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61,
	0x6d, 0x70, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x09, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x62,
	0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70,
	0x52, 0x61, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x72, 0x61, 0x63, 0x65, 0x42, 0x69, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43,
	0x61, 0x6d, 0x70, 0x52, 0x65, 0x63, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x52, 0x0f,
	0x72, 0x65, 0x63, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x11, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x77, 0x69, 0x73, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x1c, 0x74, 0x61,
	0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x18, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x74, 0x61,
	0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x17, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x69, 0x73, 0x52, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x4f, 0x0a, 0x13, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70,
	0x48, 0x6f, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x52,
	0x10, 0x68, 0x6f, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x58, 0x0a, 0x16, 0x73, 0x6e, 0x6f, 0x77, 0x6d, 0x61, 0x6e, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x43, 0x61, 0x6d, 0x70, 0x53, 0x6e, 0x6f, 0x77, 0x6d, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x52, 0x13, 0x73, 0x6e, 0x6f, 0x77, 0x6d, 0x61, 0x6e, 0x55,
	0x73, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x0d,
	0x48, 0x61, 0x63, 0x68, 0x69, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x22, 0xd8, 0x02, 0x0a, 0x10, 0x48, 0x61, 0x63, 0x68, 0x69, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x62,
	0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x63, 0x68, 0x69, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x42, 0x69, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e,
	0x4d, 0x61, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12,
	0x38, 0x0a, 0x19, 0x63, 0x75, 0x72, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74,
	0x65, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x63, 0x75, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x74, 0x65,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x63, 0x75, 0x72,
	0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63,
	0x75, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x1a, 0x54, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69,
	0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x48, 0x61, 0x63, 0x68, 0x69, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x85, 0x01, 0x0a, 0x0e,
	0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0x8e, 0x02, 0x0a, 0x0e, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x18, 0x63, 0x6f, 0x6f, 0x6c,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x6f, 0x6f, 0x6c,
	0x44, 0x6f, 0x77, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x16, 0x63, 0x6f, 0x6f, 0x6c, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x62, 0x75,
	0x66, 0x66, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x12, 0x63, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x11, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x69, 0x6e, 0x5f, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x17, 0x69, 0x6e,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x75, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x6e, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0x67, 0x0a, 0x14, 0x54, 0x61, 0x6e, 0x75, 0x6b, 0x69, 0x54, 0x72,
	0x61, 0x76, 0x65, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x22, 0xba, 0x01,
	0x0a, 0x17, 0x54, 0x61, 0x6e, 0x75, 0x6b, 0x69, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x6e, 0x75, 0x6b, 0x69,
	0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x52, 0x0c,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a,
	0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x22, 0x4d, 0x0a, 0x19, 0x53, 0x61,
	0x6c, 0x76, 0x61, 0x67, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x18, 0x53, 0x61, 0x6c,
	0x76, 0x61, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x13, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x43, 0x0a, 0x0b, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61,
	0x6c, 0x76, 0x61, 0x67, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x53, 0x0a, 0x14, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6c, 0x76,
	0x61, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x6f,
	0x73, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xb7, 0x01, 0x0a,
	0x16, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x12,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x42, 0x69, 0x6e, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42,
	0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x1d, 0x4c, 0x61, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6d, 0x69, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x69, 0x65, 0x77, 0x54, 0x69, 0x70, 0x73, 0x22,
	0xf2, 0x01, 0x0a, 0x18, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x11, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x69, 0x70,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x76, 0x69, 0x65, 0x77, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x54, 0x69, 0x70, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x52, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x64, 0x0a, 0x20, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x52,
	0x69, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x62, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x1c, 0x4c,
	0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12,
	0x55, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x46,
	0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x42, 0x69, 0x6e, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42,
	0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x64, 0x0a, 0x17, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x52, 0x69, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x42, 0x69,
	0x6e, 0x12, 0x49, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9e, 0x05, 0x0a,
	0x16, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x5f,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x12, 0x15,
	0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x63, 0x6f, 0x69, 0x6e, 0x42, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x43, 0x12, 0x46, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x69, 0x6e, 0x12, 0x52, 0x0a, 0x16, 0x73, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x42, 0x69, 0x6e, 0x52, 0x13, 0x73, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x1d, 0x69, 0x73, 0x5f, 0x6d,
	0x69, 0x6e, 0x69, 0x5f, 0x65, 0x6c, 0x64, 0x72, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x19, 0x69, 0x73, 0x4d, 0x69, 0x6e, 0x69, 0x45, 0x6c, 0x64, 0x72, 0x69, 0x74, 0x63, 0x68, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73,
	0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x54, 0x61, 0x6b, 0x65,
	0x6e, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x74, 0x0a, 0x19, 0x73,
	0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x69,
	0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x2e, 0x53, 0x61,
	0x6c, 0x76, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72,
	0x6b, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x73, 0x61, 0x6c, 0x76, 0x61,
	0x67, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x61,
	0x70, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x43, 0x0a,
	0x0d, 0x66, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x42,
	0x69, 0x6e, 0x1a, 0x49, 0x0a, 0x1b, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4c, 0x0a,
	0x16, 0x4d, 0x69, 0x63, 0x68, 0x69, 0x61, 0x65, 0x4d, 0x61, 0x74, 0x73, 0x75, 0x72, 0x69, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0xda, 0x02, 0x0a, 0x19,
	0x4d, 0x69, 0x63, 0x68, 0x69, 0x61, 0x65, 0x4d, 0x61, 0x74, 0x73, 0x75, 0x72, 0x69, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x69,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x63, 0x68, 0x69, 0x61, 0x65, 0x4d, 0x61, 0x74, 0x73,
	0x75, 0x72, 0x69, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x1f, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x1b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x72, 0x79, 0x73,
	0x74, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x5f,
	0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x61, 0x69, 0x6e, 0x43,
	0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x12, 0x4d, 0x0a, 0x24, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3f, 0x0a, 0x10, 0x42, 0x61, 0x72, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x22, 0x5d, 0x0a, 0x11, 0x42, 0x61, 0x72,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x22, 0x80, 0x03, 0x0a, 0x14, 0x42, 0x61, 0x72,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x10, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61,
	0x72, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x69, 0x6e, 0x52, 0x0e,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44,
	0x0a, 0x11, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x42, 0x69, 0x6e, 0x52, 0x0f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x4e, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x22, 0x5f, 0x0a, 0x12, 0x49,
	0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x42, 0x69,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x65, 0x71, 0x75, 0x69, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb3, 0x01, 0x0a,
	0x14, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x0f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x4d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x0d, 0x68, 0x61, 0x72, 0x64,
	0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x68, 0x61, 0x72, 0x64,
	0x4d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x64, 0x22, 0x66, 0x0a, 0x0f, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x42, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x3a,
	0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f,
	0x72, 0x69, 0x43, 0x68, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x52,
	0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x15, 0x49,
	0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x68, 0x65, 0x6c,
	0x66, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x67, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69,
	0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x42, 0x69, 0x6e, 0x2e, 0x55,
	0x73, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x75, 0x73, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x1a, 0x45, 0x0a, 0x17, 0x55, 0x73,
	0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x8f, 0x01, 0x0a, 0x10, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x46, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x73, 0x61, 0x74,
	0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x69, 0x73, 0x53, 0x61, 0x74, 0x69, 0x73,
	0x66, 0x69, 0x65, 0x64, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a,
	0x0f, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x68, 0x65, 0x6c,
	0x66, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x15, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x50,
	0x6f, 0x65, 0x74, 0x72, 0x79, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x10, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x10,
	0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x50, 0x6f, 0x65, 0x74, 0x72, 0x79, 0x42, 0x69, 0x6e,
	0x12, 0x42, 0x0a, 0x0e, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x50, 0x6f, 0x65, 0x74, 0x72, 0x79, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x42, 0x69, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x5f, 0x74, 0x68, 0x65, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x1b, 0x49, 0x72, 0x6f, 0x64, 0x6f,
	0x72, 0x69, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x76,
	0x65, 0x5f, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48,
	0x61, 0x76, 0x65, 0x54, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69,
	0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x15,
	0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x4e, 0x0a, 0x11, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x69, 0x6e, 0x52,
	0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x67, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x67, 0x56, 0x69, 0x65, 0x77,
	0x65, 0x64, 0x22, 0xbd, 0x02, 0x0a, 0x12, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x42, 0x69, 0x6e, 0x52, 0x09, 0x63, 0x68, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x38, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x72,
	0x6f, 0x64, 0x6f, 0x72, 0x69, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0a,
	0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x6f,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x50,
	0x6f, 0x65, 0x74, 0x72, 0x79, 0x42, 0x69, 0x6e, 0x52, 0x0a, 0x70, 0x6f, 0x65, 0x74, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x11, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x52, 0x0f, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x15, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x22, 0x5c, 0x0a, 0x12, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x42, 0x75, 0x66, 0x66, 0x42, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x64,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x66, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x42, 0x75, 0x66, 0x66, 0x49, 0x64,
	0x22, 0x76, 0x0a, 0x14, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x74,
	0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6e, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x79,
	0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x12,
	0x43, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x62, 0x69, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x42,
	0x75, 0x66, 0x66, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x42, 0x69, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c,
	0x69, 0x6e, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3d,
	0x0a, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x69, 0x6e,
	0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x7f, 0x0a,
	0x16, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c,
	0x69, 0x6e, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x49, 0x64, 0x22, 0x73,
	0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a,
	0x06, 0x70, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70,
	0x6f, 0x73, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x22, 0x7f, 0x0a, 0x10, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x12, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x50, 0x6f, 0x73, 0x42, 0x69, 0x6e, 0x52, 0x0f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x50, 0x6f,
	0x73, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x22, 0x68, 0x0a, 0x0d, 0x53, 0x70, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xea,
	0x01, 0x0a, 0x10, 0x53, 0x70, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69,
	0x6e, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x4a, 0x0a, 0x22, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x5f, 0x66, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x24, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x66, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x0d,
	0x47, 0x61, 0x63, 0x68, 0x61, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x4c, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x1a,
	0x3f, 0x0a, 0x11, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x86, 0x06, 0x0a, 0x10, 0x47, 0x61, 0x63, 0x68, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x0d, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x42, 0x69, 0x6e, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x4e, 0x75, 0x6d,
	0x4d, 0x61, 0x70, 0x12, 0x45, 0x0a, 0x14, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x11, 0x67, 0x61, 0x63, 0x68, 0x61, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x69, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62,
	0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4e, 0x75, 0x6d,
	0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74,
	0x5f, 0x76, 0x65, 0x63, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x56, 0x65, 0x63, 0x12, 0x35, 0x0a, 0x17, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4e, 0x75,
	0x6d, 0x12, 0x3e, 0x0a, 0x1c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x74, 0x65, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x6c, 0x0a, 0x19, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61,
	0x63, 0x68, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x2e, 0x48,
	0x61, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4e, 0x75,
	0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x68, 0x61, 0x76, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70,
	0x12, 0x2d, 0x0a, 0x13, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x68,
	0x61, 0x76, 0x65, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x1a,
	0x3e, 0x0a, 0x10, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x48, 0x0a, 0x1a, 0x48, 0x61, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x62,
	0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb4, 0x01, 0x0a, 0x13, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x76, 0x47, 0x69, 0x66, 0x74, 0x42, 0x69,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x76, 0x47, 0x69,
	0x66, 0x74, 0x42, 0x69, 0x6e, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61,
	0x70, 0x1a, 0x3d, 0x0a, 0x0f, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xfe, 0x01, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x69, 0x66,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x59, 0x0a, 0x11, 0x77, 0x69, 0x73, 0x68,
	0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x47, 0x69, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x2e,
	0x57, 0x69, 0x73, 0x68, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0e, 0x77, 0x69, 0x73, 0x68, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d,
	0x4d, 0x61, 0x70, 0x12, 0x49, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x67, 0x69, 0x66, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x63, 0x76, 0x47, 0x69, 0x66, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x10, 0x72, 0x65,
	0x63, 0x76, 0x47, 0x69, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x41,
	0x0a, 0x13, 0x57, 0x69, 0x73, 0x68, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xd4, 0x01, 0x0a, 0x22, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x6f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x19, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73,
	0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x18, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x12, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x48, 0x61, 0x76, 0x65, 0x54, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x22, 0x63, 0x0a, 0x1b, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x50, 0x61, 0x69, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x72, 0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x48, 0x61, 0x72, 0x64,
	0x22, 0xda, 0x01, 0x0a, 0x12, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x41,
	0x76, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x68,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x66, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x69, 0x66,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x42, 0x61, 0x6e, 0x22, 0x98, 0x07,
	0x0a, 0x15, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x68, 0x61,
	0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x48, 0x61, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x69, 0x73, 0x48, 0x61, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x69,
	0x73, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x46, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x4c,
	0x0a, 0x10, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x69, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0e, 0x72, 0x6f,
	0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x68,
	0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x43, 0x61, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x0f, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x47, 0x75, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x11, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69,
	0x61, 0x72, 0x79, 0x41, 0x76, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0f, 0x72, 0x6f, 0x67,
	0x75, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x04, 0x52, 0x15,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x72, 0x65, 0x64, 0x47, 0x75, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x19, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x16, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xfb, 0x01, 0x0a, 0x15, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42,
	0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x3f,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69,
	0x6e, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3f, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x69, 0x6e, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x1b, 0x53, 0x75, 0x6d, 0x6d, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x32, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x50,
	0x72, 0x65, 0x76, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65,
	0x64, 0x22, 0x6d, 0x0a, 0x18, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x56,
	0x32, 0x42, 0x6f, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x22, 0xb0, 0x02, 0x0a, 0x17, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x56,
	0x32, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x57, 0x0a, 0x16,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x69,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x56,
	0x32, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e,
	0x52, 0x13, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x13, 0x62, 0x6f, 0x61, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x32, 0x42, 0x6f, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x42, 0x69, 0x6e, 0x52, 0x10, 0x62, 0x6f, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x68, 0x0a, 0x13, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x5a, 0x0a,
	0x16, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x0c, 0x47, 0x65,
	0x61, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x14, 0x4a, 0x69, 0x67, 0x73, 0x61, 0x77, 0x50, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x0f,
	0x47, 0x65, 0x61, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12,
	0x39, 0x0a, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x13, 0x6a, 0x69,
	0x67, 0x73, 0x61, 0x77, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4a, 0x69, 0x67, 0x73, 0x61, 0x77, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x69, 0x6e, 0x52, 0x11, 0x6a, 0x69, 0x67, 0x73, 0x61, 0x77, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x67, 0x65, 0x61, 0x72, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x47, 0x65, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x22, 0x73, 0x0a, 0x1c, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0x73, 0x0a, 0x1d, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49,
	0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x17, 0x47,
	0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x42, 0x69, 0x6e, 0x12, 0x49, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e,
	0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x42, 0x69, 0x6e, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x69, 0x6e,
	0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x8d, 0x01, 0x0a, 0x1b, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65,
	0x6e, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22,
	0x62, 0x0a, 0x16, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e,
	0x63, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x48, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e,
	0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x6e, 0x0a, 0x1b, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e,
	0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42,
	0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0x62, 0x0a, 0x16, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e,
	0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x48, 0x0a,
	0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72,
	0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x63,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x1c, 0x47, 0x72, 0x61, 0x76, 0x65,
	0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x72, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0xcf, 0x01, 0x0a, 0x1f,
	0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x43,
	0x61, 0x72, 0x76, 0x65, 0x55, 0x73, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x12,
	0x28, 0x0a, 0x10, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x61, 0x64, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x12, 0x6e, 0x65, 0x65,
	0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x52, 0x0f, 0x6e, 0x65, 0x65, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x12, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x52, 0x0f, 0x70, 0x61,
	0x73, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb9, 0x01,
	0x0a, 0x17, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63,
	0x65, 0x43, 0x61, 0x72, 0x76, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x49, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e,
	0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x72, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49,
	0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x72, 0x76, 0x65, 0x55, 0x73, 0x65,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe4, 0x02, 0x0a, 0x1a, 0x47, 0x72,
	0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x42, 0x69, 0x6e, 0x52, 0x08, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x42, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x62, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x43,
	0x61, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x07, 0x63, 0x61, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12,
	0x15, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x62,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x12, 0x38, 0x0a,
	0x08, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e,
	0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x07,
	0x72, 0x61, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x76, 0x65,
	0x5f, 0x62, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e,
	0x63, 0x65, 0x43, 0x61, 0x72, 0x76, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x08, 0x63, 0x61, 0x72, 0x76,
	0x65, 0x42, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x22, 0xd7, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72,
	0x61, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x4c, 0x0a, 0x12, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x52, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x18, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x70, 0x72, 0x61, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x69,
	0x6e, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x11, 0x69, 0x6e, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x54, 0x0a, 0x1a,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x74, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x22, 0x6e, 0x0a, 0x18, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70,
	0x72, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x12, 0x52,
	0x0a, 0x14, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x69,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72,
	0x61, 0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x52,
	0x11, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x6c, 0x0a, 0x19, 0x4d, 0x75, 0x71, 0x61, 0x64, 0x61, 0x73, 0x50, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x22, 0xa0, 0x01, 0x0a, 0x18, 0x4d, 0x75, 0x71, 0x61, 0x64, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x46, 0x0a,
	0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75,
	0x71, 0x61, 0x64, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x17, 0x69, 0x6e, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x75, 0x69, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x17, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x53, 0x65, 0x65, 0x6c, 0x69, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x3c, 0x0a, 0x1b, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x17, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64,
	0x43, 0x68, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x19, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x65, 0x65, 0x6c, 0x69, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e,
	0x4e, 0x75, 0x6d, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x65, 0x65, 0x6c, 0x69, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x22, 0x6b, 0x0a, 0x18, 0x52, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70,
	0x6c, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x22, 0x64, 0x0a,
	0x1b, 0x52, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x45, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x63,
	0x6b, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x1a, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x1a, 0x56, 0x69, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x22, 0xb8, 0x02, 0x0a, 0x1a, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x62, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x1a, 0x65, 0x0a, 0x14, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x53, 0x0a, 0x1b, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x68,
	0x55, 0x73, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x20, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x43, 0x61, 0x6d, 0x70, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x22, 0xec, 0x02, 0x0a, 0x20, 0x56, 0x69, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x0e, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x43, 0x61,
	0x6d, 0x70, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x2c, 0x0a,
	0x12, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x68, 0x0a, 0x11, 0x43,
	0x61, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x43, 0x61, 0x6d, 0x70, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6f, 0x0a, 0x14, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x44, 0x65, 0x61, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0e, 0x64, 0x65,
	0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x50, 0x61, 0x69, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x11, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x62, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x22, 0x5d, 0x0a, 0x1d, 0x56, 0x69, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x91, 0x02, 0x0a, 0x0f, 0x56, 0x69, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x15, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x69, 0x6e, 0x52, 0x12, 0x61, 0x74, 0x74, 0x72, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x61, 0x69, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x69, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x68, 0x6f,
	0x73, 0x65, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x7c, 0x0a, 0x12,
	0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x70, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42,
	0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x22, 0xed, 0x11, 0x0a, 0x12, 0x56,
	0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x5a, 0x0a, 0x11, 0x68, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x68, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x5a, 0x0a,
	0x11, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x41, 0x0a, 0x0a, 0x62, 0x6f, 0x6f,
	0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x6f,
	0x74, 0x68, 0x55, 0x73, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69,
	0x6e, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x0e,
	0x63, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x2e,
	0x43, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x12, 0x22, 0x0a,
	0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x42, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x69, 0x6e,
	0x5f, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x43, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x44, 0x65,
	0x61, 0x6c, 0x42, 0x69, 0x6e, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x62, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x42, 0x69,
	0x6e, 0x52, 0x0b, 0x62, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x70, 0x72, 0x65, 0x76, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x4e, 0x75, 0x6d, 0x12, 0x25, 0x0a,
	0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x43, 0x6f, 0x69, 0x6e,
	0x43, 0x4e, 0x75, 0x6d, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x70, 0x73, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x69, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x70, 0x73, 0x56, 0x69, 0x65,
	0x77, 0x12, 0x3e, 0x0a, 0x1c, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x18, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x69, 0x72,
	0x42, 0x69, 0x6e, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x6e, 0x70, 0x63, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x70, 0x63, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x6e, 0x70, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x19, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a,
	0x17, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x69, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x4f, 0x70, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x69, 0x73, 0x48, 0x65, 0x6c, 0x70, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x17, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x5f,
	0x75, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x61, 0x6e, 0x55, 0x73, 0x65,
	0x48, 0x65, 0x6c, 0x70, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x65, 0x6c,
	0x70, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x68, 0x65, 0x6c, 0x70, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x57, 0x0a,
	0x10, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42,
	0x69, 0x6e, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x68,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x61, 0x6b,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x68, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x73, 0x73, 0x57, 0x65, 0x61, 0x6b, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x23, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x65, 0x0a, 0x14, 0x48, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x65, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x68, 0x0a, 0x11, 0x43, 0x61, 0x6d, 0x70, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6d,
	0x70, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x57, 0x0a, 0x13, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x69, 0x72, 0x42, 0x69, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x56, 0x0a, 0x14, 0x57, 0x69,
	0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42,
	0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x47, 0x0a, 0x11, 0x57, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x50, 0x0a, 0x16, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f,
	0x69, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x22, 0xb7, 0x01,
	0x0a, 0x09, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x75, 0x6e, 0x67, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x75, 0x6c, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e,
	0x5f, 0x63, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x43, 0x75, 0x6c, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x22, 0x48, 0x0a, 0x12, 0x46, 0x75, 0x6e, 0x67, 0x75,
	0x73, 0x50, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x22, 0x71, 0x0a, 0x18, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0x7d, 0x0a, 0x17, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x75, 0x72, 0x5f, 0x68, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x48, 0x70, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x22, 0xc8, 0x03, 0x0a, 0x1d, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x48, 0x0a, 0x10, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x69,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0e, 0x6d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x68, 0x6f, 0x6f,
	0x73, 0x65, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7c,
	0x0a, 0x19, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x12, 0x5f, 0x0a, 0x19, 0x66,
	0x75, 0x6e, 0x67, 0x75, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x54, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x69, 0x6e, 0x52, 0x16, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x84, 0x04, 0x0a,
	0x18, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x0f, 0x66, 0x75, 0x6e,
	0x67, 0x75, 0x73, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6e, 0x67, 0x75,
	0x73, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x42, 0x69, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x1a, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x5f, 0x70, 0x6c,
	0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x50, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42,
	0x69, 0x6e, 0x52, 0x16, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x50, 0x6c, 0x6f, 0x74, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x67, 0x0a, 0x20, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x52, 0x1c, 0x66, 0x75, 0x6e, 0x67,
	0x75, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x6d,
	0x70, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x63, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x15, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x61, 0x0a, 0x1c, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x69, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x75, 0x6e, 0x67, 0x75, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x52, 0x19, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x69, 0x6e, 0x22, 0x6c, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x72, 0x41, 0x6d, 0x75, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x8f, 0x01, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x72, 0x41, 0x6d, 0x75, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x42,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x41, 0x6d, 0x75, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x11, 0x69, 0x6e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xd7, 0x02, 0x0a, 0x19, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x56, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x62, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x43, 0x0a, 0x1e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x4b, 0x0a, 0x23, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x6f, 0x6f, 0x73,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x12, 0x43, 0x0a, 0x1e, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x44,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x50, 0x61, 0x73, 0x73, 0x22, 0x66, 0x0a,
	0x1c, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x56, 0x32, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x46, 0x0a,
	0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x66,
	0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x56, 0x32, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xf9, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x6f, 0x6f, 0x73,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x76,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x16,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xbd, 0x05, 0x0a, 0x13, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x6f, 0x6f,
	0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x42, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d,
	0x12, 0x36, 0x0a, 0x18, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x50, 0x0a, 0x15, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x52, 0x12, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x65,
	0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x42, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4e, 0x75,
	0x6d, 0x12, 0x36, 0x0a, 0x18, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x65, 0x73, 0x74,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x59, 0x0a, 0x1a, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x52, 0x16, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x76, 0x65, 0x5f,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x74, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x48, 0x61, 0x76, 0x65, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x43, 0x75, 0x74, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x38, 0x0a,
	0x19, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x69, 0x73, 0x48, 0x61, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x68, 0x61,
	0x76, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x48, 0x61,
	0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x22, 0x5a, 0x0a, 0x16, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x52,
	0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x85, 0x02,
	0x0a, 0x14, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x69, 0x73, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x15, 0x69,
	0x73, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x35,
	0x0a, 0x17, 0x69, 0x73, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x69, 0x73, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x22, 0xc5, 0x01, 0x0a, 0x14, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x10, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x68,
	0x6f, 0x73, 0x65, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb8, 0x02,
	0x0a, 0x17, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x14,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x16, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x52, 0x13, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0e,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x50, 0x61, 0x69, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x11, 0x54, 0x65, 0x61, 0x6d,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x22, 0xcb, 0x01, 0x0a, 0x14, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x69, 0x6e, 0x5f,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x17,
	0x69, 0x6e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47,
	0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x7f,
	0x0a, 0x1d, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x68, 0x65, 0x72, 0x63, 0x75, 0x6c, 0x65,
	0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xaa, 0x01, 0x0a, 0x1d, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x68, 0x65, 0x72, 0x63, 0x75,
	0x6c, 0x65, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x4a, 0x0a, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x68, 0x65, 0x72, 0x63, 0x75, 0x6c, 0x65, 0x73,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x52, 0x0c,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6e, 0x0a, 0x20,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x68, 0x65, 0x72, 0x63, 0x75, 0x6c, 0x65, 0x73, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e,
	0x12, 0x4a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x68, 0x65, 0x72, 0x63, 0x75, 0x6c, 0x65, 0x73,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x68, 0x0a, 0x15,
	0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x56, 0x33, 0x52, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x56, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d,
	0x70, 0x56, 0x33, 0x52, 0x61, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x4c, 0x61,
	0x6d, 0x70, 0x56, 0x33, 0x52, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e,
	0x52, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x75,
	0x0a, 0x17, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x56, 0x33, 0x53, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x26, 0x0a,
	0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d,
	0x70, 0x56, 0x33, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x62,
	0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x56, 0x33, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x12, 0x53,
	0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x56, 0x33, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x42, 0x69,
	0x6e, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x56, 0x33, 0x53, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x4c,
	0x61, 0x6d, 0x70, 0x56, 0x33, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e,
	0x12, 0x32, 0x0a, 0x08, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x4c, 0x61,
	0x6d, 0x70, 0x56, 0x33, 0x52, 0x61, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x07, 0x72, 0x61, 0x63,
	0x65, 0x42, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x62,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x56, 0x33, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x42, 0x69, 0x6e, 0x52, 0x09, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x42, 0x69, 0x6e, 0x22, 0x6e,
	0x0a, 0x16, 0x44, 0x75, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0xb8,
	0x01, 0x0a, 0x11, 0x44, 0x75, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x4d, 0x0a, 0x13, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x62, 0x69,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x52, 0x11, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x67,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x43, 0x67, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x22, 0x7e, 0x0a, 0x14, 0x44, 0x75, 0x65,
	0x6c, 0x68, 0x65, 0x61, 0x72, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69,
	0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x75, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x42, 0x69, 0x6e, 0x52, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6e, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x22, 0xe2, 0x25, 0x0a, 0x13, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69,
	0x6e, 0x12, 0x50, 0x0a, 0x15, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x13,
	0x73, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x69, 0x6e, 0x12, 0x49, 0x0a, 0x10, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0e,
	0x74, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x3f,
	0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e,
	0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x42, 0x69, 0x6e, 0x12,
	0x3f, 0x0a, 0x0c, 0x63, 0x72, 0x75, 0x63, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18,
	0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x75, 0x63, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69,
	0x6e, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x75, 0x63, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x6e,
	0x12, 0x36, 0x0a, 0x09, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x71, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x08,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x69, 0x6e, 0x12, 0x49, 0x0a, 0x10, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x5f, 0x73, 0x70,
	0x69, 0x6e, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x53, 0x70, 0x69, 0x6e,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0e,
	0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x53, 0x70, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x39,
	0x0a, 0x0a, 0x65, 0x66, 0x66, 0x69, 0x67, 0x79, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x74, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x66, 0x66, 0x69, 0x67,
	0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x09,
	0x65, 0x66, 0x66, 0x69, 0x67, 0x79, 0x42, 0x69, 0x6e, 0x12, 0x49, 0x0a, 0x10, 0x74, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x78, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42,
	0x69, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61,
	0x70, 0x42, 0x69, 0x6e, 0x12, 0x46, 0x0a, 0x0f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e,
	0x5f, 0x6d, 0x70, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x4d, 0x70,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x4d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x40, 0x0a, 0x0c,
	0x62, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x82, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48,
	0x00, 0x52, 0x0b, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x69, 0x6e, 0x12, 0x42,
	0x0a, 0x0c, 0x73, 0x65, 0x61, 0x5f, 0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x83,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x61, 0x4c, 0x61, 0x6d, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x42,
	0x69, 0x6e, 0x12, 0x46, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x62, 0x69, 0x6e, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x78, 0x70,
	0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x0e, 0x66, 0x6c,
	0x65, 0x75, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x8c, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75,
	0x72, 0x46, 0x61, 0x69, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e,
	0x48, 0x00, 0x52, 0x0c, 0x66, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x42, 0x69, 0x6e,
	0x12, 0x52, 0x0a, 0x13, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x68, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48,
	0x00, 0x52, 0x11, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x42, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x10, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x70,
	0x69, 0x72, 0x69, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x74, 0x65, 0x72, 0x53, 0x70, 0x69,
	0x72, 0x69, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00,
	0x52, 0x0e, 0x77, 0x61, 0x74, 0x65, 0x72, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x42, 0x69, 0x6e,
	0x12, 0x53, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73,
	0x6c, 0x61, 0x62, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x53, 0x6c, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e,
	0x48, 0x00, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c,
	0x61, 0x62, 0x42, 0x69, 0x6e, 0x12, 0x4b, 0x0a, 0x11, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e,
	0x64, 0x53, 0x65, 0x65, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e,
	0x48, 0x00, 0x52, 0x0e, 0x68, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x42,
	0x69, 0x6e, 0x12, 0x44, 0x0a, 0x0e, 0x6d, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x62, 0x69, 0x6e, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x64,
	0x5f, 0x68, 0x69, 0x6c, 0x69, 0x63, 0x68, 0x75, 0x72, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x9a,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x48, 0x69, 0x6c, 0x69, 0x63, 0x68, 0x75, 0x72, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x69,
	0x6c, 0x69, 0x63, 0x68, 0x75, 0x72, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x47, 0x0a, 0x0f, 0x73, 0x75,
	0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xa0, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d,
	0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42,
	0x69, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x69, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x62, 0x75, 0x6f, 0x79, 0x61, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x62, 0x61, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6f, 0x79, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69,
	0x6e, 0x48, 0x00, 0x52, 0x10, 0x62, 0x75, 0x6f, 0x79, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x62,
	0x61, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x56, 0x0a, 0x14, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xa2, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x62, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x69, 0x6e, 0x12, 0x44, 0x0a,
	0x0e, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x18,
	0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x63, 0x68, 0x6f, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x63, 0x68, 0x6f, 0x53, 0x68, 0x65, 0x6c, 0x6c,
	0x42, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x0e, 0x62, 0x6c, 0x69, 0x74, 0x7a, 0x5f, 0x72, 0x75, 0x73,
	0x68, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x69, 0x74, 0x7a, 0x52, 0x75, 0x73, 0x68, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6c, 0x69,
	0x74, 0x7a, 0x52, 0x75, 0x73, 0x68, 0x42, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x63, 0x68, 0x65, 0x73, 0x73, 0x42,
	0x69, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x75, 0x6d, 0x6f, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xa6,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75,
	0x6d, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52,
	0x07, 0x73, 0x75, 0x6d, 0x6f, 0x42, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x6c, 0x75, 0x6e, 0x61,
	0x5f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x75, 0x6e, 0x61, 0x52, 0x69, 0x74,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0b,
	0x6c, 0x75, 0x6e, 0x61, 0x52, 0x69, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x4d, 0x0a, 0x11, 0x6d,
	0x6f, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x69, 0x6e,
	0x18, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x6f, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x6f, 0x6f, 0x6e, 0x66,
	0x69, 0x6e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x10, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xa9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x0e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c,
	0x6d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x59, 0x0a, 0x15,
	0x72, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e,
	0x48, 0x00, 0x52, 0x13, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x47, 0x0a, 0x0f, 0x77, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xac, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x43, 0x61, 0x6d, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48,
	0x00, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x42, 0x69, 0x6e,
	0x12, 0x37, 0x0a, 0x09, 0x68, 0x61, 0x63, 0x68, 0x69, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xad, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x63,
	0x68, 0x69, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52,
	0x08, 0x68, 0x61, 0x63, 0x68, 0x69, 0x42, 0x69, 0x6e, 0x12, 0x4d, 0x0a, 0x11, 0x74, 0x61, 0x6e,
	0x75, 0x6b, 0x69, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xae,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61,
	0x6e, 0x75, 0x6b, 0x69, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x61, 0x6e, 0x75, 0x6b, 0x69, 0x54,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x10, 0x6c, 0x61, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x5f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xaf, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42,
	0x69, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x69, 0x74,
	0x65, 0x42, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62,
	0x69, 0x6e, 0x18, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e,
	0x12, 0x53, 0x0a, 0x13, 0x6d, 0x69, 0x63, 0x68, 0x69, 0x61, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x73,
	0x75, 0x72, 0x69, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x63, 0x68, 0x69, 0x61, 0x65, 0x4d, 0x61,
	0x74, 0x73, 0x75, 0x72, 0x69, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e,
	0x48, 0x00, 0x52, 0x11, 0x6d, 0x69, 0x63, 0x68, 0x69, 0x61, 0x65, 0x4d, 0x61, 0x74, 0x73, 0x75,
	0x72, 0x69, 0x42, 0x69, 0x6e, 0x12, 0x43, 0x0a, 0x0d, 0x62, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61,
	0x72, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x0b, 0x69, 0x72,
	0x6f, 0x64, 0x6f, 0x72, 0x69, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x69,
	0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x42, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x10, 0x63, 0x72, 0x79,
	0x73, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xb4, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x79,
	0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69,
	0x6e, 0x6b, 0x42, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x62,
	0x69, 0x6e, 0x18, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42,
	0x69, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x42, 0x69, 0x6e, 0x12, 0x37,
	0x0a, 0x09, 0x73, 0x70, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xb6, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x69, 0x63, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x73,
	0x70, 0x69, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x67, 0x61, 0x63, 0x68, 0x61,
	0x5f, 0x62, 0x69, 0x6e, 0x18, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x67, 0x61, 0x63, 0x68, 0x61, 0x42, 0x69, 0x6e,
	0x12, 0x6f, 0x0a, 0x1d, 0x6c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x69,
	0x6e, 0x18, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x1a, 0x6c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x6f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x69,
	0x6e, 0x12, 0x47, 0x0a, 0x0f, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x64, 0x69, 0x61, 0x72, 0x79,
	0x5f, 0x62, 0x69, 0x6e, 0x18, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x6f, 0x67,
	0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x42, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x12, 0x73, 0x75,
	0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x69, 0x6e,
	0x18, 0xba, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x32, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x75, 0x6d, 0x6d, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x32, 0x42, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x10, 0x69, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xbb,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x67, 0x65, 0x61, 0x72, 0x5f, 0x62,
	0x69, 0x6e, 0x18, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69,
	0x6e, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x56, 0x0a, 0x14,
	0x67, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x62, 0x69, 0x6e, 0x18, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00,
	0x52, 0x12, 0x67, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x69, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x70, 0x72, 0x61, 0x79, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42,
	0x69, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70,
	0x72, 0x61, 0x79, 0x42, 0x69, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x75, 0x71, 0x61, 0x64, 0x61,
	0x73, 0x5f, 0x70, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xbf, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x71, 0x61,
	0x64, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x75, 0x71, 0x61, 0x64, 0x61, 0x73, 0x50,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x53, 0x0a, 0x13, 0x74, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x65, 0x6c, 0x69, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18,
	0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x65, 0x65, 0x6c, 0x69, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x74, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x53, 0x65, 0x65, 0x6c, 0x69, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x5a, 0x0a,
	0x16, 0x72, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6c,
	0x6f, 0x72, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42,
	0x69, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x72, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x45,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x0b, 0x76, 0x69, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x69,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x0e, 0x77, 0x69, 0x6e, 0x64,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xc3, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00,
	0x52, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x50,
	0x0a, 0x12, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x5f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72,
	0x5f, 0x62, 0x69, 0x6e, 0x18, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x10,
	0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e,
	0x12, 0x50, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x61, 0x6d, 0x75, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xc5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x41, 0x6d, 0x75, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00,
	0x52, 0x10, 0x63, 0x68, 0x61, 0x72, 0x41, 0x6d, 0x75, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x69, 0x6e, 0x12, 0x58, 0x0a, 0x14, 0x65, 0x66, 0x66, 0x69, 0x67, 0x79, 0x5f, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xc6, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x56, 0x32, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x65, 0x66, 0x66, 0x69, 0x67, 0x79,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x10,
	0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x69, 0x6e,
	0x18, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x69, 0x6e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x4d, 0x0a, 0x11, 0x62, 0x72, 0x69, 0x63,
	0x6b, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xc8, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x69,
	0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x5f, 0x6c,
	0x61, 0x6d, 0x70, 0x5f, 0x76, 0x33, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d,
	0x70, 0x56, 0x33, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00,
	0x52, 0x0c, 0x73, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x56, 0x33, 0x42, 0x69, 0x6e, 0x12, 0x44,
	0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x62, 0x69, 0x6e,
	0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x42, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x0e, 0x64, 0x75, 0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x65, 0x6c, 0x68, 0x65, 0x61, 0x72, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x75,
	0x65, 0x6c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x68, 0x0a, 0x1a, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x6f, 0x68, 0x65, 0x72, 0x63, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x68,
	0x65, 0x72, 0x63, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x72, 0x6f, 0x68, 0x65, 0x72, 0x63, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x42, 0x69, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xbe,
	0x0c, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x70, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73,
	0x50, 0x6c, 0x61, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x6e, 0x69, 0x6d, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x74,
	0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x61, 0x6b, 0x65,
	0x6e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x18, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x15, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x61, 0x6c, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x19, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x61,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x35, 0x0a, 0x17, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x14, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x69,
	0x6c, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x67, 0x0a, 0x27, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x69, 0x72, 0x52, 0x23, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x71, 0x75, 0x69,
	0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x42, 0x69, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x3e, 0x0a, 0x0d, 0x67,
	0x69, 0x66, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x47, 0x69, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x0b,
	0x67, 0x69, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x60, 0x0a, 0x16, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x70,
	0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x70, 0x73,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x70, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x5a, 0x0a,
	0x1a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x19, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x69, 0x6e,
	0x52, 0x17, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x70, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x9e, 0x02, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x5a, 0x0a, 0x10, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69,
	0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42,
	0x69, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x27, 0x0a, 0x10, 0x66, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x61,
	0x5f, 0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x66, 0x6c, 0x79, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6d, 0x12, 0x29,
	0x0a, 0x11, 0x66, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x5f, 0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x6c, 0x79, 0x53, 0x65,
	0x61, 0x4c, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x55, 0x0a, 0x13, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xb9, 0x01, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6c, 0x42,
	0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x42, 0x69, 0x6e, 0x52, 0x07, 0x6d,
	0x61, 0x69, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x97, 0x05, 0x0a,
	0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x42,
	0x69, 0x6e, 0x12, 0x45, 0x0a, 0x20, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1b, 0x68, 0x61,
	0x73, 0x54, 0x61, 0x6b, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x69, 0x6c, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x11, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x57,
	0x61, 0x69, 0x74, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x77, 0x61, 0x69, 0x74, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x4d,
	0x61, 0x70, 0x12, 0x50, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6d,
	0x70, 0x42, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x71, 0x4d, 0x61, 0x70, 0x12, 0x61, 0x0a, 0x15, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x61, 0x69, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x4e, 0x65,
	0x77, 0x57, 0x61, 0x69, 0x74, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6e, 0x65, 0x77, 0x57, 0x61, 0x69, 0x74, 0x41, 0x64, 0x64,
	0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x73, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1b, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61,
	0x69, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x65, 0x64, 0x1a, 0x51, 0x0a, 0x13,
	0x57, 0x61, 0x69, 0x74, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x69,
	0x6c, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3f, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x54, 0x0a, 0x16, 0x4e, 0x65, 0x77, 0x57, 0x61, 0x69, 0x74, 0x41, 0x64, 0x64, 0x4d, 0x61,
	0x69, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x72, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x75, 0x67, 0x68,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x75,
	0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62,
	0x75, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x0d, 0x53,
	0x68, 0x6f, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x68, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52,
	0x0f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x54, 0x0a, 0x19, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x16,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x10, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68,
	0x6f, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x0e, 0x73, 0x68, 0x6f,
	0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x14, 0x47,
	0x61, 0x63, 0x68, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x61, 0x63, 0x68,
	0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x47, 0x61, 0x63, 0x68, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x46, 0x0a,
	0x1a, 0x47, 0x61, 0x63, 0x68, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x61, 0x63, 0x68, 0x61,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x15, 0x47, 0x61, 0x63, 0x68, 0x61, 0x47,
	0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12,
	0x22, 0x0a, 0x0d, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x61, 0x63, 0x68, 0x61, 0x52, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x61, 0x63, 0x68,
	0x61, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x61, 0x63,
	0x68, 0x61, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x39, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x43, 0x75, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x22, 0x3b, 0x0a, 0x0e, 0x47,
	0x61, 0x63, 0x68, 0x61, 0x55, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x29, 0x0a,
	0x11, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x6e, 0x6f, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x61, 0x63, 0x68, 0x61, 0x4e,
	0x6f, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x9f, 0x0a, 0x0a, 0x0e, 0x47, 0x61, 0x63,
	0x68, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x61, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x67, 0x61, 0x63, 0x68, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75,
	0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x63, 0x68,
	0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x47, 0x61, 0x63, 0x68, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x5c,
	0x0a, 0x13, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42,
	0x69, 0x6e, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x67, 0x61, 0x63, 0x68, 0x61,
	0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x42, 0x0a, 0x1e,
	0x63, 0x75, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x63, 0x75, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x61, 0x63, 0x68, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x67, 0x0a, 0x18, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x49,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x14, 0x67, 0x61, 0x63, 0x68, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x12, 0x7a, 0x0a, 0x1f, 0x67, 0x61, 0x63,
	0x68, 0x61, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1a, 0x67, 0x61, 0x63, 0x68, 0x61,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x61, 0x70, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74,
	0x65, 0x6e, 0x5f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x65, 0x6e, 0x47, 0x61,
	0x63, 0x68, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x11, 0x67, 0x61, 0x63, 0x68,
	0x61, 0x5f, 0x75, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x63, 0x68,
	0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61,
	0x55, 0x70, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x67, 0x61, 0x63, 0x68, 0x61, 0x55, 0x70, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x12, 0x20,
	0x0a, 0x0c, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x77, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x69, 0x73, 0x68, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x77, 0x69, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4e, 0x65,
	0x77, 0x57, 0x69, 0x73, 0x68, 0x12, 0x49, 0x0a, 0x22, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1d, 0x63, 0x75, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x47, 0x61, 0x63, 0x68, 0x61, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x42, 0x0a, 0x1e, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x63, 0x75, 0x72, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x47, 0x61, 0x63, 0x68, 0x61, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x1a, 0x62, 0x0a, 0x16, 0x47, 0x61, 0x63, 0x68, 0x61, 0x47, 0x75, 0x61,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x47, 0x75, 0x61,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x19, 0x47, 0x61, 0x63, 0x68,
	0x61, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x61, 0x63, 0x68, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x70,
	0x0a, 0x1f, 0x47, 0x61, 0x63, 0x68, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x58, 0x0a, 0x13, 0x47, 0x61, 0x63, 0x68, 0x61, 0x55, 0x70, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x55, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbe, 0x02, 0x0a, 0x12, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x61, 0x63, 0x68, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69,
	0x6e, 0x12, 0x57, 0x0a, 0x10, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x61, 0x63, 0x68, 0x61, 0x43,
	0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x67, 0x61, 0x63, 0x68,
	0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61,
	0x63, 0x68, 0x61, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x67, 0x61, 0x63, 0x68, 0x61, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x2a, 0x0a,
	0x11, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x47,
	0x61, 0x63, 0x68, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x61, 0x63, 0x68, 0x61, 0x54, 0x69, 0x6d,
	0x65, 0x1a, 0x58, 0x0a, 0x13, 0x47, 0x61, 0x63, 0x68, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xee, 0x02, 0x0a, 0x0f,
	0x47, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x67, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x67,
	0x69, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x47,
	0x61, 0x64, 0x67, 0x65, 0x74, 0x47, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x63, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x42, 0x69, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x43, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xce, 0x01, 0x0a,
	0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d,
	0x70, 0x42, 0x69, 0x6e, 0x12, 0x5b, 0x0a, 0x11, 0x67, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x69,
	0x76, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x47, 0x69, 0x76, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x67, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x61,
	0x70, 0x1a, 0x5a, 0x0a, 0x14, 0x47, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42,
	0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe6, 0x02,
	0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42, 0x69, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x72,
	0x6f, 0x75, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x75, 0x64, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x22, 0xf0, 0x02, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x2e, 0x0a,
	0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x12, 0x54, 0x0a,
	0x0f, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69,
	0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x4d, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2f, 0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x1a, 0x56, 0x0a, 0x12, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4b, 0x0a, 0x14, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69,
	0x6e, 0x12, 0x33, 0x0a, 0x16, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x13, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x0a, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x30, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x42, 0x69, 0x6e, 0x2e, 0x56, 0x61, 0x72, 0x52, 0x07, 0x76, 0x61, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0x2d, 0x0a, 0x03, 0x56, 0x61, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x45, 0x0a, 0x0b, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x70, 0x73, 0x42, 0x69, 0x6e,
	0x12, 0x20, 0x0a, 0x0c, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x54, 0x69, 0x70, 0x73,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6d,
	0x61, 0x78, 0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x46, 0x6c,
	0x79, 0x4d, 0x61, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x46, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x73, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xc8, 0x03, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x78, 0x0a, 0x1b, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x3f, 0x0a, 0x1c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x19, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x70, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x70, 0x73, 0x42,
	0x69, 0x6e, 0x52, 0x0c, 0x70, 0x75, 0x73, 0x68, 0x54, 0x69, 0x70, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x0c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x69, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x4b, 0x0a, 0x1d, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5c, 0x0a,
	0x0c, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x12, 0x22, 0x0a,
	0x0d, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x47, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x13, 0x54,
	0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42,
	0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x61, 0x74, 0x69,
	0x73, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc2, 0x01,
	0x0a, 0x13, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x53, 0x0a, 0x18, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x15,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x66, 0x6c, 0x6f, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x14, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x5d, 0x0a, 0x12, 0x63,
	0x75, 0x72, 0x5f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x42, 0x69, 0x6e, 0x2e, 0x43, 0x75, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x1a, 0x42, 0x0a, 0x14, 0x43, 0x75,
	0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaa,
	0x04, 0x0a, 0x16, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72,
	0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3b, 0x0a, 0x0f, 0x74, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72,
	0x54, 0x65, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x65,
	0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x43,
	0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e,
	0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x55, 0x0a, 0x0e, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x75, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x2e, 0x54, 0x6f,
	0x77, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x46, 0x6c, 0x6f, 0x6f,
	0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x1a, 0x5f, 0x0a, 0x14, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x6f,
	0x77, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x15, 0x54,
	0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x12, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x75,
	0x66, 0x66, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x56, 0x0a, 0x12, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x6f, 0x72,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xf9, 0x07, 0x0a, 0x16, 0x54, 0x6f,
	0x77, 0x65, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x42, 0x69, 0x6e, 0x12, 0x6e, 0x0a, 0x17, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x72,
	0x65, 0x76, 0x65, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f,
	0x77, 0x65, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x42, 0x69, 0x6e, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x76, 0x65, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x12, 0x55, 0x0a, 0x0e, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x2e, 0x4b, 0x69, 0x6c, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6b,
	0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x3c, 0x0a, 0x1b, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x68, 0x0a, 0x15, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x2e, 0x54,
	0x61, 0x6b, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x74, 0x61, 0x6b, 0x65, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x6b, 0x0a, 0x16, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x13, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x6b, 0x0a, 0x16, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x13, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65,
	0x76, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a,
	0x11, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45,
	0x0a, 0x17, 0x54, 0x61, 0x6b, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a,
	0x18, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x48, 0x0a, 0x15, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xc7, 0x04, 0x0a, 0x1c, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x69, 0x6e,
	0x12, 0x53, 0x0a, 0x17, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x5f,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x14, 0x6d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x15, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77,
	0x65, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x12, 0x6d, 0x6f, 0x73, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x50, 0x61, 0x69, 0x72, 0x12, 0x51, 0x0a, 0x16, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73,
	0x74, 0x5f, 0x64, 0x70, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x72, 0x5f, 0x70, 0x61, 0x69, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x6f, 0x77, 0x65, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x13, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x44, 0x70, 0x73,
	0x41, 0x76, 0x61, 0x74, 0x72, 0x50, 0x61, 0x69, 0x72, 0x12, 0x5c, 0x0a, 0x1c, 0x6d, 0x6f, 0x73,
	0x74, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x18, 0x6d,
	0x6f, 0x73, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x50, 0x61, 0x69, 0x72, 0x12, 0x67, 0x0a, 0x22, 0x6d, 0x6f, 0x73, 0x74, 0x5f,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65,
	0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x1d, 0x6d, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x61, 0x69, 0x72,
	0x12, 0x67, 0x0a, 0x22, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x1d, 0x6d, 0x6f, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x61, 0x69, 0x72, 0x22, 0xf5, 0x02, 0x0a, 0x16, 0x54, 0x6f,
	0x77, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x42, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x65, 0x73, 0x74,
	0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x65,
	0x73, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x59,
	0x0a, 0x16, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x42, 0x69, 0x6e, 0x52, 0x14, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x62,
	0x61, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x22, 0xf3, 0x07, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x77, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x17, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f,
	0x77, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69,
	0x6e, 0x52, 0x14, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x46, 0x6c,
	0x6f, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x61, 0x0a, 0x14, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x42, 0x75, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x43,
	0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e,
	0x52, 0x0e, 0x63, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x39, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x74, 0x68, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x54,
	0x68, 0x69, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x66,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77,
	0x65, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x42, 0x69, 0x6e, 0x52, 0x0e, 0x66, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x12, 0x70, 0x0a, 0x19, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69,
	0x6e, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x74,
	0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x4d, 0x61, 0x70, 0x12, 0x62, 0x0a, 0x20, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x6c, 0x6f,
	0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x1c, 0x74, 0x6f, 0x77,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x62, 0x0a, 0x16, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x68, 0x0a,
	0x1b, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe7, 0x02, 0x0a, 0x18, 0x42, 0x6c, 0x6f, 0x73,
	0x73, 0x6f, 0x6d, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x61,
	0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x72, 0x6f, 0x70,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x22, 0xb9, 0x01, 0x0a, 0x15, 0x42, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x49, 0x0a, 0x10, 0x63,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c,
	0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x0e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x43, 0x61,
	0x6d, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x5f,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x75,
	0x73, 0x65, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5b, 0x0a,
	0x1c, 0x42, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xe1, 0x04, 0x0a, 0x14, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x70,
	0x42, 0x69, 0x6e, 0x12, 0x73, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x43, 0x6f, 0x6d,
	0x70, 0x42, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x64, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x16, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x64, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x62, 0x0a, 0x13, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x42,
	0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x59, 0x0a, 0x10,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x70,
	0x42, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x1a, 0x49, 0x0a, 0x1b, 0x52, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x64, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x69, 0x0a, 0x16, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a,
	0x13, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c,
	0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9,
	0x01, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42,
	0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e,
	0x49, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x79,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x44, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x16, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x42, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x45,
	0x0a, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x42, 0x69, 0x6e, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x1a, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x17, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x9d, 0x01, 0x0a, 0x15, 0x4d, 0x63, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x97, 0x02, 0x0a, 0x14, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x69, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x74, 0x61, 0x6b, 0x65, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x18, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x47, 0x69, 0x66, 0x74, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x22, 0x6e, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x53, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x47, 0x69, 0x66, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x19, 0x50, 0x73, 0x6e, 0x43, 0x6f,
	0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x62, 0x75, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x4c, 0x61,
	0x73, 0x74, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x18, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x42, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x5f, 0x6d, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x61, 0x64, 0x64, 0x4d, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x61, 0x72,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61,
	0x79, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69,
	0x6e, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x12,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x61, 0x76, 0x65, 0x42,
	0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x69, 0x6e, 0x52,
	0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xa8, 0x08, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x60, 0x0a, 0x12, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x42, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x58, 0x0a, 0x10,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x64, 0x62, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x42, 0x69, 0x6e, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x44, 0x62, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x77, 0x61, 0x69, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x44, 0x62, 0x4d, 0x61, 0x70, 0x12, 0x4a, 0x0a, 0x12, 0x6d, 0x63, 0x6f, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x63, 0x6f, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x69, 0x6e,
	0x52, 0x10, 0x6d, 0x63, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x69, 0x6e, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x6d,
	0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x17, 0x6d, 0x63, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x70, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x69, 0x70,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x73, 0x34, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x70, 0x73, 0x34, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x52,
	0x0a, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x47, 0x69, 0x66, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x12,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x47, 0x69, 0x66, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x4e, 0x0a, 0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x61, 0x76, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x13, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x61, 0x76, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x4a, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f,
	0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x47, 0x69, 0x66, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x11, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x47, 0x69, 0x66, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x63, 0x0a, 0x1d, 0x70, 0x73, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x73, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x1a, 0x70, 0x73, 0x6e, 0x43, 0x6f, 0x6d,
	0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0x43, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x57, 0x61, 0x69,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x44, 0x62, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x70, 0x0a, 0x16, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54,
	0x61, 0x67, 0x42, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0xb6, 0x03,
	0x0a, 0x15, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x67,
	0x42, 0x69, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x61, 0x6b,
	0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x50, 0x61, 0x69, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x75, 0x72, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x61,
	0x69, 0x6c, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x61, 0x69, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x5c, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xa0, 0x03, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e,
	0x12, 0x48, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x20, 0x63, 0x75,
	0x72, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69,
	0x6e, 0x52, 0x1b, 0x63, 0x75, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x15, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x4c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x22, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x77, 0x65,
	0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3c, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x74, 0x45,
	0x6d, 0x6f, 0x6a, 0x69, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69,
	0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa1, 0x0a, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x31, 0x0a,
	0x15, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x79, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x19, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x15, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x5f, 0x62,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x42, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x59, 0x65, 0x61, 0x72, 0x12,
	0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73,
	0x48, 0x61, 0x76, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x2f,
	0x0a, 0x14, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4f, 0x6e, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12,
	0x40, 0x0a, 0x1d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3a, 0x0a, 0x1a, 0x63, 0x75, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x75, 0x72, 0x44, 0x61, 0x79, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x42, 0x0a, 0x1e,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x68, 0x0a, 0x16, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x32, 0x0a, 0x16, 0x63, 0x75,
	0x72, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x44,
	0x61, 0x79, 0x41, 0x73, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x2f,
	0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x07, 0x52, 0x11, 0x6c, 0x61,
	0x73, 0x74, 0x41, 0x73, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x13, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x68,
	0x6f, 0x77, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x12, 0x32, 0x0a, 0x16, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x52, 0x13, 0x63, 0x68, 0x61, 0x74, 0x45, 0x6d, 0x6f, 0x6a,
	0x69, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x13, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x62,
	0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x42, 0x69, 0x6e,
	0x52, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x42, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x10, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65,
	0x74, 0x1a, 0x46, 0x0a, 0x18, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc1, 0x02, 0x0a, 0x1a, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x74, 0x69, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x75, 0x63, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x4e, 0x75,
	0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x75, 0x72,
	0x5f, 0x73, 0x75, 0x63, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x63, 0x75, 0x72, 0x53, 0x75, 0x63, 0x63, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x63,
	0x75, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x4e, 0x75, 0x6d, 0x22, 0xcc, 0x02,
	0x0a, 0x09, 0x4d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x6d,
	0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x16,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x75, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x52, 0x0a, 0x14, 0x75, 0x69, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x69,
	0x6e, 0x2e, 0x55, 0x69, 0x64, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42,
	0x69, 0x6e, 0x52, 0x11, 0x75, 0x69, 0x64, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x45, 0x0a, 0x10, 0x55, 0x69, 0x64, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x49, 0x0a, 0x13,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x70,
	0x42, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x0c, 0x6d, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x69, 0x6e, 0x52, 0x0a, 0x6d, 0x70, 0x50,
	0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x64, 0x65,
	0x78, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x78, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x11, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x78, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x1d, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x69, 0x72, 0x42,
	0x69, 0x6e, 0x52, 0x19, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8c, 0x02,
	0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6d,
	0x70, 0x42, 0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x74, 0x69, 0x70, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x18, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x50, 0x75, 0x73, 0x68, 0x74, 0x69, 0x70, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x70, 0x75, 0x73, 0x68, 0x74, 0x69, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61,
	0x64, 0x50, 0x75, 0x73, 0x68, 0x74, 0x69, 0x70, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x78, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x75,
	0x73, 0x68, 0x74, 0x69, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x50, 0x75,
	0x73, 0x68, 0x74, 0x69, 0x70, 0x73, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x0e,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x96, 0x01, 0x0a, 0x18, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x40,
	0x0a, 0x10, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x6e, 0x52,
	0x0f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x19, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e,
	0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x15, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x6e,
	0x47, 0x6f, 0x61, 0x6c, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x19, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x12,
	0x3e, 0x0a, 0x1c, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x18, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x4d, 0x0a, 0x18, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x74,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x72, 0x69, 0x61,
	0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x22, 0xf1,
	0x01, 0x0a, 0x13, 0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x22, 0x5d, 0x0a, 0x10, 0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x64, 0x22, 0xb5, 0x03, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x51, 0x0a, 0x17, 0x68, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x14, 0x68, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a,
	0x22, 0x63, 0x75, 0x72, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x68, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f,
	0x76, 0x65, 0x63, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x1d, 0x63, 0x75, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x56, 0x65,
	0x63, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a,
	0x22, 0x63, 0x75, 0x72, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1d, 0x63, 0x75, 0x72, 0x57, 0x65,
	0x65, 0x6b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x22, 0x63, 0x75, 0x72, 0x5f,
	0x77, 0x65, 0x65, 0x6b, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x1d, 0x63, 0x75, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x68, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4e,
	0x65, 0x77, 0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x7c, 0x0a, 0x18, 0x43, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x54, 0x61, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0xe1, 0x03, 0x0a, 0x11, 0x43, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x35,
	0x0a, 0x17, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x14, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x1e, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1a, 0x74,
	0x61, 0x6b, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x69, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x39, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73,
	0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x39, 0x0a, 0x19, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x17, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x14, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x72,
	0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x52, 0x12,
	0x63, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x14, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x41, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x03, 0x70,
	0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12,
	0x22, 0x0a, 0x03, 0x72, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x03,
	0x72, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x11, 0x57, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x4c, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x6f, 0x78, 0x42, 0x69, 0x6e, 0x12,
	0x59, 0x0a, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x4c, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x6f,
	0x78, 0x42, 0x69, 0x6e, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x6c, 0x6f, 0x74, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x1a, 0x42, 0x0a, 0x14, 0x53, 0x6c,
	0x6f, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdb,
	0x01, 0x0a, 0x22, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x66, 0x47,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x6e,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x48, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x0f, 0x68, 0x69,
	0x6e, 0x74, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x68, 0x69, 0x6e, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x50, 0x6f, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x18,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72,
	0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x63, 0x75, 0x72, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x6a, 0x0a, 0x15, 0x57, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x5a, 0x0a, 0x15, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x63, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x37, 0x0a, 0x16, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xab, 0x01, 0x0a, 0x13,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x6f, 0x6e, 0x65,
	0x42, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x0f, 0x68, 0x69, 0x6e, 0x74, 0x5f,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42,
	0x69, 0x6e, 0x52, 0x0d, 0x68, 0x69, 0x6e, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x6f,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x13, 0x57, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x69, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a,
	0x16, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x57, 0x69,
	0x7a, 0x61, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73,
	0x68, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xca, 0x04, 0x0a, 0x0f, 0x57,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x50,
	0x0a, 0x14, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x12, 0x6c, 0x0a, 0x1c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x66, 0x5f, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x66, 0x47, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69,
	0x6e, 0x48, 0x00, 0x52, 0x19, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x66, 0x47, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4c,
	0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x0e,
	0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c,
	0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e,
	0x69, 0x6d, 0x61, 0x6c, 0x12, 0x3e, 0x0a, 0x0b, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x18, 0xa9, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74,
	0x6f, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x74, 0x6f, 0x6e, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x18, 0xb9, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x10,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x12, 0x47, 0x0a, 0x0e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x7a, 0x61,
	0x72, 0x64, 0x18, 0xe5, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x57,
	0x69, 0x7a, 0x61, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x65, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x57, 0x69, 0x7a, 0x61, 0x72, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x22, 0x91, 0x01, 0x0a, 0x09, 0x57, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6f,
	0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x08, 0x52, 0x10, 0x73, 0x6c, 0x6f, 0x74, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x62,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x69, 0x6e,
	0x52, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x69, 0x6e, 0x22, 0xa4, 0x09, 0x0a, 0x13,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x42, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x77, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x65, 0x78,
	0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x71, 0x75, 0x69,
	0x63, 0x6b, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x55,
	0x73, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x1a,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x6e,
	0x52, 0x0f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x42, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x6c, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x62, 0x6f,
	0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x4c, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x6f, 0x78, 0x42, 0x69,
	0x6e, 0x52, 0x08, 0x6c, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x6f, 0x78, 0x12, 0x73, 0x0a, 0x21, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x66, 0x5f, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x66, 0x47, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69,
	0x6e, 0x52, 0x1d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x66, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x53, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e,
	0x52, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x19, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63,
	0x6f, 0x6f, 0x6c, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x52, 0x15, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6f,
	0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x58, 0x0a,
	0x1a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x52,
	0x16, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x42, 0x69, 0x6e, 0x52, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x0f, 0x77, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x42,
	0x69, 0x6e, 0x52, 0x0d, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x5b, 0x0a, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73,
	0x6c, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x59,
	0x0a, 0x2a, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x66, 0x5f, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x25, 0x69, 0x73, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x66, 0x47, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x73, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1b, 0x69, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x65, 0x64, 0x1a, 0x42,
	0x0a, 0x14, 0x53, 0x6c, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x3e, 0x0a, 0x12, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x22, 0xaf, 0x01, 0x0a, 0x0c, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x42, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x69, 0x6e, 0x22, 0x4a, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x30,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x42, 0x69, 0x6e, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xf1, 0x02, 0x0a, 0x0b, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6f, 0x70, 0x42, 0x69, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x61, 0x76, 0x65,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x61, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x73, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x43,
	0x0a, 0x0f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x69,
	0x72, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x76, 0x61, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x50, 0x61, 0x69, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x56, 0x61, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x10, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x69,
	0x72, 0x42, 0x69, 0x6e, 0x52, 0x0e, 0x73, 0x65, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x22, 0x70, 0x0a, 0x0c, 0x43, 0x6f, 0x6f, 0x70, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x42, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6f, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x6f, 0x70, 0x22, 0x8e, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6f, 0x70, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x06, 0x63, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a,
	0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0f, 0x63, 0x6f,
	0x6f, 0x70, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6f, 0x70,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6f, 0x70, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x10, 0x73, 0x65, 0x65, 0x6e, 0x5f,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x50, 0x61, 0x69, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0e, 0x73, 0x65, 0x65, 0x6e, 0x45, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6f, 0x70,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x63,
	0x6f, 0x6f, 0x70, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x4b, 0x0a, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x2e, 0x4d,
	0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x1a, 0x52, 0x0a, 0x10,
	0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f,
	0x6f, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xf9, 0x01, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6f, 0x70, 0x43,
	0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6f, 0x70, 0x42,
	0x69, 0x6e, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6f, 0x70, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x42, 0x69,
	0x6e, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x13,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc7, 0x02, 0x0a,
	0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x35, 0x0a,
	0x17, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14,
	0x74, 0x61, 0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x69, 0x73, 0x52, 0x65, 0x61, 0x63, 0x68, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x32, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4e,
	0x65, 0x77, 0x4d, 0x61, 0x78, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73,
	0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x22, 0x61, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12,
	0x48, 0x0a, 0x11, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x69, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x10, 0x52, 0x65,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x2b,
	0x0a, 0x12, 0x72, 0x65, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x29, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xb8, 0x03, 0x0a, 0x11, 0x52, 0x65, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x61, 0x6b, 0x65, 0x6e,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x61, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x13, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x5f, 0x64, 0x61,
	0x79, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x75, 0x72, 0x44, 0x61, 0x79, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x6b, 0x65,
	0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f,
	0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa9, 0x01,
	0x0a, 0x13, 0x52, 0x65, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x5f,
	0x64, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x63, 0x75, 0x72, 0x44, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xaa, 0x03, 0x0a, 0x10, 0x52, 0x65,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x3a,
	0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x47,
	0x69, 0x66, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x42, 0x69, 0x6e, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x49,
	0x6e, 0x42, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x69, 0x6e, 0x52, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12,
	0x3f, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x42,
	0x69, 0x6e, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x42, 0x69, 0x6e,
	0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x11, 0x72,
	0x65, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xca, 0x01, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x65, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12,
	0x3b, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0e,
	0x72, 0x65, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x75,
	0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x72,
	0x65, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x17,
	0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x68, 0x65,
	0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x57, 0x68, 0x65, 0x6e, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x22, 0x6e, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4e,
	0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41,
	0x0a, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x42, 0x69,
	0x6e, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x66, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x15, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x14, 0x4d, 0x69, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x18, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74,
	0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x0d, 0x64, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe2,
	0x02, 0x0a, 0x0d, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x42, 0x69, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69,
	0x63, 0x75, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x45, 0x0a, 0x14, 0x67, 0x65, 0x61,
	0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x69, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x11, 0x67,
	0x65, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x12, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x5f, 0x74, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x65,
	0x61, 0x63, 0x68, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x18, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x75, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x63,
	0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x42,
	0x0a, 0x12, 0x63, 0x75, 0x72, 0x5f, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73,
	0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x42, 0x69, 0x6e,
	0x52, 0x10, 0x63, 0x75, 0x72, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x42,
	0x69, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x13, 0x4f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x75,
	0x73, 0x65, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x6e, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x53, 0x0a, 0x18, 0x6f, 0x70,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x65,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x15, 0x6f, 0x70, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x49, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x15, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xb9, 0x01,
	0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x66, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x0f, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x0b,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x52,
	0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x13, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x42,
	0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x69, 0x6e,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x42, 0x69, 0x6e, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x22, 0x54, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x37, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x69, 0x6e, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x78, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x54, 0x61, 0x6c, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x15, 0x6e,
	0x70, 0x63, 0x5f, 0x66, 0x69, 0x73, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x70, 0x63, 0x46,
	0x69, 0x73, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x15, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x6c, 0x6b, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x3a, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x69, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x73, 0x68, 0x52, 0x6f, 0x64, 0x22, 0xcf, 0x02, 0x0a,
	0x15, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42, 0x72,
	0x69, 0x65, 0x66, 0x42, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x42, 0x69, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3b,
	0x0a, 0x08, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x69,
	0x6e, 0x52, 0x08, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x74,
	0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x70, 0x73, 0x6e,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x50, 0x73, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x79,
	0x0a, 0x18, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x77, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x19, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc8, 0x04,
	0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x0a,
	0x62, 0x72, 0x69, 0x65, 0x66, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42, 0x72, 0x69, 0x65, 0x66, 0x42, 0x69, 0x6e, 0x52, 0x09,
	0x62, 0x72, 0x69, 0x65, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64,
	0x49, 0x64, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x10, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x11,
	0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x15,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x52, 0x13, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75,
	0x67, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x67, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x62, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a,
	0x12, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x10, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x6f, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x6f, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x08, 0x0a, 0x06, 0x55, 0x67, 0x63, 0x42,
	0x69, 0x6e, 0x22, 0xde, 0x01, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x67, 0x63,
	0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x46, 0x0a, 0x0b, 0x75, 0x67, 0x63, 0x5f, 0x62,
	0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x67, 0x63, 0x43, 0x6f,
	0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x55, 0x67, 0x63, 0x42, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x75, 0x67, 0x63, 0x42, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x12,
	0x35, 0x0a, 0x17, 0x62, 0x61, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x62, 0x61, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x4b, 0x0a, 0x0e, 0x55, 0x67, 0x63, 0x42, 0x69, 0x6e,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x67, 0x63, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x6f,
	0x6d, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x5f, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x46, 0x75,
	0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xed, 0x01, 0x0a,
	0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x3f,
	0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x69,
	0x6e, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x73, 0x0a, 0x13,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x3f, 0x0a, 0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x42, 0x69, 0x6e, 0x52, 0x0c, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x42, 0x0a, 0x18, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f,
	0x6d, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x65, 0x78, 0x70, 0x22, 0x73, 0x0a, 0x17, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x75, 0x62,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x53, 0x68, 0x6f, 0x74, 0x42, 0x69, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x73, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x67, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x6f,
	0x6d, 0x65, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x22, 0xcd, 0x01, 0x0a, 0x14, 0x48,
	0x6f, 0x6d, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x53, 0x68, 0x6f, 0x74,
	0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x75,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x5f, 0x70,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x61, 0x77,
	0x6e, 0x50, 0x6f, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x53, 0x6e, 0x61, 0x70, 0x53, 0x68, 0x6f, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x17, 0x48,
	0x6f, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x53,
	0x68, 0x6f, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x47, 0x75, 0x69, 0x64, 0x12, 0x2d, 0x0a,
	0x09, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42,
	0x69, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x50, 0x6f, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x22,
	0x55, 0x0a, 0x17, 0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x4e, 0x50, 0x43, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x75,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x73,
	0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x19, 0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x75, 0x69, 0x74, 0x65, 0x49, 0x64, 0x22, 0xaa,
	0x02, 0x0a, 0x1d, 0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x67, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x75, 0x72, 0x6e,
	0x69, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x75, 0x72, 0x6e, 0x69,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x6e, 0x70, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d,
	0x65, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x50, 0x43, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x70, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x41, 0x0a, 0x0a, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x69, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x8d, 0x04, 0x0a, 0x14,
	0x48, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x6e, 0x70, 0x63, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x4e, 0x70, 0x63, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x4e, 0x70, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x14, 0x66, 0x75,
	0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x53, 0x75,
	0x69, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x12, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x75, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x46, 0x75, 0x72, 0x6e, 0x69,
	0x74, 0x75, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x09, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x6f, 0x75,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x64, 0x6a, 0x69, 0x6e, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x08, 0x64, 0x6a, 0x69, 0x6e, 0x6e, 0x50, 0x6f,
	0x73, 0x12, 0x41, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x53,
	0x68, 0x6f, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x53, 0x68, 0x6f, 0x74, 0x42, 0x69, 0x6e, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x59, 0x0a, 0x16, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x13, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x61,
	0x72, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x81, 0x03, 0x0a, 0x15,
	0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63,
	0x75, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a,
	0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f,
	0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42,
	0x69, 0x6e, 0x52, 0x0c, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x55, 0x0a, 0x1c, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x69, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x19, 0x66, 0x75,
	0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x24, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6d,
	0x66, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x66, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x66, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x84, 0x01, 0x0a, 0x18, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42,
	0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x0f, 0x48, 0x6f, 0x6d, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x46, 0x0a, 0x0e, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x42, 0x69, 0x6e, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x18, 0x46,
	0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x42, 0x65, 0x48, 0x65,
	0x6c, 0x70, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x22, 0x3e, 0x0a, 0x14,
	0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x48, 0x65, 0x6c,
	0x70, 0x42, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x59, 0x0a, 0x15,
	0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x42, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x75, 0x72,
	0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x6b, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61,
	0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xbb, 0x02, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x46, 0x75, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x42, 0x69,
	0x6e, 0x12, 0x4b, 0x0a, 0x13, 0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f,
	0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65,
	0x4d, 0x61, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x69, 0x6e, 0x52, 0x10, 0x6d, 0x61,
	0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b,
	0x0a, 0x13, 0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x62, 0x69, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x6b,
	0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x42, 0x69, 0x6e, 0x52, 0x10, 0x6d, 0x61, 0x6b, 0x65, 0x53,
	0x6c, 0x6f, 0x74, 0x73, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x68,
	0x65, 0x6c, 0x70, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69,
	0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x42, 0x69, 0x6e, 0x52,
	0x0b, 0x68, 0x65, 0x6c, 0x70, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0f,
	0x68, 0x65, 0x6c, 0x70, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75,
	0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x42, 0x65, 0x48, 0x65, 0x6c,
	0x70, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x64, 0x42, 0x69,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x50, 0x43, 0x50, 0x6f,
	0x73, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x92, 0x01,
	0x0a, 0x18, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x64, 0x53, 0x68, 0x6f, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x6e, 0x70, 0x63, 0x5f, 0x70, 0x6f,
	0x73, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x50, 0x43, 0x50, 0x6f, 0x73,
	0x42, 0x69, 0x6e, 0x52, 0x0d, 0x6e, 0x70, 0x63, 0x50, 0x6f, 0x73, 0x42, 0x69, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x5e, 0x0a, 0x0f, 0x48, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x6f, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x0d,
	0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x68, 0x6f, 0x6d,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x0e, 0x66, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x66, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x45, 0x78, 0x70, 0x42, 0x69, 0x6e, 0x22, 0x76, 0x0a, 0x11, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x61, 0x6c, 0x6b,
	0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a,
	0x74, 0x61, 0x6c, 0x6b, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x88,
	0x01, 0x0a, 0x18, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x22, 0xd5, 0x01, 0x0a, 0x13, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69,
	0x6e, 0x12, 0x42, 0x0a, 0x10, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x0e, 0x68, 0x6f, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x6e,
	0x52, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x8a, 0x01, 0x0a, 0x1c, 0x48, 0x6f, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x57,
	0x6f, 0x6f, 0x64, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x6f, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x54,
	0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x6c, 0x75, 0x65,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48,
	0x6f, 0x6d, 0x65, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x6e, 0x12,
	0x2c, 0x0a, 0x12, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x75, 0x69,
	0x64, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x6c, 0x75,
	0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x64, 0x49, 0x64, 0x78, 0x12, 0x45, 0x0a,
	0x0d, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x53, 0x6c, 0x6f, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x73, 0x6c, 0x6f, 0x74, 0x42, 0x69, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x9c, 0x0b, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48,
	0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x69, 0x6e, 0x69, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x69,
	0x6e, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a,
	0x17, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48,
	0x6f, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x08,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x4a, 0x0a, 0x22, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x72,
	0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x1e, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x20, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x5f, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1c,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x75, 0x69, 0x74, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x1d,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x67,
	0x6f, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x19, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x75, 0x70, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x47, 0x6f, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x12, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x6b, 0x65,
	0x5f, 0x62, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x69, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x61, 0x6b, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x10, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74,
	0x75, 0x72, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x68, 0x6f,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x69, 0x6e, 0x52, 0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x23, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x75,
	0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x1f, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75,
	0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x53, 0x75, 0x69, 0x74, 0x65, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x49, 0x0a, 0x10, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x53, 0x68, 0x6f, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0e, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x53, 0x68, 0x6f, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x3f, 0x0a,
	0x1d, 0x69, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x6c, 0x66, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x45, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x6c, 0x66, 0x48, 0x6f, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x12, 0x42,
	0x0a, 0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x62, 0x69,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x42, 0x69, 0x6e, 0x52, 0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42,
	0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x61, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x68,
	0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x10, 0x73, 0x65, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x67,
	0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x11, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x67, 0x6d, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x6f, 0x53, 0x61, 0x66, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x61, 0x0a, 0x1b,
	0x77, 0x6f, 0x6f, 0x64, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x57, 0x6f, 0x6f, 0x64, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x17, 0x77, 0x6f, 0x6f, 0x64, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x0d, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6e,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x42, 0x69, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x09, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x4f, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70,
	0x1a, 0x3b, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x67, 0x0a,
	0x14, 0x48, 0x35, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x68, 0x35, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x68, 0x35, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xbb, 0x03, 0x0a, 0x0d, 0x48, 0x35, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x68, 0x35, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x68, 0x35, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x21, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x68, 0x35, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x48, 0x35, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x18, 0x68, 0x35, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x48, 0x35, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x42, 0x69, 0x6e, 0x52, 0x15, 0x68, 0x35, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x68,
	0x35, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x35, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x48, 0x0a, 0x21, 0x75, 0x6e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x68, 0x35,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1d, 0x75, 0x6e,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x48, 0x35, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x69,
	0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69,
	0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x67, 0x65, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48,
	0x35, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e,
	0x12, 0x3e, 0x0a, 0x10, 0x68, 0x35, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x48, 0x35, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x69, 0x6e,
	0x52, 0x0e, 0x68, 0x35, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x18, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x64,
	0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x64, 0x44, 0x6f, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x76, 0x0a, 0x0e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x75,
	0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x75, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x70, 0x75, 0x6e, 0x69,
	0x73, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x75, 0x6e, 0x69, 0x73,
	0x68, 0x42, 0x69, 0x6e, 0x52, 0x0a, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x5f,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x13, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5e, 0x0a, 0x17, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x68,
	0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x52, 0x0e, 0x65, 0x78, 0x68, 0x69,
	0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x12, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x69,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x22, 0xba, 0x01, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x22, 0x84, 0x01,
	0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x42, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x22, 0xf4, 0x01, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12,
	0x3d, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x69,
	0x6e, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43,
	0x0a, 0x0f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x16, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x42, 0x69, 0x6e, 0x52, 0x13, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x11, 0x46,
	0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x69, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x71, 0x0a, 0x12, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x69, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x4b, 0x0a, 0x15, 0x72, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x66, 0x6f, 0x72,
	0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb0, 0x01,
	0x0a, 0x18, 0x46, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x15, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x52, 0x12, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xfe, 0x01, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x54, 0x0a, 0x19, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x52, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x69, 0x6e, 0x52, 0x16, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x16, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x62, 0x69, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x13, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xa1, 0x01, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70,
	0x42, 0x69, 0x6e, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x1a, 0x4a, 0x0a, 0x0c, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3e, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x37, 0x0a, 0x0c, 0x44, 0x65, 0x61, 0x74, 0x68, 0x5a, 0x6f,
	0x6e, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0xc2,
	0x01, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x0c,
	0x76, 0x61, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0a, 0x76,
	0x61, 0x72, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x13, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x61, 0x74, 0x68, 0x5a, 0x6f, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x10, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x5a, 0x6f, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x44, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x63, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x43, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x63, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xcc, 0x01, 0x0a, 0x14, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x44, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69,
	0x6e, 0x12, 0x5a, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x64, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x43, 0x44, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x43, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x1a, 0x58, 0x0a,
	0x13, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x43, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdb, 0x02, 0x0a, 0x11, 0x47, 0x43, 0x47, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x42, 0x69, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x41, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x42, 0x69, 0x6e, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42,
	0x72, 0x69, 0x65, 0x66, 0x42, 0x69, 0x6e, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61, 0x63, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x46, 0x61,
	0x63, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x3e, 0x0a, 0x10, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61, 0x63,
	0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x92, 0x02, 0x0a, 0x0f, 0x47, 0x43, 0x47, 0x47, 0x61, 0x6d,
	0x65, 0x42, 0x72, 0x69, 0x65, 0x66, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x55, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x4b, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66,
	0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x42, 0x69, 0x6e, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xdd, 0x01, 0x0a, 0x0c, 0x47,
	0x43, 0x47, 0x44, 0x53, 0x44, 0x65, 0x63, 0x6b, 0x42, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf5, 0x01, 0x0a, 0x0c, 0x47,
	0x43, 0x47, 0x44, 0x53, 0x43, 0x61, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x15, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x61, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x61,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x48, 0x0a, 0x21, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74,
	0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x1d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x78, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xae, 0x02, 0x0a, 0x10, 0x47, 0x43, 0x47, 0x44, 0x65, 0x63, 0x6b, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x6b, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x44, 0x53, 0x44, 0x65, 0x63, 0x6b, 0x42, 0x69, 0x6e, 0x52,
	0x08, 0x64, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x44, 0x53, 0x43, 0x61, 0x72, 0x64, 0x42, 0x69,
	0x6e, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x18, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x11, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x75, 0x72, 0x44, 0x65,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64,
	0x65, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x10, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x6d, 0x0a, 0x17, 0x47, 0x43, 0x47, 0x54, 0x43, 0x54, 0x61, 0x76, 0x65,
	0x72, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x11, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xeb, 0x01, 0x0a, 0x0c, 0x47, 0x43, 0x47, 0x54, 0x61, 0x76, 0x65, 0x72, 0x6e,
	0x42, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x10,
	0x69, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x6c, 0x5f, 0x77, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x75,
	0x65, 0x6c, 0x57, 0x69, 0x6e, 0x12, 0x59, 0x0a, 0x19, 0x74, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x5f,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x43, 0x47, 0x54, 0x43, 0x54, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x16, 0x74, 0x61, 0x76, 0x65, 0x72, 0x6e,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xf9, 0x01, 0x0a, 0x0b, 0x47, 0x43, 0x47, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x69, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x77, 0x69, 0x6e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72,
	0x65, 0x66, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x75,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x0d, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x02, 0x0a,
	0x0b, 0x47, 0x43, 0x47, 0x42, 0x61, 0x73, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x65, 0x78, 0x70, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x69,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x62, 0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x62, 0x61, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x62, 0x61, 0x6e, 0x5f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x62, 0x61, 0x6e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x65, 0x0a,
	0x0b, 0x47, 0x43, 0x47, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x17, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x13, 0x47, 0x43, 0x47, 0x42, 0x6f, 0x73, 0x73, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x10,
	0x47, 0x43, 0x47, 0x47, 0x75, 0x69, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc7, 0x03, 0x0a,
	0x14, 0x47, 0x43, 0x47, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x62,
	0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69,
	0x6e, 0x52, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70,
	0x72, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x18, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x1a, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x17, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x14, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x11, 0x67, 0x75, 0x69, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x10, 0x77, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x53, 0x65, 0x74, 0x22, 0x4d, 0x0a, 0x0e, 0x47, 0x43, 0x47, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x4e, 0x70, 0x63, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x70, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x18, 0x47, 0x43, 0x47, 0x54, 0x61, 0x76,
	0x65, 0x72, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x42,
	0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x5f, 0x6e, 0x70, 0x63, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x43, 0x47, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4e, 0x70, 0x63, 0x42, 0x69, 0x6e, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x4e, 0x70, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa5, 0x01,
	0x0a, 0x0d, 0x47, 0x43, 0x47, 0x57, 0x65, 0x65, 0x6b, 0x4e, 0x70, 0x63, 0x42, 0x69, 0x6e, 0x12,
	0x15, 0x0a, 0x06, 0x6e, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6e, 0x70, 0x63, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb4, 0x02, 0x0a, 0x13, 0x47, 0x43, 0x47, 0x57, 0x65, 0x65,
	0x6b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x67, 0x63, 0x67, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x47, 0x63, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x38,
	0x0a, 0x0d, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x6e, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43,
	0x47, 0x57, 0x65, 0x65, 0x6b, 0x4e, 0x70, 0x63, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x77, 0x65, 0x65,
	0x6b, 0x4e, 0x70, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x19, 0x67, 0x6d, 0x5f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x77, 0x65, 0x65,
	0x6b, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x67, 0x6d, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x44,
	0x61, 0x79, 0x12, 0x48, 0x0a, 0x22, 0x67, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x64, 0x61, 0x79, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c,
	0x67, 0x6d, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x65,
	0x65, 0x6b, 0x44, 0x61, 0x79, 0x53, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe7, 0x03, 0x0a,
	0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x43, 0x47, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69,
	0x6e, 0x12, 0x3f, 0x0a, 0x0f, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x44, 0x65, 0x63, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x42, 0x69, 0x6e, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42,
	0x69, 0x6e, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x5f, 0x62, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x43, 0x47, 0x54, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x42, 0x69, 0x6e, 0x52, 0x09, 0x74, 0x61, 0x76,
	0x65, 0x72, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f,
	0x62, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x43, 0x47, 0x42, 0x61, 0x73, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x52, 0x08, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x12, 0x4b, 0x0a, 0x13, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x69,
	0x6e, 0x52, 0x11, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x42, 0x69, 0x6e, 0x12, 0x58, 0x0a, 0x18, 0x74, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x5f, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x43, 0x47, 0x54, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x15, 0x74, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x48,
	0x0a, 0x12, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x62, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x10, 0x77, 0x65, 0x65, 0x6b, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x47, 0x61, 0x6d, 0x65,
	0x42, 0x72, 0x69, 0x65, 0x66, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x42, 0x72,
	0x69, 0x65, 0x66, 0x42, 0x69, 0x6e, 0x22, 0x48, 0x0a, 0x18, 0x41, 0x72, 0x61, 0x6e, 0x61, 0x72,
	0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x98, 0x02, 0x0a, 0x19, 0x41, 0x72, 0x61, 0x6e, 0x61, 0x72, 0x61, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x69, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6a, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72,
	0x61, 0x6e, 0x61, 0x72, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x69, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x12, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x70, 0x1a, 0x66, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x61, 0x6e, 0x61, 0x72, 0x61, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x69, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x76, 0x0a, 0x1e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x72, 0x61, 0x6e, 0x61, 0x72, 0x61, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x54, 0x0a,
	0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x69, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x61, 0x6e, 0x61, 0x72, 0x61, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x69, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x13,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x69, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xea, 0x1e, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x62,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70,
	0x42, 0x69, 0x6e, 0x52, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x12, 0x39, 0x0a,
	0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x09, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e,
	0x12, 0x33, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x07, 0x73, 0x68,
	0x6f, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69,
	0x6e, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0a, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x69, 0x6e,
	0x12, 0x36, 0x0a, 0x09, 0x62, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x42, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x08,
	0x62, 0x6f, 0x72, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x70, 0x5f, 0x62,
	0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e,
	0x52, 0x05, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x6f, 0x6f, 0x6b, 0x5f,
	0x62, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6d, 0x70,
	0x42, 0x69, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6f, 0x6b, 0x42, 0x69, 0x6e, 0x12, 0x33, 0x0a, 0x08,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x69,
	0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x69,
	0x6e, 0x12, 0x36, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52,
	0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x46, 0x0a, 0x0f, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x42,
	0x69, 0x6e, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x42, 0x69,
	0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x62, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x42, 0x69, 0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x67, 0x61, 0x63, 0x68,
	0x61, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x61, 0x63, 0x68, 0x61, 0x43,
	0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x08, 0x67, 0x61, 0x63, 0x68, 0x61, 0x42, 0x69, 0x6e,
	0x12, 0x39, 0x0a, 0x0a, 0x67, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x47, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e,
	0x52, 0x09, 0x67, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x42, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x66,
	0x6f, 0x72, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x67, 0x65,
	0x42, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69,
	0x6e, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x62, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x42, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f,
	0x62, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x42,
	0x69, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e,
	0x52, 0x08, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69,
	0x67, 0x6e, 0x49, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x49, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x46, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52,
	0x0d, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x12, 0x3c,
	0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x42, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e,
	0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x42, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x0c,
	0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e,
	0x52, 0x0b, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x3a, 0x0a,
	0x0b, 0x6d, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x09,
	0x6d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x09, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x42, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x78, 0x5f, 0x62, 0x69,
	0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x42,
	0x69, 0x6e, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x78, 0x42, 0x69, 0x6e, 0x12, 0x48, 0x0a, 0x0f,
	0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x49, 0x0a, 0x10, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69,
	0x6e, 0x52, 0x0e, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69,
	0x6e, 0x12, 0x4c, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0f,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x12,
	0x45, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69,
	0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x77, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x68, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0a, 0x68, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x69, 0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52,
	0x0c, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x69, 0x6e, 0x12, 0x3c, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x63,
	0x6f, 0x6f, 0x70, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6f, 0x70,
	0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6f, 0x70, 0x42, 0x69, 0x6e,
	0x12, 0x3f, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x69, 0x6e,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d,
	0x70, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x69,
	0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x69, 0x6e,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x42, 0x69, 0x6e, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x12,
	0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x65, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69,
	0x6e, 0x52, 0x0a, 0x72, 0x65, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x49, 0x0a,
	0x10, 0x6d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x69,
	0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0e, 0x6d, 0x69, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x52, 0x69, 0x6e, 0x67, 0x42, 0x69, 0x6e, 0x12, 0x45, 0x0a, 0x0e, 0x6d, 0x65, 0x63, 0x68,
	0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d,
	0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e,
	0x52, 0x0d, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x42, 0x69, 0x6e, 0x12,
	0x46, 0x0a, 0x0f, 0x6f, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x62,
	0x69, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x6f, 0x70, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x67, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x42, 0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x42,
	0x69, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x42, 0x69, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x62, 0x69, 0x6e, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x6c, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52,
	0x07, 0x74, 0x61, 0x6c, 0x6b, 0x42, 0x69, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x62, 0x69, 0x6e, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x42, 0x69, 0x6e, 0x52, 0x07, 0x68, 0x6f, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x3f, 0x0a,
	0x0e, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x70, 0x5f, 0x62, 0x69, 0x6e, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x42, 0x69, 0x6e,
	0x52, 0x0c, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x46,
	0x0a, 0x0f, 0x68, 0x35, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x69,
	0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x35, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x68, 0x35, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x62, 0x69, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d,
	0x70, 0x42, 0x69, 0x6e, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x69, 0x6e, 0x12, 0x45,
	0x0a, 0x0e, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x6e,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x66, 0x69,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x69,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0a, 0x66, 0x69,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x42, 0x69, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x62, 0x69, 0x6e, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d,
	0x70, 0x42, 0x69, 0x6e, 0x52, 0x07, 0x63, 0x69, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x12, 0x42, 0x0a,
	0x0d, 0x66, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x42, 0x69, 0x6e, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x42, 0x69,
	0x6e, 0x12, 0x4c, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x0f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x69, 0x6e, 0x12,
	0x4f, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x10,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42, 0x69, 0x6e,
	0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x64, 0x5f, 0x62, 0x69, 0x6e,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x44, 0x43, 0x6f, 0x6d, 0x70,
	0x42, 0x69, 0x6e, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x64, 0x42, 0x69, 0x6e, 0x12,
	0x30, 0x0a, 0x07, 0x75, 0x67, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55,
	0x67, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x06, 0x75, 0x67, 0x63, 0x42, 0x69,
	0x6e, 0x12, 0x5b, 0x0a, 0x16, 0x61, 0x72, 0x61, 0x6e, 0x61, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x3d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x41, 0x72, 0x61, 0x6e, 0x61, 0x72, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x14, 0x61, 0x72, 0x61, 0x6e, 0x61, 0x72,
	0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x30,
	0x0a, 0x07, 0x67, 0x63, 0x67, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x43,
	0x47, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x06, 0x67, 0x63, 0x67, 0x42, 0x69, 0x6e,
	0x22, 0x42, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x22, 0x36, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x67,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x72, 0x65, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xe4, 0x01, 0x0a,
	0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x69, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x64, 0x0a, 0x15, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6e,
	0x74, 0x69, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x61, 0x6e, 0x74, 0x69, 0x4f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x1a, 0x68, 0x0a, 0x17, 0x41, 0x6e, 0x74,
	0x69, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x74, 0x69, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x59, 0x0a, 0x18, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3d, 0x0a, 0x1b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x18, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe9,
	0x02, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x62, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x78, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a,
	0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x42, 0x69, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x70, 0x73, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x73, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x42, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x90, 0x01, 0x0a, 0x0f, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x28, 0x5a,
	0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x79, 0x76,
	0x61, 0x74, 0x2d, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2f, 0x68, 0x6b, 0x34, 0x65, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_only_bin_server_proto_rawDescOnce sync.Once
	file_server_only_bin_server_proto_rawDescData = file_server_only_bin_server_proto_rawDesc
)

func file_server_only_bin_server_proto_rawDescGZIP() []byte {
	file_server_only_bin_server_proto_rawDescOnce.Do(func() {
		file_server_only_bin_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_only_bin_server_proto_rawDescData)
	})
	return file_server_only_bin_server_proto_rawDescData
}

var file_server_only_bin_server_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_server_only_bin_server_proto_msgTypes = make([]protoimpl.MessageInfo, 651)
var file_server_only_bin_server_proto_goTypes = []interface{}{
	(TrialAvatarGrantRecordBin_GrantReason)(0), // 0: proto.TrialAvatarGrantRecordBin.GrantReason
	(*PlayerBasicCompBin)(nil),                 // 1: proto.PlayerBasicCompBin
	(*AvatarSkillBin)(nil),                     // 2: proto.AvatarSkillBin
	(*AvatarBuffBin)(nil),                      // 3: proto.AvatarBuffBin
	(*AvatarFetterBin)(nil),                    // 4: proto.AvatarFetterBin
	(*AvatarExpeditionBin)(nil),                // 5: proto.AvatarExpeditionBin
	(*AvatarSkillDepotBin)(nil),                // 6: proto.AvatarSkillDepotBin
	(*AvatarEquipAffixBin)(nil),                // 7: proto.AvatarEquipAffixBin
	(*AvatarExtraPropBin)(nil),                 // 8: proto.AvatarExtraPropBin
	(*AvatarBin)(nil),                          // 9: proto.AvatarBin
	(*AvatarSnapshotBin)(nil),                  // 10: proto.AvatarSnapshotBin
	(*TrialAvatarGrantRecordBin)(nil),          // 11: proto.TrialAvatarGrantRecordBin
	(*FormalAvatarBin)(nil),                    // 12: proto.FormalAvatarBin
	(*TrialAvatarBin)(nil),                     // 13: proto.TrialAvatarBin
	(*MirrorAvatarBin)(nil),                    // 14: proto.MirrorAvatarBin
	(*AvatarTeamBin)(nil),                      // 15: proto.AvatarTeamBin
	(*AvatarRenameAuditBin)(nil),               // 16: proto.AvatarRenameAuditBin
	(*AvatarRenameBin)(nil),                    // 17: proto.AvatarRenameBin
	(*PlayerAvatarCompBin)(nil),                // 18: proto.PlayerAvatarCompBin
	(*WorldBin)(nil),                           // 19: proto.WorldBin
	(*SceneProductBin)(nil),                    // 20: proto.SceneProductBin
	(*DungeonProductBin)(nil),                  // 21: proto.DungeonProductBin
	(*MapMarkPointBin)(nil),                    // 22: proto.MapMarkPointBin
	(*GroupBossChestBin)(nil),                  // 23: proto.GroupBossChestBin
	(*SceneBossChestBin)(nil),                  // 24: proto.SceneBossChestBin
	(*SubfieldDropBin)(nil),                    // 25: proto.SubfieldDropBin
	(*MonsterBeKilledNumBin)(nil),              // 26: proto.MonsterBeKilledNumBin
	(*MapAreaInfoBin)(nil),                     // 27: proto.MapAreaInfoBin
	(*MonsterBeCapturedNumBin)(nil),            // 28: proto.MonsterBeCapturedNumBin
	(*LevelTagChangeBin)(nil),                  // 29: proto.LevelTagChangeBin
	(*LevelTagBin)(nil),                        // 30: proto.LevelTagBin
	(*PersistentDungeonSceneBin)(nil),          // 31: proto.PersistentDungeonSceneBin
	(*DeshretObeliskBin)(nil),                  // 32: proto.DeshretObeliskBin
	(*PlayerSceneCompBin)(nil),                 // 33: proto.PlayerSceneCompBin
	(*QuestContentBin)(nil),                    // 34: proto.QuestContentBin
	(*QuestTalkRecordBin)(nil),                 // 35: proto.QuestTalkRecordBin
	(*QuestBin)(nil),                           // 36: proto.QuestBin
	(*PlayerQuestBin)(nil),                     // 37: proto.PlayerQuestBin
	(*ParentQuestRandomInfoBin)(nil),           // 38: proto.ParentQuestRandomInfoBin
	(*ParentQuestInferenceWordBin)(nil),        // 39: proto.ParentQuestInferenceWordBin
	(*ParentQuestBin)(nil),                     // 40: proto.ParentQuestBin
	(*PlayerParentQuestBin)(nil),               // 41: proto.PlayerParentQuestBin
	(*ChapterBin)(nil),                         // 42: proto.ChapterBin
	(*PlayerChapterBin)(nil),                   // 43: proto.PlayerChapterBin
	(*QuestGlobalVarBin)(nil),                  // 44: proto.QuestGlobalVarBin
	(*WorldQuestBin)(nil),                      // 45: proto.WorldQuestBin
	(*PlayerQuestCompBin)(nil),                 // 46: proto.PlayerQuestCompBin
	(*EquipBin)(nil),                           // 47: proto.EquipBin
	(*MaterialDeleteBin)(nil),                  // 48: proto.MaterialDeleteBin
	(*MaterialBin)(nil),                        // 49: proto.MaterialBin
	(*FurnitureBin)(nil),                       // 50: proto.FurnitureBin
	(*ItemBin)(nil),                            // 51: proto.ItemBin
	(*PackItemStoreBin)(nil),                   // 52: proto.PackItemStoreBin
	(*ItemStoreBin)(nil),                       // 53: proto.ItemStoreBin
	(*AutoRecoverItemBin)(nil),                 // 54: proto.AutoRecoverItemBin
	(*ItemLimitCountRecordBin)(nil),            // 55: proto.ItemLimitCountRecordBin
	(*ItemLimitRecordBin)(nil),                 // 56: proto.ItemLimitRecordBin
	(*MaterialDeleteReturnRecordBin)(nil),      // 57: proto.MaterialDeleteReturnRecordBin
	(*OutputControlRecordBin)(nil),             // 58: proto.OutputControlRecordBin
	(*ShopGoodsOutputRecordBin)(nil),           // 59: proto.ShopGoodsOutputRecordBin
	(*ShopOutputRecordBin)(nil),                // 60: proto.ShopOutputRecordBin
	(*SingleBonusRecordBin)(nil),               // 61: proto.SingleBonusRecordBin
	(*BonusRecordBin)(nil),                     // 62: proto.BonusRecordBin
	(*ItemLimitRefreshRecordBin)(nil),          // 63: proto.ItemLimitRefreshRecordBin
	(*ReliquaryLevelupNumRecordBin)(nil),       // 64: proto.ReliquaryLevelupNumRecordBin
	(*EquipLevelupRecordBin)(nil),              // 65: proto.EquipLevelupRecordBin
	(*ReliquarySuitBin)(nil),                   // 66: proto.ReliquarySuitBin
	(*ActivityOutputIndexRecordBin)(nil),       // 67: proto.ActivityOutputIndexRecordBin
	(*ActivityOutputControlRecordBin)(nil),     // 68: proto.ActivityOutputControlRecordBin
	(*ReliquaryMainPropGuaranteeDataBin)(nil),  // 69: proto.ReliquaryMainPropGuaranteeDataBin
	(*ReliquaryGuaranteeDepotBin)(nil),         // 70: proto.ReliquaryGuaranteeDepotBin
	(*PlayerItemCompBin)(nil),                  // 71: proto.PlayerItemCompBin
	(*DungeonGroupRecordBin)(nil),              // 72: proto.DungeonGroupRecordBin
	(*DungeonRecordBin)(nil),                   // 73: proto.DungeonRecordBin
	(*DungeonRandomRecordBin)(nil),             // 74: proto.DungeonRandomRecordBin
	(*DungeonDurableRecordBin)(nil),            // 75: proto.DungeonDurableRecordBin
	(*PlayerDungeonRecordBin)(nil),             // 76: proto.PlayerDungeonRecordBin
	(*DungeonSerialBossChestBin)(nil),          // 77: proto.DungeonSerialBossChestBin
	(*PlayerDungeonCompBin)(nil),               // 78: proto.PlayerDungeonCompBin
	(*PlayerBoredCompBin)(nil),                 // 79: proto.PlayerBoredCompBin
	(*PlayerMpCompBin)(nil),                    // 80: proto.PlayerMpCompBin
	(*CompoundOutputBin)(nil),                  // 81: proto.CompoundOutputBin
	(*CompoundQueueBin)(nil),                   // 82: proto.CompoundQueueBin
	(*CookRecipeDataBin)(nil),                  // 83: proto.CookRecipeDataBin
	(*PlayerCookCompBin)(nil),                  // 84: proto.PlayerCookCompBin
	(*PlayerLoginCompBin)(nil),                 // 85: proto.PlayerLoginCompBin
	(*OfflineMsgExeBin)(nil),                   // 86: proto.OfflineMsgExeBin
	(*PlayerOfflineMsgCompBin)(nil),            // 87: proto.PlayerOfflineMsgCompBin
	(*DailyTaskInfoBin)(nil),                   // 88: proto.DailyTaskInfoBin
	(*DailyTaskCycleQuestBin)(nil),             // 89: proto.DailyTaskCycleQuestBin
	(*DailyTaskCityCycleQuestsBin)(nil),        // 90: proto.DailyTaskCityCycleQuestsBin
	(*PlayerDailyTaskCompBin)(nil),             // 91: proto.PlayerDailyTaskCompBin
	(*PlayerRandTaskCompBin)(nil),              // 92: proto.PlayerRandTaskCompBin
	(*InvestigationBin)(nil),                   // 93: proto.InvestigationBin
	(*PlayerInvestigationCompBin)(nil),         // 94: proto.PlayerInvestigationCompBin
	(*SeaLampSectionBin)(nil),                  // 95: proto.SeaLampSectionBin
	(*SeaLampScheduleDataBin)(nil),             // 96: proto.SeaLampScheduleDataBin
	(*CrucibleBattleUidBin)(nil),               // 97: proto.CrucibleBattleUidBin
	(*CrucibleScheduleBin)(nil),                // 98: proto.CrucibleScheduleBin
	(*TrialAvatarActivityRewardInfo)(nil),      // 99: proto.TrialAvatarActivityRewardInfo
	(*TrialAvatarScheduleBin)(nil),             // 100: proto.TrialAvatarScheduleBin
	(*SalesmanScheduleBin)(nil),                // 101: proto.SalesmanScheduleBin
	(*AsterLittleBin)(nil),                     // 102: proto.AsterLittleBin
	(*AsterMidBin)(nil),                        // 103: proto.AsterMidBin
	(*AsterLargeBin)(nil),                      // 104: proto.AsterLargeBin
	(*AsterProgressBin)(nil),                   // 105: proto.AsterProgressBin
	(*AsterScheduleBin)(nil),                   // 106: proto.AsterScheduleBin
	(*DeliveryScheduleBin)(nil),                // 107: proto.DeliveryScheduleBin
	(*FlightDailyRecordBin)(nil),               // 108: proto.FlightDailyRecordBin
	(*FlightScheduleBin)(nil),                  // 109: proto.FlightScheduleBin
	(*DragonSpineChapterBin)(nil),              // 110: proto.DragonSpineChapterBin
	(*DragonSpineBanDropSubject)(nil),          // 111: proto.DragonSpineBanDropSubject
	(*DragonSpineScheduleBin)(nil),             // 112: proto.DragonSpineScheduleBin
	(*EffigyDailyRecordBin)(nil),               // 113: proto.EffigyDailyRecordBin
	(*EffigyScheduleBin)(nil),                  // 114: proto.EffigyScheduleBin
	(*TreasureMapRegionBin)(nil),               // 115: proto.TreasureMapRegionBin
	(*TreasureMapBonusChallengeBin)(nil),       // 116: proto.TreasureMapBonusChallengeBin
	(*TreasureMapScheduleBin)(nil),             // 117: proto.TreasureMapScheduleBin
	(*SalesmanMpScheduleBin)(nil),              // 118: proto.SalesmanMpScheduleBin
	(*ExpeditionPathDataBin)(nil),              // 119: proto.ExpeditionPathDataBin
	(*ExpeditionAssistRecordBin)(nil),          // 120: proto.ExpeditionAssistRecordBin
	(*ExpeditionChallengeDataBin)(nil),         // 121: proto.ExpeditionChallengeDataBin
	(*ExpeditionScheduleBin)(nil),              // 122: proto.ExpeditionScheduleBin
	(*BlessingScanEntityData)(nil),             // 123: proto.BlessingScanEntityData
	(*BlessingRecvPicData)(nil),                // 124: proto.BlessingRecvPicData
	(*BlessingScheduleBin)(nil),                // 125: proto.BlessingScheduleBin
	(*FleurFairBalloonBin)(nil),                // 126: proto.FleurFairBalloonBin
	(*FleurFairFallBin)(nil),                   // 127: proto.FleurFairFallBin
	(*FleurFairMusicRecordBin)(nil),            // 128: proto.FleurFairMusicRecordBin
	(*FleurFairMusicBin)(nil),                  // 129: proto.FleurFairMusicBin
	(*FleurFairMinigameBin)(nil),               // 130: proto.FleurFairMinigameBin
	(*FleurFairDungeonSectionDataBin)(nil),     // 131: proto.FleurFairDungeonSectionDataBin
	(*FleurFairScheduleBin)(nil),               // 132: proto.FleurFairScheduleBin
	(*ArenaChallengeSchduleBin)(nil),           // 133: proto.ArenaChallengeSchduleBin
	(*WaterSpiritScheduleBin)(nil),             // 134: proto.WaterSpiritScheduleBin
	(*ChannellerSlabChallengeBin)(nil),         // 135: proto.ChannellerSlabChallengeBin
	(*ChannellerSlabStageBin)(nil),             // 136: proto.ChannellerSlabStageBin
	(*ChannellerSlabBuffSchemeBin)(nil),        // 137: proto.ChannellerSlabBuffSchemeBin
	(*ChannellerSlabAssistBin)(nil),            // 138: proto.ChannellerSlabAssistBin
	(*ChannellerSlabBuffDataBin)(nil),          // 139: proto.ChannellerSlabBuffDataBin
	(*ChannellerSlabLoopDungeonDataBin)(nil),   // 140: proto.ChannellerSlabLoopDungeonDataBin
	(*ChannellerSlabLoopDungeonStageBin)(nil),  // 141: proto.ChannellerSlabLoopDungeonStageBin
	(*ChannellerSlabScheduleBin)(nil),          // 142: proto.ChannellerSlabScheduleBin
	(*MistTrialBestAvatarBin)(nil),             // 143: proto.MistTrialBestAvatarBin
	(*MistTrialLevelBin)(nil),                  // 144: proto.MistTrialLevelBin
	(*MistTrialScheduleBin)(nil),               // 145: proto.MistTrialScheduleBin
	(*HideAndSeekScheduleBin)(nil),             // 146: proto.HideAndSeekScheduleBin
	(*FindHilichurlScheduleBin)(nil),           // 147: proto.FindHilichurlScheduleBin
	(*SummerTimeStageBin)(nil),                 // 148: proto.SummerTimeStageBin
	(*SummerTimeSprintBoatBin)(nil),            // 149: proto.SummerTimeSprintBoatBin
	(*SummerTimeScheduleBin)(nil),              // 150: proto.SummerTimeScheduleBin
	(*BounceConjuringChapterBin)(nil),          // 151: proto.BounceConjuringChapterBin
	(*BounceConjuringScheduleBin)(nil),         // 152: proto.BounceConjuringScheduleBin
	(*BuoyantCombatDailyRecordBin)(nil),        // 153: proto.BuoyantCombatDailyRecordBin
	(*BuoyantCombatScheduleBin)(nil),           // 154: proto.BuoyantCombatScheduleBin
	(*SummerTimeDungeonBin)(nil),               // 155: proto.SummerTimeDungeonBin
	(*EchoShellScheduleBin)(nil),               // 156: proto.EchoShellScheduleBin
	(*ChessScheduleBin)(nil),                   // 157: proto.ChessScheduleBin
	(*BlitzRushStageBin)(nil),                  // 158: proto.BlitzRushStageBin
	(*BlitzRushParkourLevelRecordBin)(nil),     // 159: proto.BlitzRushParkourLevelRecordBin
	(*BlitzRushScheduleBin)(nil),               // 160: proto.BlitzRushScheduleBin
	(*SumoAvatarBin)(nil),                      // 161: proto.SumoAvatarBin
	(*SumoTeamBin)(nil),                        // 162: proto.SumoTeamBin
	(*SumoStageBin)(nil),                       // 163: proto.SumoStageBin
	(*SumoScheduleBin)(nil),                    // 164: proto.SumoScheduleBin
	(*LunaRiteHintPointBin)(nil),               // 165: proto.LunaRiteHintPointBin
	(*LunaRiteAreaBin)(nil),                    // 166: proto.LunaRiteAreaBin
	(*LunaRiteScheduleBin)(nil),                // 167: proto.LunaRiteScheduleBin
	(*MoonfinTrialLevelRecordBin)(nil),         // 168: proto.MoonfinTrialLevelRecordBin
	(*MoonfinTrialScheduleBin)(nil),            // 169: proto.MoonfinTrialScheduleBin
	(*PlantFlowerRecvFlowerDataBin)(nil),       // 170: proto.PlantFlowerRecvFlowerDataBin
	(*HomeModuleUsedActivityItemDataBin)(nil),  // 171: proto.HomeModuleUsedActivityItemDataBin
	(*HomeUsedActivityItemDataBin)(nil),        // 172: proto.HomeUsedActivityItemDataBin
	(*PlantFlowerSeedPlantDataBin)(nil),        // 173: proto.PlantFlowerSeedPlantDataBin
	(*PlantFlowerShelfDataBin)(nil),            // 174: proto.PlantFlowerShelfDataBin
	(*PlantFlowerScheduleBin)(nil),             // 175: proto.PlantFlowerScheduleBin
	(*MusicGameRecordBin)(nil),                 // 176: proto.MusicGameRecordBin
	(*MusicGameUgcSaveBin)(nil),                // 177: proto.MusicGameUgcSaveBin
	(*MusicGameUgcSearchBin)(nil),              // 178: proto.MusicGameUgcSearchBin
	(*MusicGameUgcPlayBin)(nil),                // 179: proto.MusicGameUgcPlayBin
	(*MusicGameScheduleBin)(nil),               // 180: proto.MusicGameScheduleBin
	(*RoguelikeShikigamiBin)(nil),              // 181: proto.RoguelikeShikigamiBin
	(*RoguelikeDungeonRuneBin)(nil),            // 182: proto.RoguelikeDungeonRuneBin
	(*RoguelikeDungeonCardBin)(nil),            // 183: proto.RoguelikeDungeonCardBin
	(*RoguelikeDungeonCurseBin)(nil),           // 184: proto.RoguelikeDungeonCurseBin
	(*RoguelikeDungeonDynamicSGVBin)(nil),      // 185: proto.RoguelikeDungeonDynamicSGVBin
	(*RoguelikeMiscBin)(nil),                   // 186: proto.RoguelikeMiscBin
	(*RogueTeamBin)(nil),                       // 187: proto.RogueTeamBin
	(*RogueCellBin)(nil),                       // 188: proto.RogueCellBin
	(*RogueGadgetPointBin)(nil),                // 189: proto.RogueGadgetPointBin
	(*RogueDungeonBin)(nil),                    // 190: proto.RogueDungeonBin
	(*RogueFinishChallengeBin)(nil),            // 191: proto.RogueFinishChallengeBin
	(*RogueStageBin)(nil),                      // 192: proto.RogueStageBin
	(*RoguelikeDungeonScheduleBin)(nil),        // 193: proto.RoguelikeDungeonScheduleBin
	(*WinterCampDropBin)(nil),                  // 194: proto.WinterCampDropBin
	(*WinterCampExploreBin)(nil),               // 195: proto.WinterCampExploreBin
	(*WinterCampBattleBin)(nil),                // 196: proto.WinterCampBattleBin
	(*WinterCampRaceBin)(nil),                  // 197: proto.WinterCampRaceBin
	(*WinterCampRecvItemBin)(nil),              // 198: proto.WinterCampRecvItemBin
	(*WinterCampHomeUsedItemBin)(nil),          // 199: proto.WinterCampHomeUsedItemBin
	(*WinterCampSnowmanUsedItemBin)(nil),       // 200: proto.WinterCampSnowmanUsedItemBin
	(*WinterCampScheduleBin)(nil),              // 201: proto.WinterCampScheduleBin
	(*HachiStageBin)(nil),                      // 202: proto.HachiStageBin
	(*HachiScheduleBin)(nil),                   // 203: proto.HachiScheduleBin
	(*PotionLevelBin)(nil),                     // 204: proto.PotionLevelBin
	(*PotionStageBin)(nil),                     // 205: proto.PotionStageBin
	(*PotionScheduleBin)(nil),                  // 206: proto.PotionScheduleBin
	(*TanukiTravelLevelBin)(nil),               // 207: proto.TanukiTravelLevelBin
	(*TanukiTravelScheduleBin)(nil),            // 208: proto.TanukiTravelScheduleBin
	(*SalvageBundleChallengeBin)(nil),          // 209: proto.SalvageBundleChallengeBin
	(*SalvageScoreChallengeBin)(nil),           // 210: proto.SalvageScoreChallengeBin
	(*SalvageChallengeBin)(nil),                // 211: proto.SalvageChallengeBin
	(*LanternSalvageStageBin)(nil),             // 212: proto.LanternSalvageStageBin
	(*LanternRiteProjectionLevelBin)(nil),      // 213: proto.LanternRiteProjectionLevelBin
	(*LanternRiteProjectionBin)(nil),           // 214: proto.LanternRiteProjectionBin
	(*LanternRiteFireworksChallengeBin)(nil),   // 215: proto.LanternRiteFireworksChallengeBin
	(*LanternRiteFireworksStageBin)(nil),       // 216: proto.LanternRiteFireworksStageBin
	(*LanternRiteFireworksBin)(nil),            // 217: proto.LanternRiteFireworksBin
	(*LanternRiteScheduleBin)(nil),             // 218: proto.LanternRiteScheduleBin
	(*MichiaeMatsuriStageBin)(nil),             // 219: proto.MichiaeMatsuriStageBin
	(*MichiaeMatsuriScheduleBin)(nil),          // 220: proto.MichiaeMatsuriScheduleBin
	(*BartenderTaskBin)(nil),                   // 221: proto.BartenderTaskBin
	(*BartenderLevelBin)(nil),                  // 222: proto.BartenderLevelBin
	(*BartenderScheduleBin)(nil),               // 223: proto.BartenderScheduleBin
	(*IrodoriChessMapBin)(nil),                 // 224: proto.IrodoriChessMapBin
	(*IrodoriChessLevelBin)(nil),               // 225: proto.IrodoriChessLevelBin
	(*IrodoriChessBin)(nil),                    // 226: proto.IrodoriChessBin
	(*IrodoriFlowerShelfBin)(nil),              // 227: proto.IrodoriFlowerShelfBin
	(*IrodoriFlowerBin)(nil),                   // 228: proto.IrodoriFlowerBin
	(*IrodoriPoetryThemeBin)(nil),              // 229: proto.IrodoriPoetryThemeBin
	(*IrodoriPoetryBin)(nil),                   // 230: proto.IrodoriPoetryBin
	(*IrodoriMasterLevelDetailBin)(nil),        // 231: proto.IrodoriMasterLevelDetailBin
	(*IrodoriMasterLevelBin)(nil),              // 232: proto.IrodoriMasterLevelBin
	(*IrodoriScheduleBin)(nil),                 // 233: proto.IrodoriScheduleBin
	(*CrystalLinkBuffBin)(nil),                 // 234: proto.CrystalLinkBuffBin
	(*CrystalLinkAvatarBin)(nil),               // 235: proto.CrystalLinkAvatarBin
	(*CrystalLinkTeamBin)(nil),                 // 236: proto.CrystalLinkTeamBin
	(*CrystalLinkLevelBin)(nil),                // 237: proto.CrystalLinkLevelBin
	(*CrystalLinkScheduleBin)(nil),             // 238: proto.CrystalLinkScheduleBin
	(*PhotoPosBin)(nil),                        // 239: proto.PhotoPosBin
	(*PhotoScheduleBin)(nil),                   // 240: proto.PhotoScheduleBin
	(*SpiceStageBin)(nil),                      // 241: proto.SpiceStageBin
	(*SpiceScheduleBin)(nil),                   // 242: proto.SpiceScheduleBin
	(*GachaStageBin)(nil),                      // 243: proto.GachaStageBin
	(*GachaScheduleBin)(nil),                   // 244: proto.GachaScheduleBin
	(*ActivityRecvGiftBin)(nil),                // 245: proto.ActivityRecvGiftBin
	(*ActivityGiftDataBin)(nil),                // 246: proto.ActivityGiftDataBin
	(*LuminanceStoneChallengeScheduleBin)(nil), // 247: proto.LuminanceStoneChallengeScheduleBin
	(*RogueDiaryStageRecordBin)(nil),           // 248: proto.RogueDiaryStageRecordBin
	(*RogueDiaryStageBin)(nil),                 // 249: proto.RogueDiaryStageBin
	(*RogueDiaryRoomConfigPairBin)(nil),        // 250: proto.RogueDiaryRoomConfigPairBin
	(*RogueDiaryAvtarBin)(nil),                 // 251: proto.RogueDiaryAvtarBin
	(*RogueDiaryProgressBin)(nil),              // 252: proto.RogueDiaryProgressBin
	(*RogueDiaryScheduleBin)(nil),              // 253: proto.RogueDiaryScheduleBin
	(*SummerTimeV2DungeonStageBin)(nil),        // 254: proto.SummerTimeV2DungeonStageBin
	(*SummerTimeV2BoatStageBin)(nil),           // 255: proto.SummerTimeV2BoatStageBin
	(*SummerTimeV2ScheduleBin)(nil),            // 256: proto.SummerTimeV2ScheduleBin
	(*IslandPartyStageBin)(nil),                // 257: proto.IslandPartyStageBin
	(*IslandPartyScheduleBin)(nil),             // 258: proto.IslandPartyScheduleBin
	(*GearStageBin)(nil),                       // 259: proto.GearStageBin
	(*JigsawPictureDataBin)(nil),               // 260: proto.JigsawPictureDataBin
	(*GearScheduleBin)(nil),                    // 261: proto.GearScheduleBin
	(*GravenInnocencePhotoStageBin)(nil),       // 262: proto.GravenInnocencePhotoStageBin
	(*GravenInnocencePhotoObjectBin)(nil),      // 263: proto.GravenInnocencePhotoObjectBin
	(*GravenInnocencePhotoBin)(nil),            // 264: proto.GravenInnocencePhotoBin
	(*GravenInnocenceCampStageBin)(nil),        // 265: proto.GravenInnocenceCampStageBin
	(*GravenInnocenceCampBin)(nil),             // 266: proto.GravenInnocenceCampBin
	(*GravenInnocenceRaceLevelBin)(nil),        // 267: proto.GravenInnocenceRaceLevelBin
	(*GravenInnocenceRaceBin)(nil),             // 268: proto.GravenInnocenceRaceBin
	(*GravenInnocenceCarveStageBin)(nil),       // 269: proto.GravenInnocenceCarveStageBin
	(*GravenInnocenceCarveUsedItemBin)(nil),    // 270: proto.GravenInnocenceCarveUsedItemBin
	(*GravenInnocenceCarveBin)(nil),            // 271: proto.GravenInnocenceCarveBin
	(*GravenInnocenceScheduleBin)(nil),         // 272: proto.GravenInnocenceScheduleBin
	(*InstableSprayStageBin)(nil),              // 273: proto.InstableSprayStageBin
	(*InstableSprayScheduleBin)(nil),           // 274: proto.InstableSprayScheduleBin
	(*InstableSprayAvatarInfoBin)(nil),         // 275: proto.InstableSprayAvatarInfoBin
	(*InstableSprayTeamInfoBin)(nil),           // 276: proto.InstableSprayTeamInfoBin
	(*MuqadasPotionLevelDataBin)(nil),          // 277: proto.MuqadasPotionLevelDataBin
	(*MuqadasPotionScheduleBin)(nil),           // 278: proto.MuqadasPotionScheduleBin
	(*TreasureSeelieRegionBin)(nil),            // 279: proto.TreasureSeelieRegionBin
	(*TreasureSeelieScheduleBin)(nil),          // 280: proto.TreasureSeelieScheduleBin
	(*RockBoardExploreStageBin)(nil),           // 281: proto.RockBoardExploreStageBin
	(*RockBoardExploreScheduleBin)(nil),        // 282: proto.RockBoardExploreScheduleBin
	(*VintageHuntingStageDataBin)(nil),         // 283: proto.VintageHuntingStageDataBin
	(*VintagePresentLevelDataBin)(nil),         // 284: proto.VintagePresentLevelDataBin
	(*VintagePresentStageDataBin)(nil),         // 285: proto.VintagePresentStageDataBin
	(*VintageBoothUsedItemDataBin)(nil),        // 286: proto.VintageBoothUsedItemDataBin
	(*VintageCampChallengeLevelDataBin)(nil),   // 287: proto.VintageCampChallengeLevelDataBin
	(*VintageCampChallengeStageDataBin)(nil),   // 288: proto.VintageCampChallengeStageDataBin
	(*VintageTraderDealBin)(nil),               // 289: proto.VintageTraderDealBin
	(*VintageBargainBin)(nil),                  // 290: proto.VintageBargainBin
	(*VintageStoreAttrRandomPoolBin)(nil),      // 291: proto.VintageStoreAttrRandomPoolBin
	(*VintageStoreBin)(nil),                    // 292: proto.VintageStoreBin
	(*VintageNpcEventBin)(nil),                 // 293: proto.VintageNpcEventBin
	(*VintageScheduleBin)(nil),                 // 294: proto.VintageScheduleBin
	(*WindFieldScheduleBin)(nil),               // 295: proto.WindFieldScheduleBin
	(*WindFieldStageBin)(nil),                  // 296: proto.WindFieldStageBin
	(*ActivityGeneralCoinBin)(nil),             // 297: proto.ActivityGeneralCoinBin
	(*FungusBin)(nil),                          // 298: proto.FungusBin
	(*FungusPlotStageBin)(nil),                 // 299: proto.FungusPlotStageBin
	(*FungusTrainingDungeonBin)(nil),           // 300: proto.FungusTrainingDungeonBin
	(*FungusFighterMonsterBin)(nil),            // 301: proto.FungusFighterMonsterBin
	(*FungusTrainingShapshotDataBin)(nil),      // 302: proto.FungusTrainingShapshotDataBin
	(*FungusTrainingProgressBin)(nil),          // 303: proto.FungusTrainingProgressBin
	(*FungusFighterScheduleBin)(nil),           // 304: proto.FungusFighterScheduleBin
	(*CharAmusementStageBin)(nil),              // 305: proto.CharAmusementStageBin
	(*CharAmusementScheduleBin)(nil),           // 306: proto.CharAmusementScheduleBin
	(*EffigyChallengeV2LevelBin)(nil),          // 307: proto.EffigyChallengeV2LevelBin
	(*EffigyChallengeV2ScheduleBin)(nil),       // 308: proto.EffigyChallengeV2ScheduleBin
	(*CoinCollectTeamInfoBin)(nil),             // 309: proto.CoinCollectTeamInfoBin
	(*CoinCollectLevelBin)(nil),                // 310: proto.CoinCollectLevelBin
	(*CoinCollectScheduleBin)(nil),             // 311: proto.CoinCollectScheduleBin
	(*BrickBreakerStageBin)(nil),               // 312: proto.BrickBreakerStageBin
	(*BrickBreakerLevelBin)(nil),               // 313: proto.BrickBreakerLevelBin
	(*BrickBreakerScheduleBin)(nil),            // 314: proto.BrickBreakerScheduleBin
	(*TeamChainStageBin)(nil),                  // 315: proto.TeamChainStageBin
	(*TeamChainScheduleBin)(nil),               // 316: proto.TeamChainScheduleBin
	(*ElectroherculesBattleLevelBin)(nil),      // 317: proto.ElectroherculesBattleLevelBin
	(*ElectroherculesBattleStageBin)(nil),      // 318: proto.ElectroherculesBattleStageBin
	(*ElectroherculesBattleScheduleBin)(nil),   // 319: proto.ElectroherculesBattleScheduleBin
	(*SeaLampV3RaceLevelBin)(nil),              // 320: proto.SeaLampV3RaceLevelBin
	(*SeaLampV3RaceBin)(nil),                   // 321: proto.SeaLampV3RaceBin
	(*SeaLampV3ShadowLevelBin)(nil),            // 322: proto.SeaLampV3ShadowLevelBin
	(*SeaLampV3ShadowStageBin)(nil),            // 323: proto.SeaLampV3ShadowStageBin
	(*SeaLampV3ShadowBin)(nil),                 // 324: proto.SeaLampV3ShadowBin
	(*SeaLampV3ScheduleBin)(nil),               // 325: proto.SeaLampV3ScheduleBin
	(*DuelHeartDifficultyBin)(nil),             // 326: proto.DuelHeartDifficultyBin
	(*DuelHeartLevelBin)(nil),                  // 327: proto.DuelHeartLevelBin
	(*DuelheartScheduleBin)(nil),               // 328: proto.DuelheartScheduleBin
	(*ActivityScheduleBin)(nil),                // 329: proto.ActivityScheduleBin
	(*ActivityBin)(nil),                        // 330: proto.ActivityBin
	(*PlayerActivityCompBin)(nil),              // 331: proto.PlayerActivityCompBin
	(*PlayerMailBin)(nil),                      // 332: proto.PlayerMailBin
	(*PlayerMailCompBin)(nil),                  // 333: proto.PlayerMailCompBin
	(*ShopGoodsRecordBin)(nil),                 // 334: proto.ShopGoodsRecordBin
	(*ShopRecordBin)(nil),                      // 335: proto.ShopRecordBin
	(*PlayerShopCompBin)(nil),                  // 336: proto.PlayerShopCompBin
	(*GachaItemTypeDataBin)(nil),               // 337: proto.GachaItemTypeDataBin
	(*GachaItemParentTypeDataBin)(nil),         // 338: proto.GachaItemParentTypeDataBin
	(*GachaGuaranteeDataBin)(nil),              // 339: proto.GachaGuaranteeDataBin
	(*GachaUpDataBin)(nil),                     // 340: proto.GachaUpDataBin
	(*GachaRecordBin)(nil),                     // 341: proto.GachaRecordBin
	(*PlayerGachaCompBin)(nil),                 // 342: proto.PlayerGachaCompBin
	(*GivingRecordBin)(nil),                    // 343: proto.GivingRecordBin
	(*PlayerGivingCompBin)(nil),                // 344: proto.PlayerGivingCompBin
	(*ForgeQueueBin)(nil),                      // 345: proto.ForgeQueueBin
	(*PlayerForgeCompBin)(nil),                 // 346: proto.PlayerForgeCompBin
	(*PlayerCombineCompBin)(nil),               // 347: proto.PlayerCombineCompBin
	(*WatcherBin)(nil),                         // 348: proto.WatcherBin
	(*PushTipsBin)(nil),                        // 349: proto.PushTipsBin
	(*RecordValueBin)(nil),                     // 350: proto.RecordValueBin
	(*PlayerWatcherCompBin)(nil),               // 351: proto.PlayerWatcherCompBin
	(*TowerTeamBin)(nil),                       // 352: proto.TowerTeamBin
	(*TowerLevelRecordBin)(nil),                // 353: proto.TowerLevelRecordBin
	(*TowerFloorRecordBin)(nil),                // 354: proto.TowerFloorRecordBin
	(*TowerAvatarRecordBin)(nil),               // 355: proto.TowerAvatarRecordBin
	(*TowerCurLevelRecordBin)(nil),             // 356: proto.TowerCurLevelRecordBin
	(*TowerLevelBuffListBin)(nil),              // 357: proto.TowerLevelBuffListBin
	(*TowerFloorLevelBin)(nil),                 // 358: proto.TowerFloorLevelBin
	(*TowerFightStatisticBin)(nil),             // 359: proto.TowerFightStatisticBin
	(*TowerFightSummaryPair)(nil),              // 360: proto.TowerFightSummaryPair
	(*TowerMonthlyCombatSummaryBin)(nil),       // 361: proto.TowerMonthlyCombatSummaryBin
	(*TowerMonthlySummaryBin)(nil),             // 362: proto.TowerMonthlySummaryBin
	(*PlayerTowerCompBin)(nil),                 // 363: proto.PlayerTowerCompBin
	(*BlossomCircleCampDataBin)(nil),           // 364: proto.BlossomCircleCampDataBin
	(*BlossomRefreshDataBin)(nil),              // 365: proto.BlossomRefreshDataBin
	(*BlossomInitialSectionDataBin)(nil),       // 366: proto.BlossomInitialSectionDataBin
	(*PlayerBlossomCompBin)(nil),               // 367: proto.PlayerBlossomCompBin
	(*SignInRecordBin)(nil),                    // 368: proto.SignInRecordBin
	(*BonusActivityRecordBin)(nil),             // 369: proto.BonusActivityRecordBin
	(*PlayerSignInCompBin)(nil),                // 370: proto.PlayerSignInCompBin
	(*McoinProductConfigBin)(nil),              // 371: proto.McoinProductConfigBin
	(*CardProductConfigBin)(nil),               // 372: proto.CardProductConfigBin
	(*GoogleGiftCardProductBin)(nil),           // 373: proto.GoogleGiftCardProductBin
	(*ConcertProductBin)(nil),                  // 374: proto.ConcertProductBin
	(*AppleGiftCardProductBin)(nil),            // 375: proto.AppleGiftCardProductBin
	(*PsnCompensationProductBin)(nil),          // 376: proto.PsnCompensationProductBin
	(*OrderFinishNotifyItemBin)(nil),           // 377: proto.OrderFinishNotifyItemBin
	(*OrderFinishNotifyBin)(nil),               // 378: proto.OrderFinishNotifyBin
	(*OrderNotifySaveBin)(nil),                 // 379: proto.OrderNotifySaveBin
	(*PlayerRechargeCompBin)(nil),              // 380: proto.PlayerRechargeCompBin
	(*BattlePassRewardTagBin)(nil),             // 381: proto.BattlePassRewardTagBin
	(*BattlePassScheduleBin)(nil),              // 382: proto.BattlePassScheduleBin
	(*BattlePassMissionBin)(nil),               // 383: proto.BattlePassMissionBin
	(*PlayerBattlePassCompBin)(nil),            // 384: proto.PlayerBattlePassCompBin
	(*ChatEmojiCollectionBin)(nil),             // 385: proto.ChatEmojiCollectionBin
	(*PlayerSocialCompBin)(nil),                // 386: proto.PlayerSocialCompBin
	(*SecurityAntiOfflineDataBin)(nil),         // 387: proto.SecurityAntiOfflineDataBin
	(*MpPlayBin)(nil),                          // 388: proto.MpPlayBin
	(*PlayerMpPlayCompBin)(nil),                // 389: proto.PlayerMpPlayCompBin
	(*CodexTypeDataBin)(nil),                   // 390: proto.CodexTypeDataBin
	(*PlayerCodexCompBin)(nil),                 // 391: proto.PlayerCodexCompBin
	(*AchievementBin)(nil),                     // 392: proto.AchievementBin
	(*PlayerAchievementCompBin)(nil),           // 393: proto.PlayerAchievementCompBin
	(*PlayerPersonalLineCompBin)(nil),          // 394: proto.PlayerPersonalLineCompBin
	(*PlayerTrialAvatarCompBin)(nil),           // 395: proto.PlayerTrialAvatarCompBin
	(*HuntingOfferDataBin)(nil),                // 396: proto.HuntingOfferDataBin
	(*HuntingOfferPair)(nil),                   // 397: proto.HuntingOfferPair
	(*PlayerHuntingCompBin)(nil),               // 398: proto.PlayerHuntingCompBin
	(*CityReputationRequestBin)(nil),           // 399: proto.CityReputationRequestBin
	(*CityReputationBin)(nil),                  // 400: proto.CityReputationBin
	(*PlayerReputationCompBin)(nil),            // 401: proto.PlayerReputationCompBin
	(*WidgetAnchorPointBin)(nil),               // 402: proto.WidgetAnchorPointBin
	(*WidgetLunchBoxBin)(nil),                  // 403: proto.WidgetLunchBoxBin
	(*WidgetOneoffGatherPointDetectorBin)(nil), // 404: proto.WidgetOneoffGatherPointDetectorBin
	(*WidgetClientCollectorBin)(nil),           // 405: proto.WidgetClientCollectorBin
	(*WidgetCoolDownInfoBin)(nil),              // 406: proto.WidgetCoolDownInfoBin
	(*AttachAvatarWidgetBin)(nil),              // 407: proto.AttachAvatarWidgetBin
	(*WidgetCaptureAnimalBin)(nil),             // 408: proto.WidgetCaptureAnimalBin
	(*WidgetLightStoneBin)(nil),                // 409: proto.WidgetLightStoneBin
	(*WidgetBackgroundBin)(nil),                // 410: proto.WidgetBackgroundBin
	(*WidgetWeatherWizardBin)(nil),             // 411: proto.WidgetWeatherWizardBin
	(*WidgetDetailBin)(nil),                    // 412: proto.WidgetDetailBin
	(*WidgetBin)(nil),                          // 413: proto.WidgetBin
	(*PlayerWidgetCompBin)(nil),                // 414: proto.PlayerWidgetCompBin
	(*ScenePlaySourceBin)(nil),                 // 415: proto.ScenePlaySourceBin
	(*ScenePlayBin)(nil),                       // 416: proto.ScenePlayBin
	(*PlayerScenePlayCompBin)(nil),             // 417: proto.PlayerScenePlayCompBin
	(*MainCoopBin)(nil),                        // 418: proto.MainCoopBin
	(*CoopPointBin)(nil),                       // 419: proto.CoopPointBin
	(*CoopChapterBin)(nil),                     // 420: proto.CoopChapterBin
	(*CoopProgressBin)(nil),                    // 421: proto.CoopProgressBin
	(*PlayerCoopCompBin)(nil),                  // 422: proto.PlayerCoopCompBin
	(*PlayerOfferingInfoBin)(nil),              // 423: proto.PlayerOfferingInfoBin
	(*PlayerOfferingCompBin)(nil),              // 424: proto.PlayerOfferingCompBin
	(*ReunionSignInBin)(nil),                   // 425: proto.ReunionSignInBin
	(*ReunionMissionBin)(nil),                  // 426: proto.ReunionMissionBin
	(*ReunionPrivilegeBin)(nil),                // 427: proto.ReunionPrivilegeBin
	(*ReunionRecordBin)(nil),                   // 428: proto.ReunionRecordBin
	(*PlayerReunionCompBin)(nil),               // 429: proto.PlayerReunionCompBin
	(*PlayerRoutineBin)(nil),                   // 430: proto.PlayerRoutineBin
	(*PlayerRoutineTypeBin)(nil),               // 431: proto.PlayerRoutineTypeBin
	(*PlayerRoutineCompBin)(nil),               // 432: proto.PlayerRoutineCompBin
	(*MiracleRingDropParam)(nil),               // 433: proto.MiracleRingDropParam
	(*PlayerMiracleRingCompBin)(nil),           // 434: proto.PlayerMiracleRingCompBin
	(*MechanicusBin)(nil),                      // 435: proto.MechanicusBin
	(*PlayerMechanicusCompBin)(nil),            // 436: proto.PlayerMechanicusCompBin
	(*OpActivityRecordBin)(nil),                // 437: proto.OpActivityRecordBin
	(*PlayerOpActivityCompBin)(nil),            // 438: proto.PlayerOpActivityCompBin
	(*PlayerGalleryCompBin)(nil),               // 439: proto.PlayerGalleryCompBin
	(*RegionSearchSourceBin)(nil),              // 440: proto.RegionSearchSourceBin
	(*RegionSearchRegionBin)(nil),              // 441: proto.RegionSearchRegionBin
	(*RegionSearchBin)(nil),                    // 442: proto.RegionSearchBin
	(*RegionSearchPlayBin)(nil),                // 443: proto.RegionSearchPlayBin
	(*PlayerRegionSearchCompBin)(nil),          // 444: proto.PlayerRegionSearchCompBin
	(*PlayerTalkCompBin)(nil),                  // 445: proto.PlayerTalkCompBin
	(*PlayerFishingCompBin)(nil),               // 446: proto.PlayerFishingCompBin
	(*CustomDungeonBriefBin)(nil),              // 447: proto.CustomDungeonBriefBin
	(*OfficialCustomDungeonBin)(nil),           // 448: proto.OfficialCustomDungeonBin
	(*CustomDungeonBattleRecord)(nil),          // 449: proto.CustomDungeonBattleRecord
	(*PlayerCustomDungeonCompBin)(nil),         // 450: proto.PlayerCustomDungeonCompBin
	(*UgcBin)(nil),                             // 451: proto.UgcBin
	(*PlayerUgcCompBin)(nil),                   // 452: proto.PlayerUgcCompBin
	(*PlayerHomeBlockBin)(nil),                 // 453: proto.PlayerHomeBlockBin
	(*PlayerHomeSceneBin)(nil),                 // 454: proto.PlayerHomeSceneBin
	(*PlayerHomeModuleBin)(nil),                // 455: proto.PlayerHomeModuleBin
	(*HomeBasicCompSnapshotBin)(nil),           // 456: proto.HomeBasicCompSnapshotBin
	(*HomeSubFieldSnapShotBin)(nil),            // 457: proto.HomeSubFieldSnapShotBin
	(*HomeFieldSnapShotBin)(nil),               // 458: proto.HomeFieldSnapShotBin
	(*HomeTransferSnapShotBin)(nil),            // 459: proto.HomeTransferSnapShotBin
	(*HomeMarkPointNPCDataBin)(nil),            // 460: proto.HomeMarkPointNPCDataBin
	(*HomeMarkPointSuiteDataBin)(nil),          // 461: proto.HomeMarkPointSuiteDataBin
	(*HomeMarkPointFurnitureDataBin)(nil),      // 462: proto.HomeMarkPointFurnitureDataBin
	(*HomeSceneSnapshotBin)(nil),               // 463: proto.HomeSceneSnapshotBin
	(*HomeModuleSnapshotBin)(nil),              // 464: proto.HomeModuleSnapshotBin
	(*HomeSceneCompSnapshotBin)(nil),           // 465: proto.HomeSceneCompSnapshotBin
	(*HomeSnapshotBin)(nil),                    // 466: proto.HomeSnapshotBin
	(*FurnitureMakeBeHelpedBin)(nil),           // 467: proto.FurnitureMakeBeHelpedBin
	(*FurnitureMakeHelpBin)(nil),               // 468: proto.FurnitureMakeHelpBin
	(*FurnitureMakeTimesBin)(nil),              // 469: proto.FurnitureMakeTimesBin
	(*PlayerFunitureMakeBin)(nil),              // 470: proto.PlayerFunitureMakeBin
	(*PlayerLimitedShopNPCPosBin)(nil),         // 471: proto.PlayerLimitedShopNPCPosBin
	(*PlayerHomeLimitedShopBin)(nil),           // 472: proto.PlayerHomeLimitedShopBin
	(*HomeResourceBin)(nil),                    // 473: proto.HomeResourceBin
	(*PlayerHomeResourceBin)(nil),              // 474: proto.PlayerHomeResourceBin
	(*HomeAvatarDataBin)(nil),                  // 475: proto.HomeAvatarDataBin
	(*HomeAvatarRewardEventBin)(nil),           // 476: proto.HomeAvatarRewardEventBin
	(*PlayerHomeAvatarBin)(nil),                // 477: proto.PlayerHomeAvatarBin
	(*HomeWorldWoodExchangeDataBin)(nil),       // 478: proto.HomeWorldWoodExchangeDataBin
	(*PlayerHomeBlueprintSlotBin)(nil),         // 479: proto.PlayerHomeBlueprintSlotBin
	(*PlayerHomeBlueprintBin)(nil),             // 480: proto.PlayerHomeBlueprintBin
	(*PlayerHomeCompBin)(nil),                  // 481: proto.PlayerHomeCompBin
	(*PlayerOfflineOpBin)(nil),                 // 482: proto.PlayerOfflineOpBin
	(*H5ActivityWatcherBin)(nil),               // 483: proto.H5ActivityWatcherBin
	(*H5ActivityBin)(nil),                      // 484: proto.H5ActivityBin
	(*PlayerH5ActivityCompBin)(nil),            // 485: proto.PlayerH5ActivityCompBin
	(*MatchPunishBin)(nil),                     // 486: proto.MatchPunishBin
	(*PlayerMatchCompBin)(nil),                 // 487: proto.PlayerMatchCompBin
	(*PlayerExhibitionBin)(nil),                // 488: proto.PlayerExhibitionBin
	(*PlayerExhibitionCompBin)(nil),            // 489: proto.PlayerExhibitionCompBin
	(*PlayerGroupLinkBin)(nil),                 // 490: proto.PlayerGroupLinkBin
	(*PlayerGroupBundleBin)(nil),               // 491: proto.PlayerGroupBundleBin
	(*PlayerGroupBundleFinishBin)(nil),         // 492: proto.PlayerGroupBundleFinishBin
	(*PlayerGroupLinkCompBin)(nil),             // 493: proto.PlayerGroupLinkCompBin
	(*FireworksParamBin)(nil),                  // 494: proto.FireworksParamBin
	(*FireworksReformBin)(nil),                 // 495: proto.FireworksReformBin
	(*FireworksLaunchSchemeBin)(nil),           // 496: proto.FireworksLaunchSchemeBin
	(*PlayerFireworksCompBin)(nil),             // 497: proto.PlayerFireworksCompBin
	(*PlayerCityCompBin)(nil),                  // 498: proto.PlayerCityCompBin
	(*RegionalPlayVarBin)(nil),                 // 499: proto.RegionalPlayVarBin
	(*DeathZoneBin)(nil),                       // 500: proto.DeathZoneBin
	(*PlayerRegionalPlayCompBin)(nil),          // 501: proto.PlayerRegionalPlayCompBin
	(*ShareCDInfoBin)(nil),                     // 502: proto.ShareCDInfoBin
	(*PlayerShareCDCompBin)(nil),               // 503: proto.PlayerShareCDCompBin
	(*GCGPlayerBriefBin)(nil),                  // 504: proto.GCGPlayerBriefBin
	(*GCGGameBriefBin)(nil),                    // 505: proto.GCGGameBriefBin
	(*GCGDSDeckBin)(nil),                       // 506: proto.GCGDSDeckBin
	(*GCGDSCardBin)(nil),                       // 507: proto.GCGDSCardBin
	(*GCGDeckSystemBin)(nil),                   // 508: proto.GCGDeckSystemBin
	(*GCGTCTavernChallengeBin)(nil),            // 509: proto.GCGTCTavernChallengeBin
	(*GCGTavernBin)(nil),                       // 510: proto.GCGTavernBin
	(*GCGMatchBin)(nil),                        // 511: proto.GCGMatchBin
	(*GCGBasicBin)(nil),                        // 512: proto.GCGBasicBin
	(*GCGLevelBin)(nil),                        // 513: proto.GCGLevelBin
	(*GCGBossChallengeBin)(nil),                // 514: proto.GCGBossChallengeBin
	(*GCGGuideGroupBin)(nil),                   // 515: proto.GCGGuideGroupBin
	(*GCGLevelChallengeBin)(nil),               // 516: proto.GCGLevelChallengeBin
	(*GCGConstNpcBin)(nil),                     // 517: proto.GCGConstNpcBin
	(*GCGTavernSceneBuilderBin)(nil),           // 518: proto.GCGTavernSceneBuilderBin
	(*GCGWeekNpcBin)(nil),                      // 519: proto.GCGWeekNpcBin
	(*GCGWeekChallengeBin)(nil),                // 520: proto.GCGWeekChallengeBin
	(*PlayerGCGCompBin)(nil),                   // 521: proto.PlayerGCGCompBin
	(*AranaraCollectionListBin)(nil),           // 522: proto.AranaraCollectionListBin
	(*AranaraCollectionSuiteBin)(nil),          // 523: proto.AranaraCollectionSuiteBin
	(*PlayerAranaraCollectionCompBin)(nil),     // 524: proto.PlayerAranaraCollectionCompBin
	(*PlayerDataBin)(nil),                      // 525: proto.PlayerDataBin
	(*PlayerJsonData)(nil),                     // 526: proto.PlayerJsonData
	(*PlayerExtJsonData)(nil),                  // 527: proto.PlayerExtJsonData
	(*PlayerExtraBinData)(nil),                 // 528: proto.PlayerExtraBinData
	(*PlayerBeforeLoginBinData)(nil),           // 529: proto.PlayerBeforeLoginBinData
	(*PlayerData)(nil),                         // 530: proto.PlayerData
	(*ContentAuditBin)(nil),                    // 531: proto.ContentAuditBin
	nil,                                        // 532: proto.PlayerBasicCompBin.OpenStateMapEntry
	nil,                                        // 533: proto.AvatarSkillDepotBin.SkillLevelMapEntry
	nil,                                        // 534: proto.AvatarBin.SkillMapEntry
	nil,                                        // 535: proto.AvatarBin.BuffMapEntry
	nil,                                        // 536: proto.AvatarBin.DepotMapEntry
	nil,                                        // 537: proto.PlayerAvatarCompBin.TeamMapEntry
	nil,                                        // 538: proto.PlayerAvatarCompBin.AvatarTeamBuffMapEntry
	nil,                                        // 539: proto.WorldBin.SceneMapEntry
	nil,                                        // 540: proto.SceneProductBin.GroupProductMapEntry
	nil,                                        // 541: proto.DungeonProductBin.SceneProductMapEntry
	nil,                                        // 542: proto.GroupBossChestBin.BossChestMapEntry
	nil,                                        // 543: proto.SceneBossChestBin.GroupBossChestMapEntry
	nil,                                        // 544: proto.SubfieldDropBin.DropNumMapEntry
	nil,                                        // 545: proto.PlayerSceneCompBin.WorldProductMapEntry
	nil,                                        // 546: proto.PlayerSceneCompBin.SceneBossChestMapEntry
	nil,                                        // 547: proto.PlayerSceneCompBin.SubfieldDropMapEntry
	nil,                                        // 548: proto.PlayerSceneCompBin.DungeonProductMapEntry
	nil,                                        // 549: proto.PlayerSceneCompBin.ChestOpenNumMapEntry
	nil,                                        // 550: proto.PlayerSceneCompBin.GadgetInteractNumMapEntry
	nil,                                        // 551: proto.PlayerSceneCompBin.DailyGadgetDropCategoryCountMapEntry
	nil,                                        // 552: proto.PlayerSceneCompBin.GadgetChainLevelMapEntry
	nil,                                        // 553: proto.ParentQuestRandomInfoBin.QuestIdMapEntry
	nil,                                        // 554: proto.PlayerQuestCompBin.LastDungeonSettleMapEntry
	nil,                                        // 555: proto.MaterialDeleteBin.DeleteTimeNumMapEntry
	nil,                                        // 556: proto.MaterialDeleteReturnRecordBin.DeleteMaterialMapEntry
	nil,                                        // 557: proto.MaterialDeleteReturnRecordBin.ReturnItemMapEntry
	nil,                                        // 558: proto.PlayerItemCompBin.ItemCdMapEntry
	nil,                                        // 559: proto.PlayerItemCompBin.OutputControlRecordMapEntry
	nil,                                        // 560: proto.DungeonGroupRecordBin.ChestOpenMapEntry
	nil,                                        // 561: proto.PlayerDungeonRecordBin.DungeonDailyMapEntry
	nil,                                        // 562: proto.PlayerDungeonRecordBin.DungeonDurableMapEntry
	nil,                                        // 563: proto.PlayerDungeonRecordBin.DungeonRandomMapEntry
	nil,                                        // 564: proto.PlayerDungeonCompBin.SerialBossChestMapEntry
	nil,                                        // 565: proto.PlayerCookCompBin.RecipeDataMapEntry
	nil,                                        // 566: proto.PlayerCookCompBin.CompoundQueBinMapEntry
	nil,                                        // 567: proto.PlayerDailyTaskCompBin.TaskVarMapEntry
	nil,                                        // 568: proto.SalesmanScheduleBin.SelectedRewardIdMapEntry
	nil,                                        // 569: proto.TreasureMapRegionBin.DoneGroupMapEntry
	nil,                                        // 570: proto.TreasureMapBonusChallengeBin.FragmentMapEntry
	nil,                                        // 571: proto.BlessingScheduleBin.PicNumMapEntry
	nil,                                        // 572: proto.FleurFairMusicBin.MusicGameRecordMapEntry
	nil,                                        // 573: proto.FleurFairScheduleBin.MinigameMapEntry
	nil,                                        // 574: proto.FleurFairScheduleBin.DungeonSectionMapEntry
	nil,                                        // 575: proto.ChannellerSlabBuffSchemeBin.SlotMapEntry
	nil,                                        // 576: proto.HideAndSeekScheduleBin.HiderSlotSkillMapEntry
	nil,                                        // 577: proto.HideAndSeekScheduleBin.HunterSlotSkillMapEntry
	nil,                                        // 578: proto.SummerTimeScheduleBin.StageBinMapEntry
	nil,                                        // 579: proto.ChessScheduleBin.DailyObtainedExpMapEntry
	nil,                                        // 580: proto.PlantFlowerRecvFlowerDataBin.FlowerNumMapEntry
	nil,                                        // 581: proto.HomeModuleUsedActivityItemDataBin.ItemCountMapEntry
	nil,                                        // 582: proto.PlantFlowerShelfDataBin.UsedFlowerNumMapEntry
	nil,                                        // 583: proto.PlantFlowerScheduleBin.WishFlowerNumMapEntry
	nil,                                        // 584: proto.PlantFlowerScheduleBin.ActivityUsedFlowerNumMapEntry
	nil,                                        // 585: proto.MusicGameScheduleBin.MusicGameRecordMapEntry
	nil,                                        // 586: proto.RoguelikeMiscBin.ChosenCardTypeCountMapEntry
	nil,                                        // 587: proto.RogueCellBin.DiffMonsterPoolMapEntry
	nil,                                        // 588: proto.RogueDungeonBin.RogueCellBinMapEntry
	nil,                                        // 589: proto.RogueStageBin.LevelExploreCellCountMapEntry
	nil,                                        // 590: proto.RogueStageBin.LevelFinishAllChallengeMapEntry
	nil,                                        // 591: proto.RogueStageBin.FinishChallengeBinMapEntry
	nil,                                        // 592: proto.RogueStageBin.LevelTimeCostMapEntry
	nil,                                        // 593: proto.RogueStageBin.ExploredCellTypeMapEntry
	nil,                                        // 594: proto.HachiScheduleBin.StageBinMapEntry
	nil,                                        // 595: proto.LanternRiteScheduleBin.SalvageTrackingMarkMapEntry
	nil,                                        // 596: proto.IrodoriFlowerShelfBin.UsedFlowerCountMapEntry
	nil,                                        // 597: proto.GachaStageBin.TargetNumMapEntry
	nil,                                        // 598: proto.GachaScheduleBin.RobotNumMapEntry
	nil,                                        // 599: proto.GachaScheduleBin.HaveRewardRobotNumMapEntry
	nil,                                        // 600: proto.ActivityRecvGiftBin.GiftNumMapEntry
	nil,                                        // 601: proto.ActivityGiftDataBin.WishGiftNumMapEntry
	nil,                                        // 602: proto.VintagePresentStageDataBin.PresentLevelMapEntry
	nil,                                        // 603: proto.VintageCampChallengeStageDataBin.CampLevelMapEntry
	nil,                                        // 604: proto.VintageScheduleBin.HuntingStageMapEntry
	nil,                                        // 605: proto.VintageScheduleBin.PresentStageMapEntry
	nil,                                        // 606: proto.VintageScheduleBin.CampStageMapEntry
	nil,                                        // 607: proto.VintageScheduleBin.DividendResMapEntry
	nil,                                        // 608: proto.ActivityBin.CondStateMapEntry
	nil,                                        // 609: proto.ActivityBin.QuestContentMapEntry
	nil,                                        // 610: proto.ActivityBin.ActivityPushTipsMapEntry
	nil,                                        // 611: proto.PlayerActivityCompBin.ActivityBinMapEntry
	nil,                                        // 612: proto.PlayerMailCompBin.WaitAddMailMapEntry
	nil,                                        // 613: proto.PlayerMailCompBin.ActionSeqMapEntry
	nil,                                        // 614: proto.PlayerMailCompBin.NewWaitAddMailMapEntry
	nil,                                        // 615: proto.GachaRecordBin.GachaGuaranteeMapEntry
	nil,                                        // 616: proto.GachaRecordBin.GachaItemTypeDataMapEntry
	nil,                                        // 617: proto.GachaRecordBin.GachaItemParentTypeDataMapEntry
	nil,                                        // 618: proto.GachaRecordBin.GachaUpDataMapEntry
	nil,                                        // 619: proto.PlayerGachaCompBin.GachaRecordMapEntry
	nil,                                        // 620: proto.GivingRecordBin.MaterialCntMapEntry
	nil,                                        // 621: proto.PlayerGivingCompBin.GivingRecordMapEntry
	nil,                                        // 622: proto.PlayerForgeCompBin.ForgeQueueMapEntry
	(*WatcherBin_Var)(nil),                     // 623: proto.WatcherBin.Var
	nil,                                        // 624: proto.PlayerWatcherCompBin.GlobalWatcherProgressMapEntry
	nil,                                        // 625: proto.TowerAvatarRecordBin.CurFightPropMapEntry
	nil,                                        // 626: proto.TowerCurLevelRecordBin.AvatarRecordMapEntry
	nil,                                        // 627: proto.TowerCurLevelRecordBin.TowerBuffMapEntry
	nil,                                        // 628: proto.TowerFightStatisticBin.AvatarRevealCountMapEntry
	nil,                                        // 629: proto.TowerFightStatisticBin.KillCountMapEntry
	nil,                                        // 630: proto.TowerFightStatisticBin.TakeDamageCountMapEntry
	nil,                                        // 631: proto.TowerFightStatisticBin.NormalSkillCountMapEntry
	nil,                                        // 632: proto.TowerFightStatisticBin.EnergySkillCountMapEntry
	nil,                                        // 633: proto.PlayerTowerCompBin.DailyLevelBuffMapEntry
	nil,                                        // 634: proto.PlayerTowerCompBin.TowerMonthlySummaryMapEntry
	nil,                                        // 635: proto.PlayerBlossomCompBin.RecentUsedSectionIdMapEntry
	nil,                                        // 636: proto.PlayerBlossomCompBin.InitialSectionMapEntry
	nil,                                        // 637: proto.PlayerBlossomCompBin.RefreshDataMapEntry
	nil,                                        // 638: proto.PlayerRechargeCompBin.FinishedOrderMapEntry
	nil,                                        // 639: proto.PlayerRechargeCompBin.WaitMarkDbMapEntry
	nil,                                        // 640: proto.PlayerSocialCompBin.FriendRemarkNameMapEntry
	(*MpPlayBin_UidWorldLevelBin)(nil),         // 641: proto.MpPlayBin.UidWorldLevelBin
	nil,                                        // 642: proto.WidgetLunchBoxBin.SlotMaterialMapEntry
	nil,                                        // 643: proto.PlayerWidgetCompBin.SlotMaterialMapEntry
	nil,                                        // 644: proto.CoopProgressBin.MainCoopMapEntry
	nil,                                        // 645: proto.PlayerUgcCompBin.UgcBinMapEntry
	nil,                                        // 646: proto.PlayerOfflineOpBin.IndexMapEntry
	nil,                                        // 647: proto.PlayerCityCompBin.CityMapEntry
	nil,                                        // 648: proto.PlayerShareCDCompBin.ShareCdInfoMapEntry
	nil,                                        // 649: proto.GCGPlayerBriefBin.CardFaceMapEntry
	nil,                                        // 650: proto.AranaraCollectionSuiteBin.StateCollectionMapEntry
	nil,                                        // 651: proto.PlayerExtraBinData.AntiOfflineDataMapEntry
	(*VectorBin)(nil),                          // 652: proto.VectorBin
	(*SceneBin)(nil),                           // 653: proto.SceneBin
	(*Uint32PairBin)(nil),                      // 654: proto.Uint32PairBin
	(*ReliquaryBin)(nil),                       // 655: proto.ReliquaryBin
	(*WeaponBin)(nil),                          // 656: proto.WeaponBin
	(*OfflineMsgBin)(nil),                      // 657: proto.OfflineMsgBin
	(*Uint32List)(nil),                         // 658: proto.Uint32List
	(*ProfilePictureBin)(nil),                  // 659: proto.ProfilePictureBin
	(*ItemParamBin)(nil),                       // 660: proto.ItemParamBin
	(*Uint32Pair)(nil),                         // 661: proto.Uint32Pair
	(*MailBin)(nil),                            // 662: proto.MailBin
	(*Birthday)(nil),                           // 663: proto.Birthday
	(HuntingOfferState)(0),                     // 664: proto.HuntingOfferState
	(*Uint32ToInt32PairBin)(nil),               // 665: proto.Uint32ToInt32PairBin
	(*CustomDungeonSettingBin)(nil),            // 666: proto.CustomDungeonSettingBin
	(*CustomDungeonAbstractBin)(nil),           // 667: proto.CustomDungeonAbstractBin
	(*HomeNpcBin)(nil),                         // 668: proto.HomeNpcBin
	(*HomeFurnitureSuiteBin)(nil),              // 669: proto.HomeFurnitureSuiteBin
	(*HomeFurnitureBin)(nil),                   // 670: proto.HomeFurnitureBin
	(*FurnitureMakeSlotsBin)(nil),              // 671: proto.FurnitureMakeSlotsBin
	(*GroupProductBin)(nil),                    // 672: proto.GroupProductBin
	(*Int32List)(nil),                          // 673: proto.Int32List
	(*CityBin)(nil),                            // 674: proto.CityBin
}
var file_server_only_bin_server_proto_depIdxs = []int32{
	532, // 0: proto.PlayerBasicCompBin.open_state_map:type_name -> proto.PlayerBasicCompBin.OpenStateMapEntry
	531, // 1: proto.PlayerBasicCompBin.nickname_audit_bin:type_name -> proto.ContentAuditBin
	533, // 2: proto.AvatarSkillDepotBin.skill_level_map:type_name -> proto.AvatarSkillDepotBin.SkillLevelMapEntry
	534, // 3: proto.AvatarBin.skill_map:type_name -> proto.AvatarBin.SkillMapEntry
	535, // 4: proto.AvatarBin.buff_map:type_name -> proto.AvatarBin.BuffMapEntry
	536, // 5: proto.AvatarBin.depot_map:type_name -> proto.AvatarBin.DepotMapEntry
	51,  // 6: proto.AvatarBin.equip_list:type_name -> proto.ItemBin
	7,   // 7: proto.AvatarBin.avatar_equip_affix_list:type_name -> proto.AvatarEquipAffixBin
	3,   // 8: proto.AvatarBin.buff_list:type_name -> proto.AvatarBuffBin
	8,   // 9: proto.AvatarBin.extra_prop_list:type_name -> proto.AvatarExtraPropBin
	12,  // 10: proto.AvatarBin.formal_avatar:type_name -> proto.FormalAvatarBin
	13,  // 11: proto.AvatarBin.trial_avatar:type_name -> proto.TrialAvatarBin
	14,  // 12: proto.AvatarBin.mirror_avatar:type_name -> proto.MirrorAvatarBin
	9,   // 13: proto.AvatarSnapshotBin.avatar_bin:type_name -> proto.AvatarBin
	4,   // 14: proto.FormalAvatarBin.fetter:type_name -> proto.AvatarFetterBin
	5,   // 15: proto.FormalAvatarBin.expedition_data:type_name -> proto.AvatarExpeditionBin
	11,  // 16: proto.TrialAvatarBin.grant_record_bin:type_name -> proto.TrialAvatarGrantRecordBin
	16,  // 17: proto.AvatarRenameBin.rename_audit_data:type_name -> proto.AvatarRenameAuditBin
	9,   // 18: proto.PlayerAvatarCompBin.avatar_list:type_name -> proto.AvatarBin
	652, // 19: proto.PlayerAvatarCompBin.pb_only_cur_pos:type_name -> proto.VectorBin
	652, // 20: proto.PlayerAvatarCompBin.pb_only_cur_rot:type_name -> proto.VectorBin
	537, // 21: proto.PlayerAvatarCompBin.team_map:type_name -> proto.PlayerAvatarCompBin.TeamMapEntry
	538, // 22: proto.PlayerAvatarCompBin.avatar_team_buff_map:type_name -> proto.PlayerAvatarCompBin.AvatarTeamBuffMapEntry
	3,   // 23: proto.PlayerAvatarCompBin.avatar_team_buff_list:type_name -> proto.AvatarBuffBin
	10,  // 24: proto.PlayerAvatarCompBin.avatar_snapshot_list:type_name -> proto.AvatarSnapshotBin
	17,  // 25: proto.PlayerAvatarCompBin.avatar_rename_list:type_name -> proto.AvatarRenameBin
	539, // 26: proto.WorldBin.scene_map:type_name -> proto.WorldBin.SceneMapEntry
	540, // 27: proto.SceneProductBin.group_product_map:type_name -> proto.SceneProductBin.GroupProductMapEntry
	541, // 28: proto.DungeonProductBin.scene_product_map:type_name -> proto.DungeonProductBin.SceneProductMapEntry
	652, // 29: proto.MapMarkPointBin.pos:type_name -> proto.VectorBin
	542, // 30: proto.GroupBossChestBin.boss_chest_map:type_name -> proto.GroupBossChestBin.BossChestMapEntry
	543, // 31: proto.SceneBossChestBin.group_boss_chest_map:type_name -> proto.SceneBossChestBin.GroupBossChestMapEntry
	544, // 32: proto.SubfieldDropBin.drop_num_map:type_name -> proto.SubfieldDropBin.DropNumMapEntry
	29,  // 33: proto.LevelTagBin.level_tag_change_list:type_name -> proto.LevelTagChangeBin
	653, // 34: proto.PersistentDungeonSceneBin.dungeon_scene_bin:type_name -> proto.SceneBin
	19,  // 35: proto.PlayerSceneCompBin.world:type_name -> proto.WorldBin
	652, // 36: proto.PlayerSceneCompBin.my_prev_pos:type_name -> proto.VectorBin
	652, // 37: proto.PlayerSceneCompBin.my_prev_rot:type_name -> proto.VectorBin
	22,  // 38: proto.PlayerSceneCompBin.mark_point_list:type_name -> proto.MapMarkPointBin
	545, // 39: proto.PlayerSceneCompBin.world_product_map:type_name -> proto.PlayerSceneCompBin.WorldProductMapEntry
	546, // 40: proto.PlayerSceneCompBin.scene_boss_chest_map:type_name -> proto.PlayerSceneCompBin.SceneBossChestMapEntry
	547, // 41: proto.PlayerSceneCompBin.subfield_drop_map:type_name -> proto.PlayerSceneCompBin.SubfieldDropMapEntry
	548, // 42: proto.PlayerSceneCompBin.dungeon_product_map:type_name -> proto.PlayerSceneCompBin.DungeonProductMapEntry
	549, // 43: proto.PlayerSceneCompBin.chest_open_num_map:type_name -> proto.PlayerSceneCompBin.ChestOpenNumMapEntry
	550, // 44: proto.PlayerSceneCompBin.gadget_interact_num_map:type_name -> proto.PlayerSceneCompBin.GadgetInteractNumMapEntry
	551, // 45: proto.PlayerSceneCompBin.daily_gadget_drop_category_count_map:type_name -> proto.PlayerSceneCompBin.DailyGadgetDropCategoryCountMapEntry
	26,  // 46: proto.PlayerSceneCompBin.monster_killed_num_list:type_name -> proto.MonsterBeKilledNumBin
	552, // 47: proto.PlayerSceneCompBin.gadget_chain_level_map:type_name -> proto.PlayerSceneCompBin.GadgetChainLevelMapEntry
	27,  // 48: proto.PlayerSceneCompBin.map_area_info_list:type_name -> proto.MapAreaInfoBin
	28,  // 49: proto.PlayerSceneCompBin.monster_captured_num_list:type_name -> proto.MonsterBeCapturedNumBin
	30,  // 50: proto.PlayerSceneCompBin.level_tag_bin:type_name -> proto.LevelTagBin
	31,  // 51: proto.PlayerSceneCompBin.persistent_dungeon_scene_bin_list:type_name -> proto.PersistentDungeonSceneBin
	32,  // 52: proto.PlayerSceneCompBin.deshret_obelisk_bin:type_name -> proto.DeshretObeliskBin
	35,  // 53: proto.QuestBin.talk_history_list:type_name -> proto.QuestTalkRecordBin
	36,  // 54: proto.PlayerQuestBin.quest_list:type_name -> proto.QuestBin
	553, // 55: proto.ParentQuestRandomInfoBin.quest_id_map:type_name -> proto.ParentQuestRandomInfoBin.QuestIdMapEntry
	654, // 56: proto.ParentQuestBin.child_quest_state_list:type_name -> proto.Uint32PairBin
	38,  // 57: proto.ParentQuestBin.random_info:type_name -> proto.ParentQuestRandomInfoBin
	654, // 58: proto.ParentQuestBin.time_var_list:type_name -> proto.Uint32PairBin
	39,  // 59: proto.ParentQuestBin.unlock_inference_word_list:type_name -> proto.ParentQuestInferenceWordBin
	40,  // 60: proto.PlayerParentQuestBin.parent_quest_list:type_name -> proto.ParentQuestBin
	42,  // 61: proto.PlayerChapterBin.chapter_list:type_name -> proto.ChapterBin
	37,  // 62: proto.PlayerQuestCompBin.quest_bin:type_name -> proto.PlayerQuestBin
	41,  // 63: proto.PlayerQuestCompBin.parent_quest_bin:type_name -> proto.PlayerParentQuestBin
	554, // 64: proto.PlayerQuestCompBin.last_dungeon_settle_map:type_name -> proto.PlayerQuestCompBin.LastDungeonSettleMapEntry
	43,  // 65: proto.PlayerQuestCompBin.chapter_bin:type_name -> proto.PlayerChapterBin
	44,  // 66: proto.PlayerQuestCompBin.quest_global_var_list:type_name -> proto.QuestGlobalVarBin
	45,  // 67: proto.PlayerQuestCompBin.world_quest_bin_list:type_name -> proto.WorldQuestBin
	655, // 68: proto.EquipBin.reliquary:type_name -> proto.ReliquaryBin
	656, // 69: proto.EquipBin.weapon:type_name -> proto.WeaponBin
	555, // 70: proto.MaterialDeleteBin.delete_time_num_map:type_name -> proto.MaterialDeleteBin.DeleteTimeNumMapEntry
	48,  // 71: proto.MaterialBin.delete_bin:type_name -> proto.MaterialDeleteBin
	49,  // 72: proto.ItemBin.material:type_name -> proto.MaterialBin
	47,  // 73: proto.ItemBin.equip:type_name -> proto.EquipBin
	50,  // 74: proto.ItemBin.furniture:type_name -> proto.FurnitureBin
	51,  // 75: proto.ItemStoreBin.item_list:type_name -> proto.ItemBin
	52,  // 76: proto.ItemStoreBin.pack_store:type_name -> proto.PackItemStoreBin
	55,  // 77: proto.ItemLimitRecordBin.item_limit_count_record_list:type_name -> proto.ItemLimitCountRecordBin
	556, // 78: proto.MaterialDeleteReturnRecordBin.delete_material_map:type_name -> proto.MaterialDeleteReturnRecordBin.DeleteMaterialMapEntry
	557, // 79: proto.MaterialDeleteReturnRecordBin.return_item_map:type_name -> proto.MaterialDeleteReturnRecordBin.ReturnItemMapEntry
	654, // 80: proto.OutputControlRecordBin.daily_count_list:type_name -> proto.Uint32PairBin
	654, // 81: proto.OutputControlRecordBin.total_count_list:type_name -> proto.Uint32PairBin
	59,  // 82: proto.ShopOutputRecordBin.shop_goods_output_record_list:type_name -> proto.ShopGoodsOutputRecordBin
	61,  // 83: proto.BonusRecordBin.single_bonus_record_list:type_name -> proto.SingleBonusRecordBin
	55,  // 84: proto.ItemLimitRefreshRecordBin.item_limit_count_record_list:type_name -> proto.ItemLimitCountRecordBin
	654, // 85: proto.ReliquaryLevelupNumRecordBin.reliquary_levelup_num_list:type_name -> proto.Uint32PairBin
	654, // 86: proto.EquipLevelupRecordBin.weapon_levelup_num_list:type_name -> proto.Uint32PairBin
	654, // 87: proto.EquipLevelupRecordBin.weapon_promote_levelup_num_list:type_name -> proto.Uint32PairBin
	64,  // 88: proto.EquipLevelupRecordBin.rank_reliquary_levelup_list:type_name -> proto.ReliquaryLevelupNumRecordBin
	654, // 89: proto.ActivityOutputIndexRecordBin.activity_count_list:type_name -> proto.Uint32PairBin
	67,  // 90: proto.ActivityOutputControlRecordBin.activity_output_index_record_list:type_name -> proto.ActivityOutputIndexRecordBin
	69,  // 91: proto.ReliquaryGuaranteeDepotBin.main_prop_guarantee_data_list:type_name -> proto.ReliquaryMainPropGuaranteeDataBin
	53,  // 92: proto.PlayerItemCompBin.pack_store:type_name -> proto.ItemStoreBin
	558, // 93: proto.PlayerItemCompBin.item_cd_map:type_name -> proto.PlayerItemCompBin.ItemCdMapEntry
	54,  // 94: proto.PlayerItemCompBin.resin_record:type_name -> proto.AutoRecoverItemBin
	56,  // 95: proto.PlayerItemCompBin.item_limit_record_list:type_name -> proto.ItemLimitRecordBin
	654, // 96: proto.PlayerItemCompBin.item_total_obtain_count_list:type_name -> proto.Uint32PairBin
	57,  // 97: proto.PlayerItemCompBin.material_delete_return_record:type_name -> proto.MaterialDeleteReturnRecordBin
	559, // 98: proto.PlayerItemCompBin.output_control_record_map:type_name -> proto.PlayerItemCompBin.OutputControlRecordMapEntry
	63,  // 99: proto.PlayerItemCompBin.item_limit_refresh_record_list:type_name -> proto.ItemLimitRefreshRecordBin
	65,  // 100: proto.PlayerItemCompBin.equip_levelup_record_bin:type_name -> proto.EquipLevelupRecordBin
	66,  // 101: proto.PlayerItemCompBin.reliquary_suit_list:type_name -> proto.ReliquarySuitBin
	60,  // 102: proto.PlayerItemCompBin.shop_output_record:type_name -> proto.ShopOutputRecordBin
	62,  // 103: proto.PlayerItemCompBin.bonus_record_list:type_name -> proto.BonusRecordBin
	68,  // 104: proto.PlayerItemCompBin.activity_output_control_record_list:type_name -> proto.ActivityOutputControlRecordBin
	70,  // 105: proto.PlayerItemCompBin.reliquary_guarantee_depot_list:type_name -> proto.ReliquaryGuaranteeDepotBin
	654, // 106: proto.PlayerItemCompBin.reliquary_filter_state_list:type_name -> proto.Uint32PairBin
	560, // 107: proto.DungeonGroupRecordBin.chest_open_map:type_name -> proto.DungeonGroupRecordBin.ChestOpenMapEntry
	561, // 108: proto.PlayerDungeonRecordBin.dungeon_daily_map:type_name -> proto.PlayerDungeonRecordBin.DungeonDailyMapEntry
	562, // 109: proto.PlayerDungeonRecordBin.dungeon_durable_map:type_name -> proto.PlayerDungeonRecordBin.DungeonDurableMapEntry
	563, // 110: proto.PlayerDungeonRecordBin.dungeon_random_map:type_name -> proto.PlayerDungeonRecordBin.DungeonRandomMapEntry
	76,  // 111: proto.PlayerDungeonCompBin.record_bin:type_name -> proto.PlayerDungeonRecordBin
	564, // 112: proto.PlayerDungeonCompBin.serial_boss_chest_map:type_name -> proto.PlayerDungeonCompBin.SerialBossChestMapEntry
	652, // 113: proto.PlayerDungeonCompBin.quit_pos:type_name -> proto.VectorBin
	652, // 114: proto.PlayerDungeonCompBin.quit_rot:type_name -> proto.VectorBin
	81,  // 115: proto.CompoundQueueBin.output_list:type_name -> proto.CompoundOutputBin
	565, // 116: proto.PlayerCookCompBin.recipe_data_map:type_name -> proto.PlayerCookCompBin.RecipeDataMapEntry
	566, // 117: proto.PlayerCookCompBin.compound_que_bin_map:type_name -> proto.PlayerCookCompBin.CompoundQueBinMapEntry
	657, // 118: proto.OfflineMsgExeBin.msg:type_name -> proto.OfflineMsgBin
	86,  // 119: proto.PlayerOfflineMsgCompBin.next_offline_msg_list:type_name -> proto.OfflineMsgExeBin
	652, // 120: proto.PlayerOfflineMsgCompBin.born_pos:type_name -> proto.VectorBin
	89,  // 121: proto.DailyTaskCityCycleQuestsBin.quest_list:type_name -> proto.DailyTaskCycleQuestBin
	88,  // 122: proto.PlayerDailyTaskCompBin.task_list:type_name -> proto.DailyTaskInfoBin
	658, // 123: proto.PlayerDailyTaskCompBin.possible_pools_list:type_name -> proto.Uint32List
	567, // 124: proto.PlayerDailyTaskCompBin.task_var_map:type_name -> proto.PlayerDailyTaskCompBin.TaskVarMapEntry
	89,  // 125: proto.PlayerDailyTaskCompBin.cycle_quest_list:type_name -> proto.DailyTaskCycleQuestBin
	93,  // 126: proto.PlayerInvestigationCompBin.investigation_list:type_name -> proto.InvestigationBin
	95,  // 127: proto.SeaLampScheduleDataBin.section_list:type_name -> proto.SeaLampSectionBin
	659, // 128: proto.CrucibleBattleUidBin.profile_picture_bin:type_name -> proto.ProfilePictureBin
	97,  // 129: proto.CrucibleScheduleBin.battle_uid_data_list:type_name -> proto.CrucibleBattleUidBin
	99,  // 130: proto.TrialAvatarScheduleBin.reward_info_list:type_name -> proto.TrialAvatarActivityRewardInfo
	568, // 131: proto.SalesmanScheduleBin.selected_reward_id_map:type_name -> proto.SalesmanScheduleBin.SelectedRewardIdMapEntry
	654, // 132: proto.SalesmanScheduleBin.loaded_group_config_id_list:type_name -> proto.Uint32PairBin
	102, // 133: proto.AsterScheduleBin.aster_little:type_name -> proto.AsterLittleBin
	103, // 134: proto.AsterScheduleBin.aster_mid:type_name -> proto.AsterMidBin
	104, // 135: proto.AsterScheduleBin.aster_large:type_name -> proto.AsterLargeBin
	108, // 136: proto.FlightScheduleBin.daily_record_list:type_name -> proto.FlightDailyRecordBin
	654, // 137: proto.DragonSpineBanDropSubject.drop_subject_list:type_name -> proto.Uint32PairBin
	110, // 138: proto.DragonSpineScheduleBin.chapter_list:type_name -> proto.DragonSpineChapterBin
	111, // 139: proto.DragonSpineScheduleBin.banned_drop_subject_list:type_name -> proto.DragonSpineBanDropSubject
	113, // 140: proto.EffigyScheduleBin.daily_record_list:type_name -> proto.EffigyDailyRecordBin
	569, // 141: proto.TreasureMapRegionBin.done_group_map:type_name -> proto.TreasureMapRegionBin.DoneGroupMapEntry
	570, // 142: proto.TreasureMapBonusChallengeBin.fragment_map:type_name -> proto.TreasureMapBonusChallengeBin.FragmentMapEntry
	115, // 143: proto.TreasureMapScheduleBin.region_list:type_name -> proto.TreasureMapRegionBin
	116, // 144: proto.TreasureMapScheduleBin.challenge_list:type_name -> proto.TreasureMapBonusChallengeBin
	119, // 145: proto.ExpeditionScheduleBin.path_data_list:type_name -> proto.ExpeditionPathDataBin
	120, // 146: proto.ExpeditionScheduleBin.assist_record_list:type_name -> proto.ExpeditionAssistRecordBin
	121, // 147: proto.ExpeditionScheduleBin.challenge_data_list:type_name -> proto.ExpeditionChallengeDataBin
	123, // 148: proto.BlessingScheduleBin.cur_day_scanned_entity_list:type_name -> proto.BlessingScanEntityData
	571, // 149: proto.BlessingScheduleBin.pic_num_map:type_name -> proto.BlessingScheduleBin.PicNumMapEntry
	124, // 150: proto.BlessingScheduleBin.recv_pic_data_list:type_name -> proto.BlessingRecvPicData
	572, // 151: proto.FleurFairMusicBin.music_game_record_map:type_name -> proto.FleurFairMusicBin.MusicGameRecordMapEntry
	126, // 152: proto.FleurFairMinigameBin.balloon_bin:type_name -> proto.FleurFairBalloonBin
	127, // 153: proto.FleurFairMinigameBin.fall_bin:type_name -> proto.FleurFairFallBin
	129, // 154: proto.FleurFairMinigameBin.music_bin:type_name -> proto.FleurFairMusicBin
	573, // 155: proto.FleurFairScheduleBin.minigame_map:type_name -> proto.FleurFairScheduleBin.MinigameMapEntry
	574, // 156: proto.FleurFairScheduleBin.dungeon_section_map:type_name -> proto.FleurFairScheduleBin.DungeonSectionMapEntry
	135, // 157: proto.ChannellerSlabStageBin.challenge_list:type_name -> proto.ChannellerSlabChallengeBin
	575, // 158: proto.ChannellerSlabBuffSchemeBin.slot_map:type_name -> proto.ChannellerSlabBuffSchemeBin.SlotMapEntry
	137, // 159: proto.ChannellerSlabBuffDataBin.single_buff_scheme:type_name -> proto.ChannellerSlabBuffSchemeBin
	137, // 160: proto.ChannellerSlabBuffDataBin.mp_buff_scheme:type_name -> proto.ChannellerSlabBuffSchemeBin
	138, // 161: proto.ChannellerSlabBuffDataBin.assist_bin_list:type_name -> proto.ChannellerSlabAssistBin
	140, // 162: proto.ChannellerSlabLoopDungeonStageBin.dungeon_data_list:type_name -> proto.ChannellerSlabLoopDungeonDataBin
	136, // 163: proto.ChannellerSlabScheduleBin.stage_list:type_name -> proto.ChannellerSlabStageBin
	139, // 164: proto.ChannellerSlabScheduleBin.buff_data:type_name -> proto.ChannellerSlabBuffDataBin
	141, // 165: proto.ChannellerSlabScheduleBin.loop_dungeon_stage:type_name -> proto.ChannellerSlabLoopDungeonStageBin
	143, // 166: proto.MistTrialLevelBin.best_avatar_list:type_name -> proto.MistTrialBestAvatarBin
	143, // 167: proto.MistTrialLevelBin.best_hit_avatar:type_name -> proto.MistTrialBestAvatarBin
	144, // 168: proto.MistTrialScheduleBin.level_bin_list:type_name -> proto.MistTrialLevelBin
	576, // 169: proto.HideAndSeekScheduleBin.hider_slot_skill_map:type_name -> proto.HideAndSeekScheduleBin.HiderSlotSkillMapEntry
	577, // 170: proto.HideAndSeekScheduleBin.hunter_slot_skill_map:type_name -> proto.HideAndSeekScheduleBin.HunterSlotSkillMapEntry
	578, // 171: proto.SummerTimeScheduleBin.stage_bin_map:type_name -> proto.SummerTimeScheduleBin.StageBinMapEntry
	149, // 172: proto.SummerTimeScheduleBin.sprint_boat_list:type_name -> proto.SummerTimeSprintBoatBin
	151, // 173: proto.BounceConjuringScheduleBin.chapter_list:type_name -> proto.BounceConjuringChapterBin
	153, // 174: proto.BuoyantCombatScheduleBin.daily_record_list:type_name -> proto.BuoyantCombatDailyRecordBin
	155, // 175: proto.EchoShellScheduleBin.summer_time_dungeon_list:type_name -> proto.SummerTimeDungeonBin
	579, // 176: proto.ChessScheduleBin.daily_obtained_exp_map:type_name -> proto.ChessScheduleBin.DailyObtainedExpMapEntry
	158, // 177: proto.BlitzRushScheduleBin.stage_bin_list:type_name -> proto.BlitzRushStageBin
	159, // 178: proto.BlitzRushScheduleBin.parkour_level_record_list:type_name -> proto.BlitzRushParkourLevelRecordBin
	161, // 179: proto.SumoTeamBin.avatar_bin_list:type_name -> proto.SumoAvatarBin
	162, // 180: proto.SumoStageBin.team_list:type_name -> proto.SumoTeamBin
	163, // 181: proto.SumoScheduleBin.stage_bin_list:type_name -> proto.SumoStageBin
	166, // 182: proto.LunaRiteScheduleBin.area_bin_list:type_name -> proto.LunaRiteAreaBin
	165, // 183: proto.LunaRiteScheduleBin.hint_point_bin_list:type_name -> proto.LunaRiteHintPointBin
	168, // 184: proto.MoonfinTrialScheduleBin.moonfintrial_level_record_list:type_name -> proto.MoonfinTrialLevelRecordBin
	580, // 185: proto.PlantFlowerRecvFlowerDataBin.flower_num_map:type_name -> proto.PlantFlowerRecvFlowerDataBin.FlowerNumMapEntry
	581, // 186: proto.HomeModuleUsedActivityItemDataBin.item_count_map:type_name -> proto.HomeModuleUsedActivityItemDataBin.ItemCountMapEntry
	171, // 187: proto.HomeUsedActivityItemDataBin.module_used_item_list:type_name -> proto.HomeModuleUsedActivityItemDataBin
	582, // 188: proto.PlantFlowerShelfDataBin.used_flower_num_map:type_name -> proto.PlantFlowerShelfDataBin.UsedFlowerNumMapEntry
	583, // 189: proto.PlantFlowerScheduleBin.wish_flower_num_map:type_name -> proto.PlantFlowerScheduleBin.WishFlowerNumMapEntry
	170, // 190: proto.PlantFlowerScheduleBin.recv_flower_data_list:type_name -> proto.PlantFlowerRecvFlowerDataBin
	584, // 191: proto.PlantFlowerScheduleBin.activity_used_flower_num_map:type_name -> proto.PlantFlowerScheduleBin.ActivityUsedFlowerNumMapEntry
	172, // 192: proto.PlantFlowerScheduleBin.home_used_flower_data:type_name -> proto.HomeUsedActivityItemDataBin
	173, // 193: proto.PlantFlowerScheduleBin.seed_plant_data_list:type_name -> proto.PlantFlowerSeedPlantDataBin
	174, // 194: proto.PlantFlowerScheduleBin.flower_shelf_data_list:type_name -> proto.PlantFlowerShelfDataBin
	585, // 195: proto.MusicGameScheduleBin.music_game_record_map:type_name -> proto.MusicGameScheduleBin.MusicGameRecordMapEntry
	177, // 196: proto.MusicGameScheduleBin.music_game_ugc_save_bin:type_name -> proto.MusicGameUgcSaveBin
	178, // 197: proto.MusicGameScheduleBin.music_game_ugc_search_bin:type_name -> proto.MusicGameUgcSearchBin
	179, // 198: proto.MusicGameScheduleBin.music_game_ugc_play_bin:type_name -> proto.MusicGameUgcPlayBin
	182, // 199: proto.RoguelikeMiscBin.use_rune_list:type_name -> proto.RoguelikeDungeonRuneBin
	183, // 200: proto.RoguelikeMiscBin.selected_card_list:type_name -> proto.RoguelikeDungeonCardBin
	184, // 201: proto.RoguelikeMiscBin.curse_list:type_name -> proto.RoguelikeDungeonCurseBin
	185, // 202: proto.RoguelikeMiscBin.dynamic_sgv_list:type_name -> proto.RoguelikeDungeonDynamicSGVBin
	586, // 203: proto.RoguelikeMiscBin.chosen_card_type_count_map:type_name -> proto.RoguelikeMiscBin.ChosenCardTypeCountMapEntry
	587, // 204: proto.RogueCellBin.diff_monster_pool_map:type_name -> proto.RogueCellBin.DiffMonsterPoolMapEntry
	654, // 205: proto.RogueGadgetPointBin.group_point_pair:type_name -> proto.Uint32PairBin
	187, // 206: proto.RogueDungeonBin.team_bin:type_name -> proto.RogueTeamBin
	652, // 207: proto.RogueDungeonBin.last_player_pos:type_name -> proto.VectorBin
	652, // 208: proto.RogueDungeonBin.last_player_rot:type_name -> proto.VectorBin
	588, // 209: proto.RogueDungeonBin.rogue_cell_bin_map:type_name -> proto.RogueDungeonBin.RogueCellBinMapEntry
	654, // 210: proto.RogueDungeonBin.brakeages_list:type_name -> proto.Uint32PairBin
	654, // 211: proto.RogueDungeonBin.trap_list:type_name -> proto.Uint32PairBin
	654, // 212: proto.RogueDungeonBin.blast_bucket_list:type_name -> proto.Uint32PairBin
	189, // 213: proto.RogueDungeonBin.brakeage_group_gadget_bin_list:type_name -> proto.RogueGadgetPointBin
	189, // 214: proto.RogueDungeonBin.trap_group_gadget_bin_list:type_name -> proto.RogueGadgetPointBin
	189, // 215: proto.RogueDungeonBin.byobu_group_gadget_bin_list:type_name -> proto.RogueGadgetPointBin
	189, // 216: proto.RogueDungeonBin.ball_group_gadget_bin_list:type_name -> proto.RogueGadgetPointBin
	654, // 217: proto.RogueStageBin.dead_gadget_count_list:type_name -> proto.Uint32PairBin
	589, // 218: proto.RogueStageBin.level_explore_cell_count_map:type_name -> proto.RogueStageBin.LevelExploreCellCountMapEntry
	590, // 219: proto.RogueStageBin.level_finish_all_challenge_map:type_name -> proto.RogueStageBin.LevelFinishAllChallengeMapEntry
	591, // 220: proto.RogueStageBin.finish_challenge_bin_map:type_name -> proto.RogueStageBin.FinishChallengeBinMapEntry
	592, // 221: proto.RogueStageBin.level_time_cost_map:type_name -> proto.RogueStageBin.LevelTimeCostMapEntry
	593, // 222: proto.RogueStageBin.explored_cell_type_map:type_name -> proto.RogueStageBin.ExploredCellTypeMapEntry
	181, // 223: proto.RoguelikeDungeonScheduleBin.shikigami_list:type_name -> proto.RoguelikeShikigamiBin
	186, // 224: proto.RoguelikeDungeonScheduleBin.misc_bin:type_name -> proto.RoguelikeMiscBin
	192, // 225: proto.RoguelikeDungeonScheduleBin.stage_bin_list:type_name -> proto.RogueStageBin
	190, // 226: proto.RoguelikeDungeonScheduleBin.dungeon_runtime_bin:type_name -> proto.RogueDungeonBin
	194, // 227: proto.WinterCampExploreBin.drop_record_list:type_name -> proto.WinterCampDropBin
	660, // 228: proto.WinterCampRecvItemBin.item_bin_list:type_name -> proto.ItemParamBin
	660, // 229: proto.WinterCampHomeUsedItemBin.item_bin_list:type_name -> proto.ItemParamBin
	660, // 230: proto.WinterCampSnowmanUsedItemBin.item_bin_list:type_name -> proto.ItemParamBin
	195, // 231: proto.WinterCampScheduleBin.explore_bin:type_name -> proto.WinterCampExploreBin
	196, // 232: proto.WinterCampScheduleBin.battle_bin:type_name -> proto.WinterCampBattleBin
	197, // 233: proto.WinterCampScheduleBin.race_bin_list:type_name -> proto.WinterCampRaceBin
	198, // 234: proto.WinterCampScheduleBin.recv_item_bin_list:type_name -> proto.WinterCampRecvItemBin
	199, // 235: proto.WinterCampScheduleBin.home_used_item_list:type_name -> proto.WinterCampHomeUsedItemBin
	200, // 236: proto.WinterCampScheduleBin.snowman_used_item_list:type_name -> proto.WinterCampSnowmanUsedItemBin
	594, // 237: proto.HachiScheduleBin.stage_bin_map:type_name -> proto.HachiScheduleBin.StageBinMapEntry
	204, // 238: proto.PotionStageBin.level_bin_list:type_name -> proto.PotionLevelBin
	205, // 239: proto.PotionScheduleBin.stage_bin_list:type_name -> proto.PotionStageBin
	207, // 240: proto.TanukiTravelScheduleBin.level_bin_list:type_name -> proto.TanukiTravelLevelBin
	209, // 241: proto.SalvageChallengeBin.bundle_info:type_name -> proto.SalvageBundleChallengeBin
	210, // 242: proto.SalvageChallengeBin.score_challenge_info:type_name -> proto.SalvageScoreChallengeBin
	211, // 243: proto.LanternSalvageStageBin.challenge_bin_list:type_name -> proto.SalvageChallengeBin
	213, // 244: proto.LanternRiteProjectionBin.level_bin_list:type_name -> proto.LanternRiteProjectionLevelBin
	215, // 245: proto.LanternRiteFireworksStageBin.challenge_bin_list:type_name -> proto.LanternRiteFireworksChallengeBin
	216, // 246: proto.LanternRiteFireworksBin.stage_bin_list:type_name -> proto.LanternRiteFireworksStageBin
	214, // 247: proto.LanternRiteScheduleBin.projection_bin:type_name -> proto.LanternRiteProjectionBin
	212, // 248: proto.LanternRiteScheduleBin.salvage_stage_bin_list:type_name -> proto.LanternSalvageStageBin
	595, // 249: proto.LanternRiteScheduleBin.salvage_tracking_mark_map:type_name -> proto.LanternRiteScheduleBin.SalvageTrackingMarkMapEntry
	217, // 250: proto.LanternRiteScheduleBin.fireworks_bin:type_name -> proto.LanternRiteFireworksBin
	219, // 251: proto.MichiaeMatsuriScheduleBin.stage_bin_list:type_name -> proto.MichiaeMatsuriStageBin
	221, // 252: proto.BartenderScheduleBin.unlock_task_list:type_name -> proto.BartenderTaskBin
	222, // 253: proto.BartenderScheduleBin.unlock_level_list:type_name -> proto.BartenderLevelBin
	224, // 254: proto.IrodoriChessLevelBin.normal_map_data:type_name -> proto.IrodoriChessMapBin
	224, // 255: proto.IrodoriChessLevelBin.hard_map_data:type_name -> proto.IrodoriChessMapBin
	225, // 256: proto.IrodoriChessBin.level_list:type_name -> proto.IrodoriChessLevelBin
	596, // 257: proto.IrodoriFlowerShelfBin.used_flower_count_map:type_name -> proto.IrodoriFlowerShelfBin.UsedFlowerCountMapEntry
	227, // 258: proto.IrodoriFlowerBin.shelf_data_list:type_name -> proto.IrodoriFlowerShelfBin
	229, // 259: proto.IrodoriPoetryBin.theme_bin_list:type_name -> proto.IrodoriPoetryThemeBin
	231, // 260: proto.IrodoriMasterLevelBin.level_detail_list:type_name -> proto.IrodoriMasterLevelDetailBin
	226, // 261: proto.IrodoriScheduleBin.chess_data:type_name -> proto.IrodoriChessBin
	228, // 262: proto.IrodoriScheduleBin.flower_data:type_name -> proto.IrodoriFlowerBin
	230, // 263: proto.IrodoriScheduleBin.poetry_data:type_name -> proto.IrodoriPoetryBin
	232, // 264: proto.IrodoriScheduleBin.master_level_list:type_name -> proto.IrodoriMasterLevelBin
	235, // 265: proto.CrystalLinkTeamBin.avatar_bin_list:type_name -> proto.CrystalLinkAvatarBin
	234, // 266: proto.CrystalLinkTeamBin.buff_bin_list:type_name -> proto.CrystalLinkBuffBin
	236, // 267: proto.CrystalLinkLevelBin.team_bin_list:type_name -> proto.CrystalLinkTeamBin
	237, // 268: proto.CrystalLinkScheduleBin.level_bin_list:type_name -> proto.CrystalLinkLevelBin
	239, // 269: proto.PhotoScheduleBin.photo_pos_bin_list:type_name -> proto.PhotoPosBin
	241, // 270: proto.SpiceScheduleBin.stage_bin_list:type_name -> proto.SpiceStageBin
	597, // 271: proto.GachaStageBin.target_num_map:type_name -> proto.GachaStageBin.TargetNumMapEntry
	598, // 272: proto.GachaScheduleBin.robot_num_map:type_name -> proto.GachaScheduleBin.RobotNumMapEntry
	243, // 273: proto.GachaScheduleBin.gacha_stage_bin_list:type_name -> proto.GachaStageBin
	599, // 274: proto.GachaScheduleBin.have_reward_robot_num_map:type_name -> proto.GachaScheduleBin.HaveRewardRobotNumMapEntry
	600, // 275: proto.ActivityRecvGiftBin.gift_num_map:type_name -> proto.ActivityRecvGiftBin.GiftNumMapEntry
	601, // 276: proto.ActivityGiftDataBin.wish_gift_num_map:type_name -> proto.ActivityGiftDataBin.WishGiftNumMapEntry
	245, // 277: proto.ActivityGiftDataBin.recv_gift_data_list:type_name -> proto.ActivityRecvGiftBin
	248, // 278: proto.RogueDiaryStageBin.record_bin:type_name -> proto.RogueDiaryStageRecordBin
	250, // 279: proto.RogueDiaryProgressBin.room_config_list:type_name -> proto.RogueDiaryRoomConfigPairBin
	251, // 280: proto.RogueDiaryProgressBin.rogue_avatar_list:type_name -> proto.RogueDiaryAvtarBin
	249, // 281: proto.RogueDiaryScheduleBin.stage_bin_list:type_name -> proto.RogueDiaryStageBin
	252, // 282: proto.RogueDiaryScheduleBin.progress_bin:type_name -> proto.RogueDiaryProgressBin
	254, // 283: proto.SummerTimeV2ScheduleBin.dungeon_stage_bin_list:type_name -> proto.SummerTimeV2DungeonStageBin
	255, // 284: proto.SummerTimeV2ScheduleBin.boat_stage_bin_list:type_name -> proto.SummerTimeV2BoatStageBin
	257, // 285: proto.IslandPartyScheduleBin.stage_bin_list:type_name -> proto.IslandPartyStageBin
	259, // 286: proto.GearScheduleBin.level_bin_list:type_name -> proto.GearStageBin
	260, // 287: proto.GearScheduleBin.jigsaw_picture_data:type_name -> proto.JigsawPictureDataBin
	262, // 288: proto.GravenInnocencePhotoBin.stage_bin_list:type_name -> proto.GravenInnocencePhotoStageBin
	263, // 289: proto.GravenInnocencePhotoBin.object_bin_list:type_name -> proto.GravenInnocencePhotoObjectBin
	265, // 290: proto.GravenInnocenceCampBin.stage_bin_list:type_name -> proto.GravenInnocenceCampStageBin
	267, // 291: proto.GravenInnocenceRaceBin.level_bin_list:type_name -> proto.GravenInnocenceRaceLevelBin
	660, // 292: proto.GravenInnocenceCarveUsedItemBin.need_item_bin_list:type_name -> proto.ItemParamBin
	660, // 293: proto.GravenInnocenceCarveUsedItemBin.pass_item_bin_list:type_name -> proto.ItemParamBin
	269, // 294: proto.GravenInnocenceCarveBin.stage_bin_list:type_name -> proto.GravenInnocenceCarveStageBin
	270, // 295: proto.GravenInnocenceCarveBin.used_item_bin_list:type_name -> proto.GravenInnocenceCarveUsedItemBin
	264, // 296: proto.GravenInnocenceScheduleBin.photo_bin:type_name -> proto.GravenInnocencePhotoBin
	266, // 297: proto.GravenInnocenceScheduleBin.camp_bin:type_name -> proto.GravenInnocenceCampBin
	268, // 298: proto.GravenInnocenceScheduleBin.race_bin:type_name -> proto.GravenInnocenceRaceBin
	271, // 299: proto.GravenInnocenceScheduleBin.carve_bin:type_name -> proto.GravenInnocenceCarveBin
	276, // 300: proto.InstableSprayStageBin.team_info_bin_list:type_name -> proto.InstableSprayTeamInfoBin
	273, // 301: proto.InstableSprayScheduleBin.stage_bin_list:type_name -> proto.InstableSprayStageBin
	275, // 302: proto.InstableSprayTeamInfoBin.avatar_info_bin_list:type_name -> proto.InstableSprayAvatarInfoBin
	277, // 303: proto.MuqadasPotionScheduleBin.level_bin_list:type_name -> proto.MuqadasPotionLevelDataBin
	279, // 304: proto.TreasureSeelieScheduleBin.region_list:type_name -> proto.TreasureSeelieRegionBin
	281, // 305: proto.RockBoardExploreScheduleBin.stage_bin_list:type_name -> proto.RockBoardExploreStageBin
	602, // 306: proto.VintagePresentStageDataBin.present_level_map:type_name -> proto.VintagePresentStageDataBin.PresentLevelMapEntry
	603, // 307: proto.VintageCampChallengeStageDataBin.camp_level_map:type_name -> proto.VintageCampChallengeStageDataBin.CampLevelMapEntry
	654, // 308: proto.VintageTraderDealBin.deal_item_list:type_name -> proto.Uint32PairBin
	291, // 309: proto.VintageStoreBin.attr_random_pool_list:type_name -> proto.VintageStoreAttrRandomPoolBin
	604, // 310: proto.VintageScheduleBin.hunting_stage_map:type_name -> proto.VintageScheduleBin.HuntingStageMapEntry
	605, // 311: proto.VintageScheduleBin.present_stage_map:type_name -> proto.VintageScheduleBin.PresentStageMapEntry
	286, // 312: proto.VintageScheduleBin.booth_data:type_name -> proto.VintageBoothUsedItemDataBin
	606, // 313: proto.VintageScheduleBin.camp_stage_map:type_name -> proto.VintageScheduleBin.CampStageMapEntry
	289, // 314: proto.VintageScheduleBin.trader_list:type_name -> proto.VintageTraderDealBin
	290, // 315: proto.VintageScheduleBin.bargain_list:type_name -> proto.VintageBargainBin
	292, // 316: proto.VintageScheduleBin.store_list:type_name -> proto.VintageStoreBin
	654, // 317: proto.VintageScheduleBin.env_event_list:type_name -> proto.Uint32PairBin
	293, // 318: proto.VintageScheduleBin.npc_event_list:type_name -> proto.VintageNpcEventBin
	607, // 319: proto.VintageScheduleBin.dividend_res_map:type_name -> proto.VintageScheduleBin.DividendResMapEntry
	296, // 320: proto.WindFieldScheduleBin.stage_bin_list:type_name -> proto.WindFieldStageBin
	301, // 321: proto.FungusTrainingShapshotDataBin.monster_bin_list:type_name -> proto.FungusFighterMonsterBin
	302, // 322: proto.FungusTrainingProgressBin.fungus_snapshot_data_list:type_name -> proto.FungusTrainingShapshotDataBin
	298, // 323: proto.FungusFighterScheduleBin.fungus_bin_list:type_name -> proto.FungusBin
	299, // 324: proto.FungusFighterScheduleBin.fungus_plot_stage_bin_list:type_name -> proto.FungusPlotStageBin
	300, // 325: proto.FungusFighterScheduleBin.fungus_training_dungeon_bin_list:type_name -> proto.FungusTrainingDungeonBin
	303, // 326: proto.FungusFighterScheduleBin.fungus_training_progress_bin:type_name -> proto.FungusTrainingProgressBin
	305, // 327: proto.CharAmusementScheduleBin.stage_bin_list:type_name -> proto.CharAmusementStageBin
	307, // 328: proto.EffigyChallengeV2ScheduleBin.level_bin_list:type_name -> proto.EffigyChallengeV2LevelBin
	309, // 329: proto.CoinCollectLevelBin.single_best_team_info:type_name -> proto.CoinCollectTeamInfoBin
	309, // 330: proto.CoinCollectLevelBin.double_best_team_info_list:type_name -> proto.CoinCollectTeamInfoBin
	310, // 331: proto.CoinCollectScheduleBin.level_bin_list:type_name -> proto.CoinCollectLevelBin
	312, // 332: proto.BrickBreakerScheduleBin.stage_bin_list:type_name -> proto.BrickBreakerStageBin
	313, // 333: proto.BrickBreakerScheduleBin.world_level_bin_list:type_name -> proto.BrickBreakerLevelBin
	313, // 334: proto.BrickBreakerScheduleBin.dungeon_level_bin_list:type_name -> proto.BrickBreakerLevelBin
	654, // 335: proto.BrickBreakerScheduleBin.skill_bin_list:type_name -> proto.Uint32PairBin
	315, // 336: proto.TeamChainScheduleBin.stage_bin_list:type_name -> proto.TeamChainStageBin
	317, // 337: proto.ElectroherculesBattleStageBin.level_bin_list:type_name -> proto.ElectroherculesBattleLevelBin
	318, // 338: proto.ElectroherculesBattleScheduleBin.stage_bin_list:type_name -> proto.ElectroherculesBattleStageBin
	320, // 339: proto.SeaLampV3RaceBin.level_bin_list:type_name -> proto.SeaLampV3RaceLevelBin
	322, // 340: proto.SeaLampV3ShadowStageBin.level_bin_list:type_name -> proto.SeaLampV3ShadowLevelBin
	323, // 341: proto.SeaLampV3ShadowBin.stage_bin_list:type_name -> proto.SeaLampV3ShadowStageBin
	321, // 342: proto.SeaLampV3ScheduleBin.race_bin:type_name -> proto.SeaLampV3RaceBin
	324, // 343: proto.SeaLampV3ScheduleBin.shadow_bin:type_name -> proto.SeaLampV3ShadowBin
	326, // 344: proto.DuelHeartLevelBin.difficulty_bin_list:type_name -> proto.DuelHeartDifficultyBin
	327, // 345: proto.DuelheartScheduleBin.level_bin_list:type_name -> proto.DuelHeartLevelBin
	101, // 346: proto.ActivityScheduleBin.salesman_schedule_bin:type_name -> proto.SalesmanScheduleBin
	100, // 347: proto.ActivityScheduleBin.trial_avatar_bin:type_name -> proto.TrialAvatarScheduleBin
	107, // 348: proto.ActivityScheduleBin.delivery_bin:type_name -> proto.DeliveryScheduleBin
	98,  // 349: proto.ActivityScheduleBin.crucible_bin:type_name -> proto.CrucibleScheduleBin
	106, // 350: proto.ActivityScheduleBin.aster_bin:type_name -> proto.AsterScheduleBin
	109, // 351: proto.ActivityScheduleBin.flight_bin:type_name -> proto.FlightScheduleBin
	112, // 352: proto.ActivityScheduleBin.dragon_spine_bin:type_name -> proto.DragonSpineScheduleBin
	114, // 353: proto.ActivityScheduleBin.effigy_bin:type_name -> proto.EffigyScheduleBin
	117, // 354: proto.ActivityScheduleBin.treasure_map_bin:type_name -> proto.TreasureMapScheduleBin
	118, // 355: proto.ActivityScheduleBin.salesman_mp_bin:type_name -> proto.SalesmanMpScheduleBin
	125, // 356: proto.ActivityScheduleBin.blessing_bin:type_name -> proto.BlessingScheduleBin
	96,  // 357: proto.ActivityScheduleBin.sea_lamp_bin:type_name -> proto.SeaLampScheduleDataBin
	122, // 358: proto.ActivityScheduleBin.expedition_bin:type_name -> proto.ExpeditionScheduleBin
	132, // 359: proto.ActivityScheduleBin.fleur_fair_bin:type_name -> proto.FleurFairScheduleBin
	133, // 360: proto.ActivityScheduleBin.arena_challenge_bin:type_name -> proto.ArenaChallengeSchduleBin
	134, // 361: proto.ActivityScheduleBin.water_spirit_bin:type_name -> proto.WaterSpiritScheduleBin
	142, // 362: proto.ActivityScheduleBin.channeller_slab_bin:type_name -> proto.ChannellerSlabScheduleBin
	146, // 363: proto.ActivityScheduleBin.hide_and_seek_bin:type_name -> proto.HideAndSeekScheduleBin
	145, // 364: proto.ActivityScheduleBin.mist_trial_bin:type_name -> proto.MistTrialScheduleBin
	147, // 365: proto.ActivityScheduleBin.find_hilichurl_bin:type_name -> proto.FindHilichurlScheduleBin
	150, // 366: proto.ActivityScheduleBin.summer_time_bin:type_name -> proto.SummerTimeScheduleBin
	154, // 367: proto.ActivityScheduleBin.buoyant_combat_bin:type_name -> proto.BuoyantCombatScheduleBin
	152, // 368: proto.ActivityScheduleBin.bounce_conjuring_bin:type_name -> proto.BounceConjuringScheduleBin
	156, // 369: proto.ActivityScheduleBin.echo_shell_bin:type_name -> proto.EchoShellScheduleBin
	160, // 370: proto.ActivityScheduleBin.blitz_rush_bin:type_name -> proto.BlitzRushScheduleBin
	157, // 371: proto.ActivityScheduleBin.chess_bin:type_name -> proto.ChessScheduleBin
	164, // 372: proto.ActivityScheduleBin.sumo_bin:type_name -> proto.SumoScheduleBin
	167, // 373: proto.ActivityScheduleBin.luna_rite_bin:type_name -> proto.LunaRiteScheduleBin
	169, // 374: proto.ActivityScheduleBin.moonfin_trial_bin:type_name -> proto.MoonfinTrialScheduleBin
	175, // 375: proto.ActivityScheduleBin.plant_flower_bin:type_name -> proto.PlantFlowerScheduleBin
	180, // 376: proto.ActivityScheduleBin.music_game_bin:type_name -> proto.MusicGameScheduleBin
	193, // 377: proto.ActivityScheduleBin.roguelike_dungeon_bin:type_name -> proto.RoguelikeDungeonScheduleBin
	201, // 378: proto.ActivityScheduleBin.winter_camp_bin:type_name -> proto.WinterCampScheduleBin
	203, // 379: proto.ActivityScheduleBin.hachi_bin:type_name -> proto.HachiScheduleBin
	208, // 380: proto.ActivityScheduleBin.tanuki_travel_bin:type_name -> proto.TanukiTravelScheduleBin
	218, // 381: proto.ActivityScheduleBin.lantern_rite_bin:type_name -> proto.LanternRiteScheduleBin
	206, // 382: proto.ActivityScheduleBin.potion_bin:type_name -> proto.PotionScheduleBin
	220, // 383: proto.ActivityScheduleBin.michiae_matsuri_bin:type_name -> proto.MichiaeMatsuriScheduleBin
	223, // 384: proto.ActivityScheduleBin.bartender_bin:type_name -> proto.BartenderScheduleBin
	233, // 385: proto.ActivityScheduleBin.irodori_bin:type_name -> proto.IrodoriScheduleBin
	238, // 386: proto.ActivityScheduleBin.crystal_link_bin:type_name -> proto.CrystalLinkScheduleBin
	240, // 387: proto.ActivityScheduleBin.photo_bin:type_name -> proto.PhotoScheduleBin
	242, // 388: proto.ActivityScheduleBin.spice_bin:type_name -> proto.SpiceScheduleBin
	244, // 389: proto.ActivityScheduleBin.gacha_bin:type_name -> proto.GachaScheduleBin
	247, // 390: proto.ActivityScheduleBin.luminance_stone_challenge_bin:type_name -> proto.LuminanceStoneChallengeScheduleBin
	253, // 391: proto.ActivityScheduleBin.rogue_diary_bin:type_name -> proto.RogueDiaryScheduleBin
	256, // 392: proto.ActivityScheduleBin.summer_time_v2_bin:type_name -> proto.SummerTimeV2ScheduleBin
	258, // 393: proto.ActivityScheduleBin.island_party_bin:type_name -> proto.IslandPartyScheduleBin
	261, // 394: proto.ActivityScheduleBin.gear_bin:type_name -> proto.GearScheduleBin
	272, // 395: proto.ActivityScheduleBin.graven_innocence_bin:type_name -> proto.GravenInnocenceScheduleBin
	274, // 396: proto.ActivityScheduleBin.instable_spray_bin:type_name -> proto.InstableSprayScheduleBin
	278, // 397: proto.ActivityScheduleBin.muqadas_potion_bin:type_name -> proto.MuqadasPotionScheduleBin
	280, // 398: proto.ActivityScheduleBin.treasure_seelie_bin:type_name -> proto.TreasureSeelieScheduleBin
	282, // 399: proto.ActivityScheduleBin.rock_board_explore_bin:type_name -> proto.RockBoardExploreScheduleBin
	294, // 400: proto.ActivityScheduleBin.vintage_bin:type_name -> proto.VintageScheduleBin
	295, // 401: proto.ActivityScheduleBin.wind_field_bin:type_name -> proto.WindFieldScheduleBin
	304, // 402: proto.ActivityScheduleBin.fungus_fighter_bin:type_name -> proto.FungusFighterScheduleBin
	306, // 403: proto.ActivityScheduleBin.char_amusement_bin:type_name -> proto.CharAmusementScheduleBin
	308, // 404: proto.ActivityScheduleBin.effigy_challenge_bin:type_name -> proto.EffigyChallengeV2ScheduleBin
	311, // 405: proto.ActivityScheduleBin.coin_collect_bin:type_name -> proto.CoinCollectScheduleBin
	314, // 406: proto.ActivityScheduleBin.brick_breaker_bin:type_name -> proto.BrickBreakerScheduleBin
	325, // 407: proto.ActivityScheduleBin.sea_lamp_v3_bin:type_name -> proto.SeaLampV3ScheduleBin
	316, // 408: proto.ActivityScheduleBin.team_chain_bin:type_name -> proto.TeamChainScheduleBin
	328, // 409: proto.ActivityScheduleBin.duel_heart_bin:type_name -> proto.DuelheartScheduleBin
	319, // 410: proto.ActivityScheduleBin.electrohercules_battle_bin:type_name -> proto.ElectroherculesBattleScheduleBin
	608, // 411: proto.ActivityBin.cond_state_map:type_name -> proto.ActivityBin.CondStateMapEntry
	329, // 412: proto.ActivityBin.schedule_bin:type_name -> proto.ActivityScheduleBin
	661, // 413: proto.ActivityBin.disable_transfer_point_interaction_list:type_name -> proto.Uint32Pair
	609, // 414: proto.ActivityBin.quest_content_map:type_name -> proto.ActivityBin.QuestContentMapEntry
	246, // 415: proto.ActivityBin.gift_data_bin:type_name -> proto.ActivityGiftDataBin
	610, // 416: proto.ActivityBin.activity_push_tips_map:type_name -> proto.ActivityBin.ActivityPushTipsMapEntry
	297, // 417: proto.ActivityBin.activity_general_coin_list:type_name -> proto.ActivityGeneralCoinBin
	611, // 418: proto.PlayerActivityCompBin.activity_bin_map:type_name -> proto.PlayerActivityCompBin.ActivityBinMapEntry
	662, // 419: proto.PlayerMailBin.mail_bin:type_name -> proto.MailBin
	612, // 420: proto.PlayerMailCompBin.wait_add_mail_map:type_name -> proto.PlayerMailCompBin.WaitAddMailMapEntry
	613, // 421: proto.PlayerMailCompBin.action_seq_map:type_name -> proto.PlayerMailCompBin.ActionSeqMapEntry
	614, // 422: proto.PlayerMailCompBin.new_wait_add_mail_map:type_name -> proto.PlayerMailCompBin.NewWaitAddMailMapEntry
	334, // 423: proto.ShopRecordBin.goods_record_list:type_name -> proto.ShopGoodsRecordBin
	334, // 424: proto.ShopRecordBin.history_goods_record_list:type_name -> proto.ShopGoodsRecordBin
	335, // 425: proto.PlayerShopCompBin.shop_record_list:type_name -> proto.ShopRecordBin
	615, // 426: proto.GachaRecordBin.gacha_guarantee_map:type_name -> proto.GachaRecordBin.GachaGuaranteeMapEntry
	616, // 427: proto.GachaRecordBin.gacha_item_type_data_map:type_name -> proto.GachaRecordBin.GachaItemTypeDataMapEntry
	617, // 428: proto.GachaRecordBin.gacha_item_parent_type_data_map:type_name -> proto.GachaRecordBin.GachaItemParentTypeDataMapEntry
	618, // 429: proto.GachaRecordBin.gacha_up_data_map:type_name -> proto.GachaRecordBin.GachaUpDataMapEntry
	619, // 430: proto.PlayerGachaCompBin.gacha_record_map:type_name -> proto.PlayerGachaCompBin.GachaRecordMapEntry
	620, // 431: proto.GivingRecordBin.material_cnt_map:type_name -> proto.GivingRecordBin.MaterialCntMapEntry
	621, // 432: proto.PlayerGivingCompBin.giving_record_map:type_name -> proto.PlayerGivingCompBin.GivingRecordMapEntry
	622, // 433: proto.PlayerForgeCompBin.forge_queue_map:type_name -> proto.PlayerForgeCompBin.ForgeQueueMapEntry
	623, // 434: proto.WatcherBin.var_list:type_name -> proto.WatcherBin.Var
	624, // 435: proto.PlayerWatcherCompBin.global_watcher_progress_map:type_name -> proto.PlayerWatcherCompBin.GlobalWatcherProgressMapEntry
	349, // 436: proto.PlayerWatcherCompBin.push_tips_list:type_name -> proto.PushTipsBin
	348, // 437: proto.PlayerWatcherCompBin.watcher_list:type_name -> proto.WatcherBin
	350, // 438: proto.PlayerWatcherCompBin.record_value:type_name -> proto.RecordValueBin
	353, // 439: proto.TowerFloorRecordBin.passed_level_record_list:type_name -> proto.TowerLevelRecordBin
	625, // 440: proto.TowerAvatarRecordBin.cur_fight_prop_map:type_name -> proto.TowerAvatarRecordBin.CurFightPropMapEntry
	352, // 441: proto.TowerCurLevelRecordBin.tower_team_list:type_name -> proto.TowerTeamBin
	626, // 442: proto.TowerCurLevelRecordBin.avatar_record_map:type_name -> proto.TowerCurLevelRecordBin.AvatarRecordMapEntry
	627, // 443: proto.TowerCurLevelRecordBin.tower_buff_map:type_name -> proto.TowerCurLevelRecordBin.TowerBuffMapEntry
	628, // 444: proto.TowerFightStatisticBin.avatar_reveal_count_map:type_name -> proto.TowerFightStatisticBin.AvatarRevealCountMapEntry
	629, // 445: proto.TowerFightStatisticBin.kill_count_map:type_name -> proto.TowerFightStatisticBin.KillCountMapEntry
	630, // 446: proto.TowerFightStatisticBin.take_damage_count_map:type_name -> proto.TowerFightStatisticBin.TakeDamageCountMapEntry
	631, // 447: proto.TowerFightStatisticBin.normal_skill_count_map:type_name -> proto.TowerFightStatisticBin.NormalSkillCountMapEntry
	632, // 448: proto.TowerFightStatisticBin.energy_skill_count_map:type_name -> proto.TowerFightStatisticBin.EnergySkillCountMapEntry
	360, // 449: proto.TowerMonthlyCombatSummaryBin.most_reveal_avatar_list:type_name -> proto.TowerFightSummaryPair
	360, // 450: proto.TowerMonthlyCombatSummaryBin.most_kill_avatar_pair:type_name -> proto.TowerFightSummaryPair
	360, // 451: proto.TowerMonthlyCombatSummaryBin.highest_dps_avatr_pair:type_name -> proto.TowerFightSummaryPair
	360, // 452: proto.TowerMonthlyCombatSummaryBin.most_take_damage_avatar_pair:type_name -> proto.TowerFightSummaryPair
	360, // 453: proto.TowerMonthlyCombatSummaryBin.most_cast_normal_skill_avatar_pair:type_name -> proto.TowerFightSummaryPair
	360, // 454: proto.TowerMonthlyCombatSummaryBin.most_cast_energy_skill_avatar_pair:type_name -> proto.TowerFightSummaryPair
	361, // 455: proto.TowerMonthlySummaryBin.monthly_combat_summary:type_name -> proto.TowerMonthlyCombatSummaryBin
	354, // 456: proto.PlayerTowerCompBin.tower_floor_record_list:type_name -> proto.TowerFloorRecordBin
	633, // 457: proto.PlayerTowerCompBin.daily_level_buff_map:type_name -> proto.PlayerTowerCompBin.DailyLevelBuffMapEntry
	356, // 458: proto.PlayerTowerCompBin.cur_level_record:type_name -> proto.TowerCurLevelRecordBin
	359, // 459: proto.PlayerTowerCompBin.fight_statistic:type_name -> proto.TowerFightStatisticBin
	634, // 460: proto.PlayerTowerCompBin.tower_monthly_summary_map:type_name -> proto.PlayerTowerCompBin.TowerMonthlySummaryMapEntry
	354, // 461: proto.PlayerTowerCompBin.tower_entrance_floor_record_list:type_name -> proto.TowerFloorRecordBin
	364, // 462: proto.BlossomRefreshDataBin.circle_camp_list:type_name -> proto.BlossomCircleCampDataBin
	635, // 463: proto.PlayerBlossomCompBin.recent_used_section_id_map:type_name -> proto.PlayerBlossomCompBin.RecentUsedSectionIdMapEntry
	636, // 464: proto.PlayerBlossomCompBin.initial_section_map:type_name -> proto.PlayerBlossomCompBin.InitialSectionMapEntry
	637, // 465: proto.PlayerBlossomCompBin.refresh_data_map:type_name -> proto.PlayerBlossomCompBin.RefreshDataMapEntry
	368, // 466: proto.PlayerSignInCompBin.sign_in_record_list:type_name -> proto.SignInRecordBin
	369, // 467: proto.PlayerSignInCompBin.bonus_activity_record_list:type_name -> proto.BonusActivityRecordBin
	377, // 468: proto.OrderFinishNotifyBin.item_list:type_name -> proto.OrderFinishNotifyItemBin
	378, // 469: proto.OrderNotifySaveBin.order_notify_list:type_name -> proto.OrderFinishNotifyBin
	638, // 470: proto.PlayerRechargeCompBin.finished_order_map:type_name -> proto.PlayerRechargeCompBin.FinishedOrderMapEntry
	639, // 471: proto.PlayerRechargeCompBin.wait_mark_db_map:type_name -> proto.PlayerRechargeCompBin.WaitMarkDbMapEntry
	371, // 472: proto.PlayerRechargeCompBin.mcoin_product_list:type_name -> proto.McoinProductConfigBin
	372, // 473: proto.PlayerRechargeCompBin.card_product_list:type_name -> proto.CardProductConfigBin
	373, // 474: proto.PlayerRechargeCompBin.google_gift_card_list:type_name -> proto.GoogleGiftCardProductBin
	379, // 475: proto.PlayerRechargeCompBin.order_notify_save_list:type_name -> proto.OrderNotifySaveBin
	374, // 476: proto.PlayerRechargeCompBin.concert_product_list:type_name -> proto.ConcertProductBin
	375, // 477: proto.PlayerRechargeCompBin.apple_gift_card_list:type_name -> proto.AppleGiftCardProductBin
	376, // 478: proto.PlayerRechargeCompBin.psn_compensation_product_list:type_name -> proto.PsnCompensationProductBin
	381, // 479: proto.BattlePassScheduleBin.reward_taken_list:type_name -> proto.BattlePassRewardTagBin
	382, // 480: proto.PlayerBattlePassCompBin.schedule_bin_list:type_name -> proto.BattlePassScheduleBin
	383, // 481: proto.PlayerBattlePassCompBin.cur_battle_pass_mission_bin_list:type_name -> proto.BattlePassMissionBin
	663, // 482: proto.PlayerSocialCompBin.birthday:type_name -> proto.Birthday
	640, // 483: proto.PlayerSocialCompBin.friend_remark_name_map:type_name -> proto.PlayerSocialCompBin.FriendRemarkNameMapEntry
	385, // 484: proto.PlayerSocialCompBin.chat_emoji_collection:type_name -> proto.ChatEmojiCollectionBin
	531, // 485: proto.PlayerSocialCompBin.signature_audit_bin:type_name -> proto.ContentAuditBin
	641, // 486: proto.MpPlayBin.uid_world_level_list:type_name -> proto.MpPlayBin.UidWorldLevelBin
	388, // 487: proto.PlayerMpPlayCompBin.mp_play_list:type_name -> proto.MpPlayBin
	654, // 488: proto.CodexTypeDataBin.weapon_max_promote_level_list:type_name -> proto.Uint32PairBin
	390, // 489: proto.PlayerCodexCompBin.type_data_list:type_name -> proto.CodexTypeDataBin
	392, // 490: proto.PlayerAchievementCompBin.achievement_list:type_name -> proto.AchievementBin
	664, // 491: proto.HuntingOfferDataBin.state:type_name -> proto.HuntingOfferState
	396, // 492: proto.PlayerHuntingCompBin.hunting_offer_data_list:type_name -> proto.HuntingOfferDataBin
	397, // 493: proto.PlayerHuntingCompBin.cur_week_finished_hunting_pair_vec:type_name -> proto.HuntingOfferPair
	399, // 494: proto.CityReputationBin.request_list:type_name -> proto.CityReputationRequestBin
	400, // 495: proto.PlayerReputationCompBin.city_reputation_list:type_name -> proto.CityReputationBin
	652, // 496: proto.WidgetAnchorPointBin.pos:type_name -> proto.VectorBin
	652, // 497: proto.WidgetAnchorPointBin.rot:type_name -> proto.VectorBin
	642, // 498: proto.WidgetLunchBoxBin.slot_material_map:type_name -> proto.WidgetLunchBoxBin.SlotMaterialMapEntry
	652, // 499: proto.WidgetOneoffGatherPointDetectorBin.hint_center_pos:type_name -> proto.VectorBin
	652, // 500: proto.WidgetLightStoneBin.hint_center_pos:type_name -> proto.VectorBin
	407, // 501: proto.WidgetDetailBin.attach_avatar_widget:type_name -> proto.AttachAvatarWidgetBin
	404, // 502: proto.WidgetDetailBin.oneoff_gather_point_detector:type_name -> proto.WidgetOneoffGatherPointDetectorBin
	405, // 503: proto.WidgetDetailBin.client_collector:type_name -> proto.WidgetClientCollectorBin
	408, // 504: proto.WidgetDetailBin.capture_animal:type_name -> proto.WidgetCaptureAnimalBin
	409, // 505: proto.WidgetDetailBin.light_stone:type_name -> proto.WidgetLightStoneBin
	410, // 506: proto.WidgetDetailBin.background_widget:type_name -> proto.WidgetBackgroundBin
	411, // 507: proto.WidgetDetailBin.weather_wizard:type_name -> proto.WidgetWeatherWizardBin
	412, // 508: proto.WidgetBin.detail_bin:type_name -> proto.WidgetDetailBin
	402, // 509: proto.PlayerWidgetCompBin.anchor_point_list:type_name -> proto.WidgetAnchorPointBin
	403, // 510: proto.PlayerWidgetCompBin.lunch_box:type_name -> proto.WidgetLunchBoxBin
	404, // 511: proto.PlayerWidgetCompBin.oneoff_gather_point_detector_list:type_name -> proto.WidgetOneoffGatherPointDetectorBin
	405, // 512: proto.PlayerWidgetCompBin.client_collector_list:type_name -> proto.WidgetClientCollectorBin
	406, // 513: proto.PlayerWidgetCompBin.group_cool_down_data_list:type_name -> proto.WidgetCoolDownInfoBin
	406, // 514: proto.PlayerWidgetCompBin.normal_cool_down_data_list:type_name -> proto.WidgetCoolDownInfoBin
	407, // 515: proto.PlayerWidgetCompBin.attach_avatar_widget:type_name -> proto.AttachAvatarWidgetBin
	413, // 516: proto.PlayerWidgetCompBin.widget_bin_list:type_name -> proto.WidgetBin
	643, // 517: proto.PlayerWidgetCompBin.slot_material_map:type_name -> proto.PlayerWidgetCompBin.SlotMaterialMapEntry
	415, // 518: proto.ScenePlayBin.source_bin:type_name -> proto.ScenePlaySourceBin
	416, // 519: proto.PlayerScenePlayCompBin.play_list:type_name -> proto.ScenePlayBin
	665, // 520: proto.MainCoopBin.normal_var_list:type_name -> proto.Uint32ToInt32PairBin
	665, // 521: proto.MainCoopBin.temp_var_list:type_name -> proto.Uint32ToInt32PairBin
	654, // 522: proto.MainCoopBin.seen_ending_list:type_name -> proto.Uint32PairBin
	418, // 523: proto.CoopPointBin.start_main_coop:type_name -> proto.MainCoopBin
	419, // 524: proto.CoopChapterBin.coop_point_list:type_name -> proto.CoopPointBin
	654, // 525: proto.CoopChapterBin.seen_ending_list:type_name -> proto.Uint32PairBin
	644, // 526: proto.CoopProgressBin.main_coop_map:type_name -> proto.CoopProgressBin.MainCoopMapEntry
	418, // 527: proto.PlayerCoopCompBin.main_coop_list:type_name -> proto.MainCoopBin
	420, // 528: proto.PlayerCoopCompBin.chapter_bin_list:type_name -> proto.CoopChapterBin
	421, // 529: proto.PlayerCoopCompBin.progress_bin:type_name -> proto.CoopProgressBin
	423, // 530: proto.PlayerOfferingCompBin.offering_bin_list:type_name -> proto.PlayerOfferingInfoBin
	425, // 531: proto.ReunionRecordBin.sign_in_bin:type_name -> proto.ReunionSignInBin
	426, // 532: proto.ReunionRecordBin.mission_bin:type_name -> proto.ReunionMissionBin
	427, // 533: proto.ReunionRecordBin.privilege_bin:type_name -> proto.ReunionPrivilegeBin
	428, // 534: proto.PlayerReunionCompBin.reunion_record:type_name -> proto.ReunionRecordBin
	430, // 535: proto.PlayerRoutineTypeBin.routine_bin_list:type_name -> proto.PlayerRoutineBin
	431, // 536: proto.PlayerRoutineCompBin.routine_type_bin_list:type_name -> proto.PlayerRoutineTypeBin
	433, // 537: proto.PlayerMiracleRingCompBin.drop_param_list:type_name -> proto.MiracleRingDropParam
	654, // 538: proto.MechanicusBin.gear_level_pair_list:type_name -> proto.Uint32PairBin
	435, // 539: proto.PlayerMechanicusCompBin.cur_mechanicus_bin:type_name -> proto.MechanicusBin
	437, // 540: proto.PlayerOpActivityCompBin.op_activity_recored_list:type_name -> proto.OpActivityRecordBin
	441, // 541: proto.RegionSearchBin.region_list:type_name -> proto.RegionSearchRegionBin
	440, // 542: proto.RegionSearchPlayBin.source:type_name -> proto.RegionSearchSourceBin
	442, // 543: proto.RegionSearchPlayBin.search_list:type_name -> proto.RegionSearchBin
	443, // 544: proto.PlayerRegionSearchCompBin.play_list:type_name -> proto.RegionSearchPlayBin
	666, // 545: proto.CustomDungeonBriefBin.setting:type_name -> proto.CustomDungeonSettingBin
	667, // 546: proto.CustomDungeonBriefBin.abstract:type_name -> proto.CustomDungeonAbstractBin
	447, // 547: proto.PlayerCustomDungeonCompBin.brief_list:type_name -> proto.CustomDungeonBriefBin
	448, // 548: proto.PlayerCustomDungeonCompBin.official_dungeon_list:type_name -> proto.OfficialCustomDungeonBin
	449, // 549: proto.PlayerCustomDungeonCompBin.battle_record_list:type_name -> proto.CustomDungeonBattleRecord
	645, // 550: proto.PlayerUgcCompBin.ugc_bin_map:type_name -> proto.PlayerUgcCompBin.UgcBinMapEntry
	453, // 551: proto.PlayerHomeSceneBin.block_bin_list:type_name -> proto.PlayerHomeBlockBin
	454, // 552: proto.PlayerHomeModuleBin.scene_bin_list:type_name -> proto.PlayerHomeSceneBin
	652, // 553: proto.HomeFieldSnapShotBin.spawn_pos:type_name -> proto.VectorBin
	457, // 554: proto.HomeFieldSnapShotBin.sub_field_list:type_name -> proto.HomeSubFieldSnapShotBin
	652, // 555: proto.HomeTransferSnapShotBin.spawn_pos:type_name -> proto.VectorBin
	652, // 556: proto.HomeMarkPointFurnitureDataBin.pos:type_name -> proto.VectorBin
	460, // 557: proto.HomeMarkPointFurnitureDataBin.npc_data:type_name -> proto.HomeMarkPointNPCDataBin
	461, // 558: proto.HomeMarkPointFurnitureDataBin.suite_data:type_name -> proto.HomeMarkPointSuiteDataBin
	668, // 559: proto.HomeSceneSnapshotBin.deploy_npc_list:type_name -> proto.HomeNpcBin
	669, // 560: proto.HomeSceneSnapshotBin.furniture_suite_list:type_name -> proto.HomeFurnitureSuiteBin
	670, // 561: proto.HomeSceneSnapshotBin.main_house:type_name -> proto.HomeFurnitureBin
	652, // 562: proto.HomeSceneSnapshotBin.djinn_pos:type_name -> proto.VectorBin
	458, // 563: proto.HomeSceneSnapshotBin.field_bin_list:type_name -> proto.HomeFieldSnapShotBin
	459, // 564: proto.HomeSceneSnapshotBin.transfer_bin_list:type_name -> proto.HomeTransferSnapShotBin
	462, // 565: proto.HomeSceneSnapshotBin.normal_mark_point_list:type_name -> proto.HomeMarkPointFurnitureDataBin
	463, // 566: proto.HomeModuleSnapshotBin.scene_bin_list:type_name -> proto.HomeSceneSnapshotBin
	654, // 567: proto.HomeModuleSnapshotBin.furniture_arrange_count_list:type_name -> proto.Uint32PairBin
	464, // 568: proto.HomeSceneCompSnapshotBin.module_bin_list:type_name -> proto.HomeModuleSnapshotBin
	456, // 569: proto.HomeSnapshotBin.basic_snapshot:type_name -> proto.HomeBasicCompSnapshotBin
	465, // 570: proto.HomeSnapshotBin.scene_snapshot:type_name -> proto.HomeSceneCompSnapshotBin
	659, // 571: proto.FurnitureMakeBeHelpedBin.profile_picture_bin:type_name -> proto.ProfilePictureBin
	469, // 572: proto.PlayerFunitureMakeBin.make_times_bin_list:type_name -> proto.FurnitureMakeTimesBin
	671, // 573: proto.PlayerFunitureMakeBin.make_slots_bin_list:type_name -> proto.FurnitureMakeSlotsBin
	468, // 574: proto.PlayerFunitureMakeBin.help_bin_list:type_name -> proto.FurnitureMakeHelpBin
	467, // 575: proto.PlayerFunitureMakeBin.helped_bin_list:type_name -> proto.FurnitureMakeBeHelpedBin
	471, // 576: proto.PlayerHomeLimitedShopBin.npc_pos_bin_list:type_name -> proto.PlayerLimitedShopNPCPosBin
	473, // 577: proto.PlayerHomeResourceBin.home_coin_bin:type_name -> proto.HomeResourceBin
	473, // 578: proto.PlayerHomeResourceBin.fetter_exp_bin:type_name -> proto.HomeResourceBin
	475, // 579: proto.PlayerHomeAvatarBin.home_avatar_list:type_name -> proto.HomeAvatarDataBin
	476, // 580: proto.PlayerHomeAvatarBin.reward_event_list:type_name -> proto.HomeAvatarRewardEventBin
	479, // 581: proto.PlayerHomeBlueprintBin.slot_bin_list:type_name -> proto.PlayerHomeBlueprintSlotBin
	455, // 582: proto.PlayerHomeCompBin.module_list:type_name -> proto.PlayerHomeModuleBin
	466, // 583: proto.PlayerHomeCompBin.snapshot:type_name -> proto.HomeSnapshotBin
	470, // 584: proto.PlayerHomeCompBin.furniture_make_bin:type_name -> proto.PlayerFunitureMakeBin
	474, // 585: proto.PlayerHomeCompBin.home_resource_bin:type_name -> proto.PlayerHomeResourceBin
	472, // 586: proto.PlayerHomeCompBin.limited_shop_bin:type_name -> proto.PlayerHomeLimitedShopBin
	477, // 587: proto.PlayerHomeCompBin.home_avatar_bin:type_name -> proto.PlayerHomeAvatarBin
	478, // 588: proto.PlayerHomeCompBin.wood_exchange_data_bin_list:type_name -> proto.HomeWorldWoodExchangeDataBin
	480, // 589: proto.PlayerHomeCompBin.blueprint_bin:type_name -> proto.PlayerHomeBlueprintBin
	646, // 590: proto.PlayerOfflineOpBin.index_map:type_name -> proto.PlayerOfflineOpBin.IndexMapEntry
	483, // 591: proto.H5ActivityBin.h5_activity_watcher_list:type_name -> proto.H5ActivityWatcherBin
	484, // 592: proto.PlayerH5ActivityCompBin.h5_activity_list:type_name -> proto.H5ActivityBin
	486, // 593: proto.PlayerMatchCompBin.punish_list:type_name -> proto.MatchPunishBin
	488, // 594: proto.PlayerExhibitionCompBin.exhibition_list:type_name -> proto.PlayerExhibitionBin
	490, // 595: proto.PlayerGroupLinkCompBin.link_bin_list:type_name -> proto.PlayerGroupLinkBin
	491, // 596: proto.PlayerGroupLinkCompBin.bundle_bin_list:type_name -> proto.PlayerGroupBundleBin
	492, // 597: proto.PlayerGroupLinkCompBin.finish_bundle_bin_list:type_name -> proto.PlayerGroupBundleFinishBin
	494, // 598: proto.FireworksReformBin.reform_param_bin_list:type_name -> proto.FireworksParamBin
	494, // 599: proto.FireworksLaunchSchemeBin.launch_param_bin_list:type_name -> proto.FireworksParamBin
	495, // 600: proto.PlayerFireworksCompBin.fireworks_reform_bin_list:type_name -> proto.FireworksReformBin
	496, // 601: proto.PlayerFireworksCompBin.launch_scheme_bin_list:type_name -> proto.FireworksLaunchSchemeBin
	647, // 602: proto.PlayerCityCompBin.city_map:type_name -> proto.PlayerCityCompBin.CityMapEntry
	499, // 603: proto.PlayerRegionalPlayCompBin.var_bin_list:type_name -> proto.RegionalPlayVarBin
	500, // 604: proto.PlayerRegionalPlayCompBin.death_zone_bin_list:type_name -> proto.DeathZoneBin
	648, // 605: proto.PlayerShareCDCompBin.share_cd_info_map:type_name -> proto.PlayerShareCDCompBin.ShareCdInfoMapEntry
	659, // 606: proto.GCGPlayerBriefBin.profile_picture:type_name -> proto.ProfilePictureBin
	649, // 607: proto.GCGPlayerBriefBin.card_face_map:type_name -> proto.GCGPlayerBriefBin.CardFaceMapEntry
	504, // 608: proto.GCGGameBriefBin.player_brief_bin_list:type_name -> proto.GCGPlayerBriefBin
	506, // 609: proto.GCGDeckSystemBin.deck_list:type_name -> proto.GCGDSDeckBin
	507, // 610: proto.GCGDeckSystemBin.card_list:type_name -> proto.GCGDSCardBin
	509, // 611: proto.GCGTavernBin.tavern_challenge_bin_list:type_name -> proto.GCGTCTavernChallengeBin
	511, // 612: proto.GCGBasicBin.match_bin_list:type_name -> proto.GCGMatchBin
	513, // 613: proto.GCGLevelChallengeBin.level_bin_list:type_name -> proto.GCGLevelBin
	514, // 614: proto.GCGLevelChallengeBin.unlock_boss_challenge_list:type_name -> proto.GCGBossChallengeBin
	515, // 615: proto.GCGLevelChallengeBin.guide_group_bin_list:type_name -> proto.GCGGuideGroupBin
	517, // 616: proto.GCGTavernSceneBuilderBin.const_npc_list:type_name -> proto.GCGConstNpcBin
	519, // 617: proto.GCGWeekChallengeBin.week_npc_list:type_name -> proto.GCGWeekNpcBin
	508, // 618: proto.PlayerGCGCompBin.deck_system_bin:type_name -> proto.GCGDeckSystemBin
	510, // 619: proto.PlayerGCGCompBin.tavern_bin:type_name -> proto.GCGTavernBin
	512, // 620: proto.PlayerGCGCompBin.basic_bin:type_name -> proto.GCGBasicBin
	516, // 621: proto.PlayerGCGCompBin.level_challenge_bin:type_name -> proto.GCGLevelChallengeBin
	518, // 622: proto.PlayerGCGCompBin.tavern_scene_builder_bin:type_name -> proto.GCGTavernSceneBuilderBin
	520, // 623: proto.PlayerGCGCompBin.week_challenge_bin:type_name -> proto.GCGWeekChallengeBin
	505, // 624: proto.PlayerGCGCompBin.game_brief_bin:type_name -> proto.GCGGameBriefBin
	650, // 625: proto.AranaraCollectionSuiteBin.state_collection_map:type_name -> proto.AranaraCollectionSuiteBin.StateCollectionMapEntry
	523, // 626: proto.PlayerAranaraCollectionCompBin.collection_suite_list:type_name -> proto.AranaraCollectionSuiteBin
	1,   // 627: proto.PlayerDataBin.basic_bin:type_name -> proto.PlayerBasicCompBin
	18,  // 628: proto.PlayerDataBin.avatar_bin:type_name -> proto.PlayerAvatarCompBin
	46,  // 629: proto.PlayerDataBin.quest_bin:type_name -> proto.PlayerQuestCompBin
	336, // 630: proto.PlayerDataBin.shop_bin:type_name -> proto.PlayerShopCompBin
	71,  // 631: proto.PlayerDataBin.item_bin:type_name -> proto.PlayerItemCompBin
	78,  // 632: proto.PlayerDataBin.dungeon_bin:type_name -> proto.PlayerDungeonCompBin
	33,  // 633: proto.PlayerDataBin.scene_bin:type_name -> proto.PlayerSceneCompBin
	79,  // 634: proto.PlayerDataBin.bored_bin:type_name -> proto.PlayerBoredCompBin
	80,  // 635: proto.PlayerDataBin.mp_bin:type_name -> proto.PlayerMpCompBin
	84,  // 636: proto.PlayerDataBin.cook_bin:type_name -> proto.PlayerCookCompBin
	333, // 637: proto.PlayerDataBin.mail_bin:type_name -> proto.PlayerMailCompBin
	85,  // 638: proto.PlayerDataBin.login_bin:type_name -> proto.PlayerLoginCompBin
	87,  // 639: proto.PlayerDataBin.offline_msg_bin:type_name -> proto.PlayerOfflineMsgCompBin
	91,  // 640: proto.PlayerDataBin.daily_task_bin:type_name -> proto.PlayerDailyTaskCompBin
	92,  // 641: proto.PlayerDataBin.rand_task_bin:type_name -> proto.PlayerRandTaskCompBin
	342, // 642: proto.PlayerDataBin.gacha_bin:type_name -> proto.PlayerGachaCompBin
	344, // 643: proto.PlayerDataBin.giving_bin:type_name -> proto.PlayerGivingCompBin
	346, // 644: proto.PlayerDataBin.forge_bin:type_name -> proto.PlayerForgeCompBin
	94,  // 645: proto.PlayerDataBin.investigation_bin:type_name -> proto.PlayerInvestigationCompBin
	331, // 646: proto.PlayerDataBin.activity_bin:type_name -> proto.PlayerActivityCompBin
	351, // 647: proto.PlayerDataBin.watcher_bin:type_name -> proto.PlayerWatcherCompBin
	363, // 648: proto.PlayerDataBin.tower_bin:type_name -> proto.PlayerTowerCompBin
	370, // 649: proto.PlayerDataBin.sign_in_bin:type_name -> proto.PlayerSignInCompBin
	384, // 650: proto.PlayerDataBin.battle_pass_bin:type_name -> proto.PlayerBattlePassCompBin
	367, // 651: proto.PlayerDataBin.blossom_bin:type_name -> proto.PlayerBlossomCompBin
	380, // 652: proto.PlayerDataBin.recharge_bin:type_name -> proto.PlayerRechargeCompBin
	389, // 653: proto.PlayerDataBin.mp_play_bin:type_name -> proto.PlayerMpPlayCompBin
	386, // 654: proto.PlayerDataBin.social_bin:type_name -> proto.PlayerSocialCompBin
	391, // 655: proto.PlayerDataBin.codex_bin:type_name -> proto.PlayerCodexCompBin
	393, // 656: proto.PlayerDataBin.achievement_bin:type_name -> proto.PlayerAchievementCompBin
	395, // 657: proto.PlayerDataBin.trial_avatar_bin:type_name -> proto.PlayerTrialAvatarCompBin
	394, // 658: proto.PlayerDataBin.personal_line_bin:type_name -> proto.PlayerPersonalLineCompBin
	401, // 659: proto.PlayerDataBin.reputation_bin:type_name -> proto.PlayerReputationCompBin
	414, // 660: proto.PlayerDataBin.widget_comp_bin:type_name -> proto.PlayerWidgetCompBin
	398, // 661: proto.PlayerDataBin.hunting_bin:type_name -> proto.PlayerHuntingCompBin
	417, // 662: proto.PlayerDataBin.scene_play_bin:type_name -> proto.PlayerScenePlayCompBin
	347, // 663: proto.PlayerDataBin.combine_bin:type_name -> proto.PlayerCombineCompBin
	422, // 664: proto.PlayerDataBin.coop_bin:type_name -> proto.PlayerCoopCompBin
	424, // 665: proto.PlayerDataBin.offering_bin:type_name -> proto.PlayerOfferingCompBin
	432, // 666: proto.PlayerDataBin.routine_bin:type_name -> proto.PlayerRoutineCompBin
	429, // 667: proto.PlayerDataBin.reunion_bin:type_name -> proto.PlayerReunionCompBin
	434, // 668: proto.PlayerDataBin.miracle_ring_bin:type_name -> proto.PlayerMiracleRingCompBin
	436, // 669: proto.PlayerDataBin.mechanicus_bin:type_name -> proto.PlayerMechanicusCompBin
	438, // 670: proto.PlayerDataBin.op_activity_bin:type_name -> proto.PlayerOpActivityCompBin
	439, // 671: proto.PlayerDataBin.gallery_bin:type_name -> proto.PlayerGalleryCompBin
	444, // 672: proto.PlayerDataBin.region_search_bin:type_name -> proto.PlayerRegionSearchCompBin
	445, // 673: proto.PlayerDataBin.talk_bin:type_name -> proto.PlayerTalkCompBin
	481, // 674: proto.PlayerDataBin.home_bin:type_name -> proto.PlayerHomeCompBin
	482, // 675: proto.PlayerDataBin.offline_op_bin:type_name -> proto.PlayerOfflineOpBin
	485, // 676: proto.PlayerDataBin.h5_activity_bin:type_name -> proto.PlayerH5ActivityCompBin
	487, // 677: proto.PlayerDataBin.match_bin:type_name -> proto.PlayerMatchCompBin
	489, // 678: proto.PlayerDataBin.exhibition_bin:type_name -> proto.PlayerExhibitionCompBin
	493, // 679: proto.PlayerDataBin.group_link_bin:type_name -> proto.PlayerGroupLinkCompBin
	446, // 680: proto.PlayerDataBin.fishing_bin:type_name -> proto.PlayerFishingCompBin
	498, // 681: proto.PlayerDataBin.city_bin:type_name -> proto.PlayerCityCompBin
	497, // 682: proto.PlayerDataBin.fireworks_bin:type_name -> proto.PlayerFireworksCompBin
	501, // 683: proto.PlayerDataBin.regional_play_bin:type_name -> proto.PlayerRegionalPlayCompBin
	450, // 684: proto.PlayerDataBin.custom_dungeon_bin:type_name -> proto.PlayerCustomDungeonCompBin
	503, // 685: proto.PlayerDataBin.share_cd_bin:type_name -> proto.PlayerShareCDCompBin
	452, // 686: proto.PlayerDataBin.ugc_bin:type_name -> proto.PlayerUgcCompBin
	524, // 687: proto.PlayerDataBin.aranara_collection_bin:type_name -> proto.PlayerAranaraCollectionCompBin
	521, // 688: proto.PlayerDataBin.gcg_bin:type_name -> proto.PlayerGCGCompBin
	651, // 689: proto.PlayerExtraBinData.anti_offline_data_map:type_name -> proto.PlayerExtraBinData.AntiOfflineDataMapEntry
	2,   // 690: proto.AvatarBin.SkillMapEntry.value:type_name -> proto.AvatarSkillBin
	3,   // 691: proto.AvatarBin.BuffMapEntry.value:type_name -> proto.AvatarBuffBin
	6,   // 692: proto.AvatarBin.DepotMapEntry.value:type_name -> proto.AvatarSkillDepotBin
	15,  // 693: proto.PlayerAvatarCompBin.TeamMapEntry.value:type_name -> proto.AvatarTeamBin
	3,   // 694: proto.PlayerAvatarCompBin.AvatarTeamBuffMapEntry.value:type_name -> proto.AvatarBuffBin
	653, // 695: proto.WorldBin.SceneMapEntry.value:type_name -> proto.SceneBin
	672, // 696: proto.SceneProductBin.GroupProductMapEntry.value:type_name -> proto.GroupProductBin
	20,  // 697: proto.DungeonProductBin.SceneProductMapEntry.value:type_name -> proto.SceneProductBin
	23,  // 698: proto.SceneBossChestBin.GroupBossChestMapEntry.value:type_name -> proto.GroupBossChestBin
	20,  // 699: proto.PlayerSceneCompBin.WorldProductMapEntry.value:type_name -> proto.SceneProductBin
	24,  // 700: proto.PlayerSceneCompBin.SceneBossChestMapEntry.value:type_name -> proto.SceneBossChestBin
	25,  // 701: proto.PlayerSceneCompBin.SubfieldDropMapEntry.value:type_name -> proto.SubfieldDropBin
	21,  // 702: proto.PlayerSceneCompBin.DungeonProductMapEntry.value:type_name -> proto.DungeonProductBin
	58,  // 703: proto.PlayerItemCompBin.OutputControlRecordMapEntry.value:type_name -> proto.OutputControlRecordBin
	73,  // 704: proto.PlayerDungeonRecordBin.DungeonDailyMapEntry.value:type_name -> proto.DungeonRecordBin
	75,  // 705: proto.PlayerDungeonRecordBin.DungeonDurableMapEntry.value:type_name -> proto.DungeonDurableRecordBin
	74,  // 706: proto.PlayerDungeonRecordBin.DungeonRandomMapEntry.value:type_name -> proto.DungeonRandomRecordBin
	77,  // 707: proto.PlayerDungeonCompBin.SerialBossChestMapEntry.value:type_name -> proto.DungeonSerialBossChestBin
	83,  // 708: proto.PlayerCookCompBin.RecipeDataMapEntry.value:type_name -> proto.CookRecipeDataBin
	82,  // 709: proto.PlayerCookCompBin.CompoundQueBinMapEntry.value:type_name -> proto.CompoundQueueBin
	673, // 710: proto.PlayerDailyTaskCompBin.TaskVarMapEntry.value:type_name -> proto.Int32List
	128, // 711: proto.FleurFairMusicBin.MusicGameRecordMapEntry.value:type_name -> proto.FleurFairMusicRecordBin
	130, // 712: proto.FleurFairScheduleBin.MinigameMapEntry.value:type_name -> proto.FleurFairMinigameBin
	131, // 713: proto.FleurFairScheduleBin.DungeonSectionMapEntry.value:type_name -> proto.FleurFairDungeonSectionDataBin
	148, // 714: proto.SummerTimeScheduleBin.StageBinMapEntry.value:type_name -> proto.SummerTimeStageBin
	176, // 715: proto.MusicGameScheduleBin.MusicGameRecordMapEntry.value:type_name -> proto.MusicGameRecordBin
	188, // 716: proto.RogueDungeonBin.RogueCellBinMapEntry.value:type_name -> proto.RogueCellBin
	191, // 717: proto.RogueStageBin.FinishChallengeBinMapEntry.value:type_name -> proto.RogueFinishChallengeBin
	202, // 718: proto.HachiScheduleBin.StageBinMapEntry.value:type_name -> proto.HachiStageBin
	284, // 719: proto.VintagePresentStageDataBin.PresentLevelMapEntry.value:type_name -> proto.VintagePresentLevelDataBin
	287, // 720: proto.VintageCampChallengeStageDataBin.CampLevelMapEntry.value:type_name -> proto.VintageCampChallengeLevelDataBin
	283, // 721: proto.VintageScheduleBin.HuntingStageMapEntry.value:type_name -> proto.VintageHuntingStageDataBin
	285, // 722: proto.VintageScheduleBin.PresentStageMapEntry.value:type_name -> proto.VintagePresentStageDataBin
	288, // 723: proto.VintageScheduleBin.CampStageMapEntry.value:type_name -> proto.VintageCampChallengeStageDataBin
	654, // 724: proto.VintageScheduleBin.DividendResMapEntry.value:type_name -> proto.Uint32PairBin
	330, // 725: proto.PlayerActivityCompBin.ActivityBinMapEntry.value:type_name -> proto.ActivityBin
	662, // 726: proto.PlayerMailCompBin.WaitAddMailMapEntry.value:type_name -> proto.MailBin
	662, // 727: proto.PlayerMailCompBin.NewWaitAddMailMapEntry.value:type_name -> proto.MailBin
	339, // 728: proto.GachaRecordBin.GachaGuaranteeMapEntry.value:type_name -> proto.GachaGuaranteeDataBin
	337, // 729: proto.GachaRecordBin.GachaItemTypeDataMapEntry.value:type_name -> proto.GachaItemTypeDataBin
	338, // 730: proto.GachaRecordBin.GachaItemParentTypeDataMapEntry.value:type_name -> proto.GachaItemParentTypeDataBin
	340, // 731: proto.GachaRecordBin.GachaUpDataMapEntry.value:type_name -> proto.GachaUpDataBin
	341, // 732: proto.PlayerGachaCompBin.GachaRecordMapEntry.value:type_name -> proto.GachaRecordBin
	343, // 733: proto.PlayerGivingCompBin.GivingRecordMapEntry.value:type_name -> proto.GivingRecordBin
	345, // 734: proto.PlayerForgeCompBin.ForgeQueueMapEntry.value:type_name -> proto.ForgeQueueBin
	355, // 735: proto.TowerCurLevelRecordBin.AvatarRecordMapEntry.value:type_name -> proto.TowerAvatarRecordBin
	357, // 736: proto.PlayerTowerCompBin.DailyLevelBuffMapEntry.value:type_name -> proto.TowerLevelBuffListBin
	362, // 737: proto.PlayerTowerCompBin.TowerMonthlySummaryMapEntry.value:type_name -> proto.TowerMonthlySummaryBin
	366, // 738: proto.PlayerBlossomCompBin.InitialSectionMapEntry.value:type_name -> proto.BlossomInitialSectionDataBin
	365, // 739: proto.PlayerBlossomCompBin.RefreshDataMapEntry.value:type_name -> proto.BlossomRefreshDataBin
	418, // 740: proto.CoopProgressBin.MainCoopMapEntry.value:type_name -> proto.MainCoopBin
	451, // 741: proto.PlayerUgcCompBin.UgcBinMapEntry.value:type_name -> proto.UgcBin
	674, // 742: proto.PlayerCityCompBin.CityMapEntry.value:type_name -> proto.CityBin
	502, // 743: proto.PlayerShareCDCompBin.ShareCdInfoMapEntry.value:type_name -> proto.ShareCDInfoBin
	522, // 744: proto.AranaraCollectionSuiteBin.StateCollectionMapEntry.value:type_name -> proto.AranaraCollectionListBin
	387, // 745: proto.PlayerExtraBinData.AntiOfflineDataMapEntry.value:type_name -> proto.SecurityAntiOfflineDataBin
	746, // [746:746] is the sub-list for method output_type
	746, // [746:746] is the sub-list for method input_type
	746, // [746:746] is the sub-list for extension type_name
	746, // [746:746] is the sub-list for extension extendee
	0,   // [0:746] is the sub-list for field type_name
}

func init() { file_server_only_bin_server_proto_init() }
func file_server_only_bin_server_proto_init() {
	if File_server_only_bin_server_proto != nil {
		return
	}
	file_server_only_bin_common_server_proto_init()
	file_server_only_bin_home_proto_init()
	file_define_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_server_only_bin_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerBasicCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarSkillBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarBuffBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarFetterBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarExpeditionBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarSkillDepotBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarEquipAffixBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarExtraPropBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarSnapshotBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialAvatarGrantRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormalAvatarBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialAvatarBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MirrorAvatarBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarTeamBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarRenameAuditBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarRenameBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerAvatarCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorldBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneProductBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonProductBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapMarkPointBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupBossChestBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneBossChestBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubfieldDropBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonsterBeKilledNumBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapAreaInfoBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonsterBeCapturedNumBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LevelTagChangeBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LevelTagBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistentDungeonSceneBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeshretObeliskBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSceneCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestContentBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestTalkRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQuestBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParentQuestRandomInfoBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParentQuestInferenceWordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParentQuestBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerParentQuestBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChapterBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerChapterBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestGlobalVarBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorldQuestBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQuestCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialDeleteBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FurnitureBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackItemStoreBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemStoreBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoRecoverItemBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemLimitCountRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemLimitRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialDeleteReturnRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputControlRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopGoodsOutputRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopOutputRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleBonusRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BonusRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemLimitRefreshRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReliquaryLevelupNumRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipLevelupRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReliquarySuitBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityOutputIndexRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityOutputControlRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReliquaryMainPropGuaranteeDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReliquaryGuaranteeDepotBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerItemCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonGroupRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonRandomRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonDurableRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDungeonRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonSerialBossChestBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDungeonCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerBoredCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerMpCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundOutputBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundQueueBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CookRecipeDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerCookCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerLoginCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineMsgExeBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerOfflineMsgCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyTaskInfoBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyTaskCycleQuestBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyTaskCityCycleQuestsBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDailyTaskCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerRandTaskCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvestigationBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInvestigationCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampSectionBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampScheduleDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrucibleBattleUidBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrucibleScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialAvatarActivityRewardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialAvatarScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesmanScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsterLittleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsterMidBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsterLargeBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsterProgressBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsterScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightDailyRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DragonSpineChapterBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DragonSpineBanDropSubject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DragonSpineScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffigyDailyRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffigyScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureMapRegionBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureMapBonusChallengeBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureMapScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesmanMpScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpeditionPathDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpeditionAssistRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpeditionChallengeDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpeditionScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlessingScanEntityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlessingRecvPicData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlessingScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairBalloonBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairFallBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairMusicRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairMusicBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairMinigameBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairDungeonSectionDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArenaChallengeSchduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaterSpiritScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabChallengeBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabBuffSchemeBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabAssistBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabBuffDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabLoopDungeonDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabLoopDungeonStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MistTrialBestAvatarBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MistTrialLevelBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MistTrialScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideAndSeekScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHilichurlScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeSprintBoatBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BounceConjuringChapterBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BounceConjuringScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuoyantCombatDailyRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuoyantCombatScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeDungeonBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoShellScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlitzRushStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlitzRushParkourLevelRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlitzRushScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumoAvatarBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumoTeamBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumoStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumoScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LunaRiteHintPointBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LunaRiteAreaBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LunaRiteScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoonfinTrialLevelRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoonfinTrialScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerRecvFlowerDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeModuleUsedActivityItemDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeUsedActivityItemDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerSeedPlantDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerShelfDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MusicGameRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MusicGameUgcSaveBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MusicGameUgcSearchBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MusicGameUgcPlayBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MusicGameScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeShikigamiBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeDungeonRuneBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeDungeonCardBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeDungeonCurseBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeDungeonDynamicSGVBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeMiscBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueTeamBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueCellBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueGadgetPointBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueDungeonBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueFinishChallengeBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeDungeonScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampDropBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampExploreBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampBattleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampRaceBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampRecvItemBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampHomeUsedItemBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampSnowmanUsedItemBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HachiStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HachiScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotionLevelBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotionStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotionScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TanukiTravelLevelBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TanukiTravelScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalvageBundleChallengeBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalvageScoreChallengeBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalvageChallengeBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanternSalvageStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanternRiteProjectionLevelBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanternRiteProjectionBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanternRiteFireworksChallengeBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanternRiteFireworksStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanternRiteFireworksBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanternRiteScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MichiaeMatsuriStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MichiaeMatsuriScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BartenderTaskBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BartenderLevelBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BartenderScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriChessMapBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriChessLevelBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriChessBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriFlowerShelfBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriFlowerBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriPoetryThemeBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriPoetryBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriMasterLevelDetailBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriMasterLevelBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrystalLinkBuffBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrystalLinkAvatarBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrystalLinkTeamBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrystalLinkLevelBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrystalLinkScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoPosBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpiceStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpiceScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityRecvGiftBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityGiftDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuminanceStoneChallengeScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueDiaryStageRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueDiaryStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueDiaryRoomConfigPairBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueDiaryAvtarBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueDiaryProgressBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueDiaryScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeV2DungeonStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeV2BoatStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeV2ScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IslandPartyStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IslandPartyScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JigsawPictureDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocencePhotoStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocencePhotoObjectBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocencePhotoBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocenceCampStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocenceCampBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocenceRaceLevelBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocenceRaceBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocenceCarveStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocenceCarveUsedItemBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocenceCarveBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocenceScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstableSprayStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstableSprayScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstableSprayAvatarInfoBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstableSprayTeamInfoBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuqadasPotionLevelDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuqadasPotionScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureSeelieRegionBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureSeelieScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RockBoardExploreStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RockBoardExploreScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageHuntingStageDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintagePresentLevelDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintagePresentStageDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageBoothUsedItemDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageCampChallengeLevelDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageCampChallengeStageDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageTraderDealBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageBargainBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageStoreAttrRandomPoolBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageStoreBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageNpcEventBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindFieldScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindFieldStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityGeneralCoinBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusPlotStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusTrainingDungeonBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusFighterMonsterBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusTrainingShapshotDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusTrainingProgressBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusFighterScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharAmusementStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharAmusementScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffigyChallengeV2LevelBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffigyChallengeV2ScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinCollectTeamInfoBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinCollectLevelBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinCollectScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerLevelBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamChainStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamChainScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectroherculesBattleLevelBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectroherculesBattleStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectroherculesBattleScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampV3RaceLevelBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampV3RaceBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampV3ShadowLevelBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampV3ShadowStageBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampV3ShadowBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampV3ScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuelHeartDifficultyBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuelHeartLevelBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuelheartScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerActivityCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerMailBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerMailCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopGoodsRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerShopCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaItemTypeDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaItemParentTypeDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaGuaranteeDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaUpDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGachaCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GivingRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGivingCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForgeQueueBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerForgeCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerCombineCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatcherBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushTipsBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordValueBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerWatcherCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerTeamBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerLevelRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerFloorRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerAvatarRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerCurLevelRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerLevelBuffListBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerFloorLevelBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerFightStatisticBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerFightSummaryPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerMonthlyCombatSummaryBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerMonthlySummaryBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerTowerCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlossomCircleCampDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlossomRefreshDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlossomInitialSectionDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerBlossomCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BonusActivityRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSignInCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*McoinProductConfigBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardProductConfigBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleGiftCardProductBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcertProductBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppleGiftCardProductBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PsnCompensationProductBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderFinishNotifyItemBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderFinishNotifyBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderNotifySaveBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerRechargeCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePassRewardTagBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePassScheduleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePassMissionBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerBattlePassCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEmojiCollectionBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSocialCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityAntiOfflineDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MpPlayBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerMpPlayCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodexTypeDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerCodexCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[391].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AchievementBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[392].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerAchievementCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[393].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerPersonalLineCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[394].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerTrialAvatarCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[395].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HuntingOfferDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[396].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HuntingOfferPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[397].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerHuntingCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[398].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityReputationRequestBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[399].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityReputationBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[400].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerReputationCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[401].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidgetAnchorPointBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[402].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidgetLunchBoxBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[403].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidgetOneoffGatherPointDetectorBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[404].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidgetClientCollectorBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[405].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidgetCoolDownInfoBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[406].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachAvatarWidgetBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[407].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidgetCaptureAnimalBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[408].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidgetLightStoneBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[409].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidgetBackgroundBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[410].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidgetWeatherWizardBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[411].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidgetDetailBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[412].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidgetBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[413].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerWidgetCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[414].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlaySourceBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[415].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlayBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[416].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerScenePlayCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[417].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainCoopBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[418].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoopPointBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[419].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoopChapterBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[420].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoopProgressBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[421].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerCoopCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[422].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerOfferingInfoBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[423].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerOfferingCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[424].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReunionSignInBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[425].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReunionMissionBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[426].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReunionPrivilegeBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[427].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReunionRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[428].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerReunionCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[429].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerRoutineBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[430].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerRoutineTypeBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[431].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerRoutineCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[432].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiracleRingDropParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[433].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerMiracleRingCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[434].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MechanicusBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[435].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerMechanicusCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[436].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpActivityRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[437].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerOpActivityCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[438].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGalleryCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[439].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionSearchSourceBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[440].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionSearchRegionBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[441].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionSearchBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[442].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionSearchPlayBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[443].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerRegionSearchCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[444].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerTalkCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[445].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerFishingCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[446].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDungeonBriefBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[447].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfficialCustomDungeonBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[448].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDungeonBattleRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[449].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerCustomDungeonCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[450].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UgcBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[451].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerUgcCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[452].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerHomeBlockBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[453].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerHomeSceneBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[454].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerHomeModuleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[455].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeBasicCompSnapshotBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[456].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeSubFieldSnapShotBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[457].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeFieldSnapShotBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[458].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeTransferSnapShotBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[459].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeMarkPointNPCDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[460].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeMarkPointSuiteDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[461].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeMarkPointFurnitureDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[462].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeSceneSnapshotBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[463].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeModuleSnapshotBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[464].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeSceneCompSnapshotBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[465].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeSnapshotBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[466].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FurnitureMakeBeHelpedBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[467].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FurnitureMakeHelpBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[468].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FurnitureMakeTimesBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[469].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerFunitureMakeBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[470].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerLimitedShopNPCPosBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[471].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerHomeLimitedShopBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[472].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeResourceBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[473].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerHomeResourceBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[474].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeAvatarDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[475].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeAvatarRewardEventBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[476].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerHomeAvatarBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[477].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeWorldWoodExchangeDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[478].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerHomeBlueprintSlotBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[479].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerHomeBlueprintBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[480].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerHomeCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[481].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerOfflineOpBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[482].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*H5ActivityWatcherBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[483].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*H5ActivityBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[484].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerH5ActivityCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[485].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchPunishBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[486].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerMatchCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[487].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerExhibitionBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[488].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerExhibitionCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[489].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGroupLinkBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[490].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGroupBundleBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[491].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGroupBundleFinishBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[492].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGroupLinkCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[493].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireworksParamBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[494].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireworksReformBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[495].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireworksLaunchSchemeBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[496].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerFireworksCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[497].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerCityCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[498].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionalPlayVarBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[499].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeathZoneBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[500].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerRegionalPlayCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[501].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareCDInfoBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[502].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerShareCDCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[503].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGPlayerBriefBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[504].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGGameBriefBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[505].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSDeckBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[506].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSCardBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[507].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDeckSystemBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[508].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGTCTavernChallengeBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[509].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGTavernBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[510].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMatchBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[511].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGBasicBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[512].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGLevelBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[513].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGBossChallengeBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[514].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGGuideGroupBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[515].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGLevelChallengeBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[516].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGConstNpcBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[517].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGTavernSceneBuilderBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[518].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGWeekNpcBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[519].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGWeekChallengeBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[520].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGCGCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[521].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AranaraCollectionListBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[522].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AranaraCollectionSuiteBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[523].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerAranaraCollectionCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[524].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[525].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerJsonData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[526].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerExtJsonData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[527].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerExtraBinData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[528].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerBeforeLoginBinData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[529].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[530].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentAuditBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[622].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatcherBin_Var); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_bin_server_proto_msgTypes[640].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MpPlayBin_UidWorldLevelBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_server_only_bin_server_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*AvatarBin_FormalAvatar)(nil),
		(*AvatarBin_TrialAvatar)(nil),
		(*AvatarBin_MirrorAvatar)(nil),
	}
	file_server_only_bin_server_proto_msgTypes[46].OneofWrappers = []interface{}{
		(*EquipBin_Reliquary)(nil),
		(*EquipBin_Weapon)(nil),
	}
	file_server_only_bin_server_proto_msgTypes[50].OneofWrappers = []interface{}{
		(*ItemBin_Material)(nil),
		(*ItemBin_Equip)(nil),
		(*ItemBin_Furniture)(nil),
	}
	file_server_only_bin_server_proto_msgTypes[52].OneofWrappers = []interface{}{
		(*ItemStoreBin_PackStore)(nil),
	}
	file_server_only_bin_server_proto_msgTypes[129].OneofWrappers = []interface{}{
		(*FleurFairMinigameBin_BalloonBin)(nil),
		(*FleurFairMinigameBin_FallBin)(nil),
		(*FleurFairMinigameBin_MusicBin)(nil),
	}
	file_server_only_bin_server_proto_msgTypes[210].OneofWrappers = []interface{}{
		(*SalvageChallengeBin_BundleInfo)(nil),
		(*SalvageChallengeBin_ScoreChallengeInfo)(nil),
		(*SalvageChallengeBin_BossChallengeId)(nil),
	}
	file_server_only_bin_server_proto_msgTypes[328].OneofWrappers = []interface{}{
		(*ActivityScheduleBin_SalesmanScheduleBin)(nil),
		(*ActivityScheduleBin_TrialAvatarBin)(nil),
		(*ActivityScheduleBin_DeliveryBin)(nil),
		(*ActivityScheduleBin_CrucibleBin)(nil),
		(*ActivityScheduleBin_AsterBin)(nil),
		(*ActivityScheduleBin_FlightBin)(nil),
		(*ActivityScheduleBin_DragonSpineBin)(nil),
		(*ActivityScheduleBin_EffigyBin)(nil),
		(*ActivityScheduleBin_TreasureMapBin)(nil),
		(*ActivityScheduleBin_SalesmanMpBin)(nil),
		(*ActivityScheduleBin_BlessingBin)(nil),
		(*ActivityScheduleBin_SeaLampBin)(nil),
		(*ActivityScheduleBin_ExpeditionBin)(nil),
		(*ActivityScheduleBin_FleurFairBin)(nil),
		(*ActivityScheduleBin_ArenaChallengeBin)(nil),
		(*ActivityScheduleBin_WaterSpiritBin)(nil),
		(*ActivityScheduleBin_ChannellerSlabBin)(nil),
		(*ActivityScheduleBin_HideAndSeekBin)(nil),
		(*ActivityScheduleBin_MistTrialBin)(nil),
		(*ActivityScheduleBin_FindHilichurlBin)(nil),
		(*ActivityScheduleBin_SummerTimeBin)(nil),
		(*ActivityScheduleBin_BuoyantCombatBin)(nil),
		(*ActivityScheduleBin_BounceConjuringBin)(nil),
		(*ActivityScheduleBin_EchoShellBin)(nil),
		(*ActivityScheduleBin_BlitzRushBin)(nil),
		(*ActivityScheduleBin_ChessBin)(nil),
		(*ActivityScheduleBin_SumoBin)(nil),
		(*ActivityScheduleBin_LunaRiteBin)(nil),
		(*ActivityScheduleBin_MoonfinTrialBin)(nil),
		(*ActivityScheduleBin_PlantFlowerBin)(nil),
		(*ActivityScheduleBin_MusicGameBin)(nil),
		(*ActivityScheduleBin_RoguelikeDungeonBin)(nil),
		(*ActivityScheduleBin_WinterCampBin)(nil),
		(*ActivityScheduleBin_HachiBin)(nil),
		(*ActivityScheduleBin_TanukiTravelBin)(nil),
		(*ActivityScheduleBin_LanternRiteBin)(nil),
		(*ActivityScheduleBin_PotionBin)(nil),
		(*ActivityScheduleBin_MichiaeMatsuriBin)(nil),
		(*ActivityScheduleBin_BartenderBin)(nil),
		(*ActivityScheduleBin_IrodoriBin)(nil),
		(*ActivityScheduleBin_CrystalLinkBin)(nil),
		(*ActivityScheduleBin_PhotoBin)(nil),
		(*ActivityScheduleBin_SpiceBin)(nil),
		(*ActivityScheduleBin_GachaBin)(nil),
		(*ActivityScheduleBin_LuminanceStoneChallengeBin)(nil),
		(*ActivityScheduleBin_RogueDiaryBin)(nil),
		(*ActivityScheduleBin_SummerTimeV2Bin)(nil),
		(*ActivityScheduleBin_IslandPartyBin)(nil),
		(*ActivityScheduleBin_GearBin)(nil),
		(*ActivityScheduleBin_GravenInnocenceBin)(nil),
		(*ActivityScheduleBin_InstableSprayBin)(nil),
		(*ActivityScheduleBin_MuqadasPotionBin)(nil),
		(*ActivityScheduleBin_TreasureSeelieBin)(nil),
		(*ActivityScheduleBin_RockBoardExploreBin)(nil),
		(*ActivityScheduleBin_VintageBin)(nil),
		(*ActivityScheduleBin_WindFieldBin)(nil),
		(*ActivityScheduleBin_FungusFighterBin)(nil),
		(*ActivityScheduleBin_CharAmusementBin)(nil),
		(*ActivityScheduleBin_EffigyChallengeBin)(nil),
		(*ActivityScheduleBin_CoinCollectBin)(nil),
		(*ActivityScheduleBin_BrickBreakerBin)(nil),
		(*ActivityScheduleBin_SeaLampV3Bin)(nil),
		(*ActivityScheduleBin_TeamChainBin)(nil),
		(*ActivityScheduleBin_DuelHeartBin)(nil),
		(*ActivityScheduleBin_ElectroherculesBattleBin)(nil),
	}
	file_server_only_bin_server_proto_msgTypes[411].OneofWrappers = []interface{}{
		(*WidgetDetailBin_AttachAvatarWidget)(nil),
		(*WidgetDetailBin_OneoffGatherPointDetector)(nil),
		(*WidgetDetailBin_ClientCollector)(nil),
		(*WidgetDetailBin_CaptureAnimal)(nil),
		(*WidgetDetailBin_LightStone)(nil),
		(*WidgetDetailBin_BackgroundWidget)(nil),
		(*WidgetDetailBin_WeatherWizard)(nil),
	}
	file_server_only_bin_server_proto_msgTypes[461].OneofWrappers = []interface{}{
		(*HomeMarkPointFurnitureDataBin_NpcData)(nil),
		(*HomeMarkPointFurnitureDataBin_SuiteData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_only_bin_server_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   651,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_server_only_bin_server_proto_goTypes,
		DependencyIndexes: file_server_only_bin_server_proto_depIdxs,
		EnumInfos:         file_server_only_bin_server_proto_enumTypes,
		MessageInfos:      file_server_only_bin_server_proto_msgTypes,
	}.Build()
	File_server_only_bin_server_proto = out.File
	file_server_only_bin_server_proto_rawDesc = nil
	file_server_only_bin_server_proto_goTypes = nil
	file_server_only_bin_server_proto_depIdxs = nil
}
