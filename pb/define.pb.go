// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: define.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ENetReason int32

const (
	ENetReason_ENET_TIMEOUT                   ENetReason = 0
	ENetReason_ENET_CLIENT_CLOSE              ENetReason = 1
	ENetReason_ENET_CLIENT_REBIND_FAIL        ENetReason = 2
	ENetReason_ENET_CLIENT_SHUTDOWN           ENetReason = 3
	ENetReason_ENET_SERVER_RELOGIN            ENetReason = 4
	ENetReason_ENET_SERVER_KICK               ENetReason = 5
	ENetReason_ENET_SERVER_SHUTDOWN           ENetReason = 6
	ENetReason_ENET_NOT_FOUND_SESSION         ENetReason = 7
	ENetReason_ENET_LOGIN_UNFINISHED          ENetReason = 8
	ENetReason_ENET_PACKET_FREQ_TOO_HIGH      ENetReason = 9
	ENetReason_ENET_PING_TIMEOUT              ENetReason = 10
	ENetReason_ENET_TRANFER_FAILED            ENetReason = 11
	ENetReason_ENET_SERVER_KILL_CLIENT        ENetReason = 12
	ENetReason_ENET_CHECK_MOVE_SPEED          ENetReason = 13
	ENetReason_ENET_ACCOUNT_PASSWORD_CHANGE   ENetReason = 14
	ENetReason_ENET_SECURITY_KICK             ENetReason = 15
	ENetReason_ENET_LUA_SHELL_TIMEOUT         ENetReason = 16
	ENetReason_ENET_SDKFAIL_KICK              ENetReason = 17
	ENetReason_ENET_PACKET_COST_TIME          ENetReason = 18
	ENetReason_ENET_PACKET_UNION_FREQ         ENetReason = 19
	ENetReason_ENET_WAIT_SND_MAX              ENetReason = 20
	ENetReason_ENET_CLIENT_CONNECT_KEY        ENetReason = 1234567890
	ENetReason_ENET_CLIENT_EDITOR_CONNECT_KEY ENetReason = 987654321
)

// Enum value maps for ENetReason.
var (
	ENetReason_name = map[int32]string{
		0:          "ENET_TIMEOUT",
		1:          "ENET_CLIENT_CLOSE",
		2:          "ENET_CLIENT_REBIND_FAIL",
		3:          "ENET_CLIENT_SHUTDOWN",
		4:          "ENET_SERVER_RELOGIN",
		5:          "ENET_SERVER_KICK",
		6:          "ENET_SERVER_SHUTDOWN",
		7:          "ENET_NOT_FOUND_SESSION",
		8:          "ENET_LOGIN_UNFINISHED",
		9:          "ENET_PACKET_FREQ_TOO_HIGH",
		10:         "ENET_PING_TIMEOUT",
		11:         "ENET_TRANFER_FAILED",
		12:         "ENET_SERVER_KILL_CLIENT",
		13:         "ENET_CHECK_MOVE_SPEED",
		14:         "ENET_ACCOUNT_PASSWORD_CHANGE",
		15:         "ENET_SECURITY_KICK",
		16:         "ENET_LUA_SHELL_TIMEOUT",
		17:         "ENET_SDKFAIL_KICK",
		18:         "ENET_PACKET_COST_TIME",
		19:         "ENET_PACKET_UNION_FREQ",
		20:         "ENET_WAIT_SND_MAX",
		1234567890: "ENET_CLIENT_CONNECT_KEY",
		987654321:  "ENET_CLIENT_EDITOR_CONNECT_KEY",
	}
	ENetReason_value = map[string]int32{
		"ENET_TIMEOUT":                   0,
		"ENET_CLIENT_CLOSE":              1,
		"ENET_CLIENT_REBIND_FAIL":        2,
		"ENET_CLIENT_SHUTDOWN":           3,
		"ENET_SERVER_RELOGIN":            4,
		"ENET_SERVER_KICK":               5,
		"ENET_SERVER_SHUTDOWN":           6,
		"ENET_NOT_FOUND_SESSION":         7,
		"ENET_LOGIN_UNFINISHED":          8,
		"ENET_PACKET_FREQ_TOO_HIGH":      9,
		"ENET_PING_TIMEOUT":              10,
		"ENET_TRANFER_FAILED":            11,
		"ENET_SERVER_KILL_CLIENT":        12,
		"ENET_CHECK_MOVE_SPEED":          13,
		"ENET_ACCOUNT_PASSWORD_CHANGE":   14,
		"ENET_SECURITY_KICK":             15,
		"ENET_LUA_SHELL_TIMEOUT":         16,
		"ENET_SDKFAIL_KICK":              17,
		"ENET_PACKET_COST_TIME":          18,
		"ENET_PACKET_UNION_FREQ":         19,
		"ENET_WAIT_SND_MAX":              20,
		"ENET_CLIENT_CONNECT_KEY":        1234567890,
		"ENET_CLIENT_EDITOR_CONNECT_KEY": 987654321,
	}
)

func (x ENetReason) Enum() *ENetReason {
	p := new(ENetReason)
	*p = x
	return p
}

func (x ENetReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENetReason) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[0].Descriptor()
}

func (ENetReason) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[0]
}

func (x ENetReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENetReason.Descriptor instead.
func (ENetReason) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{0}
}

type AccountType int32

const (
	AccountType_ACCOUNT_MIHOYO_GUEST AccountType = 0
	AccountType_ACCOUNT_MIHOYO       AccountType = 1
	AccountType_ACCOUNT_XIAOMI       AccountType = 11
	AccountType_ACCOUNT_COOLPAD      AccountType = 12
	AccountType_ACCOUNT_YYB          AccountType = 13
	AccountType_ACCOUNT_BILI         AccountType = 14
	AccountType_ACCOUNT_HUAWEI       AccountType = 15
	AccountType_ACCOUNT_MEIZU        AccountType = 16
	AccountType_ACCOUNT_360          AccountType = 17
	AccountType_ACCOUNT_OPPO         AccountType = 18
	AccountType_ACCOUNT_VIVO         AccountType = 19
	AccountType_ACCOUNT_UC           AccountType = 20
	AccountType_ACCOUNT_WANDOJIA     AccountType = 21
	AccountType_ACCOUNT_LENOVO       AccountType = 22
	AccountType_ACCOUNT_JINLI        AccountType = 23
	AccountType_ACCOUNT_BAIDU        AccountType = 25
	AccountType_ACCOUNT_DANGLE       AccountType = 26
)

// Enum value maps for AccountType.
var (
	AccountType_name = map[int32]string{
		0:  "ACCOUNT_MIHOYO_GUEST",
		1:  "ACCOUNT_MIHOYO",
		11: "ACCOUNT_XIAOMI",
		12: "ACCOUNT_COOLPAD",
		13: "ACCOUNT_YYB",
		14: "ACCOUNT_BILI",
		15: "ACCOUNT_HUAWEI",
		16: "ACCOUNT_MEIZU",
		17: "ACCOUNT_360",
		18: "ACCOUNT_OPPO",
		19: "ACCOUNT_VIVO",
		20: "ACCOUNT_UC",
		21: "ACCOUNT_WANDOJIA",
		22: "ACCOUNT_LENOVO",
		23: "ACCOUNT_JINLI",
		25: "ACCOUNT_BAIDU",
		26: "ACCOUNT_DANGLE",
	}
	AccountType_value = map[string]int32{
		"ACCOUNT_MIHOYO_GUEST": 0,
		"ACCOUNT_MIHOYO":       1,
		"ACCOUNT_XIAOMI":       11,
		"ACCOUNT_COOLPAD":      12,
		"ACCOUNT_YYB":          13,
		"ACCOUNT_BILI":         14,
		"ACCOUNT_HUAWEI":       15,
		"ACCOUNT_MEIZU":        16,
		"ACCOUNT_360":          17,
		"ACCOUNT_OPPO":         18,
		"ACCOUNT_VIVO":         19,
		"ACCOUNT_UC":           20,
		"ACCOUNT_WANDOJIA":     21,
		"ACCOUNT_LENOVO":       22,
		"ACCOUNT_JINLI":        23,
		"ACCOUNT_BAIDU":        25,
		"ACCOUNT_DANGLE":       26,
	}
)

func (x AccountType) Enum() *AccountType {
	p := new(AccountType)
	*p = x
	return p
}

func (x AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[1].Descriptor()
}

func (AccountType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[1]
}

func (x AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountType.Descriptor instead.
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{1}
}

type ChannelIdType int32

const (
	ChannelIdType_CHANNEL_ID_NONE    ChannelIdType = 0
	ChannelIdType_CHANNEL_ID_MIHOYO  ChannelIdType = 1
	ChannelIdType_CHANNEL_ID_XIAOMI  ChannelIdType = 11
	ChannelIdType_CHANNEL_ID_COOLPAD ChannelIdType = 12
	ChannelIdType_CHANNEL_ID_YYB     ChannelIdType = 13
	ChannelIdType_CHANNEL_ID_BILI    ChannelIdType = 14
	ChannelIdType_CHANNEL_ID_HUAWEI  ChannelIdType = 15
	ChannelIdType_CHANNEL_ID_MEIZU   ChannelIdType = 16
	ChannelIdType_CHANNEL_ID_360     ChannelIdType = 17
	ChannelIdType_CHANNEL_ID_OPPO    ChannelIdType = 18
	ChannelIdType_CHANNEL_ID_VIVO    ChannelIdType = 19
	ChannelIdType_CHANNEL_ID_UC      ChannelIdType = 20
	ChannelIdType_CHANNEL_ID_LENOVO  ChannelIdType = 22
	ChannelIdType_CHANNEL_ID_JINLI   ChannelIdType = 23
	ChannelIdType_CHANNEL_ID_BAIDU   ChannelIdType = 25
	ChannelIdType_CHANNEL_ID_DANGLE  ChannelIdType = 26
)

// Enum value maps for ChannelIdType.
var (
	ChannelIdType_name = map[int32]string{
		0:  "CHANNEL_ID_NONE",
		1:  "CHANNEL_ID_MIHOYO",
		11: "CHANNEL_ID_XIAOMI",
		12: "CHANNEL_ID_COOLPAD",
		13: "CHANNEL_ID_YYB",
		14: "CHANNEL_ID_BILI",
		15: "CHANNEL_ID_HUAWEI",
		16: "CHANNEL_ID_MEIZU",
		17: "CHANNEL_ID_360",
		18: "CHANNEL_ID_OPPO",
		19: "CHANNEL_ID_VIVO",
		20: "CHANNEL_ID_UC",
		22: "CHANNEL_ID_LENOVO",
		23: "CHANNEL_ID_JINLI",
		25: "CHANNEL_ID_BAIDU",
		26: "CHANNEL_ID_DANGLE",
	}
	ChannelIdType_value = map[string]int32{
		"CHANNEL_ID_NONE":    0,
		"CHANNEL_ID_MIHOYO":  1,
		"CHANNEL_ID_XIAOMI":  11,
		"CHANNEL_ID_COOLPAD": 12,
		"CHANNEL_ID_YYB":     13,
		"CHANNEL_ID_BILI":    14,
		"CHANNEL_ID_HUAWEI":  15,
		"CHANNEL_ID_MEIZU":   16,
		"CHANNEL_ID_360":     17,
		"CHANNEL_ID_OPPO":    18,
		"CHANNEL_ID_VIVO":    19,
		"CHANNEL_ID_UC":      20,
		"CHANNEL_ID_LENOVO":  22,
		"CHANNEL_ID_JINLI":   23,
		"CHANNEL_ID_BAIDU":   25,
		"CHANNEL_ID_DANGLE":  26,
	}
)

func (x ChannelIdType) Enum() *ChannelIdType {
	p := new(ChannelIdType)
	*p = x
	return p
}

func (x ChannelIdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelIdType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[2].Descriptor()
}

func (ChannelIdType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[2]
}

func (x ChannelIdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelIdType.Descriptor instead.
func (ChannelIdType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{2}
}

type ServiceType int32

const (
	ServiceType_SERVICE_NONE        ServiceType = 0
	ServiceType_SERVICE_CLIENT      ServiceType = 1
	ServiceType_SERVICE_GATE        ServiceType = 2
	ServiceType_SERVICE_GAME        ServiceType = 3
	ServiceType_SERVICE_NODE        ServiceType = 4
	ServiceType_SERVICE_DB          ServiceType = 5
	ServiceType_SERVICE_SNS         ServiceType = 6
	ServiceType_SERVICE_DISPATCH    ServiceType = 7
	ServiceType_SERVICE_MUIP        ServiceType = 8
	ServiceType_SERVICE_OFFLINE_MSG ServiceType = 9
	ServiceType_SERVICE_MAIL        ServiceType = 10
	ServiceType_SERVICE_MP          ServiceType = 11
	ServiceType_SERVICE_HTTPPROXY   ServiceType = 12
	ServiceType_SERVICE_ACTIVITY    ServiceType = 13
	ServiceType_SERVICE_PATHFINDING ServiceType = 14
	ServiceType_SERVICE_SOCIAL      ServiceType = 15
	ServiceType_SERVICE_OA          ServiceType = 16
	ServiceType_SERVICE_MATCH       ServiceType = 17
	ServiceType_SERVICE_OFFLINE_OP  ServiceType = 18
	ServiceType_SERVICE_TOTHEMOON   ServiceType = 19
	ServiceType_SERVICE_GCG         ServiceType = 20
)

// Enum value maps for ServiceType.
var (
	ServiceType_name = map[int32]string{
		0:  "SERVICE_NONE",
		1:  "SERVICE_CLIENT",
		2:  "SERVICE_GATE",
		3:  "SERVICE_GAME",
		4:  "SERVICE_NODE",
		5:  "SERVICE_DB",
		6:  "SERVICE_SNS",
		7:  "SERVICE_DISPATCH",
		8:  "SERVICE_MUIP",
		9:  "SERVICE_OFFLINE_MSG",
		10: "SERVICE_MAIL",
		11: "SERVICE_MP",
		12: "SERVICE_HTTPPROXY",
		13: "SERVICE_ACTIVITY",
		14: "SERVICE_PATHFINDING",
		15: "SERVICE_SOCIAL",
		16: "SERVICE_OA",
		17: "SERVICE_MATCH",
		18: "SERVICE_OFFLINE_OP",
		19: "SERVICE_TOTHEMOON",
		20: "SERVICE_GCG",
	}
	ServiceType_value = map[string]int32{
		"SERVICE_NONE":        0,
		"SERVICE_CLIENT":      1,
		"SERVICE_GATE":        2,
		"SERVICE_GAME":        3,
		"SERVICE_NODE":        4,
		"SERVICE_DB":          5,
		"SERVICE_SNS":         6,
		"SERVICE_DISPATCH":    7,
		"SERVICE_MUIP":        8,
		"SERVICE_OFFLINE_MSG": 9,
		"SERVICE_MAIL":        10,
		"SERVICE_MP":          11,
		"SERVICE_HTTPPROXY":   12,
		"SERVICE_ACTIVITY":    13,
		"SERVICE_PATHFINDING": 14,
		"SERVICE_SOCIAL":      15,
		"SERVICE_OA":          16,
		"SERVICE_MATCH":       17,
		"SERVICE_OFFLINE_OP":  18,
		"SERVICE_TOTHEMOON":   19,
		"SERVICE_GCG":         20,
	}
)

func (x ServiceType) Enum() *ServiceType {
	p := new(ServiceType)
	*p = x
	return p
}

func (x ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[3].Descriptor()
}

func (ServiceType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[3]
}

func (x ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceType.Descriptor instead.
func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{3}
}

type ClientType int32

const (
	ClientType_CLIENT_PRODUCT ClientType = 0
	ClientType_CLIENT_DEV     ClientType = 1
)

// Enum value maps for ClientType.
var (
	ClientType_name = map[int32]string{
		0: "CLIENT_PRODUCT",
		1: "CLIENT_DEV",
	}
	ClientType_value = map[string]int32{
		"CLIENT_PRODUCT": 0,
		"CLIENT_DEV":     1,
	}
)

func (x ClientType) Enum() *ClientType {
	p := new(ClientType)
	*p = x
	return p
}

func (x ClientType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[4].Descriptor()
}

func (ClientType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[4]
}

func (x ClientType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientType.Descriptor instead.
func (ClientType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{4}
}

type RegionType int32

const (
	RegionType_REGION_PRODUCT RegionType = 0
	RegionType_REGION_EXAM    RegionType = 1
	RegionType_REGION_DEV_PUB RegionType = 2
	RegionType_REGION_DEV_PRI RegionType = 3
)

// Enum value maps for RegionType.
var (
	RegionType_name = map[int32]string{
		0: "REGION_PRODUCT",
		1: "REGION_EXAM",
		2: "REGION_DEV_PUB",
		3: "REGION_DEV_PRI",
	}
	RegionType_value = map[string]int32{
		"REGION_PRODUCT": 0,
		"REGION_EXAM":    1,
		"REGION_DEV_PUB": 2,
		"REGION_DEV_PRI": 3,
	}
)

func (x RegionType) Enum() *RegionType {
	p := new(RegionType)
	*p = x
	return p
}

func (x RegionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegionType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[5].Descriptor()
}

func (RegionType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[5]
}

func (x RegionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegionType.Descriptor instead.
func (RegionType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{5}
}

type ActionReasonType int32

const (
	ActionReasonType_ACTION_REASON_NONE                                           ActionReasonType = 0
	ActionReasonType_ACTION_REASON_QUEST_ITEM                                     ActionReasonType = 1
	ActionReasonType_ACTION_REASON_QUEST_REWARD                                   ActionReasonType = 2
	ActionReasonType_ACTION_REASON_TRIFLE                                         ActionReasonType = 3
	ActionReasonType_ACTION_REASON_SHOP                                           ActionReasonType = 4
	ActionReasonType_ACTION_REASON_PLAYER_UPGRADE_REWARD                          ActionReasonType = 5
	ActionReasonType_ACTION_REASON_ADD_AVATAR                                     ActionReasonType = 6
	ActionReasonType_ACTION_REASON_GADGET_ENV_ANIMAL                              ActionReasonType = 7
	ActionReasonType_ACTION_REASON_MONSTER_ENV_ANIMAL                             ActionReasonType = 8
	ActionReasonType_ACTION_REASON_COMPOUND                                       ActionReasonType = 9
	ActionReasonType_ACTION_REASON_COOK                                           ActionReasonType = 10
	ActionReasonType_ACTION_REASON_GATHER                                         ActionReasonType = 11
	ActionReasonType_ACTION_REASON_MAIL_ATTACHMENT                                ActionReasonType = 12
	ActionReasonType_ACTION_REASON_CITY_LEVELUP_RETURN                            ActionReasonType = 15
	ActionReasonType_ACTION_REASON_CITY_LEVELUP_REWARD                            ActionReasonType = 17
	ActionReasonType_ACTION_REASON_AREA_EXPLORE_REWARD                            ActionReasonType = 18
	ActionReasonType_ACTION_REASON_UNLOCK_POINT_REWARD                            ActionReasonType = 19
	ActionReasonType_ACTION_REASON_DUNGEON_FIRST_PASS                             ActionReasonType = 20
	ActionReasonType_ACTION_REASON_DUNGEON_PASS                                   ActionReasonType = 21
	ActionReasonType_ACTION_REASON_CHANGE_ELEM_TYPE                               ActionReasonType = 23
	ActionReasonType_ACTION_REASON_FETTER_OPEN                                    ActionReasonType = 25
	ActionReasonType_ACTION_REASON_DAILY_TASK_SCORE                               ActionReasonType = 26
	ActionReasonType_ACTION_REASON_DAILY_TASK_HOST                                ActionReasonType = 27
	ActionReasonType_ACTION_REASON_RAND_TASK_HOST                                 ActionReasonType = 28
	ActionReasonType_ACTION_REASON_EXPEDITION                                     ActionReasonType = 29
	ActionReasonType_ACTION_REASON_GACHA                                          ActionReasonType = 30
	ActionReasonType_ACTION_REASON_COMBINE                                        ActionReasonType = 31
	ActionReasonType_ACTION_REASON_RAND_TASK_GUEST                                ActionReasonType = 32
	ActionReasonType_ACTION_REASON_DAILY_TASK_GUEST                               ActionReasonType = 33
	ActionReasonType_ACTION_REASON_FORGE_OUTPUT                                   ActionReasonType = 34
	ActionReasonType_ACTION_REASON_FORGE_RETURN                                   ActionReasonType = 35
	ActionReasonType_ACTION_REASON_INIT_AVATAR                                    ActionReasonType = 36
	ActionReasonType_ACTION_REASON_MONSTER_DIE                                    ActionReasonType = 37
	ActionReasonType_ACTION_REASON_GM                                             ActionReasonType = 38
	ActionReasonType_ACTION_REASON_OPEN_CHEST                                     ActionReasonType = 39
	ActionReasonType_ACTION_REASON_GADGET_DIE                                     ActionReasonType = 40
	ActionReasonType_ACTION_REASON_MONSTER_CHANGE_HP                              ActionReasonType = 41
	ActionReasonType_ACTION_REASON_SUBFIELD_DROP                                  ActionReasonType = 42
	ActionReasonType_ACTION_REASON_PUSH_TIPS_REWARD                               ActionReasonType = 43
	ActionReasonType_ACTION_REASON_ACTIVITY_MONSTER_DROP                          ActionReasonType = 44
	ActionReasonType_ACTION_REASON_ACTIVITY_GATHER                                ActionReasonType = 45
	ActionReasonType_ACTION_REASON_ACTIVITY_SUBFIELD_DROP                         ActionReasonType = 46
	ActionReasonType_ACTION_REASON_TOWER_SCHEDULE_REWARD                          ActionReasonType = 47
	ActionReasonType_ACTION_REASON_TOWER_FLOOR_STAR_REWARD                        ActionReasonType = 48
	ActionReasonType_ACTION_REASON_TOWER_FIRST_PASS_REWARD                        ActionReasonType = 49
	ActionReasonType_ACTION_REASON_TOWER_DAILY_REWARD                             ActionReasonType = 50
	ActionReasonType_ACTION_REASON_HIT_CLIENT_TRIVIAL_ENTITY                      ActionReasonType = 51
	ActionReasonType_ACTION_REASON_OPEN_WORLD_BOSS_CHEST                          ActionReasonType = 52
	ActionReasonType_ACTION_REASON_MATERIAL_DELETE_RETURN                         ActionReasonType = 53
	ActionReasonType_ACTION_REASON_SIGN_IN_REWARD                                 ActionReasonType = 54
	ActionReasonType_ACTION_REASON_OPEN_BLOSSOM_CHEST                             ActionReasonType = 55
	ActionReasonType_ACTION_REASON_RECHARGE                                       ActionReasonType = 56
	ActionReasonType_ACTION_REASON_BONUS_ACTIVITY_REWARD                          ActionReasonType = 57
	ActionReasonType_ACTION_REASON_TOWER_COMMEMORATIVE_REWARD                     ActionReasonType = 58
	ActionReasonType_ACTION_REASON_TOWER_SKIP_FLOOR_REWARD                        ActionReasonType = 59
	ActionReasonType_ACTION_REASON_RECHARGE_BONUS                                 ActionReasonType = 60
	ActionReasonType_ACTION_REASON_RECHARGE_CARD                                  ActionReasonType = 61
	ActionReasonType_ACTION_REASON_RECHARGE_CARD_DAILY                            ActionReasonType = 62
	ActionReasonType_ACTION_REASON_RECHARGE_CARD_REPLACE                          ActionReasonType = 63
	ActionReasonType_ACTION_REASON_RECHARGE_CARD_REPLACE_FREE                     ActionReasonType = 64
	ActionReasonType_ACTION_REASON_RECHARGE_PLAY_REPLACE                          ActionReasonType = 65
	ActionReasonType_ACTION_REASON_MP_PLAY_TAKE_REWARD                            ActionReasonType = 66
	ActionReasonType_ACTION_REASON_ACTIVITY_WATCHER                               ActionReasonType = 67
	ActionReasonType_ACTION_REASON_SALESMAN_DELIVER_ITEM                          ActionReasonType = 68
	ActionReasonType_ACTION_REASON_SALESMAN_REWARD                                ActionReasonType = 69
	ActionReasonType_ACTION_REASON_REBATE                                         ActionReasonType = 70
	ActionReasonType_ACTION_REASON_MCOIN_EXCHANGE_HCOIN                           ActionReasonType = 71
	ActionReasonType_ACTION_REASON_DAILY_TASK_EXCHANGE_LEGENDARY_KEY              ActionReasonType = 72
	ActionReasonType_ACTION_REASON_UNLOCK_PERSON_LINE                             ActionReasonType = 73
	ActionReasonType_ACTION_REASON_FETTER_LEVEL_REWARD                            ActionReasonType = 74
	ActionReasonType_ACTION_REASON_BUY_RESIN                                      ActionReasonType = 75
	ActionReasonType_ACTION_REASON_RECHARGE_PACKAGE                               ActionReasonType = 76
	ActionReasonType_ACTION_REASON_DELIVERY_DAILY_REWARD                          ActionReasonType = 77
	ActionReasonType_ACTION_REASON_CITY_REPUTATION_LEVEL                          ActionReasonType = 78
	ActionReasonType_ACTION_REASON_CITY_REPUTATION_QUEST                          ActionReasonType = 79
	ActionReasonType_ACTION_REASON_CITY_REPUTATION_REQUEST                        ActionReasonType = 80
	ActionReasonType_ACTION_REASON_CITY_REPUTATION_EXPLORE                        ActionReasonType = 81
	ActionReasonType_ACTION_REASON_OFFERGING_LEVEL                                ActionReasonType = 82
	ActionReasonType_ACTION_REASON_ROUTINE_HOST                                   ActionReasonType = 83
	ActionReasonType_ACTION_REASON_ROUTINE_GUEST                                  ActionReasonType = 84
	ActionReasonType_ACTION_REASON_TREASURE_MAP_SPOT_TOKEN                        ActionReasonType = 89
	ActionReasonType_ACTION_REASON_TREASURE_MAP_BONUS_LEVEL_REWARD                ActionReasonType = 90
	ActionReasonType_ACTION_REASON_TREASURE_MAP_MP_REWARD                         ActionReasonType = 91
	ActionReasonType_ACTION_REASON_CONVERT                                        ActionReasonType = 92
	ActionReasonType_ACTION_REASON_OVERFLOW_TRANSFORM                             ActionReasonType = 93
	ActionReasonType_ACTION_REASON_ACTIVITY_AVATAR_SELECTION_REWARD               ActionReasonType = 96
	ActionReasonType_ACTION_REASON_ACTIVITY_WATCHER_BATCH                         ActionReasonType = 97
	ActionReasonType_ACTION_REASON_HIT_TREE_DROP                                  ActionReasonType = 98
	ActionReasonType_ACTION_REASON_GET_HOME_LEVELUP_REWARD                        ActionReasonType = 99
	ActionReasonType_ACTION_REASON_HOME_DEFAULT_FURNITURE                         ActionReasonType = 100
	ActionReasonType_ACTION_REASON_ACTIVITY_COND                                  ActionReasonType = 101
	ActionReasonType_ACTION_REASON_BATTLE_PASS_NOTIFY                             ActionReasonType = 102
	ActionReasonType_ACTION_REASON_RELIQUARY_DECOMPOSE                            ActionReasonType = 103
	ActionReasonType_ACTION_REASON_RECHARGE_GOOGLE_GIFT_GARD                      ActionReasonType = 104
	ActionReasonType_ACTION_REASON_RECHARGE_CONCERT_PRODUCT                       ActionReasonType = 105
	ActionReasonType_ACTION_REASON_RECHARGE_CONCERT_PRODUCT_REPLACE               ActionReasonType = 106
	ActionReasonType_ACTION_REASON_SEND_CONCERT_PRODUCT_BY_MUIP                   ActionReasonType = 107
	ActionReasonType_ACTION_REASON_RECHARGE_APPLE_GIFT_GARD                       ActionReasonType = 108
	ActionReasonType_ACTION_REASON_RECHARGE_PSN_COMPENSATION_PRODUCT              ActionReasonType = 109
	ActionReasonType_ACTION_REASON_COMPOUND_BOOST                                 ActionReasonType = 110
	ActionReasonType_ACTION_REASON_WOOD_EXCHANGE                                  ActionReasonType = 111
	ActionReasonType_ACTION_REASON_AVATAR_RENAME_AUDIT_FAILED                     ActionReasonType = 112
	ActionReasonType_ACTION_REASON_AVATAR_RENAME_RESET                            ActionReasonType = 113
	ActionReasonType_ACTION_REASON_PLAYER_USE_ITEM                                ActionReasonType = 1001
	ActionReasonType_ACTION_REASON_DROP_ITEM                                      ActionReasonType = 1002
	ActionReasonType_ACTION_REASON_WEAPON_UPGRADE                                 ActionReasonType = 1011
	ActionReasonType_ACTION_REASON_WEAPON_PROMOTE                                 ActionReasonType = 1012
	ActionReasonType_ACTION_REASON_WEAPON_AWAKEN                                  ActionReasonType = 1013
	ActionReasonType_ACTION_REASON_RELIC_UPGRADE                                  ActionReasonType = 1014
	ActionReasonType_ACTION_REASON_ABILITY                                        ActionReasonType = 1015
	ActionReasonType_ACTION_REASON_DUNGEON_STATUE_DROP                            ActionReasonType = 1016
	ActionReasonType_ACTION_REASON_OFFLINE_MSG                                    ActionReasonType = 1017
	ActionReasonType_ACTION_REASON_AVATAR_UPGRADE                                 ActionReasonType = 1018
	ActionReasonType_ACTION_REASON_AVATAR_PROMOTE                                 ActionReasonType = 1019
	ActionReasonType_ACTION_REASON_QUEST_ACTION                                   ActionReasonType = 1021
	ActionReasonType_ACTION_REASON_CITY_LEVELUP                                   ActionReasonType = 1022
	ActionReasonType_ACTION_REASON_UPGRADE_SKILL                                  ActionReasonType = 1024
	ActionReasonType_ACTION_REASON_UNLOCK_TALENT                                  ActionReasonType = 1025
	ActionReasonType_ACTION_REASON_UPGRADE_PROUD_SKILL                            ActionReasonType = 1026
	ActionReasonType_ACTION_REASON_PLAYER_LEVEL_LIMIT_UP                          ActionReasonType = 1027
	ActionReasonType_ACTION_REASON_DUNGEON_DAILY                                  ActionReasonType = 1028
	ActionReasonType_ACTION_REASON_ITEM_GIVING                                    ActionReasonType = 1030
	ActionReasonType_ACTION_REASON_FORGE_COST                                     ActionReasonType = 1031
	ActionReasonType_ACTION_REASON_INVESTIGATION_REWARD                           ActionReasonType = 1032
	ActionReasonType_ACTION_REASON_INVESTIGATION_TARGET_REWARD                    ActionReasonType = 1033
	ActionReasonType_ACTION_REASON_GADGET_INTERACT                                ActionReasonType = 1034
	ActionReasonType_ACTION_REASON_SEA_LAMP_CI_MATERIAL                           ActionReasonType = 1036
	ActionReasonType_ACTION_REASON_SEA_LAMP_CONTRIBUTION_REWARD                   ActionReasonType = 1037
	ActionReasonType_ACTION_REASON_SEA_LAMP_PHASE_REWARD                          ActionReasonType = 1038
	ActionReasonType_ACTION_REASON_SEA_LAMP_FLY_LAMP                              ActionReasonType = 1039
	ActionReasonType_ACTION_REASON_AUTO_RECOVER                                   ActionReasonType = 1040
	ActionReasonType_ACTION_REASON_ACTIVITY_EXPIRE_ITEM                           ActionReasonType = 1041
	ActionReasonType_ACTION_REASON_SUB_COIN_NEGATIVE                              ActionReasonType = 1042
	ActionReasonType_ACTION_REASON_BARGAIN_DEDUCT                                 ActionReasonType = 1043
	ActionReasonType_ACTION_REASON_BATTLE_PASS_PAID_REWARD                        ActionReasonType = 1044
	ActionReasonType_ACTION_REASON_BATTLE_PASS_LEVEL_REWARD                       ActionReasonType = 1045
	ActionReasonType_ACTION_REASON_TRIAL_AVATAR_ACTIVITY_FIRST_PASS_REWARD        ActionReasonType = 1046
	ActionReasonType_ACTION_REASON_BUY_BATTLE_PASS_LEVEL                          ActionReasonType = 1047
	ActionReasonType_ACTION_REASON_GRANT_BIRTHDAY_BENEFIT                         ActionReasonType = 1048
	ActionReasonType_ACTION_REASON_ACHIEVEMENT_REWARD                             ActionReasonType = 1049
	ActionReasonType_ACTION_REASON_ACHIEVEMENT_GOAL_REWARD                        ActionReasonType = 1050
	ActionReasonType_ACTION_REASON_FIRST_SHARE_TO_SOCIAL_NETWORK                  ActionReasonType = 1051
	ActionReasonType_ACTION_REASON_DESTROY_MATERIAL                               ActionReasonType = 1052
	ActionReasonType_ACTION_REASON_CODEX_LEVELUP_REWARD                           ActionReasonType = 1053
	ActionReasonType_ACTION_REASON_HUNTING_OFFER_REWARD                           ActionReasonType = 1054
	ActionReasonType_ACTION_REASON_USE_WIDGET_ANCHOR_POINT                        ActionReasonType = 1055
	ActionReasonType_ACTION_REASON_USE_WIDGET_BONFIRE                             ActionReasonType = 1056
	ActionReasonType_ACTION_REASON_UNGRADE_WEAPON_RETURN_MATERIAL                 ActionReasonType = 1057
	ActionReasonType_ACTION_REASON_USE_WIDGET_ONEOFF_GATHER_POINT_DETECTOR        ActionReasonType = 1058
	ActionReasonType_ACTION_REASON_USE_WIDGET_CLIENT_COLLECTOR                    ActionReasonType = 1059
	ActionReasonType_ACTION_REASON_USE_WIDGET_CLIENT_DETECTOR                     ActionReasonType = 1060
	ActionReasonType_ACTION_REASON_TAKE_GENERAL_REWARD                            ActionReasonType = 1061
	ActionReasonType_ACTION_REASON_ASTER_TAKE_SPECIAL_REWARD                      ActionReasonType = 1062
	ActionReasonType_ACTION_REASON_REMOVE_CODEX_BOOK                              ActionReasonType = 1063
	ActionReasonType_ACTION_REASON_OFFERING_ITEM                                  ActionReasonType = 1064
	ActionReasonType_ACTION_REASON_USE_WIDGET_GADGET_BUILDER                      ActionReasonType = 1065
	ActionReasonType_ACTION_REASON_EFFIGY_FIRST_PASS_REWARD                       ActionReasonType = 1066
	ActionReasonType_ACTION_REASON_EFFIGY_REWARD                                  ActionReasonType = 1067
	ActionReasonType_ACTION_REASON_REUNION_FIRST_GIFT_REWARD                      ActionReasonType = 1068
	ActionReasonType_ACTION_REASON_REUNION_SIGN_IN_REWARD                         ActionReasonType = 1069
	ActionReasonType_ACTION_REASON_REUNION_WATCHER_REWARD                         ActionReasonType = 1070
	ActionReasonType_ACTION_REASON_SALESMAN_MP_REWARD                             ActionReasonType = 1071
	ActionReasonType_ACTION_REASION_AVATAR_PROMOTE_REWARD                         ActionReasonType = 1072
	ActionReasonType_ACTION_REASON_BLESSING_REDEEM_REWARD                         ActionReasonType = 1073
	ActionReasonType_ACTION_MIRACLE_RING_REWARD                                   ActionReasonType = 1074
	ActionReasonType_ACTION_REASON_EXPEDITION_REWARD                              ActionReasonType = 1075
	ActionReasonType_ACTION_REASON_TREASURE_MAP_REMOVE_DETECTOR                   ActionReasonType = 1076
	ActionReasonType_ACTION_REASON_MECHANICUS_DUNGEON_TICKET                      ActionReasonType = 1077
	ActionReasonType_ACTION_REASON_MECHANICUS_LEVELUP_GEAR                        ActionReasonType = 1078
	ActionReasonType_ACTION_REASON_MECHANICUS_BATTLE_SETTLE                       ActionReasonType = 1079
	ActionReasonType_ACTION_REASON_REGION_SEARCH_REWARD                           ActionReasonType = 1080
	ActionReasonType_ACTION_REASON_UNLOCK_COOP_CHAPTER                            ActionReasonType = 1081
	ActionReasonType_ACTION_REASON_TAKE_COOP_REWARD                               ActionReasonType = 1082
	ActionReasonType_ACTION_REASON_FLEUR_FAIR_DUNGEON_REWARD                      ActionReasonType = 1083
	ActionReasonType_ACTION_REASON_ACTIVITY_SCORE                                 ActionReasonType = 1084
	ActionReasonType_ACTION_REASON_CHANNELLER_SLAB_ONEOFF_DUNGEON_REWARD          ActionReasonType = 1085
	ActionReasonType_ACTION_REASON_FURNITURE_MAKE_START                           ActionReasonType = 1086
	ActionReasonType_ACTION_REASON_FURNITURE_MAKE_TAKE                            ActionReasonType = 1087
	ActionReasonType_ACTION_REASON_FURNITURE_MAKE_CANCEL                          ActionReasonType = 1088
	ActionReasonType_ACTION_REASON_FURNITURE_MAKE_FAST_FINISH                     ActionReasonType = 1089
	ActionReasonType_ACTION_REASON_CHANNELLER_SLAB_LOOP_DUNGEON_FIRST_PASS_REWARD ActionReasonType = 1090
	ActionReasonType_ACTION_REASON_CHANNELLER_SLAB_LOOP_DUNGEON_SCORE_REWARD      ActionReasonType = 1091
	ActionReasonType_ACTION_REASON_HOME_LIMITED_SHOP_BUY                          ActionReasonType = 1092
	ActionReasonType_ACTION_REASON_HOME_COIN_COLLECT                              ActionReasonType = 1093
	ActionReasonType_ACTION_REASON_SUMMER_TIME_SENTRY_TOWER_REWARD                ActionReasonType = 1094
	ActionReasonType_ACTION_REASON_SUMMER_TIME_SPRINT_BOAT_REWARD                 ActionReasonType = 1095
	ActionReasonType_ACTION_REASON_SUMMER_TIME_BOSS_REWARD                        ActionReasonType = 1096
	ActionReasonType_ACTION_REASON_SUMMER_TIME_BOMB_REWARD                        ActionReasonType = 1097
	ActionReasonType_ACTION_REASON_HOME_FETTER_COLLECT                            ActionReasonType = 1098
	ActionReasonType_ACTION_REASON_ECHO_SHELL_REWARD                              ActionReasonType = 1099
	ActionReasonType_ACTION_REASON_HOME_EVENT_REWARD                              ActionReasonType = 1100
	ActionReasonType_ACTION_REASON_BLITZ_RUSH_DUNGEON_REWARD                      ActionReasonType = 1101
	ActionReasonType_ACTION_REASON_FURNITURE_MAKE_RETURN                          ActionReasonType = 1102
	ActionReasonType_ACTION_REASON_HOME_PLANT_BOX_GATHER                          ActionReasonType = 1103
	ActionReasonType_ACTION_REASON_HOME_PLANT_SEED                                ActionReasonType = 1104
	ActionReasonType_ACTION_REASON_HOME_PLANT_GATHER                              ActionReasonType = 1105
	ActionReasonType_ACTION_REASON_CHESS_DUNGEON_REWARD                           ActionReasonType = 1106
	ActionReasonType_ACTION_REASON_GROUP_LINK_BUNDLE_FINISH                       ActionReasonType = 1107
	ActionReasonType_ACTION_REASON_LUNA_RITE_SACRIFICE                            ActionReasonType = 1108
	ActionReasonType_ACTION_REASON_LUNA_RITE_TAKE_SACRIFICE_REWARD                ActionReasonType = 1109
	ActionReasonType_ACTION_REASON_FISH_BITE                                      ActionReasonType = 1110
	ActionReasonType_ACTION_REASON_FISH_SUCC                                      ActionReasonType = 1111
	ActionReasonType_ACTION_REASON_PLANT_FLOWER_REWARD                            ActionReasonType = 1112
	ActionReasonType_ACTION_REASON_PLANT_FLOWER_DELIVER_ITEM                      ActionReasonType = 1113
	ActionReasonType_ACTION_REASON_PLANT_FLOWER_GIVE_FLOWER                       ActionReasonType = 1114
	ActionReasonType_ACTION_REASON_PLANT_FLOWER_RECV_FLOWER                       ActionReasonType = 1115
	ActionReasonType_ACTION_REASON_ROGUE_CHALLENGE_SETTLE                         ActionReasonType = 1116
	ActionReasonType_ACTION_REASON_ROGUE_TAKE_FIRST_PASS_REWARD                   ActionReasonType = 1117
	ActionReasonType_ACTION_REASON_ROGUE_UPGRADE_SHIKIGAMI                        ActionReasonType = 1118
	ActionReasonType_ACTION_REASON_ROGUE_REFRESH_CARD                             ActionReasonType = 1119
	ActionReasonType_ACTION_REASON_USE_WIDGET_CAPTURE_ANIMAL                      ActionReasonType = 1120
	ActionReasonType_ACTION_REASON_CAPTURE_ANIMAL_SUCC                            ActionReasonType = 1121
	ActionReasonType_ACTION_REASON_SNOW_DRIFTS                                    ActionReasonType = 1122
	ActionReasonType_ACTION_REASON_WINTER_CAMP_GIVE_ITEM                          ActionReasonType = 1123
	ActionReasonType_ACTION_REASON_WINTER_CAMP_RECV_ITEM                          ActionReasonType = 1124
	ActionReasonType_ACTION_REASON_WINTER_CAMP_EXPLORE_REWARD                     ActionReasonType = 1125
	ActionReasonType_ACTION_REASON_WINTER_CAMP_BATTLE_REWARD                      ActionReasonType = 1126
	ActionReasonType_ACTION_REASON_LANTERN_RITE_SKIN_REWARD                       ActionReasonType = 1127
	ActionReasonType_ACTION_REASON_LANTERN_RITE_DUNGEON_REWARD                    ActionReasonType = 1128
	ActionReasonType_ACTION_REASON_MICHIAE_MATSURI_DARK_CHALLENGE_REWARD          ActionReasonType = 1129
	ActionReasonType_ACTION_REASON_MICHIAE_MATSURI_UNLOCK_CRYSTAL_SKILL           ActionReasonType = 1130
	ActionReasonType_ACTION_REASON_LANTERN_RITE_GROUP_REWARD                      ActionReasonType = 1131
	ActionReasonType_ACTION_REASON_COSTUME_DEFAULT_UNLOCK                         ActionReasonType = 1132
	ActionReasonType_ACTION_REASON_SPICE_ACTIVITY_MAKE_SPICE                      ActionReasonType = 1133
	ActionReasonType_ACTION_REASON_SPICE_ACTIVITY_PROCESS_FOOD                    ActionReasonType = 1134
	ActionReasonType_ACTION_REASON_SPICE_ADD_AVATAR_FETTER                        ActionReasonType = 1135
	ActionReasonType_ACTION_REASON_GACHA_ACTIVITY_ROBOT_REWARD                    ActionReasonType = 1136
	ActionReasonType_ACTION_REASON_GIVING_TAKE_BACK                               ActionReasonType = 1137
	ActionReasonType_ACTION_REASON_SUMMER_TIME_V2_DUNGEON_REWARD                  ActionReasonType = 1138
	ActionReasonType_ACTION_REASON_GRAVEN_INNOCENCE_CAMP_REWARD                   ActionReasonType = 1139
	ActionReasonType_ACTION_REASON_TREASURE_SEELIE_CHEST_REWARD                   ActionReasonType = 1140
	ActionReasonType_ACTION_REASON_GCG_TAVERN_CHALLENGE_UNLOCK_CHARACTER          ActionReasonType = 1141
	ActionReasonType_ACTION_REASON_GCG_LEVEL_REWARD                               ActionReasonType = 1143
	ActionReasonType_ACTION_REASON_GCG_CHALLENGE_FINISH                           ActionReasonType = 1144
	ActionReasonType_ACTION_REASON_VINTAGE_MARKET_DEAL                            ActionReasonType = 1145
	ActionReasonType_ACTION_REASON_VINTAGE_MARKET_BARGAIN                         ActionReasonType = 1146
	ActionReasonType_ACTION_REASON_VINTAGE_MARKET_STORE                           ActionReasonType = 1147
	ActionReasonType_ACTION_REASON_VINTAGE_PRESENT                                ActionReasonType = 1148
	ActionReasonType_ACTION_REASON_VINTAGE_OPEN_STORE                             ActionReasonType = 1149
	ActionReasonType_ACTION_REASON_VINTAGE_STORE_UNLOCK_SLOT                      ActionReasonType = 1150
	ActionReasonType_ACTION_REASON_VINTAGE_STORE_NPC_EVENT                        ActionReasonType = 1151
	ActionReasonType_ACTION_REASON_ROCK_BOARD_EXPLORE_REWARD                      ActionReasonType = 1152
	ActionReasonType_ACTION_REASON_VINTAGE_STORE_DIVIDEND                         ActionReasonType = 1153
	ActionReasonType_ACTION_REASON_AVATAR_RENAME                                  ActionReasonType = 1154
	ActionReasonType_ACTION_REASON_GCG_FINISH_LEVEL_QUEST                         ActionReasonType = 1155
	ActionReasonType_ACTION_REASON_GCG_PROFICIENCY_REWARD                         ActionReasonType = 1156
	ActionReasonType_ACTION_REASON_TEAM_CHAIN_COSTUME_REWARD                      ActionReasonType = 1157
)

// Enum value maps for ActionReasonType.
var (
	ActionReasonType_name = map[int32]string{
		0:    "ACTION_REASON_NONE",
		1:    "ACTION_REASON_QUEST_ITEM",
		2:    "ACTION_REASON_QUEST_REWARD",
		3:    "ACTION_REASON_TRIFLE",
		4:    "ACTION_REASON_SHOP",
		5:    "ACTION_REASON_PLAYER_UPGRADE_REWARD",
		6:    "ACTION_REASON_ADD_AVATAR",
		7:    "ACTION_REASON_GADGET_ENV_ANIMAL",
		8:    "ACTION_REASON_MONSTER_ENV_ANIMAL",
		9:    "ACTION_REASON_COMPOUND",
		10:   "ACTION_REASON_COOK",
		11:   "ACTION_REASON_GATHER",
		12:   "ACTION_REASON_MAIL_ATTACHMENT",
		15:   "ACTION_REASON_CITY_LEVELUP_RETURN",
		17:   "ACTION_REASON_CITY_LEVELUP_REWARD",
		18:   "ACTION_REASON_AREA_EXPLORE_REWARD",
		19:   "ACTION_REASON_UNLOCK_POINT_REWARD",
		20:   "ACTION_REASON_DUNGEON_FIRST_PASS",
		21:   "ACTION_REASON_DUNGEON_PASS",
		23:   "ACTION_REASON_CHANGE_ELEM_TYPE",
		25:   "ACTION_REASON_FETTER_OPEN",
		26:   "ACTION_REASON_DAILY_TASK_SCORE",
		27:   "ACTION_REASON_DAILY_TASK_HOST",
		28:   "ACTION_REASON_RAND_TASK_HOST",
		29:   "ACTION_REASON_EXPEDITION",
		30:   "ACTION_REASON_GACHA",
		31:   "ACTION_REASON_COMBINE",
		32:   "ACTION_REASON_RAND_TASK_GUEST",
		33:   "ACTION_REASON_DAILY_TASK_GUEST",
		34:   "ACTION_REASON_FORGE_OUTPUT",
		35:   "ACTION_REASON_FORGE_RETURN",
		36:   "ACTION_REASON_INIT_AVATAR",
		37:   "ACTION_REASON_MONSTER_DIE",
		38:   "ACTION_REASON_GM",
		39:   "ACTION_REASON_OPEN_CHEST",
		40:   "ACTION_REASON_GADGET_DIE",
		41:   "ACTION_REASON_MONSTER_CHANGE_HP",
		42:   "ACTION_REASON_SUBFIELD_DROP",
		43:   "ACTION_REASON_PUSH_TIPS_REWARD",
		44:   "ACTION_REASON_ACTIVITY_MONSTER_DROP",
		45:   "ACTION_REASON_ACTIVITY_GATHER",
		46:   "ACTION_REASON_ACTIVITY_SUBFIELD_DROP",
		47:   "ACTION_REASON_TOWER_SCHEDULE_REWARD",
		48:   "ACTION_REASON_TOWER_FLOOR_STAR_REWARD",
		49:   "ACTION_REASON_TOWER_FIRST_PASS_REWARD",
		50:   "ACTION_REASON_TOWER_DAILY_REWARD",
		51:   "ACTION_REASON_HIT_CLIENT_TRIVIAL_ENTITY",
		52:   "ACTION_REASON_OPEN_WORLD_BOSS_CHEST",
		53:   "ACTION_REASON_MATERIAL_DELETE_RETURN",
		54:   "ACTION_REASON_SIGN_IN_REWARD",
		55:   "ACTION_REASON_OPEN_BLOSSOM_CHEST",
		56:   "ACTION_REASON_RECHARGE",
		57:   "ACTION_REASON_BONUS_ACTIVITY_REWARD",
		58:   "ACTION_REASON_TOWER_COMMEMORATIVE_REWARD",
		59:   "ACTION_REASON_TOWER_SKIP_FLOOR_REWARD",
		60:   "ACTION_REASON_RECHARGE_BONUS",
		61:   "ACTION_REASON_RECHARGE_CARD",
		62:   "ACTION_REASON_RECHARGE_CARD_DAILY",
		63:   "ACTION_REASON_RECHARGE_CARD_REPLACE",
		64:   "ACTION_REASON_RECHARGE_CARD_REPLACE_FREE",
		65:   "ACTION_REASON_RECHARGE_PLAY_REPLACE",
		66:   "ACTION_REASON_MP_PLAY_TAKE_REWARD",
		67:   "ACTION_REASON_ACTIVITY_WATCHER",
		68:   "ACTION_REASON_SALESMAN_DELIVER_ITEM",
		69:   "ACTION_REASON_SALESMAN_REWARD",
		70:   "ACTION_REASON_REBATE",
		71:   "ACTION_REASON_MCOIN_EXCHANGE_HCOIN",
		72:   "ACTION_REASON_DAILY_TASK_EXCHANGE_LEGENDARY_KEY",
		73:   "ACTION_REASON_UNLOCK_PERSON_LINE",
		74:   "ACTION_REASON_FETTER_LEVEL_REWARD",
		75:   "ACTION_REASON_BUY_RESIN",
		76:   "ACTION_REASON_RECHARGE_PACKAGE",
		77:   "ACTION_REASON_DELIVERY_DAILY_REWARD",
		78:   "ACTION_REASON_CITY_REPUTATION_LEVEL",
		79:   "ACTION_REASON_CITY_REPUTATION_QUEST",
		80:   "ACTION_REASON_CITY_REPUTATION_REQUEST",
		81:   "ACTION_REASON_CITY_REPUTATION_EXPLORE",
		82:   "ACTION_REASON_OFFERGING_LEVEL",
		83:   "ACTION_REASON_ROUTINE_HOST",
		84:   "ACTION_REASON_ROUTINE_GUEST",
		89:   "ACTION_REASON_TREASURE_MAP_SPOT_TOKEN",
		90:   "ACTION_REASON_TREASURE_MAP_BONUS_LEVEL_REWARD",
		91:   "ACTION_REASON_TREASURE_MAP_MP_REWARD",
		92:   "ACTION_REASON_CONVERT",
		93:   "ACTION_REASON_OVERFLOW_TRANSFORM",
		96:   "ACTION_REASON_ACTIVITY_AVATAR_SELECTION_REWARD",
		97:   "ACTION_REASON_ACTIVITY_WATCHER_BATCH",
		98:   "ACTION_REASON_HIT_TREE_DROP",
		99:   "ACTION_REASON_GET_HOME_LEVELUP_REWARD",
		100:  "ACTION_REASON_HOME_DEFAULT_FURNITURE",
		101:  "ACTION_REASON_ACTIVITY_COND",
		102:  "ACTION_REASON_BATTLE_PASS_NOTIFY",
		103:  "ACTION_REASON_RELIQUARY_DECOMPOSE",
		104:  "ACTION_REASON_RECHARGE_GOOGLE_GIFT_GARD",
		105:  "ACTION_REASON_RECHARGE_CONCERT_PRODUCT",
		106:  "ACTION_REASON_RECHARGE_CONCERT_PRODUCT_REPLACE",
		107:  "ACTION_REASON_SEND_CONCERT_PRODUCT_BY_MUIP",
		108:  "ACTION_REASON_RECHARGE_APPLE_GIFT_GARD",
		109:  "ACTION_REASON_RECHARGE_PSN_COMPENSATION_PRODUCT",
		110:  "ACTION_REASON_COMPOUND_BOOST",
		111:  "ACTION_REASON_WOOD_EXCHANGE",
		112:  "ACTION_REASON_AVATAR_RENAME_AUDIT_FAILED",
		113:  "ACTION_REASON_AVATAR_RENAME_RESET",
		1001: "ACTION_REASON_PLAYER_USE_ITEM",
		1002: "ACTION_REASON_DROP_ITEM",
		1011: "ACTION_REASON_WEAPON_UPGRADE",
		1012: "ACTION_REASON_WEAPON_PROMOTE",
		1013: "ACTION_REASON_WEAPON_AWAKEN",
		1014: "ACTION_REASON_RELIC_UPGRADE",
		1015: "ACTION_REASON_ABILITY",
		1016: "ACTION_REASON_DUNGEON_STATUE_DROP",
		1017: "ACTION_REASON_OFFLINE_MSG",
		1018: "ACTION_REASON_AVATAR_UPGRADE",
		1019: "ACTION_REASON_AVATAR_PROMOTE",
		1021: "ACTION_REASON_QUEST_ACTION",
		1022: "ACTION_REASON_CITY_LEVELUP",
		1024: "ACTION_REASON_UPGRADE_SKILL",
		1025: "ACTION_REASON_UNLOCK_TALENT",
		1026: "ACTION_REASON_UPGRADE_PROUD_SKILL",
		1027: "ACTION_REASON_PLAYER_LEVEL_LIMIT_UP",
		1028: "ACTION_REASON_DUNGEON_DAILY",
		1030: "ACTION_REASON_ITEM_GIVING",
		1031: "ACTION_REASON_FORGE_COST",
		1032: "ACTION_REASON_INVESTIGATION_REWARD",
		1033: "ACTION_REASON_INVESTIGATION_TARGET_REWARD",
		1034: "ACTION_REASON_GADGET_INTERACT",
		1036: "ACTION_REASON_SEA_LAMP_CI_MATERIAL",
		1037: "ACTION_REASON_SEA_LAMP_CONTRIBUTION_REWARD",
		1038: "ACTION_REASON_SEA_LAMP_PHASE_REWARD",
		1039: "ACTION_REASON_SEA_LAMP_FLY_LAMP",
		1040: "ACTION_REASON_AUTO_RECOVER",
		1041: "ACTION_REASON_ACTIVITY_EXPIRE_ITEM",
		1042: "ACTION_REASON_SUB_COIN_NEGATIVE",
		1043: "ACTION_REASON_BARGAIN_DEDUCT",
		1044: "ACTION_REASON_BATTLE_PASS_PAID_REWARD",
		1045: "ACTION_REASON_BATTLE_PASS_LEVEL_REWARD",
		1046: "ACTION_REASON_TRIAL_AVATAR_ACTIVITY_FIRST_PASS_REWARD",
		1047: "ACTION_REASON_BUY_BATTLE_PASS_LEVEL",
		1048: "ACTION_REASON_GRANT_BIRTHDAY_BENEFIT",
		1049: "ACTION_REASON_ACHIEVEMENT_REWARD",
		1050: "ACTION_REASON_ACHIEVEMENT_GOAL_REWARD",
		1051: "ACTION_REASON_FIRST_SHARE_TO_SOCIAL_NETWORK",
		1052: "ACTION_REASON_DESTROY_MATERIAL",
		1053: "ACTION_REASON_CODEX_LEVELUP_REWARD",
		1054: "ACTION_REASON_HUNTING_OFFER_REWARD",
		1055: "ACTION_REASON_USE_WIDGET_ANCHOR_POINT",
		1056: "ACTION_REASON_USE_WIDGET_BONFIRE",
		1057: "ACTION_REASON_UNGRADE_WEAPON_RETURN_MATERIAL",
		1058: "ACTION_REASON_USE_WIDGET_ONEOFF_GATHER_POINT_DETECTOR",
		1059: "ACTION_REASON_USE_WIDGET_CLIENT_COLLECTOR",
		1060: "ACTION_REASON_USE_WIDGET_CLIENT_DETECTOR",
		1061: "ACTION_REASON_TAKE_GENERAL_REWARD",
		1062: "ACTION_REASON_ASTER_TAKE_SPECIAL_REWARD",
		1063: "ACTION_REASON_REMOVE_CODEX_BOOK",
		1064: "ACTION_REASON_OFFERING_ITEM",
		1065: "ACTION_REASON_USE_WIDGET_GADGET_BUILDER",
		1066: "ACTION_REASON_EFFIGY_FIRST_PASS_REWARD",
		1067: "ACTION_REASON_EFFIGY_REWARD",
		1068: "ACTION_REASON_REUNION_FIRST_GIFT_REWARD",
		1069: "ACTION_REASON_REUNION_SIGN_IN_REWARD",
		1070: "ACTION_REASON_REUNION_WATCHER_REWARD",
		1071: "ACTION_REASON_SALESMAN_MP_REWARD",
		1072: "ACTION_REASION_AVATAR_PROMOTE_REWARD",
		1073: "ACTION_REASON_BLESSING_REDEEM_REWARD",
		1074: "ACTION_MIRACLE_RING_REWARD",
		1075: "ACTION_REASON_EXPEDITION_REWARD",
		1076: "ACTION_REASON_TREASURE_MAP_REMOVE_DETECTOR",
		1077: "ACTION_REASON_MECHANICUS_DUNGEON_TICKET",
		1078: "ACTION_REASON_MECHANICUS_LEVELUP_GEAR",
		1079: "ACTION_REASON_MECHANICUS_BATTLE_SETTLE",
		1080: "ACTION_REASON_REGION_SEARCH_REWARD",
		1081: "ACTION_REASON_UNLOCK_COOP_CHAPTER",
		1082: "ACTION_REASON_TAKE_COOP_REWARD",
		1083: "ACTION_REASON_FLEUR_FAIR_DUNGEON_REWARD",
		1084: "ACTION_REASON_ACTIVITY_SCORE",
		1085: "ACTION_REASON_CHANNELLER_SLAB_ONEOFF_DUNGEON_REWARD",
		1086: "ACTION_REASON_FURNITURE_MAKE_START",
		1087: "ACTION_REASON_FURNITURE_MAKE_TAKE",
		1088: "ACTION_REASON_FURNITURE_MAKE_CANCEL",
		1089: "ACTION_REASON_FURNITURE_MAKE_FAST_FINISH",
		1090: "ACTION_REASON_CHANNELLER_SLAB_LOOP_DUNGEON_FIRST_PASS_REWARD",
		1091: "ACTION_REASON_CHANNELLER_SLAB_LOOP_DUNGEON_SCORE_REWARD",
		1092: "ACTION_REASON_HOME_LIMITED_SHOP_BUY",
		1093: "ACTION_REASON_HOME_COIN_COLLECT",
		1094: "ACTION_REASON_SUMMER_TIME_SENTRY_TOWER_REWARD",
		1095: "ACTION_REASON_SUMMER_TIME_SPRINT_BOAT_REWARD",
		1096: "ACTION_REASON_SUMMER_TIME_BOSS_REWARD",
		1097: "ACTION_REASON_SUMMER_TIME_BOMB_REWARD",
		1098: "ACTION_REASON_HOME_FETTER_COLLECT",
		1099: "ACTION_REASON_ECHO_SHELL_REWARD",
		1100: "ACTION_REASON_HOME_EVENT_REWARD",
		1101: "ACTION_REASON_BLITZ_RUSH_DUNGEON_REWARD",
		1102: "ACTION_REASON_FURNITURE_MAKE_RETURN",
		1103: "ACTION_REASON_HOME_PLANT_BOX_GATHER",
		1104: "ACTION_REASON_HOME_PLANT_SEED",
		1105: "ACTION_REASON_HOME_PLANT_GATHER",
		1106: "ACTION_REASON_CHESS_DUNGEON_REWARD",
		1107: "ACTION_REASON_GROUP_LINK_BUNDLE_FINISH",
		1108: "ACTION_REASON_LUNA_RITE_SACRIFICE",
		1109: "ACTION_REASON_LUNA_RITE_TAKE_SACRIFICE_REWARD",
		1110: "ACTION_REASON_FISH_BITE",
		1111: "ACTION_REASON_FISH_SUCC",
		1112: "ACTION_REASON_PLANT_FLOWER_REWARD",
		1113: "ACTION_REASON_PLANT_FLOWER_DELIVER_ITEM",
		1114: "ACTION_REASON_PLANT_FLOWER_GIVE_FLOWER",
		1115: "ACTION_REASON_PLANT_FLOWER_RECV_FLOWER",
		1116: "ACTION_REASON_ROGUE_CHALLENGE_SETTLE",
		1117: "ACTION_REASON_ROGUE_TAKE_FIRST_PASS_REWARD",
		1118: "ACTION_REASON_ROGUE_UPGRADE_SHIKIGAMI",
		1119: "ACTION_REASON_ROGUE_REFRESH_CARD",
		1120: "ACTION_REASON_USE_WIDGET_CAPTURE_ANIMAL",
		1121: "ACTION_REASON_CAPTURE_ANIMAL_SUCC",
		1122: "ACTION_REASON_SNOW_DRIFTS",
		1123: "ACTION_REASON_WINTER_CAMP_GIVE_ITEM",
		1124: "ACTION_REASON_WINTER_CAMP_RECV_ITEM",
		1125: "ACTION_REASON_WINTER_CAMP_EXPLORE_REWARD",
		1126: "ACTION_REASON_WINTER_CAMP_BATTLE_REWARD",
		1127: "ACTION_REASON_LANTERN_RITE_SKIN_REWARD",
		1128: "ACTION_REASON_LANTERN_RITE_DUNGEON_REWARD",
		1129: "ACTION_REASON_MICHIAE_MATSURI_DARK_CHALLENGE_REWARD",
		1130: "ACTION_REASON_MICHIAE_MATSURI_UNLOCK_CRYSTAL_SKILL",
		1131: "ACTION_REASON_LANTERN_RITE_GROUP_REWARD",
		1132: "ACTION_REASON_COSTUME_DEFAULT_UNLOCK",
		1133: "ACTION_REASON_SPICE_ACTIVITY_MAKE_SPICE",
		1134: "ACTION_REASON_SPICE_ACTIVITY_PROCESS_FOOD",
		1135: "ACTION_REASON_SPICE_ADD_AVATAR_FETTER",
		1136: "ACTION_REASON_GACHA_ACTIVITY_ROBOT_REWARD",
		1137: "ACTION_REASON_GIVING_TAKE_BACK",
		1138: "ACTION_REASON_SUMMER_TIME_V2_DUNGEON_REWARD",
		1139: "ACTION_REASON_GRAVEN_INNOCENCE_CAMP_REWARD",
		1140: "ACTION_REASON_TREASURE_SEELIE_CHEST_REWARD",
		1141: "ACTION_REASON_GCG_TAVERN_CHALLENGE_UNLOCK_CHARACTER",
		1143: "ACTION_REASON_GCG_LEVEL_REWARD",
		1144: "ACTION_REASON_GCG_CHALLENGE_FINISH",
		1145: "ACTION_REASON_VINTAGE_MARKET_DEAL",
		1146: "ACTION_REASON_VINTAGE_MARKET_BARGAIN",
		1147: "ACTION_REASON_VINTAGE_MARKET_STORE",
		1148: "ACTION_REASON_VINTAGE_PRESENT",
		1149: "ACTION_REASON_VINTAGE_OPEN_STORE",
		1150: "ACTION_REASON_VINTAGE_STORE_UNLOCK_SLOT",
		1151: "ACTION_REASON_VINTAGE_STORE_NPC_EVENT",
		1152: "ACTION_REASON_ROCK_BOARD_EXPLORE_REWARD",
		1153: "ACTION_REASON_VINTAGE_STORE_DIVIDEND",
		1154: "ACTION_REASON_AVATAR_RENAME",
		1155: "ACTION_REASON_GCG_FINISH_LEVEL_QUEST",
		1156: "ACTION_REASON_GCG_PROFICIENCY_REWARD",
		1157: "ACTION_REASON_TEAM_CHAIN_COSTUME_REWARD",
	}
	ActionReasonType_value = map[string]int32{
		"ACTION_REASON_NONE":                                           0,
		"ACTION_REASON_QUEST_ITEM":                                     1,
		"ACTION_REASON_QUEST_REWARD":                                   2,
		"ACTION_REASON_TRIFLE":                                         3,
		"ACTION_REASON_SHOP":                                           4,
		"ACTION_REASON_PLAYER_UPGRADE_REWARD":                          5,
		"ACTION_REASON_ADD_AVATAR":                                     6,
		"ACTION_REASON_GADGET_ENV_ANIMAL":                              7,
		"ACTION_REASON_MONSTER_ENV_ANIMAL":                             8,
		"ACTION_REASON_COMPOUND":                                       9,
		"ACTION_REASON_COOK":                                           10,
		"ACTION_REASON_GATHER":                                         11,
		"ACTION_REASON_MAIL_ATTACHMENT":                                12,
		"ACTION_REASON_CITY_LEVELUP_RETURN":                            15,
		"ACTION_REASON_CITY_LEVELUP_REWARD":                            17,
		"ACTION_REASON_AREA_EXPLORE_REWARD":                            18,
		"ACTION_REASON_UNLOCK_POINT_REWARD":                            19,
		"ACTION_REASON_DUNGEON_FIRST_PASS":                             20,
		"ACTION_REASON_DUNGEON_PASS":                                   21,
		"ACTION_REASON_CHANGE_ELEM_TYPE":                               23,
		"ACTION_REASON_FETTER_OPEN":                                    25,
		"ACTION_REASON_DAILY_TASK_SCORE":                               26,
		"ACTION_REASON_DAILY_TASK_HOST":                                27,
		"ACTION_REASON_RAND_TASK_HOST":                                 28,
		"ACTION_REASON_EXPEDITION":                                     29,
		"ACTION_REASON_GACHA":                                          30,
		"ACTION_REASON_COMBINE":                                        31,
		"ACTION_REASON_RAND_TASK_GUEST":                                32,
		"ACTION_REASON_DAILY_TASK_GUEST":                               33,
		"ACTION_REASON_FORGE_OUTPUT":                                   34,
		"ACTION_REASON_FORGE_RETURN":                                   35,
		"ACTION_REASON_INIT_AVATAR":                                    36,
		"ACTION_REASON_MONSTER_DIE":                                    37,
		"ACTION_REASON_GM":                                             38,
		"ACTION_REASON_OPEN_CHEST":                                     39,
		"ACTION_REASON_GADGET_DIE":                                     40,
		"ACTION_REASON_MONSTER_CHANGE_HP":                              41,
		"ACTION_REASON_SUBFIELD_DROP":                                  42,
		"ACTION_REASON_PUSH_TIPS_REWARD":                               43,
		"ACTION_REASON_ACTIVITY_MONSTER_DROP":                          44,
		"ACTION_REASON_ACTIVITY_GATHER":                                45,
		"ACTION_REASON_ACTIVITY_SUBFIELD_DROP":                         46,
		"ACTION_REASON_TOWER_SCHEDULE_REWARD":                          47,
		"ACTION_REASON_TOWER_FLOOR_STAR_REWARD":                        48,
		"ACTION_REASON_TOWER_FIRST_PASS_REWARD":                        49,
		"ACTION_REASON_TOWER_DAILY_REWARD":                             50,
		"ACTION_REASON_HIT_CLIENT_TRIVIAL_ENTITY":                      51,
		"ACTION_REASON_OPEN_WORLD_BOSS_CHEST":                          52,
		"ACTION_REASON_MATERIAL_DELETE_RETURN":                         53,
		"ACTION_REASON_SIGN_IN_REWARD":                                 54,
		"ACTION_REASON_OPEN_BLOSSOM_CHEST":                             55,
		"ACTION_REASON_RECHARGE":                                       56,
		"ACTION_REASON_BONUS_ACTIVITY_REWARD":                          57,
		"ACTION_REASON_TOWER_COMMEMORATIVE_REWARD":                     58,
		"ACTION_REASON_TOWER_SKIP_FLOOR_REWARD":                        59,
		"ACTION_REASON_RECHARGE_BONUS":                                 60,
		"ACTION_REASON_RECHARGE_CARD":                                  61,
		"ACTION_REASON_RECHARGE_CARD_DAILY":                            62,
		"ACTION_REASON_RECHARGE_CARD_REPLACE":                          63,
		"ACTION_REASON_RECHARGE_CARD_REPLACE_FREE":                     64,
		"ACTION_REASON_RECHARGE_PLAY_REPLACE":                          65,
		"ACTION_REASON_MP_PLAY_TAKE_REWARD":                            66,
		"ACTION_REASON_ACTIVITY_WATCHER":                               67,
		"ACTION_REASON_SALESMAN_DELIVER_ITEM":                          68,
		"ACTION_REASON_SALESMAN_REWARD":                                69,
		"ACTION_REASON_REBATE":                                         70,
		"ACTION_REASON_MCOIN_EXCHANGE_HCOIN":                           71,
		"ACTION_REASON_DAILY_TASK_EXCHANGE_LEGENDARY_KEY":              72,
		"ACTION_REASON_UNLOCK_PERSON_LINE":                             73,
		"ACTION_REASON_FETTER_LEVEL_REWARD":                            74,
		"ACTION_REASON_BUY_RESIN":                                      75,
		"ACTION_REASON_RECHARGE_PACKAGE":                               76,
		"ACTION_REASON_DELIVERY_DAILY_REWARD":                          77,
		"ACTION_REASON_CITY_REPUTATION_LEVEL":                          78,
		"ACTION_REASON_CITY_REPUTATION_QUEST":                          79,
		"ACTION_REASON_CITY_REPUTATION_REQUEST":                        80,
		"ACTION_REASON_CITY_REPUTATION_EXPLORE":                        81,
		"ACTION_REASON_OFFERGING_LEVEL":                                82,
		"ACTION_REASON_ROUTINE_HOST":                                   83,
		"ACTION_REASON_ROUTINE_GUEST":                                  84,
		"ACTION_REASON_TREASURE_MAP_SPOT_TOKEN":                        89,
		"ACTION_REASON_TREASURE_MAP_BONUS_LEVEL_REWARD":                90,
		"ACTION_REASON_TREASURE_MAP_MP_REWARD":                         91,
		"ACTION_REASON_CONVERT":                                        92,
		"ACTION_REASON_OVERFLOW_TRANSFORM":                             93,
		"ACTION_REASON_ACTIVITY_AVATAR_SELECTION_REWARD":               96,
		"ACTION_REASON_ACTIVITY_WATCHER_BATCH":                         97,
		"ACTION_REASON_HIT_TREE_DROP":                                  98,
		"ACTION_REASON_GET_HOME_LEVELUP_REWARD":                        99,
		"ACTION_REASON_HOME_DEFAULT_FURNITURE":                         100,
		"ACTION_REASON_ACTIVITY_COND":                                  101,
		"ACTION_REASON_BATTLE_PASS_NOTIFY":                             102,
		"ACTION_REASON_RELIQUARY_DECOMPOSE":                            103,
		"ACTION_REASON_RECHARGE_GOOGLE_GIFT_GARD":                      104,
		"ACTION_REASON_RECHARGE_CONCERT_PRODUCT":                       105,
		"ACTION_REASON_RECHARGE_CONCERT_PRODUCT_REPLACE":               106,
		"ACTION_REASON_SEND_CONCERT_PRODUCT_BY_MUIP":                   107,
		"ACTION_REASON_RECHARGE_APPLE_GIFT_GARD":                       108,
		"ACTION_REASON_RECHARGE_PSN_COMPENSATION_PRODUCT":              109,
		"ACTION_REASON_COMPOUND_BOOST":                                 110,
		"ACTION_REASON_WOOD_EXCHANGE":                                  111,
		"ACTION_REASON_AVATAR_RENAME_AUDIT_FAILED":                     112,
		"ACTION_REASON_AVATAR_RENAME_RESET":                            113,
		"ACTION_REASON_PLAYER_USE_ITEM":                                1001,
		"ACTION_REASON_DROP_ITEM":                                      1002,
		"ACTION_REASON_WEAPON_UPGRADE":                                 1011,
		"ACTION_REASON_WEAPON_PROMOTE":                                 1012,
		"ACTION_REASON_WEAPON_AWAKEN":                                  1013,
		"ACTION_REASON_RELIC_UPGRADE":                                  1014,
		"ACTION_REASON_ABILITY":                                        1015,
		"ACTION_REASON_DUNGEON_STATUE_DROP":                            1016,
		"ACTION_REASON_OFFLINE_MSG":                                    1017,
		"ACTION_REASON_AVATAR_UPGRADE":                                 1018,
		"ACTION_REASON_AVATAR_PROMOTE":                                 1019,
		"ACTION_REASON_QUEST_ACTION":                                   1021,
		"ACTION_REASON_CITY_LEVELUP":                                   1022,
		"ACTION_REASON_UPGRADE_SKILL":                                  1024,
		"ACTION_REASON_UNLOCK_TALENT":                                  1025,
		"ACTION_REASON_UPGRADE_PROUD_SKILL":                            1026,
		"ACTION_REASON_PLAYER_LEVEL_LIMIT_UP":                          1027,
		"ACTION_REASON_DUNGEON_DAILY":                                  1028,
		"ACTION_REASON_ITEM_GIVING":                                    1030,
		"ACTION_REASON_FORGE_COST":                                     1031,
		"ACTION_REASON_INVESTIGATION_REWARD":                           1032,
		"ACTION_REASON_INVESTIGATION_TARGET_REWARD":                    1033,
		"ACTION_REASON_GADGET_INTERACT":                                1034,
		"ACTION_REASON_SEA_LAMP_CI_MATERIAL":                           1036,
		"ACTION_REASON_SEA_LAMP_CONTRIBUTION_REWARD":                   1037,
		"ACTION_REASON_SEA_LAMP_PHASE_REWARD":                          1038,
		"ACTION_REASON_SEA_LAMP_FLY_LAMP":                              1039,
		"ACTION_REASON_AUTO_RECOVER":                                   1040,
		"ACTION_REASON_ACTIVITY_EXPIRE_ITEM":                           1041,
		"ACTION_REASON_SUB_COIN_NEGATIVE":                              1042,
		"ACTION_REASON_BARGAIN_DEDUCT":                                 1043,
		"ACTION_REASON_BATTLE_PASS_PAID_REWARD":                        1044,
		"ACTION_REASON_BATTLE_PASS_LEVEL_REWARD":                       1045,
		"ACTION_REASON_TRIAL_AVATAR_ACTIVITY_FIRST_PASS_REWARD":        1046,
		"ACTION_REASON_BUY_BATTLE_PASS_LEVEL":                          1047,
		"ACTION_REASON_GRANT_BIRTHDAY_BENEFIT":                         1048,
		"ACTION_REASON_ACHIEVEMENT_REWARD":                             1049,
		"ACTION_REASON_ACHIEVEMENT_GOAL_REWARD":                        1050,
		"ACTION_REASON_FIRST_SHARE_TO_SOCIAL_NETWORK":                  1051,
		"ACTION_REASON_DESTROY_MATERIAL":                               1052,
		"ACTION_REASON_CODEX_LEVELUP_REWARD":                           1053,
		"ACTION_REASON_HUNTING_OFFER_REWARD":                           1054,
		"ACTION_REASON_USE_WIDGET_ANCHOR_POINT":                        1055,
		"ACTION_REASON_USE_WIDGET_BONFIRE":                             1056,
		"ACTION_REASON_UNGRADE_WEAPON_RETURN_MATERIAL":                 1057,
		"ACTION_REASON_USE_WIDGET_ONEOFF_GATHER_POINT_DETECTOR":        1058,
		"ACTION_REASON_USE_WIDGET_CLIENT_COLLECTOR":                    1059,
		"ACTION_REASON_USE_WIDGET_CLIENT_DETECTOR":                     1060,
		"ACTION_REASON_TAKE_GENERAL_REWARD":                            1061,
		"ACTION_REASON_ASTER_TAKE_SPECIAL_REWARD":                      1062,
		"ACTION_REASON_REMOVE_CODEX_BOOK":                              1063,
		"ACTION_REASON_OFFERING_ITEM":                                  1064,
		"ACTION_REASON_USE_WIDGET_GADGET_BUILDER":                      1065,
		"ACTION_REASON_EFFIGY_FIRST_PASS_REWARD":                       1066,
		"ACTION_REASON_EFFIGY_REWARD":                                  1067,
		"ACTION_REASON_REUNION_FIRST_GIFT_REWARD":                      1068,
		"ACTION_REASON_REUNION_SIGN_IN_REWARD":                         1069,
		"ACTION_REASON_REUNION_WATCHER_REWARD":                         1070,
		"ACTION_REASON_SALESMAN_MP_REWARD":                             1071,
		"ACTION_REASION_AVATAR_PROMOTE_REWARD":                         1072,
		"ACTION_REASON_BLESSING_REDEEM_REWARD":                         1073,
		"ACTION_MIRACLE_RING_REWARD":                                   1074,
		"ACTION_REASON_EXPEDITION_REWARD":                              1075,
		"ACTION_REASON_TREASURE_MAP_REMOVE_DETECTOR":                   1076,
		"ACTION_REASON_MECHANICUS_DUNGEON_TICKET":                      1077,
		"ACTION_REASON_MECHANICUS_LEVELUP_GEAR":                        1078,
		"ACTION_REASON_MECHANICUS_BATTLE_SETTLE":                       1079,
		"ACTION_REASON_REGION_SEARCH_REWARD":                           1080,
		"ACTION_REASON_UNLOCK_COOP_CHAPTER":                            1081,
		"ACTION_REASON_TAKE_COOP_REWARD":                               1082,
		"ACTION_REASON_FLEUR_FAIR_DUNGEON_REWARD":                      1083,
		"ACTION_REASON_ACTIVITY_SCORE":                                 1084,
		"ACTION_REASON_CHANNELLER_SLAB_ONEOFF_DUNGEON_REWARD":          1085,
		"ACTION_REASON_FURNITURE_MAKE_START":                           1086,
		"ACTION_REASON_FURNITURE_MAKE_TAKE":                            1087,
		"ACTION_REASON_FURNITURE_MAKE_CANCEL":                          1088,
		"ACTION_REASON_FURNITURE_MAKE_FAST_FINISH":                     1089,
		"ACTION_REASON_CHANNELLER_SLAB_LOOP_DUNGEON_FIRST_PASS_REWARD": 1090,
		"ACTION_REASON_CHANNELLER_SLAB_LOOP_DUNGEON_SCORE_REWARD":      1091,
		"ACTION_REASON_HOME_LIMITED_SHOP_BUY":                          1092,
		"ACTION_REASON_HOME_COIN_COLLECT":                              1093,
		"ACTION_REASON_SUMMER_TIME_SENTRY_TOWER_REWARD":                1094,
		"ACTION_REASON_SUMMER_TIME_SPRINT_BOAT_REWARD":                 1095,
		"ACTION_REASON_SUMMER_TIME_BOSS_REWARD":                        1096,
		"ACTION_REASON_SUMMER_TIME_BOMB_REWARD":                        1097,
		"ACTION_REASON_HOME_FETTER_COLLECT":                            1098,
		"ACTION_REASON_ECHO_SHELL_REWARD":                              1099,
		"ACTION_REASON_HOME_EVENT_REWARD":                              1100,
		"ACTION_REASON_BLITZ_RUSH_DUNGEON_REWARD":                      1101,
		"ACTION_REASON_FURNITURE_MAKE_RETURN":                          1102,
		"ACTION_REASON_HOME_PLANT_BOX_GATHER":                          1103,
		"ACTION_REASON_HOME_PLANT_SEED":                                1104,
		"ACTION_REASON_HOME_PLANT_GATHER":                              1105,
		"ACTION_REASON_CHESS_DUNGEON_REWARD":                           1106,
		"ACTION_REASON_GROUP_LINK_BUNDLE_FINISH":                       1107,
		"ACTION_REASON_LUNA_RITE_SACRIFICE":                            1108,
		"ACTION_REASON_LUNA_RITE_TAKE_SACRIFICE_REWARD":                1109,
		"ACTION_REASON_FISH_BITE":                                      1110,
		"ACTION_REASON_FISH_SUCC":                                      1111,
		"ACTION_REASON_PLANT_FLOWER_REWARD":                            1112,
		"ACTION_REASON_PLANT_FLOWER_DELIVER_ITEM":                      1113,
		"ACTION_REASON_PLANT_FLOWER_GIVE_FLOWER":                       1114,
		"ACTION_REASON_PLANT_FLOWER_RECV_FLOWER":                       1115,
		"ACTION_REASON_ROGUE_CHALLENGE_SETTLE":                         1116,
		"ACTION_REASON_ROGUE_TAKE_FIRST_PASS_REWARD":                   1117,
		"ACTION_REASON_ROGUE_UPGRADE_SHIKIGAMI":                        1118,
		"ACTION_REASON_ROGUE_REFRESH_CARD":                             1119,
		"ACTION_REASON_USE_WIDGET_CAPTURE_ANIMAL":                      1120,
		"ACTION_REASON_CAPTURE_ANIMAL_SUCC":                            1121,
		"ACTION_REASON_SNOW_DRIFTS":                                    1122,
		"ACTION_REASON_WINTER_CAMP_GIVE_ITEM":                          1123,
		"ACTION_REASON_WINTER_CAMP_RECV_ITEM":                          1124,
		"ACTION_REASON_WINTER_CAMP_EXPLORE_REWARD":                     1125,
		"ACTION_REASON_WINTER_CAMP_BATTLE_REWARD":                      1126,
		"ACTION_REASON_LANTERN_RITE_SKIN_REWARD":                       1127,
		"ACTION_REASON_LANTERN_RITE_DUNGEON_REWARD":                    1128,
		"ACTION_REASON_MICHIAE_MATSURI_DARK_CHALLENGE_REWARD":          1129,
		"ACTION_REASON_MICHIAE_MATSURI_UNLOCK_CRYSTAL_SKILL":           1130,
		"ACTION_REASON_LANTERN_RITE_GROUP_REWARD":                      1131,
		"ACTION_REASON_COSTUME_DEFAULT_UNLOCK":                         1132,
		"ACTION_REASON_SPICE_ACTIVITY_MAKE_SPICE":                      1133,
		"ACTION_REASON_SPICE_ACTIVITY_PROCESS_FOOD":                    1134,
		"ACTION_REASON_SPICE_ADD_AVATAR_FETTER":                        1135,
		"ACTION_REASON_GACHA_ACTIVITY_ROBOT_REWARD":                    1136,
		"ACTION_REASON_GIVING_TAKE_BACK":                               1137,
		"ACTION_REASON_SUMMER_TIME_V2_DUNGEON_REWARD":                  1138,
		"ACTION_REASON_GRAVEN_INNOCENCE_CAMP_REWARD":                   1139,
		"ACTION_REASON_TREASURE_SEELIE_CHEST_REWARD":                   1140,
		"ACTION_REASON_GCG_TAVERN_CHALLENGE_UNLOCK_CHARACTER":          1141,
		"ACTION_REASON_GCG_LEVEL_REWARD":                               1143,
		"ACTION_REASON_GCG_CHALLENGE_FINISH":                           1144,
		"ACTION_REASON_VINTAGE_MARKET_DEAL":                            1145,
		"ACTION_REASON_VINTAGE_MARKET_BARGAIN":                         1146,
		"ACTION_REASON_VINTAGE_MARKET_STORE":                           1147,
		"ACTION_REASON_VINTAGE_PRESENT":                                1148,
		"ACTION_REASON_VINTAGE_OPEN_STORE":                             1149,
		"ACTION_REASON_VINTAGE_STORE_UNLOCK_SLOT":                      1150,
		"ACTION_REASON_VINTAGE_STORE_NPC_EVENT":                        1151,
		"ACTION_REASON_ROCK_BOARD_EXPLORE_REWARD":                      1152,
		"ACTION_REASON_VINTAGE_STORE_DIVIDEND":                         1153,
		"ACTION_REASON_AVATAR_RENAME":                                  1154,
		"ACTION_REASON_GCG_FINISH_LEVEL_QUEST":                         1155,
		"ACTION_REASON_GCG_PROFICIENCY_REWARD":                         1156,
		"ACTION_REASON_TEAM_CHAIN_COSTUME_REWARD":                      1157,
	}
)

func (x ActionReasonType) Enum() *ActionReasonType {
	p := new(ActionReasonType)
	*p = x
	return p
}

func (x ActionReasonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionReasonType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[6].Descriptor()
}

func (ActionReasonType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[6]
}

func (x ActionReasonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionReasonType.Descriptor instead.
func (ActionReasonType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{6}
}

type StoreType int32

const (
	StoreType_STORE_NONE  StoreType = 0
	StoreType_STORE_PACK  StoreType = 1
	StoreType_STORE_DEPOT StoreType = 2
)

// Enum value maps for StoreType.
var (
	StoreType_name = map[int32]string{
		0: "STORE_NONE",
		1: "STORE_PACK",
		2: "STORE_DEPOT",
	}
	StoreType_value = map[string]int32{
		"STORE_NONE":  0,
		"STORE_PACK":  1,
		"STORE_DEPOT": 2,
	}
)

func (x StoreType) Enum() *StoreType {
	p := new(StoreType)
	*p = x
	return p
}

func (x StoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[7].Descriptor()
}

func (StoreType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[7]
}

func (x StoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StoreType.Descriptor instead.
func (StoreType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{7}
}

type VirtualItem int32

const (
	VirtualItem_ITEM_VIRTUAL_NONE                         VirtualItem = 0
	VirtualItem_ITEM_VIRTUAL_AVATAR_EXP                   VirtualItem = 101
	VirtualItem_ITEM_VIRTUAL_PLAYER_EXP                   VirtualItem = 102
	VirtualItem_ITEM_VIRTUAL_FETTER_EXP                   VirtualItem = 105
	VirtualItem_ITEM_VIRTUAL_RESIN                        VirtualItem = 106
	VirtualItem_ITEM_VIRTUAL_LEGENDARY_KEY                VirtualItem = 107
	VirtualItem_ITEM_VIRTUAL_ASTER_PROGRESS               VirtualItem = 108
	VirtualItem_ITEM_VIRTUAL_ASTER_CREDIT                 VirtualItem = 109
	VirtualItem_ITEM_VIRTUAL_ASTER_TOKEN                  VirtualItem = 110
	VirtualItem_ITEM_VIRTUAL_SHIMMERING_ESSENCE           VirtualItem = 111
	VirtualItem_ITEM_VIRTUAL_WARM_ESSENCE                 VirtualItem = 112
	VirtualItem_ITEM_VIRTUAL_WONDROUS_ESSENCE             VirtualItem = 113
	VirtualItem_ITEM_VIRTUAL_TREASURE_MAP_TOKEN           VirtualItem = 114
	VirtualItem_ITEM_VIRTUAL_SEA_LAMP_COIN                VirtualItem = 115
	VirtualItem_ITEM_VIRTUAL_SEA_LAMP_POPULARITY          VirtualItem = 116
	VirtualItem_ITEM_VIRTUAL_MECHANICUS_COIN              VirtualItem = 117
	VirtualItem_ITEM_VIRTUAL_FLEUR_FAIR_CREDIT            VirtualItem = 118
	VirtualItem_ITEM_VIRTUAL_FLEUR_FAIR_TOKEN             VirtualItem = 119
	VirtualItem_ITEM_VIRTUAL_WATER_SPIRIT_COIN            VirtualItem = 120
	VirtualItem_ITEM_VIRTUAL_HOME_EXP                     VirtualItem = 121
	VirtualItem_ITEM_VIRTUAL_CHANNELLER_SLAB_TOKEN        VirtualItem = 122
	VirtualItem_ITEM_VIRTUAL_HIDE_AND_SEEK_COIN           VirtualItem = 123
	VirtualItem_ITEM_VIRTUAL_SUMMER_TIME_DRAFT_WOOD       VirtualItem = 124
	VirtualItem_ITEM_VIRTUAL_SUMMER_TIME_MINI_HARPASTUM   VirtualItem = 125
	VirtualItem_ITEM_VIRTUAL_BOUNCE_CONJURING_COIN        VirtualItem = 126
	VirtualItem_ITEM_VIRTUAL_BLITZ_RUSH_COIN_A            VirtualItem = 127
	VirtualItem_ITEM_VIRTUAL_BLITZ_RUSH_COIN_B            VirtualItem = 128
	VirtualItem_ITEM_VIRTUAL_CHESS_EXP                    VirtualItem = 129
	VirtualItem_ITEM_VIRTUAL_CHESS_COIN                   VirtualItem = 130
	VirtualItem_ITEM_VIRTUAL_LUNA_RITE_ATMOSPHERE         VirtualItem = 131
	VirtualItem_ITEM_VIRTUAL_ROGUELIKE_COIN_A             VirtualItem = 132
	VirtualItem_ITEM_VIRTUAL_ROGUELIKE_COIN_B             VirtualItem = 133
	VirtualItem_ITEM_VIRTUAL_ROGUELIKE_COIN_C             VirtualItem = 134
	VirtualItem_ITEM_VIRTUAL_WINTER_CAMP_COIN_A           VirtualItem = 135
	VirtualItem_ITEM_VIRTUAL_WINTER_CAMP_COIN_B           VirtualItem = 136
	VirtualItem_ITEM_VIRTUAL_LANTERN_RITE_COIN_A          VirtualItem = 137
	VirtualItem_ITEM_VIRTUAL_LANTERN_RITE_COIN_B          VirtualItem = 138
	VirtualItem_ITEM_VIRTUAL_LANTERN_RITE_COIN_C          VirtualItem = 139
	VirtualItem_ITEM_VIRTUAL_ROGUE_DIARY_COIN             VirtualItem = 140
	VirtualItem_ITEM_VIRTUAL_SUMMER_TIME_V2_COIN          VirtualItem = 141
	VirtualItem_ITEM_VIRTUAL_ROGUE_DIARY_DUNGEON_COIN     VirtualItem = 142
	VirtualItem_ITEM_VIRTUAL_GRAVEN_INNOCENCE_COIN_A      VirtualItem = 143
	VirtualItem_ITEM_VIRTUAL_GRAVEN_INNOCENCE_COIN_B      VirtualItem = 144
	VirtualItem_ITEM_VIRTUAL_TREASURE_SEELIE_COIN         VirtualItem = 145
	VirtualItem_ITEM_VIRTUAL_VINTAGE_POPULARITY           VirtualItem = 147
	VirtualItem_ITEM_VIRTUAL_GCG_EXP                      VirtualItem = 146
	VirtualItem_ITEM_VIRTUAL_VINTAGE_MARKET_COIN_A        VirtualItem = 148
	VirtualItem_ITEM_VIRTUAL_VINTAGE_MARKET_COIN_B        VirtualItem = 149
	VirtualItem_ITEM_VIRTUAL_VINTAGE_MARKET_COIN_C        VirtualItem = 150
	VirtualItem_ITEM_VIRTUAL_FUNGUS_FIGHTER_CAPTURE_COIN  VirtualItem = 151
	VirtualItem_ITEM_VIRTUAL_FUNGUS_FIGHTER_TRAINING_COIN VirtualItem = 152
	VirtualItem_ITEM_VIRTUAL_EFFIGY_CHALLENGE_V2_COIN     VirtualItem = 153
	VirtualItem_ITEM_VIRTUAL_TEAM_CHAIN_COIN              VirtualItem = 154
	VirtualItem_ITEM_VIRTUAL_BRICK_BREAKER_COIN           VirtualItem = 155
	VirtualItem_ITEM_VIRTUAL_SEA_LAMP_V3_COIN             VirtualItem = 156
	VirtualItem_ITEM_VIRTUAL_HCOIN                        VirtualItem = 201
	VirtualItem_ITEM_VIRTUAL_SCOIN                        VirtualItem = 202
	VirtualItem_ITEM_VIRTUAL_MCOIN                        VirtualItem = 203
	VirtualItem_ITEM_VIRTUAL_HOME_COIN                    VirtualItem = 204
	VirtualItem_ITEM_VIRTUAL_GCG_COIN                     VirtualItem = 205
	VirtualItem_ITEM_VIRTUAL_INAZUMA_REPUTATION           VirtualItem = 314
	VirtualItem_ITEM_VIRTUAL_MENGDE_REPUTATION            VirtualItem = 315
	VirtualItem_ITEM_VIRTUAL_SUMERU_REPUTATION            VirtualItem = 316
	VirtualItem_ITEM_VIRTUAL_LIYUE_REPUTATION             VirtualItem = 317
)

// Enum value maps for VirtualItem.
var (
	VirtualItem_name = map[int32]string{
		0:   "ITEM_VIRTUAL_NONE",
		101: "ITEM_VIRTUAL_AVATAR_EXP",
		102: "ITEM_VIRTUAL_PLAYER_EXP",
		105: "ITEM_VIRTUAL_FETTER_EXP",
		106: "ITEM_VIRTUAL_RESIN",
		107: "ITEM_VIRTUAL_LEGENDARY_KEY",
		108: "ITEM_VIRTUAL_ASTER_PROGRESS",
		109: "ITEM_VIRTUAL_ASTER_CREDIT",
		110: "ITEM_VIRTUAL_ASTER_TOKEN",
		111: "ITEM_VIRTUAL_SHIMMERING_ESSENCE",
		112: "ITEM_VIRTUAL_WARM_ESSENCE",
		113: "ITEM_VIRTUAL_WONDROUS_ESSENCE",
		114: "ITEM_VIRTUAL_TREASURE_MAP_TOKEN",
		115: "ITEM_VIRTUAL_SEA_LAMP_COIN",
		116: "ITEM_VIRTUAL_SEA_LAMP_POPULARITY",
		117: "ITEM_VIRTUAL_MECHANICUS_COIN",
		118: "ITEM_VIRTUAL_FLEUR_FAIR_CREDIT",
		119: "ITEM_VIRTUAL_FLEUR_FAIR_TOKEN",
		120: "ITEM_VIRTUAL_WATER_SPIRIT_COIN",
		121: "ITEM_VIRTUAL_HOME_EXP",
		122: "ITEM_VIRTUAL_CHANNELLER_SLAB_TOKEN",
		123: "ITEM_VIRTUAL_HIDE_AND_SEEK_COIN",
		124: "ITEM_VIRTUAL_SUMMER_TIME_DRAFT_WOOD",
		125: "ITEM_VIRTUAL_SUMMER_TIME_MINI_HARPASTUM",
		126: "ITEM_VIRTUAL_BOUNCE_CONJURING_COIN",
		127: "ITEM_VIRTUAL_BLITZ_RUSH_COIN_A",
		128: "ITEM_VIRTUAL_BLITZ_RUSH_COIN_B",
		129: "ITEM_VIRTUAL_CHESS_EXP",
		130: "ITEM_VIRTUAL_CHESS_COIN",
		131: "ITEM_VIRTUAL_LUNA_RITE_ATMOSPHERE",
		132: "ITEM_VIRTUAL_ROGUELIKE_COIN_A",
		133: "ITEM_VIRTUAL_ROGUELIKE_COIN_B",
		134: "ITEM_VIRTUAL_ROGUELIKE_COIN_C",
		135: "ITEM_VIRTUAL_WINTER_CAMP_COIN_A",
		136: "ITEM_VIRTUAL_WINTER_CAMP_COIN_B",
		137: "ITEM_VIRTUAL_LANTERN_RITE_COIN_A",
		138: "ITEM_VIRTUAL_LANTERN_RITE_COIN_B",
		139: "ITEM_VIRTUAL_LANTERN_RITE_COIN_C",
		140: "ITEM_VIRTUAL_ROGUE_DIARY_COIN",
		141: "ITEM_VIRTUAL_SUMMER_TIME_V2_COIN",
		142: "ITEM_VIRTUAL_ROGUE_DIARY_DUNGEON_COIN",
		143: "ITEM_VIRTUAL_GRAVEN_INNOCENCE_COIN_A",
		144: "ITEM_VIRTUAL_GRAVEN_INNOCENCE_COIN_B",
		145: "ITEM_VIRTUAL_TREASURE_SEELIE_COIN",
		147: "ITEM_VIRTUAL_VINTAGE_POPULARITY",
		146: "ITEM_VIRTUAL_GCG_EXP",
		148: "ITEM_VIRTUAL_VINTAGE_MARKET_COIN_A",
		149: "ITEM_VIRTUAL_VINTAGE_MARKET_COIN_B",
		150: "ITEM_VIRTUAL_VINTAGE_MARKET_COIN_C",
		151: "ITEM_VIRTUAL_FUNGUS_FIGHTER_CAPTURE_COIN",
		152: "ITEM_VIRTUAL_FUNGUS_FIGHTER_TRAINING_COIN",
		153: "ITEM_VIRTUAL_EFFIGY_CHALLENGE_V2_COIN",
		154: "ITEM_VIRTUAL_TEAM_CHAIN_COIN",
		155: "ITEM_VIRTUAL_BRICK_BREAKER_COIN",
		156: "ITEM_VIRTUAL_SEA_LAMP_V3_COIN",
		201: "ITEM_VIRTUAL_HCOIN",
		202: "ITEM_VIRTUAL_SCOIN",
		203: "ITEM_VIRTUAL_MCOIN",
		204: "ITEM_VIRTUAL_HOME_COIN",
		205: "ITEM_VIRTUAL_GCG_COIN",
		314: "ITEM_VIRTUAL_INAZUMA_REPUTATION",
		315: "ITEM_VIRTUAL_MENGDE_REPUTATION",
		316: "ITEM_VIRTUAL_SUMERU_REPUTATION",
		317: "ITEM_VIRTUAL_LIYUE_REPUTATION",
	}
	VirtualItem_value = map[string]int32{
		"ITEM_VIRTUAL_NONE":                         0,
		"ITEM_VIRTUAL_AVATAR_EXP":                   101,
		"ITEM_VIRTUAL_PLAYER_EXP":                   102,
		"ITEM_VIRTUAL_FETTER_EXP":                   105,
		"ITEM_VIRTUAL_RESIN":                        106,
		"ITEM_VIRTUAL_LEGENDARY_KEY":                107,
		"ITEM_VIRTUAL_ASTER_PROGRESS":               108,
		"ITEM_VIRTUAL_ASTER_CREDIT":                 109,
		"ITEM_VIRTUAL_ASTER_TOKEN":                  110,
		"ITEM_VIRTUAL_SHIMMERING_ESSENCE":           111,
		"ITEM_VIRTUAL_WARM_ESSENCE":                 112,
		"ITEM_VIRTUAL_WONDROUS_ESSENCE":             113,
		"ITEM_VIRTUAL_TREASURE_MAP_TOKEN":           114,
		"ITEM_VIRTUAL_SEA_LAMP_COIN":                115,
		"ITEM_VIRTUAL_SEA_LAMP_POPULARITY":          116,
		"ITEM_VIRTUAL_MECHANICUS_COIN":              117,
		"ITEM_VIRTUAL_FLEUR_FAIR_CREDIT":            118,
		"ITEM_VIRTUAL_FLEUR_FAIR_TOKEN":             119,
		"ITEM_VIRTUAL_WATER_SPIRIT_COIN":            120,
		"ITEM_VIRTUAL_HOME_EXP":                     121,
		"ITEM_VIRTUAL_CHANNELLER_SLAB_TOKEN":        122,
		"ITEM_VIRTUAL_HIDE_AND_SEEK_COIN":           123,
		"ITEM_VIRTUAL_SUMMER_TIME_DRAFT_WOOD":       124,
		"ITEM_VIRTUAL_SUMMER_TIME_MINI_HARPASTUM":   125,
		"ITEM_VIRTUAL_BOUNCE_CONJURING_COIN":        126,
		"ITEM_VIRTUAL_BLITZ_RUSH_COIN_A":            127,
		"ITEM_VIRTUAL_BLITZ_RUSH_COIN_B":            128,
		"ITEM_VIRTUAL_CHESS_EXP":                    129,
		"ITEM_VIRTUAL_CHESS_COIN":                   130,
		"ITEM_VIRTUAL_LUNA_RITE_ATMOSPHERE":         131,
		"ITEM_VIRTUAL_ROGUELIKE_COIN_A":             132,
		"ITEM_VIRTUAL_ROGUELIKE_COIN_B":             133,
		"ITEM_VIRTUAL_ROGUELIKE_COIN_C":             134,
		"ITEM_VIRTUAL_WINTER_CAMP_COIN_A":           135,
		"ITEM_VIRTUAL_WINTER_CAMP_COIN_B":           136,
		"ITEM_VIRTUAL_LANTERN_RITE_COIN_A":          137,
		"ITEM_VIRTUAL_LANTERN_RITE_COIN_B":          138,
		"ITEM_VIRTUAL_LANTERN_RITE_COIN_C":          139,
		"ITEM_VIRTUAL_ROGUE_DIARY_COIN":             140,
		"ITEM_VIRTUAL_SUMMER_TIME_V2_COIN":          141,
		"ITEM_VIRTUAL_ROGUE_DIARY_DUNGEON_COIN":     142,
		"ITEM_VIRTUAL_GRAVEN_INNOCENCE_COIN_A":      143,
		"ITEM_VIRTUAL_GRAVEN_INNOCENCE_COIN_B":      144,
		"ITEM_VIRTUAL_TREASURE_SEELIE_COIN":         145,
		"ITEM_VIRTUAL_VINTAGE_POPULARITY":           147,
		"ITEM_VIRTUAL_GCG_EXP":                      146,
		"ITEM_VIRTUAL_VINTAGE_MARKET_COIN_A":        148,
		"ITEM_VIRTUAL_VINTAGE_MARKET_COIN_B":        149,
		"ITEM_VIRTUAL_VINTAGE_MARKET_COIN_C":        150,
		"ITEM_VIRTUAL_FUNGUS_FIGHTER_CAPTURE_COIN":  151,
		"ITEM_VIRTUAL_FUNGUS_FIGHTER_TRAINING_COIN": 152,
		"ITEM_VIRTUAL_EFFIGY_CHALLENGE_V2_COIN":     153,
		"ITEM_VIRTUAL_TEAM_CHAIN_COIN":              154,
		"ITEM_VIRTUAL_BRICK_BREAKER_COIN":           155,
		"ITEM_VIRTUAL_SEA_LAMP_V3_COIN":             156,
		"ITEM_VIRTUAL_HCOIN":                        201,
		"ITEM_VIRTUAL_SCOIN":                        202,
		"ITEM_VIRTUAL_MCOIN":                        203,
		"ITEM_VIRTUAL_HOME_COIN":                    204,
		"ITEM_VIRTUAL_GCG_COIN":                     205,
		"ITEM_VIRTUAL_INAZUMA_REPUTATION":           314,
		"ITEM_VIRTUAL_MENGDE_REPUTATION":            315,
		"ITEM_VIRTUAL_SUMERU_REPUTATION":            316,
		"ITEM_VIRTUAL_LIYUE_REPUTATION":             317,
	}
)

func (x VirtualItem) Enum() *VirtualItem {
	p := new(VirtualItem)
	*p = x
	return p
}

func (x VirtualItem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VirtualItem) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[8].Descriptor()
}

func (VirtualItem) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[8]
}

func (x VirtualItem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VirtualItem.Descriptor instead.
func (VirtualItem) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{8}
}

type ReliquaryFilterKey int32

const (
	ReliquaryFilterKey_RELIQUARY_FILTER_KEY_NONE    ReliquaryFilterKey = 0
	ReliquaryFilterKey_RELIQUARY_FILTER_KEY_LOCK    ReliquaryFilterKey = 1
	ReliquaryFilterKey_RELIQUARY_FILTER_KEY_LEVEL   ReliquaryFilterKey = 2
	ReliquaryFilterKey_RELIQUARY_FILTER_KEY_WEARING ReliquaryFilterKey = 3
)

// Enum value maps for ReliquaryFilterKey.
var (
	ReliquaryFilterKey_name = map[int32]string{
		0: "RELIQUARY_FILTER_KEY_NONE",
		1: "RELIQUARY_FILTER_KEY_LOCK",
		2: "RELIQUARY_FILTER_KEY_LEVEL",
		3: "RELIQUARY_FILTER_KEY_WEARING",
	}
	ReliquaryFilterKey_value = map[string]int32{
		"RELIQUARY_FILTER_KEY_NONE":    0,
		"RELIQUARY_FILTER_KEY_LOCK":    1,
		"RELIQUARY_FILTER_KEY_LEVEL":   2,
		"RELIQUARY_FILTER_KEY_WEARING": 3,
	}
)

func (x ReliquaryFilterKey) Enum() *ReliquaryFilterKey {
	p := new(ReliquaryFilterKey)
	*p = x
	return p
}

func (x ReliquaryFilterKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReliquaryFilterKey) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[9].Descriptor()
}

func (ReliquaryFilterKey) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[9]
}

func (x ReliquaryFilterKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReliquaryFilterKey.Descriptor instead.
func (ReliquaryFilterKey) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{9}
}

type ReliquaryFilterLockState int32

const (
	ReliquaryFilterLockState_RELIQUARY_FILTER_LOCK_STATE_NONE   ReliquaryFilterLockState = 0
	ReliquaryFilterLockState_RELIQUARY_FILTER_LOCK_STATE_LOCK   ReliquaryFilterLockState = 1
	ReliquaryFilterLockState_RELIQUARY_FILTER_LOCK_STATE_UNLOCK ReliquaryFilterLockState = 2
)

// Enum value maps for ReliquaryFilterLockState.
var (
	ReliquaryFilterLockState_name = map[int32]string{
		0: "RELIQUARY_FILTER_LOCK_STATE_NONE",
		1: "RELIQUARY_FILTER_LOCK_STATE_LOCK",
		2: "RELIQUARY_FILTER_LOCK_STATE_UNLOCK",
	}
	ReliquaryFilterLockState_value = map[string]int32{
		"RELIQUARY_FILTER_LOCK_STATE_NONE":   0,
		"RELIQUARY_FILTER_LOCK_STATE_LOCK":   1,
		"RELIQUARY_FILTER_LOCK_STATE_UNLOCK": 2,
	}
)

func (x ReliquaryFilterLockState) Enum() *ReliquaryFilterLockState {
	p := new(ReliquaryFilterLockState)
	*p = x
	return p
}

func (x ReliquaryFilterLockState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReliquaryFilterLockState) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[10].Descriptor()
}

func (ReliquaryFilterLockState) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[10]
}

func (x ReliquaryFilterLockState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReliquaryFilterLockState.Descriptor instead.
func (ReliquaryFilterLockState) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{10}
}

type ReliquaryFilterLevelState int32

const (
	ReliquaryFilterLevelState_RELIQUARY_FILTER_LEVEL_STATE_NONE           ReliquaryFilterLevelState = 0
	ReliquaryFilterLevelState_RELIQUARY_FILTER_LEVEL_STATE_FULL_LEVEL     ReliquaryFilterLevelState = 1
	ReliquaryFilterLevelState_RELIQUARY_FILTER_LEVEL_STATE_NOT_FULL_LEVEL ReliquaryFilterLevelState = 2
)

// Enum value maps for ReliquaryFilterLevelState.
var (
	ReliquaryFilterLevelState_name = map[int32]string{
		0: "RELIQUARY_FILTER_LEVEL_STATE_NONE",
		1: "RELIQUARY_FILTER_LEVEL_STATE_FULL_LEVEL",
		2: "RELIQUARY_FILTER_LEVEL_STATE_NOT_FULL_LEVEL",
	}
	ReliquaryFilterLevelState_value = map[string]int32{
		"RELIQUARY_FILTER_LEVEL_STATE_NONE":           0,
		"RELIQUARY_FILTER_LEVEL_STATE_FULL_LEVEL":     1,
		"RELIQUARY_FILTER_LEVEL_STATE_NOT_FULL_LEVEL": 2,
	}
)

func (x ReliquaryFilterLevelState) Enum() *ReliquaryFilterLevelState {
	p := new(ReliquaryFilterLevelState)
	*p = x
	return p
}

func (x ReliquaryFilterLevelState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReliquaryFilterLevelState) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[11].Descriptor()
}

func (ReliquaryFilterLevelState) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[11]
}

func (x ReliquaryFilterLevelState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReliquaryFilterLevelState.Descriptor instead.
func (ReliquaryFilterLevelState) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{11}
}

type ReliquaryFilterWearedState int32

const (
	ReliquaryFilterWearedState_RELIQUARY_FILTER_WEARED_STATE_NONE                ReliquaryFilterWearedState = 0
	ReliquaryFilterWearedState_RELIQUARY_FILTER_WEARED_STATE_HAS_BEEN_WEARED     ReliquaryFilterWearedState = 1
	ReliquaryFilterWearedState_RELIQUARY_FILTER_WEARED_STATE_HAS_NOT_BEEN_WEARED ReliquaryFilterWearedState = 2
)

// Enum value maps for ReliquaryFilterWearedState.
var (
	ReliquaryFilterWearedState_name = map[int32]string{
		0: "RELIQUARY_FILTER_WEARED_STATE_NONE",
		1: "RELIQUARY_FILTER_WEARED_STATE_HAS_BEEN_WEARED",
		2: "RELIQUARY_FILTER_WEARED_STATE_HAS_NOT_BEEN_WEARED",
	}
	ReliquaryFilterWearedState_value = map[string]int32{
		"RELIQUARY_FILTER_WEARED_STATE_NONE":                0,
		"RELIQUARY_FILTER_WEARED_STATE_HAS_BEEN_WEARED":     1,
		"RELIQUARY_FILTER_WEARED_STATE_HAS_NOT_BEEN_WEARED": 2,
	}
)

func (x ReliquaryFilterWearedState) Enum() *ReliquaryFilterWearedState {
	p := new(ReliquaryFilterWearedState)
	*p = x
	return p
}

func (x ReliquaryFilterWearedState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReliquaryFilterWearedState) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[12].Descriptor()
}

func (ReliquaryFilterWearedState) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[12]
}

func (x ReliquaryFilterWearedState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReliquaryFilterWearedState.Descriptor instead.
func (ReliquaryFilterWearedState) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{12}
}

type AbilityScalarType int32

const (
	AbilityScalarType_ABILITY_SCALAR_TYPE_UNKNOW  AbilityScalarType = 0
	AbilityScalarType_ABILITY_SCALAR_TYPE_FLOAT   AbilityScalarType = 1
	AbilityScalarType_ABILITY_SCALAR_TYPE_INT     AbilityScalarType = 2
	AbilityScalarType_ABILITY_SCALAR_TYPE_BOOL    AbilityScalarType = 3
	AbilityScalarType_ABILITY_SCALAR_TYPE_TRIGGER AbilityScalarType = 4
	AbilityScalarType_ABILITY_SCALAR_TYPE_STRING  AbilityScalarType = 5
	AbilityScalarType_ABILITY_SCALAR_TYPE_UINT    AbilityScalarType = 6
)

// Enum value maps for AbilityScalarType.
var (
	AbilityScalarType_name = map[int32]string{
		0: "ABILITY_SCALAR_TYPE_UNKNOW",
		1: "ABILITY_SCALAR_TYPE_FLOAT",
		2: "ABILITY_SCALAR_TYPE_INT",
		3: "ABILITY_SCALAR_TYPE_BOOL",
		4: "ABILITY_SCALAR_TYPE_TRIGGER",
		5: "ABILITY_SCALAR_TYPE_STRING",
		6: "ABILITY_SCALAR_TYPE_UINT",
	}
	AbilityScalarType_value = map[string]int32{
		"ABILITY_SCALAR_TYPE_UNKNOW":  0,
		"ABILITY_SCALAR_TYPE_FLOAT":   1,
		"ABILITY_SCALAR_TYPE_INT":     2,
		"ABILITY_SCALAR_TYPE_BOOL":    3,
		"ABILITY_SCALAR_TYPE_TRIGGER": 4,
		"ABILITY_SCALAR_TYPE_STRING":  5,
		"ABILITY_SCALAR_TYPE_UINT":    6,
	}
)

func (x AbilityScalarType) Enum() *AbilityScalarType {
	p := new(AbilityScalarType)
	*p = x
	return p
}

func (x AbilityScalarType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AbilityScalarType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[13].Descriptor()
}

func (AbilityScalarType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[13]
}

func (x AbilityScalarType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AbilityScalarType.Descriptor instead.
func (AbilityScalarType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{13}
}

type MotionState int32

const (
	MotionState_MOTION_NONE                     MotionState = 0
	MotionState_MOTION_RESET                    MotionState = 1
	MotionState_MOTION_STANDBY                  MotionState = 2
	MotionState_MOTION_STANDBY_MOVE             MotionState = 3
	MotionState_MOTION_WALK                     MotionState = 4
	MotionState_MOTION_RUN                      MotionState = 5
	MotionState_MOTION_DASH                     MotionState = 6
	MotionState_MOTION_CLIMB                    MotionState = 7
	MotionState_MOTION_CLIMB_JUMP               MotionState = 8
	MotionState_MOTION_STANDBY_TO_CLIMB         MotionState = 9
	MotionState_MOTION_FIGHT                    MotionState = 10
	MotionState_MOTION_JUMP                     MotionState = 11
	MotionState_MOTION_DROP                     MotionState = 12
	MotionState_MOTION_FLY                      MotionState = 13
	MotionState_MOTION_SWIM_MOVE                MotionState = 14
	MotionState_MOTION_SWIM_IDLE                MotionState = 15
	MotionState_MOTION_SWIM_DASH                MotionState = 16
	MotionState_MOTION_SWIM_JUMP                MotionState = 17
	MotionState_MOTION_SLIP                     MotionState = 18
	MotionState_MOTION_GO_UPSTAIRS              MotionState = 19
	MotionState_MOTION_FALL_ON_GROUND           MotionState = 20
	MotionState_MOTION_JUMP_UP_WALL_FOR_STANDBY MotionState = 21
	MotionState_MOTION_JUMP_OFF_WALL            MotionState = 22
	MotionState_MOTION_POWERED_FLY              MotionState = 23
	MotionState_MOTION_LADDER_IDLE              MotionState = 24
	MotionState_MOTION_LADDER_MOVE              MotionState = 25
	MotionState_MOTION_LADDER_SLIP              MotionState = 26
	MotionState_MOTION_STANDBY_TO_LADDER        MotionState = 27
	MotionState_MOTION_LADDER_TO_STANDBY        MotionState = 28
	MotionState_MOTION_DANGER_STANDBY           MotionState = 29
	MotionState_MOTION_DANGER_STANDBY_MOVE      MotionState = 30
	MotionState_MOTION_DANGER_WALK              MotionState = 31
	MotionState_MOTION_DANGER_RUN               MotionState = 32
	MotionState_MOTION_DANGER_DASH              MotionState = 33
	MotionState_MOTION_CROUCH_IDLE              MotionState = 34
	MotionState_MOTION_CROUCH_MOVE              MotionState = 35
	MotionState_MOTION_CROUCH_ROLL              MotionState = 36
	MotionState_MOTION_NOTIFY                   MotionState = 37
	MotionState_MOTION_LAND_SPEED               MotionState = 38
	MotionState_MOTION_MOVE_FAIL_ACK            MotionState = 39
	MotionState_MOTION_WATERFALL                MotionState = 40
	MotionState_MOTION_DASH_BEFORE_SHAKE        MotionState = 41
	MotionState_MOTION_SIT_IDLE                 MotionState = 42
	MotionState_MOTION_FORCE_SET_POS            MotionState = 43
	MotionState_MOTION_QUEST_FORCE_DRAG         MotionState = 44
	MotionState_MOTION_FOLLOW_ROUTE             MotionState = 45
	MotionState_MOTION_SKIFF_BOARDING           MotionState = 46
	MotionState_MOTION_SKIFF_NORMAL             MotionState = 47
	MotionState_MOTION_SKIFF_DASH               MotionState = 48
	MotionState_MOTION_SKIFF_POWERED_DASH       MotionState = 49
	MotionState_MOTION_DESTROY_VEHICLE          MotionState = 50
	MotionState_MOTION_FLY_IDLE                 MotionState = 51
	MotionState_MOTION_FLY_SLOW                 MotionState = 52
	MotionState_MOTION_FLY_FAST                 MotionState = 53
	MotionState_MOTION_AIM_MOVE                 MotionState = 54
	MotionState_MOTION_AIR_COMPENSATION         MotionState = 55
	MotionState_MOTION_NUM                      MotionState = 56
)

// Enum value maps for MotionState.
var (
	MotionState_name = map[int32]string{
		0:  "MOTION_NONE",
		1:  "MOTION_RESET",
		2:  "MOTION_STANDBY",
		3:  "MOTION_STANDBY_MOVE",
		4:  "MOTION_WALK",
		5:  "MOTION_RUN",
		6:  "MOTION_DASH",
		7:  "MOTION_CLIMB",
		8:  "MOTION_CLIMB_JUMP",
		9:  "MOTION_STANDBY_TO_CLIMB",
		10: "MOTION_FIGHT",
		11: "MOTION_JUMP",
		12: "MOTION_DROP",
		13: "MOTION_FLY",
		14: "MOTION_SWIM_MOVE",
		15: "MOTION_SWIM_IDLE",
		16: "MOTION_SWIM_DASH",
		17: "MOTION_SWIM_JUMP",
		18: "MOTION_SLIP",
		19: "MOTION_GO_UPSTAIRS",
		20: "MOTION_FALL_ON_GROUND",
		21: "MOTION_JUMP_UP_WALL_FOR_STANDBY",
		22: "MOTION_JUMP_OFF_WALL",
		23: "MOTION_POWERED_FLY",
		24: "MOTION_LADDER_IDLE",
		25: "MOTION_LADDER_MOVE",
		26: "MOTION_LADDER_SLIP",
		27: "MOTION_STANDBY_TO_LADDER",
		28: "MOTION_LADDER_TO_STANDBY",
		29: "MOTION_DANGER_STANDBY",
		30: "MOTION_DANGER_STANDBY_MOVE",
		31: "MOTION_DANGER_WALK",
		32: "MOTION_DANGER_RUN",
		33: "MOTION_DANGER_DASH",
		34: "MOTION_CROUCH_IDLE",
		35: "MOTION_CROUCH_MOVE",
		36: "MOTION_CROUCH_ROLL",
		37: "MOTION_NOTIFY",
		38: "MOTION_LAND_SPEED",
		39: "MOTION_MOVE_FAIL_ACK",
		40: "MOTION_WATERFALL",
		41: "MOTION_DASH_BEFORE_SHAKE",
		42: "MOTION_SIT_IDLE",
		43: "MOTION_FORCE_SET_POS",
		44: "MOTION_QUEST_FORCE_DRAG",
		45: "MOTION_FOLLOW_ROUTE",
		46: "MOTION_SKIFF_BOARDING",
		47: "MOTION_SKIFF_NORMAL",
		48: "MOTION_SKIFF_DASH",
		49: "MOTION_SKIFF_POWERED_DASH",
		50: "MOTION_DESTROY_VEHICLE",
		51: "MOTION_FLY_IDLE",
		52: "MOTION_FLY_SLOW",
		53: "MOTION_FLY_FAST",
		54: "MOTION_AIM_MOVE",
		55: "MOTION_AIR_COMPENSATION",
		56: "MOTION_NUM",
	}
	MotionState_value = map[string]int32{
		"MOTION_NONE":                     0,
		"MOTION_RESET":                    1,
		"MOTION_STANDBY":                  2,
		"MOTION_STANDBY_MOVE":             3,
		"MOTION_WALK":                     4,
		"MOTION_RUN":                      5,
		"MOTION_DASH":                     6,
		"MOTION_CLIMB":                    7,
		"MOTION_CLIMB_JUMP":               8,
		"MOTION_STANDBY_TO_CLIMB":         9,
		"MOTION_FIGHT":                    10,
		"MOTION_JUMP":                     11,
		"MOTION_DROP":                     12,
		"MOTION_FLY":                      13,
		"MOTION_SWIM_MOVE":                14,
		"MOTION_SWIM_IDLE":                15,
		"MOTION_SWIM_DASH":                16,
		"MOTION_SWIM_JUMP":                17,
		"MOTION_SLIP":                     18,
		"MOTION_GO_UPSTAIRS":              19,
		"MOTION_FALL_ON_GROUND":           20,
		"MOTION_JUMP_UP_WALL_FOR_STANDBY": 21,
		"MOTION_JUMP_OFF_WALL":            22,
		"MOTION_POWERED_FLY":              23,
		"MOTION_LADDER_IDLE":              24,
		"MOTION_LADDER_MOVE":              25,
		"MOTION_LADDER_SLIP":              26,
		"MOTION_STANDBY_TO_LADDER":        27,
		"MOTION_LADDER_TO_STANDBY":        28,
		"MOTION_DANGER_STANDBY":           29,
		"MOTION_DANGER_STANDBY_MOVE":      30,
		"MOTION_DANGER_WALK":              31,
		"MOTION_DANGER_RUN":               32,
		"MOTION_DANGER_DASH":              33,
		"MOTION_CROUCH_IDLE":              34,
		"MOTION_CROUCH_MOVE":              35,
		"MOTION_CROUCH_ROLL":              36,
		"MOTION_NOTIFY":                   37,
		"MOTION_LAND_SPEED":               38,
		"MOTION_MOVE_FAIL_ACK":            39,
		"MOTION_WATERFALL":                40,
		"MOTION_DASH_BEFORE_SHAKE":        41,
		"MOTION_SIT_IDLE":                 42,
		"MOTION_FORCE_SET_POS":            43,
		"MOTION_QUEST_FORCE_DRAG":         44,
		"MOTION_FOLLOW_ROUTE":             45,
		"MOTION_SKIFF_BOARDING":           46,
		"MOTION_SKIFF_NORMAL":             47,
		"MOTION_SKIFF_DASH":               48,
		"MOTION_SKIFF_POWERED_DASH":       49,
		"MOTION_DESTROY_VEHICLE":          50,
		"MOTION_FLY_IDLE":                 51,
		"MOTION_FLY_SLOW":                 52,
		"MOTION_FLY_FAST":                 53,
		"MOTION_AIM_MOVE":                 54,
		"MOTION_AIR_COMPENSATION":         55,
		"MOTION_NUM":                      56,
	}
)

func (x MotionState) Enum() *MotionState {
	p := new(MotionState)
	*p = x
	return p
}

func (x MotionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MotionState) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[14].Descriptor()
}

func (MotionState) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[14]
}

func (x MotionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MotionState.Descriptor instead.
func (MotionState) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{14}
}

type ProtEntityType int32

const (
	ProtEntityType_PROT_ENTITY_NONE             ProtEntityType = 0
	ProtEntityType_PROT_ENTITY_AVATAR           ProtEntityType = 1
	ProtEntityType_PROT_ENTITY_MONSTER          ProtEntityType = 2
	ProtEntityType_PROT_ENTITY_NPC              ProtEntityType = 3
	ProtEntityType_PROT_ENTITY_GADGET           ProtEntityType = 4
	ProtEntityType_PROT_ENTITY_REGION           ProtEntityType = 5
	ProtEntityType_PROT_ENTITY_WEAPON           ProtEntityType = 6
	ProtEntityType_PROT_ENTITY_WEATHER          ProtEntityType = 7
	ProtEntityType_PROT_ENTITY_SCENE            ProtEntityType = 8
	ProtEntityType_PROT_ENTITY_TEAM             ProtEntityType = 9
	ProtEntityType_PROT_ENTITY_MASSIVE_ENTITY   ProtEntityType = 10
	ProtEntityType_PROT_ENTITY_MP_LEVEL         ProtEntityType = 11
	ProtEntityType_PROT_ENTITY_PLAY_TEAM_ENTITY ProtEntityType = 12
	ProtEntityType_PROT_ENTITY_EYE_POINT        ProtEntityType = 13
	ProtEntityType_PROT_ENTITY_MAX              ProtEntityType = 14
)

// Enum value maps for ProtEntityType.
var (
	ProtEntityType_name = map[int32]string{
		0:  "PROT_ENTITY_NONE",
		1:  "PROT_ENTITY_AVATAR",
		2:  "PROT_ENTITY_MONSTER",
		3:  "PROT_ENTITY_NPC",
		4:  "PROT_ENTITY_GADGET",
		5:  "PROT_ENTITY_REGION",
		6:  "PROT_ENTITY_WEAPON",
		7:  "PROT_ENTITY_WEATHER",
		8:  "PROT_ENTITY_SCENE",
		9:  "PROT_ENTITY_TEAM",
		10: "PROT_ENTITY_MASSIVE_ENTITY",
		11: "PROT_ENTITY_MP_LEVEL",
		12: "PROT_ENTITY_PLAY_TEAM_ENTITY",
		13: "PROT_ENTITY_EYE_POINT",
		14: "PROT_ENTITY_MAX",
	}
	ProtEntityType_value = map[string]int32{
		"PROT_ENTITY_NONE":             0,
		"PROT_ENTITY_AVATAR":           1,
		"PROT_ENTITY_MONSTER":          2,
		"PROT_ENTITY_NPC":              3,
		"PROT_ENTITY_GADGET":           4,
		"PROT_ENTITY_REGION":           5,
		"PROT_ENTITY_WEAPON":           6,
		"PROT_ENTITY_WEATHER":          7,
		"PROT_ENTITY_SCENE":            8,
		"PROT_ENTITY_TEAM":             9,
		"PROT_ENTITY_MASSIVE_ENTITY":   10,
		"PROT_ENTITY_MP_LEVEL":         11,
		"PROT_ENTITY_PLAY_TEAM_ENTITY": 12,
		"PROT_ENTITY_EYE_POINT":        13,
		"PROT_ENTITY_MAX":              14,
	}
)

func (x ProtEntityType) Enum() *ProtEntityType {
	p := new(ProtEntityType)
	*p = x
	return p
}

func (x ProtEntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtEntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[15].Descriptor()
}

func (ProtEntityType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[15]
}

func (x ProtEntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtEntityType.Descriptor instead.
func (ProtEntityType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{15}
}

type NpcTalkState int32

const (
	NpcTalkState_NPC_TALK_NONE   NpcTalkState = 0
	NpcTalkState_NPC_TALK_AUTO   NpcTalkState = 1
	NpcTalkState_NPC_TALK_MANUAL NpcTalkState = 2
)

// Enum value maps for NpcTalkState.
var (
	NpcTalkState_name = map[int32]string{
		0: "NPC_TALK_NONE",
		1: "NPC_TALK_AUTO",
		2: "NPC_TALK_MANUAL",
	}
	NpcTalkState_value = map[string]int32{
		"NPC_TALK_NONE":   0,
		"NPC_TALK_AUTO":   1,
		"NPC_TALK_MANUAL": 2,
	}
)

func (x NpcTalkState) Enum() *NpcTalkState {
	p := new(NpcTalkState)
	*p = x
	return p
}

func (x NpcTalkState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NpcTalkState) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[16].Descriptor()
}

func (NpcTalkState) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[16]
}

func (x NpcTalkState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NpcTalkState.Descriptor instead.
func (NpcTalkState) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{16}
}

type VehicleSlot int32

const (
	VehicleSlot_VEHICLE_SLOT_OPERATOR VehicleSlot = 0
)

// Enum value maps for VehicleSlot.
var (
	VehicleSlot_name = map[int32]string{
		0: "VEHICLE_SLOT_OPERATOR",
	}
	VehicleSlot_value = map[string]int32{
		"VEHICLE_SLOT_OPERATOR": 0,
	}
)

func (x VehicleSlot) Enum() *VehicleSlot {
	p := new(VehicleSlot)
	*p = x
	return p
}

func (x VehicleSlot) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleSlot) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[17].Descriptor()
}

func (VehicleSlot) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[17]
}

func (x VehicleSlot) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleSlot.Descriptor instead.
func (VehicleSlot) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{17}
}

type MonsterBornType int32

const (
	MonsterBornType_MONSTER_BORN_NONE    MonsterBornType = 0
	MonsterBornType_MONSTER_BORN_DEFAULT MonsterBornType = 1
	MonsterBornType_MONSTER_BORN_RANDOM  MonsterBornType = 2
)

// Enum value maps for MonsterBornType.
var (
	MonsterBornType_name = map[int32]string{
		0: "MONSTER_BORN_NONE",
		1: "MONSTER_BORN_DEFAULT",
		2: "MONSTER_BORN_RANDOM",
	}
	MonsterBornType_value = map[string]int32{
		"MONSTER_BORN_NONE":    0,
		"MONSTER_BORN_DEFAULT": 1,
		"MONSTER_BORN_RANDOM":  2,
	}
)

func (x MonsterBornType) Enum() *MonsterBornType {
	p := new(MonsterBornType)
	*p = x
	return p
}

func (x MonsterBornType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonsterBornType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[18].Descriptor()
}

func (MonsterBornType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[18]
}

func (x MonsterBornType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MonsterBornType.Descriptor instead.
func (MonsterBornType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{18}
}

type GadgetBornType int32

const (
	GadgetBornType_GADGET_BORN_NONE        GadgetBornType = 0
	GadgetBornType_GADGET_BORN_IN_AIR      GadgetBornType = 1
	GadgetBornType_GADGET_BORN_PLAYER      GadgetBornType = 2
	GadgetBornType_GADGET_BORN_MONSTER_HIT GadgetBornType = 3
	GadgetBornType_GADGET_BORN_MONSTER_DIE GadgetBornType = 4
	GadgetBornType_GADGET_BORN_GADGET      GadgetBornType = 5
	GadgetBornType_GADGET_BORN_GROUND      GadgetBornType = 6
)

// Enum value maps for GadgetBornType.
var (
	GadgetBornType_name = map[int32]string{
		0: "GADGET_BORN_NONE",
		1: "GADGET_BORN_IN_AIR",
		2: "GADGET_BORN_PLAYER",
		3: "GADGET_BORN_MONSTER_HIT",
		4: "GADGET_BORN_MONSTER_DIE",
		5: "GADGET_BORN_GADGET",
		6: "GADGET_BORN_GROUND",
	}
	GadgetBornType_value = map[string]int32{
		"GADGET_BORN_NONE":        0,
		"GADGET_BORN_IN_AIR":      1,
		"GADGET_BORN_PLAYER":      2,
		"GADGET_BORN_MONSTER_HIT": 3,
		"GADGET_BORN_MONSTER_DIE": 4,
		"GADGET_BORN_GADGET":      5,
		"GADGET_BORN_GROUND":      6,
	}
)

func (x GadgetBornType) Enum() *GadgetBornType {
	p := new(GadgetBornType)
	*p = x
	return p
}

func (x GadgetBornType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GadgetBornType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[19].Descriptor()
}

func (GadgetBornType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[19]
}

func (x GadgetBornType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GadgetBornType.Descriptor instead.
func (GadgetBornType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{19}
}

type MovingPlatformType int32

const (
	MovingPlatformType_MOVING_PLATFORM_NONE       MovingPlatformType = 0
	MovingPlatformType_MOVING_PLATFORM_USE_CONFIG MovingPlatformType = 1
	MovingPlatformType_MOVING_PLATFORM_ABILITY    MovingPlatformType = 2
	MovingPlatformType_MOVING_PLATFORM_ROUTE      MovingPlatformType = 3
)

// Enum value maps for MovingPlatformType.
var (
	MovingPlatformType_name = map[int32]string{
		0: "MOVING_PLATFORM_NONE",
		1: "MOVING_PLATFORM_USE_CONFIG",
		2: "MOVING_PLATFORM_ABILITY",
		3: "MOVING_PLATFORM_ROUTE",
	}
	MovingPlatformType_value = map[string]int32{
		"MOVING_PLATFORM_NONE":       0,
		"MOVING_PLATFORM_USE_CONFIG": 1,
		"MOVING_PLATFORM_ABILITY":    2,
		"MOVING_PLATFORM_ROUTE":      3,
	}
)

func (x MovingPlatformType) Enum() *MovingPlatformType {
	p := new(MovingPlatformType)
	*p = x
	return p
}

func (x MovingPlatformType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MovingPlatformType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[20].Descriptor()
}

func (MovingPlatformType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[20]
}

func (x MovingPlatformType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MovingPlatformType.Descriptor instead.
func (MovingPlatformType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{20}
}

type GadgetPlayType int32

const (
	GadgetPlayType_GADGET_PLAY_NONE     GadgetPlayType = 0
	GadgetPlayType_GADGET_PLAY_CRUSIBLE GadgetPlayType = 1
)

// Enum value maps for GadgetPlayType.
var (
	GadgetPlayType_name = map[int32]string{
		0: "GADGET_PLAY_NONE",
		1: "GADGET_PLAY_CRUSIBLE",
	}
	GadgetPlayType_value = map[string]int32{
		"GADGET_PLAY_NONE":     0,
		"GADGET_PLAY_CRUSIBLE": 1,
	}
)

func (x GadgetPlayType) Enum() *GadgetPlayType {
	p := new(GadgetPlayType)
	*p = x
	return p
}

func (x GadgetPlayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GadgetPlayType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[21].Descriptor()
}

func (GadgetPlayType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[21]
}

func (x GadgetPlayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GadgetPlayType.Descriptor instead.
func (GadgetPlayType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{21}
}

type FoundationStatus int32

const (
	FoundationStatus_FOUNDATION_STATUS_NONE     FoundationStatus = 0
	FoundationStatus_FOUNDATION_STATUS_INIT     FoundationStatus = 1
	FoundationStatus_FOUNDATION_STATUS_BUILDING FoundationStatus = 2
	FoundationStatus_FOUNDATION_STATUS_BUILT    FoundationStatus = 3
)

// Enum value maps for FoundationStatus.
var (
	FoundationStatus_name = map[int32]string{
		0: "FOUNDATION_STATUS_NONE",
		1: "FOUNDATION_STATUS_INIT",
		2: "FOUNDATION_STATUS_BUILDING",
		3: "FOUNDATION_STATUS_BUILT",
	}
	FoundationStatus_value = map[string]int32{
		"FOUNDATION_STATUS_NONE":     0,
		"FOUNDATION_STATUS_INIT":     1,
		"FOUNDATION_STATUS_BUILDING": 2,
		"FOUNDATION_STATUS_BUILT":    3,
	}
)

func (x FoundationStatus) Enum() *FoundationStatus {
	p := new(FoundationStatus)
	*p = x
	return p
}

func (x FoundationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FoundationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[22].Descriptor()
}

func (FoundationStatus) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[22]
}

func (x FoundationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FoundationStatus.Descriptor instead.
func (FoundationStatus) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{22}
}

type ChangHpReason int32

const (
	ChangHpReason_CHANGE_HP_NONE                      ChangHpReason = 0
	ChangHpReason_CHANGE_HP_SUB_AVATAR                ChangHpReason = 1
	ChangHpReason_CHANGE_HP_SUB_MONSTER               ChangHpReason = 2
	ChangHpReason_CHANGE_HP_SUB_GEAR                  ChangHpReason = 3
	ChangHpReason_CHANGE_HP_SUB_ENVIR                 ChangHpReason = 4
	ChangHpReason_CHANGE_HP_SUB_FALL                  ChangHpReason = 5
	ChangHpReason_CHANGE_HP_SUB_DRAWN                 ChangHpReason = 6
	ChangHpReason_CHANGE_HP_SUB_ABYSS                 ChangHpReason = 7
	ChangHpReason_CHANGE_HP_SUB_ABILITY               ChangHpReason = 8
	ChangHpReason_CHANGE_HP_SUB_SUMMON                ChangHpReason = 9
	ChangHpReason_CHANGE_HP_SUB_SCRIPT                ChangHpReason = 10
	ChangHpReason_CHANGE_HP_SUB_GM                    ChangHpReason = 11
	ChangHpReason_CHANGE_HP_SUB_KILL_SELF             ChangHpReason = 12
	ChangHpReason_CHANGE_HP_SUB_CLIMATE_COLD          ChangHpReason = 13
	ChangHpReason_CHANGE_HP_SUB_STORM_LIGHTNING       ChangHpReason = 14
	ChangHpReason_CHANGE_HP_SUB_KILL_SERVER_GADGET    ChangHpReason = 15
	ChangHpReason_CHANGE_HP_SUB_REPLACE               ChangHpReason = 16
	ChangHpReason_CHANGE_HP_SUB_PLAYER_LEAVE          ChangHpReason = 17
	ChangHpReason_CHANGE_HP_ATTACK_BY_ENERGY          ChangHpReason = 18
	ChangHpReason_CHANGE_HP_ATTACK_BY_RECYCLE         ChangHpReason = 19
	ChangHpReason_CHANGE_HP_BY_LUA                    ChangHpReason = 51
	ChangHpReason_CHANGE_HP_ADD_ABILITY               ChangHpReason = 101
	ChangHpReason_CHANGE_HP_ADD_ITEM                  ChangHpReason = 102
	ChangHpReason_CHANGE_HP_ADD_REVIVE                ChangHpReason = 103
	ChangHpReason_CHANGE_HP_ADD_UPGRADE               ChangHpReason = 104
	ChangHpReason_CHANGE_HP_ADD_STATUE                ChangHpReason = 105
	ChangHpReason_CHANGE_HP_ADD_BACKGROUND            ChangHpReason = 106
	ChangHpReason_CHANGE_HP_ADD_GM                    ChangHpReason = 107
	ChangHpReason_CHANGE_HP_ADD_TRIAL_AVATAR_ACTIVITY ChangHpReason = 108
	ChangHpReason_CHANGE_HP_ADD_ROUGUELIKE_SPRING     ChangHpReason = 109
)

// Enum value maps for ChangHpReason.
var (
	ChangHpReason_name = map[int32]string{
		0:   "CHANGE_HP_NONE",
		1:   "CHANGE_HP_SUB_AVATAR",
		2:   "CHANGE_HP_SUB_MONSTER",
		3:   "CHANGE_HP_SUB_GEAR",
		4:   "CHANGE_HP_SUB_ENVIR",
		5:   "CHANGE_HP_SUB_FALL",
		6:   "CHANGE_HP_SUB_DRAWN",
		7:   "CHANGE_HP_SUB_ABYSS",
		8:   "CHANGE_HP_SUB_ABILITY",
		9:   "CHANGE_HP_SUB_SUMMON",
		10:  "CHANGE_HP_SUB_SCRIPT",
		11:  "CHANGE_HP_SUB_GM",
		12:  "CHANGE_HP_SUB_KILL_SELF",
		13:  "CHANGE_HP_SUB_CLIMATE_COLD",
		14:  "CHANGE_HP_SUB_STORM_LIGHTNING",
		15:  "CHANGE_HP_SUB_KILL_SERVER_GADGET",
		16:  "CHANGE_HP_SUB_REPLACE",
		17:  "CHANGE_HP_SUB_PLAYER_LEAVE",
		18:  "CHANGE_HP_ATTACK_BY_ENERGY",
		19:  "CHANGE_HP_ATTACK_BY_RECYCLE",
		51:  "CHANGE_HP_BY_LUA",
		101: "CHANGE_HP_ADD_ABILITY",
		102: "CHANGE_HP_ADD_ITEM",
		103: "CHANGE_HP_ADD_REVIVE",
		104: "CHANGE_HP_ADD_UPGRADE",
		105: "CHANGE_HP_ADD_STATUE",
		106: "CHANGE_HP_ADD_BACKGROUND",
		107: "CHANGE_HP_ADD_GM",
		108: "CHANGE_HP_ADD_TRIAL_AVATAR_ACTIVITY",
		109: "CHANGE_HP_ADD_ROUGUELIKE_SPRING",
	}
	ChangHpReason_value = map[string]int32{
		"CHANGE_HP_NONE":                      0,
		"CHANGE_HP_SUB_AVATAR":                1,
		"CHANGE_HP_SUB_MONSTER":               2,
		"CHANGE_HP_SUB_GEAR":                  3,
		"CHANGE_HP_SUB_ENVIR":                 4,
		"CHANGE_HP_SUB_FALL":                  5,
		"CHANGE_HP_SUB_DRAWN":                 6,
		"CHANGE_HP_SUB_ABYSS":                 7,
		"CHANGE_HP_SUB_ABILITY":               8,
		"CHANGE_HP_SUB_SUMMON":                9,
		"CHANGE_HP_SUB_SCRIPT":                10,
		"CHANGE_HP_SUB_GM":                    11,
		"CHANGE_HP_SUB_KILL_SELF":             12,
		"CHANGE_HP_SUB_CLIMATE_COLD":          13,
		"CHANGE_HP_SUB_STORM_LIGHTNING":       14,
		"CHANGE_HP_SUB_KILL_SERVER_GADGET":    15,
		"CHANGE_HP_SUB_REPLACE":               16,
		"CHANGE_HP_SUB_PLAYER_LEAVE":          17,
		"CHANGE_HP_ATTACK_BY_ENERGY":          18,
		"CHANGE_HP_ATTACK_BY_RECYCLE":         19,
		"CHANGE_HP_BY_LUA":                    51,
		"CHANGE_HP_ADD_ABILITY":               101,
		"CHANGE_HP_ADD_ITEM":                  102,
		"CHANGE_HP_ADD_REVIVE":                103,
		"CHANGE_HP_ADD_UPGRADE":               104,
		"CHANGE_HP_ADD_STATUE":                105,
		"CHANGE_HP_ADD_BACKGROUND":            106,
		"CHANGE_HP_ADD_GM":                    107,
		"CHANGE_HP_ADD_TRIAL_AVATAR_ACTIVITY": 108,
		"CHANGE_HP_ADD_ROUGUELIKE_SPRING":     109,
	}
)

func (x ChangHpReason) Enum() *ChangHpReason {
	p := new(ChangHpReason)
	*p = x
	return p
}

func (x ChangHpReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangHpReason) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[23].Descriptor()
}

func (ChangHpReason) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[23]
}

func (x ChangHpReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangHpReason.Descriptor instead.
func (ChangHpReason) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{23}
}

type PlayerDieType int32

const (
	PlayerDieType_PLAYER_DIE_NONE            PlayerDieType = 0
	PlayerDieType_PLAYER_DIE_KILL_BY_MONSTER PlayerDieType = 1
	PlayerDieType_PLAYER_DIE_KILL_BY_GEAR    PlayerDieType = 2
	PlayerDieType_PLAYER_DIE_FALL            PlayerDieType = 3
	PlayerDieType_PLAYER_DIE_DRAWN           PlayerDieType = 4
	PlayerDieType_PLAYER_DIE_ABYSS           PlayerDieType = 5
	PlayerDieType_PLAYER_DIE_GM              PlayerDieType = 6
	PlayerDieType_PLAYER_DIE_CLIMATE_COLD    PlayerDieType = 7
	PlayerDieType_PLAYER_DIE_STORM_LIGHTING  PlayerDieType = 8
)

// Enum value maps for PlayerDieType.
var (
	PlayerDieType_name = map[int32]string{
		0: "PLAYER_DIE_NONE",
		1: "PLAYER_DIE_KILL_BY_MONSTER",
		2: "PLAYER_DIE_KILL_BY_GEAR",
		3: "PLAYER_DIE_FALL",
		4: "PLAYER_DIE_DRAWN",
		5: "PLAYER_DIE_ABYSS",
		6: "PLAYER_DIE_GM",
		7: "PLAYER_DIE_CLIMATE_COLD",
		8: "PLAYER_DIE_STORM_LIGHTING",
	}
	PlayerDieType_value = map[string]int32{
		"PLAYER_DIE_NONE":            0,
		"PLAYER_DIE_KILL_BY_MONSTER": 1,
		"PLAYER_DIE_KILL_BY_GEAR":    2,
		"PLAYER_DIE_FALL":            3,
		"PLAYER_DIE_DRAWN":           4,
		"PLAYER_DIE_ABYSS":           5,
		"PLAYER_DIE_GM":              6,
		"PLAYER_DIE_CLIMATE_COLD":    7,
		"PLAYER_DIE_STORM_LIGHTING":  8,
	}
)

func (x PlayerDieType) Enum() *PlayerDieType {
	p := new(PlayerDieType)
	*p = x
	return p
}

func (x PlayerDieType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerDieType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[24].Descriptor()
}

func (PlayerDieType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[24]
}

func (x PlayerDieType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerDieType.Descriptor instead.
func (PlayerDieType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{24}
}

type PlayerDieOption int32

const (
	PlayerDieOption_DIE_OPT_NONE   PlayerDieOption = 0
	PlayerDieOption_DIE_OPT_REPLAY PlayerDieOption = 1
	PlayerDieOption_DIE_OPT_CANCEL PlayerDieOption = 2
	PlayerDieOption_DIE_OPT_REVIVE PlayerDieOption = 3
)

// Enum value maps for PlayerDieOption.
var (
	PlayerDieOption_name = map[int32]string{
		0: "DIE_OPT_NONE",
		1: "DIE_OPT_REPLAY",
		2: "DIE_OPT_CANCEL",
		3: "DIE_OPT_REVIVE",
	}
	PlayerDieOption_value = map[string]int32{
		"DIE_OPT_NONE":   0,
		"DIE_OPT_REPLAY": 1,
		"DIE_OPT_CANCEL": 2,
		"DIE_OPT_REVIVE": 3,
	}
)

func (x PlayerDieOption) Enum() *PlayerDieOption {
	p := new(PlayerDieOption)
	*p = x
	return p
}

func (x PlayerDieOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerDieOption) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[25].Descriptor()
}

func (PlayerDieOption) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[25]
}

func (x PlayerDieOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerDieOption.Descriptor instead.
func (PlayerDieOption) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{25}
}

type FetterState int32

const (
	FetterState_FETTER_STATE_NONE     FetterState = 0
	FetterState_FETTER_STATE_NOT_OPEN FetterState = 1
	FetterState_FETTER_STATE_OPEN     FetterState = 2
	FetterState_FETTER_STATE_FINISH   FetterState = 3
	FetterState_FETTER_STATE_CONCEAL  FetterState = 4
)

// Enum value maps for FetterState.
var (
	FetterState_name = map[int32]string{
		0: "FETTER_STATE_NONE",
		1: "FETTER_STATE_NOT_OPEN",
		2: "FETTER_STATE_OPEN",
		3: "FETTER_STATE_FINISH",
		4: "FETTER_STATE_CONCEAL",
	}
	FetterState_value = map[string]int32{
		"FETTER_STATE_NONE":     0,
		"FETTER_STATE_NOT_OPEN": 1,
		"FETTER_STATE_OPEN":     2,
		"FETTER_STATE_FINISH":   3,
		"FETTER_STATE_CONCEAL":  4,
	}
)

func (x FetterState) Enum() *FetterState {
	p := new(FetterState)
	*p = x
	return p
}

func (x FetterState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FetterState) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[26].Descriptor()
}

func (FetterState) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[26]
}

func (x FetterState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FetterState.Descriptor instead.
func (FetterState) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{26}
}

type AvatarExpeditionState int32

const (
	AvatarExpeditionState_AVATAR_EXPEDITION_NONE                 AvatarExpeditionState = 0
	AvatarExpeditionState_AVATAR_EXPEDITION_DOING                AvatarExpeditionState = 1
	AvatarExpeditionState_AVATAR_EXPEDITION_FINISH_WAIT_REWARD   AvatarExpeditionState = 2
	AvatarExpeditionState_AVATAR_EXPEDITION_CALLBACK_WAIT_REWARD AvatarExpeditionState = 3
	AvatarExpeditionState_AVATAR_EXPEDITION_LOCKED               AvatarExpeditionState = 4
)

// Enum value maps for AvatarExpeditionState.
var (
	AvatarExpeditionState_name = map[int32]string{
		0: "AVATAR_EXPEDITION_NONE",
		1: "AVATAR_EXPEDITION_DOING",
		2: "AVATAR_EXPEDITION_FINISH_WAIT_REWARD",
		3: "AVATAR_EXPEDITION_CALLBACK_WAIT_REWARD",
		4: "AVATAR_EXPEDITION_LOCKED",
	}
	AvatarExpeditionState_value = map[string]int32{
		"AVATAR_EXPEDITION_NONE":                 0,
		"AVATAR_EXPEDITION_DOING":                1,
		"AVATAR_EXPEDITION_FINISH_WAIT_REWARD":   2,
		"AVATAR_EXPEDITION_CALLBACK_WAIT_REWARD": 3,
		"AVATAR_EXPEDITION_LOCKED":               4,
	}
)

func (x AvatarExpeditionState) Enum() *AvatarExpeditionState {
	p := new(AvatarExpeditionState)
	*p = x
	return p
}

func (x AvatarExpeditionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvatarExpeditionState) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[27].Descriptor()
}

func (AvatarExpeditionState) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[27]
}

func (x AvatarExpeditionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvatarExpeditionState.Descriptor instead.
func (AvatarExpeditionState) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{27}
}

type AvatarType int32

const (
	AvatarType_AVATAR_TYPE_NONE   AvatarType = 0
	AvatarType_AVATAR_TYPE_FORMAL AvatarType = 1
	AvatarType_AVATAR_TYPE_TRIAL  AvatarType = 2
	AvatarType_AVATAR_TYPE_MIRROR AvatarType = 3
)

// Enum value maps for AvatarType.
var (
	AvatarType_name = map[int32]string{
		0: "AVATAR_TYPE_NONE",
		1: "AVATAR_TYPE_FORMAL",
		2: "AVATAR_TYPE_TRIAL",
		3: "AVATAR_TYPE_MIRROR",
	}
	AvatarType_value = map[string]int32{
		"AVATAR_TYPE_NONE":   0,
		"AVATAR_TYPE_FORMAL": 1,
		"AVATAR_TYPE_TRIAL":  2,
		"AVATAR_TYPE_MIRROR": 3,
	}
)

func (x AvatarType) Enum() *AvatarType {
	p := new(AvatarType)
	*p = x
	return p
}

func (x AvatarType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvatarType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[28].Descriptor()
}

func (AvatarType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[28]
}

func (x AvatarType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvatarType.Descriptor instead.
func (AvatarType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{28}
}

type EventTriggerType int32

const (
	EventTriggerType_EVENT_TRIGGER_NONE        EventTriggerType = 0
	EventTriggerType_EVENT_TRIGGER_ENTER_FORCE EventTriggerType = 1
)

// Enum value maps for EventTriggerType.
var (
	EventTriggerType_name = map[int32]string{
		0: "EVENT_TRIGGER_NONE",
		1: "EVENT_TRIGGER_ENTER_FORCE",
	}
	EventTriggerType_value = map[string]int32{
		"EVENT_TRIGGER_NONE":        0,
		"EVENT_TRIGGER_ENTER_FORCE": 1,
	}
)

func (x EventTriggerType) Enum() *EventTriggerType {
	p := new(EventTriggerType)
	*p = x
	return p
}

func (x EventTriggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventTriggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[29].Descriptor()
}

func (EventTriggerType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[29]
}

func (x EventTriggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventTriggerType.Descriptor instead.
func (EventTriggerType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{29}
}

type MailCollectState int32

const (
	MailCollectState_MAIL_COLLECTIBLE_UNKONW      MailCollectState = 0
	MailCollectState_MAIL_NOT_COLLECTIBLE         MailCollectState = 1
	MailCollectState_MAIL_COLLECTIBLE_UNCOLLECTED MailCollectState = 2
	MailCollectState_MAIL_COLLECTIBLE_COLLECTED   MailCollectState = 3
)

// Enum value maps for MailCollectState.
var (
	MailCollectState_name = map[int32]string{
		0: "MAIL_COLLECTIBLE_UNKONW",
		1: "MAIL_NOT_COLLECTIBLE",
		2: "MAIL_COLLECTIBLE_UNCOLLECTED",
		3: "MAIL_COLLECTIBLE_COLLECTED",
	}
	MailCollectState_value = map[string]int32{
		"MAIL_COLLECTIBLE_UNKONW":      0,
		"MAIL_NOT_COLLECTIBLE":         1,
		"MAIL_COLLECTIBLE_UNCOLLECTED": 2,
		"MAIL_COLLECTIBLE_COLLECTED":   3,
	}
)

func (x MailCollectState) Enum() *MailCollectState {
	p := new(MailCollectState)
	*p = x
	return p
}

func (x MailCollectState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MailCollectState) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[30].Descriptor()
}

func (MailCollectState) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[30]
}

func (x MailCollectState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MailCollectState.Descriptor instead.
func (MailCollectState) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{30}
}

type MpSettingType int32

const (
	MpSettingType_MP_SETTING_NO_ENTER          MpSettingType = 0
	MpSettingType_MP_SETTING_ENTER_FREELY      MpSettingType = 1
	MpSettingType_MP_SETTING_ENTER_AFTER_APPLY MpSettingType = 2
)

// Enum value maps for MpSettingType.
var (
	MpSettingType_name = map[int32]string{
		0: "MP_SETTING_NO_ENTER",
		1: "MP_SETTING_ENTER_FREELY",
		2: "MP_SETTING_ENTER_AFTER_APPLY",
	}
	MpSettingType_value = map[string]int32{
		"MP_SETTING_NO_ENTER":          0,
		"MP_SETTING_ENTER_FREELY":      1,
		"MP_SETTING_ENTER_AFTER_APPLY": 2,
	}
)

func (x MpSettingType) Enum() *MpSettingType {
	p := new(MpSettingType)
	*p = x
	return p
}

func (x MpSettingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MpSettingType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[31].Descriptor()
}

func (MpSettingType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[31]
}

func (x MpSettingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MpSettingType.Descriptor instead.
func (MpSettingType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{31}
}

type MathExpressionType int32

const (
	MathExpressionType_MATH_EXPR_NONE             MathExpressionType = 0
	MathExpressionType_MATH_EXPR_LEVEL            MathExpressionType = 1
	MathExpressionType_MATH_EXPR_REGISTER_TIME    MathExpressionType = 2
	MathExpressionType_MATH_EXPR_LAST_LOGIN_TIME  MathExpressionType = 3
	MathExpressionType_MATH_EXPR_TOTAL_LOGIN_DAYS MathExpressionType = 4
	MathExpressionType_MATH_EXPR_PLATFORM         MathExpressionType = 5
)

// Enum value maps for MathExpressionType.
var (
	MathExpressionType_name = map[int32]string{
		0: "MATH_EXPR_NONE",
		1: "MATH_EXPR_LEVEL",
		2: "MATH_EXPR_REGISTER_TIME",
		3: "MATH_EXPR_LAST_LOGIN_TIME",
		4: "MATH_EXPR_TOTAL_LOGIN_DAYS",
		5: "MATH_EXPR_PLATFORM",
	}
	MathExpressionType_value = map[string]int32{
		"MATH_EXPR_NONE":             0,
		"MATH_EXPR_LEVEL":            1,
		"MATH_EXPR_REGISTER_TIME":    2,
		"MATH_EXPR_LAST_LOGIN_TIME":  3,
		"MATH_EXPR_TOTAL_LOGIN_DAYS": 4,
		"MATH_EXPR_PLATFORM":         5,
	}
)

func (x MathExpressionType) Enum() *MathExpressionType {
	p := new(MathExpressionType)
	*p = x
	return p
}

func (x MathExpressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MathExpressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[32].Descriptor()
}

func (MathExpressionType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[32]
}

func (x MathExpressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MathExpressionType.Descriptor instead.
func (MathExpressionType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{32}
}

type LoginRewardConfigType int32

const (
	LoginRewardConfigType_LOGIN_REWARD_IMMEDIDATE LoginRewardConfigType = 0
	LoginRewardConfigType_LOGIN_REWARD_FIRST      LoginRewardConfigType = 1
)

// Enum value maps for LoginRewardConfigType.
var (
	LoginRewardConfigType_name = map[int32]string{
		0: "LOGIN_REWARD_IMMEDIDATE",
		1: "LOGIN_REWARD_FIRST",
	}
	LoginRewardConfigType_value = map[string]int32{
		"LOGIN_REWARD_IMMEDIDATE": 0,
		"LOGIN_REWARD_FIRST":      1,
	}
)

func (x LoginRewardConfigType) Enum() *LoginRewardConfigType {
	p := new(LoginRewardConfigType)
	*p = x
	return p
}

func (x LoginRewardConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginRewardConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[33].Descriptor()
}

func (LoginRewardConfigType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[33]
}

func (x LoginRewardConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginRewardConfigType.Descriptor instead.
func (LoginRewardConfigType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{33}
}

type LanguageType int32

const (
	LanguageType_LANGUAGE_NONE LanguageType = 0
	LanguageType_LANGUAGE_EN   LanguageType = 1
	LanguageType_LANGUAGE_SC   LanguageType = 2
	LanguageType_LANGUAGE_TC   LanguageType = 3
	LanguageType_LANGUAGE_FR   LanguageType = 4
	LanguageType_LANGUAGE_DE   LanguageType = 5
	LanguageType_LANGUAGE_ES   LanguageType = 6
	LanguageType_LANGUAGE_PT   LanguageType = 7
	LanguageType_LANGUAGE_RU   LanguageType = 8
	LanguageType_LANGUAGE_JP   LanguageType = 9
	LanguageType_LANGUAGE_KR   LanguageType = 10
	LanguageType_LANGUAGE_TH   LanguageType = 11
	LanguageType_LANGUAGE_VN   LanguageType = 12
	LanguageType_LANGUAGE_ID   LanguageType = 13
	LanguageType_LANGUAGE_TR   LanguageType = 14
	LanguageType_LANGUAGE_IT   LanguageType = 15
)

// Enum value maps for LanguageType.
var (
	LanguageType_name = map[int32]string{
		0:  "LANGUAGE_NONE",
		1:  "LANGUAGE_EN",
		2:  "LANGUAGE_SC",
		3:  "LANGUAGE_TC",
		4:  "LANGUAGE_FR",
		5:  "LANGUAGE_DE",
		6:  "LANGUAGE_ES",
		7:  "LANGUAGE_PT",
		8:  "LANGUAGE_RU",
		9:  "LANGUAGE_JP",
		10: "LANGUAGE_KR",
		11: "LANGUAGE_TH",
		12: "LANGUAGE_VN",
		13: "LANGUAGE_ID",
		14: "LANGUAGE_TR",
		15: "LANGUAGE_IT",
	}
	LanguageType_value = map[string]int32{
		"LANGUAGE_NONE": 0,
		"LANGUAGE_EN":   1,
		"LANGUAGE_SC":   2,
		"LANGUAGE_TC":   3,
		"LANGUAGE_FR":   4,
		"LANGUAGE_DE":   5,
		"LANGUAGE_ES":   6,
		"LANGUAGE_PT":   7,
		"LANGUAGE_RU":   8,
		"LANGUAGE_JP":   9,
		"LANGUAGE_KR":   10,
		"LANGUAGE_TH":   11,
		"LANGUAGE_VN":   12,
		"LANGUAGE_ID":   13,
		"LANGUAGE_TR":   14,
		"LANGUAGE_IT":   15,
	}
)

func (x LanguageType) Enum() *LanguageType {
	p := new(LanguageType)
	*p = x
	return p
}

func (x LanguageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LanguageType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[34].Descriptor()
}

func (LanguageType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[34]
}

func (x LanguageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LanguageType.Descriptor instead.
func (LanguageType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{34}
}

type PlatformType int32

const (
	PlatformType_EDITOR                   PlatformType = 0
	PlatformType_IOS                      PlatformType = 1
	PlatformType_ANDROID                  PlatformType = 2
	PlatformType_PC                       PlatformType = 3
	PlatformType_PS4                      PlatformType = 4
	PlatformType_SERVER                   PlatformType = 5
	PlatformType_CLOUD_ANDROID            PlatformType = 6
	PlatformType_CLOUD_IOS                PlatformType = 7
	PlatformType_PS5                      PlatformType = 8
	PlatformType_CLOUD_WEB                PlatformType = 9
	PlatformType_CLOUD_TV                 PlatformType = 10
	PlatformType_CLOUD_MAC                PlatformType = 11
	PlatformType_CLOUD_PC                 PlatformType = 12
	PlatformType_CLOUD_THIRD_PARTY_MOBILE PlatformType = 13
	PlatformType_CLOUD_THIRD_PARTY_PC     PlatformType = 14
)

// Enum value maps for PlatformType.
var (
	PlatformType_name = map[int32]string{
		0:  "EDITOR",
		1:  "IOS",
		2:  "ANDROID",
		3:  "PC",
		4:  "PS4",
		5:  "SERVER",
		6:  "CLOUD_ANDROID",
		7:  "CLOUD_IOS",
		8:  "PS5",
		9:  "CLOUD_WEB",
		10: "CLOUD_TV",
		11: "CLOUD_MAC",
		12: "CLOUD_PC",
		13: "CLOUD_THIRD_PARTY_MOBILE",
		14: "CLOUD_THIRD_PARTY_PC",
	}
	PlatformType_value = map[string]int32{
		"EDITOR":                   0,
		"IOS":                      1,
		"ANDROID":                  2,
		"PC":                       3,
		"PS4":                      4,
		"SERVER":                   5,
		"CLOUD_ANDROID":            6,
		"CLOUD_IOS":                7,
		"PS5":                      8,
		"CLOUD_WEB":                9,
		"CLOUD_TV":                 10,
		"CLOUD_MAC":                11,
		"CLOUD_PC":                 12,
		"CLOUD_THIRD_PARTY_MOBILE": 13,
		"CLOUD_THIRD_PARTY_PC":     14,
	}
)

func (x PlatformType) Enum() *PlatformType {
	p := new(PlatformType)
	*p = x
	return p
}

func (x PlatformType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlatformType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[35].Descriptor()
}

func (PlatformType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[35]
}

func (x PlatformType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlatformType.Descriptor instead.
func (PlatformType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{35}
}

type MapMarkPointType int32

const (
	MapMarkPointType_NPC        MapMarkPointType = 0
	MapMarkPointType_QUEST      MapMarkPointType = 1
	MapMarkPointType_SPECIAL    MapMarkPointType = 2
	MapMarkPointType_MINE       MapMarkPointType = 3
	MapMarkPointType_COLLECTION MapMarkPointType = 4
	MapMarkPointType_MONSTER    MapMarkPointType = 5
	MapMarkPointType_FISH_POOL  MapMarkPointType = 6
)

// Enum value maps for MapMarkPointType.
var (
	MapMarkPointType_name = map[int32]string{
		0: "NPC",
		1: "QUEST",
		2: "SPECIAL",
		3: "MINE",
		4: "COLLECTION",
		5: "MONSTER",
		6: "FISH_POOL",
	}
	MapMarkPointType_value = map[string]int32{
		"NPC":        0,
		"QUEST":      1,
		"SPECIAL":    2,
		"MINE":       3,
		"COLLECTION": 4,
		"MONSTER":    5,
		"FISH_POOL":  6,
	}
)

func (x MapMarkPointType) Enum() *MapMarkPointType {
	p := new(MapMarkPointType)
	*p = x
	return p
}

func (x MapMarkPointType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MapMarkPointType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[36].Descriptor()
}

func (MapMarkPointType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[36]
}

func (x MapMarkPointType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MapMarkPointType.Descriptor instead.
func (MapMarkPointType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{36}
}

type MapMarkFromType int32

const (
	MapMarkFromType_MAP_MARK_FROM_TYPE_NOE     MapMarkFromType = 0
	MapMarkFromType_MAP_MARK_FROM_TYPE_MONSTER MapMarkFromType = 1
	MapMarkFromType_MAP_MARK_FROM_TYPE_QUEST   MapMarkFromType = 2
)

// Enum value maps for MapMarkFromType.
var (
	MapMarkFromType_name = map[int32]string{
		0: "MAP_MARK_FROM_TYPE_NOE",
		1: "MAP_MARK_FROM_TYPE_MONSTER",
		2: "MAP_MARK_FROM_TYPE_QUEST",
	}
	MapMarkFromType_value = map[string]int32{
		"MAP_MARK_FROM_TYPE_NOE":     0,
		"MAP_MARK_FROM_TYPE_MONSTER": 1,
		"MAP_MARK_FROM_TYPE_QUEST":   2,
	}
)

func (x MapMarkFromType) Enum() *MapMarkFromType {
	p := new(MapMarkFromType)
	*p = x
	return p
}

func (x MapMarkFromType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MapMarkFromType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[37].Descriptor()
}

func (MapMarkFromType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[37]
}

func (x MapMarkFromType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MapMarkFromType.Descriptor instead.
func (MapMarkFromType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{37}
}

type DungeonCandidateTeamInviteState int32

const (
	DungeonCandidateTeamInviteState_DUNGEON_CANDIDATE_TEAM_INVITE_STATE_NONE   DungeonCandidateTeamInviteState = 0
	DungeonCandidateTeamInviteState_DUNGEON_CANDIDATE_TEAM_INVITE_STATE_SEND   DungeonCandidateTeamInviteState = 1
	DungeonCandidateTeamInviteState_DUNGEON_CANDIDATE_TEAM_INVITE_STATE_ACCEPT DungeonCandidateTeamInviteState = 2
	DungeonCandidateTeamInviteState_DUNGEON_CANDIDATE_TEAM_INVITE_STATE_REFUSE DungeonCandidateTeamInviteState = 3
)

// Enum value maps for DungeonCandidateTeamInviteState.
var (
	DungeonCandidateTeamInviteState_name = map[int32]string{
		0: "DUNGEON_CANDIDATE_TEAM_INVITE_STATE_NONE",
		1: "DUNGEON_CANDIDATE_TEAM_INVITE_STATE_SEND",
		2: "DUNGEON_CANDIDATE_TEAM_INVITE_STATE_ACCEPT",
		3: "DUNGEON_CANDIDATE_TEAM_INVITE_STATE_REFUSE",
	}
	DungeonCandidateTeamInviteState_value = map[string]int32{
		"DUNGEON_CANDIDATE_TEAM_INVITE_STATE_NONE":   0,
		"DUNGEON_CANDIDATE_TEAM_INVITE_STATE_SEND":   1,
		"DUNGEON_CANDIDATE_TEAM_INVITE_STATE_ACCEPT": 2,
		"DUNGEON_CANDIDATE_TEAM_INVITE_STATE_REFUSE": 3,
	}
)

func (x DungeonCandidateTeamInviteState) Enum() *DungeonCandidateTeamInviteState {
	p := new(DungeonCandidateTeamInviteState)
	*p = x
	return p
}

func (x DungeonCandidateTeamInviteState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamInviteState) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[38].Descriptor()
}

func (DungeonCandidateTeamInviteState) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[38]
}

func (x DungeonCandidateTeamInviteState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamInviteState.Descriptor instead.
func (DungeonCandidateTeamInviteState) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{38}
}

type MonsterGuestBanDrop int32

const (
	MonsterGuestBanDrop_MONSTER_GUEST_BAN_NONE         MonsterGuestBanDrop = 0
	MonsterGuestBanDrop_MONSTER_GUEST_BAN_DIE_EXP      MonsterGuestBanDrop = 1
	MonsterGuestBanDrop_MONSTER_GUEST_BAN_DIE_LUA      MonsterGuestBanDrop = 2
	MonsterGuestBanDrop_MONSTER_GUEST_BAN_DIE_EXCEL    MonsterGuestBanDrop = 4
	MonsterGuestBanDrop_MONSTER_GUEST_BAN_DIE_ACTIVITY MonsterGuestBanDrop = 8
	MonsterGuestBanDrop_MONSTER_GUEST_BAN_DROP_HP      MonsterGuestBanDrop = 16
	MonsterGuestBanDrop_MONSTER_GUEST_BAN_SUBFIELD     MonsterGuestBanDrop = 32
)

// Enum value maps for MonsterGuestBanDrop.
var (
	MonsterGuestBanDrop_name = map[int32]string{
		0:  "MONSTER_GUEST_BAN_NONE",
		1:  "MONSTER_GUEST_BAN_DIE_EXP",
		2:  "MONSTER_GUEST_BAN_DIE_LUA",
		4:  "MONSTER_GUEST_BAN_DIE_EXCEL",
		8:  "MONSTER_GUEST_BAN_DIE_ACTIVITY",
		16: "MONSTER_GUEST_BAN_DROP_HP",
		32: "MONSTER_GUEST_BAN_SUBFIELD",
	}
	MonsterGuestBanDrop_value = map[string]int32{
		"MONSTER_GUEST_BAN_NONE":         0,
		"MONSTER_GUEST_BAN_DIE_EXP":      1,
		"MONSTER_GUEST_BAN_DIE_LUA":      2,
		"MONSTER_GUEST_BAN_DIE_EXCEL":    4,
		"MONSTER_GUEST_BAN_DIE_ACTIVITY": 8,
		"MONSTER_GUEST_BAN_DROP_HP":      16,
		"MONSTER_GUEST_BAN_SUBFIELD":     32,
	}
)

func (x MonsterGuestBanDrop) Enum() *MonsterGuestBanDrop {
	p := new(MonsterGuestBanDrop)
	*p = x
	return p
}

func (x MonsterGuestBanDrop) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonsterGuestBanDrop) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[39].Descriptor()
}

func (MonsterGuestBanDrop) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[39]
}

func (x MonsterGuestBanDrop) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MonsterGuestBanDrop.Descriptor instead.
func (MonsterGuestBanDrop) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{39}
}

type GadgetGuestBanDrop int32

const (
	GadgetGuestBanDrop_GADGET_GUEST_BAN_NONE     GadgetGuestBanDrop = 0
	GadgetGuestBanDrop_GADGET_GUEST_BAN_DIE_LUA  GadgetGuestBanDrop = 1
	GadgetGuestBanDrop_GADGET_GUEST_BAN_SUBFIELD GadgetGuestBanDrop = 2
)

// Enum value maps for GadgetGuestBanDrop.
var (
	GadgetGuestBanDrop_name = map[int32]string{
		0: "GADGET_GUEST_BAN_NONE",
		1: "GADGET_GUEST_BAN_DIE_LUA",
		2: "GADGET_GUEST_BAN_SUBFIELD",
	}
	GadgetGuestBanDrop_value = map[string]int32{
		"GADGET_GUEST_BAN_NONE":     0,
		"GADGET_GUEST_BAN_DIE_LUA":  1,
		"GADGET_GUEST_BAN_SUBFIELD": 2,
	}
)

func (x GadgetGuestBanDrop) Enum() *GadgetGuestBanDrop {
	p := new(GadgetGuestBanDrop)
	*p = x
	return p
}

func (x GadgetGuestBanDrop) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GadgetGuestBanDrop) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[40].Descriptor()
}

func (GadgetGuestBanDrop) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[40]
}

func (x GadgetGuestBanDrop) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GadgetGuestBanDrop.Descriptor instead.
func (GadgetGuestBanDrop) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{40}
}

type GroupLoadStrategy int32

const (
	GroupLoadStrategy_GROUP_LOAD_NONE   GroupLoadStrategy = 0
	GroupLoadStrategy_GROUP_LOAD_SINGLE GroupLoadStrategy = 1
	GroupLoadStrategy_GROUP_LOAD_MULTI  GroupLoadStrategy = 2
	GroupLoadStrategy_GROUP_LOAD_ALL    GroupLoadStrategy = 3
)

// Enum value maps for GroupLoadStrategy.
var (
	GroupLoadStrategy_name = map[int32]string{
		0: "GROUP_LOAD_NONE",
		1: "GROUP_LOAD_SINGLE",
		2: "GROUP_LOAD_MULTI",
		3: "GROUP_LOAD_ALL",
	}
	GroupLoadStrategy_value = map[string]int32{
		"GROUP_LOAD_NONE":   0,
		"GROUP_LOAD_SINGLE": 1,
		"GROUP_LOAD_MULTI":  2,
		"GROUP_LOAD_ALL":    3,
	}
)

func (x GroupLoadStrategy) Enum() *GroupLoadStrategy {
	p := new(GroupLoadStrategy)
	*p = x
	return p
}

func (x GroupLoadStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupLoadStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[41].Descriptor()
}

func (GroupLoadStrategy) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[41]
}

func (x GroupLoadStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupLoadStrategy.Descriptor instead.
func (GroupLoadStrategy) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{41}
}

type MatchType int32

const (
	MatchType_MATCH_TYPE_NONE       MatchType = 0
	MatchType_MATCH_TYPE_DUNGEON    MatchType = 1
	MatchType_MATCH_TYPE_MP_PLAY    MatchType = 2
	MatchType_MATCH_TYPE_MECHANICUS MatchType = 3
	MatchType_MATCH_TYPE_GENERAL    MatchType = 4
	MatchType_MATCH_TYPE_GCG        MatchType = 5
)

// Enum value maps for MatchType.
var (
	MatchType_name = map[int32]string{
		0: "MATCH_TYPE_NONE",
		1: "MATCH_TYPE_DUNGEON",
		2: "MATCH_TYPE_MP_PLAY",
		3: "MATCH_TYPE_MECHANICUS",
		4: "MATCH_TYPE_GENERAL",
		5: "MATCH_TYPE_GCG",
	}
	MatchType_value = map[string]int32{
		"MATCH_TYPE_NONE":       0,
		"MATCH_TYPE_DUNGEON":    1,
		"MATCH_TYPE_MP_PLAY":    2,
		"MATCH_TYPE_MECHANICUS": 3,
		"MATCH_TYPE_GENERAL":    4,
		"MATCH_TYPE_GCG":        5,
	}
)

func (x MatchType) Enum() *MatchType {
	p := new(MatchType)
	*p = x
	return p
}

func (x MatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[42].Descriptor()
}

func (MatchType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[42]
}

func (x MatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchType.Descriptor instead.
func (MatchType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{42}
}

type MpPlayType int32

const (
	MpPlayType_MP_PLAY_NONE     MpPlayType = 0
	MpPlayType_MP_PLAY_DUNGEON  MpPlayType = 1
	MpPlayType_MP_PLAY_CRUCIBLE MpPlayType = 2
)

// Enum value maps for MpPlayType.
var (
	MpPlayType_name = map[int32]string{
		0: "MP_PLAY_NONE",
		1: "MP_PLAY_DUNGEON",
		2: "MP_PLAY_CRUCIBLE",
	}
	MpPlayType_value = map[string]int32{
		"MP_PLAY_NONE":     0,
		"MP_PLAY_DUNGEON":  1,
		"MP_PLAY_CRUCIBLE": 2,
	}
)

func (x MpPlayType) Enum() *MpPlayType {
	p := new(MpPlayType)
	*p = x
	return p
}

func (x MpPlayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MpPlayType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[43].Descriptor()
}

func (MpPlayType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[43]
}

func (x MpPlayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MpPlayType.Descriptor instead.
func (MpPlayType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{43}
}

type OpActivityType int32

const (
	OpActivityType_OP_ACTIVITY_NONE            OpActivityType = 0
	OpActivityType_OP_ACTIVITY_SIGN_IN         OpActivityType = 1
	OpActivityType_OP_ACTIVITY_BONUS           OpActivityType = 2
	OpActivityType_OP_ACTIVITY_TRAVEL_BUSINESS OpActivityType = 3
	OpActivityType_OP_ACTIVITY_CRUCIBLE        OpActivityType = 4
)

// Enum value maps for OpActivityType.
var (
	OpActivityType_name = map[int32]string{
		0: "OP_ACTIVITY_NONE",
		1: "OP_ACTIVITY_SIGN_IN",
		2: "OP_ACTIVITY_BONUS",
		3: "OP_ACTIVITY_TRAVEL_BUSINESS",
		4: "OP_ACTIVITY_CRUCIBLE",
	}
	OpActivityType_value = map[string]int32{
		"OP_ACTIVITY_NONE":            0,
		"OP_ACTIVITY_SIGN_IN":         1,
		"OP_ACTIVITY_BONUS":           2,
		"OP_ACTIVITY_TRAVEL_BUSINESS": 3,
		"OP_ACTIVITY_CRUCIBLE":        4,
	}
)

func (x OpActivityType) Enum() *OpActivityType {
	p := new(OpActivityType)
	*p = x
	return p
}

func (x OpActivityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpActivityType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[44].Descriptor()
}

func (OpActivityType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[44]
}

func (x OpActivityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpActivityType.Descriptor instead.
func (OpActivityType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{44}
}

type MatchReason int32

const (
	MatchReason_MATCH_NONE            MatchReason = 0
	MatchReason_MATCH_FINISH          MatchReason = 1
	MatchReason_MATCH_PLAYER_CANCEL   MatchReason = 2
	MatchReason_MATCH_TIMEOUT         MatchReason = 3
	MatchReason_MATCH_PLAYER_CONFIRM  MatchReason = 4
	MatchReason_MATCH_FAILED          MatchReason = 5
	MatchReason_MATCH_SYSTEM_ERROR    MatchReason = 6
	MatchReason_MATCH_INTERRUPTED     MatchReason = 7
	MatchReason_MATCH_MP_UNAVAILABLE  MatchReason = 8
	MatchReason_MATCH_CONFIRM_TIMEOUT MatchReason = 9
)

// Enum value maps for MatchReason.
var (
	MatchReason_name = map[int32]string{
		0: "MATCH_NONE",
		1: "MATCH_FINISH",
		2: "MATCH_PLAYER_CANCEL",
		3: "MATCH_TIMEOUT",
		4: "MATCH_PLAYER_CONFIRM",
		5: "MATCH_FAILED",
		6: "MATCH_SYSTEM_ERROR",
		7: "MATCH_INTERRUPTED",
		8: "MATCH_MP_UNAVAILABLE",
		9: "MATCH_CONFIRM_TIMEOUT",
	}
	MatchReason_value = map[string]int32{
		"MATCH_NONE":            0,
		"MATCH_FINISH":          1,
		"MATCH_PLAYER_CANCEL":   2,
		"MATCH_TIMEOUT":         3,
		"MATCH_PLAYER_CONFIRM":  4,
		"MATCH_FAILED":          5,
		"MATCH_SYSTEM_ERROR":    6,
		"MATCH_INTERRUPTED":     7,
		"MATCH_MP_UNAVAILABLE":  8,
		"MATCH_CONFIRM_TIMEOUT": 9,
	}
)

func (x MatchReason) Enum() *MatchReason {
	p := new(MatchReason)
	*p = x
	return p
}

func (x MatchReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchReason) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[45].Descriptor()
}

func (MatchReason) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[45]
}

func (x MatchReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchReason.Descriptor instead.
func (MatchReason) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{45}
}

type LuaShellNotifyType int32

const (
	LuaShellNotifyType_LUASHELL_NOTIFY LuaShellNotifyType = 0
	LuaShellNotifyType_LUASHELL_HIDE   LuaShellNotifyType = 1
)

// Enum value maps for LuaShellNotifyType.
var (
	LuaShellNotifyType_name = map[int32]string{
		0: "LUASHELL_NOTIFY",
		1: "LUASHELL_HIDE",
	}
	LuaShellNotifyType_value = map[string]int32{
		"LUASHELL_NOTIFY": 0,
		"LUASHELL_HIDE":   1,
	}
)

func (x LuaShellNotifyType) Enum() *LuaShellNotifyType {
	p := new(LuaShellNotifyType)
	*p = x
	return p
}

func (x LuaShellNotifyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LuaShellNotifyType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[46].Descriptor()
}

func (LuaShellNotifyType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[46]
}

func (x LuaShellNotifyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LuaShellNotifyType.Descriptor instead.
func (LuaShellNotifyType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{46}
}

type LuaShellType int32

const (
	LuaShellType_LUASHELL_NONE       LuaShellType = 0
	LuaShellType_LUASHELL_NORMAL     LuaShellType = 1
	LuaShellType_LUASHELL_SECURITY   LuaShellType = 2
	LuaShellType_LUASHELL_SHELL_CODE LuaShellType = 3
)

// Enum value maps for LuaShellType.
var (
	LuaShellType_name = map[int32]string{
		0: "LUASHELL_NONE",
		1: "LUASHELL_NORMAL",
		2: "LUASHELL_SECURITY",
		3: "LUASHELL_SHELL_CODE",
	}
	LuaShellType_value = map[string]int32{
		"LUASHELL_NONE":       0,
		"LUASHELL_NORMAL":     1,
		"LUASHELL_SECURITY":   2,
		"LUASHELL_SHELL_CODE": 3,
	}
)

func (x LuaShellType) Enum() *LuaShellType {
	p := new(LuaShellType)
	*p = x
	return p
}

func (x LuaShellType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LuaShellType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[47].Descriptor()
}

func (LuaShellType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[47]
}

func (x LuaShellType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LuaShellType.Descriptor instead.
func (LuaShellType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{47}
}

type SalesmanStatusType int32

const (
	SalesmanStatusType_SALESMAN_STATUS_NONE      SalesmanStatusType = 0
	SalesmanStatusType_SALESMAN_STATUS_UNSTARTED SalesmanStatusType = 1
	SalesmanStatusType_SALESMAN_STATUS_STARTED   SalesmanStatusType = 2
	SalesmanStatusType_SALESMAN_STATUS_DELIVERED SalesmanStatusType = 3
)

// Enum value maps for SalesmanStatusType.
var (
	SalesmanStatusType_name = map[int32]string{
		0: "SALESMAN_STATUS_NONE",
		1: "SALESMAN_STATUS_UNSTARTED",
		2: "SALESMAN_STATUS_STARTED",
		3: "SALESMAN_STATUS_DELIVERED",
	}
	SalesmanStatusType_value = map[string]int32{
		"SALESMAN_STATUS_NONE":      0,
		"SALESMAN_STATUS_UNSTARTED": 1,
		"SALESMAN_STATUS_STARTED":   2,
		"SALESMAN_STATUS_DELIVERED": 3,
	}
)

func (x SalesmanStatusType) Enum() *SalesmanStatusType {
	p := new(SalesmanStatusType)
	*p = x
	return p
}

func (x SalesmanStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SalesmanStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[48].Descriptor()
}

func (SalesmanStatusType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[48]
}

func (x SalesmanStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SalesmanStatusType.Descriptor instead.
func (SalesmanStatusType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{48}
}

type SecurityCheckType int32

const (
	SecurityCheckType_SECURITY_CHECK_NONE  SecurityCheckType = 0
	SecurityCheckType_SECURITY_CHECK_LOGIN SecurityCheckType = 1
)

// Enum value maps for SecurityCheckType.
var (
	SecurityCheckType_name = map[int32]string{
		0: "SECURITY_CHECK_NONE",
		1: "SECURITY_CHECK_LOGIN",
	}
	SecurityCheckType_value = map[string]int32{
		"SECURITY_CHECK_NONE":  0,
		"SECURITY_CHECK_LOGIN": 1,
	}
)

func (x SecurityCheckType) Enum() *SecurityCheckType {
	p := new(SecurityCheckType)
	*p = x
	return p
}

func (x SecurityCheckType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityCheckType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[49].Descriptor()
}

func (SecurityCheckType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[49]
}

func (x SecurityCheckType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityCheckType.Descriptor instead.
func (SecurityCheckType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{49}
}

type CodexType int32

const (
	CodexType_CODEX_NONE      CodexType = 0
	CodexType_CODEX_QUEST     CodexType = 1
	CodexType_CODEX_WEAPON    CodexType = 2
	CodexType_CODEX_ANIMAL    CodexType = 3
	CodexType_CODEX_MATERIAL  CodexType = 4
	CodexType_CODEX_BOOKS     CodexType = 5
	CodexType_CODEX_PUSHTIPS  CodexType = 6
	CodexType_CODEX_VIEW      CodexType = 7
	CodexType_CODEX_RELIQUARY CodexType = 8
)

// Enum value maps for CodexType.
var (
	CodexType_name = map[int32]string{
		0: "CODEX_NONE",
		1: "CODEX_QUEST",
		2: "CODEX_WEAPON",
		3: "CODEX_ANIMAL",
		4: "CODEX_MATERIAL",
		5: "CODEX_BOOKS",
		6: "CODEX_PUSHTIPS",
		7: "CODEX_VIEW",
		8: "CODEX_RELIQUARY",
	}
	CodexType_value = map[string]int32{
		"CODEX_NONE":      0,
		"CODEX_QUEST":     1,
		"CODEX_WEAPON":    2,
		"CODEX_ANIMAL":    3,
		"CODEX_MATERIAL":  4,
		"CODEX_BOOKS":     5,
		"CODEX_PUSHTIPS":  6,
		"CODEX_VIEW":      7,
		"CODEX_RELIQUARY": 8,
	}
)

func (x CodexType) Enum() *CodexType {
	p := new(CodexType)
	*p = x
	return p
}

func (x CodexType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodexType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[50].Descriptor()
}

func (CodexType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[50]
}

func (x CodexType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodexType.Descriptor instead.
func (CodexType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{50}
}

type SegmentCRCModuleType int32

const (
	SegmentCRCModuleType_MODULE_NONE       SegmentCRCModuleType = 0
	SegmentCRCModuleType_PC_UNITYPLAYER    SegmentCRCModuleType = 1
	SegmentCRCModuleType_PC_USERASSEMBLY   SegmentCRCModuleType = 2
	SegmentCRCModuleType_PC_XLUA           SegmentCRCModuleType = 3
	SegmentCRCModuleType_ANDROID_LIBIL2CPP SegmentCRCModuleType = 11
	SegmentCRCModuleType_ANDROID_LIBUNITY  SegmentCRCModuleType = 12
	SegmentCRCModuleType_ANDROID_LIBXLUA   SegmentCRCModuleType = 13
	SegmentCRCModuleType_IOS_HK4E          SegmentCRCModuleType = 21
)

// Enum value maps for SegmentCRCModuleType.
var (
	SegmentCRCModuleType_name = map[int32]string{
		0:  "MODULE_NONE",
		1:  "PC_UNITYPLAYER",
		2:  "PC_USERASSEMBLY",
		3:  "PC_XLUA",
		11: "ANDROID_LIBIL2CPP",
		12: "ANDROID_LIBUNITY",
		13: "ANDROID_LIBXLUA",
		21: "IOS_HK4E",
	}
	SegmentCRCModuleType_value = map[string]int32{
		"MODULE_NONE":       0,
		"PC_UNITYPLAYER":    1,
		"PC_USERASSEMBLY":   2,
		"PC_XLUA":           3,
		"ANDROID_LIBIL2CPP": 11,
		"ANDROID_LIBUNITY":  12,
		"ANDROID_LIBXLUA":   13,
		"IOS_HK4E":          21,
	}
)

func (x SegmentCRCModuleType) Enum() *SegmentCRCModuleType {
	p := new(SegmentCRCModuleType)
	*p = x
	return p
}

func (x SegmentCRCModuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SegmentCRCModuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[51].Descriptor()
}

func (SegmentCRCModuleType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[51]
}

func (x SegmentCRCModuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SegmentCRCModuleType.Descriptor instead.
func (SegmentCRCModuleType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{51}
}

type ExchangeMcoinType int32

const (
	ExchangeMcoinType_EXCHANGEMCOIN_NONE       ExchangeMcoinType = 0
	ExchangeMcoinType_EXCHANGEMCOIN_PCM_TO_PSN ExchangeMcoinType = 1
	ExchangeMcoinType_EXCHANGEMCOIN_PSN_TO_PCM ExchangeMcoinType = 2
)

// Enum value maps for ExchangeMcoinType.
var (
	ExchangeMcoinType_name = map[int32]string{
		0: "EXCHANGEMCOIN_NONE",
		1: "EXCHANGEMCOIN_PCM_TO_PSN",
		2: "EXCHANGEMCOIN_PSN_TO_PCM",
	}
	ExchangeMcoinType_value = map[string]int32{
		"EXCHANGEMCOIN_NONE":       0,
		"EXCHANGEMCOIN_PCM_TO_PSN": 1,
		"EXCHANGEMCOIN_PSN_TO_PCM": 2,
	}
)

func (x ExchangeMcoinType) Enum() *ExchangeMcoinType {
	p := new(ExchangeMcoinType)
	*p = x
	return p
}

func (x ExchangeMcoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExchangeMcoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[52].Descriptor()
}

func (ExchangeMcoinType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[52]
}

func (x ExchangeMcoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExchangeMcoinType.Descriptor instead.
func (ExchangeMcoinType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{52}
}

type ExploreType int32

const (
	ExploreType_EXPLORE_NONE     ExploreType = 0
	ExploreType_EXPLORE_CRYSTAL  ExploreType = 1
	ExploreType_EXPLORE_CHEST    ExploreType = 2
	ExploreType_EXPLORE_TEMPLE   ExploreType = 3
	ExploreType_EXPLORE_TELEPORT ExploreType = 4
)

// Enum value maps for ExploreType.
var (
	ExploreType_name = map[int32]string{
		0: "EXPLORE_NONE",
		1: "EXPLORE_CRYSTAL",
		2: "EXPLORE_CHEST",
		3: "EXPLORE_TEMPLE",
		4: "EXPLORE_TELEPORT",
	}
	ExploreType_value = map[string]int32{
		"EXPLORE_NONE":     0,
		"EXPLORE_CRYSTAL":  1,
		"EXPLORE_CHEST":    2,
		"EXPLORE_TEMPLE":   3,
		"EXPLORE_TELEPORT": 4,
	}
)

func (x ExploreType) Enum() *ExploreType {
	p := new(ExploreType)
	*p = x
	return p
}

func (x ExploreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExploreType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[53].Descriptor()
}

func (ExploreType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[53]
}

func (x ExploreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExploreType.Descriptor instead.
func (ExploreType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{53}
}

type AsterLittleStageState int32

const (
	AsterLittleStageState_ASTER_LITTLE_STAGE_NONE      AsterLittleStageState = 0
	AsterLittleStageState_ASTER_LITTLE_STAGE_UNSTARTED AsterLittleStageState = 1
	AsterLittleStageState_ASTER_LITTLE_STAGE_STARTED   AsterLittleStageState = 2
	AsterLittleStageState_ASTER_LITTLE_STAGE_FINISHED  AsterLittleStageState = 3
)

// Enum value maps for AsterLittleStageState.
var (
	AsterLittleStageState_name = map[int32]string{
		0: "ASTER_LITTLE_STAGE_NONE",
		1: "ASTER_LITTLE_STAGE_UNSTARTED",
		2: "ASTER_LITTLE_STAGE_STARTED",
		3: "ASTER_LITTLE_STAGE_FINISHED",
	}
	AsterLittleStageState_value = map[string]int32{
		"ASTER_LITTLE_STAGE_NONE":      0,
		"ASTER_LITTLE_STAGE_UNSTARTED": 1,
		"ASTER_LITTLE_STAGE_STARTED":   2,
		"ASTER_LITTLE_STAGE_FINISHED":  3,
	}
)

func (x AsterLittleStageState) Enum() *AsterLittleStageState {
	p := new(AsterLittleStageState)
	*p = x
	return p
}

func (x AsterLittleStageState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AsterLittleStageState) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[54].Descriptor()
}

func (AsterLittleStageState) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[54]
}

func (x AsterLittleStageState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AsterLittleStageState.Descriptor instead.
func (AsterLittleStageState) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{54}
}

type HuntingOfferState int32

const (
	HuntingOfferState_HUNTING_OFFER_STATE_NONE      HuntingOfferState = 0
	HuntingOfferState_HUNTING_OFFER_STATE_STARTED   HuntingOfferState = 1
	HuntingOfferState_HUNTING_OFFER_STATE_UNSTARTED HuntingOfferState = 2
	HuntingOfferState_HUNTING_OFFER_STATE_SUCC      HuntingOfferState = 3
)

// Enum value maps for HuntingOfferState.
var (
	HuntingOfferState_name = map[int32]string{
		0: "HUNTING_OFFER_STATE_NONE",
		1: "HUNTING_OFFER_STATE_STARTED",
		2: "HUNTING_OFFER_STATE_UNSTARTED",
		3: "HUNTING_OFFER_STATE_SUCC",
	}
	HuntingOfferState_value = map[string]int32{
		"HUNTING_OFFER_STATE_NONE":      0,
		"HUNTING_OFFER_STATE_STARTED":   1,
		"HUNTING_OFFER_STATE_UNSTARTED": 2,
		"HUNTING_OFFER_STATE_SUCC":      3,
	}
)

func (x HuntingOfferState) Enum() *HuntingOfferState {
	p := new(HuntingOfferState)
	*p = x
	return p
}

func (x HuntingOfferState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HuntingOfferState) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[55].Descriptor()
}

func (HuntingOfferState) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[55]
}

func (x HuntingOfferState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HuntingOfferState.Descriptor instead.
func (HuntingOfferState) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{55}
}

type RegionSearchState int32

const (
	RegionSearchState_REGION_SEARCH_NONE        RegionSearchState = 0
	RegionSearchState_REGION_SEARCH_UNSTARTED   RegionSearchState = 1
	RegionSearchState_REGION_SEARCH_STARTED     RegionSearchState = 2
	RegionSearchState_REGION_SEARCH_WAIT_REWARD RegionSearchState = 3
	RegionSearchState_REGION_SEARCH_FINISHED    RegionSearchState = 4
)

// Enum value maps for RegionSearchState.
var (
	RegionSearchState_name = map[int32]string{
		0: "REGION_SEARCH_NONE",
		1: "REGION_SEARCH_UNSTARTED",
		2: "REGION_SEARCH_STARTED",
		3: "REGION_SEARCH_WAIT_REWARD",
		4: "REGION_SEARCH_FINISHED",
	}
	RegionSearchState_value = map[string]int32{
		"REGION_SEARCH_NONE":        0,
		"REGION_SEARCH_UNSTARTED":   1,
		"REGION_SEARCH_STARTED":     2,
		"REGION_SEARCH_WAIT_REWARD": 3,
		"REGION_SEARCH_FINISHED":    4,
	}
)

func (x RegionSearchState) Enum() *RegionSearchState {
	p := new(RegionSearchState)
	*p = x
	return p
}

func (x RegionSearchState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegionSearchState) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[56].Descriptor()
}

func (RegionSearchState) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[56]
}

func (x RegionSearchState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegionSearchState.Descriptor instead.
func (RegionSearchState) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{56}
}

type PlayerTag int32

const (
	PlayerTag_PLAYER_TAG_NORMAL                      PlayerTag = 0
	PlayerTag_PLAYER_TAG_SUB_ACCOUNT                 PlayerTag = 3
	PlayerTag_PLAYER_TAG_SUB_ACCOUNT_TRANS_TO_NORMAL PlayerTag = 5
)

// Enum value maps for PlayerTag.
var (
	PlayerTag_name = map[int32]string{
		0: "PLAYER_TAG_NORMAL",
		3: "PLAYER_TAG_SUB_ACCOUNT",
		5: "PLAYER_TAG_SUB_ACCOUNT_TRANS_TO_NORMAL",
	}
	PlayerTag_value = map[string]int32{
		"PLAYER_TAG_NORMAL":                      0,
		"PLAYER_TAG_SUB_ACCOUNT":                 3,
		"PLAYER_TAG_SUB_ACCOUNT_TRANS_TO_NORMAL": 5,
	}
)

func (x PlayerTag) Enum() *PlayerTag {
	p := new(PlayerTag)
	*p = x
	return p
}

func (x PlayerTag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerTag) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[57].Descriptor()
}

func (PlayerTag) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[57]
}

func (x PlayerTag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerTag.Descriptor instead.
func (PlayerTag) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{57}
}

type FeatureBlockType int32

const (
	FeatureBlockType_FEATURE_BLOCK_TYPE_NONE FeatureBlockType = 0
	FeatureBlockType_FEATURE_BLOCK_TYPE_CHAT FeatureBlockType = 1
	FeatureBlockType_FEATURE_BLOCK_TYPE_MP   FeatureBlockType = 2
	FeatureBlockType_FEATRURE_BLOCK_TYPE_CRC FeatureBlockType = 3
	FeatureBlockType_FEATURE_BLOCK_TYPE_HOME FeatureBlockType = 4
)

// Enum value maps for FeatureBlockType.
var (
	FeatureBlockType_name = map[int32]string{
		0: "FEATURE_BLOCK_TYPE_NONE",
		1: "FEATURE_BLOCK_TYPE_CHAT",
		2: "FEATURE_BLOCK_TYPE_MP",
		3: "FEATRURE_BLOCK_TYPE_CRC",
		4: "FEATURE_BLOCK_TYPE_HOME",
	}
	FeatureBlockType_value = map[string]int32{
		"FEATURE_BLOCK_TYPE_NONE": 0,
		"FEATURE_BLOCK_TYPE_CHAT": 1,
		"FEATURE_BLOCK_TYPE_MP":   2,
		"FEATRURE_BLOCK_TYPE_CRC": 3,
		"FEATURE_BLOCK_TYPE_HOME": 4,
	}
)

func (x FeatureBlockType) Enum() *FeatureBlockType {
	p := new(FeatureBlockType)
	*p = x
	return p
}

func (x FeatureBlockType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureBlockType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[58].Descriptor()
}

func (FeatureBlockType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[58]
}

func (x FeatureBlockType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureBlockType.Descriptor instead.
func (FeatureBlockType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{58}
}

type ReportReasonType int32

const (
	ReportReasonType_REPORT_REASON_NONE          ReportReasonType = 0
	ReportReasonType_REPORT_REASON_DECEPTIVE_ADS ReportReasonType = 1
	ReportReasonType_REPORT_REASON_ABUSING       ReportReasonType = 2
	ReportReasonType_REPORT_REASON_CHEAT         ReportReasonType = 3
	ReportReasonType_REPORT_REASON_POLITICAL     ReportReasonType = 4
	ReportReasonType_REPORT_REASON_OTHER         ReportReasonType = 5
	ReportReasonType_REPORT_REASON_HOME          ReportReasonType = 6
)

// Enum value maps for ReportReasonType.
var (
	ReportReasonType_name = map[int32]string{
		0: "REPORT_REASON_NONE",
		1: "REPORT_REASON_DECEPTIVE_ADS",
		2: "REPORT_REASON_ABUSING",
		3: "REPORT_REASON_CHEAT",
		4: "REPORT_REASON_POLITICAL",
		5: "REPORT_REASON_OTHER",
		6: "REPORT_REASON_HOME",
	}
	ReportReasonType_value = map[string]int32{
		"REPORT_REASON_NONE":          0,
		"REPORT_REASON_DECEPTIVE_ADS": 1,
		"REPORT_REASON_ABUSING":       2,
		"REPORT_REASON_CHEAT":         3,
		"REPORT_REASON_POLITICAL":     4,
		"REPORT_REASON_OTHER":         5,
		"REPORT_REASON_HOME":          6,
	}
)

func (x ReportReasonType) Enum() *ReportReasonType {
	p := new(ReportReasonType)
	*p = x
	return p
}

func (x ReportReasonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportReasonType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[59].Descriptor()
}

func (ReportReasonType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[59]
}

func (x ReportReasonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportReasonType.Descriptor instead.
func (ReportReasonType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{59}
}

type MapMarkTipsType int32

const (
	MapMarkTipsType_MARK_TIPS_DUNGEON_ELEMENT_TRIAL MapMarkTipsType = 0
)

// Enum value maps for MapMarkTipsType.
var (
	MapMarkTipsType_name = map[int32]string{
		0: "MARK_TIPS_DUNGEON_ELEMENT_TRIAL",
	}
	MapMarkTipsType_value = map[string]int32{
		"MARK_TIPS_DUNGEON_ELEMENT_TRIAL": 0,
	}
)

func (x MapMarkTipsType) Enum() *MapMarkTipsType {
	p := new(MapMarkTipsType)
	*p = x
	return p
}

func (x MapMarkTipsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MapMarkTipsType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[60].Descriptor()
}

func (MapMarkTipsType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[60]
}

func (x MapMarkTipsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MapMarkTipsType.Descriptor instead.
func (MapMarkTipsType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{60}
}

type ExpeditionState int32

const (
	ExpeditionState_EXPEDITION_NONE     ExpeditionState = 0
	ExpeditionState_EXPEDITION_STARTED  ExpeditionState = 1
	ExpeditionState_EXPEDITION_FINISHED ExpeditionState = 2
	ExpeditionState_EXPEDITION_REWARDED ExpeditionState = 3
	ExpeditionState_EXPEDITION_LOCKED   ExpeditionState = 4
)

// Enum value maps for ExpeditionState.
var (
	ExpeditionState_name = map[int32]string{
		0: "EXPEDITION_NONE",
		1: "EXPEDITION_STARTED",
		2: "EXPEDITION_FINISHED",
		3: "EXPEDITION_REWARDED",
		4: "EXPEDITION_LOCKED",
	}
	ExpeditionState_value = map[string]int32{
		"EXPEDITION_NONE":     0,
		"EXPEDITION_STARTED":  1,
		"EXPEDITION_FINISHED": 2,
		"EXPEDITION_REWARDED": 3,
		"EXPEDITION_LOCKED":   4,
	}
)

func (x ExpeditionState) Enum() *ExpeditionState {
	p := new(ExpeditionState)
	*p = x
	return p
}

func (x ExpeditionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpeditionState) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[61].Descriptor()
}

func (ExpeditionState) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[61]
}

func (x ExpeditionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpeditionState.Descriptor instead.
func (ExpeditionState) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{61}
}

type EnterReason int32

const (
	EnterReason_ENTER_REASON_NONE                              EnterReason = 0
	EnterReason_ENTER_REASON_LOGIN                             EnterReason = 1
	EnterReason_ENTER_REASON_DUNGEON_REPLAY                    EnterReason = 11
	EnterReason_ENTER_REASON_DUNGEON_REVIVE_ON_WAYPOINT        EnterReason = 12
	EnterReason_ENTER_REASON_DUNGEON_ENTER                     EnterReason = 13
	EnterReason_ENTER_REASON_DUNGEON_QUIT                      EnterReason = 14
	EnterReason_ENTER_REASON_GM                                EnterReason = 21
	EnterReason_ENTER_REASON_QUEST_ROLLBACK                    EnterReason = 31
	EnterReason_ENTER_REASON_REVIVAL                           EnterReason = 32
	EnterReason_ENTER_REASON_PERSONAL_SCENE                    EnterReason = 41
	EnterReason_ENTER_REASON_TRANS_POINT                       EnterReason = 42
	EnterReason_ENTER_REASON_CLIENT_TRANSMIT                   EnterReason = 43
	EnterReason_ENTER_REASON_FORCE_DRAG_BACK                   EnterReason = 44
	EnterReason_ENTER_REASON_TEAM_KICK                         EnterReason = 51
	EnterReason_ENTER_REASON_TEAM_JOIN                         EnterReason = 52
	EnterReason_ENTER_REASON_TEAM_BACK                         EnterReason = 53
	EnterReason_ENTER_REASON_MUIP                              EnterReason = 54
	EnterReason_ENTER_REASON_DUNGEON_INVITE_ACCEPT             EnterReason = 55
	EnterReason_ENTER_REASON_LUA                               EnterReason = 56
	EnterReason_ENTER_REASON_ACTIVITY_LOAD_TERRAIN             EnterReason = 57
	EnterReason_ENTER_REASON_HOST_FROM_SINGLE_TO_MP            EnterReason = 58
	EnterReason_ENTER_REASON_MP_PLAY                           EnterReason = 59
	EnterReason_ENTER_REASON_ANCHOR_POINT                      EnterReason = 60
	EnterReason_ENTER_REASON_LUA_SKIP_UI                       EnterReason = 61
	EnterReason_ENTER_REASON_RELOAD_TERRAIN                    EnterReason = 62
	EnterReason_ENTER_REASON_DRAFT_TRANSFER                    EnterReason = 63
	EnterReason_ENTER_REASON_ENTER_HOME                        EnterReason = 64
	EnterReason_ENTER_REASON_EXIT_HOME                         EnterReason = 65
	EnterReason_ENTER_REASON_CHANGE_HOME_MODULE                EnterReason = 66
	EnterReason_ENTER_REASON_GALLERY                           EnterReason = 67
	EnterReason_ENTER_REASON_HOME_SCENE_JUMP                   EnterReason = 68
	EnterReason_ENTER_REASON_HIDE_AND_SEEK                     EnterReason = 69
	EnterReason_ENTER_REASON_SUMMER_TIME_MIST_ZONE             EnterReason = 70
	EnterReason_ENTER_REASON_FORCE_QUIT_SCENE                  EnterReason = 71
	EnterReason_ENTER_REASON_HERO_COURSE                       EnterReason = 72
	EnterReason_ENTER_REASON_TRANS_CLIMATE                     EnterReason = 73
	EnterReason_ENTER_REASON_SUMMER_TIME_BOAT_RESTART          EnterReason = 74
	EnterReason_ENTER_REASON_TSURUMI_MIST_CLIMATE              EnterReason = 75
	EnterReason_ENTER_REASON_TSURUMI_REGIONAL_MIST_CLIMATE     EnterReason = 76
	EnterReason_ENTER_REASON_WINTER_CAMP_RESTART               EnterReason = 77
	EnterReason_ENTER_REASON_TALK_EXEC_TRANSFER                EnterReason = 78
	EnterReason_ENTER_REASON_SEALAMP_BOAT_RESTART              EnterReason = 79
	EnterReason_ENTER_REASON_SEALAMP_BOAT_BACK                 EnterReason = 80
	EnterReason_ENTER_REASON_CHALLENGE_INTERRUPT_BACK          EnterReason = 81
	EnterReason_ENTER_REASON_IRODORI_MASTER_TRANSFER           EnterReason = 82
	EnterReason_ENTER_REASON_GALLERY_BACK                      EnterReason = 83
	EnterReason_ENTER_REASON_SUMMER_TIME_V2_BOAT_RESTART       EnterReason = 84
	EnterReason_ENTER_REASON_ISLAND_PARTY_GALLERY_START_FAILED EnterReason = 85
	EnterReason_ENTER_REASON_GRAVEN_INNOCENCE_RACE_RESTART     EnterReason = 86
	EnterReason_ENTER_REASON_VINTAGE_HUNTING_TRANSFER          EnterReason = 87
	EnterReason_ENTER_REASON_FUNGUS_FIGHTER_TRANSFER           EnterReason = 88
	EnterReason_ENTER_REASON_BRICK_BREAKER                     EnterReason = 89
	EnterReason_ENTER_REASON_BRICK_BREAKER_SINGLE              EnterReason = 90
	EnterReason_ENTER_REASON_TRANSFER_GUARD_STOP               EnterReason = 91
	EnterReason_ENTER_REASON_COIN_COLLECT_SINGLE               EnterReason = 92
	EnterReason_ENTER_REASON_LAN_V3_BOAT_TRANSFER              EnterReason = 93
	EnterReason_ENTER_REASON_LAN_V3_RACE_RESTART               EnterReason = 94
)

// Enum value maps for EnterReason.
var (
	EnterReason_name = map[int32]string{
		0:  "ENTER_REASON_NONE",
		1:  "ENTER_REASON_LOGIN",
		11: "ENTER_REASON_DUNGEON_REPLAY",
		12: "ENTER_REASON_DUNGEON_REVIVE_ON_WAYPOINT",
		13: "ENTER_REASON_DUNGEON_ENTER",
		14: "ENTER_REASON_DUNGEON_QUIT",
		21: "ENTER_REASON_GM",
		31: "ENTER_REASON_QUEST_ROLLBACK",
		32: "ENTER_REASON_REVIVAL",
		41: "ENTER_REASON_PERSONAL_SCENE",
		42: "ENTER_REASON_TRANS_POINT",
		43: "ENTER_REASON_CLIENT_TRANSMIT",
		44: "ENTER_REASON_FORCE_DRAG_BACK",
		51: "ENTER_REASON_TEAM_KICK",
		52: "ENTER_REASON_TEAM_JOIN",
		53: "ENTER_REASON_TEAM_BACK",
		54: "ENTER_REASON_MUIP",
		55: "ENTER_REASON_DUNGEON_INVITE_ACCEPT",
		56: "ENTER_REASON_LUA",
		57: "ENTER_REASON_ACTIVITY_LOAD_TERRAIN",
		58: "ENTER_REASON_HOST_FROM_SINGLE_TO_MP",
		59: "ENTER_REASON_MP_PLAY",
		60: "ENTER_REASON_ANCHOR_POINT",
		61: "ENTER_REASON_LUA_SKIP_UI",
		62: "ENTER_REASON_RELOAD_TERRAIN",
		63: "ENTER_REASON_DRAFT_TRANSFER",
		64: "ENTER_REASON_ENTER_HOME",
		65: "ENTER_REASON_EXIT_HOME",
		66: "ENTER_REASON_CHANGE_HOME_MODULE",
		67: "ENTER_REASON_GALLERY",
		68: "ENTER_REASON_HOME_SCENE_JUMP",
		69: "ENTER_REASON_HIDE_AND_SEEK",
		70: "ENTER_REASON_SUMMER_TIME_MIST_ZONE",
		71: "ENTER_REASON_FORCE_QUIT_SCENE",
		72: "ENTER_REASON_HERO_COURSE",
		73: "ENTER_REASON_TRANS_CLIMATE",
		74: "ENTER_REASON_SUMMER_TIME_BOAT_RESTART",
		75: "ENTER_REASON_TSURUMI_MIST_CLIMATE",
		76: "ENTER_REASON_TSURUMI_REGIONAL_MIST_CLIMATE",
		77: "ENTER_REASON_WINTER_CAMP_RESTART",
		78: "ENTER_REASON_TALK_EXEC_TRANSFER",
		79: "ENTER_REASON_SEALAMP_BOAT_RESTART",
		80: "ENTER_REASON_SEALAMP_BOAT_BACK",
		81: "ENTER_REASON_CHALLENGE_INTERRUPT_BACK",
		82: "ENTER_REASON_IRODORI_MASTER_TRANSFER",
		83: "ENTER_REASON_GALLERY_BACK",
		84: "ENTER_REASON_SUMMER_TIME_V2_BOAT_RESTART",
		85: "ENTER_REASON_ISLAND_PARTY_GALLERY_START_FAILED",
		86: "ENTER_REASON_GRAVEN_INNOCENCE_RACE_RESTART",
		87: "ENTER_REASON_VINTAGE_HUNTING_TRANSFER",
		88: "ENTER_REASON_FUNGUS_FIGHTER_TRANSFER",
		89: "ENTER_REASON_BRICK_BREAKER",
		90: "ENTER_REASON_BRICK_BREAKER_SINGLE",
		91: "ENTER_REASON_TRANSFER_GUARD_STOP",
		92: "ENTER_REASON_COIN_COLLECT_SINGLE",
		93: "ENTER_REASON_LAN_V3_BOAT_TRANSFER",
		94: "ENTER_REASON_LAN_V3_RACE_RESTART",
	}
	EnterReason_value = map[string]int32{
		"ENTER_REASON_NONE":                              0,
		"ENTER_REASON_LOGIN":                             1,
		"ENTER_REASON_DUNGEON_REPLAY":                    11,
		"ENTER_REASON_DUNGEON_REVIVE_ON_WAYPOINT":        12,
		"ENTER_REASON_DUNGEON_ENTER":                     13,
		"ENTER_REASON_DUNGEON_QUIT":                      14,
		"ENTER_REASON_GM":                                21,
		"ENTER_REASON_QUEST_ROLLBACK":                    31,
		"ENTER_REASON_REVIVAL":                           32,
		"ENTER_REASON_PERSONAL_SCENE":                    41,
		"ENTER_REASON_TRANS_POINT":                       42,
		"ENTER_REASON_CLIENT_TRANSMIT":                   43,
		"ENTER_REASON_FORCE_DRAG_BACK":                   44,
		"ENTER_REASON_TEAM_KICK":                         51,
		"ENTER_REASON_TEAM_JOIN":                         52,
		"ENTER_REASON_TEAM_BACK":                         53,
		"ENTER_REASON_MUIP":                              54,
		"ENTER_REASON_DUNGEON_INVITE_ACCEPT":             55,
		"ENTER_REASON_LUA":                               56,
		"ENTER_REASON_ACTIVITY_LOAD_TERRAIN":             57,
		"ENTER_REASON_HOST_FROM_SINGLE_TO_MP":            58,
		"ENTER_REASON_MP_PLAY":                           59,
		"ENTER_REASON_ANCHOR_POINT":                      60,
		"ENTER_REASON_LUA_SKIP_UI":                       61,
		"ENTER_REASON_RELOAD_TERRAIN":                    62,
		"ENTER_REASON_DRAFT_TRANSFER":                    63,
		"ENTER_REASON_ENTER_HOME":                        64,
		"ENTER_REASON_EXIT_HOME":                         65,
		"ENTER_REASON_CHANGE_HOME_MODULE":                66,
		"ENTER_REASON_GALLERY":                           67,
		"ENTER_REASON_HOME_SCENE_JUMP":                   68,
		"ENTER_REASON_HIDE_AND_SEEK":                     69,
		"ENTER_REASON_SUMMER_TIME_MIST_ZONE":             70,
		"ENTER_REASON_FORCE_QUIT_SCENE":                  71,
		"ENTER_REASON_HERO_COURSE":                       72,
		"ENTER_REASON_TRANS_CLIMATE":                     73,
		"ENTER_REASON_SUMMER_TIME_BOAT_RESTART":          74,
		"ENTER_REASON_TSURUMI_MIST_CLIMATE":              75,
		"ENTER_REASON_TSURUMI_REGIONAL_MIST_CLIMATE":     76,
		"ENTER_REASON_WINTER_CAMP_RESTART":               77,
		"ENTER_REASON_TALK_EXEC_TRANSFER":                78,
		"ENTER_REASON_SEALAMP_BOAT_RESTART":              79,
		"ENTER_REASON_SEALAMP_BOAT_BACK":                 80,
		"ENTER_REASON_CHALLENGE_INTERRUPT_BACK":          81,
		"ENTER_REASON_IRODORI_MASTER_TRANSFER":           82,
		"ENTER_REASON_GALLERY_BACK":                      83,
		"ENTER_REASON_SUMMER_TIME_V2_BOAT_RESTART":       84,
		"ENTER_REASON_ISLAND_PARTY_GALLERY_START_FAILED": 85,
		"ENTER_REASON_GRAVEN_INNOCENCE_RACE_RESTART":     86,
		"ENTER_REASON_VINTAGE_HUNTING_TRANSFER":          87,
		"ENTER_REASON_FUNGUS_FIGHTER_TRANSFER":           88,
		"ENTER_REASON_BRICK_BREAKER":                     89,
		"ENTER_REASON_BRICK_BREAKER_SINGLE":              90,
		"ENTER_REASON_TRANSFER_GUARD_STOP":               91,
		"ENTER_REASON_COIN_COLLECT_SINGLE":               92,
		"ENTER_REASON_LAN_V3_BOAT_TRANSFER":              93,
		"ENTER_REASON_LAN_V3_RACE_RESTART":               94,
	}
)

func (x EnterReason) Enum() *EnterReason {
	p := new(EnterReason)
	*p = x
	return p
}

func (x EnterReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnterReason) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[62].Descriptor()
}

func (EnterReason) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[62]
}

func (x EnterReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnterReason.Descriptor instead.
func (EnterReason) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{62}
}

type FriendEnterHomeOption int32

const (
	FriendEnterHomeOption_FRIEND_ENTER_HOME_OPTION_NEED_CONFIRM FriendEnterHomeOption = 0
	FriendEnterHomeOption_FRIEND_ENTER_HOME_OPTION_REFUSE       FriendEnterHomeOption = 1
	FriendEnterHomeOption_FRIEND_ENTER_HOME_OPTION_DIRECT       FriendEnterHomeOption = 2
)

// Enum value maps for FriendEnterHomeOption.
var (
	FriendEnterHomeOption_name = map[int32]string{
		0: "FRIEND_ENTER_HOME_OPTION_NEED_CONFIRM",
		1: "FRIEND_ENTER_HOME_OPTION_REFUSE",
		2: "FRIEND_ENTER_HOME_OPTION_DIRECT",
	}
	FriendEnterHomeOption_value = map[string]int32{
		"FRIEND_ENTER_HOME_OPTION_NEED_CONFIRM": 0,
		"FRIEND_ENTER_HOME_OPTION_REFUSE":       1,
		"FRIEND_ENTER_HOME_OPTION_DIRECT":       2,
	}
)

func (x FriendEnterHomeOption) Enum() *FriendEnterHomeOption {
	p := new(FriendEnterHomeOption)
	*p = x
	return p
}

func (x FriendEnterHomeOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FriendEnterHomeOption) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[63].Descriptor()
}

func (FriendEnterHomeOption) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[63]
}

func (x FriendEnterHomeOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FriendEnterHomeOption.Descriptor instead.
func (FriendEnterHomeOption) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{63}
}

type ChatChannel int32

const (
	ChatChannel_CHANNEL_TEAM             ChatChannel = 0
	ChatChannel_CHANNEL_FRIEND           ChatChannel = 1
	ChatChannel_CHANNEL_NONE             ChatChannel = 2
	ChatChannel_CHANNEL_HIDEANDSEEK      ChatChannel = 3
	ChatChannel_CHANNEL_HIDEANDSEEK_TEAM ChatChannel = 5
	ChatChannel_CHANNEL_LAN_V3_BOAT      ChatChannel = 6
	ChatChannel_CHANNEL_ALL              ChatChannel = 10
	ChatChannel_CHANNEL_TEST             ChatChannel = 100
)

// Enum value maps for ChatChannel.
var (
	ChatChannel_name = map[int32]string{
		0:   "CHANNEL_TEAM",
		1:   "CHANNEL_FRIEND",
		2:   "CHANNEL_NONE",
		3:   "CHANNEL_HIDEANDSEEK",
		5:   "CHANNEL_HIDEANDSEEK_TEAM",
		6:   "CHANNEL_LAN_V3_BOAT",
		10:  "CHANNEL_ALL",
		100: "CHANNEL_TEST",
	}
	ChatChannel_value = map[string]int32{
		"CHANNEL_TEAM":             0,
		"CHANNEL_FRIEND":           1,
		"CHANNEL_NONE":             2,
		"CHANNEL_HIDEANDSEEK":      3,
		"CHANNEL_HIDEANDSEEK_TEAM": 5,
		"CHANNEL_LAN_V3_BOAT":      6,
		"CHANNEL_ALL":              10,
		"CHANNEL_TEST":             100,
	}
)

func (x ChatChannel) Enum() *ChatChannel {
	p := new(ChatChannel)
	*p = x
	return p
}

func (x ChatChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[64].Descriptor()
}

func (ChatChannel) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[64]
}

func (x ChatChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatChannel.Descriptor instead.
func (ChatChannel) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{64}
}

type LeaveWorldReason int32

const (
	LeaveWorldReason_LEAVE_WORLD_REASON_NONE          LeaveWorldReason = 0
	LeaveWorldReason_LEAVE_WORLD_REASON_LOGOUT        LeaveWorldReason = 1
	LeaveWorldReason_LEAVE_WORLD_REASON_BACK_MY_WORLD LeaveWorldReason = 2
	LeaveWorldReason_LEAVE_WORLD_REASON_KICK_BY_OWNER LeaveWorldReason = 3
)

// Enum value maps for LeaveWorldReason.
var (
	LeaveWorldReason_name = map[int32]string{
		0: "LEAVE_WORLD_REASON_NONE",
		1: "LEAVE_WORLD_REASON_LOGOUT",
		2: "LEAVE_WORLD_REASON_BACK_MY_WORLD",
		3: "LEAVE_WORLD_REASON_KICK_BY_OWNER",
	}
	LeaveWorldReason_value = map[string]int32{
		"LEAVE_WORLD_REASON_NONE":          0,
		"LEAVE_WORLD_REASON_LOGOUT":        1,
		"LEAVE_WORLD_REASON_BACK_MY_WORLD": 2,
		"LEAVE_WORLD_REASON_KICK_BY_OWNER": 3,
	}
)

func (x LeaveWorldReason) Enum() *LeaveWorldReason {
	p := new(LeaveWorldReason)
	*p = x
	return p
}

func (x LeaveWorldReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeaveWorldReason) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[65].Descriptor()
}

func (LeaveWorldReason) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[65]
}

func (x LeaveWorldReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeaveWorldReason.Descriptor instead.
func (LeaveWorldReason) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{65}
}

type DungeonCandidateTeamPlayerState int32

const (
	DungeonCandidateTeamPlayerState_DUNGEON_CANDIDATE_TEAM_PLAYER_STATE_IDLE            DungeonCandidateTeamPlayerState = 0
	DungeonCandidateTeamPlayerState_DUNGEON_CANDIDATE_TEAM_PLAYER_STATE_CHANGING_AVATAR DungeonCandidateTeamPlayerState = 1
	DungeonCandidateTeamPlayerState_DUNGEON_CANDIDATE_TEAM_PLAYER_STATE_READY           DungeonCandidateTeamPlayerState = 2
)

// Enum value maps for DungeonCandidateTeamPlayerState.
var (
	DungeonCandidateTeamPlayerState_name = map[int32]string{
		0: "DUNGEON_CANDIDATE_TEAM_PLAYER_STATE_IDLE",
		1: "DUNGEON_CANDIDATE_TEAM_PLAYER_STATE_CHANGING_AVATAR",
		2: "DUNGEON_CANDIDATE_TEAM_PLAYER_STATE_READY",
	}
	DungeonCandidateTeamPlayerState_value = map[string]int32{
		"DUNGEON_CANDIDATE_TEAM_PLAYER_STATE_IDLE":            0,
		"DUNGEON_CANDIDATE_TEAM_PLAYER_STATE_CHANGING_AVATAR": 1,
		"DUNGEON_CANDIDATE_TEAM_PLAYER_STATE_READY":           2,
	}
)

func (x DungeonCandidateTeamPlayerState) Enum() *DungeonCandidateTeamPlayerState {
	p := new(DungeonCandidateTeamPlayerState)
	*p = x
	return p
}

func (x DungeonCandidateTeamPlayerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamPlayerState) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[66].Descriptor()
}

func (DungeonCandidateTeamPlayerState) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[66]
}

func (x DungeonCandidateTeamPlayerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamPlayerState.Descriptor instead.
func (DungeonCandidateTeamPlayerState) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{66}
}

type CreateGadgetReason int32

const (
	CreateGadgetReason_CREATE_GADGET_NONE    CreateGadgetReason = 0
	CreateGadgetReason_CREATE_GADGET_PLAYER  CreateGadgetReason = 1
	CreateGadgetReason_CREATE_GADGET_MISSION CreateGadgetReason = 2
	CreateGadgetReason_CREATE_GADGET_GM      CreateGadgetReason = 3
)

// Enum value maps for CreateGadgetReason.
var (
	CreateGadgetReason_name = map[int32]string{
		0: "CREATE_GADGET_NONE",
		1: "CREATE_GADGET_PLAYER",
		2: "CREATE_GADGET_MISSION",
		3: "CREATE_GADGET_GM",
	}
	CreateGadgetReason_value = map[string]int32{
		"CREATE_GADGET_NONE":    0,
		"CREATE_GADGET_PLAYER":  1,
		"CREATE_GADGET_MISSION": 2,
		"CREATE_GADGET_GM":      3,
	}
)

func (x CreateGadgetReason) Enum() *CreateGadgetReason {
	p := new(CreateGadgetReason)
	*p = x
	return p
}

func (x CreateGadgetReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateGadgetReason) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[67].Descriptor()
}

func (CreateGadgetReason) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[67]
}

func (x CreateGadgetReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateGadgetReason.Descriptor instead.
func (CreateGadgetReason) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{67}
}

type LunaRiteHintStatusType int32

const (
	LunaRiteHintStatusType_LUNA_RITE_HINT_STATUS_DEFAULT  LunaRiteHintStatusType = 0
	LunaRiteHintStatusType_LUNA_RITE_HINT_STATUS_NO_COUNT LunaRiteHintStatusType = 1
	LunaRiteHintStatusType_LUNA_RITE_HINT_STATUS_FINISH   LunaRiteHintStatusType = 2
)

// Enum value maps for LunaRiteHintStatusType.
var (
	LunaRiteHintStatusType_name = map[int32]string{
		0: "LUNA_RITE_HINT_STATUS_DEFAULT",
		1: "LUNA_RITE_HINT_STATUS_NO_COUNT",
		2: "LUNA_RITE_HINT_STATUS_FINISH",
	}
	LunaRiteHintStatusType_value = map[string]int32{
		"LUNA_RITE_HINT_STATUS_DEFAULT":  0,
		"LUNA_RITE_HINT_STATUS_NO_COUNT": 1,
		"LUNA_RITE_HINT_STATUS_FINISH":   2,
	}
)

func (x LunaRiteHintStatusType) Enum() *LunaRiteHintStatusType {
	p := new(LunaRiteHintStatusType)
	*p = x
	return p
}

func (x LunaRiteHintStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LunaRiteHintStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[68].Descriptor()
}

func (LunaRiteHintStatusType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[68]
}

func (x LunaRiteHintStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LunaRiteHintStatusType.Descriptor instead.
func (LunaRiteHintStatusType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{68}
}

type LunaRiteHintPointType int32

const (
	LunaRiteHintPointType_LUNA_RITE_HINT_TYPE_NONE  LunaRiteHintPointType = 0
	LunaRiteHintPointType_LUNA_RITE_HINT_TYPE_RUNE  LunaRiteHintPointType = 1
	LunaRiteHintPointType_LUNA_RITE_HINT_TYPE_CHEST LunaRiteHintPointType = 2
)

// Enum value maps for LunaRiteHintPointType.
var (
	LunaRiteHintPointType_name = map[int32]string{
		0: "LUNA_RITE_HINT_TYPE_NONE",
		1: "LUNA_RITE_HINT_TYPE_RUNE",
		2: "LUNA_RITE_HINT_TYPE_CHEST",
	}
	LunaRiteHintPointType_value = map[string]int32{
		"LUNA_RITE_HINT_TYPE_NONE":  0,
		"LUNA_RITE_HINT_TYPE_RUNE":  1,
		"LUNA_RITE_HINT_TYPE_CHEST": 2,
	}
)

func (x LunaRiteHintPointType) Enum() *LunaRiteHintPointType {
	p := new(LunaRiteHintPointType)
	*p = x
	return p
}

func (x LunaRiteHintPointType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LunaRiteHintPointType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[69].Descriptor()
}

func (LunaRiteHintPointType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[69]
}

func (x LunaRiteHintPointType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LunaRiteHintPointType.Descriptor instead.
func (LunaRiteHintPointType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{69}
}

type GroupVariableType int32

const (
	GroupVariableType_VARIABLE_TYPE_NORMAL      GroupVariableType = 0
	GroupVariableType_VARIABLE_TYPE_LOGIC_STATE GroupVariableType = 1
)

// Enum value maps for GroupVariableType.
var (
	GroupVariableType_name = map[int32]string{
		0: "VARIABLE_TYPE_NORMAL",
		1: "VARIABLE_TYPE_LOGIC_STATE",
	}
	GroupVariableType_value = map[string]int32{
		"VARIABLE_TYPE_NORMAL":      0,
		"VARIABLE_TYPE_LOGIC_STATE": 1,
	}
)

func (x GroupVariableType) Enum() *GroupVariableType {
	p := new(GroupVariableType)
	*p = x
	return p
}

func (x GroupVariableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupVariableType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[70].Descriptor()
}

func (GroupVariableType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[70]
}

func (x GroupVariableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupVariableType.Descriptor instead.
func (GroupVariableType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{70}
}

type ClientInputType int32

const (
	ClientInputType_CLIENT_INPUT_NONE          ClientInputType = 0
	ClientInputType_CLIENT_INPUT_KEYBORD_MOUSE ClientInputType = 1
	ClientInputType_CLIENT_INPUT_GAMEPAD       ClientInputType = 2
	ClientInputType_CLIENT_INPUT_TOUCH_PANEL   ClientInputType = 3
)

// Enum value maps for ClientInputType.
var (
	ClientInputType_name = map[int32]string{
		0: "CLIENT_INPUT_NONE",
		1: "CLIENT_INPUT_KEYBORD_MOUSE",
		2: "CLIENT_INPUT_GAMEPAD",
		3: "CLIENT_INPUT_TOUCH_PANEL",
	}
	ClientInputType_value = map[string]int32{
		"CLIENT_INPUT_NONE":          0,
		"CLIENT_INPUT_KEYBORD_MOUSE": 1,
		"CLIENT_INPUT_GAMEPAD":       2,
		"CLIENT_INPUT_TOUCH_PANEL":   3,
	}
)

func (x ClientInputType) Enum() *ClientInputType {
	p := new(ClientInputType)
	*p = x
	return p
}

func (x ClientInputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientInputType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[71].Descriptor()
}

func (ClientInputType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[71]
}

func (x ClientInputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientInputType.Descriptor instead.
func (ClientInputType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{71}
}

type CustomDungeonEvent int32

const (
	CustomDungeonEvent_CUSTOM_DUNGEON_EVENT_NONE             CustomDungeonEvent = 0
	CustomDungeonEvent_CUSTOM_DUNGEON_EVENT_OFFICIAL_RESTART CustomDungeonEvent = 1
	CustomDungeonEvent_CUSTOM_DUNGEON_EVENT_OUT_STUCK        CustomDungeonEvent = 2
)

// Enum value maps for CustomDungeonEvent.
var (
	CustomDungeonEvent_name = map[int32]string{
		0: "CUSTOM_DUNGEON_EVENT_NONE",
		1: "CUSTOM_DUNGEON_EVENT_OFFICIAL_RESTART",
		2: "CUSTOM_DUNGEON_EVENT_OUT_STUCK",
	}
	CustomDungeonEvent_value = map[string]int32{
		"CUSTOM_DUNGEON_EVENT_NONE":             0,
		"CUSTOM_DUNGEON_EVENT_OFFICIAL_RESTART": 1,
		"CUSTOM_DUNGEON_EVENT_OUT_STUCK":        2,
	}
)

func (x CustomDungeonEvent) Enum() *CustomDungeonEvent {
	p := new(CustomDungeonEvent)
	*p = x
	return p
}

func (x CustomDungeonEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomDungeonEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[72].Descriptor()
}

func (CustomDungeonEvent) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[72]
}

func (x CustomDungeonEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomDungeonEvent.Descriptor instead.
func (CustomDungeonEvent) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{72}
}

type PlatformCategory int32

const (
	PlatformCategory_PLATFORM_CATEGORY_NONE PlatformCategory = 0
	PlatformCategory_PLATFORM_CATEGORY_PCM  PlatformCategory = 1
	PlatformCategory_PLATFORM_CATEGORY_PSN  PlatformCategory = 2
)

// Enum value maps for PlatformCategory.
var (
	PlatformCategory_name = map[int32]string{
		0: "PLATFORM_CATEGORY_NONE",
		1: "PLATFORM_CATEGORY_PCM",
		2: "PLATFORM_CATEGORY_PSN",
	}
	PlatformCategory_value = map[string]int32{
		"PLATFORM_CATEGORY_NONE": 0,
		"PLATFORM_CATEGORY_PCM":  1,
		"PLATFORM_CATEGORY_PSN":  2,
	}
)

func (x PlatformCategory) Enum() *PlatformCategory {
	p := new(PlatformCategory)
	*p = x
	return p
}

func (x PlatformCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlatformCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[73].Descriptor()
}

func (PlatformCategory) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[73]
}

func (x PlatformCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlatformCategory.Descriptor instead.
func (PlatformCategory) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{73}
}

type SceneidConstValue int32

const (
	SceneidConstValue_SCENEID_CONST_NONE            SceneidConstValue = 0
	SceneidConstValue_SCENEID_CONST_MAIN            SceneidConstValue = 3
	SceneidConstValue_SCENEID_CONST_ISLAND          SceneidConstValue = 4
	SceneidConstValue_SCENEID_CONST_ENKANOMIYA      SceneidConstValue = 5
	SceneidConstValue_SCENEID_CONST_MICHIAE_MATSURI SceneidConstValue = 7
	SceneidConstValue_SCENEID_CONST_28_ISLAND       SceneidConstValue = 9
)

// Enum value maps for SceneidConstValue.
var (
	SceneidConstValue_name = map[int32]string{
		0: "SCENEID_CONST_NONE",
		3: "SCENEID_CONST_MAIN",
		4: "SCENEID_CONST_ISLAND",
		5: "SCENEID_CONST_ENKANOMIYA",
		7: "SCENEID_CONST_MICHIAE_MATSURI",
		9: "SCENEID_CONST_28_ISLAND",
	}
	SceneidConstValue_value = map[string]int32{
		"SCENEID_CONST_NONE":            0,
		"SCENEID_CONST_MAIN":            3,
		"SCENEID_CONST_ISLAND":          4,
		"SCENEID_CONST_ENKANOMIYA":      5,
		"SCENEID_CONST_MICHIAE_MATSURI": 7,
		"SCENEID_CONST_28_ISLAND":       9,
	}
)

func (x SceneidConstValue) Enum() *SceneidConstValue {
	p := new(SceneidConstValue)
	*p = x
	return p
}

func (x SceneidConstValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SceneidConstValue) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[74].Descriptor()
}

func (SceneidConstValue) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[74]
}

func (x SceneidConstValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SceneidConstValue.Descriptor instead.
func (SceneidConstValue) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{74}
}

type CityidConstValue int32

const (
	CityidConstValue_CITYID_CONST_NONE   CityidConstValue = 0
	CityidConstValue_CITYID_CONST_MENGDE CityidConstValue = 1
	CityidConstValue_CITYID_CONST_LIYUE  CityidConstValue = 2
	CityidConstValue_CITYID_CONST_DAOQI  CityidConstValue = 3
	CityidConstValue_CITYID_CONST_XUMI   CityidConstValue = 4
)

// Enum value maps for CityidConstValue.
var (
	CityidConstValue_name = map[int32]string{
		0: "CITYID_CONST_NONE",
		1: "CITYID_CONST_MENGDE",
		2: "CITYID_CONST_LIYUE",
		3: "CITYID_CONST_DAOQI",
		4: "CITYID_CONST_XUMI",
	}
	CityidConstValue_value = map[string]int32{
		"CITYID_CONST_NONE":   0,
		"CITYID_CONST_MENGDE": 1,
		"CITYID_CONST_LIYUE":  2,
		"CITYID_CONST_DAOQI":  3,
		"CITYID_CONST_XUMI":   4,
	}
)

func (x CityidConstValue) Enum() *CityidConstValue {
	p := new(CityidConstValue)
	*p = x
	return p
}

func (x CityidConstValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CityidConstValue) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[75].Descriptor()
}

func (CityidConstValue) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[75]
}

func (x CityidConstValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CityidConstValue.Descriptor instead.
func (CityidConstValue) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{75}
}

type AranaraCollectionState int32

const (
	AranaraCollectionState_ARANARA_COLLECTION_STATE_NONE        AranaraCollectionState = 0
	AranaraCollectionState_ARANARA_COLLECTION_STATE_COLLECTABLE AranaraCollectionState = 1
	AranaraCollectionState_ARANARA_COLLECTION_STATE_COLLECTED   AranaraCollectionState = 2
	AranaraCollectionState_ARANARA_COLLECTION_STATE_FINISHED    AranaraCollectionState = 3
)

// Enum value maps for AranaraCollectionState.
var (
	AranaraCollectionState_name = map[int32]string{
		0: "ARANARA_COLLECTION_STATE_NONE",
		1: "ARANARA_COLLECTION_STATE_COLLECTABLE",
		2: "ARANARA_COLLECTION_STATE_COLLECTED",
		3: "ARANARA_COLLECTION_STATE_FINISHED",
	}
	AranaraCollectionState_value = map[string]int32{
		"ARANARA_COLLECTION_STATE_NONE":        0,
		"ARANARA_COLLECTION_STATE_COLLECTABLE": 1,
		"ARANARA_COLLECTION_STATE_COLLECTED":   2,
		"ARANARA_COLLECTION_STATE_FINISHED":    3,
	}
)

func (x AranaraCollectionState) Enum() *AranaraCollectionState {
	p := new(AranaraCollectionState)
	*p = x
	return p
}

func (x AranaraCollectionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AranaraCollectionState) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[76].Descriptor()
}

func (AranaraCollectionState) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[76]
}

func (x AranaraCollectionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AranaraCollectionState.Descriptor instead.
func (AranaraCollectionState) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{76}
}

type AuditState int32

const (
	AuditState_AUDIT_NONE    AuditState = 0
	AuditState_AUDIT_WAITING AuditState = 1
	AuditState_AUDIT_FAILED  AuditState = 2
)

// Enum value maps for AuditState.
var (
	AuditState_name = map[int32]string{
		0: "AUDIT_NONE",
		1: "AUDIT_WAITING",
		2: "AUDIT_FAILED",
	}
	AuditState_value = map[string]int32{
		"AUDIT_NONE":    0,
		"AUDIT_WAITING": 1,
		"AUDIT_FAILED":  2,
	}
)

func (x AuditState) Enum() *AuditState {
	p := new(AuditState)
	*p = x
	return p
}

func (x AuditState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditState) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[77].Descriptor()
}

func (AuditState) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[77]
}

func (x AuditState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditState.Descriptor instead.
func (AuditState) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{77}
}

type AvatarRenameAuditSourceType int32

const (
	AvatarRenameAuditSourceType_AVATAR_RENAME_AUDIT_SOURCE_NONE  AvatarRenameAuditSourceType = 0
	AvatarRenameAuditSourceType_AVATAR_RENAME_AUDIT_SOURCE_ITEM  AvatarRenameAuditSourceType = 1
	AvatarRenameAuditSourceType_AVATAR_RENAME_AUDIT_SOURCE_QUEST AvatarRenameAuditSourceType = 2
)

// Enum value maps for AvatarRenameAuditSourceType.
var (
	AvatarRenameAuditSourceType_name = map[int32]string{
		0: "AVATAR_RENAME_AUDIT_SOURCE_NONE",
		1: "AVATAR_RENAME_AUDIT_SOURCE_ITEM",
		2: "AVATAR_RENAME_AUDIT_SOURCE_QUEST",
	}
	AvatarRenameAuditSourceType_value = map[string]int32{
		"AVATAR_RENAME_AUDIT_SOURCE_NONE":  0,
		"AVATAR_RENAME_AUDIT_SOURCE_ITEM":  1,
		"AVATAR_RENAME_AUDIT_SOURCE_QUEST": 2,
	}
)

func (x AvatarRenameAuditSourceType) Enum() *AvatarRenameAuditSourceType {
	p := new(AvatarRenameAuditSourceType)
	*p = x
	return p
}

func (x AvatarRenameAuditSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvatarRenameAuditSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[78].Descriptor()
}

func (AvatarRenameAuditSourceType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[78]
}

func (x AvatarRenameAuditSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvatarRenameAuditSourceType.Descriptor instead.
func (AvatarRenameAuditSourceType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{78}
}

type ResetAvatarRenameReason int32

const (
	ResetAvatarRenameReason_RESET_AVATAR_RENAME_REASON_NONE          ResetAvatarRenameReason = 0
	ResetAvatarRenameReason_RESET_AVATAR_RENAME_REASON_IP_BLACK_LIST ResetAvatarRenameReason = 1
	ResetAvatarRenameReason_RESET_AVATAR_RENAME_REASON_QUEST_AUDIT   ResetAvatarRenameReason = 2
	ResetAvatarRenameReason_RESET_AVATAR_RENAME_REASON_ACTIVE        ResetAvatarRenameReason = 3
)

// Enum value maps for ResetAvatarRenameReason.
var (
	ResetAvatarRenameReason_name = map[int32]string{
		0: "RESET_AVATAR_RENAME_REASON_NONE",
		1: "RESET_AVATAR_RENAME_REASON_IP_BLACK_LIST",
		2: "RESET_AVATAR_RENAME_REASON_QUEST_AUDIT",
		3: "RESET_AVATAR_RENAME_REASON_ACTIVE",
	}
	ResetAvatarRenameReason_value = map[string]int32{
		"RESET_AVATAR_RENAME_REASON_NONE":          0,
		"RESET_AVATAR_RENAME_REASON_IP_BLACK_LIST": 1,
		"RESET_AVATAR_RENAME_REASON_QUEST_AUDIT":   2,
		"RESET_AVATAR_RENAME_REASON_ACTIVE":        3,
	}
)

func (x ResetAvatarRenameReason) Enum() *ResetAvatarRenameReason {
	p := new(ResetAvatarRenameReason)
	*p = x
	return p
}

func (x ResetAvatarRenameReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResetAvatarRenameReason) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[79].Descriptor()
}

func (ResetAvatarRenameReason) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[79]
}

func (x ResetAvatarRenameReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResetAvatarRenameReason.Descriptor instead.
func (ResetAvatarRenameReason) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{79}
}

type BreakoutAction_BreakoutActionType int32

const (
	BreakoutAction_ACTION_TYPE_NONE           BreakoutAction_BreakoutActionType = 0
	BreakoutAction_ACTION_TYPE_LAUNCH_BALL    BreakoutAction_BreakoutActionType = 1
	BreakoutAction_ACTION_TYPE_DESTROY_BALL   BreakoutAction_BreakoutActionType = 2
	BreakoutAction_ACTION_TYPE_FALLING_OBJECT BreakoutAction_BreakoutActionType = 3
	BreakoutAction_ACTION_TYPE_MISSILE        BreakoutAction_BreakoutActionType = 4
)

// Enum value maps for BreakoutAction_BreakoutActionType.
var (
	BreakoutAction_BreakoutActionType_name = map[int32]string{
		0: "ACTION_TYPE_NONE",
		1: "ACTION_TYPE_LAUNCH_BALL",
		2: "ACTION_TYPE_DESTROY_BALL",
		3: "ACTION_TYPE_FALLING_OBJECT",
		4: "ACTION_TYPE_MISSILE",
	}
	BreakoutAction_BreakoutActionType_value = map[string]int32{
		"ACTION_TYPE_NONE":           0,
		"ACTION_TYPE_LAUNCH_BALL":    1,
		"ACTION_TYPE_DESTROY_BALL":   2,
		"ACTION_TYPE_FALLING_OBJECT": 3,
		"ACTION_TYPE_MISSILE":        4,
	}
)

func (x BreakoutAction_BreakoutActionType) Enum() *BreakoutAction_BreakoutActionType {
	p := new(BreakoutAction_BreakoutActionType)
	*p = x
	return p
}

func (x BreakoutAction_BreakoutActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BreakoutAction_BreakoutActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[80].Descriptor()
}

func (BreakoutAction_BreakoutActionType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[80]
}

func (x BreakoutAction_BreakoutActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BreakoutAction_BreakoutActionType.Descriptor instead.
func (BreakoutAction_BreakoutActionType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{39, 0}
}

type TrialAvatarGrantRecord_GrantReason int32

const (
	TrialAvatarGrantRecord_INVALID                            TrialAvatarGrantRecord_GrantReason = 0
	TrialAvatarGrantRecord_GRANT_BY_QUEST                     TrialAvatarGrantRecord_GrantReason = 1
	TrialAvatarGrantRecord_GRANT_BY_TRIAL_AVATAR_ACTIVITY     TrialAvatarGrantRecord_GrantReason = 2
	TrialAvatarGrantRecord_GRANT_BY_DUNGEON_ELEMENT_CHALLENGE TrialAvatarGrantRecord_GrantReason = 3
	TrialAvatarGrantRecord_GRANT_BY_MIST_TRIAL_ACTIVITY       TrialAvatarGrantRecord_GrantReason = 4
	TrialAvatarGrantRecord_GRANT_BY_SUMO_ACTIVITY             TrialAvatarGrantRecord_GrantReason = 5
	TrialAvatarGrantRecord_GRANT_BY_POTION_ACTIVITY           TrialAvatarGrantRecord_GrantReason = 6
	TrialAvatarGrantRecord_GRANT_BY_CRYSTAL_LINK_ACTIVITY     TrialAvatarGrantRecord_GrantReason = 7
	TrialAvatarGrantRecord_GRANT_BY_IRODORI_MASTER            TrialAvatarGrantRecord_GrantReason = 8
	TrialAvatarGrantRecord_GRANT_BY_GM                        TrialAvatarGrantRecord_GrantReason = 9
	TrialAvatarGrantRecord_GRANT_BY_INSTABLE_SPRAY_ACTIVITY   TrialAvatarGrantRecord_GrantReason = 10
	TrialAvatarGrantRecord_GRANT_BY_MUQADAS_POTION_ACTIVITY   TrialAvatarGrantRecord_GrantReason = 11
	TrialAvatarGrantRecord_GRANT_BY_VINTAGE_HUNTING           TrialAvatarGrantRecord_GrantReason = 12
	TrialAvatarGrantRecord_GRANT_BY_CHAR_AMUSEMENT            TrialAvatarGrantRecord_GrantReason = 13
	TrialAvatarGrantRecord_GRANT_BY_DUEL_HEART                TrialAvatarGrantRecord_GrantReason = 14
)

// Enum value maps for TrialAvatarGrantRecord_GrantReason.
var (
	TrialAvatarGrantRecord_GrantReason_name = map[int32]string{
		0:  "INVALID",
		1:  "GRANT_BY_QUEST",
		2:  "GRANT_BY_TRIAL_AVATAR_ACTIVITY",
		3:  "GRANT_BY_DUNGEON_ELEMENT_CHALLENGE",
		4:  "GRANT_BY_MIST_TRIAL_ACTIVITY",
		5:  "GRANT_BY_SUMO_ACTIVITY",
		6:  "GRANT_BY_POTION_ACTIVITY",
		7:  "GRANT_BY_CRYSTAL_LINK_ACTIVITY",
		8:  "GRANT_BY_IRODORI_MASTER",
		9:  "GRANT_BY_GM",
		10: "GRANT_BY_INSTABLE_SPRAY_ACTIVITY",
		11: "GRANT_BY_MUQADAS_POTION_ACTIVITY",
		12: "GRANT_BY_VINTAGE_HUNTING",
		13: "GRANT_BY_CHAR_AMUSEMENT",
		14: "GRANT_BY_DUEL_HEART",
	}
	TrialAvatarGrantRecord_GrantReason_value = map[string]int32{
		"INVALID":                            0,
		"GRANT_BY_QUEST":                     1,
		"GRANT_BY_TRIAL_AVATAR_ACTIVITY":     2,
		"GRANT_BY_DUNGEON_ELEMENT_CHALLENGE": 3,
		"GRANT_BY_MIST_TRIAL_ACTIVITY":       4,
		"GRANT_BY_SUMO_ACTIVITY":             5,
		"GRANT_BY_POTION_ACTIVITY":           6,
		"GRANT_BY_CRYSTAL_LINK_ACTIVITY":     7,
		"GRANT_BY_IRODORI_MASTER":            8,
		"GRANT_BY_GM":                        9,
		"GRANT_BY_INSTABLE_SPRAY_ACTIVITY":   10,
		"GRANT_BY_MUQADAS_POTION_ACTIVITY":   11,
		"GRANT_BY_VINTAGE_HUNTING":           12,
		"GRANT_BY_CHAR_AMUSEMENT":            13,
		"GRANT_BY_DUEL_HEART":                14,
	}
)

func (x TrialAvatarGrantRecord_GrantReason) Enum() *TrialAvatarGrantRecord_GrantReason {
	p := new(TrialAvatarGrantRecord_GrantReason)
	*p = x
	return p
}

func (x TrialAvatarGrantRecord_GrantReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrialAvatarGrantRecord_GrantReason) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[81].Descriptor()
}

func (TrialAvatarGrantRecord_GrantReason) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[81]
}

func (x TrialAvatarGrantRecord_GrantReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrialAvatarGrantRecord_GrantReason.Descriptor instead.
func (TrialAvatarGrantRecord_GrantReason) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{106, 0}
}

type ParamList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParamList []uint32 `protobuf:"varint,1,rep,packed,name=param_list,json=paramList,proto3" json:"param_list,omitempty"`
}

func (x *ParamList) Reset() {
	*x = ParamList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParamList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParamList) ProtoMessage() {}

func (x *ParamList) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParamList.ProtoReflect.Descriptor instead.
func (*ParamList) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{0}
}

func (x *ParamList) GetParamList() []uint32 {
	if x != nil {
		return x.ParamList
	}
	return nil
}

type PropValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Val  int64  `protobuf:"varint,4,opt,name=val,proto3" json:"val,omitempty"`
	// Types that are assignable to Value:
	//
	//	*PropValue_Ival
	//	*PropValue_Fval
	Value isPropValue_Value `protobuf_oneof:"value"`
}

func (x *PropValue) Reset() {
	*x = PropValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropValue) ProtoMessage() {}

func (x *PropValue) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropValue.ProtoReflect.Descriptor instead.
func (*PropValue) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{1}
}

func (x *PropValue) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PropValue) GetVal() int64 {
	if x != nil {
		return x.Val
	}
	return 0
}

func (m *PropValue) GetValue() isPropValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *PropValue) GetIval() int64 {
	if x, ok := x.GetValue().(*PropValue_Ival); ok {
		return x.Ival
	}
	return 0
}

func (x *PropValue) GetFval() float32 {
	if x, ok := x.GetValue().(*PropValue_Fval); ok {
		return x.Fval
	}
	return 0
}

type isPropValue_Value interface {
	isPropValue_Value()
}

type PropValue_Ival struct {
	Ival int64 `protobuf:"varint,2,opt,name=ival,proto3,oneof"`
}

type PropValue_Fval struct {
	Fval float32 `protobuf:"fixed32,3,opt,name=fval,proto3,oneof"`
}

func (*PropValue_Ival) isPropValue_Value() {}

func (*PropValue_Fval) isPropValue_Value() {}

type Uint32Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   uint32 `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Value uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Uint32Pair) Reset() {
	*x = Uint32Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint32Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32Pair) ProtoMessage() {}

func (x *Uint32Pair) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32Pair.ProtoReflect.Descriptor instead.
func (*Uint32Pair) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{2}
}

func (x *Uint32Pair) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *Uint32Pair) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type RegionSimpleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Type        string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	DispatchUrl string `protobuf:"bytes,4,opt,name=dispatch_url,json=dispatchUrl,proto3" json:"dispatch_url,omitempty"`
}

func (x *RegionSimpleInfo) Reset() {
	*x = RegionSimpleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionSimpleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionSimpleInfo) ProtoMessage() {}

func (x *RegionSimpleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionSimpleInfo.ProtoReflect.Descriptor instead.
func (*RegionSimpleInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{3}
}

func (x *RegionSimpleInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegionSimpleInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RegionSimpleInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RegionSimpleInfo) GetDispatchUrl() string {
	if x != nil {
		return x.DispatchUrl
	}
	return ""
}

type QueryRegionListHttpRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode                     int32               `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	RegionList                  []*RegionSimpleInfo `protobuf:"bytes,2,rep,name=region_list,json=regionList,proto3" json:"region_list,omitempty"`
	ClientSecretKey             []byte              `protobuf:"bytes,5,opt,name=client_secret_key,json=clientSecretKey,proto3" json:"client_secret_key,omitempty"`
	ClientCustomConfigEncrypted []byte              `protobuf:"bytes,6,opt,name=client_custom_config_encrypted,json=clientCustomConfigEncrypted,proto3" json:"client_custom_config_encrypted,omitempty"`
	EnableLoginPc               bool                `protobuf:"varint,7,opt,name=enable_login_pc,json=enableLoginPc,proto3" json:"enable_login_pc,omitempty"`
}

func (x *QueryRegionListHttpRsp) Reset() {
	*x = QueryRegionListHttpRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRegionListHttpRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRegionListHttpRsp) ProtoMessage() {}

func (x *QueryRegionListHttpRsp) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRegionListHttpRsp.ProtoReflect.Descriptor instead.
func (*QueryRegionListHttpRsp) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{4}
}

func (x *QueryRegionListHttpRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *QueryRegionListHttpRsp) GetRegionList() []*RegionSimpleInfo {
	if x != nil {
		return x.RegionList
	}
	return nil
}

func (x *QueryRegionListHttpRsp) GetClientSecretKey() []byte {
	if x != nil {
		return x.ClientSecretKey
	}
	return nil
}

func (x *QueryRegionListHttpRsp) GetClientCustomConfigEncrypted() []byte {
	if x != nil {
		return x.ClientCustomConfigEncrypted
	}
	return nil
}

func (x *QueryRegionListHttpRsp) GetEnableLoginPc() bool {
	if x != nil {
		return x.EnableLoginPc
	}
	return false
}

type ForceUpdateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForceUpdateUrl string `protobuf:"bytes,1,opt,name=force_update_url,json=forceUpdateUrl,proto3" json:"force_update_url,omitempty"`
}

func (x *ForceUpdateInfo) Reset() {
	*x = ForceUpdateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceUpdateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceUpdateInfo) ProtoMessage() {}

func (x *ForceUpdateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceUpdateInfo.ProtoReflect.Descriptor instead.
func (*ForceUpdateInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{5}
}

func (x *ForceUpdateInfo) GetForceUpdateUrl() string {
	if x != nil {
		return x.ForceUpdateUrl
	}
	return ""
}

type StopServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopBeginTime uint32 `protobuf:"varint,1,opt,name=stop_begin_time,json=stopBeginTime,proto3" json:"stop_begin_time,omitempty"`
	StopEndTime   uint32 `protobuf:"varint,2,opt,name=stop_end_time,json=stopEndTime,proto3" json:"stop_end_time,omitempty"`
	Url           string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	ContentMsg    string `protobuf:"bytes,4,opt,name=content_msg,json=contentMsg,proto3" json:"content_msg,omitempty"`
}

func (x *StopServerInfo) Reset() {
	*x = StopServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopServerInfo) ProtoMessage() {}

func (x *StopServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopServerInfo.ProtoReflect.Descriptor instead.
func (*StopServerInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{6}
}

func (x *StopServerInfo) GetStopBeginTime() uint32 {
	if x != nil {
		return x.StopBeginTime
	}
	return 0
}

func (x *StopServerInfo) GetStopEndTime() uint32 {
	if x != nil {
		return x.StopEndTime
	}
	return 0
}

func (x *StopServerInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *StopServerInfo) GetContentMsg() string {
	if x != nil {
		return x.ContentMsg
	}
	return ""
}

type ResVersionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version           uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Relogin           bool   `protobuf:"varint,2,opt,name=relogin,proto3" json:"relogin,omitempty"`
	Md5               string `protobuf:"bytes,3,opt,name=md5,proto3" json:"md5,omitempty"`
	ReleaseTotalSize  string `protobuf:"bytes,4,opt,name=release_total_size,json=releaseTotalSize,proto3" json:"release_total_size,omitempty"`
	VersionSuffix     string `protobuf:"bytes,5,opt,name=version_suffix,json=versionSuffix,proto3" json:"version_suffix,omitempty"`
	Branch            string `protobuf:"bytes,6,opt,name=branch,proto3" json:"branch,omitempty"`
	NextScriptVersion string `protobuf:"bytes,7,opt,name=next_script_version,json=nextScriptVersion,proto3" json:"next_script_version,omitempty"`
}

func (x *ResVersionConfig) Reset() {
	*x = ResVersionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResVersionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResVersionConfig) ProtoMessage() {}

func (x *ResVersionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResVersionConfig.ProtoReflect.Descriptor instead.
func (*ResVersionConfig) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{7}
}

func (x *ResVersionConfig) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ResVersionConfig) GetRelogin() bool {
	if x != nil {
		return x.Relogin
	}
	return false
}

func (x *ResVersionConfig) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *ResVersionConfig) GetReleaseTotalSize() string {
	if x != nil {
		return x.ReleaseTotalSize
	}
	return ""
}

func (x *ResVersionConfig) GetVersionSuffix() string {
	if x != nil {
		return x.VersionSuffix
	}
	return ""
}

func (x *ResVersionConfig) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *ResVersionConfig) GetNextScriptVersion() string {
	if x != nil {
		return x.NextScriptVersion
	}
	return ""
}

type RegionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GateserverIp               string            `protobuf:"bytes,1,opt,name=gateserver_ip,json=gateserverIp,proto3" json:"gateserver_ip,omitempty"`
	GateserverPort             uint32            `protobuf:"varint,2,opt,name=gateserver_port,json=gateserverPort,proto3" json:"gateserver_port,omitempty"`
	PayCallbackUrl             string            `protobuf:"bytes,3,opt,name=pay_callback_url,json=payCallbackUrl,proto3" json:"pay_callback_url,omitempty"`
	AreaType                   string            `protobuf:"bytes,7,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
	ResourceUrl                string            `protobuf:"bytes,8,opt,name=resource_url,json=resourceUrl,proto3" json:"resource_url,omitempty"`
	DataUrl                    string            `protobuf:"bytes,9,opt,name=data_url,json=dataUrl,proto3" json:"data_url,omitempty"`
	FeedbackUrl                string            `protobuf:"bytes,10,opt,name=feedback_url,json=feedbackUrl,proto3" json:"feedback_url,omitempty"`
	BulletinUrl                string            `protobuf:"bytes,11,opt,name=bulletin_url,json=bulletinUrl,proto3" json:"bulletin_url,omitempty"`
	ResourceUrlBak             string            `protobuf:"bytes,12,opt,name=resource_url_bak,json=resourceUrlBak,proto3" json:"resource_url_bak,omitempty"`
	DataUrlBak                 string            `protobuf:"bytes,13,opt,name=data_url_bak,json=dataUrlBak,proto3" json:"data_url_bak,omitempty"`
	ClientDataVersion          uint32            `protobuf:"varint,14,opt,name=client_data_version,json=clientDataVersion,proto3" json:"client_data_version,omitempty"`
	HandbookUrl                string            `protobuf:"bytes,16,opt,name=handbook_url,json=handbookUrl,proto3" json:"handbook_url,omitempty"`
	ClientSilenceDataVersion   uint32            `protobuf:"varint,18,opt,name=client_silence_data_version,json=clientSilenceDataVersion,proto3" json:"client_silence_data_version,omitempty"`
	ClientDataMd5              string            `protobuf:"bytes,19,opt,name=client_data_md5,json=clientDataMd5,proto3" json:"client_data_md5,omitempty"`
	ClientSilenceDataMd5       string            `protobuf:"bytes,20,opt,name=client_silence_data_md5,json=clientSilenceDataMd5,proto3" json:"client_silence_data_md5,omitempty"`
	ResVersionConfig           *ResVersionConfig `protobuf:"bytes,22,opt,name=res_version_config,json=resVersionConfig,proto3" json:"res_version_config,omitempty"`
	SecretKey                  []byte            `protobuf:"bytes,23,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	OfficialCommunityUrl       string            `protobuf:"bytes,24,opt,name=official_community_url,json=officialCommunityUrl,proto3" json:"official_community_url,omitempty"`
	ClientVersionSuffix        string            `protobuf:"bytes,26,opt,name=client_version_suffix,json=clientVersionSuffix,proto3" json:"client_version_suffix,omitempty"`
	ClientSilenceVersionSuffix string            `protobuf:"bytes,27,opt,name=client_silence_version_suffix,json=clientSilenceVersionSuffix,proto3" json:"client_silence_version_suffix,omitempty"`
	UseGateserverDomainName    bool              `protobuf:"varint,28,opt,name=use_gateserver_domain_name,json=useGateserverDomainName,proto3" json:"use_gateserver_domain_name,omitempty"`
	GateserverDomainName       string            `protobuf:"bytes,29,opt,name=gateserver_domain_name,json=gateserverDomainName,proto3" json:"gateserver_domain_name,omitempty"`
	UserCenterUrl              string            `protobuf:"bytes,30,opt,name=user_center_url,json=userCenterUrl,proto3" json:"user_center_url,omitempty"`
	AccountBindUrl             string            `protobuf:"bytes,31,opt,name=account_bind_url,json=accountBindUrl,proto3" json:"account_bind_url,omitempty"`
	CdkeyUrl                   string            `protobuf:"bytes,32,opt,name=cdkey_url,json=cdkeyUrl,proto3" json:"cdkey_url,omitempty"`
	PrivacyPolicyUrl           string            `protobuf:"bytes,33,opt,name=privacy_policy_url,json=privacyPolicyUrl,proto3" json:"privacy_policy_url,omitempty"`
	NextResourceUrl            string            `protobuf:"bytes,34,opt,name=next_resource_url,json=nextResourceUrl,proto3" json:"next_resource_url,omitempty"`
	NextResVersionConfig       *ResVersionConfig `protobuf:"bytes,35,opt,name=next_res_version_config,json=nextResVersionConfig,proto3" json:"next_res_version_config,omitempty"`
	GameBiz                    string            `protobuf:"bytes,36,opt,name=game_biz,json=gameBiz,proto3" json:"game_biz,omitempty"`
}

func (x *RegionInfo) Reset() {
	*x = RegionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionInfo) ProtoMessage() {}

func (x *RegionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionInfo.ProtoReflect.Descriptor instead.
func (*RegionInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{8}
}

func (x *RegionInfo) GetGateserverIp() string {
	if x != nil {
		return x.GateserverIp
	}
	return ""
}

func (x *RegionInfo) GetGateserverPort() uint32 {
	if x != nil {
		return x.GateserverPort
	}
	return 0
}

func (x *RegionInfo) GetPayCallbackUrl() string {
	if x != nil {
		return x.PayCallbackUrl
	}
	return ""
}

func (x *RegionInfo) GetAreaType() string {
	if x != nil {
		return x.AreaType
	}
	return ""
}

func (x *RegionInfo) GetResourceUrl() string {
	if x != nil {
		return x.ResourceUrl
	}
	return ""
}

func (x *RegionInfo) GetDataUrl() string {
	if x != nil {
		return x.DataUrl
	}
	return ""
}

func (x *RegionInfo) GetFeedbackUrl() string {
	if x != nil {
		return x.FeedbackUrl
	}
	return ""
}

func (x *RegionInfo) GetBulletinUrl() string {
	if x != nil {
		return x.BulletinUrl
	}
	return ""
}

func (x *RegionInfo) GetResourceUrlBak() string {
	if x != nil {
		return x.ResourceUrlBak
	}
	return ""
}

func (x *RegionInfo) GetDataUrlBak() string {
	if x != nil {
		return x.DataUrlBak
	}
	return ""
}

func (x *RegionInfo) GetClientDataVersion() uint32 {
	if x != nil {
		return x.ClientDataVersion
	}
	return 0
}

func (x *RegionInfo) GetHandbookUrl() string {
	if x != nil {
		return x.HandbookUrl
	}
	return ""
}

func (x *RegionInfo) GetClientSilenceDataVersion() uint32 {
	if x != nil {
		return x.ClientSilenceDataVersion
	}
	return 0
}

func (x *RegionInfo) GetClientDataMd5() string {
	if x != nil {
		return x.ClientDataMd5
	}
	return ""
}

func (x *RegionInfo) GetClientSilenceDataMd5() string {
	if x != nil {
		return x.ClientSilenceDataMd5
	}
	return ""
}

func (x *RegionInfo) GetResVersionConfig() *ResVersionConfig {
	if x != nil {
		return x.ResVersionConfig
	}
	return nil
}

func (x *RegionInfo) GetSecretKey() []byte {
	if x != nil {
		return x.SecretKey
	}
	return nil
}

func (x *RegionInfo) GetOfficialCommunityUrl() string {
	if x != nil {
		return x.OfficialCommunityUrl
	}
	return ""
}

func (x *RegionInfo) GetClientVersionSuffix() string {
	if x != nil {
		return x.ClientVersionSuffix
	}
	return ""
}

func (x *RegionInfo) GetClientSilenceVersionSuffix() string {
	if x != nil {
		return x.ClientSilenceVersionSuffix
	}
	return ""
}

func (x *RegionInfo) GetUseGateserverDomainName() bool {
	if x != nil {
		return x.UseGateserverDomainName
	}
	return false
}

func (x *RegionInfo) GetGateserverDomainName() string {
	if x != nil {
		return x.GateserverDomainName
	}
	return ""
}

func (x *RegionInfo) GetUserCenterUrl() string {
	if x != nil {
		return x.UserCenterUrl
	}
	return ""
}

func (x *RegionInfo) GetAccountBindUrl() string {
	if x != nil {
		return x.AccountBindUrl
	}
	return ""
}

func (x *RegionInfo) GetCdkeyUrl() string {
	if x != nil {
		return x.CdkeyUrl
	}
	return ""
}

func (x *RegionInfo) GetPrivacyPolicyUrl() string {
	if x != nil {
		return x.PrivacyPolicyUrl
	}
	return ""
}

func (x *RegionInfo) GetNextResourceUrl() string {
	if x != nil {
		return x.NextResourceUrl
	}
	return ""
}

func (x *RegionInfo) GetNextResVersionConfig() *ResVersionConfig {
	if x != nil {
		return x.NextResVersionConfig
	}
	return nil
}

func (x *RegionInfo) GetGameBiz() string {
	if x != nil {
		return x.GameBiz
	}
	return ""
}

type QueryCurrRegionHttpRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode                           int32       `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	Msg                               string      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	RegionInfo                        *RegionInfo `protobuf:"bytes,3,opt,name=region_info,json=regionInfo,proto3" json:"region_info,omitempty"`
	ClientSecretKey                   []byte      `protobuf:"bytes,11,opt,name=client_secret_key,json=clientSecretKey,proto3" json:"client_secret_key,omitempty"`
	RegionCustomConfigEncrypted       []byte      `protobuf:"bytes,12,opt,name=region_custom_config_encrypted,json=regionCustomConfigEncrypted,proto3" json:"region_custom_config_encrypted,omitempty"`
	ClientRegionCustomConfigEncrypted []byte      `protobuf:"bytes,13,opt,name=client_region_custom_config_encrypted,json=clientRegionCustomConfigEncrypted,proto3" json:"client_region_custom_config_encrypted,omitempty"`
	// Types that are assignable to Detail:
	//
	//	*QueryCurrRegionHttpRsp_ForceUdpate
	//	*QueryCurrRegionHttpRsp_StopServer
	Detail isQueryCurrRegionHttpRsp_Detail `protobuf_oneof:"detail"`
}

func (x *QueryCurrRegionHttpRsp) Reset() {
	*x = QueryCurrRegionHttpRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCurrRegionHttpRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCurrRegionHttpRsp) ProtoMessage() {}

func (x *QueryCurrRegionHttpRsp) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCurrRegionHttpRsp.ProtoReflect.Descriptor instead.
func (*QueryCurrRegionHttpRsp) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{9}
}

func (x *QueryCurrRegionHttpRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *QueryCurrRegionHttpRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *QueryCurrRegionHttpRsp) GetRegionInfo() *RegionInfo {
	if x != nil {
		return x.RegionInfo
	}
	return nil
}

func (x *QueryCurrRegionHttpRsp) GetClientSecretKey() []byte {
	if x != nil {
		return x.ClientSecretKey
	}
	return nil
}

func (x *QueryCurrRegionHttpRsp) GetRegionCustomConfigEncrypted() []byte {
	if x != nil {
		return x.RegionCustomConfigEncrypted
	}
	return nil
}

func (x *QueryCurrRegionHttpRsp) GetClientRegionCustomConfigEncrypted() []byte {
	if x != nil {
		return x.ClientRegionCustomConfigEncrypted
	}
	return nil
}

func (m *QueryCurrRegionHttpRsp) GetDetail() isQueryCurrRegionHttpRsp_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *QueryCurrRegionHttpRsp) GetForceUdpate() *ForceUpdateInfo {
	if x, ok := x.GetDetail().(*QueryCurrRegionHttpRsp_ForceUdpate); ok {
		return x.ForceUdpate
	}
	return nil
}

func (x *QueryCurrRegionHttpRsp) GetStopServer() *StopServerInfo {
	if x, ok := x.GetDetail().(*QueryCurrRegionHttpRsp_StopServer); ok {
		return x.StopServer
	}
	return nil
}

type isQueryCurrRegionHttpRsp_Detail interface {
	isQueryCurrRegionHttpRsp_Detail()
}

type QueryCurrRegionHttpRsp_ForceUdpate struct {
	ForceUdpate *ForceUpdateInfo `protobuf:"bytes,4,opt,name=force_udpate,json=forceUdpate,proto3,oneof"`
}

type QueryCurrRegionHttpRsp_StopServer struct {
	StopServer *StopServerInfo `protobuf:"bytes,5,opt,name=stop_server,json=stopServer,proto3,oneof"`
}

func (*QueryCurrRegionHttpRsp_ForceUdpate) isQueryCurrRegionHttpRsp_Detail() {}

func (*QueryCurrRegionHttpRsp_StopServer) isQueryCurrRegionHttpRsp_Detail() {}

type PlayerUidExtInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegPlatform uint32 `protobuf:"varint,1,opt,name=reg_platform,json=regPlatform,proto3" json:"reg_platform,omitempty"`
}

func (x *PlayerUidExtInfo) Reset() {
	*x = PlayerUidExtInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerUidExtInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerUidExtInfo) ProtoMessage() {}

func (x *PlayerUidExtInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerUidExtInfo.ProtoReflect.Descriptor instead.
func (*PlayerUidExtInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{10}
}

func (x *PlayerUidExtInfo) GetRegPlatform() uint32 {
	if x != nil {
		return x.RegPlatform
	}
	return 0
}

type Reliquary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level            uint32   `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Exp              uint32   `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
	PromoteLevel     uint32   `protobuf:"varint,3,opt,name=promote_level,json=promoteLevel,proto3" json:"promote_level,omitempty"`
	MainPropId       uint32   `protobuf:"varint,4,opt,name=main_prop_id,json=mainPropId,proto3" json:"main_prop_id,omitempty"`
	AppendPropIdList []uint32 `protobuf:"varint,5,rep,packed,name=append_prop_id_list,json=appendPropIdList,proto3" json:"append_prop_id_list,omitempty"`
}

func (x *Reliquary) Reset() {
	*x = Reliquary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reliquary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reliquary) ProtoMessage() {}

func (x *Reliquary) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reliquary.ProtoReflect.Descriptor instead.
func (*Reliquary) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{11}
}

func (x *Reliquary) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Reliquary) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *Reliquary) GetPromoteLevel() uint32 {
	if x != nil {
		return x.PromoteLevel
	}
	return 0
}

func (x *Reliquary) GetMainPropId() uint32 {
	if x != nil {
		return x.MainPropId
	}
	return 0
}

func (x *Reliquary) GetAppendPropIdList() []uint32 {
	if x != nil {
		return x.AppendPropIdList
	}
	return nil
}

type Weapon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level        uint32            `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Exp          uint32            `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
	PromoteLevel uint32            `protobuf:"varint,3,opt,name=promote_level,json=promoteLevel,proto3" json:"promote_level,omitempty"`
	AffixMap     map[uint32]uint32 `protobuf:"bytes,4,rep,name=affix_map,json=affixMap,proto3" json:"affix_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Weapon) Reset() {
	*x = Weapon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Weapon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Weapon) ProtoMessage() {}

func (x *Weapon) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Weapon.ProtoReflect.Descriptor instead.
func (*Weapon) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{12}
}

func (x *Weapon) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Weapon) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *Weapon) GetPromoteLevel() uint32 {
	if x != nil {
		return x.PromoteLevel
	}
	return 0
}

func (x *Weapon) GetAffixMap() map[uint32]uint32 {
	if x != nil {
		return x.AffixMap
	}
	return nil
}

type MaterialDeleteInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasDeleteConfig bool `protobuf:"varint,1,opt,name=has_delete_config,json=hasDeleteConfig,proto3" json:"has_delete_config,omitempty"`
	// Types that are assignable to DeleteInfo:
	//
	//	*MaterialDeleteInfo_CountDownDelete_
	//	*MaterialDeleteInfo_DateDelete
	//	*MaterialDeleteInfo_DelayWeekCountDownDelete_
	DeleteInfo isMaterialDeleteInfo_DeleteInfo `protobuf_oneof:"delete_info"`
}

func (x *MaterialDeleteInfo) Reset() {
	*x = MaterialDeleteInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialDeleteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialDeleteInfo) ProtoMessage() {}

func (x *MaterialDeleteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialDeleteInfo.ProtoReflect.Descriptor instead.
func (*MaterialDeleteInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{13}
}

func (x *MaterialDeleteInfo) GetHasDeleteConfig() bool {
	if x != nil {
		return x.HasDeleteConfig
	}
	return false
}

func (m *MaterialDeleteInfo) GetDeleteInfo() isMaterialDeleteInfo_DeleteInfo {
	if m != nil {
		return m.DeleteInfo
	}
	return nil
}

func (x *MaterialDeleteInfo) GetCountDownDelete() *MaterialDeleteInfo_CountDownDelete {
	if x, ok := x.GetDeleteInfo().(*MaterialDeleteInfo_CountDownDelete_); ok {
		return x.CountDownDelete
	}
	return nil
}

func (x *MaterialDeleteInfo) GetDateDelete() *MaterialDeleteInfo_DateTimeDelete {
	if x, ok := x.GetDeleteInfo().(*MaterialDeleteInfo_DateDelete); ok {
		return x.DateDelete
	}
	return nil
}

func (x *MaterialDeleteInfo) GetDelayWeekCountDownDelete() *MaterialDeleteInfo_DelayWeekCountDownDelete {
	if x, ok := x.GetDeleteInfo().(*MaterialDeleteInfo_DelayWeekCountDownDelete_); ok {
		return x.DelayWeekCountDownDelete
	}
	return nil
}

type isMaterialDeleteInfo_DeleteInfo interface {
	isMaterialDeleteInfo_DeleteInfo()
}

type MaterialDeleteInfo_CountDownDelete_ struct {
	CountDownDelete *MaterialDeleteInfo_CountDownDelete `protobuf:"bytes,2,opt,name=count_down_delete,json=countDownDelete,proto3,oneof"`
}

type MaterialDeleteInfo_DateDelete struct {
	DateDelete *MaterialDeleteInfo_DateTimeDelete `protobuf:"bytes,3,opt,name=date_delete,json=dateDelete,proto3,oneof"`
}

type MaterialDeleteInfo_DelayWeekCountDownDelete_ struct {
	DelayWeekCountDownDelete *MaterialDeleteInfo_DelayWeekCountDownDelete `protobuf:"bytes,4,opt,name=delay_week_count_down_delete,json=delayWeekCountDownDelete,proto3,oneof"`
}

func (*MaterialDeleteInfo_CountDownDelete_) isMaterialDeleteInfo_DeleteInfo() {}

func (*MaterialDeleteInfo_DateDelete) isMaterialDeleteInfo_DeleteInfo() {}

func (*MaterialDeleteInfo_DelayWeekCountDownDelete_) isMaterialDeleteInfo_DeleteInfo() {}

type Material struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count      uint32              `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	DeleteInfo *MaterialDeleteInfo `protobuf:"bytes,2,opt,name=delete_info,json=deleteInfo,proto3" json:"delete_info,omitempty"`
}

func (x *Material) Reset() {
	*x = Material{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Material) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Material) ProtoMessage() {}

func (x *Material) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Material.ProtoReflect.Descriptor instead.
func (*Material) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{14}
}

func (x *Material) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Material) GetDeleteInfo() *MaterialDeleteInfo {
	if x != nil {
		return x.DeleteInfo
	}
	return nil
}

type Equip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLocked bool `protobuf:"varint,3,opt,name=is_locked,json=isLocked,proto3" json:"is_locked,omitempty"`
	// Types that are assignable to Detail:
	//
	//	*Equip_Reliquary
	//	*Equip_Weapon
	Detail isEquip_Detail `protobuf_oneof:"detail"`
}

func (x *Equip) Reset() {
	*x = Equip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Equip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Equip) ProtoMessage() {}

func (x *Equip) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Equip.ProtoReflect.Descriptor instead.
func (*Equip) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{15}
}

func (x *Equip) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

func (m *Equip) GetDetail() isEquip_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *Equip) GetReliquary() *Reliquary {
	if x, ok := x.GetDetail().(*Equip_Reliquary); ok {
		return x.Reliquary
	}
	return nil
}

func (x *Equip) GetWeapon() *Weapon {
	if x, ok := x.GetDetail().(*Equip_Weapon); ok {
		return x.Weapon
	}
	return nil
}

type isEquip_Detail interface {
	isEquip_Detail()
}

type Equip_Reliquary struct {
	Reliquary *Reliquary `protobuf:"bytes,1,opt,name=reliquary,proto3,oneof"`
}

type Equip_Weapon struct {
	Weapon *Weapon `protobuf:"bytes,2,opt,name=weapon,proto3,oneof"`
}

func (*Equip_Reliquary) isEquip_Detail() {}

func (*Equip_Weapon) isEquip_Detail() {}

type Furniture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *Furniture) Reset() {
	*x = Furniture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Furniture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Furniture) ProtoMessage() {}

func (x *Furniture) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Furniture.ProtoReflect.Descriptor instead.
func (*Furniture) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{16}
}

func (x *Furniture) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId uint32 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Guid   uint64 `protobuf:"varint,2,opt,name=guid,proto3" json:"guid,omitempty"`
	// Types that are assignable to Detail:
	//
	//	*Item_Material
	//	*Item_Equip
	//	*Item_Furniture
	Detail isItem_Detail `protobuf_oneof:"detail"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{17}
}

func (x *Item) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *Item) GetGuid() uint64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (m *Item) GetDetail() isItem_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *Item) GetMaterial() *Material {
	if x, ok := x.GetDetail().(*Item_Material); ok {
		return x.Material
	}
	return nil
}

func (x *Item) GetEquip() *Equip {
	if x, ok := x.GetDetail().(*Item_Equip); ok {
		return x.Equip
	}
	return nil
}

func (x *Item) GetFurniture() *Furniture {
	if x, ok := x.GetDetail().(*Item_Furniture); ok {
		return x.Furniture
	}
	return nil
}

type isItem_Detail interface {
	isItem_Detail()
}

type Item_Material struct {
	Material *Material `protobuf:"bytes,5,opt,name=material,proto3,oneof"`
}

type Item_Equip struct {
	Equip *Equip `protobuf:"bytes,6,opt,name=equip,proto3,oneof"`
}

type Item_Furniture struct {
	Furniture *Furniture `protobuf:"bytes,7,opt,name=furniture,proto3,oneof"`
}

func (*Item_Material) isItem_Detail() {}

func (*Item_Equip) isItem_Detail() {}

func (*Item_Furniture) isItem_Detail() {}

type ItemParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId uint32 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Count  uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ItemParam) Reset() {
	*x = ItemParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemParam) ProtoMessage() {}

func (x *ItemParam) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemParam.ProtoReflect.Descriptor instead.
func (*ItemParam) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{18}
}

func (x *ItemParam) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *ItemParam) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type EquipParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId       uint32 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ItemNum      uint32 `protobuf:"varint,2,opt,name=item_num,json=itemNum,proto3" json:"item_num,omitempty"`
	ItemLevel    uint32 `protobuf:"varint,3,opt,name=item_level,json=itemLevel,proto3" json:"item_level,omitempty"`
	PromoteLevel uint32 `protobuf:"varint,4,opt,name=promote_level,json=promoteLevel,proto3" json:"promote_level,omitempty"`
}

func (x *EquipParam) Reset() {
	*x = EquipParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipParam) ProtoMessage() {}

func (x *EquipParam) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipParam.ProtoReflect.Descriptor instead.
func (*EquipParam) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{19}
}

func (x *EquipParam) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *EquipParam) GetItemNum() uint32 {
	if x != nil {
		return x.ItemNum
	}
	return 0
}

func (x *EquipParam) GetItemLevel() uint32 {
	if x != nil {
		return x.ItemLevel
	}
	return 0
}

func (x *EquipParam) GetPromoteLevel() uint32 {
	if x != nil {
		return x.PromoteLevel
	}
	return 0
}

type EquipParamList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemList []*EquipParam `protobuf:"bytes,1,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
}

func (x *EquipParamList) Reset() {
	*x = EquipParamList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipParamList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipParamList) ProtoMessage() {}

func (x *EquipParamList) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipParamList.ProtoReflect.Descriptor instead.
func (*EquipParamList) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{20}
}

func (x *EquipParamList) GetItemList() []*EquipParam {
	if x != nil {
		return x.ItemList
	}
	return nil
}

type Reward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardId uint32       `protobuf:"varint,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	ItemList []*ItemParam `protobuf:"bytes,2,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
}

func (x *Reward) Reset() {
	*x = Reward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reward) ProtoMessage() {}

func (x *Reward) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reward.ProtoReflect.Descriptor instead.
func (*Reward) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{21}
}

func (x *Reward) GetRewardId() uint32 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

func (x *Reward) GetItemList() []*ItemParam {
	if x != nil {
		return x.ItemList
	}
	return nil
}

type AbilityString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*AbilityString_Str
	//	*AbilityString_Hash
	Type isAbilityString_Type `protobuf_oneof:"type"`
}

func (x *AbilityString) Reset() {
	*x = AbilityString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbilityString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbilityString) ProtoMessage() {}

func (x *AbilityString) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbilityString.ProtoReflect.Descriptor instead.
func (*AbilityString) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{22}
}

func (m *AbilityString) GetType() isAbilityString_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *AbilityString) GetStr() string {
	if x, ok := x.GetType().(*AbilityString_Str); ok {
		return x.Str
	}
	return ""
}

func (x *AbilityString) GetHash() uint32 {
	if x, ok := x.GetType().(*AbilityString_Hash); ok {
		return x.Hash
	}
	return 0
}

type isAbilityString_Type interface {
	isAbilityString_Type()
}

type AbilityString_Str struct {
	Str string `protobuf:"bytes,1,opt,name=str,proto3,oneof"`
}

type AbilityString_Hash struct {
	Hash uint32 `protobuf:"varint,2,opt,name=hash,proto3,oneof"`
}

func (*AbilityString_Str) isAbilityString_Type() {}

func (*AbilityString_Hash) isAbilityString_Type() {}

type AbilityFloatValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AbilityFloatValue) Reset() {
	*x = AbilityFloatValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbilityFloatValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbilityFloatValue) ProtoMessage() {}

func (x *AbilityFloatValue) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbilityFloatValue.ProtoReflect.Descriptor instead.
func (*AbilityFloatValue) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{23}
}

func (x *AbilityFloatValue) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type AbilityScalarValueEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       *AbilityString    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ValueType AbilityScalarType `protobuf:"varint,2,opt,name=value_type,json=valueType,proto3,enum=proto.AbilityScalarType" json:"value_type,omitempty"`
	// Types that are assignable to Value:
	//
	//	*AbilityScalarValueEntry_FloatValue
	//	*AbilityScalarValueEntry_StringValue
	//	*AbilityScalarValueEntry_IntValue
	//	*AbilityScalarValueEntry_UintValue
	Value isAbilityScalarValueEntry_Value `protobuf_oneof:"value"`
}

func (x *AbilityScalarValueEntry) Reset() {
	*x = AbilityScalarValueEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbilityScalarValueEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbilityScalarValueEntry) ProtoMessage() {}

func (x *AbilityScalarValueEntry) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbilityScalarValueEntry.ProtoReflect.Descriptor instead.
func (*AbilityScalarValueEntry) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{24}
}

func (x *AbilityScalarValueEntry) GetKey() *AbilityString {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AbilityScalarValueEntry) GetValueType() AbilityScalarType {
	if x != nil {
		return x.ValueType
	}
	return AbilityScalarType_ABILITY_SCALAR_TYPE_UNKNOW
}

func (m *AbilityScalarValueEntry) GetValue() isAbilityScalarValueEntry_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *AbilityScalarValueEntry) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*AbilityScalarValueEntry_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *AbilityScalarValueEntry) GetStringValue() string {
	if x, ok := x.GetValue().(*AbilityScalarValueEntry_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *AbilityScalarValueEntry) GetIntValue() int32 {
	if x, ok := x.GetValue().(*AbilityScalarValueEntry_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *AbilityScalarValueEntry) GetUintValue() uint32 {
	if x, ok := x.GetValue().(*AbilityScalarValueEntry_UintValue); ok {
		return x.UintValue
	}
	return 0
}

type isAbilityScalarValueEntry_Value interface {
	isAbilityScalarValueEntry_Value()
}

type AbilityScalarValueEntry_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,3,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type AbilityScalarValueEntry_StringValue struct {
	StringValue string `protobuf:"bytes,4,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type AbilityScalarValueEntry_IntValue struct {
	IntValue int32 `protobuf:"varint,5,opt,name=int_value,json=intValue,proto3,oneof"`
}

type AbilityScalarValueEntry_UintValue struct {
	UintValue uint32 `protobuf:"varint,6,opt,name=uint_value,json=uintValue,proto3,oneof"`
}

func (*AbilityScalarValueEntry_FloatValue) isAbilityScalarValueEntry_Value() {}

func (*AbilityScalarValueEntry_StringValue) isAbilityScalarValueEntry_Value() {}

func (*AbilityScalarValueEntry_IntValue) isAbilityScalarValueEntry_Value() {}

func (*AbilityScalarValueEntry_UintValue) isAbilityScalarValueEntry_Value() {}

type AbilityAppliedAbility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbilityName        *AbilityString             `protobuf:"bytes,1,opt,name=ability_name,json=abilityName,proto3" json:"ability_name,omitempty"`
	AbilityOverride    *AbilityString             `protobuf:"bytes,2,opt,name=ability_override,json=abilityOverride,proto3" json:"ability_override,omitempty"`
	OverrideMap        []*AbilityScalarValueEntry `protobuf:"bytes,3,rep,name=override_map,json=overrideMap,proto3" json:"override_map,omitempty"`
	InstancedAbilityId uint32                     `protobuf:"varint,4,opt,name=instanced_ability_id,json=instancedAbilityId,proto3" json:"instanced_ability_id,omitempty"`
}

func (x *AbilityAppliedAbility) Reset() {
	*x = AbilityAppliedAbility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbilityAppliedAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbilityAppliedAbility) ProtoMessage() {}

func (x *AbilityAppliedAbility) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbilityAppliedAbility.ProtoReflect.Descriptor instead.
func (*AbilityAppliedAbility) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{25}
}

func (x *AbilityAppliedAbility) GetAbilityName() *AbilityString {
	if x != nil {
		return x.AbilityName
	}
	return nil
}

func (x *AbilityAppliedAbility) GetAbilityOverride() *AbilityString {
	if x != nil {
		return x.AbilityOverride
	}
	return nil
}

func (x *AbilityAppliedAbility) GetOverrideMap() []*AbilityScalarValueEntry {
	if x != nil {
		return x.OverrideMap
	}
	return nil
}

func (x *AbilityAppliedAbility) GetInstancedAbilityId() uint32 {
	if x != nil {
		return x.InstancedAbilityId
	}
	return 0
}

type AbilityAttachedModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsInvalid            bool   `protobuf:"varint,1,opt,name=is_invalid,json=isInvalid,proto3" json:"is_invalid,omitempty"`
	OwnerEntityId        uint32 `protobuf:"varint,2,opt,name=owner_entity_id,json=ownerEntityId,proto3" json:"owner_entity_id,omitempty"`
	InstancedModifierId  uint32 `protobuf:"varint,3,opt,name=instanced_modifier_id,json=instancedModifierId,proto3" json:"instanced_modifier_id,omitempty"`
	IsServerbuffModifier bool   `protobuf:"varint,4,opt,name=is_serverbuff_modifier,json=isServerbuffModifier,proto3" json:"is_serverbuff_modifier,omitempty"`
	AttachNameHash       int32  `protobuf:"varint,5,opt,name=attach_name_hash,json=attachNameHash,proto3" json:"attach_name_hash,omitempty"`
}

func (x *AbilityAttachedModifier) Reset() {
	*x = AbilityAttachedModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbilityAttachedModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbilityAttachedModifier) ProtoMessage() {}

func (x *AbilityAttachedModifier) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbilityAttachedModifier.ProtoReflect.Descriptor instead.
func (*AbilityAttachedModifier) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{26}
}

func (x *AbilityAttachedModifier) GetIsInvalid() bool {
	if x != nil {
		return x.IsInvalid
	}
	return false
}

func (x *AbilityAttachedModifier) GetOwnerEntityId() uint32 {
	if x != nil {
		return x.OwnerEntityId
	}
	return 0
}

func (x *AbilityAttachedModifier) GetInstancedModifierId() uint32 {
	if x != nil {
		return x.InstancedModifierId
	}
	return 0
}

func (x *AbilityAttachedModifier) GetIsServerbuffModifier() bool {
	if x != nil {
		return x.IsServerbuffModifier
	}
	return false
}

func (x *AbilityAttachedModifier) GetAttachNameHash() int32 {
	if x != nil {
		return x.AttachNameHash
	}
	return 0
}

type ModifierDurability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReduceRatio         float32 `protobuf:"fixed32,1,opt,name=reduce_ratio,json=reduceRatio,proto3" json:"reduce_ratio,omitempty"`
	RemainingDurability float32 `protobuf:"fixed32,2,opt,name=remaining_durability,json=remainingDurability,proto3" json:"remaining_durability,omitempty"`
}

func (x *ModifierDurability) Reset() {
	*x = ModifierDurability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifierDurability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifierDurability) ProtoMessage() {}

func (x *ModifierDurability) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifierDurability.ProtoReflect.Descriptor instead.
func (*ModifierDurability) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{27}
}

func (x *ModifierDurability) GetReduceRatio() float32 {
	if x != nil {
		return x.ReduceRatio
	}
	return 0
}

func (x *ModifierDurability) GetRemainingDurability() float32 {
	if x != nil {
		return x.RemainingDurability
	}
	return 0
}

type AbilityAppliedModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModifierLocalId           int32                    `protobuf:"varint,1,opt,name=modifier_local_id,json=modifierLocalId,proto3" json:"modifier_local_id,omitempty"`
	ParentAbilityEntityId     uint32                   `protobuf:"varint,2,opt,name=parent_ability_entity_id,json=parentAbilityEntityId,proto3" json:"parent_ability_entity_id,omitempty"`
	ParentAbilityName         *AbilityString           `protobuf:"bytes,3,opt,name=parent_ability_name,json=parentAbilityName,proto3" json:"parent_ability_name,omitempty"`
	ParentAbilityOverride     *AbilityString           `protobuf:"bytes,4,opt,name=parent_ability_override,json=parentAbilityOverride,proto3" json:"parent_ability_override,omitempty"`
	InstancedAbilityId        uint32                   `protobuf:"varint,5,opt,name=instanced_ability_id,json=instancedAbilityId,proto3" json:"instanced_ability_id,omitempty"`
	InstancedModifierId       uint32                   `protobuf:"varint,6,opt,name=instanced_modifier_id,json=instancedModifierId,proto3" json:"instanced_modifier_id,omitempty"`
	ExistDuration             float32                  `protobuf:"fixed32,7,opt,name=exist_duration,json=existDuration,proto3" json:"exist_duration,omitempty"`
	AttachedInstancedModifier *AbilityAttachedModifier `protobuf:"bytes,8,opt,name=attached_instanced_modifier,json=attachedInstancedModifier,proto3" json:"attached_instanced_modifier,omitempty"`
	ApplyEntityId             uint32                   `protobuf:"varint,9,opt,name=apply_entity_id,json=applyEntityId,proto3" json:"apply_entity_id,omitempty"`
	IsAttachedParentAbility   bool                     `protobuf:"varint,10,opt,name=is_attached_parent_ability,json=isAttachedParentAbility,proto3" json:"is_attached_parent_ability,omitempty"`
	ModifierDurability        *ModifierDurability      `protobuf:"bytes,11,opt,name=modifier_durability,json=modifierDurability,proto3" json:"modifier_durability,omitempty"`
	SbuffUid                  uint32                   `protobuf:"varint,12,opt,name=sbuff_uid,json=sbuffUid,proto3" json:"sbuff_uid,omitempty"`
	IsServerbuffModifier      bool                     `protobuf:"varint,13,opt,name=is_serverbuff_modifier,json=isServerbuffModifier,proto3" json:"is_serverbuff_modifier,omitempty"`
}

func (x *AbilityAppliedModifier) Reset() {
	*x = AbilityAppliedModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbilityAppliedModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbilityAppliedModifier) ProtoMessage() {}

func (x *AbilityAppliedModifier) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbilityAppliedModifier.ProtoReflect.Descriptor instead.
func (*AbilityAppliedModifier) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{28}
}

func (x *AbilityAppliedModifier) GetModifierLocalId() int32 {
	if x != nil {
		return x.ModifierLocalId
	}
	return 0
}

func (x *AbilityAppliedModifier) GetParentAbilityEntityId() uint32 {
	if x != nil {
		return x.ParentAbilityEntityId
	}
	return 0
}

func (x *AbilityAppliedModifier) GetParentAbilityName() *AbilityString {
	if x != nil {
		return x.ParentAbilityName
	}
	return nil
}

func (x *AbilityAppliedModifier) GetParentAbilityOverride() *AbilityString {
	if x != nil {
		return x.ParentAbilityOverride
	}
	return nil
}

func (x *AbilityAppliedModifier) GetInstancedAbilityId() uint32 {
	if x != nil {
		return x.InstancedAbilityId
	}
	return 0
}

func (x *AbilityAppliedModifier) GetInstancedModifierId() uint32 {
	if x != nil {
		return x.InstancedModifierId
	}
	return 0
}

func (x *AbilityAppliedModifier) GetExistDuration() float32 {
	if x != nil {
		return x.ExistDuration
	}
	return 0
}

func (x *AbilityAppliedModifier) GetAttachedInstancedModifier() *AbilityAttachedModifier {
	if x != nil {
		return x.AttachedInstancedModifier
	}
	return nil
}

func (x *AbilityAppliedModifier) GetApplyEntityId() uint32 {
	if x != nil {
		return x.ApplyEntityId
	}
	return 0
}

func (x *AbilityAppliedModifier) GetIsAttachedParentAbility() bool {
	if x != nil {
		return x.IsAttachedParentAbility
	}
	return false
}

func (x *AbilityAppliedModifier) GetModifierDurability() *ModifierDurability {
	if x != nil {
		return x.ModifierDurability
	}
	return nil
}

func (x *AbilityAppliedModifier) GetSbuffUid() uint32 {
	if x != nil {
		return x.SbuffUid
	}
	return 0
}

func (x *AbilityAppliedModifier) GetIsServerbuffModifier() bool {
	if x != nil {
		return x.IsServerbuffModifier
	}
	return false
}

type MassivePropParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             int32     `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	ReactionInfoList []uint32  `protobuf:"varint,2,rep,packed,name=reaction_info_list,json=reactionInfoList,proto3" json:"reaction_info_list,omitempty"`
	ParamList        []float32 `protobuf:"fixed32,3,rep,packed,name=param_list,json=paramList,proto3" json:"param_list,omitempty"`
	SyncFlag         uint32    `protobuf:"varint,4,opt,name=sync_flag,json=syncFlag,proto3" json:"sync_flag,omitempty"`
}

func (x *MassivePropParam) Reset() {
	*x = MassivePropParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MassivePropParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MassivePropParam) ProtoMessage() {}

func (x *MassivePropParam) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MassivePropParam.ProtoReflect.Descriptor instead.
func (*MassivePropParam) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{29}
}

func (x *MassivePropParam) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MassivePropParam) GetReactionInfoList() []uint32 {
	if x != nil {
		return x.ReactionInfoList
	}
	return nil
}

func (x *MassivePropParam) GetParamList() []float32 {
	if x != nil {
		return x.ParamList
	}
	return nil
}

func (x *MassivePropParam) GetSyncFlag() uint32 {
	if x != nil {
		return x.SyncFlag
	}
	return 0
}

type MassivePropSyncInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PropList []*MassivePropParam `protobuf:"bytes,2,rep,name=prop_list,json=propList,proto3" json:"prop_list,omitempty"`
}

func (x *MassivePropSyncInfo) Reset() {
	*x = MassivePropSyncInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MassivePropSyncInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MassivePropSyncInfo) ProtoMessage() {}

func (x *MassivePropSyncInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MassivePropSyncInfo.ProtoReflect.Descriptor instead.
func (*MassivePropSyncInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{30}
}

func (x *MassivePropSyncInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MassivePropSyncInfo) GetPropList() []*MassivePropParam {
	if x != nil {
		return x.PropList
	}
	return nil
}

type BreakoutVector2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *BreakoutVector2) Reset() {
	*x = BreakoutVector2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakoutVector2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakoutVector2) ProtoMessage() {}

func (x *BreakoutVector2) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakoutVector2.ProtoReflect.Descriptor instead.
func (*BreakoutVector2) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{31}
}

func (x *BreakoutVector2) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *BreakoutVector2) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type BreakoutBrickInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hp          uint32 `protobuf:"varint,1,opt,name=hp,proto3" json:"hp,omitempty"`
	ElementType uint32 `protobuf:"varint,2,opt,name=element_type,json=elementType,proto3" json:"element_type,omitempty"`
}

func (x *BreakoutBrickInfo) Reset() {
	*x = BreakoutBrickInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakoutBrickInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakoutBrickInfo) ProtoMessage() {}

func (x *BreakoutBrickInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakoutBrickInfo.ProtoReflect.Descriptor instead.
func (*BreakoutBrickInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{32}
}

func (x *BreakoutBrickInfo) GetHp() uint32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *BreakoutBrickInfo) GetElementType() uint32 {
	if x != nil {
		return x.ElementType
	}
	return 0
}

type BreakoutPhysicalObjectModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Param1            int32  `protobuf:"varint,3,opt,name=param1,proto3" json:"param1,omitempty"`
	Param2            int32  `protobuf:"varint,4,opt,name=param2,proto3" json:"param2,omitempty"`
	Param3            int32  `protobuf:"varint,5,opt,name=param3,proto3" json:"param3,omitempty"`
	Param4            int32  `protobuf:"varint,6,opt,name=param4,proto3" json:"param4,omitempty"`
	Param5            int32  `protobuf:"varint,7,opt,name=param5,proto3" json:"param5,omitempty"`
	Param6            int32  `protobuf:"varint,8,opt,name=param6,proto3" json:"param6,omitempty"`
	Bool1             bool   `protobuf:"varint,9,opt,name=bool1,proto3" json:"bool1,omitempty"`
	Duration          int32  `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"`
	EndTime           int32  `protobuf:"varint,11,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Combo             uint32 `protobuf:"varint,12,opt,name=combo,proto3" json:"combo,omitempty"`
	PeerId            uint32 `protobuf:"varint,13,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	SkillType         uint32 `protobuf:"varint,14,opt,name=skill_type,json=skillType,proto3" json:"skill_type,omitempty"`
	Level             uint32 `protobuf:"varint,15,opt,name=level,proto3" json:"level,omitempty"`
	ChoosePlayerCount uint32 `protobuf:"varint,16,opt,name=choose_player_count,json=choosePlayerCount,proto3" json:"choose_player_count,omitempty"`
}

func (x *BreakoutPhysicalObjectModifier) Reset() {
	*x = BreakoutPhysicalObjectModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakoutPhysicalObjectModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakoutPhysicalObjectModifier) ProtoMessage() {}

func (x *BreakoutPhysicalObjectModifier) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakoutPhysicalObjectModifier.ProtoReflect.Descriptor instead.
func (*BreakoutPhysicalObjectModifier) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{33}
}

func (x *BreakoutPhysicalObjectModifier) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *BreakoutPhysicalObjectModifier) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BreakoutPhysicalObjectModifier) GetParam1() int32 {
	if x != nil {
		return x.Param1
	}
	return 0
}

func (x *BreakoutPhysicalObjectModifier) GetParam2() int32 {
	if x != nil {
		return x.Param2
	}
	return 0
}

func (x *BreakoutPhysicalObjectModifier) GetParam3() int32 {
	if x != nil {
		return x.Param3
	}
	return 0
}

func (x *BreakoutPhysicalObjectModifier) GetParam4() int32 {
	if x != nil {
		return x.Param4
	}
	return 0
}

func (x *BreakoutPhysicalObjectModifier) GetParam5() int32 {
	if x != nil {
		return x.Param5
	}
	return 0
}

func (x *BreakoutPhysicalObjectModifier) GetParam6() int32 {
	if x != nil {
		return x.Param6
	}
	return 0
}

func (x *BreakoutPhysicalObjectModifier) GetBool1() bool {
	if x != nil {
		return x.Bool1
	}
	return false
}

func (x *BreakoutPhysicalObjectModifier) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *BreakoutPhysicalObjectModifier) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *BreakoutPhysicalObjectModifier) GetCombo() uint32 {
	if x != nil {
		return x.Combo
	}
	return 0
}

func (x *BreakoutPhysicalObjectModifier) GetPeerId() uint32 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *BreakoutPhysicalObjectModifier) GetSkillType() uint32 {
	if x != nil {
		return x.SkillType
	}
	return 0
}

func (x *BreakoutPhysicalObjectModifier) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *BreakoutPhysicalObjectModifier) GetChoosePlayerCount() uint32 {
	if x != nil {
		return x.ChoosePlayerCount
	}
	return 0
}

type BreakoutPhysicalObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint32                            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Index               uint32                            `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	IsActive            bool                              `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Pos                 *BreakoutVector2                  `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
	MoveDir             *BreakoutVector2                  `protobuf:"bytes,5,opt,name=move_dir,json=moveDir,proto3" json:"move_dir,omitempty"`
	Speed               int32                             `protobuf:"varint,6,opt,name=speed,proto3" json:"speed,omitempty"`
	InitPeerId          uint32                            `protobuf:"varint,7,opt,name=init_peer_id,json=initPeerId,proto3" json:"init_peer_id,omitempty"`
	State               uint32                            `protobuf:"varint,8,opt,name=state,proto3" json:"state,omitempty"`
	ElementType         uint32                            `protobuf:"varint,9,opt,name=element_type,json=elementType,proto3" json:"element_type,omitempty"`
	ElementReactionBuff uint32                            `protobuf:"varint,10,opt,name=element_reaction_buff,json=elementReactionBuff,proto3" json:"element_reaction_buff,omitempty"`
	ModifierList        []*BreakoutPhysicalObjectModifier `protobuf:"bytes,11,rep,name=modifier_list,json=modifierList,proto3" json:"modifier_list,omitempty"`
	TotalRotation       int32                             `protobuf:"varint,12,opt,name=total_rotation,json=totalRotation,proto3" json:"total_rotation,omitempty"`
	InfoList            []*BreakoutBrickInfo              `protobuf:"bytes,13,rep,name=info_list,json=infoList,proto3" json:"info_list,omitempty"`
	LastHitPeerId       uint32                            `protobuf:"varint,14,opt,name=last_hit_peer_id,json=lastHitPeerId,proto3" json:"last_hit_peer_id,omitempty"`
	SpeedIncreaseCount  uint32                            `protobuf:"varint,15,opt,name=speed_increase_count,json=speedIncreaseCount,proto3" json:"speed_increase_count,omitempty"`
	Offset              int32                             `protobuf:"varint,16,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *BreakoutPhysicalObject) Reset() {
	*x = BreakoutPhysicalObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakoutPhysicalObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakoutPhysicalObject) ProtoMessage() {}

func (x *BreakoutPhysicalObject) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakoutPhysicalObject.ProtoReflect.Descriptor instead.
func (*BreakoutPhysicalObject) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{34}
}

func (x *BreakoutPhysicalObject) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BreakoutPhysicalObject) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BreakoutPhysicalObject) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *BreakoutPhysicalObject) GetPos() *BreakoutVector2 {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *BreakoutPhysicalObject) GetMoveDir() *BreakoutVector2 {
	if x != nil {
		return x.MoveDir
	}
	return nil
}

func (x *BreakoutPhysicalObject) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *BreakoutPhysicalObject) GetInitPeerId() uint32 {
	if x != nil {
		return x.InitPeerId
	}
	return 0
}

func (x *BreakoutPhysicalObject) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *BreakoutPhysicalObject) GetElementType() uint32 {
	if x != nil {
		return x.ElementType
	}
	return 0
}

func (x *BreakoutPhysicalObject) GetElementReactionBuff() uint32 {
	if x != nil {
		return x.ElementReactionBuff
	}
	return 0
}

func (x *BreakoutPhysicalObject) GetModifierList() []*BreakoutPhysicalObjectModifier {
	if x != nil {
		return x.ModifierList
	}
	return nil
}

func (x *BreakoutPhysicalObject) GetTotalRotation() int32 {
	if x != nil {
		return x.TotalRotation
	}
	return 0
}

func (x *BreakoutPhysicalObject) GetInfoList() []*BreakoutBrickInfo {
	if x != nil {
		return x.InfoList
	}
	return nil
}

func (x *BreakoutPhysicalObject) GetLastHitPeerId() uint32 {
	if x != nil {
		return x.LastHitPeerId
	}
	return 0
}

func (x *BreakoutPhysicalObject) GetSpeedIncreaseCount() uint32 {
	if x != nil {
		return x.SpeedIncreaseCount
	}
	return 0
}

func (x *BreakoutPhysicalObject) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type BreakoutSpawnPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint32                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BrickSuiteId     uint32                    `protobuf:"varint,2,opt,name=brick_suite_id,json=brickSuiteId,proto3" json:"brick_suite_id,omitempty"`
	SpawnedBrickList []*BreakoutPhysicalObject `protobuf:"bytes,3,rep,name=spawned_brick_list,json=spawnedBrickList,proto3" json:"spawned_brick_list,omitempty"`
}

func (x *BreakoutSpawnPoint) Reset() {
	*x = BreakoutSpawnPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakoutSpawnPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakoutSpawnPoint) ProtoMessage() {}

func (x *BreakoutSpawnPoint) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakoutSpawnPoint.ProtoReflect.Descriptor instead.
func (*BreakoutSpawnPoint) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{35}
}

func (x *BreakoutSpawnPoint) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BreakoutSpawnPoint) GetBrickSuiteId() uint32 {
	if x != nil {
		return x.BrickSuiteId
	}
	return 0
}

func (x *BreakoutSpawnPoint) GetSpawnedBrickList() []*BreakoutPhysicalObject {
	if x != nil {
		return x.SpawnedBrickList
	}
	return nil
}

type BreakoutElementReactionCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementReaction uint32 `protobuf:"varint,1,opt,name=element_reaction,json=elementReaction,proto3" json:"element_reaction,omitempty"`
	Count           uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *BreakoutElementReactionCounter) Reset() {
	*x = BreakoutElementReactionCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakoutElementReactionCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakoutElementReactionCounter) ProtoMessage() {}

func (x *BreakoutElementReactionCounter) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakoutElementReactionCounter.ProtoReflect.Descriptor instead.
func (*BreakoutElementReactionCounter) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{36}
}

func (x *BreakoutElementReactionCounter) GetElementReaction() uint32 {
	if x != nil {
		return x.ElementReaction
	}
	return 0
}

func (x *BreakoutElementReactionCounter) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type BreakoutSyncConnectUidInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid            uint32   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	SkillIdList    []uint32 `protobuf:"varint,2,rep,packed,name=skill_id_list,json=skillIdList,proto3" json:"skill_id_list,omitempty"`
	SkillLevelList []uint32 `protobuf:"varint,3,rep,packed,name=skill_level_list,json=skillLevelList,proto3" json:"skill_level_list,omitempty"`
}

func (x *BreakoutSyncConnectUidInfo) Reset() {
	*x = BreakoutSyncConnectUidInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakoutSyncConnectUidInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakoutSyncConnectUidInfo) ProtoMessage() {}

func (x *BreakoutSyncConnectUidInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakoutSyncConnectUidInfo.ProtoReflect.Descriptor instead.
func (*BreakoutSyncConnectUidInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{37}
}

func (x *BreakoutSyncConnectUidInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BreakoutSyncConnectUidInfo) GetSkillIdList() []uint32 {
	if x != nil {
		return x.SkillIdList
	}
	return nil
}

func (x *BreakoutSyncConnectUidInfo) GetSkillLevelList() []uint32 {
	if x != nil {
		return x.SkillLevelList
	}
	return nil
}

type BreakoutSnapShot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientGameTime           uint64                            `protobuf:"varint,1,opt,name=client_game_time,json=clientGameTime,proto3" json:"client_game_time,omitempty"`
	ServerGameTime           uint64                            `protobuf:"varint,2,opt,name=server_game_time,json=serverGameTime,proto3" json:"server_game_time,omitempty"`
	BallList                 []*BreakoutPhysicalObject         `protobuf:"bytes,3,rep,name=ball_list,json=ballList,proto3" json:"ball_list,omitempty"`
	PhysicalObjectList       []*BreakoutPhysicalObject         `protobuf:"bytes,4,rep,name=physical_object_list,json=physicalObjectList,proto3" json:"physical_object_list,omitempty"`
	ActionList               []*BreakoutAction                 `protobuf:"bytes,5,rep,name=action_list,json=actionList,proto3" json:"action_list,omitempty"`
	WaveIndex                uint32                            `protobuf:"varint,6,opt,name=wave_index,json=waveIndex,proto3" json:"wave_index,omitempty"`
	IsFinish                 bool                              `protobuf:"varint,7,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	Score                    uint32                            `protobuf:"varint,8,opt,name=score,proto3" json:"score,omitempty"`
	Combo                    uint32                            `protobuf:"varint,9,opt,name=combo,proto3" json:"combo,omitempty"`
	MaxCombo                 uint32                            `protobuf:"varint,10,opt,name=max_combo,json=maxCombo,proto3" json:"max_combo,omitempty"`
	LifeCount                uint32                            `protobuf:"varint,11,opt,name=life_count,json=lifeCount,proto3" json:"life_count,omitempty"`
	WaveSuiteIndex           uint32                            `protobuf:"varint,12,opt,name=wave_suite_index,json=waveSuiteIndex,proto3" json:"wave_suite_index,omitempty"`
	SpawnPointList           []*BreakoutSpawnPoint             `protobuf:"bytes,13,rep,name=spawn_point_list,json=spawnPointList,proto3" json:"spawn_point_list,omitempty"`
	RemainingBossHp          uint32                            `protobuf:"varint,14,opt,name=remaining_boss_hp,json=remainingBossHp,proto3" json:"remaining_boss_hp,omitempty"`
	BrickElementReactionList []*BreakoutElementReactionCounter `protobuf:"bytes,15,rep,name=brick_element_reaction_list,json=brickElementReactionList,proto3" json:"brick_element_reaction_list,omitempty"`
	BallElementReactionList  []*BreakoutElementReactionCounter `protobuf:"bytes,16,rep,name=ball_element_reaction_list,json=ballElementReactionList,proto3" json:"ball_element_reaction_list,omitempty"`
	UidInfoList              []*BreakoutSyncConnectUidInfo     `protobuf:"bytes,17,rep,name=uid_info_list,json=uidInfoList,proto3" json:"uid_info_list,omitempty"`
	DynamicObjectList        []*BreakoutPhysicalObject         `protobuf:"bytes,18,rep,name=dynamic_object_list,json=dynamicObjectList,proto3" json:"dynamic_object_list,omitempty"`
	IdIndexList              []uint32                          `protobuf:"varint,19,rep,packed,name=id_index_list,json=idIndexList,proto3" json:"id_index_list,omitempty"`
	RawClientGameTime        int32                             `protobuf:"varint,20,opt,name=raw_client_game_time,json=rawClientGameTime,proto3" json:"raw_client_game_time,omitempty"`
}

func (x *BreakoutSnapShot) Reset() {
	*x = BreakoutSnapShot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakoutSnapShot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakoutSnapShot) ProtoMessage() {}

func (x *BreakoutSnapShot) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakoutSnapShot.ProtoReflect.Descriptor instead.
func (*BreakoutSnapShot) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{38}
}

func (x *BreakoutSnapShot) GetClientGameTime() uint64 {
	if x != nil {
		return x.ClientGameTime
	}
	return 0
}

func (x *BreakoutSnapShot) GetServerGameTime() uint64 {
	if x != nil {
		return x.ServerGameTime
	}
	return 0
}

func (x *BreakoutSnapShot) GetBallList() []*BreakoutPhysicalObject {
	if x != nil {
		return x.BallList
	}
	return nil
}

func (x *BreakoutSnapShot) GetPhysicalObjectList() []*BreakoutPhysicalObject {
	if x != nil {
		return x.PhysicalObjectList
	}
	return nil
}

func (x *BreakoutSnapShot) GetActionList() []*BreakoutAction {
	if x != nil {
		return x.ActionList
	}
	return nil
}

func (x *BreakoutSnapShot) GetWaveIndex() uint32 {
	if x != nil {
		return x.WaveIndex
	}
	return 0
}

func (x *BreakoutSnapShot) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *BreakoutSnapShot) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *BreakoutSnapShot) GetCombo() uint32 {
	if x != nil {
		return x.Combo
	}
	return 0
}

func (x *BreakoutSnapShot) GetMaxCombo() uint32 {
	if x != nil {
		return x.MaxCombo
	}
	return 0
}

func (x *BreakoutSnapShot) GetLifeCount() uint32 {
	if x != nil {
		return x.LifeCount
	}
	return 0
}

func (x *BreakoutSnapShot) GetWaveSuiteIndex() uint32 {
	if x != nil {
		return x.WaveSuiteIndex
	}
	return 0
}

func (x *BreakoutSnapShot) GetSpawnPointList() []*BreakoutSpawnPoint {
	if x != nil {
		return x.SpawnPointList
	}
	return nil
}

func (x *BreakoutSnapShot) GetRemainingBossHp() uint32 {
	if x != nil {
		return x.RemainingBossHp
	}
	return 0
}

func (x *BreakoutSnapShot) GetBrickElementReactionList() []*BreakoutElementReactionCounter {
	if x != nil {
		return x.BrickElementReactionList
	}
	return nil
}

func (x *BreakoutSnapShot) GetBallElementReactionList() []*BreakoutElementReactionCounter {
	if x != nil {
		return x.BallElementReactionList
	}
	return nil
}

func (x *BreakoutSnapShot) GetUidInfoList() []*BreakoutSyncConnectUidInfo {
	if x != nil {
		return x.UidInfoList
	}
	return nil
}

func (x *BreakoutSnapShot) GetDynamicObjectList() []*BreakoutPhysicalObject {
	if x != nil {
		return x.DynamicObjectList
	}
	return nil
}

func (x *BreakoutSnapShot) GetIdIndexList() []uint32 {
	if x != nil {
		return x.IdIndexList
	}
	return nil
}

func (x *BreakoutSnapShot) GetRawClientGameTime() int32 {
	if x != nil {
		return x.RawClientGameTime
	}
	return 0
}

type BreakoutAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType          BreakoutAction_BreakoutActionType `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3,enum=proto.BreakoutAction_BreakoutActionType" json:"action_type,omitempty"`
	ClientGameTime      uint64                            `protobuf:"varint,2,opt,name=client_game_time,json=clientGameTime,proto3" json:"client_game_time,omitempty"`
	ServerGameTime      uint64                            `protobuf:"varint,3,opt,name=server_game_time,json=serverGameTime,proto3" json:"server_game_time,omitempty"`
	IsFailed            bool                              `protobuf:"varint,4,opt,name=is_failed,json=isFailed,proto3" json:"is_failed,omitempty"`
	PreIndex            uint32                            `protobuf:"varint,5,opt,name=pre_index,json=preIndex,proto3" json:"pre_index,omitempty"`
	NewIndex            uint32                            `protobuf:"varint,6,opt,name=new_index,json=newIndex,proto3" json:"new_index,omitempty"`
	Pos                 *BreakoutVector2                  `protobuf:"bytes,7,opt,name=pos,proto3" json:"pos,omitempty"`
	MoveDir             *BreakoutVector2                  `protobuf:"bytes,8,opt,name=move_dir,json=moveDir,proto3" json:"move_dir,omitempty"`
	Speed               int32                             `protobuf:"varint,9,opt,name=speed,proto3" json:"speed,omitempty"`
	PeerId              uint32                            `protobuf:"varint,10,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	ElementType         uint32                            `protobuf:"varint,11,opt,name=element_type,json=elementType,proto3" json:"element_type,omitempty"`
	ElementReactionBuff uint32                            `protobuf:"varint,12,opt,name=element_reaction_buff,json=elementReactionBuff,proto3" json:"element_reaction_buff,omitempty"`
	SpeedIncreaseCount  uint32                            `protobuf:"varint,13,opt,name=speed_increase_count,json=speedIncreaseCount,proto3" json:"speed_increase_count,omitempty"`
	HasExtraBall        bool                              `protobuf:"varint,14,opt,name=has_extra_ball,json=hasExtraBall,proto3" json:"has_extra_ball,omitempty"`
	ExtraBallDir        *BreakoutVector2                  `protobuf:"bytes,15,opt,name=extra_ball_dir,json=extraBallDir,proto3" json:"extra_ball_dir,omitempty"`
	ExtraBallIndex      uint32                            `protobuf:"varint,16,opt,name=extra_ball_index,json=extraBallIndex,proto3" json:"extra_ball_index,omitempty"`
}

func (x *BreakoutAction) Reset() {
	*x = BreakoutAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakoutAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakoutAction) ProtoMessage() {}

func (x *BreakoutAction) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakoutAction.ProtoReflect.Descriptor instead.
func (*BreakoutAction) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{39}
}

func (x *BreakoutAction) GetActionType() BreakoutAction_BreakoutActionType {
	if x != nil {
		return x.ActionType
	}
	return BreakoutAction_ACTION_TYPE_NONE
}

func (x *BreakoutAction) GetClientGameTime() uint64 {
	if x != nil {
		return x.ClientGameTime
	}
	return 0
}

func (x *BreakoutAction) GetServerGameTime() uint64 {
	if x != nil {
		return x.ServerGameTime
	}
	return 0
}

func (x *BreakoutAction) GetIsFailed() bool {
	if x != nil {
		return x.IsFailed
	}
	return false
}

func (x *BreakoutAction) GetPreIndex() uint32 {
	if x != nil {
		return x.PreIndex
	}
	return 0
}

func (x *BreakoutAction) GetNewIndex() uint32 {
	if x != nil {
		return x.NewIndex
	}
	return 0
}

func (x *BreakoutAction) GetPos() *BreakoutVector2 {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *BreakoutAction) GetMoveDir() *BreakoutVector2 {
	if x != nil {
		return x.MoveDir
	}
	return nil
}

func (x *BreakoutAction) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *BreakoutAction) GetPeerId() uint32 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *BreakoutAction) GetElementType() uint32 {
	if x != nil {
		return x.ElementType
	}
	return 0
}

func (x *BreakoutAction) GetElementReactionBuff() uint32 {
	if x != nil {
		return x.ElementReactionBuff
	}
	return 0
}

func (x *BreakoutAction) GetSpeedIncreaseCount() uint32 {
	if x != nil {
		return x.SpeedIncreaseCount
	}
	return 0
}

func (x *BreakoutAction) GetHasExtraBall() bool {
	if x != nil {
		return x.HasExtraBall
	}
	return false
}

func (x *BreakoutAction) GetExtraBallDir() *BreakoutVector2 {
	if x != nil {
		return x.ExtraBallDir
	}
	return nil
}

func (x *BreakoutAction) GetExtraBallIndex() uint32 {
	if x != nil {
		return x.ExtraBallIndex
	}
	return 0
}

type AbilityMixinRecoverInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalId              uint32                 `protobuf:"varint,3,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty"`
	DataList             []uint32               `protobuf:"varint,4,rep,packed,name=data_list,json=dataList,proto3" json:"data_list,omitempty"`
	IsServerbuffModifier bool                   `protobuf:"varint,5,opt,name=is_serverbuff_modifier,json=isServerbuffModifier,proto3" json:"is_serverbuff_modifier,omitempty"`
	MassivePropList      []*MassivePropSyncInfo `protobuf:"bytes,6,rep,name=massive_prop_list,json=massivePropList,proto3" json:"massive_prop_list,omitempty"`
	BreakoutSnapShot     *BreakoutSnapShot      `protobuf:"bytes,7,opt,name=breakout_snap_shot,json=breakoutSnapShot,proto3" json:"breakout_snap_shot,omitempty"`
	// Types that are assignable to Source:
	//
	//	*AbilityMixinRecoverInfo_InstancedAbilityId
	//	*AbilityMixinRecoverInfo_InstancedModifierId
	Source isAbilityMixinRecoverInfo_Source `protobuf_oneof:"Source"`
}

func (x *AbilityMixinRecoverInfo) Reset() {
	*x = AbilityMixinRecoverInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbilityMixinRecoverInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbilityMixinRecoverInfo) ProtoMessage() {}

func (x *AbilityMixinRecoverInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbilityMixinRecoverInfo.ProtoReflect.Descriptor instead.
func (*AbilityMixinRecoverInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{40}
}

func (x *AbilityMixinRecoverInfo) GetLocalId() uint32 {
	if x != nil {
		return x.LocalId
	}
	return 0
}

func (x *AbilityMixinRecoverInfo) GetDataList() []uint32 {
	if x != nil {
		return x.DataList
	}
	return nil
}

func (x *AbilityMixinRecoverInfo) GetIsServerbuffModifier() bool {
	if x != nil {
		return x.IsServerbuffModifier
	}
	return false
}

func (x *AbilityMixinRecoverInfo) GetMassivePropList() []*MassivePropSyncInfo {
	if x != nil {
		return x.MassivePropList
	}
	return nil
}

func (x *AbilityMixinRecoverInfo) GetBreakoutSnapShot() *BreakoutSnapShot {
	if x != nil {
		return x.BreakoutSnapShot
	}
	return nil
}

func (m *AbilityMixinRecoverInfo) GetSource() isAbilityMixinRecoverInfo_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *AbilityMixinRecoverInfo) GetInstancedAbilityId() uint32 {
	if x, ok := x.GetSource().(*AbilityMixinRecoverInfo_InstancedAbilityId); ok {
		return x.InstancedAbilityId
	}
	return 0
}

func (x *AbilityMixinRecoverInfo) GetInstancedModifierId() uint32 {
	if x, ok := x.GetSource().(*AbilityMixinRecoverInfo_InstancedModifierId); ok {
		return x.InstancedModifierId
	}
	return 0
}

type isAbilityMixinRecoverInfo_Source interface {
	isAbilityMixinRecoverInfo_Source()
}

type AbilityMixinRecoverInfo_InstancedAbilityId struct {
	InstancedAbilityId uint32 `protobuf:"varint,1,opt,name=instanced_ability_id,json=instancedAbilityId,proto3,oneof"`
}

type AbilityMixinRecoverInfo_InstancedModifierId struct {
	InstancedModifierId uint32 `protobuf:"varint,2,opt,name=instanced_modifier_id,json=instancedModifierId,proto3,oneof"`
}

func (*AbilityMixinRecoverInfo_InstancedAbilityId) isAbilityMixinRecoverInfo_Source() {}

func (*AbilityMixinRecoverInfo_InstancedModifierId) isAbilityMixinRecoverInfo_Source() {}

type AbilitySyncStateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsInited           bool                       `protobuf:"varint,1,opt,name=is_inited,json=isInited,proto3" json:"is_inited,omitempty"`
	DynamicValueMap    []*AbilityScalarValueEntry `protobuf:"bytes,2,rep,name=dynamic_value_map,json=dynamicValueMap,proto3" json:"dynamic_value_map,omitempty"`
	AppliedAbilities   []*AbilityAppliedAbility   `protobuf:"bytes,3,rep,name=applied_abilities,json=appliedAbilities,proto3" json:"applied_abilities,omitempty"`
	AppliedModifiers   []*AbilityAppliedModifier  `protobuf:"bytes,4,rep,name=applied_modifiers,json=appliedModifiers,proto3" json:"applied_modifiers,omitempty"`
	MixinRecoverInfos  []*AbilityMixinRecoverInfo `protobuf:"bytes,5,rep,name=mixin_recover_infos,json=mixinRecoverInfos,proto3" json:"mixin_recover_infos,omitempty"`
	SgvDynamicValueMap []*AbilityScalarValueEntry `protobuf:"bytes,6,rep,name=sgv_dynamic_value_map,json=sgvDynamicValueMap,proto3" json:"sgv_dynamic_value_map,omitempty"`
}

func (x *AbilitySyncStateInfo) Reset() {
	*x = AbilitySyncStateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbilitySyncStateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbilitySyncStateInfo) ProtoMessage() {}

func (x *AbilitySyncStateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbilitySyncStateInfo.ProtoReflect.Descriptor instead.
func (*AbilitySyncStateInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{41}
}

func (x *AbilitySyncStateInfo) GetIsInited() bool {
	if x != nil {
		return x.IsInited
	}
	return false
}

func (x *AbilitySyncStateInfo) GetDynamicValueMap() []*AbilityScalarValueEntry {
	if x != nil {
		return x.DynamicValueMap
	}
	return nil
}

func (x *AbilitySyncStateInfo) GetAppliedAbilities() []*AbilityAppliedAbility {
	if x != nil {
		return x.AppliedAbilities
	}
	return nil
}

func (x *AbilitySyncStateInfo) GetAppliedModifiers() []*AbilityAppliedModifier {
	if x != nil {
		return x.AppliedModifiers
	}
	return nil
}

func (x *AbilitySyncStateInfo) GetMixinRecoverInfos() []*AbilityMixinRecoverInfo {
	if x != nil {
		return x.MixinRecoverInfos
	}
	return nil
}

func (x *AbilitySyncStateInfo) GetSgvDynamicValueMap() []*AbilityScalarValueEntry {
	if x != nil {
		return x.SgvDynamicValueMap
	}
	return nil
}

type AbilityEmbryo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbilityId               uint32 `protobuf:"varint,1,opt,name=ability_id,json=abilityId,proto3" json:"ability_id,omitempty"`
	AbilityNameHash         uint32 `protobuf:"fixed32,2,opt,name=ability_name_hash,json=abilityNameHash,proto3" json:"ability_name_hash,omitempty"`
	AbilityOverrideNameHash uint32 `protobuf:"fixed32,3,opt,name=ability_override_name_hash,json=abilityOverrideNameHash,proto3" json:"ability_override_name_hash,omitempty"`
}

func (x *AbilityEmbryo) Reset() {
	*x = AbilityEmbryo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbilityEmbryo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbilityEmbryo) ProtoMessage() {}

func (x *AbilityEmbryo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbilityEmbryo.ProtoReflect.Descriptor instead.
func (*AbilityEmbryo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{42}
}

func (x *AbilityEmbryo) GetAbilityId() uint32 {
	if x != nil {
		return x.AbilityId
	}
	return 0
}

func (x *AbilityEmbryo) GetAbilityNameHash() uint32 {
	if x != nil {
		return x.AbilityNameHash
	}
	return 0
}

func (x *AbilityEmbryo) GetAbilityOverrideNameHash() uint32 {
	if x != nil {
		return x.AbilityOverrideNameHash
	}
	return 0
}

type AbilityControlBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbilityEmbryoList []*AbilityEmbryo `protobuf:"bytes,1,rep,name=ability_embryo_list,json=abilityEmbryoList,proto3" json:"ability_embryo_list,omitempty"`
}

func (x *AbilityControlBlock) Reset() {
	*x = AbilityControlBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbilityControlBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbilityControlBlock) ProtoMessage() {}

func (x *AbilityControlBlock) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbilityControlBlock.ProtoReflect.Descriptor instead.
func (*AbilityControlBlock) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{43}
}

func (x *AbilityControlBlock) GetAbilityEmbryoList() []*AbilityEmbryo {
	if x != nil {
		return x.AbilityEmbryoList
	}
	return nil
}

type Vector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Vector) Reset() {
	*x = Vector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector) ProtoMessage() {}

func (x *Vector) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector.ProtoReflect.Descriptor instead.
func (*Vector) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{44}
}

func (x *Vector) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vector) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Vector) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type VectorPlane struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *VectorPlane) Reset() {
	*x = VectorPlane{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorPlane) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorPlane) ProtoMessage() {}

func (x *VectorPlane) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorPlane.ProtoReflect.Descriptor instead.
func (*VectorPlane) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{45}
}

func (x *VectorPlane) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *VectorPlane) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type Vector3Int struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	Z int32 `protobuf:"varint,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Vector3Int) Reset() {
	*x = Vector3Int{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector3Int) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector3Int) ProtoMessage() {}

func (x *Vector3Int) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector3Int.ProtoReflect.Descriptor instead.
func (*Vector3Int) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{46}
}

func (x *Vector3Int) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vector3Int) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Vector3Int) GetZ() int32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type EntityMoveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId    uint32      `protobuf:"varint,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	MotionInfo  *MotionInfo `protobuf:"bytes,2,opt,name=motion_info,json=motionInfo,proto3" json:"motion_info,omitempty"`
	SceneTime   uint32      `protobuf:"varint,3,opt,name=scene_time,json=sceneTime,proto3" json:"scene_time,omitempty"`
	ReliableSeq uint32      `protobuf:"varint,4,opt,name=reliable_seq,json=reliableSeq,proto3" json:"reliable_seq,omitempty"`
	IsReliable  bool        `protobuf:"varint,5,opt,name=is_reliable,json=isReliable,proto3" json:"is_reliable,omitempty"`
}

func (x *EntityMoveInfo) Reset() {
	*x = EntityMoveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityMoveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityMoveInfo) ProtoMessage() {}

func (x *EntityMoveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityMoveInfo.ProtoReflect.Descriptor instead.
func (*EntityMoveInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{47}
}

func (x *EntityMoveInfo) GetEntityId() uint32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *EntityMoveInfo) GetMotionInfo() *MotionInfo {
	if x != nil {
		return x.MotionInfo
	}
	return nil
}

func (x *EntityMoveInfo) GetSceneTime() uint32 {
	if x != nil {
		return x.SceneTime
	}
	return 0
}

func (x *EntityMoveInfo) GetReliableSeq() uint32 {
	if x != nil {
		return x.ReliableSeq
	}
	return 0
}

func (x *EntityMoveInfo) GetIsReliable() bool {
	if x != nil {
		return x.IsReliable
	}
	return false
}

type MotionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos              *Vector     `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	Rot              *Vector     `protobuf:"bytes,2,opt,name=rot,proto3" json:"rot,omitempty"`
	Speed            *Vector     `protobuf:"bytes,3,opt,name=speed,proto3" json:"speed,omitempty"`
	State            MotionState `protobuf:"varint,4,opt,name=state,proto3,enum=proto.MotionState" json:"state,omitempty"`
	Params           []*Vector   `protobuf:"bytes,5,rep,name=params,proto3" json:"params,omitempty"`
	RefPos           *Vector     `protobuf:"bytes,6,opt,name=ref_pos,json=refPos,proto3" json:"ref_pos,omitempty"`
	RefId            uint32      `protobuf:"varint,7,opt,name=ref_id,json=refId,proto3" json:"ref_id,omitempty"`
	SceneTime        uint32      `protobuf:"varint,8,opt,name=scene_time,json=sceneTime,proto3" json:"scene_time,omitempty"`
	IntervalVelocity uint64      `protobuf:"varint,9,opt,name=interval_velocity,json=intervalVelocity,proto3" json:"interval_velocity,omitempty"`
}

func (x *MotionInfo) Reset() {
	*x = MotionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MotionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MotionInfo) ProtoMessage() {}

func (x *MotionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MotionInfo.ProtoReflect.Descriptor instead.
func (*MotionInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{48}
}

func (x *MotionInfo) GetPos() *Vector {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MotionInfo) GetRot() *Vector {
	if x != nil {
		return x.Rot
	}
	return nil
}

func (x *MotionInfo) GetSpeed() *Vector {
	if x != nil {
		return x.Speed
	}
	return nil
}

func (x *MotionInfo) GetState() MotionState {
	if x != nil {
		return x.State
	}
	return MotionState_MOTION_NONE
}

func (x *MotionInfo) GetParams() []*Vector {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *MotionInfo) GetRefPos() *Vector {
	if x != nil {
		return x.RefPos
	}
	return nil
}

func (x *MotionInfo) GetRefId() uint32 {
	if x != nil {
		return x.RefId
	}
	return 0
}

func (x *MotionInfo) GetSceneTime() uint32 {
	if x != nil {
		return x.SceneTime
	}
	return 0
}

func (x *MotionInfo) GetIntervalVelocity() uint64 {
	if x != nil {
		return x.IntervalVelocity
	}
	return 0
}

type PlaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos *Vector `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	Rot *Vector `protobuf:"bytes,2,opt,name=rot,proto3" json:"rot,omitempty"`
}

func (x *PlaceInfo) Reset() {
	*x = PlaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceInfo) ProtoMessage() {}

func (x *PlaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceInfo.ProtoReflect.Descriptor instead.
func (*PlaceInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{49}
}

func (x *PlaceInfo) GetPos() *Vector {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *PlaceInfo) GetRot() *Vector {
	if x != nil {
		return x.Rot
	}
	return nil
}

type SceneWeaponInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId            uint32                     `protobuf:"varint,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	GadgetId            uint32                     `protobuf:"varint,2,opt,name=gadget_id,json=gadgetId,proto3" json:"gadget_id,omitempty"`
	ItemId              uint32                     `protobuf:"varint,3,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Guid                uint64                     `protobuf:"varint,4,opt,name=guid,proto3" json:"guid,omitempty"`
	Level               uint32                     `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	PromoteLevel        uint32                     `protobuf:"varint,6,opt,name=promote_level,json=promoteLevel,proto3" json:"promote_level,omitempty"`
	AbilityInfo         *AbilitySyncStateInfo      `protobuf:"bytes,7,opt,name=ability_info,json=abilityInfo,proto3" json:"ability_info,omitempty"`
	AffixMap            map[uint32]uint32          `protobuf:"bytes,8,rep,name=affix_map,json=affixMap,proto3" json:"affix_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RendererChangedInfo *EntityRendererChangedInfo `protobuf:"bytes,9,opt,name=renderer_changed_info,json=rendererChangedInfo,proto3" json:"renderer_changed_info,omitempty"`
}

func (x *SceneWeaponInfo) Reset() {
	*x = SceneWeaponInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneWeaponInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneWeaponInfo) ProtoMessage() {}

func (x *SceneWeaponInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneWeaponInfo.ProtoReflect.Descriptor instead.
func (*SceneWeaponInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{50}
}

func (x *SceneWeaponInfo) GetEntityId() uint32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *SceneWeaponInfo) GetGadgetId() uint32 {
	if x != nil {
		return x.GadgetId
	}
	return 0
}

func (x *SceneWeaponInfo) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *SceneWeaponInfo) GetGuid() uint64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *SceneWeaponInfo) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SceneWeaponInfo) GetPromoteLevel() uint32 {
	if x != nil {
		return x.PromoteLevel
	}
	return 0
}

func (x *SceneWeaponInfo) GetAbilityInfo() *AbilitySyncStateInfo {
	if x != nil {
		return x.AbilityInfo
	}
	return nil
}

func (x *SceneWeaponInfo) GetAffixMap() map[uint32]uint32 {
	if x != nil {
		return x.AffixMap
	}
	return nil
}

func (x *SceneWeaponInfo) GetRendererChangedInfo() *EntityRendererChangedInfo {
	if x != nil {
		return x.RendererChangedInfo
	}
	return nil
}

type SceneReliquaryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId       uint32 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Guid         uint64 `protobuf:"varint,2,opt,name=guid,proto3" json:"guid,omitempty"`
	Level        uint32 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	PromoteLevel uint32 `protobuf:"varint,4,opt,name=promote_level,json=promoteLevel,proto3" json:"promote_level,omitempty"`
}

func (x *SceneReliquaryInfo) Reset() {
	*x = SceneReliquaryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneReliquaryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneReliquaryInfo) ProtoMessage() {}

func (x *SceneReliquaryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneReliquaryInfo.ProtoReflect.Descriptor instead.
func (*SceneReliquaryInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{51}
}

func (x *SceneReliquaryInfo) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *SceneReliquaryInfo) GetGuid() uint64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *SceneReliquaryInfo) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SceneReliquaryInfo) GetPromoteLevel() uint32 {
	if x != nil {
		return x.PromoteLevel
	}
	return 0
}

type ServerBuff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerBuffUid       uint32 `protobuf:"varint,1,opt,name=server_buff_uid,json=serverBuffUid,proto3" json:"server_buff_uid,omitempty"`
	ServerBuffId        uint32 `protobuf:"varint,2,opt,name=server_buff_id,json=serverBuffId,proto3" json:"server_buff_id,omitempty"`
	ServerBuffType      uint32 `protobuf:"varint,3,opt,name=server_buff_type,json=serverBuffType,proto3" json:"server_buff_type,omitempty"`
	InstancedModifierId uint32 `protobuf:"varint,4,opt,name=instanced_modifier_id,json=instancedModifierId,proto3" json:"instanced_modifier_id,omitempty"`
	IsModifierAdded     bool   `protobuf:"varint,5,opt,name=is_modifier_added,json=isModifierAdded,proto3" json:"is_modifier_added,omitempty"`
}

func (x *ServerBuff) Reset() {
	*x = ServerBuff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerBuff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerBuff) ProtoMessage() {}

func (x *ServerBuff) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerBuff.ProtoReflect.Descriptor instead.
func (*ServerBuff) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{52}
}

func (x *ServerBuff) GetServerBuffUid() uint32 {
	if x != nil {
		return x.ServerBuffUid
	}
	return 0
}

func (x *ServerBuff) GetServerBuffId() uint32 {
	if x != nil {
		return x.ServerBuffId
	}
	return 0
}

func (x *ServerBuff) GetServerBuffType() uint32 {
	if x != nil {
		return x.ServerBuffType
	}
	return 0
}

func (x *ServerBuff) GetInstancedModifierId() uint32 {
	if x != nil {
		return x.InstancedModifierId
	}
	return 0
}

func (x *ServerBuff) GetIsModifierAdded() bool {
	if x != nil {
		return x.IsModifierAdded
	}
	return false
}

type CurVehicleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId uint32 `protobuf:"varint,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Pos      uint32 `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *CurVehicleInfo) Reset() {
	*x = CurVehicleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurVehicleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurVehicleInfo) ProtoMessage() {}

func (x *CurVehicleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurVehicleInfo.ProtoReflect.Descriptor instead.
func (*CurVehicleInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{53}
}

func (x *CurVehicleInfo) GetEntityId() uint32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *CurVehicleInfo) GetPos() uint32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

type AvatarExcelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefabPathHash           uint64 `protobuf:"varint,1,opt,name=prefab_path_hash,json=prefabPathHash,proto3" json:"prefab_path_hash,omitempty"`
	PrefabPathRemoteHash     uint64 `protobuf:"varint,2,opt,name=prefab_path_remote_hash,json=prefabPathRemoteHash,proto3" json:"prefab_path_remote_hash,omitempty"`
	ControllerPathHash       uint64 `protobuf:"varint,3,opt,name=controller_path_hash,json=controllerPathHash,proto3" json:"controller_path_hash,omitempty"`
	ControllerPathRemoteHash uint64 `protobuf:"varint,4,opt,name=controller_path_remote_hash,json=controllerPathRemoteHash,proto3" json:"controller_path_remote_hash,omitempty"`
	CombatConfigHash         uint64 `protobuf:"varint,5,opt,name=combat_config_hash,json=combatConfigHash,proto3" json:"combat_config_hash,omitempty"`
}

func (x *AvatarExcelInfo) Reset() {
	*x = AvatarExcelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarExcelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarExcelInfo) ProtoMessage() {}

func (x *AvatarExcelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarExcelInfo.ProtoReflect.Descriptor instead.
func (*AvatarExcelInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{54}
}

func (x *AvatarExcelInfo) GetPrefabPathHash() uint64 {
	if x != nil {
		return x.PrefabPathHash
	}
	return 0
}

func (x *AvatarExcelInfo) GetPrefabPathRemoteHash() uint64 {
	if x != nil {
		return x.PrefabPathRemoteHash
	}
	return 0
}

func (x *AvatarExcelInfo) GetControllerPathHash() uint64 {
	if x != nil {
		return x.ControllerPathHash
	}
	return 0
}

func (x *AvatarExcelInfo) GetControllerPathRemoteHash() uint64 {
	if x != nil {
		return x.ControllerPathRemoteHash
	}
	return 0
}

func (x *AvatarExcelInfo) GetCombatConfigHash() uint64 {
	if x != nil {
		return x.CombatConfigHash
	}
	return 0
}

type SceneAvatarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                     uint32                `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AvatarId                uint32                `protobuf:"varint,2,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	Guid                    uint64                `protobuf:"varint,3,opt,name=guid,proto3" json:"guid,omitempty"`
	PeerId                  uint32                `protobuf:"varint,4,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	EquipIdList             []uint32              `protobuf:"varint,5,rep,packed,name=equip_id_list,json=equipIdList,proto3" json:"equip_id_list,omitempty"`
	SkillDepotId            uint32                `protobuf:"varint,6,opt,name=skill_depot_id,json=skillDepotId,proto3" json:"skill_depot_id,omitempty"`
	TalentIdList            []uint32              `protobuf:"varint,7,rep,packed,name=talent_id_list,json=talentIdList,proto3" json:"talent_id_list,omitempty"`
	Weapon                  *SceneWeaponInfo      `protobuf:"bytes,8,opt,name=weapon,proto3" json:"weapon,omitempty"`
	ReliquaryList           []*SceneReliquaryInfo `protobuf:"bytes,9,rep,name=reliquary_list,json=reliquaryList,proto3" json:"reliquary_list,omitempty"`
	CoreProudSkillLevel     uint32                `protobuf:"varint,11,opt,name=core_proud_skill_level,json=coreProudSkillLevel,proto3" json:"core_proud_skill_level,omitempty"`
	InherentProudSkillList  []uint32              `protobuf:"varint,12,rep,packed,name=inherent_proud_skill_list,json=inherentProudSkillList,proto3" json:"inherent_proud_skill_list,omitempty"`
	SkillLevelMap           map[uint32]uint32     `protobuf:"bytes,13,rep,name=skill_level_map,json=skillLevelMap,proto3" json:"skill_level_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ProudSkillExtraLevelMap map[uint32]uint32     `protobuf:"bytes,14,rep,name=proud_skill_extra_level_map,json=proudSkillExtraLevelMap,proto3" json:"proud_skill_extra_level_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ServerBuffList          []*ServerBuff         `protobuf:"bytes,15,rep,name=server_buff_list,json=serverBuffList,proto3" json:"server_buff_list,omitempty"`
	TeamResonanceList       []uint32              `protobuf:"varint,16,rep,packed,name=team_resonance_list,json=teamResonanceList,proto3" json:"team_resonance_list,omitempty"`
	WearingFlycloakId       uint32                `protobuf:"varint,17,opt,name=wearing_flycloak_id,json=wearingFlycloakId,proto3" json:"wearing_flycloak_id,omitempty"`
	BornTime                uint32                `protobuf:"varint,18,opt,name=born_time,json=bornTime,proto3" json:"born_time,omitempty"`
	CostumeId               uint32                `protobuf:"varint,19,opt,name=costume_id,json=costumeId,proto3" json:"costume_id,omitempty"`
	CurVehicleInfo          *CurVehicleInfo       `protobuf:"bytes,20,opt,name=cur_vehicle_info,json=curVehicleInfo,proto3" json:"cur_vehicle_info,omitempty"`
	ExcelInfo               *AvatarExcelInfo      `protobuf:"bytes,21,opt,name=excel_info,json=excelInfo,proto3" json:"excel_info,omitempty"`
	AnimHash                uint32                `protobuf:"varint,22,opt,name=anim_hash,json=animHash,proto3" json:"anim_hash,omitempty"`
}

func (x *SceneAvatarInfo) Reset() {
	*x = SceneAvatarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneAvatarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneAvatarInfo) ProtoMessage() {}

func (x *SceneAvatarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneAvatarInfo.ProtoReflect.Descriptor instead.
func (*SceneAvatarInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{55}
}

func (x *SceneAvatarInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SceneAvatarInfo) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *SceneAvatarInfo) GetGuid() uint64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *SceneAvatarInfo) GetPeerId() uint32 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *SceneAvatarInfo) GetEquipIdList() []uint32 {
	if x != nil {
		return x.EquipIdList
	}
	return nil
}

func (x *SceneAvatarInfo) GetSkillDepotId() uint32 {
	if x != nil {
		return x.SkillDepotId
	}
	return 0
}

func (x *SceneAvatarInfo) GetTalentIdList() []uint32 {
	if x != nil {
		return x.TalentIdList
	}
	return nil
}

func (x *SceneAvatarInfo) GetWeapon() *SceneWeaponInfo {
	if x != nil {
		return x.Weapon
	}
	return nil
}

func (x *SceneAvatarInfo) GetReliquaryList() []*SceneReliquaryInfo {
	if x != nil {
		return x.ReliquaryList
	}
	return nil
}

func (x *SceneAvatarInfo) GetCoreProudSkillLevel() uint32 {
	if x != nil {
		return x.CoreProudSkillLevel
	}
	return 0
}

func (x *SceneAvatarInfo) GetInherentProudSkillList() []uint32 {
	if x != nil {
		return x.InherentProudSkillList
	}
	return nil
}

func (x *SceneAvatarInfo) GetSkillLevelMap() map[uint32]uint32 {
	if x != nil {
		return x.SkillLevelMap
	}
	return nil
}

func (x *SceneAvatarInfo) GetProudSkillExtraLevelMap() map[uint32]uint32 {
	if x != nil {
		return x.ProudSkillExtraLevelMap
	}
	return nil
}

func (x *SceneAvatarInfo) GetServerBuffList() []*ServerBuff {
	if x != nil {
		return x.ServerBuffList
	}
	return nil
}

func (x *SceneAvatarInfo) GetTeamResonanceList() []uint32 {
	if x != nil {
		return x.TeamResonanceList
	}
	return nil
}

func (x *SceneAvatarInfo) GetWearingFlycloakId() uint32 {
	if x != nil {
		return x.WearingFlycloakId
	}
	return 0
}

func (x *SceneAvatarInfo) GetBornTime() uint32 {
	if x != nil {
		return x.BornTime
	}
	return 0
}

func (x *SceneAvatarInfo) GetCostumeId() uint32 {
	if x != nil {
		return x.CostumeId
	}
	return 0
}

func (x *SceneAvatarInfo) GetCurVehicleInfo() *CurVehicleInfo {
	if x != nil {
		return x.CurVehicleInfo
	}
	return nil
}

func (x *SceneAvatarInfo) GetExcelInfo() *AvatarExcelInfo {
	if x != nil {
		return x.ExcelInfo
	}
	return nil
}

func (x *SceneAvatarInfo) GetAnimHash() uint32 {
	if x != nil {
		return x.AnimHash
	}
	return 0
}

type SceneFishInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishId           uint32  `protobuf:"varint,1,opt,name=fish_id,json=fishId,proto3" json:"fish_id,omitempty"`
	FishPoolEntityId uint32  `protobuf:"varint,2,opt,name=fish_pool_entity_id,json=fishPoolEntityId,proto3" json:"fish_pool_entity_id,omitempty"`
	FishPoolPos      *Vector `protobuf:"bytes,3,opt,name=fish_pool_pos,json=fishPoolPos,proto3" json:"fish_pool_pos,omitempty"`
	FishPoolGadgetId uint32  `protobuf:"varint,4,opt,name=fish_pool_gadget_id,json=fishPoolGadgetId,proto3" json:"fish_pool_gadget_id,omitempty"`
	LastShockTime    uint32  `protobuf:"varint,5,opt,name=last_shock_time,json=lastShockTime,proto3" json:"last_shock_time,omitempty"`
}

func (x *SceneFishInfo) Reset() {
	*x = SceneFishInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneFishInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneFishInfo) ProtoMessage() {}

func (x *SceneFishInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneFishInfo.ProtoReflect.Descriptor instead.
func (*SceneFishInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{56}
}

func (x *SceneFishInfo) GetFishId() uint32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *SceneFishInfo) GetFishPoolEntityId() uint32 {
	if x != nil {
		return x.FishPoolEntityId
	}
	return 0
}

func (x *SceneFishInfo) GetFishPoolPos() *Vector {
	if x != nil {
		return x.FishPoolPos
	}
	return nil
}

func (x *SceneFishInfo) GetFishPoolGadgetId() uint32 {
	if x != nil {
		return x.FishPoolGadgetId
	}
	return 0
}

func (x *SceneFishInfo) GetLastShockTime() uint32 {
	if x != nil {
		return x.LastShockTime
	}
	return 0
}

type FishtankFishInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishDistanceFromWater float32 `protobuf:"fixed32,1,opt,name=fish_distance_from_water,json=fishDistanceFromWater,proto3" json:"fish_distance_from_water,omitempty"`
	FishScale             float32 `protobuf:"fixed32,2,opt,name=fish_scale,json=fishScale,proto3" json:"fish_scale,omitempty"`
	InitialRotationY      float32 `protobuf:"fixed32,3,opt,name=initial_rotation_y,json=initialRotationY,proto3" json:"initial_rotation_y,omitempty"`
}

func (x *FishtankFishInfo) Reset() {
	*x = FishtankFishInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishtankFishInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishtankFishInfo) ProtoMessage() {}

func (x *FishtankFishInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishtankFishInfo.ProtoReflect.Descriptor instead.
func (*FishtankFishInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{57}
}

func (x *FishtankFishInfo) GetFishDistanceFromWater() float32 {
	if x != nil {
		return x.FishDistanceFromWater
	}
	return 0
}

func (x *FishtankFishInfo) GetFishScale() float32 {
	if x != nil {
		return x.FishScale
	}
	return 0
}

func (x *FishtankFishInfo) GetInitialRotationY() float32 {
	if x != nil {
		return x.InitialRotationY
	}
	return 0
}

type SceneMonsterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterId       uint32             `protobuf:"varint,1,opt,name=monster_id,json=monsterId,proto3" json:"monster_id,omitempty"`
	GroupId         uint32             `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ConfigId        uint32             `protobuf:"varint,3,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	WeaponList      []*SceneWeaponInfo `protobuf:"bytes,4,rep,name=weapon_list,json=weaponList,proto3" json:"weapon_list,omitempty"`
	AuthorityPeerId uint32             `protobuf:"varint,5,opt,name=authority_peer_id,json=authorityPeerId,proto3" json:"authority_peer_id,omitempty"`
	AffixList       []uint32           `protobuf:"varint,6,rep,packed,name=affix_list,json=affixList,proto3" json:"affix_list,omitempty"`
	IsElite         bool               `protobuf:"varint,7,opt,name=is_elite,json=isElite,proto3" json:"is_elite,omitempty"`
	OwnerEntityId   uint32             `protobuf:"varint,8,opt,name=owner_entity_id,json=ownerEntityId,proto3" json:"owner_entity_id,omitempty"`
	SummonedTag     uint32             `protobuf:"varint,9,opt,name=summoned_tag,json=summonedTag,proto3" json:"summoned_tag,omitempty"`
	SummonTagMap    map[uint32]uint32  `protobuf:"bytes,10,rep,name=summon_tag_map,json=summonTagMap,proto3" json:"summon_tag_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	PoseId          uint32             `protobuf:"varint,11,opt,name=pose_id,json=poseId,proto3" json:"pose_id,omitempty"`
	BornType        MonsterBornType    `protobuf:"varint,12,opt,name=born_type,json=bornType,proto3,enum=proto.MonsterBornType" json:"born_type,omitempty"`
	BlockId         uint32             `protobuf:"varint,13,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	MarkFlag        uint32             `protobuf:"varint,14,opt,name=mark_flag,json=markFlag,proto3" json:"mark_flag,omitempty"`
	TitleId         uint32             `protobuf:"varint,15,opt,name=title_id,json=titleId,proto3" json:"title_id,omitempty"`
	SpecialNameId   uint32             `protobuf:"varint,16,opt,name=special_name_id,json=specialNameId,proto3" json:"special_name_id,omitempty"`
	AttackTargetId  uint32             `protobuf:"varint,17,opt,name=attack_target_id,json=attackTargetId,proto3" json:"attack_target_id,omitempty"`
	MonsterRoute    *MonsterRoute      `protobuf:"bytes,18,opt,name=monster_route,json=monsterRoute,proto3" json:"monster_route,omitempty"`
	AiConfigId      uint32             `protobuf:"varint,19,opt,name=ai_config_id,json=aiConfigId,proto3" json:"ai_config_id,omitempty"`
	LevelRouteId    uint32             `protobuf:"varint,20,opt,name=level_route_id,json=levelRouteId,proto3" json:"level_route_id,omitempty"`
	InitPoseId      uint32             `protobuf:"varint,21,opt,name=init_pose_id,json=initPoseId,proto3" json:"init_pose_id,omitempty"`
	IsLight         bool               `protobuf:"varint,22,opt,name=is_light,json=isLight,proto3" json:"is_light,omitempty"`
	KillNum         uint32             `protobuf:"varint,23,opt,name=kill_num,json=killNum,proto3" json:"kill_num,omitempty"`
	// Types that are assignable to Content:
	//
	//	*SceneMonsterInfo_FishInfo
	//	*SceneMonsterInfo_FishtankFishInfo
	Content isSceneMonsterInfo_Content `protobuf_oneof:"content"`
}

func (x *SceneMonsterInfo) Reset() {
	*x = SceneMonsterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneMonsterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneMonsterInfo) ProtoMessage() {}

func (x *SceneMonsterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneMonsterInfo.ProtoReflect.Descriptor instead.
func (*SceneMonsterInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{58}
}

func (x *SceneMonsterInfo) GetMonsterId() uint32 {
	if x != nil {
		return x.MonsterId
	}
	return 0
}

func (x *SceneMonsterInfo) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SceneMonsterInfo) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *SceneMonsterInfo) GetWeaponList() []*SceneWeaponInfo {
	if x != nil {
		return x.WeaponList
	}
	return nil
}

func (x *SceneMonsterInfo) GetAuthorityPeerId() uint32 {
	if x != nil {
		return x.AuthorityPeerId
	}
	return 0
}

func (x *SceneMonsterInfo) GetAffixList() []uint32 {
	if x != nil {
		return x.AffixList
	}
	return nil
}

func (x *SceneMonsterInfo) GetIsElite() bool {
	if x != nil {
		return x.IsElite
	}
	return false
}

func (x *SceneMonsterInfo) GetOwnerEntityId() uint32 {
	if x != nil {
		return x.OwnerEntityId
	}
	return 0
}

func (x *SceneMonsterInfo) GetSummonedTag() uint32 {
	if x != nil {
		return x.SummonedTag
	}
	return 0
}

func (x *SceneMonsterInfo) GetSummonTagMap() map[uint32]uint32 {
	if x != nil {
		return x.SummonTagMap
	}
	return nil
}

func (x *SceneMonsterInfo) GetPoseId() uint32 {
	if x != nil {
		return x.PoseId
	}
	return 0
}

func (x *SceneMonsterInfo) GetBornType() MonsterBornType {
	if x != nil {
		return x.BornType
	}
	return MonsterBornType_MONSTER_BORN_NONE
}

func (x *SceneMonsterInfo) GetBlockId() uint32 {
	if x != nil {
		return x.BlockId
	}
	return 0
}

func (x *SceneMonsterInfo) GetMarkFlag() uint32 {
	if x != nil {
		return x.MarkFlag
	}
	return 0
}

func (x *SceneMonsterInfo) GetTitleId() uint32 {
	if x != nil {
		return x.TitleId
	}
	return 0
}

func (x *SceneMonsterInfo) GetSpecialNameId() uint32 {
	if x != nil {
		return x.SpecialNameId
	}
	return 0
}

func (x *SceneMonsterInfo) GetAttackTargetId() uint32 {
	if x != nil {
		return x.AttackTargetId
	}
	return 0
}

func (x *SceneMonsterInfo) GetMonsterRoute() *MonsterRoute {
	if x != nil {
		return x.MonsterRoute
	}
	return nil
}

func (x *SceneMonsterInfo) GetAiConfigId() uint32 {
	if x != nil {
		return x.AiConfigId
	}
	return 0
}

func (x *SceneMonsterInfo) GetLevelRouteId() uint32 {
	if x != nil {
		return x.LevelRouteId
	}
	return 0
}

func (x *SceneMonsterInfo) GetInitPoseId() uint32 {
	if x != nil {
		return x.InitPoseId
	}
	return 0
}

func (x *SceneMonsterInfo) GetIsLight() bool {
	if x != nil {
		return x.IsLight
	}
	return false
}

func (x *SceneMonsterInfo) GetKillNum() uint32 {
	if x != nil {
		return x.KillNum
	}
	return 0
}

func (m *SceneMonsterInfo) GetContent() isSceneMonsterInfo_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *SceneMonsterInfo) GetFishInfo() *SceneFishInfo {
	if x, ok := x.GetContent().(*SceneMonsterInfo_FishInfo); ok {
		return x.FishInfo
	}
	return nil
}

func (x *SceneMonsterInfo) GetFishtankFishInfo() *FishtankFishInfo {
	if x, ok := x.GetContent().(*SceneMonsterInfo_FishtankFishInfo); ok {
		return x.FishtankFishInfo
	}
	return nil
}

type isSceneMonsterInfo_Content interface {
	isSceneMonsterInfo_Content()
}

type SceneMonsterInfo_FishInfo struct {
	FishInfo *SceneFishInfo `protobuf:"bytes,50,opt,name=fish_info,json=fishInfo,proto3,oneof"`
}

type SceneMonsterInfo_FishtankFishInfo struct {
	FishtankFishInfo *FishtankFishInfo `protobuf:"bytes,51,opt,name=fishtank_fish_info,json=fishtankFishInfo,proto3,oneof"`
}

func (*SceneMonsterInfo_FishInfo) isSceneMonsterInfo_Content() {}

func (*SceneMonsterInfo_FishtankFishInfo) isSceneMonsterInfo_Content() {}

type SceneNpcInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NpcId         uint32 `protobuf:"varint,1,opt,name=npc_id,json=npcId,proto3" json:"npc_id,omitempty"`
	RoomId        uint32 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	ParentQuestId uint32 `protobuf:"varint,3,opt,name=parent_quest_id,json=parentQuestId,proto3" json:"parent_quest_id,omitempty"`
	BlockId       uint32 `protobuf:"varint,4,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
}

func (x *SceneNpcInfo) Reset() {
	*x = SceneNpcInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneNpcInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneNpcInfo) ProtoMessage() {}

func (x *SceneNpcInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneNpcInfo.ProtoReflect.Descriptor instead.
func (*SceneNpcInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{59}
}

func (x *SceneNpcInfo) GetNpcId() uint32 {
	if x != nil {
		return x.NpcId
	}
	return 0
}

func (x *SceneNpcInfo) GetRoomId() uint32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *SceneNpcInfo) GetParentQuestId() uint32 {
	if x != nil {
		return x.ParentQuestId
	}
	return 0
}

func (x *SceneNpcInfo) GetBlockId() uint32 {
	if x != nil {
		return x.BlockId
	}
	return 0
}

type WorktopInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptionList        []uint32 `protobuf:"varint,1,rep,packed,name=option_list,json=optionList,proto3" json:"option_list,omitempty"`
	IsGuestCanOperate bool     `protobuf:"varint,2,opt,name=is_guest_can_operate,json=isGuestCanOperate,proto3" json:"is_guest_can_operate,omitempty"`
}

func (x *WorktopInfo) Reset() {
	*x = WorktopInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorktopInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorktopInfo) ProtoMessage() {}

func (x *WorktopInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorktopInfo.ProtoReflect.Descriptor instead.
func (*WorktopInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{60}
}

func (x *WorktopInfo) GetOptionList() []uint32 {
	if x != nil {
		return x.OptionList
	}
	return nil
}

func (x *WorktopInfo) GetIsGuestCanOperate() bool {
	if x != nil {
		return x.IsGuestCanOperate
	}
	return false
}

type MathQuaternion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
	W float32 `protobuf:"fixed32,4,opt,name=w,proto3" json:"w,omitempty"`
}

func (x *MathQuaternion) Reset() {
	*x = MathQuaternion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MathQuaternion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MathQuaternion) ProtoMessage() {}

func (x *MathQuaternion) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MathQuaternion.ProtoReflect.Descriptor instead.
func (*MathQuaternion) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{61}
}

func (x *MathQuaternion) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *MathQuaternion) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *MathQuaternion) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *MathQuaternion) GetW() float32 {
	if x != nil {
		return x.W
	}
	return 0
}

type PlatformInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId            uint32             `protobuf:"varint,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	StartIndex         int32              `protobuf:"varint,2,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	StartRouteTime     uint32             `protobuf:"varint,3,opt,name=start_route_time,json=startRouteTime,proto3" json:"start_route_time,omitempty"`
	StartSceneTime     uint32             `protobuf:"varint,4,opt,name=start_scene_time,json=startSceneTime,proto3" json:"start_scene_time,omitempty"`
	StartPos           *Vector            `protobuf:"bytes,7,opt,name=start_pos,json=startPos,proto3" json:"start_pos,omitempty"`
	IsStarted          bool               `protobuf:"varint,8,opt,name=is_started,json=isStarted,proto3" json:"is_started,omitempty"`
	StartRot           *MathQuaternion    `protobuf:"bytes,9,opt,name=start_rot,json=startRot,proto3" json:"start_rot,omitempty"`
	StopSceneTime      uint32             `protobuf:"varint,10,opt,name=stop_scene_time,json=stopSceneTime,proto3" json:"stop_scene_time,omitempty"`
	PosOffset          *Vector            `protobuf:"bytes,11,opt,name=pos_offset,json=posOffset,proto3" json:"pos_offset,omitempty"`
	RotOffset          *MathQuaternion    `protobuf:"bytes,12,opt,name=rot_offset,json=rotOffset,proto3" json:"rot_offset,omitempty"`
	MovingPlatformType MovingPlatformType `protobuf:"varint,13,opt,name=moving_platform_type,json=movingPlatformType,proto3,enum=proto.MovingPlatformType" json:"moving_platform_type,omitempty"`
	IsActive           bool               `protobuf:"varint,14,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Route              *Route             `protobuf:"bytes,15,opt,name=route,proto3" json:"route,omitempty"`
	PointId            uint32             `protobuf:"varint,16,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
}

func (x *PlatformInfo) Reset() {
	*x = PlatformInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformInfo) ProtoMessage() {}

func (x *PlatformInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformInfo.ProtoReflect.Descriptor instead.
func (*PlatformInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{62}
}

func (x *PlatformInfo) GetRouteId() uint32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

func (x *PlatformInfo) GetStartIndex() int32 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *PlatformInfo) GetStartRouteTime() uint32 {
	if x != nil {
		return x.StartRouteTime
	}
	return 0
}

func (x *PlatformInfo) GetStartSceneTime() uint32 {
	if x != nil {
		return x.StartSceneTime
	}
	return 0
}

func (x *PlatformInfo) GetStartPos() *Vector {
	if x != nil {
		return x.StartPos
	}
	return nil
}

func (x *PlatformInfo) GetIsStarted() bool {
	if x != nil {
		return x.IsStarted
	}
	return false
}

func (x *PlatformInfo) GetStartRot() *MathQuaternion {
	if x != nil {
		return x.StartRot
	}
	return nil
}

func (x *PlatformInfo) GetStopSceneTime() uint32 {
	if x != nil {
		return x.StopSceneTime
	}
	return 0
}

func (x *PlatformInfo) GetPosOffset() *Vector {
	if x != nil {
		return x.PosOffset
	}
	return nil
}

func (x *PlatformInfo) GetRotOffset() *MathQuaternion {
	if x != nil {
		return x.RotOffset
	}
	return nil
}

func (x *PlatformInfo) GetMovingPlatformType() MovingPlatformType {
	if x != nil {
		return x.MovingPlatformType
	}
	return MovingPlatformType_MOVING_PLATFORM_NONE
}

func (x *PlatformInfo) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *PlatformInfo) GetRoute() *Route {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *PlatformInfo) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

type RoutePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position      *Vector `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	ArriveRange   float32 `protobuf:"fixed32,2,opt,name=arrive_range,json=arriveRange,proto3" json:"arrive_range,omitempty"`
	HasReachEvent bool    `protobuf:"varint,3,opt,name=has_reach_event,json=hasReachEvent,proto3" json:"has_reach_event,omitempty"`
	// Types that are assignable to MoveParams:
	//
	//	*RoutePoint_Velocity
	//	*RoutePoint_Time
	MoveParams isRoutePoint_MoveParams `protobuf_oneof:"move_params"`
	// Types that are assignable to RotateParams:
	//
	//	*RoutePoint_Rotation
	//	*RoutePoint_RotationSpeed
	//	*RoutePoint_AxisSpeed
	RotateParams isRoutePoint_RotateParams `protobuf_oneof:"rotate_params"`
}

func (x *RoutePoint) Reset() {
	*x = RoutePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutePoint) ProtoMessage() {}

func (x *RoutePoint) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutePoint.ProtoReflect.Descriptor instead.
func (*RoutePoint) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{63}
}

func (x *RoutePoint) GetPosition() *Vector {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *RoutePoint) GetArriveRange() float32 {
	if x != nil {
		return x.ArriveRange
	}
	return 0
}

func (x *RoutePoint) GetHasReachEvent() bool {
	if x != nil {
		return x.HasReachEvent
	}
	return false
}

func (m *RoutePoint) GetMoveParams() isRoutePoint_MoveParams {
	if m != nil {
		return m.MoveParams
	}
	return nil
}

func (x *RoutePoint) GetVelocity() float32 {
	if x, ok := x.GetMoveParams().(*RoutePoint_Velocity); ok {
		return x.Velocity
	}
	return 0
}

func (x *RoutePoint) GetTime() float32 {
	if x, ok := x.GetMoveParams().(*RoutePoint_Time); ok {
		return x.Time
	}
	return 0
}

func (m *RoutePoint) GetRotateParams() isRoutePoint_RotateParams {
	if m != nil {
		return m.RotateParams
	}
	return nil
}

func (x *RoutePoint) GetRotation() *Vector {
	if x, ok := x.GetRotateParams().(*RoutePoint_Rotation); ok {
		return x.Rotation
	}
	return nil
}

func (x *RoutePoint) GetRotationSpeed() *MathQuaternion {
	if x, ok := x.GetRotateParams().(*RoutePoint_RotationSpeed); ok {
		return x.RotationSpeed
	}
	return nil
}

func (x *RoutePoint) GetAxisSpeed() *MathQuaternion {
	if x, ok := x.GetRotateParams().(*RoutePoint_AxisSpeed); ok {
		return x.AxisSpeed
	}
	return nil
}

type isRoutePoint_MoveParams interface {
	isRoutePoint_MoveParams()
}

type RoutePoint_Velocity struct {
	Velocity float32 `protobuf:"fixed32,11,opt,name=velocity,proto3,oneof"`
}

type RoutePoint_Time struct {
	Time float32 `protobuf:"fixed32,12,opt,name=time,proto3,oneof"`
}

func (*RoutePoint_Velocity) isRoutePoint_MoveParams() {}

func (*RoutePoint_Time) isRoutePoint_MoveParams() {}

type isRoutePoint_RotateParams interface {
	isRoutePoint_RotateParams()
}

type RoutePoint_Rotation struct {
	Rotation *Vector `protobuf:"bytes,21,opt,name=rotation,proto3,oneof"`
}

type RoutePoint_RotationSpeed struct {
	RotationSpeed *MathQuaternion `protobuf:"bytes,22,opt,name=rotation_speed,json=rotationSpeed,proto3,oneof"`
}

type RoutePoint_AxisSpeed struct {
	AxisSpeed *MathQuaternion `protobuf:"bytes,23,opt,name=axis_speed,json=axisSpeed,proto3,oneof"`
}

func (*RoutePoint_Rotation) isRoutePoint_RotateParams() {}

func (*RoutePoint_RotationSpeed) isRoutePoint_RotateParams() {}

func (*RoutePoint_AxisSpeed) isRoutePoint_RotateParams() {}

type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoutePoints []*RoutePoint `protobuf:"bytes,1,rep,name=route_points,json=routePoints,proto3" json:"route_points,omitempty"`
	RouteType   uint32        `protobuf:"varint,2,opt,name=route_type,json=routeType,proto3" json:"route_type,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{64}
}

func (x *Route) GetRoutePoints() []*RoutePoint {
	if x != nil {
		return x.RoutePoints
	}
	return nil
}

func (x *Route) GetRouteType() uint32 {
	if x != nil {
		return x.RouteType
	}
	return 0
}

type MonsterRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoutePoints []*RoutePoint `protobuf:"bytes,1,rep,name=route_points,json=routePoints,proto3" json:"route_points,omitempty"`
	SpeedLevel  uint32        `protobuf:"varint,2,opt,name=speed_level,json=speedLevel,proto3" json:"speed_level,omitempty"`
	RouteType   uint32        `protobuf:"varint,3,opt,name=route_type,json=routeType,proto3" json:"route_type,omitempty"`
	ArriveRange float32       `protobuf:"fixed32,4,opt,name=arrive_range,json=arriveRange,proto3" json:"arrive_range,omitempty"`
}

func (x *MonsterRoute) Reset() {
	*x = MonsterRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonsterRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonsterRoute) ProtoMessage() {}

func (x *MonsterRoute) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonsterRoute.ProtoReflect.Descriptor instead.
func (*MonsterRoute) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{65}
}

func (x *MonsterRoute) GetRoutePoints() []*RoutePoint {
	if x != nil {
		return x.RoutePoints
	}
	return nil
}

func (x *MonsterRoute) GetSpeedLevel() uint32 {
	if x != nil {
		return x.SpeedLevel
	}
	return 0
}

func (x *MonsterRoute) GetRouteType() uint32 {
	if x != nil {
		return x.RouteType
	}
	return 0
}

func (x *MonsterRoute) GetArriveRange() float32 {
	if x != nil {
		return x.ArriveRange
	}
	return 0
}

type WeatherInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WeatherAreaId uint32 `protobuf:"varint,1,opt,name=weather_area_id,json=weatherAreaId,proto3" json:"weather_area_id,omitempty"`
}

func (x *WeatherInfo) Reset() {
	*x = WeatherInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeatherInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherInfo) ProtoMessage() {}

func (x *WeatherInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherInfo.ProtoReflect.Descriptor instead.
func (*WeatherInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{66}
}

func (x *WeatherInfo) GetWeatherAreaId() uint32 {
	if x != nil {
		return x.WeatherAreaId
	}
	return 0
}

type ClientGadgetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CampId             uint32   `protobuf:"varint,1,opt,name=camp_id,json=campId,proto3" json:"camp_id,omitempty"`
	CampType           uint32   `protobuf:"varint,2,opt,name=camp_type,json=campType,proto3" json:"camp_type,omitempty"`
	Guid               uint64   `protobuf:"varint,3,opt,name=guid,proto3" json:"guid,omitempty"`
	OwnerEntityId      uint32   `protobuf:"varint,4,opt,name=owner_entity_id,json=ownerEntityId,proto3" json:"owner_entity_id,omitempty"`
	TargetEntityId     uint32   `protobuf:"varint,5,opt,name=target_entity_id,json=targetEntityId,proto3" json:"target_entity_id,omitempty"`
	AsyncLoad          bool     `protobuf:"varint,6,opt,name=async_load,json=asyncLoad,proto3" json:"async_load,omitempty"`
	IsPeerIdFromPlayer bool     `protobuf:"varint,7,opt,name=is_peer_id_from_player,json=isPeerIdFromPlayer,proto3" json:"is_peer_id_from_player,omitempty"`
	TargetEntityIdList []uint32 `protobuf:"varint,8,rep,packed,name=target_entity_id_list,json=targetEntityIdList,proto3" json:"target_entity_id_list,omitempty"`
}

func (x *ClientGadgetInfo) Reset() {
	*x = ClientGadgetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientGadgetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientGadgetInfo) ProtoMessage() {}

func (x *ClientGadgetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientGadgetInfo.ProtoReflect.Descriptor instead.
func (*ClientGadgetInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{67}
}

func (x *ClientGadgetInfo) GetCampId() uint32 {
	if x != nil {
		return x.CampId
	}
	return 0
}

func (x *ClientGadgetInfo) GetCampType() uint32 {
	if x != nil {
		return x.CampType
	}
	return 0
}

func (x *ClientGadgetInfo) GetGuid() uint64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *ClientGadgetInfo) GetOwnerEntityId() uint32 {
	if x != nil {
		return x.OwnerEntityId
	}
	return 0
}

func (x *ClientGadgetInfo) GetTargetEntityId() uint32 {
	if x != nil {
		return x.TargetEntityId
	}
	return 0
}

func (x *ClientGadgetInfo) GetAsyncLoad() bool {
	if x != nil {
		return x.AsyncLoad
	}
	return false
}

func (x *ClientGadgetInfo) GetIsPeerIdFromPlayer() bool {
	if x != nil {
		return x.IsPeerIdFromPlayer
	}
	return false
}

func (x *ClientGadgetInfo) GetTargetEntityIdList() []uint32 {
	if x != nil {
		return x.TargetEntityIdList
	}
	return nil
}

type AbilityGadgetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CampId         uint32 `protobuf:"varint,1,opt,name=camp_id,json=campId,proto3" json:"camp_id,omitempty"`
	CampTargetType uint32 `protobuf:"varint,2,opt,name=camp_target_type,json=campTargetType,proto3" json:"camp_target_type,omitempty"`
	TargetEntityId uint32 `protobuf:"varint,3,opt,name=target_entity_id,json=targetEntityId,proto3" json:"target_entity_id,omitempty"`
}

func (x *AbilityGadgetInfo) Reset() {
	*x = AbilityGadgetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbilityGadgetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbilityGadgetInfo) ProtoMessage() {}

func (x *AbilityGadgetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbilityGadgetInfo.ProtoReflect.Descriptor instead.
func (*AbilityGadgetInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{68}
}

func (x *AbilityGadgetInfo) GetCampId() uint32 {
	if x != nil {
		return x.CampId
	}
	return 0
}

func (x *AbilityGadgetInfo) GetCampTargetType() uint32 {
	if x != nil {
		return x.CampTargetType
	}
	return 0
}

func (x *AbilityGadgetInfo) GetTargetEntityId() uint32 {
	if x != nil {
		return x.TargetEntityId
	}
	return 0
}

type GatherGadgetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId        uint32 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	IsForbidGuest bool   `protobuf:"varint,2,opt,name=is_forbid_guest,json=isForbidGuest,proto3" json:"is_forbid_guest,omitempty"`
}

func (x *GatherGadgetInfo) Reset() {
	*x = GatherGadgetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatherGadgetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatherGadgetInfo) ProtoMessage() {}

func (x *GatherGadgetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatherGadgetInfo.ProtoReflect.Descriptor instead.
func (*GatherGadgetInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{69}
}

func (x *GatherGadgetInfo) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *GatherGadgetInfo) GetIsForbidGuest() bool {
	if x != nil {
		return x.IsForbidGuest
	}
	return false
}

type StatueGadgetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenedStatueUidList []uint32 `protobuf:"varint,1,rep,packed,name=opened_statue_uid_list,json=openedStatueUidList,proto3" json:"opened_statue_uid_list,omitempty"`
}

func (x *StatueGadgetInfo) Reset() {
	*x = StatueGadgetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatueGadgetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatueGadgetInfo) ProtoMessage() {}

func (x *StatueGadgetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatueGadgetInfo.ProtoReflect.Descriptor instead.
func (*StatueGadgetInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{70}
}

func (x *StatueGadgetInfo) GetOpenedStatueUidList() []uint32 {
	if x != nil {
		return x.OpenedStatueUidList
	}
	return nil
}

type WeeklyBossResinDiscountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiscountNum       uint32 `protobuf:"varint,1,opt,name=discount_num,json=discountNum,proto3" json:"discount_num,omitempty"`
	DiscountNumLimit  uint32 `protobuf:"varint,2,opt,name=discount_num_limit,json=discountNumLimit,proto3" json:"discount_num_limit,omitempty"`
	ResinCost         uint32 `protobuf:"varint,3,opt,name=resin_cost,json=resinCost,proto3" json:"resin_cost,omitempty"`
	OriginalResinCost uint32 `protobuf:"varint,4,opt,name=original_resin_cost,json=originalResinCost,proto3" json:"original_resin_cost,omitempty"`
}

func (x *WeeklyBossResinDiscountInfo) Reset() {
	*x = WeeklyBossResinDiscountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeeklyBossResinDiscountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeeklyBossResinDiscountInfo) ProtoMessage() {}

func (x *WeeklyBossResinDiscountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeeklyBossResinDiscountInfo.ProtoReflect.Descriptor instead.
func (*WeeklyBossResinDiscountInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{71}
}

func (x *WeeklyBossResinDiscountInfo) GetDiscountNum() uint32 {
	if x != nil {
		return x.DiscountNum
	}
	return 0
}

func (x *WeeklyBossResinDiscountInfo) GetDiscountNumLimit() uint32 {
	if x != nil {
		return x.DiscountNumLimit
	}
	return 0
}

func (x *WeeklyBossResinDiscountInfo) GetResinCost() uint32 {
	if x != nil {
		return x.ResinCost
	}
	return 0
}

func (x *WeeklyBossResinDiscountInfo) GetOriginalResinCost() uint32 {
	if x != nil {
		return x.OriginalResinCost
	}
	return 0
}

type BossChestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterConfigId uint32                                  `protobuf:"varint,1,opt,name=monster_config_id,json=monsterConfigId,proto3" json:"monster_config_id,omitempty"`
	Resin           uint32                                  `protobuf:"varint,2,opt,name=resin,proto3" json:"resin,omitempty"`
	RemainUidList   []uint32                                `protobuf:"varint,3,rep,packed,name=remain_uid_list,json=remainUidList,proto3" json:"remain_uid_list,omitempty"`
	QualifyUidList  []uint32                                `protobuf:"varint,4,rep,packed,name=qualify_uid_list,json=qualifyUidList,proto3" json:"qualify_uid_list,omitempty"`
	UidDiscountMap  map[uint32]*WeeklyBossResinDiscountInfo `protobuf:"bytes,5,rep,name=uid_discount_map,json=uidDiscountMap,proto3" json:"uid_discount_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BossChestInfo) Reset() {
	*x = BossChestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BossChestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BossChestInfo) ProtoMessage() {}

func (x *BossChestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BossChestInfo.ProtoReflect.Descriptor instead.
func (*BossChestInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{72}
}

func (x *BossChestInfo) GetMonsterConfigId() uint32 {
	if x != nil {
		return x.MonsterConfigId
	}
	return 0
}

func (x *BossChestInfo) GetResin() uint32 {
	if x != nil {
		return x.Resin
	}
	return 0
}

func (x *BossChestInfo) GetRemainUidList() []uint32 {
	if x != nil {
		return x.RemainUidList
	}
	return nil
}

func (x *BossChestInfo) GetQualifyUidList() []uint32 {
	if x != nil {
		return x.QualifyUidList
	}
	return nil
}

func (x *BossChestInfo) GetUidDiscountMap() map[uint32]*WeeklyBossResinDiscountInfo {
	if x != nil {
		return x.UidDiscountMap
	}
	return nil
}

type BlossomChestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resin              uint32   `protobuf:"varint,1,opt,name=resin,proto3" json:"resin,omitempty"`
	QualifyUidList     []uint32 `protobuf:"varint,2,rep,packed,name=qualify_uid_list,json=qualifyUidList,proto3" json:"qualify_uid_list,omitempty"`
	RemainUidList      []uint32 `protobuf:"varint,3,rep,packed,name=remain_uid_list,json=remainUidList,proto3" json:"remain_uid_list,omitempty"`
	DeadTime           uint32   `protobuf:"varint,4,opt,name=dead_time,json=deadTime,proto3" json:"dead_time,omitempty"`
	BlossomRefreshType uint32   `protobuf:"varint,5,opt,name=blossom_refresh_type,json=blossomRefreshType,proto3" json:"blossom_refresh_type,omitempty"`
	RefreshId          uint32   `protobuf:"varint,6,opt,name=refresh_id,json=refreshId,proto3" json:"refresh_id,omitempty"`
}

func (x *BlossomChestInfo) Reset() {
	*x = BlossomChestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlossomChestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlossomChestInfo) ProtoMessage() {}

func (x *BlossomChestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlossomChestInfo.ProtoReflect.Descriptor instead.
func (*BlossomChestInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{73}
}

func (x *BlossomChestInfo) GetResin() uint32 {
	if x != nil {
		return x.Resin
	}
	return 0
}

func (x *BlossomChestInfo) GetQualifyUidList() []uint32 {
	if x != nil {
		return x.QualifyUidList
	}
	return nil
}

func (x *BlossomChestInfo) GetRemainUidList() []uint32 {
	if x != nil {
		return x.RemainUidList
	}
	return nil
}

func (x *BlossomChestInfo) GetDeadTime() uint32 {
	if x != nil {
		return x.DeadTime
	}
	return 0
}

func (x *BlossomChestInfo) GetBlossomRefreshType() uint32 {
	if x != nil {
		return x.BlossomRefreshType
	}
	return 0
}

func (x *BlossomChestInfo) GetRefreshId() uint32 {
	if x != nil {
		return x.RefreshId
	}
	return 0
}

type GadgetCrucibleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MpPlayId       uint32 `protobuf:"varint,1,opt,name=mp_play_id,json=mpPlayId,proto3" json:"mp_play_id,omitempty"`
	PrepareEndTime uint32 `protobuf:"varint,2,opt,name=prepare_end_time,json=prepareEndTime,proto3" json:"prepare_end_time,omitempty"`
}

func (x *GadgetCrucibleInfo) Reset() {
	*x = GadgetCrucibleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GadgetCrucibleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GadgetCrucibleInfo) ProtoMessage() {}

func (x *GadgetCrucibleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GadgetCrucibleInfo.ProtoReflect.Descriptor instead.
func (*GadgetCrucibleInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{74}
}

func (x *GadgetCrucibleInfo) GetMpPlayId() uint32 {
	if x != nil {
		return x.MpPlayId
	}
	return 0
}

func (x *GadgetCrucibleInfo) GetPrepareEndTime() uint32 {
	if x != nil {
		return x.PrepareEndTime
	}
	return 0
}

type GadgetPlayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayType          uint32   `protobuf:"varint,1,opt,name=play_type,json=playType,proto3" json:"play_type,omitempty"`
	Duration          uint32   `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	ProgressStageList []uint32 `protobuf:"varint,3,rep,packed,name=progress_stage_list,json=progressStageList,proto3" json:"progress_stage_list,omitempty"`
	StartCd           uint32   `protobuf:"varint,4,opt,name=start_cd,json=startCd,proto3" json:"start_cd,omitempty"`
	StartTime         uint32   `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Progress          uint32   `protobuf:"varint,6,opt,name=progress,proto3" json:"progress,omitempty"`
	// Types that are assignable to PlayInfo:
	//
	//	*GadgetPlayInfo_CrucibleInfo
	PlayInfo isGadgetPlayInfo_PlayInfo `protobuf_oneof:"play_info"`
}

func (x *GadgetPlayInfo) Reset() {
	*x = GadgetPlayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GadgetPlayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GadgetPlayInfo) ProtoMessage() {}

func (x *GadgetPlayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GadgetPlayInfo.ProtoReflect.Descriptor instead.
func (*GadgetPlayInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{75}
}

func (x *GadgetPlayInfo) GetPlayType() uint32 {
	if x != nil {
		return x.PlayType
	}
	return 0
}

func (x *GadgetPlayInfo) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *GadgetPlayInfo) GetProgressStageList() []uint32 {
	if x != nil {
		return x.ProgressStageList
	}
	return nil
}

func (x *GadgetPlayInfo) GetStartCd() uint32 {
	if x != nil {
		return x.StartCd
	}
	return 0
}

func (x *GadgetPlayInfo) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GadgetPlayInfo) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (m *GadgetPlayInfo) GetPlayInfo() isGadgetPlayInfo_PlayInfo {
	if m != nil {
		return m.PlayInfo
	}
	return nil
}

func (x *GadgetPlayInfo) GetCrucibleInfo() *GadgetCrucibleInfo {
	if x, ok := x.GetPlayInfo().(*GadgetPlayInfo_CrucibleInfo); ok {
		return x.CrucibleInfo
	}
	return nil
}

type isGadgetPlayInfo_PlayInfo interface {
	isGadgetPlayInfo_PlayInfo()
}

type GadgetPlayInfo_CrucibleInfo struct {
	CrucibleInfo *GadgetCrucibleInfo `protobuf:"bytes,21,opt,name=crucible_info,json=crucibleInfo,proto3,oneof"`
}

func (*GadgetPlayInfo_CrucibleInfo) isGadgetPlayInfo_PlayInfo() {}

type MpPlayRewardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resin          uint32   `protobuf:"varint,1,opt,name=resin,proto3" json:"resin,omitempty"`
	RemainUidList  []uint32 `protobuf:"varint,2,rep,packed,name=remain_uid_list,json=remainUidList,proto3" json:"remain_uid_list,omitempty"`
	QualifyUidList []uint32 `protobuf:"varint,3,rep,packed,name=qualify_uid_list,json=qualifyUidList,proto3" json:"qualify_uid_list,omitempty"`
}

func (x *MpPlayRewardInfo) Reset() {
	*x = MpPlayRewardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MpPlayRewardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MpPlayRewardInfo) ProtoMessage() {}

func (x *MpPlayRewardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MpPlayRewardInfo.ProtoReflect.Descriptor instead.
func (*MpPlayRewardInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{76}
}

func (x *MpPlayRewardInfo) GetResin() uint32 {
	if x != nil {
		return x.Resin
	}
	return 0
}

func (x *MpPlayRewardInfo) GetRemainUidList() []uint32 {
	if x != nil {
		return x.RemainUidList
	}
	return nil
}

func (x *MpPlayRewardInfo) GetQualifyUidList() []uint32 {
	if x != nil {
		return x.QualifyUidList
	}
	return nil
}

type GadgetGeneralRewardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resin          uint32     `protobuf:"varint,1,opt,name=resin,proto3" json:"resin,omitempty"`
	DeadTime       uint32     `protobuf:"varint,2,opt,name=dead_time,json=deadTime,proto3" json:"dead_time,omitempty"`
	RemainUidList  []uint32   `protobuf:"varint,3,rep,packed,name=remain_uid_list,json=remainUidList,proto3" json:"remain_uid_list,omitempty"`
	QualifyUidList []uint32   `protobuf:"varint,4,rep,packed,name=qualify_uid_list,json=qualifyUidList,proto3" json:"qualify_uid_list,omitempty"`
	ItemParam      *ItemParam `protobuf:"bytes,5,opt,name=item_param,json=itemParam,proto3" json:"item_param,omitempty"`
}

func (x *GadgetGeneralRewardInfo) Reset() {
	*x = GadgetGeneralRewardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GadgetGeneralRewardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GadgetGeneralRewardInfo) ProtoMessage() {}

func (x *GadgetGeneralRewardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GadgetGeneralRewardInfo.ProtoReflect.Descriptor instead.
func (*GadgetGeneralRewardInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{77}
}

func (x *GadgetGeneralRewardInfo) GetResin() uint32 {
	if x != nil {
		return x.Resin
	}
	return 0
}

func (x *GadgetGeneralRewardInfo) GetDeadTime() uint32 {
	if x != nil {
		return x.DeadTime
	}
	return 0
}

func (x *GadgetGeneralRewardInfo) GetRemainUidList() []uint32 {
	if x != nil {
		return x.RemainUidList
	}
	return nil
}

func (x *GadgetGeneralRewardInfo) GetQualifyUidList() []uint32 {
	if x != nil {
		return x.QualifyUidList
	}
	return nil
}

func (x *GadgetGeneralRewardInfo) GetItemParam() *ItemParam {
	if x != nil {
		return x.ItemParam
	}
	return nil
}

type OfferingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfferingId uint32 `protobuf:"varint,1,opt,name=offering_id,json=offeringId,proto3" json:"offering_id,omitempty"`
}

func (x *OfferingInfo) Reset() {
	*x = OfferingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferingInfo) ProtoMessage() {}

func (x *OfferingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferingInfo.ProtoReflect.Descriptor instead.
func (*OfferingInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{78}
}

func (x *OfferingInfo) GetOfferingId() uint32 {
	if x != nil {
		return x.OfferingId
	}
	return 0
}

type BuildingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildingId    uint32 `protobuf:"varint,1,opt,name=building_id,json=buildingId,proto3" json:"building_id,omitempty"`
	PointConfigId uint32 `protobuf:"varint,2,opt,name=point_config_id,json=pointConfigId,proto3" json:"point_config_id,omitempty"`
	Cost          uint32 `protobuf:"varint,3,opt,name=cost,proto3" json:"cost,omitempty"`
	Refund        uint32 `protobuf:"varint,5,opt,name=refund,proto3" json:"refund,omitempty"`
	OwnerUid      uint32 `protobuf:"varint,6,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
	CurrentNum    uint32 `protobuf:"varint,7,opt,name=current_num,json=currentNum,proto3" json:"current_num,omitempty"`
	MaxNum        uint32 `protobuf:"varint,8,opt,name=max_num,json=maxNum,proto3" json:"max_num,omitempty"`
}

func (x *BuildingInfo) Reset() {
	*x = BuildingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingInfo) ProtoMessage() {}

func (x *BuildingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingInfo.ProtoReflect.Descriptor instead.
func (*BuildingInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{79}
}

func (x *BuildingInfo) GetBuildingId() uint32 {
	if x != nil {
		return x.BuildingId
	}
	return 0
}

func (x *BuildingInfo) GetPointConfigId() uint32 {
	if x != nil {
		return x.PointConfigId
	}
	return 0
}

func (x *BuildingInfo) GetCost() uint32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *BuildingInfo) GetRefund() uint32 {
	if x != nil {
		return x.Refund
	}
	return 0
}

func (x *BuildingInfo) GetOwnerUid() uint32 {
	if x != nil {
		return x.OwnerUid
	}
	return 0
}

func (x *BuildingInfo) GetCurrentNum() uint32 {
	if x != nil {
		return x.CurrentNum
	}
	return 0
}

func (x *BuildingInfo) GetMaxNum() uint32 {
	if x != nil {
		return x.MaxNum
	}
	return 0
}

type FoundationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            FoundationStatus `protobuf:"varint,1,opt,name=status,proto3,enum=proto.FoundationStatus" json:"status,omitempty"`
	UidList           []uint32         `protobuf:"varint,2,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"`
	CurrentBuildingId uint32           `protobuf:"varint,3,opt,name=current_building_id,json=currentBuildingId,proto3" json:"current_building_id,omitempty"`
	LockedByUid       uint32           `protobuf:"varint,4,opt,name=locked_by_uid,json=lockedByUid,proto3" json:"locked_by_uid,omitempty"`
}

func (x *FoundationInfo) Reset() {
	*x = FoundationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoundationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoundationInfo) ProtoMessage() {}

func (x *FoundationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoundationInfo.ProtoReflect.Descriptor instead.
func (*FoundationInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{80}
}

func (x *FoundationInfo) GetStatus() FoundationStatus {
	if x != nil {
		return x.Status
	}
	return FoundationStatus_FOUNDATION_STATUS_NONE
}

func (x *FoundationInfo) GetUidList() []uint32 {
	if x != nil {
		return x.UidList
	}
	return nil
}

func (x *FoundationInfo) GetCurrentBuildingId() uint32 {
	if x != nil {
		return x.CurrentBuildingId
	}
	return 0
}

func (x *FoundationInfo) GetLockedByUid() uint32 {
	if x != nil {
		return x.LockedByUid
	}
	return 0
}

type VehicleMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AvatarGuid uint64 `protobuf:"varint,2,opt,name=avatar_guid,json=avatarGuid,proto3" json:"avatar_guid,omitempty"`
	Pos        uint32 `protobuf:"varint,3,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *VehicleMember) Reset() {
	*x = VehicleMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleMember) ProtoMessage() {}

func (x *VehicleMember) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleMember.ProtoReflect.Descriptor instead.
func (*VehicleMember) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{81}
}

func (x *VehicleMember) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *VehicleMember) GetAvatarGuid() uint64 {
	if x != nil {
		return x.AvatarGuid
	}
	return 0
}

func (x *VehicleMember) GetPos() uint32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

type VehicleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberList []*VehicleMember `protobuf:"bytes,1,rep,name=member_list,json=memberList,proto3" json:"member_list,omitempty"`
	OwnerUid   uint32           `protobuf:"varint,2,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
	CurStamina float32          `protobuf:"fixed32,3,opt,name=cur_stamina,json=curStamina,proto3" json:"cur_stamina,omitempty"`
}

func (x *VehicleInfo) Reset() {
	*x = VehicleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleInfo) ProtoMessage() {}

func (x *VehicleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleInfo.ProtoReflect.Descriptor instead.
func (*VehicleInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{82}
}

func (x *VehicleInfo) GetMemberList() []*VehicleMember {
	if x != nil {
		return x.MemberList
	}
	return nil
}

func (x *VehicleInfo) GetOwnerUid() uint32 {
	if x != nil {
		return x.OwnerUid
	}
	return 0
}

func (x *VehicleInfo) GetCurStamina() float32 {
	if x != nil {
		return x.CurStamina
	}
	return 0
}

type EchoShellInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShellId uint32 `protobuf:"varint,1,opt,name=shell_id,json=shellId,proto3" json:"shell_id,omitempty"`
}

func (x *EchoShellInfo) Reset() {
	*x = EchoShellInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoShellInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoShellInfo) ProtoMessage() {}

func (x *EchoShellInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoShellInfo.ProtoReflect.Descriptor instead.
func (*EchoShellInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{83}
}

func (x *EchoShellInfo) GetShellId() uint32 {
	if x != nil {
		return x.ShellId
	}
	return 0
}

type ScreenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveId            uint32 `protobuf:"varint,1,opt,name=live_id,json=liveId,proto3" json:"live_id,omitempty"`
	ProjectorEntityId uint32 `protobuf:"varint,2,opt,name=projector_entity_id,json=projectorEntityId,proto3" json:"projector_entity_id,omitempty"`
}

func (x *ScreenInfo) Reset() {
	*x = ScreenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenInfo) ProtoMessage() {}

func (x *ScreenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenInfo.ProtoReflect.Descriptor instead.
func (*ScreenInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{84}
}

func (x *ScreenInfo) GetLiveId() uint32 {
	if x != nil {
		return x.LiveId
	}
	return 0
}

func (x *ScreenInfo) GetProjectorEntityId() uint32 {
	if x != nil {
		return x.ProjectorEntityId
	}
	return 0
}

type FishPoolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId       uint32   `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	FishAreaList []uint32 `protobuf:"varint,2,rep,packed,name=fish_area_list,json=fishAreaList,proto3" json:"fish_area_list,omitempty"`
	TodayFishNum uint32   `protobuf:"varint,3,opt,name=today_fish_num,json=todayFishNum,proto3" json:"today_fish_num,omitempty"`
}

func (x *FishPoolInfo) Reset() {
	*x = FishPoolInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishPoolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishPoolInfo) ProtoMessage() {}

func (x *FishPoolInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishPoolInfo.ProtoReflect.Descriptor instead.
func (*FishPoolInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{85}
}

func (x *FishPoolInfo) GetPoolId() uint32 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *FishPoolInfo) GetFishAreaList() []uint32 {
	if x != nil {
		return x.FishAreaList
	}
	return nil
}

func (x *FishPoolInfo) GetTodayFishNum() uint32 {
	if x != nil {
		return x.TodayFishNum
	}
	return 0
}

type CustomCommonNodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentIndex    int32  `protobuf:"varint,1,opt,name=parent_index,json=parentIndex,proto3" json:"parent_index,omitempty"`
	ConfigId       uint32 `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	SlotIdentifier string `protobuf:"bytes,3,opt,name=slot_identifier,json=slotIdentifier,proto3" json:"slot_identifier,omitempty"`
}

func (x *CustomCommonNodeInfo) Reset() {
	*x = CustomCommonNodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomCommonNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomCommonNodeInfo) ProtoMessage() {}

func (x *CustomCommonNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomCommonNodeInfo.ProtoReflect.Descriptor instead.
func (*CustomCommonNodeInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{86}
}

func (x *CustomCommonNodeInfo) GetParentIndex() int32 {
	if x != nil {
		return x.ParentIndex
	}
	return 0
}

func (x *CustomCommonNodeInfo) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *CustomCommonNodeInfo) GetSlotIdentifier() string {
	if x != nil {
		return x.SlotIdentifier
	}
	return ""
}

type CustomGadgetTreeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeList []*CustomCommonNodeInfo `protobuf:"bytes,1,rep,name=node_list,json=nodeList,proto3" json:"node_list,omitempty"`
}

func (x *CustomGadgetTreeInfo) Reset() {
	*x = CustomGadgetTreeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomGadgetTreeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomGadgetTreeInfo) ProtoMessage() {}

func (x *CustomGadgetTreeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomGadgetTreeInfo.ProtoReflect.Descriptor instead.
func (*CustomGadgetTreeInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{87}
}

func (x *CustomGadgetTreeInfo) GetNodeList() []*CustomCommonNodeInfo {
	if x != nil {
		return x.NodeList
	}
	return nil
}

type RoguelikeGadgetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellConfigId uint32 `protobuf:"varint,1,opt,name=cell_config_id,json=cellConfigId,proto3" json:"cell_config_id,omitempty"`
	CellType     uint32 `protobuf:"varint,2,opt,name=cell_type,json=cellType,proto3" json:"cell_type,omitempty"`
	CellState    uint32 `protobuf:"varint,3,opt,name=cell_state,json=cellState,proto3" json:"cell_state,omitempty"`
	CellId       uint32 `protobuf:"varint,4,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
}

func (x *RoguelikeGadgetInfo) Reset() {
	*x = RoguelikeGadgetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeGadgetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeGadgetInfo) ProtoMessage() {}

func (x *RoguelikeGadgetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeGadgetInfo.ProtoReflect.Descriptor instead.
func (*RoguelikeGadgetInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{88}
}

func (x *RoguelikeGadgetInfo) GetCellConfigId() uint32 {
	if x != nil {
		return x.CellConfigId
	}
	return 0
}

func (x *RoguelikeGadgetInfo) GetCellType() uint32 {
	if x != nil {
		return x.CellType
	}
	return 0
}

func (x *RoguelikeGadgetInfo) GetCellState() uint32 {
	if x != nil {
		return x.CellState
	}
	return 0
}

func (x *RoguelikeGadgetInfo) GetCellId() uint32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

type NightCrowGadgetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArgumentList []uint32 `protobuf:"varint,1,rep,packed,name=argument_list,json=argumentList,proto3" json:"argument_list,omitempty"`
}

func (x *NightCrowGadgetInfo) Reset() {
	*x = NightCrowGadgetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NightCrowGadgetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NightCrowGadgetInfo) ProtoMessage() {}

func (x *NightCrowGadgetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NightCrowGadgetInfo.ProtoReflect.Descriptor instead.
func (*NightCrowGadgetInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{89}
}

func (x *NightCrowGadgetInfo) GetArgumentList() []uint32 {
	if x != nil {
		return x.ArgumentList
	}
	return nil
}

type DeshretObeliskGadgetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArgumentList []uint32 `protobuf:"varint,1,rep,packed,name=argument_list,json=argumentList,proto3" json:"argument_list,omitempty"`
}

func (x *DeshretObeliskGadgetInfo) Reset() {
	*x = DeshretObeliskGadgetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeshretObeliskGadgetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeshretObeliskGadgetInfo) ProtoMessage() {}

func (x *DeshretObeliskGadgetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeshretObeliskGadgetInfo.ProtoReflect.Descriptor instead.
func (*DeshretObeliskGadgetInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{90}
}

func (x *DeshretObeliskGadgetInfo) GetArgumentList() []uint32 {
	if x != nil {
		return x.ArgumentList
	}
	return nil
}

type CoinCollectOperatorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId uint32 `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *CoinCollectOperatorInfo) Reset() {
	*x = CoinCollectOperatorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinCollectOperatorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinCollectOperatorInfo) ProtoMessage() {}

func (x *CoinCollectOperatorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinCollectOperatorInfo.ProtoReflect.Descriptor instead.
func (*CoinCollectOperatorInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{91}
}

func (x *CoinCollectOperatorInfo) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type SceneGadgetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GadgetId          uint32          `protobuf:"varint,1,opt,name=gadget_id,json=gadgetId,proto3" json:"gadget_id,omitempty"`
	GroupId           uint32          `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ConfigId          uint32          `protobuf:"varint,3,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	OwnerEntityId     uint32          `protobuf:"varint,4,opt,name=owner_entity_id,json=ownerEntityId,proto3" json:"owner_entity_id,omitempty"`
	BornType          GadgetBornType  `protobuf:"varint,5,opt,name=born_type,json=bornType,proto3,enum=proto.GadgetBornType" json:"born_type,omitempty"`
	GadgetState       uint32          `protobuf:"varint,6,opt,name=gadget_state,json=gadgetState,proto3" json:"gadget_state,omitempty"`
	GadgetType        uint32          `protobuf:"varint,7,opt,name=gadget_type,json=gadgetType,proto3" json:"gadget_type,omitempty"`
	IsShowCutscene    bool            `protobuf:"varint,8,opt,name=is_show_cutscene,json=isShowCutscene,proto3" json:"is_show_cutscene,omitempty"`
	AuthorityPeerId   uint32          `protobuf:"varint,9,opt,name=authority_peer_id,json=authorityPeerId,proto3" json:"authority_peer_id,omitempty"`
	IsEnableInteract  bool            `protobuf:"varint,10,opt,name=is_enable_interact,json=isEnableInteract,proto3" json:"is_enable_interact,omitempty"`
	InteractId        uint32          `protobuf:"varint,11,opt,name=interact_id,json=interactId,proto3" json:"interact_id,omitempty"`
	MarkFlag          uint32          `protobuf:"varint,21,opt,name=mark_flag,json=markFlag,proto3" json:"mark_flag,omitempty"`
	PropOwnerEntityId uint32          `protobuf:"varint,22,opt,name=prop_owner_entity_id,json=propOwnerEntityId,proto3" json:"prop_owner_entity_id,omitempty"`
	Platform          *PlatformInfo   `protobuf:"bytes,23,opt,name=platform,proto3" json:"platform,omitempty"`
	InteractUidList   []uint32        `protobuf:"varint,24,rep,packed,name=interact_uid_list,json=interactUidList,proto3" json:"interact_uid_list,omitempty"`
	DraftId           uint32          `protobuf:"varint,25,opt,name=draft_id,json=draftId,proto3" json:"draft_id,omitempty"`
	GadgetTalkState   uint32          `protobuf:"varint,26,opt,name=gadget_talk_state,json=gadgetTalkState,proto3" json:"gadget_talk_state,omitempty"`
	PlayInfo          *GadgetPlayInfo `protobuf:"bytes,100,opt,name=play_info,json=playInfo,proto3" json:"play_info,omitempty"`
	// Types that are assignable to Content:
	//
	//	*SceneGadgetInfo_TrifleItem
	//	*SceneGadgetInfo_GatherGadget
	//	*SceneGadgetInfo_Worktop
	//	*SceneGadgetInfo_ClientGadget
	//	*SceneGadgetInfo_Weather
	//	*SceneGadgetInfo_AbilityGadget
	//	*SceneGadgetInfo_StatueGadget
	//	*SceneGadgetInfo_BossChest
	//	*SceneGadgetInfo_BlossomChest
	//	*SceneGadgetInfo_MpPlayReward
	//	*SceneGadgetInfo_GeneralReward
	//	*SceneGadgetInfo_OfferingInfo
	//	*SceneGadgetInfo_FoundationInfo
	//	*SceneGadgetInfo_VehicleInfo
	//	*SceneGadgetInfo_ShellInfo
	//	*SceneGadgetInfo_ScreenInfo
	//	*SceneGadgetInfo_FishPoolInfo
	//	*SceneGadgetInfo_CustomGadgetTreeInfo
	//	*SceneGadgetInfo_RoguelikeGadgetInfo
	//	*SceneGadgetInfo_NightCrowGadgetInfo
	//	*SceneGadgetInfo_DeshretObeliskGadgetInfo
	//	*SceneGadgetInfo_CoinCollectOperatorInfo
	Content isSceneGadgetInfo_Content `protobuf_oneof:"content"`
}

func (x *SceneGadgetInfo) Reset() {
	*x = SceneGadgetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGadgetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGadgetInfo) ProtoMessage() {}

func (x *SceneGadgetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGadgetInfo.ProtoReflect.Descriptor instead.
func (*SceneGadgetInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{92}
}

func (x *SceneGadgetInfo) GetGadgetId() uint32 {
	if x != nil {
		return x.GadgetId
	}
	return 0
}

func (x *SceneGadgetInfo) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SceneGadgetInfo) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *SceneGadgetInfo) GetOwnerEntityId() uint32 {
	if x != nil {
		return x.OwnerEntityId
	}
	return 0
}

func (x *SceneGadgetInfo) GetBornType() GadgetBornType {
	if x != nil {
		return x.BornType
	}
	return GadgetBornType_GADGET_BORN_NONE
}

func (x *SceneGadgetInfo) GetGadgetState() uint32 {
	if x != nil {
		return x.GadgetState
	}
	return 0
}

func (x *SceneGadgetInfo) GetGadgetType() uint32 {
	if x != nil {
		return x.GadgetType
	}
	return 0
}

func (x *SceneGadgetInfo) GetIsShowCutscene() bool {
	if x != nil {
		return x.IsShowCutscene
	}
	return false
}

func (x *SceneGadgetInfo) GetAuthorityPeerId() uint32 {
	if x != nil {
		return x.AuthorityPeerId
	}
	return 0
}

func (x *SceneGadgetInfo) GetIsEnableInteract() bool {
	if x != nil {
		return x.IsEnableInteract
	}
	return false
}

func (x *SceneGadgetInfo) GetInteractId() uint32 {
	if x != nil {
		return x.InteractId
	}
	return 0
}

func (x *SceneGadgetInfo) GetMarkFlag() uint32 {
	if x != nil {
		return x.MarkFlag
	}
	return 0
}

func (x *SceneGadgetInfo) GetPropOwnerEntityId() uint32 {
	if x != nil {
		return x.PropOwnerEntityId
	}
	return 0
}

func (x *SceneGadgetInfo) GetPlatform() *PlatformInfo {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *SceneGadgetInfo) GetInteractUidList() []uint32 {
	if x != nil {
		return x.InteractUidList
	}
	return nil
}

func (x *SceneGadgetInfo) GetDraftId() uint32 {
	if x != nil {
		return x.DraftId
	}
	return 0
}

func (x *SceneGadgetInfo) GetGadgetTalkState() uint32 {
	if x != nil {
		return x.GadgetTalkState
	}
	return 0
}

func (x *SceneGadgetInfo) GetPlayInfo() *GadgetPlayInfo {
	if x != nil {
		return x.PlayInfo
	}
	return nil
}

func (m *SceneGadgetInfo) GetContent() isSceneGadgetInfo_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *SceneGadgetInfo) GetTrifleItem() *Item {
	if x, ok := x.GetContent().(*SceneGadgetInfo_TrifleItem); ok {
		return x.TrifleItem
	}
	return nil
}

func (x *SceneGadgetInfo) GetGatherGadget() *GatherGadgetInfo {
	if x, ok := x.GetContent().(*SceneGadgetInfo_GatherGadget); ok {
		return x.GatherGadget
	}
	return nil
}

func (x *SceneGadgetInfo) GetWorktop() *WorktopInfo {
	if x, ok := x.GetContent().(*SceneGadgetInfo_Worktop); ok {
		return x.Worktop
	}
	return nil
}

func (x *SceneGadgetInfo) GetClientGadget() *ClientGadgetInfo {
	if x, ok := x.GetContent().(*SceneGadgetInfo_ClientGadget); ok {
		return x.ClientGadget
	}
	return nil
}

func (x *SceneGadgetInfo) GetWeather() *WeatherInfo {
	if x, ok := x.GetContent().(*SceneGadgetInfo_Weather); ok {
		return x.Weather
	}
	return nil
}

func (x *SceneGadgetInfo) GetAbilityGadget() *AbilityGadgetInfo {
	if x, ok := x.GetContent().(*SceneGadgetInfo_AbilityGadget); ok {
		return x.AbilityGadget
	}
	return nil
}

func (x *SceneGadgetInfo) GetStatueGadget() *StatueGadgetInfo {
	if x, ok := x.GetContent().(*SceneGadgetInfo_StatueGadget); ok {
		return x.StatueGadget
	}
	return nil
}

func (x *SceneGadgetInfo) GetBossChest() *BossChestInfo {
	if x, ok := x.GetContent().(*SceneGadgetInfo_BossChest); ok {
		return x.BossChest
	}
	return nil
}

func (x *SceneGadgetInfo) GetBlossomChest() *BlossomChestInfo {
	if x, ok := x.GetContent().(*SceneGadgetInfo_BlossomChest); ok {
		return x.BlossomChest
	}
	return nil
}

func (x *SceneGadgetInfo) GetMpPlayReward() *MpPlayRewardInfo {
	if x, ok := x.GetContent().(*SceneGadgetInfo_MpPlayReward); ok {
		return x.MpPlayReward
	}
	return nil
}

func (x *SceneGadgetInfo) GetGeneralReward() *GadgetGeneralRewardInfo {
	if x, ok := x.GetContent().(*SceneGadgetInfo_GeneralReward); ok {
		return x.GeneralReward
	}
	return nil
}

func (x *SceneGadgetInfo) GetOfferingInfo() *OfferingInfo {
	if x, ok := x.GetContent().(*SceneGadgetInfo_OfferingInfo); ok {
		return x.OfferingInfo
	}
	return nil
}

func (x *SceneGadgetInfo) GetFoundationInfo() *FoundationInfo {
	if x, ok := x.GetContent().(*SceneGadgetInfo_FoundationInfo); ok {
		return x.FoundationInfo
	}
	return nil
}

func (x *SceneGadgetInfo) GetVehicleInfo() *VehicleInfo {
	if x, ok := x.GetContent().(*SceneGadgetInfo_VehicleInfo); ok {
		return x.VehicleInfo
	}
	return nil
}

func (x *SceneGadgetInfo) GetShellInfo() *EchoShellInfo {
	if x, ok := x.GetContent().(*SceneGadgetInfo_ShellInfo); ok {
		return x.ShellInfo
	}
	return nil
}

func (x *SceneGadgetInfo) GetScreenInfo() *ScreenInfo {
	if x, ok := x.GetContent().(*SceneGadgetInfo_ScreenInfo); ok {
		return x.ScreenInfo
	}
	return nil
}

func (x *SceneGadgetInfo) GetFishPoolInfo() *FishPoolInfo {
	if x, ok := x.GetContent().(*SceneGadgetInfo_FishPoolInfo); ok {
		return x.FishPoolInfo
	}
	return nil
}

func (x *SceneGadgetInfo) GetCustomGadgetTreeInfo() *CustomGadgetTreeInfo {
	if x, ok := x.GetContent().(*SceneGadgetInfo_CustomGadgetTreeInfo); ok {
		return x.CustomGadgetTreeInfo
	}
	return nil
}

func (x *SceneGadgetInfo) GetRoguelikeGadgetInfo() *RoguelikeGadgetInfo {
	if x, ok := x.GetContent().(*SceneGadgetInfo_RoguelikeGadgetInfo); ok {
		return x.RoguelikeGadgetInfo
	}
	return nil
}

func (x *SceneGadgetInfo) GetNightCrowGadgetInfo() *NightCrowGadgetInfo {
	if x, ok := x.GetContent().(*SceneGadgetInfo_NightCrowGadgetInfo); ok {
		return x.NightCrowGadgetInfo
	}
	return nil
}

func (x *SceneGadgetInfo) GetDeshretObeliskGadgetInfo() *DeshretObeliskGadgetInfo {
	if x, ok := x.GetContent().(*SceneGadgetInfo_DeshretObeliskGadgetInfo); ok {
		return x.DeshretObeliskGadgetInfo
	}
	return nil
}

func (x *SceneGadgetInfo) GetCoinCollectOperatorInfo() *CoinCollectOperatorInfo {
	if x, ok := x.GetContent().(*SceneGadgetInfo_CoinCollectOperatorInfo); ok {
		return x.CoinCollectOperatorInfo
	}
	return nil
}

type isSceneGadgetInfo_Content interface {
	isSceneGadgetInfo_Content()
}

type SceneGadgetInfo_TrifleItem struct {
	TrifleItem *Item `protobuf:"bytes,12,opt,name=trifle_item,json=trifleItem,proto3,oneof"`
}

type SceneGadgetInfo_GatherGadget struct {
	GatherGadget *GatherGadgetInfo `protobuf:"bytes,13,opt,name=gather_gadget,json=gatherGadget,proto3,oneof"`
}

type SceneGadgetInfo_Worktop struct {
	Worktop *WorktopInfo `protobuf:"bytes,14,opt,name=worktop,proto3,oneof"`
}

type SceneGadgetInfo_ClientGadget struct {
	ClientGadget *ClientGadgetInfo `protobuf:"bytes,15,opt,name=client_gadget,json=clientGadget,proto3,oneof"`
}

type SceneGadgetInfo_Weather struct {
	Weather *WeatherInfo `protobuf:"bytes,17,opt,name=weather,proto3,oneof"`
}

type SceneGadgetInfo_AbilityGadget struct {
	AbilityGadget *AbilityGadgetInfo `protobuf:"bytes,18,opt,name=ability_gadget,json=abilityGadget,proto3,oneof"`
}

type SceneGadgetInfo_StatueGadget struct {
	StatueGadget *StatueGadgetInfo `protobuf:"bytes,19,opt,name=statue_gadget,json=statueGadget,proto3,oneof"`
}

type SceneGadgetInfo_BossChest struct {
	BossChest *BossChestInfo `protobuf:"bytes,20,opt,name=boss_chest,json=bossChest,proto3,oneof"`
}

type SceneGadgetInfo_BlossomChest struct {
	BlossomChest *BlossomChestInfo `protobuf:"bytes,41,opt,name=blossom_chest,json=blossomChest,proto3,oneof"`
}

type SceneGadgetInfo_MpPlayReward struct {
	MpPlayReward *MpPlayRewardInfo `protobuf:"bytes,42,opt,name=mp_play_reward,json=mpPlayReward,proto3,oneof"`
}

type SceneGadgetInfo_GeneralReward struct {
	GeneralReward *GadgetGeneralRewardInfo `protobuf:"bytes,43,opt,name=general_reward,json=generalReward,proto3,oneof"`
}

type SceneGadgetInfo_OfferingInfo struct {
	OfferingInfo *OfferingInfo `protobuf:"bytes,44,opt,name=offering_info,json=offeringInfo,proto3,oneof"`
}

type SceneGadgetInfo_FoundationInfo struct {
	FoundationInfo *FoundationInfo `protobuf:"bytes,45,opt,name=foundation_info,json=foundationInfo,proto3,oneof"`
}

type SceneGadgetInfo_VehicleInfo struct {
	VehicleInfo *VehicleInfo `protobuf:"bytes,46,opt,name=vehicle_info,json=vehicleInfo,proto3,oneof"`
}

type SceneGadgetInfo_ShellInfo struct {
	ShellInfo *EchoShellInfo `protobuf:"bytes,47,opt,name=shell_info,json=shellInfo,proto3,oneof"`
}

type SceneGadgetInfo_ScreenInfo struct {
	ScreenInfo *ScreenInfo `protobuf:"bytes,48,opt,name=screen_info,json=screenInfo,proto3,oneof"`
}

type SceneGadgetInfo_FishPoolInfo struct {
	FishPoolInfo *FishPoolInfo `protobuf:"bytes,59,opt,name=fish_pool_info,json=fishPoolInfo,proto3,oneof"`
}

type SceneGadgetInfo_CustomGadgetTreeInfo struct {
	CustomGadgetTreeInfo *CustomGadgetTreeInfo `protobuf:"bytes,60,opt,name=custom_gadget_tree_info,json=customGadgetTreeInfo,proto3,oneof"`
}

type SceneGadgetInfo_RoguelikeGadgetInfo struct {
	RoguelikeGadgetInfo *RoguelikeGadgetInfo `protobuf:"bytes,61,opt,name=roguelike_gadget_info,json=roguelikeGadgetInfo,proto3,oneof"`
}

type SceneGadgetInfo_NightCrowGadgetInfo struct {
	NightCrowGadgetInfo *NightCrowGadgetInfo `protobuf:"bytes,62,opt,name=night_crow_gadget_info,json=nightCrowGadgetInfo,proto3,oneof"`
}

type SceneGadgetInfo_DeshretObeliskGadgetInfo struct {
	DeshretObeliskGadgetInfo *DeshretObeliskGadgetInfo `protobuf:"bytes,63,opt,name=deshret_obelisk_gadget_info,json=deshretObeliskGadgetInfo,proto3,oneof"`
}

type SceneGadgetInfo_CoinCollectOperatorInfo struct {
	CoinCollectOperatorInfo *CoinCollectOperatorInfo `protobuf:"bytes,64,opt,name=coin_collect_operator_info,json=coinCollectOperatorInfo,proto3,oneof"`
}

func (*SceneGadgetInfo_TrifleItem) isSceneGadgetInfo_Content() {}

func (*SceneGadgetInfo_GatherGadget) isSceneGadgetInfo_Content() {}

func (*SceneGadgetInfo_Worktop) isSceneGadgetInfo_Content() {}

func (*SceneGadgetInfo_ClientGadget) isSceneGadgetInfo_Content() {}

func (*SceneGadgetInfo_Weather) isSceneGadgetInfo_Content() {}

func (*SceneGadgetInfo_AbilityGadget) isSceneGadgetInfo_Content() {}

func (*SceneGadgetInfo_StatueGadget) isSceneGadgetInfo_Content() {}

func (*SceneGadgetInfo_BossChest) isSceneGadgetInfo_Content() {}

func (*SceneGadgetInfo_BlossomChest) isSceneGadgetInfo_Content() {}

func (*SceneGadgetInfo_MpPlayReward) isSceneGadgetInfo_Content() {}

func (*SceneGadgetInfo_GeneralReward) isSceneGadgetInfo_Content() {}

func (*SceneGadgetInfo_OfferingInfo) isSceneGadgetInfo_Content() {}

func (*SceneGadgetInfo_FoundationInfo) isSceneGadgetInfo_Content() {}

func (*SceneGadgetInfo_VehicleInfo) isSceneGadgetInfo_Content() {}

func (*SceneGadgetInfo_ShellInfo) isSceneGadgetInfo_Content() {}

func (*SceneGadgetInfo_ScreenInfo) isSceneGadgetInfo_Content() {}

func (*SceneGadgetInfo_FishPoolInfo) isSceneGadgetInfo_Content() {}

func (*SceneGadgetInfo_CustomGadgetTreeInfo) isSceneGadgetInfo_Content() {}

func (*SceneGadgetInfo_RoguelikeGadgetInfo) isSceneGadgetInfo_Content() {}

func (*SceneGadgetInfo_NightCrowGadgetInfo) isSceneGadgetInfo_Content() {}

func (*SceneGadgetInfo_DeshretObeliskGadgetInfo) isSceneGadgetInfo_Content() {}

func (*SceneGadgetInfo_CoinCollectOperatorInfo) isSceneGadgetInfo_Content() {}

type AnimatorParameterValueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParaType uint32 `protobuf:"varint,1,opt,name=para_type,json=paraType,proto3" json:"para_type,omitempty"`
	// Types that are assignable to ParaVal:
	//
	//	*AnimatorParameterValueInfo_IntVal
	//	*AnimatorParameterValueInfo_FloatVal
	//	*AnimatorParameterValueInfo_BoolVal
	ParaVal isAnimatorParameterValueInfo_ParaVal `protobuf_oneof:"paraVal"`
}

func (x *AnimatorParameterValueInfo) Reset() {
	*x = AnimatorParameterValueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnimatorParameterValueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnimatorParameterValueInfo) ProtoMessage() {}

func (x *AnimatorParameterValueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnimatorParameterValueInfo.ProtoReflect.Descriptor instead.
func (*AnimatorParameterValueInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{93}
}

func (x *AnimatorParameterValueInfo) GetParaType() uint32 {
	if x != nil {
		return x.ParaType
	}
	return 0
}

func (m *AnimatorParameterValueInfo) GetParaVal() isAnimatorParameterValueInfo_ParaVal {
	if m != nil {
		return m.ParaVal
	}
	return nil
}

func (x *AnimatorParameterValueInfo) GetIntVal() int32 {
	if x, ok := x.GetParaVal().(*AnimatorParameterValueInfo_IntVal); ok {
		return x.IntVal
	}
	return 0
}

func (x *AnimatorParameterValueInfo) GetFloatVal() float32 {
	if x, ok := x.GetParaVal().(*AnimatorParameterValueInfo_FloatVal); ok {
		return x.FloatVal
	}
	return 0
}

func (x *AnimatorParameterValueInfo) GetBoolVal() bool {
	if x, ok := x.GetParaVal().(*AnimatorParameterValueInfo_BoolVal); ok {
		return x.BoolVal
	}
	return false
}

type isAnimatorParameterValueInfo_ParaVal interface {
	isAnimatorParameterValueInfo_ParaVal()
}

type AnimatorParameterValueInfo_IntVal struct {
	IntVal int32 `protobuf:"varint,2,opt,name=int_val,json=intVal,proto3,oneof"`
}

type AnimatorParameterValueInfo_FloatVal struct {
	FloatVal float32 `protobuf:"fixed32,3,opt,name=float_val,json=floatVal,proto3,oneof"`
}

type AnimatorParameterValueInfo_BoolVal struct {
	BoolVal bool `protobuf:"varint,4,opt,name=bool_val,json=boolVal,proto3,oneof"`
}

func (*AnimatorParameterValueInfo_IntVal) isAnimatorParameterValueInfo_ParaVal() {}

func (*AnimatorParameterValueInfo_FloatVal) isAnimatorParameterValueInfo_ParaVal() {}

func (*AnimatorParameterValueInfo_BoolVal) isAnimatorParameterValueInfo_ParaVal() {}

type ServantInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterEntityId uint32 `protobuf:"varint,1,opt,name=master_entity_id,json=masterEntityId,proto3" json:"master_entity_id,omitempty"`
	BornSlotIndex  uint32 `protobuf:"varint,2,opt,name=born_slot_index,json=bornSlotIndex,proto3" json:"born_slot_index,omitempty"`
}

func (x *ServantInfo) Reset() {
	*x = ServantInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServantInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServantInfo) ProtoMessage() {}

func (x *ServantInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServantInfo.ProtoReflect.Descriptor instead.
func (*ServantInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{94}
}

func (x *ServantInfo) GetMasterEntityId() uint32 {
	if x != nil {
		return x.MasterEntityId
	}
	return 0
}

func (x *ServantInfo) GetBornSlotIndex() uint32 {
	if x != nil {
		return x.BornSlotIndex
	}
	return 0
}

type SceneEntityAiInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAiOpen        bool              `protobuf:"varint,1,opt,name=is_ai_open,json=isAiOpen,proto3" json:"is_ai_open,omitempty"`
	BornPos         *Vector           `protobuf:"bytes,2,opt,name=born_pos,json=bornPos,proto3" json:"born_pos,omitempty"`
	SkillCdMap      map[uint32]uint32 `protobuf:"bytes,3,rep,name=skill_cd_map,json=skillCdMap,proto3" json:"skill_cd_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ServantInfo     *ServantInfo      `protobuf:"bytes,4,opt,name=servant_info,json=servantInfo,proto3" json:"servant_info,omitempty"`
	AiThreatMap     map[uint32]uint32 `protobuf:"bytes,5,rep,name=ai_threat_map,json=aiThreatMap,proto3" json:"ai_threat_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SkillGroupCdMap map[uint32]uint32 `protobuf:"bytes,6,rep,name=skill_group_cd_map,json=skillGroupCdMap,proto3" json:"skill_group_cd_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CurTactic       uint32            `protobuf:"varint,7,opt,name=cur_tactic,json=curTactic,proto3" json:"cur_tactic,omitempty"`
}

func (x *SceneEntityAiInfo) Reset() {
	*x = SceneEntityAiInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneEntityAiInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneEntityAiInfo) ProtoMessage() {}

func (x *SceneEntityAiInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneEntityAiInfo.ProtoReflect.Descriptor instead.
func (*SceneEntityAiInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{95}
}

func (x *SceneEntityAiInfo) GetIsAiOpen() bool {
	if x != nil {
		return x.IsAiOpen
	}
	return false
}

func (x *SceneEntityAiInfo) GetBornPos() *Vector {
	if x != nil {
		return x.BornPos
	}
	return nil
}

func (x *SceneEntityAiInfo) GetSkillCdMap() map[uint32]uint32 {
	if x != nil {
		return x.SkillCdMap
	}
	return nil
}

func (x *SceneEntityAiInfo) GetServantInfo() *ServantInfo {
	if x != nil {
		return x.ServantInfo
	}
	return nil
}

func (x *SceneEntityAiInfo) GetAiThreatMap() map[uint32]uint32 {
	if x != nil {
		return x.AiThreatMap
	}
	return nil
}

func (x *SceneEntityAiInfo) GetSkillGroupCdMap() map[uint32]uint32 {
	if x != nil {
		return x.SkillGroupCdMap
	}
	return nil
}

func (x *SceneEntityAiInfo) GetCurTactic() uint32 {
	if x != nil {
		return x.CurTactic
	}
	return 0
}

type EntityRendererChangedInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangedRenderers map[string]uint32 `protobuf:"bytes,1,rep,name=changed_renderers,json=changedRenderers,proto3" json:"changed_renderers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	VisibilityCount  uint32            `protobuf:"varint,2,opt,name=visibility_count,json=visibilityCount,proto3" json:"visibility_count,omitempty"`
	IsCached         bool              `protobuf:"varint,3,opt,name=is_cached,json=isCached,proto3" json:"is_cached,omitempty"`
}

func (x *EntityRendererChangedInfo) Reset() {
	*x = EntityRendererChangedInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityRendererChangedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityRendererChangedInfo) ProtoMessage() {}

func (x *EntityRendererChangedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityRendererChangedInfo.ProtoReflect.Descriptor instead.
func (*EntityRendererChangedInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{96}
}

func (x *EntityRendererChangedInfo) GetChangedRenderers() map[string]uint32 {
	if x != nil {
		return x.ChangedRenderers
	}
	return nil
}

func (x *EntityRendererChangedInfo) GetVisibilityCount() uint32 {
	if x != nil {
		return x.VisibilityCount
	}
	return 0
}

func (x *EntityRendererChangedInfo) GetIsCached() bool {
	if x != nil {
		return x.IsCached
	}
	return false
}

type PropPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      uint32     `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	PropValue *PropValue `protobuf:"bytes,2,opt,name=prop_value,json=propValue,proto3" json:"prop_value,omitempty"`
}

func (x *PropPair) Reset() {
	*x = PropPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropPair) ProtoMessage() {}

func (x *PropPair) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropPair.ProtoReflect.Descriptor instead.
func (*PropPair) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{97}
}

func (x *PropPair) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PropPair) GetPropValue() *PropValue {
	if x != nil {
		return x.PropValue
	}
	return nil
}

type FightPropPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropType  uint32  `protobuf:"varint,1,opt,name=prop_type,json=propType,proto3" json:"prop_type,omitempty"`
	PropValue float32 `protobuf:"fixed32,2,opt,name=prop_value,json=propValue,proto3" json:"prop_value,omitempty"`
}

func (x *FightPropPair) Reset() {
	*x = FightPropPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightPropPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightPropPair) ProtoMessage() {}

func (x *FightPropPair) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightPropPair.ProtoReflect.Descriptor instead.
func (*FightPropPair) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{98}
}

func (x *FightPropPair) GetPropType() uint32 {
	if x != nil {
		return x.PropType
	}
	return 0
}

func (x *FightPropPair) GetPropValue() float32 {
	if x != nil {
		return x.PropValue
	}
	return 0
}

type AnimatorParameterValueInfoPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameId       int32                       `protobuf:"varint,1,opt,name=name_id,json=nameId,proto3" json:"name_id,omitempty"`
	AnimatorPara *AnimatorParameterValueInfo `protobuf:"bytes,2,opt,name=animator_para,json=animatorPara,proto3" json:"animator_para,omitempty"`
}

func (x *AnimatorParameterValueInfoPair) Reset() {
	*x = AnimatorParameterValueInfoPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnimatorParameterValueInfoPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnimatorParameterValueInfoPair) ProtoMessage() {}

func (x *AnimatorParameterValueInfoPair) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnimatorParameterValueInfoPair.ProtoReflect.Descriptor instead.
func (*AnimatorParameterValueInfoPair) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{99}
}

func (x *AnimatorParameterValueInfoPair) GetNameId() int32 {
	if x != nil {
		return x.NameId
	}
	return 0
}

func (x *AnimatorParameterValueInfoPair) GetAnimatorPara() *AnimatorParameterValueInfo {
	if x != nil {
		return x.AnimatorPara
	}
	return nil
}

type EntityEnvironmentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonClimateType uint32 `protobuf:"varint,1,opt,name=json_climate_type,json=jsonClimateType,proto3" json:"json_climate_type,omitempty"`
	ClimateAreaId   uint32 `protobuf:"varint,2,opt,name=climate_area_id,json=climateAreaId,proto3" json:"climate_area_id,omitempty"`
}

func (x *EntityEnvironmentInfo) Reset() {
	*x = EntityEnvironmentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityEnvironmentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityEnvironmentInfo) ProtoMessage() {}

func (x *EntityEnvironmentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityEnvironmentInfo.ProtoReflect.Descriptor instead.
func (*EntityEnvironmentInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{100}
}

func (x *EntityEnvironmentInfo) GetJsonClimateType() uint32 {
	if x != nil {
		return x.JsonClimateType
	}
	return 0
}

func (x *EntityEnvironmentInfo) GetClimateAreaId() uint32 {
	if x != nil {
		return x.ClimateAreaId
	}
	return 0
}

type EntityClientExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillAnchorPosition *Vector `protobuf:"bytes,1,opt,name=skill_anchor_position,json=skillAnchorPosition,proto3" json:"skill_anchor_position,omitempty"`
}

func (x *EntityClientExtraInfo) Reset() {
	*x = EntityClientExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityClientExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityClientExtraInfo) ProtoMessage() {}

func (x *EntityClientExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityClientExtraInfo.ProtoReflect.Descriptor instead.
func (*EntityClientExtraInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{101}
}

func (x *EntityClientExtraInfo) GetSkillAnchorPosition() *Vector {
	if x != nil {
		return x.SkillAnchorPosition
	}
	return nil
}

type EntityAuthorityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbilityInfo         *AbilitySyncStateInfo             `protobuf:"bytes,1,opt,name=ability_info,json=abilityInfo,proto3" json:"ability_info,omitempty"`
	RendererChangedInfo *EntityRendererChangedInfo        `protobuf:"bytes,2,opt,name=renderer_changed_info,json=rendererChangedInfo,proto3" json:"renderer_changed_info,omitempty"`
	AiInfo              *SceneEntityAiInfo                `protobuf:"bytes,3,opt,name=ai_info,json=aiInfo,proto3" json:"ai_info,omitempty"`
	BornPos             *Vector                           `protobuf:"bytes,4,opt,name=born_pos,json=bornPos,proto3" json:"born_pos,omitempty"`
	PoseParaList        []*AnimatorParameterValueInfoPair `protobuf:"bytes,5,rep,name=pose_para_list,json=poseParaList,proto3" json:"pose_para_list,omitempty"`
	ClientExtraInfo     *EntityClientExtraInfo            `protobuf:"bytes,6,opt,name=client_extra_info,json=clientExtraInfo,proto3" json:"client_extra_info,omitempty"`
}

func (x *EntityAuthorityInfo) Reset() {
	*x = EntityAuthorityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityAuthorityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityAuthorityInfo) ProtoMessage() {}

func (x *EntityAuthorityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityAuthorityInfo.ProtoReflect.Descriptor instead.
func (*EntityAuthorityInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{102}
}

func (x *EntityAuthorityInfo) GetAbilityInfo() *AbilitySyncStateInfo {
	if x != nil {
		return x.AbilityInfo
	}
	return nil
}

func (x *EntityAuthorityInfo) GetRendererChangedInfo() *EntityRendererChangedInfo {
	if x != nil {
		return x.RendererChangedInfo
	}
	return nil
}

func (x *EntityAuthorityInfo) GetAiInfo() *SceneEntityAiInfo {
	if x != nil {
		return x.AiInfo
	}
	return nil
}

func (x *EntityAuthorityInfo) GetBornPos() *Vector {
	if x != nil {
		return x.BornPos
	}
	return nil
}

func (x *EntityAuthorityInfo) GetPoseParaList() []*AnimatorParameterValueInfoPair {
	if x != nil {
		return x.PoseParaList
	}
	return nil
}

func (x *EntityAuthorityInfo) GetClientExtraInfo() *EntityClientExtraInfo {
	if x != nil {
		return x.ClientExtraInfo
	}
	return nil
}

type SceneEntityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityType                ProtEntityType                    `protobuf:"varint,1,opt,name=entity_type,json=entityType,proto3,enum=proto.ProtEntityType" json:"entity_type,omitempty"`
	EntityId                  uint32                            `protobuf:"varint,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Name                      string                            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	MotionInfo                *MotionInfo                       `protobuf:"bytes,4,opt,name=motion_info,json=motionInfo,proto3" json:"motion_info,omitempty"`
	PropList                  []*PropPair                       `protobuf:"bytes,5,rep,name=prop_list,json=propList,proto3" json:"prop_list,omitempty"`
	FightPropList             []*FightPropPair                  `protobuf:"bytes,6,rep,name=fight_prop_list,json=fightPropList,proto3" json:"fight_prop_list,omitempty"`
	LifeState                 uint32                            `protobuf:"varint,7,opt,name=life_state,json=lifeState,proto3" json:"life_state,omitempty"`
	AnimatorParaList          []*AnimatorParameterValueInfoPair `protobuf:"bytes,9,rep,name=animator_para_list,json=animatorParaList,proto3" json:"animator_para_list,omitempty"`
	LastMoveSceneTimeMs       uint32                            `protobuf:"varint,17,opt,name=last_move_scene_time_ms,json=lastMoveSceneTimeMs,proto3" json:"last_move_scene_time_ms,omitempty"`
	LastMoveReliableSeq       uint32                            `protobuf:"varint,18,opt,name=last_move_reliable_seq,json=lastMoveReliableSeq,proto3" json:"last_move_reliable_seq,omitempty"`
	EntityClientData          *EntityClientData                 `protobuf:"bytes,19,opt,name=entity_client_data,json=entityClientData,proto3" json:"entity_client_data,omitempty"`
	EntityEnvironmentInfoList []*EntityEnvironmentInfo          `protobuf:"bytes,20,rep,name=entity_environment_info_list,json=entityEnvironmentInfoList,proto3" json:"entity_environment_info_list,omitempty"`
	EntityAuthorityInfo       *EntityAuthorityInfo              `protobuf:"bytes,21,opt,name=entity_authority_info,json=entityAuthorityInfo,proto3" json:"entity_authority_info,omitempty"`
	TagList                   []string                          `protobuf:"bytes,22,rep,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty"`
	ServerBuffList            []*ServerBuff                     `protobuf:"bytes,23,rep,name=server_buff_list,json=serverBuffList,proto3" json:"server_buff_list,omitempty"`
	// Types that are assignable to Entity:
	//
	//	*SceneEntityInfo_Avatar
	//	*SceneEntityInfo_Monster
	//	*SceneEntityInfo_Npc
	//	*SceneEntityInfo_Gadget
	Entity isSceneEntityInfo_Entity `protobuf_oneof:"entity"`
}

func (x *SceneEntityInfo) Reset() {
	*x = SceneEntityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneEntityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneEntityInfo) ProtoMessage() {}

func (x *SceneEntityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneEntityInfo.ProtoReflect.Descriptor instead.
func (*SceneEntityInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{103}
}

func (x *SceneEntityInfo) GetEntityType() ProtEntityType {
	if x != nil {
		return x.EntityType
	}
	return ProtEntityType_PROT_ENTITY_NONE
}

func (x *SceneEntityInfo) GetEntityId() uint32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *SceneEntityInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SceneEntityInfo) GetMotionInfo() *MotionInfo {
	if x != nil {
		return x.MotionInfo
	}
	return nil
}

func (x *SceneEntityInfo) GetPropList() []*PropPair {
	if x != nil {
		return x.PropList
	}
	return nil
}

func (x *SceneEntityInfo) GetFightPropList() []*FightPropPair {
	if x != nil {
		return x.FightPropList
	}
	return nil
}

func (x *SceneEntityInfo) GetLifeState() uint32 {
	if x != nil {
		return x.LifeState
	}
	return 0
}

func (x *SceneEntityInfo) GetAnimatorParaList() []*AnimatorParameterValueInfoPair {
	if x != nil {
		return x.AnimatorParaList
	}
	return nil
}

func (x *SceneEntityInfo) GetLastMoveSceneTimeMs() uint32 {
	if x != nil {
		return x.LastMoveSceneTimeMs
	}
	return 0
}

func (x *SceneEntityInfo) GetLastMoveReliableSeq() uint32 {
	if x != nil {
		return x.LastMoveReliableSeq
	}
	return 0
}

func (x *SceneEntityInfo) GetEntityClientData() *EntityClientData {
	if x != nil {
		return x.EntityClientData
	}
	return nil
}

func (x *SceneEntityInfo) GetEntityEnvironmentInfoList() []*EntityEnvironmentInfo {
	if x != nil {
		return x.EntityEnvironmentInfoList
	}
	return nil
}

func (x *SceneEntityInfo) GetEntityAuthorityInfo() *EntityAuthorityInfo {
	if x != nil {
		return x.EntityAuthorityInfo
	}
	return nil
}

func (x *SceneEntityInfo) GetTagList() []string {
	if x != nil {
		return x.TagList
	}
	return nil
}

func (x *SceneEntityInfo) GetServerBuffList() []*ServerBuff {
	if x != nil {
		return x.ServerBuffList
	}
	return nil
}

func (m *SceneEntityInfo) GetEntity() isSceneEntityInfo_Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (x *SceneEntityInfo) GetAvatar() *SceneAvatarInfo {
	if x, ok := x.GetEntity().(*SceneEntityInfo_Avatar); ok {
		return x.Avatar
	}
	return nil
}

func (x *SceneEntityInfo) GetMonster() *SceneMonsterInfo {
	if x, ok := x.GetEntity().(*SceneEntityInfo_Monster); ok {
		return x.Monster
	}
	return nil
}

func (x *SceneEntityInfo) GetNpc() *SceneNpcInfo {
	if x, ok := x.GetEntity().(*SceneEntityInfo_Npc); ok {
		return x.Npc
	}
	return nil
}

func (x *SceneEntityInfo) GetGadget() *SceneGadgetInfo {
	if x, ok := x.GetEntity().(*SceneEntityInfo_Gadget); ok {
		return x.Gadget
	}
	return nil
}

type isSceneEntityInfo_Entity interface {
	isSceneEntityInfo_Entity()
}

type SceneEntityInfo_Avatar struct {
	Avatar *SceneAvatarInfo `protobuf:"bytes,10,opt,name=avatar,proto3,oneof"`
}

type SceneEntityInfo_Monster struct {
	Monster *SceneMonsterInfo `protobuf:"bytes,11,opt,name=monster,proto3,oneof"`
}

type SceneEntityInfo_Npc struct {
	Npc *SceneNpcInfo `protobuf:"bytes,12,opt,name=npc,proto3,oneof"`
}

type SceneEntityInfo_Gadget struct {
	Gadget *SceneGadgetInfo `protobuf:"bytes,13,opt,name=gadget,proto3,oneof"`
}

func (*SceneEntityInfo_Avatar) isSceneEntityInfo_Entity() {}

func (*SceneEntityInfo_Monster) isSceneEntityInfo_Entity() {}

func (*SceneEntityInfo_Npc) isSceneEntityInfo_Entity() {}

func (*SceneEntityInfo_Gadget) isSceneEntityInfo_Entity() {}

type CreateGadgetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BornType GadgetBornType          `protobuf:"varint,1,opt,name=born_type,json=bornType,proto3,enum=proto.GadgetBornType" json:"born_type,omitempty"`
	Chest    *CreateGadgetInfo_Chest `protobuf:"bytes,2,opt,name=chest,proto3" json:"chest,omitempty"`
}

func (x *CreateGadgetInfo) Reset() {
	*x = CreateGadgetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGadgetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGadgetInfo) ProtoMessage() {}

func (x *CreateGadgetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGadgetInfo.ProtoReflect.Descriptor instead.
func (*CreateGadgetInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{104}
}

func (x *CreateGadgetInfo) GetBornType() GadgetBornType {
	if x != nil {
		return x.BornType
	}
	return GadgetBornType_GADGET_BORN_NONE
}

func (x *CreateGadgetInfo) GetChest() *CreateGadgetInfo_Chest {
	if x != nil {
		return x.Chest
	}
	return nil
}

type CreateEntityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level          uint32  `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	Pos            *Vector `protobuf:"bytes,6,opt,name=pos,proto3" json:"pos,omitempty"`
	Rot            *Vector `protobuf:"bytes,7,opt,name=rot,proto3" json:"rot,omitempty"`
	SceneId        uint32  `protobuf:"varint,10,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	RoomId         uint32  `protobuf:"varint,11,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	ClientUniqueId uint32  `protobuf:"varint,12,opt,name=client_unique_id,json=clientUniqueId,proto3" json:"client_unique_id,omitempty"`
	// Types that are assignable to Entity:
	//
	//	*CreateEntityInfo_MonsterId
	//	*CreateEntityInfo_NpcId
	//	*CreateEntityInfo_GadgetId
	//	*CreateEntityInfo_ItemId
	Entity isCreateEntityInfo_Entity `protobuf_oneof:"entity"`
	// Types that are assignable to EntityCreateInfo:
	//
	//	*CreateEntityInfo_Gadget
	EntityCreateInfo isCreateEntityInfo_EntityCreateInfo `protobuf_oneof:"entity_create_info"`
}

func (x *CreateEntityInfo) Reset() {
	*x = CreateEntityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEntityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEntityInfo) ProtoMessage() {}

func (x *CreateEntityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEntityInfo.ProtoReflect.Descriptor instead.
func (*CreateEntityInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{105}
}

func (x *CreateEntityInfo) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CreateEntityInfo) GetPos() *Vector {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *CreateEntityInfo) GetRot() *Vector {
	if x != nil {
		return x.Rot
	}
	return nil
}

func (x *CreateEntityInfo) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *CreateEntityInfo) GetRoomId() uint32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *CreateEntityInfo) GetClientUniqueId() uint32 {
	if x != nil {
		return x.ClientUniqueId
	}
	return 0
}

func (m *CreateEntityInfo) GetEntity() isCreateEntityInfo_Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (x *CreateEntityInfo) GetMonsterId() uint32 {
	if x, ok := x.GetEntity().(*CreateEntityInfo_MonsterId); ok {
		return x.MonsterId
	}
	return 0
}

func (x *CreateEntityInfo) GetNpcId() uint32 {
	if x, ok := x.GetEntity().(*CreateEntityInfo_NpcId); ok {
		return x.NpcId
	}
	return 0
}

func (x *CreateEntityInfo) GetGadgetId() uint32 {
	if x, ok := x.GetEntity().(*CreateEntityInfo_GadgetId); ok {
		return x.GadgetId
	}
	return 0
}

func (x *CreateEntityInfo) GetItemId() uint32 {
	if x, ok := x.GetEntity().(*CreateEntityInfo_ItemId); ok {
		return x.ItemId
	}
	return 0
}

func (m *CreateEntityInfo) GetEntityCreateInfo() isCreateEntityInfo_EntityCreateInfo {
	if m != nil {
		return m.EntityCreateInfo
	}
	return nil
}

func (x *CreateEntityInfo) GetGadget() *CreateGadgetInfo {
	if x, ok := x.GetEntityCreateInfo().(*CreateEntityInfo_Gadget); ok {
		return x.Gadget
	}
	return nil
}

type isCreateEntityInfo_Entity interface {
	isCreateEntityInfo_Entity()
}

type CreateEntityInfo_MonsterId struct {
	MonsterId uint32 `protobuf:"varint,1,opt,name=monster_id,json=monsterId,proto3,oneof"`
}

type CreateEntityInfo_NpcId struct {
	NpcId uint32 `protobuf:"varint,2,opt,name=npc_id,json=npcId,proto3,oneof"`
}

type CreateEntityInfo_GadgetId struct {
	GadgetId uint32 `protobuf:"varint,3,opt,name=gadget_id,json=gadgetId,proto3,oneof"`
}

type CreateEntityInfo_ItemId struct {
	ItemId uint32 `protobuf:"varint,4,opt,name=item_id,json=itemId,proto3,oneof"`
}

func (*CreateEntityInfo_MonsterId) isCreateEntityInfo_Entity() {}

func (*CreateEntityInfo_NpcId) isCreateEntityInfo_Entity() {}

func (*CreateEntityInfo_GadgetId) isCreateEntityInfo_Entity() {}

func (*CreateEntityInfo_ItemId) isCreateEntityInfo_Entity() {}

type isCreateEntityInfo_EntityCreateInfo interface {
	isCreateEntityInfo_EntityCreateInfo()
}

type CreateEntityInfo_Gadget struct {
	Gadget *CreateGadgetInfo `protobuf:"bytes,13,opt,name=gadget,proto3,oneof"`
}

func (*CreateEntityInfo_Gadget) isCreateEntityInfo_EntityCreateInfo() {}

type TrialAvatarGrantRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantReason       uint32 `protobuf:"varint,1,opt,name=grant_reason,json=grantReason,proto3" json:"grant_reason,omitempty"`
	FromParentQuestId uint32 `protobuf:"varint,2,opt,name=from_parent_quest_id,json=fromParentQuestId,proto3" json:"from_parent_quest_id,omitempty"`
}

func (x *TrialAvatarGrantRecord) Reset() {
	*x = TrialAvatarGrantRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialAvatarGrantRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialAvatarGrantRecord) ProtoMessage() {}

func (x *TrialAvatarGrantRecord) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialAvatarGrantRecord.ProtoReflect.Descriptor instead.
func (*TrialAvatarGrantRecord) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{106}
}

func (x *TrialAvatarGrantRecord) GetGrantReason() uint32 {
	if x != nil {
		return x.GrantReason
	}
	return 0
}

func (x *TrialAvatarGrantRecord) GetFromParentQuestId() uint32 {
	if x != nil {
		return x.FromParentQuestId
	}
	return 0
}

type TrialAvatarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrialAvatarId  uint32                  `protobuf:"varint,1,opt,name=trial_avatar_id,json=trialAvatarId,proto3" json:"trial_avatar_id,omitempty"`
	TrialEquipList []*Item                 `protobuf:"bytes,2,rep,name=trial_equip_list,json=trialEquipList,proto3" json:"trial_equip_list,omitempty"`
	GrantRecord    *TrialAvatarGrantRecord `protobuf:"bytes,3,opt,name=grant_record,json=grantRecord,proto3" json:"grant_record,omitempty"`
}

func (x *TrialAvatarInfo) Reset() {
	*x = TrialAvatarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialAvatarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialAvatarInfo) ProtoMessage() {}

func (x *TrialAvatarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialAvatarInfo.ProtoReflect.Descriptor instead.
func (*TrialAvatarInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{107}
}

func (x *TrialAvatarInfo) GetTrialAvatarId() uint32 {
	if x != nil {
		return x.TrialAvatarId
	}
	return 0
}

func (x *TrialAvatarInfo) GetTrialEquipList() []*Item {
	if x != nil {
		return x.TrialEquipList
	}
	return nil
}

func (x *TrialAvatarInfo) GetGrantRecord() *TrialAvatarGrantRecord {
	if x != nil {
		return x.GrantRecord
	}
	return nil
}

type AvatarSkillInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassCdTime     uint32   `protobuf:"varint,1,opt,name=pass_cd_time,json=passCdTime,proto3" json:"pass_cd_time,omitempty"`
	FullCdTimeList []uint32 `protobuf:"varint,2,rep,packed,name=full_cd_time_list,json=fullCdTimeList,proto3" json:"full_cd_time_list,omitempty"`
	MaxChargeCount uint32   `protobuf:"varint,3,opt,name=max_charge_count,json=maxChargeCount,proto3" json:"max_charge_count,omitempty"`
}

func (x *AvatarSkillInfo) Reset() {
	*x = AvatarSkillInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarSkillInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarSkillInfo) ProtoMessage() {}

func (x *AvatarSkillInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarSkillInfo.ProtoReflect.Descriptor instead.
func (*AvatarSkillInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{108}
}

func (x *AvatarSkillInfo) GetPassCdTime() uint32 {
	if x != nil {
		return x.PassCdTime
	}
	return 0
}

func (x *AvatarSkillInfo) GetFullCdTimeList() []uint32 {
	if x != nil {
		return x.FullCdTimeList
	}
	return nil
}

func (x *AvatarSkillInfo) GetMaxChargeCount() uint32 {
	if x != nil {
		return x.MaxChargeCount
	}
	return 0
}

type FetterData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FetterId      uint32   `protobuf:"varint,1,opt,name=fetter_id,json=fetterId,proto3" json:"fetter_id,omitempty"`
	FetterState   uint32   `protobuf:"varint,2,opt,name=fetter_state,json=fetterState,proto3" json:"fetter_state,omitempty"`
	CondIndexList []uint32 `protobuf:"varint,3,rep,packed,name=cond_index_list,json=condIndexList,proto3" json:"cond_index_list,omitempty"`
}

func (x *FetterData) Reset() {
	*x = FetterData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetterData) ProtoMessage() {}

func (x *FetterData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetterData.ProtoReflect.Descriptor instead.
func (*FetterData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{109}
}

func (x *FetterData) GetFetterId() uint32 {
	if x != nil {
		return x.FetterId
	}
	return 0
}

func (x *FetterData) GetFetterState() uint32 {
	if x != nil {
		return x.FetterState
	}
	return 0
}

func (x *FetterData) GetCondIndexList() []uint32 {
	if x != nil {
		return x.CondIndexList
	}
	return nil
}

type AvatarFetterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpNumber               uint32        `protobuf:"varint,1,opt,name=exp_number,json=expNumber,proto3" json:"exp_number,omitempty"`
	ExpLevel                uint32        `protobuf:"varint,2,opt,name=exp_level,json=expLevel,proto3" json:"exp_level,omitempty"`
	OpenIdList              []uint32      `protobuf:"varint,3,rep,packed,name=open_id_list,json=openIdList,proto3" json:"open_id_list,omitempty"`
	FinishIdList            []uint32      `protobuf:"varint,4,rep,packed,name=finish_id_list,json=finishIdList,proto3" json:"finish_id_list,omitempty"`
	RewardedFetterLevelList []uint32      `protobuf:"varint,5,rep,packed,name=rewarded_fetter_level_list,json=rewardedFetterLevelList,proto3" json:"rewarded_fetter_level_list,omitempty"`
	FetterList              []*FetterData `protobuf:"bytes,6,rep,name=fetter_list,json=fetterList,proto3" json:"fetter_list,omitempty"`
}

func (x *AvatarFetterInfo) Reset() {
	*x = AvatarFetterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarFetterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarFetterInfo) ProtoMessage() {}

func (x *AvatarFetterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarFetterInfo.ProtoReflect.Descriptor instead.
func (*AvatarFetterInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{110}
}

func (x *AvatarFetterInfo) GetExpNumber() uint32 {
	if x != nil {
		return x.ExpNumber
	}
	return 0
}

func (x *AvatarFetterInfo) GetExpLevel() uint32 {
	if x != nil {
		return x.ExpLevel
	}
	return 0
}

func (x *AvatarFetterInfo) GetOpenIdList() []uint32 {
	if x != nil {
		return x.OpenIdList
	}
	return nil
}

func (x *AvatarFetterInfo) GetFinishIdList() []uint32 {
	if x != nil {
		return x.FinishIdList
	}
	return nil
}

func (x *AvatarFetterInfo) GetRewardedFetterLevelList() []uint32 {
	if x != nil {
		return x.RewardedFetterLevelList
	}
	return nil
}

func (x *AvatarFetterInfo) GetFetterList() []*FetterData {
	if x != nil {
		return x.FetterList
	}
	return nil
}

type AvatarExpeditionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State        AvatarExpeditionState `protobuf:"varint,1,opt,name=state,proto3,enum=proto.AvatarExpeditionState" json:"state,omitempty"`
	ExpId        uint32                `protobuf:"varint,2,opt,name=exp_id,json=expId,proto3" json:"exp_id,omitempty"`
	HourTime     uint32                `protobuf:"varint,3,opt,name=hour_time,json=hourTime,proto3" json:"hour_time,omitempty"`
	StartTime    uint32                `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	ShortenRatio float32               `protobuf:"fixed32,5,opt,name=shorten_ratio,json=shortenRatio,proto3" json:"shorten_ratio,omitempty"`
}

func (x *AvatarExpeditionInfo) Reset() {
	*x = AvatarExpeditionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarExpeditionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarExpeditionInfo) ProtoMessage() {}

func (x *AvatarExpeditionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarExpeditionInfo.ProtoReflect.Descriptor instead.
func (*AvatarExpeditionInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{111}
}

func (x *AvatarExpeditionInfo) GetState() AvatarExpeditionState {
	if x != nil {
		return x.State
	}
	return AvatarExpeditionState_AVATAR_EXPEDITION_NONE
}

func (x *AvatarExpeditionInfo) GetExpId() uint32 {
	if x != nil {
		return x.ExpId
	}
	return 0
}

func (x *AvatarExpeditionInfo) GetHourTime() uint32 {
	if x != nil {
		return x.HourTime
	}
	return 0
}

func (x *AvatarExpeditionInfo) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AvatarExpeditionInfo) GetShortenRatio() float32 {
	if x != nil {
		return x.ShortenRatio
	}
	return 0
}

type AvatarEquipAffixInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipAffixId uint32 `protobuf:"varint,1,opt,name=equip_affix_id,json=equipAffixId,proto3" json:"equip_affix_id,omitempty"`
	LeftCdTime   uint32 `protobuf:"varint,2,opt,name=left_cd_time,json=leftCdTime,proto3" json:"left_cd_time,omitempty"`
}

func (x *AvatarEquipAffixInfo) Reset() {
	*x = AvatarEquipAffixInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarEquipAffixInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarEquipAffixInfo) ProtoMessage() {}

func (x *AvatarEquipAffixInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarEquipAffixInfo.ProtoReflect.Descriptor instead.
func (*AvatarEquipAffixInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{112}
}

func (x *AvatarEquipAffixInfo) GetEquipAffixId() uint32 {
	if x != nil {
		return x.EquipAffixId
	}
	return 0
}

func (x *AvatarEquipAffixInfo) GetLeftCdTime() uint32 {
	if x != nil {
		return x.LeftCdTime
	}
	return 0
}

type AvatarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId                 uint32                      `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	Guid                     uint64                      `protobuf:"varint,2,opt,name=guid,proto3" json:"guid,omitempty"`
	PropMap                  map[uint32]*PropValue       `protobuf:"bytes,3,rep,name=prop_map,json=propMap,proto3" json:"prop_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LifeState                uint32                      `protobuf:"varint,4,opt,name=life_state,json=lifeState,proto3" json:"life_state,omitempty"`
	EquipGuidList            []uint64                    `protobuf:"varint,5,rep,packed,name=equip_guid_list,json=equipGuidList,proto3" json:"equip_guid_list,omitempty"`
	TalentIdList             []uint32                    `protobuf:"varint,6,rep,packed,name=talent_id_list,json=talentIdList,proto3" json:"talent_id_list,omitempty"`
	FightPropMap             map[uint32]float32          `protobuf:"bytes,7,rep,name=fight_prop_map,json=fightPropMap,proto3" json:"fight_prop_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	TrialAvatarInfo          *TrialAvatarInfo            `protobuf:"bytes,9,opt,name=trial_avatar_info,json=trialAvatarInfo,proto3" json:"trial_avatar_info,omitempty"`
	SkillMap                 map[uint32]*AvatarSkillInfo `protobuf:"bytes,10,rep,name=skill_map,json=skillMap,proto3" json:"skill_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SkillDepotId             uint32                      `protobuf:"varint,11,opt,name=skill_depot_id,json=skillDepotId,proto3" json:"skill_depot_id,omitempty"`
	FetterInfo               *AvatarFetterInfo           `protobuf:"bytes,12,opt,name=fetter_info,json=fetterInfo,proto3" json:"fetter_info,omitempty"`
	CoreProudSkillLevel      uint32                      `protobuf:"varint,13,opt,name=core_proud_skill_level,json=coreProudSkillLevel,proto3" json:"core_proud_skill_level,omitempty"`
	InherentProudSkillList   []uint32                    `protobuf:"varint,14,rep,packed,name=inherent_proud_skill_list,json=inherentProudSkillList,proto3" json:"inherent_proud_skill_list,omitempty"`
	SkillLevelMap            map[uint32]uint32           `protobuf:"bytes,15,rep,name=skill_level_map,json=skillLevelMap,proto3" json:"skill_level_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ExpeditionState          AvatarExpeditionState       `protobuf:"varint,16,opt,name=expedition_state,json=expeditionState,proto3,enum=proto.AvatarExpeditionState" json:"expedition_state,omitempty"`
	ProudSkillExtraLevelMap  map[uint32]uint32           `protobuf:"bytes,17,rep,name=proud_skill_extra_level_map,json=proudSkillExtraLevelMap,proto3" json:"proud_skill_extra_level_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IsFocus                  bool                        `protobuf:"varint,18,opt,name=is_focus,json=isFocus,proto3" json:"is_focus,omitempty"`
	AvatarType               uint32                      `protobuf:"varint,19,opt,name=avatar_type,json=avatarType,proto3" json:"avatar_type,omitempty"`
	TeamResonanceList        []uint32                    `protobuf:"varint,20,rep,packed,name=team_resonance_list,json=teamResonanceList,proto3" json:"team_resonance_list,omitempty"`
	WearingFlycloakId        uint32                      `protobuf:"varint,21,opt,name=wearing_flycloak_id,json=wearingFlycloakId,proto3" json:"wearing_flycloak_id,omitempty"`
	EquipAffixList           []*AvatarEquipAffixInfo     `protobuf:"bytes,22,rep,name=equip_affix_list,json=equipAffixList,proto3" json:"equip_affix_list,omitempty"`
	BornTime                 uint32                      `protobuf:"varint,23,opt,name=born_time,json=bornTime,proto3" json:"born_time,omitempty"`
	PendingPromoteRewardList []uint32                    `protobuf:"varint,24,rep,packed,name=pending_promote_reward_list,json=pendingPromoteRewardList,proto3" json:"pending_promote_reward_list,omitempty"`
	CostumeId                uint32                      `protobuf:"varint,25,opt,name=costume_id,json=costumeId,proto3" json:"costume_id,omitempty"`
	ExcelInfo                *AvatarExcelInfo            `protobuf:"bytes,26,opt,name=excel_info,json=excelInfo,proto3" json:"excel_info,omitempty"`
	AnimHash                 uint32                      `protobuf:"varint,27,opt,name=anim_hash,json=animHash,proto3" json:"anim_hash,omitempty"`
}

func (x *AvatarInfo) Reset() {
	*x = AvatarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarInfo) ProtoMessage() {}

func (x *AvatarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarInfo.ProtoReflect.Descriptor instead.
func (*AvatarInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{113}
}

func (x *AvatarInfo) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *AvatarInfo) GetGuid() uint64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *AvatarInfo) GetPropMap() map[uint32]*PropValue {
	if x != nil {
		return x.PropMap
	}
	return nil
}

func (x *AvatarInfo) GetLifeState() uint32 {
	if x != nil {
		return x.LifeState
	}
	return 0
}

func (x *AvatarInfo) GetEquipGuidList() []uint64 {
	if x != nil {
		return x.EquipGuidList
	}
	return nil
}

func (x *AvatarInfo) GetTalentIdList() []uint32 {
	if x != nil {
		return x.TalentIdList
	}
	return nil
}

func (x *AvatarInfo) GetFightPropMap() map[uint32]float32 {
	if x != nil {
		return x.FightPropMap
	}
	return nil
}

func (x *AvatarInfo) GetTrialAvatarInfo() *TrialAvatarInfo {
	if x != nil {
		return x.TrialAvatarInfo
	}
	return nil
}

func (x *AvatarInfo) GetSkillMap() map[uint32]*AvatarSkillInfo {
	if x != nil {
		return x.SkillMap
	}
	return nil
}

func (x *AvatarInfo) GetSkillDepotId() uint32 {
	if x != nil {
		return x.SkillDepotId
	}
	return 0
}

func (x *AvatarInfo) GetFetterInfo() *AvatarFetterInfo {
	if x != nil {
		return x.FetterInfo
	}
	return nil
}

func (x *AvatarInfo) GetCoreProudSkillLevel() uint32 {
	if x != nil {
		return x.CoreProudSkillLevel
	}
	return 0
}

func (x *AvatarInfo) GetInherentProudSkillList() []uint32 {
	if x != nil {
		return x.InherentProudSkillList
	}
	return nil
}

func (x *AvatarInfo) GetSkillLevelMap() map[uint32]uint32 {
	if x != nil {
		return x.SkillLevelMap
	}
	return nil
}

func (x *AvatarInfo) GetExpeditionState() AvatarExpeditionState {
	if x != nil {
		return x.ExpeditionState
	}
	return AvatarExpeditionState_AVATAR_EXPEDITION_NONE
}

func (x *AvatarInfo) GetProudSkillExtraLevelMap() map[uint32]uint32 {
	if x != nil {
		return x.ProudSkillExtraLevelMap
	}
	return nil
}

func (x *AvatarInfo) GetIsFocus() bool {
	if x != nil {
		return x.IsFocus
	}
	return false
}

func (x *AvatarInfo) GetAvatarType() uint32 {
	if x != nil {
		return x.AvatarType
	}
	return 0
}

func (x *AvatarInfo) GetTeamResonanceList() []uint32 {
	if x != nil {
		return x.TeamResonanceList
	}
	return nil
}

func (x *AvatarInfo) GetWearingFlycloakId() uint32 {
	if x != nil {
		return x.WearingFlycloakId
	}
	return 0
}

func (x *AvatarInfo) GetEquipAffixList() []*AvatarEquipAffixInfo {
	if x != nil {
		return x.EquipAffixList
	}
	return nil
}

func (x *AvatarInfo) GetBornTime() uint32 {
	if x != nil {
		return x.BornTime
	}
	return 0
}

func (x *AvatarInfo) GetPendingPromoteRewardList() []uint32 {
	if x != nil {
		return x.PendingPromoteRewardList
	}
	return nil
}

func (x *AvatarInfo) GetCostumeId() uint32 {
	if x != nil {
		return x.CostumeId
	}
	return 0
}

func (x *AvatarInfo) GetExcelInfo() *AvatarExcelInfo {
	if x != nil {
		return x.ExcelInfo
	}
	return nil
}

func (x *AvatarInfo) GetAnimHash() uint32 {
	if x != nil {
		return x.AnimHash
	}
	return 0
}

type ShowEquip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId uint32 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	// Types that are assignable to Detail:
	//
	//	*ShowEquip_Reliquary
	//	*ShowEquip_Weapon
	Detail isShowEquip_Detail `protobuf_oneof:"detail"`
}

func (x *ShowEquip) Reset() {
	*x = ShowEquip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowEquip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowEquip) ProtoMessage() {}

func (x *ShowEquip) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowEquip.ProtoReflect.Descriptor instead.
func (*ShowEquip) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{114}
}

func (x *ShowEquip) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (m *ShowEquip) GetDetail() isShowEquip_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *ShowEquip) GetReliquary() *Reliquary {
	if x, ok := x.GetDetail().(*ShowEquip_Reliquary); ok {
		return x.Reliquary
	}
	return nil
}

func (x *ShowEquip) GetWeapon() *Weapon {
	if x, ok := x.GetDetail().(*ShowEquip_Weapon); ok {
		return x.Weapon
	}
	return nil
}

type isShowEquip_Detail interface {
	isShowEquip_Detail()
}

type ShowEquip_Reliquary struct {
	Reliquary *Reliquary `protobuf:"bytes,2,opt,name=reliquary,proto3,oneof"`
}

type ShowEquip_Weapon struct {
	Weapon *Weapon `protobuf:"bytes,3,opt,name=weapon,proto3,oneof"`
}

func (*ShowEquip_Reliquary) isShowEquip_Detail() {}

func (*ShowEquip_Weapon) isShowEquip_Detail() {}

type ShowAvatarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId                uint32                `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	PropMap                 map[uint32]*PropValue `protobuf:"bytes,2,rep,name=prop_map,json=propMap,proto3" json:"prop_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TalentIdList            []uint32              `protobuf:"varint,3,rep,packed,name=talent_id_list,json=talentIdList,proto3" json:"talent_id_list,omitempty"`
	FightPropMap            map[uint32]float32    `protobuf:"bytes,4,rep,name=fight_prop_map,json=fightPropMap,proto3" json:"fight_prop_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	SkillDepotId            uint32                `protobuf:"varint,5,opt,name=skill_depot_id,json=skillDepotId,proto3" json:"skill_depot_id,omitempty"`
	CoreProudSkillLevel     uint32                `protobuf:"varint,6,opt,name=core_proud_skill_level,json=coreProudSkillLevel,proto3" json:"core_proud_skill_level,omitempty"`
	InherentProudSkillList  []uint32              `protobuf:"varint,7,rep,packed,name=inherent_proud_skill_list,json=inherentProudSkillList,proto3" json:"inherent_proud_skill_list,omitempty"`
	SkillLevelMap           map[uint32]uint32     `protobuf:"bytes,8,rep,name=skill_level_map,json=skillLevelMap,proto3" json:"skill_level_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ProudSkillExtraLevelMap map[uint32]uint32     `protobuf:"bytes,9,rep,name=proud_skill_extra_level_map,json=proudSkillExtraLevelMap,proto3" json:"proud_skill_extra_level_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	EquipList               []*ShowEquip          `protobuf:"bytes,10,rep,name=equip_list,json=equipList,proto3" json:"equip_list,omitempty"`
	FetterInfo              *AvatarFetterInfo     `protobuf:"bytes,11,opt,name=fetter_info,json=fetterInfo,proto3" json:"fetter_info,omitempty"`
	CostumeId               uint32                `protobuf:"varint,12,opt,name=costume_id,json=costumeId,proto3" json:"costume_id,omitempty"`
	ExcelInfo               *AvatarExcelInfo      `protobuf:"bytes,13,opt,name=excel_info,json=excelInfo,proto3" json:"excel_info,omitempty"`
}

func (x *ShowAvatarInfo) Reset() {
	*x = ShowAvatarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowAvatarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowAvatarInfo) ProtoMessage() {}

func (x *ShowAvatarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowAvatarInfo.ProtoReflect.Descriptor instead.
func (*ShowAvatarInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{115}
}

func (x *ShowAvatarInfo) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *ShowAvatarInfo) GetPropMap() map[uint32]*PropValue {
	if x != nil {
		return x.PropMap
	}
	return nil
}

func (x *ShowAvatarInfo) GetTalentIdList() []uint32 {
	if x != nil {
		return x.TalentIdList
	}
	return nil
}

func (x *ShowAvatarInfo) GetFightPropMap() map[uint32]float32 {
	if x != nil {
		return x.FightPropMap
	}
	return nil
}

func (x *ShowAvatarInfo) GetSkillDepotId() uint32 {
	if x != nil {
		return x.SkillDepotId
	}
	return 0
}

func (x *ShowAvatarInfo) GetCoreProudSkillLevel() uint32 {
	if x != nil {
		return x.CoreProudSkillLevel
	}
	return 0
}

func (x *ShowAvatarInfo) GetInherentProudSkillList() []uint32 {
	if x != nil {
		return x.InherentProudSkillList
	}
	return nil
}

func (x *ShowAvatarInfo) GetSkillLevelMap() map[uint32]uint32 {
	if x != nil {
		return x.SkillLevelMap
	}
	return nil
}

func (x *ShowAvatarInfo) GetProudSkillExtraLevelMap() map[uint32]uint32 {
	if x != nil {
		return x.ProudSkillExtraLevelMap
	}
	return nil
}

func (x *ShowAvatarInfo) GetEquipList() []*ShowEquip {
	if x != nil {
		return x.EquipList
	}
	return nil
}

func (x *ShowAvatarInfo) GetFetterInfo() *AvatarFetterInfo {
	if x != nil {
		return x.FetterInfo
	}
	return nil
}

func (x *ShowAvatarInfo) GetCostumeId() uint32 {
	if x != nil {
		return x.CostumeId
	}
	return 0
}

func (x *ShowAvatarInfo) GetExcelInfo() *AvatarExcelInfo {
	if x != nil {
		return x.ExcelInfo
	}
	return nil
}

type Quest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestId            uint32            `protobuf:"varint,1,opt,name=quest_id,json=questId,proto3" json:"quest_id,omitempty"`
	State              uint32            `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	StartTime          uint32            `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	IsRandom           bool              `protobuf:"varint,5,opt,name=is_random,json=isRandom,proto3" json:"is_random,omitempty"`
	ParentQuestId      uint32            `protobuf:"varint,6,opt,name=parent_quest_id,json=parentQuestId,proto3" json:"parent_quest_id,omitempty"`
	QuestConfigId      uint32            `protobuf:"varint,7,opt,name=quest_config_id,json=questConfigId,proto3" json:"quest_config_id,omitempty"`
	StartGameTime      uint32            `protobuf:"varint,8,opt,name=start_game_time,json=startGameTime,proto3" json:"start_game_time,omitempty"`
	AcceptTime         uint32            `protobuf:"varint,9,opt,name=accept_time,json=acceptTime,proto3" json:"accept_time,omitempty"`
	LackedNpcList      []uint32          `protobuf:"varint,10,rep,packed,name=lacked_npc_list,json=lackedNpcList,proto3" json:"lacked_npc_list,omitempty"`
	FinishProgressList []uint32          `protobuf:"varint,11,rep,packed,name=finish_progress_list,json=finishProgressList,proto3" json:"finish_progress_list,omitempty"`
	FailProgressList   []uint32          `protobuf:"varint,12,rep,packed,name=fail_progress_list,json=failProgressList,proto3" json:"fail_progress_list,omitempty"`
	LackedNpcMap       map[uint32]uint32 `protobuf:"bytes,13,rep,name=lacked_npc_map,json=lackedNpcMap,proto3" json:"lacked_npc_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	LackedPlaceList    []uint32          `protobuf:"varint,14,rep,packed,name=lacked_place_list,json=lackedPlaceList,proto3" json:"lacked_place_list,omitempty"`
	LackedPlaceMap     map[uint32]uint32 `protobuf:"bytes,15,rep,name=lacked_place_map,json=lackedPlaceMap,proto3" json:"lacked_place_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Quest) Reset() {
	*x = Quest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quest) ProtoMessage() {}

func (x *Quest) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quest.ProtoReflect.Descriptor instead.
func (*Quest) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{116}
}

func (x *Quest) GetQuestId() uint32 {
	if x != nil {
		return x.QuestId
	}
	return 0
}

func (x *Quest) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *Quest) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Quest) GetIsRandom() bool {
	if x != nil {
		return x.IsRandom
	}
	return false
}

func (x *Quest) GetParentQuestId() uint32 {
	if x != nil {
		return x.ParentQuestId
	}
	return 0
}

func (x *Quest) GetQuestConfigId() uint32 {
	if x != nil {
		return x.QuestConfigId
	}
	return 0
}

func (x *Quest) GetStartGameTime() uint32 {
	if x != nil {
		return x.StartGameTime
	}
	return 0
}

func (x *Quest) GetAcceptTime() uint32 {
	if x != nil {
		return x.AcceptTime
	}
	return 0
}

func (x *Quest) GetLackedNpcList() []uint32 {
	if x != nil {
		return x.LackedNpcList
	}
	return nil
}

func (x *Quest) GetFinishProgressList() []uint32 {
	if x != nil {
		return x.FinishProgressList
	}
	return nil
}

func (x *Quest) GetFailProgressList() []uint32 {
	if x != nil {
		return x.FailProgressList
	}
	return nil
}

func (x *Quest) GetLackedNpcMap() map[uint32]uint32 {
	if x != nil {
		return x.LackedNpcMap
	}
	return nil
}

func (x *Quest) GetLackedPlaceList() []uint32 {
	if x != nil {
		return x.LackedPlaceList
	}
	return nil
}

func (x *Quest) GetLackedPlaceMap() map[uint32]uint32 {
	if x != nil {
		return x.LackedPlaceMap
	}
	return nil
}

type NpcPositionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NpcId uint32  `protobuf:"varint,1,opt,name=npc_id,json=npcId,proto3" json:"npc_id,omitempty"`
	Pos   *Vector `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *NpcPositionInfo) Reset() {
	*x = NpcPositionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpcPositionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpcPositionInfo) ProtoMessage() {}

func (x *NpcPositionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpcPositionInfo.ProtoReflect.Descriptor instead.
func (*NpcPositionInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{117}
}

func (x *NpcPositionInfo) GetNpcId() uint32 {
	if x != nil {
		return x.NpcId
	}
	return 0
}

func (x *NpcPositionInfo) GetPos() *Vector {
	if x != nil {
		return x.Pos
	}
	return nil
}

type MailTextContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title   string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Sender  string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (x *MailTextContent) Reset() {
	*x = MailTextContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailTextContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailTextContent) ProtoMessage() {}

func (x *MailTextContent) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailTextContent.ProtoReflect.Descriptor instead.
func (*MailTextContent) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{118}
}

func (x *MailTextContent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MailTextContent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MailTextContent) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

type MailItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipParam *EquipParam         `protobuf:"bytes,1,opt,name=equip_param,json=equipParam,proto3" json:"equip_param,omitempty"`
	DeleteInfo *MaterialDeleteInfo `protobuf:"bytes,2,opt,name=delete_info,json=deleteInfo,proto3" json:"delete_info,omitempty"`
}

func (x *MailItem) Reset() {
	*x = MailItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailItem) ProtoMessage() {}

func (x *MailItem) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailItem.ProtoReflect.Descriptor instead.
func (*MailItem) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{119}
}

func (x *MailItem) GetEquipParam() *EquipParam {
	if x != nil {
		return x.EquipParam
	}
	return nil
}

func (x *MailItem) GetDeleteInfo() *MaterialDeleteInfo {
	if x != nil {
		return x.DeleteInfo
	}
	return nil
}

type MailData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailId          uint32           `protobuf:"varint,1,opt,name=mail_id,json=mailId,proto3" json:"mail_id,omitempty"`
	MailTextContent *MailTextContent `protobuf:"bytes,4,opt,name=mail_text_content,json=mailTextContent,proto3" json:"mail_text_content,omitempty"`
	ItemList        []*MailItem      `protobuf:"bytes,7,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
	SendTime        uint32           `protobuf:"varint,8,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`
	ExpireTime      uint32           `protobuf:"varint,9,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	Importance      uint32           `protobuf:"varint,10,opt,name=importance,proto3" json:"importance,omitempty"`
	IsRead          bool             `protobuf:"varint,11,opt,name=is_read,json=isRead,proto3" json:"is_read,omitempty"`
	IsAttachmentGot bool             `protobuf:"varint,12,opt,name=is_attachment_got,json=isAttachmentGot,proto3" json:"is_attachment_got,omitempty"`
	ConfigId        uint32           `protobuf:"varint,13,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	ArgumentList    []string         `protobuf:"bytes,14,rep,name=argument_list,json=argumentList,proto3" json:"argument_list,omitempty"`
	CollectState    MailCollectState `protobuf:"varint,15,opt,name=collect_state,json=collectState,proto3,enum=proto.MailCollectState" json:"collect_state,omitempty"`
}

func (x *MailData) Reset() {
	*x = MailData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailData) ProtoMessage() {}

func (x *MailData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailData.ProtoReflect.Descriptor instead.
func (*MailData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{120}
}

func (x *MailData) GetMailId() uint32 {
	if x != nil {
		return x.MailId
	}
	return 0
}

func (x *MailData) GetMailTextContent() *MailTextContent {
	if x != nil {
		return x.MailTextContent
	}
	return nil
}

func (x *MailData) GetItemList() []*MailItem {
	if x != nil {
		return x.ItemList
	}
	return nil
}

func (x *MailData) GetSendTime() uint32 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *MailData) GetExpireTime() uint32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *MailData) GetImportance() uint32 {
	if x != nil {
		return x.Importance
	}
	return 0
}

func (x *MailData) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *MailData) GetIsAttachmentGot() bool {
	if x != nil {
		return x.IsAttachmentGot
	}
	return false
}

func (x *MailData) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *MailData) GetArgumentList() []string {
	if x != nil {
		return x.ArgumentList
	}
	return nil
}

func (x *MailData) GetCollectState() MailCollectState {
	if x != nil {
		return x.CollectState
	}
	return MailCollectState_MAIL_COLLECTIBLE_UNKONW
}

type OnlinePlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                 uint32          `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nickname            string          `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	PlayerLevel         uint32          `protobuf:"varint,3,opt,name=player_level,json=playerLevel,proto3" json:"player_level,omitempty"`
	AvatarId            uint32          `protobuf:"varint,4,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	MpSettingType       MpSettingType   `protobuf:"varint,5,opt,name=mp_setting_type,json=mpSettingType,proto3,enum=proto.MpSettingType" json:"mp_setting_type,omitempty"`
	CurPlayerNumInWorld uint32          `protobuf:"varint,6,opt,name=cur_player_num_in_world,json=curPlayerNumInWorld,proto3" json:"cur_player_num_in_world,omitempty"`
	WorldLevel          uint32          `protobuf:"varint,7,opt,name=world_level,json=worldLevel,proto3" json:"world_level,omitempty"`
	OnlineId            string          `protobuf:"bytes,8,opt,name=online_id,json=onlineId,proto3" json:"online_id,omitempty"`
	NameCardId          uint32          `protobuf:"varint,9,opt,name=name_card_id,json=nameCardId,proto3" json:"name_card_id,omitempty"`
	BlacklistUidList    []uint32        `protobuf:"varint,10,rep,packed,name=blacklist_uid_list,json=blacklistUidList,proto3" json:"blacklist_uid_list,omitempty"`
	Signature           string          `protobuf:"bytes,11,opt,name=signature,proto3" json:"signature,omitempty"`
	ProfilePicture      *ProfilePicture `protobuf:"bytes,12,opt,name=profile_picture,json=profilePicture,proto3" json:"profile_picture,omitempty"`
	PsnId               string          `protobuf:"bytes,13,opt,name=psn_id,json=psnId,proto3" json:"psn_id,omitempty"`
}

func (x *OnlinePlayerInfo) Reset() {
	*x = OnlinePlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlinePlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlinePlayerInfo) ProtoMessage() {}

func (x *OnlinePlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlinePlayerInfo.ProtoReflect.Descriptor instead.
func (*OnlinePlayerInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{121}
}

func (x *OnlinePlayerInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *OnlinePlayerInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *OnlinePlayerInfo) GetPlayerLevel() uint32 {
	if x != nil {
		return x.PlayerLevel
	}
	return 0
}

func (x *OnlinePlayerInfo) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *OnlinePlayerInfo) GetMpSettingType() MpSettingType {
	if x != nil {
		return x.MpSettingType
	}
	return MpSettingType_MP_SETTING_NO_ENTER
}

func (x *OnlinePlayerInfo) GetCurPlayerNumInWorld() uint32 {
	if x != nil {
		return x.CurPlayerNumInWorld
	}
	return 0
}

func (x *OnlinePlayerInfo) GetWorldLevel() uint32 {
	if x != nil {
		return x.WorldLevel
	}
	return 0
}

func (x *OnlinePlayerInfo) GetOnlineId() string {
	if x != nil {
		return x.OnlineId
	}
	return ""
}

func (x *OnlinePlayerInfo) GetNameCardId() uint32 {
	if x != nil {
		return x.NameCardId
	}
	return 0
}

func (x *OnlinePlayerInfo) GetBlacklistUidList() []uint32 {
	if x != nil {
		return x.BlacklistUidList
	}
	return nil
}

func (x *OnlinePlayerInfo) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *OnlinePlayerInfo) GetProfilePicture() *ProfilePicture {
	if x != nil {
		return x.ProfilePicture
	}
	return nil
}

func (x *OnlinePlayerInfo) GetPsnId() string {
	if x != nil {
		return x.PsnId
	}
	return ""
}

type Birthday struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month uint32 `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	Day   uint32 `protobuf:"varint,2,opt,name=day,proto3" json:"day,omitempty"`
}

func (x *Birthday) Reset() {
	*x = Birthday{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Birthday) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Birthday) ProtoMessage() {}

func (x *Birthday) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Birthday.ProtoReflect.Descriptor instead.
func (*Birthday) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{122}
}

func (x *Birthday) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *Birthday) GetDay() uint32 {
	if x != nil {
		return x.Day
	}
	return 0
}

type MapMarkPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId   uint32           `protobuf:"varint,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	Name      string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pos       *Vector          `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
	PointType MapMarkPointType `protobuf:"varint,4,opt,name=point_type,json=pointType,proto3,enum=proto.MapMarkPointType" json:"point_type,omitempty"`
	MonsterId uint32           `protobuf:"varint,5,opt,name=monster_id,json=monsterId,proto3" json:"monster_id,omitempty"`
	FromType  MapMarkFromType  `protobuf:"varint,6,opt,name=from_type,json=fromType,proto3,enum=proto.MapMarkFromType" json:"from_type,omitempty"`
	QuestId   uint32           `protobuf:"varint,7,opt,name=quest_id,json=questId,proto3" json:"quest_id,omitempty"`
}

func (x *MapMarkPoint) Reset() {
	*x = MapMarkPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapMarkPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapMarkPoint) ProtoMessage() {}

func (x *MapMarkPoint) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapMarkPoint.ProtoReflect.Descriptor instead.
func (*MapMarkPoint) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{123}
}

func (x *MapMarkPoint) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *MapMarkPoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MapMarkPoint) GetPos() *Vector {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MapMarkPoint) GetPointType() MapMarkPointType {
	if x != nil {
		return x.PointType
	}
	return MapMarkPointType_NPC
}

func (x *MapMarkPoint) GetMonsterId() uint32 {
	if x != nil {
		return x.MonsterId
	}
	return 0
}

func (x *MapMarkPoint) GetFromType() MapMarkFromType {
	if x != nil {
		return x.FromType
	}
	return MapMarkFromType_MAP_MARK_FROM_TYPE_NOE
}

func (x *MapMarkPoint) GetQuestId() uint32 {
	if x != nil {
		return x.QuestId
	}
	return 0
}

type MassiveWaterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MassiveWaterInfo) Reset() {
	*x = MassiveWaterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MassiveWaterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MassiveWaterInfo) ProtoMessage() {}

func (x *MassiveWaterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MassiveWaterInfo.ProtoReflect.Descriptor instead.
func (*MassiveWaterInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{124}
}

func (x *MassiveWaterInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type MassiveGrassInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Center *Vector `protobuf:"bytes,2,opt,name=center,proto3" json:"center,omitempty"`
	Size   *Vector `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *MassiveGrassInfo) Reset() {
	*x = MassiveGrassInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MassiveGrassInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MassiveGrassInfo) ProtoMessage() {}

func (x *MassiveGrassInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MassiveGrassInfo.ProtoReflect.Descriptor instead.
func (*MassiveGrassInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{125}
}

func (x *MassiveGrassInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MassiveGrassInfo) GetCenter() *Vector {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *MassiveGrassInfo) GetSize() *Vector {
	if x != nil {
		return x.Size
	}
	return nil
}

type MassiveBoxInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ConfigId uint32  `protobuf:"varint,2,opt,name=configId,proto3" json:"configId,omitempty"`
	Center   *Vector `protobuf:"bytes,3,opt,name=center,proto3" json:"center,omitempty"`
	Extents  *Vector `protobuf:"bytes,4,opt,name=extents,proto3" json:"extents,omitempty"`
	Up       *Vector `protobuf:"bytes,5,opt,name=up,proto3" json:"up,omitempty"`
	Forward  *Vector `protobuf:"bytes,6,opt,name=forward,proto3" json:"forward,omitempty"`
	Right    *Vector `protobuf:"bytes,7,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *MassiveBoxInfo) Reset() {
	*x = MassiveBoxInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MassiveBoxInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MassiveBoxInfo) ProtoMessage() {}

func (x *MassiveBoxInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MassiveBoxInfo.ProtoReflect.Descriptor instead.
func (*MassiveBoxInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{126}
}

func (x *MassiveBoxInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MassiveBoxInfo) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *MassiveBoxInfo) GetCenter() *Vector {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *MassiveBoxInfo) GetExtents() *Vector {
	if x != nil {
		return x.Extents
	}
	return nil
}

func (x *MassiveBoxInfo) GetUp() *Vector {
	if x != nil {
		return x.Up
	}
	return nil
}

func (x *MassiveBoxInfo) GetForward() *Vector {
	if x != nil {
		return x.Forward
	}
	return nil
}

func (x *MassiveBoxInfo) GetRight() *Vector {
	if x != nil {
		return x.Right
	}
	return nil
}

type ClientMassiveEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityType uint32 `protobuf:"varint,1,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	ConfigId   uint32 `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	ObjId      int64  `protobuf:"varint,3,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	// Types that are assignable to EntityInfo:
	//
	//	*ClientMassiveEntity_WaterInfo
	//	*ClientMassiveEntity_GrassInfo
	//	*ClientMassiveEntity_BoxInfo
	EntityInfo isClientMassiveEntity_EntityInfo `protobuf_oneof:"entity_info"`
}

func (x *ClientMassiveEntity) Reset() {
	*x = ClientMassiveEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMassiveEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMassiveEntity) ProtoMessage() {}

func (x *ClientMassiveEntity) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMassiveEntity.ProtoReflect.Descriptor instead.
func (*ClientMassiveEntity) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{127}
}

func (x *ClientMassiveEntity) GetEntityType() uint32 {
	if x != nil {
		return x.EntityType
	}
	return 0
}

func (x *ClientMassiveEntity) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *ClientMassiveEntity) GetObjId() int64 {
	if x != nil {
		return x.ObjId
	}
	return 0
}

func (m *ClientMassiveEntity) GetEntityInfo() isClientMassiveEntity_EntityInfo {
	if m != nil {
		return m.EntityInfo
	}
	return nil
}

func (x *ClientMassiveEntity) GetWaterInfo() *MassiveWaterInfo {
	if x, ok := x.GetEntityInfo().(*ClientMassiveEntity_WaterInfo); ok {
		return x.WaterInfo
	}
	return nil
}

func (x *ClientMassiveEntity) GetGrassInfo() *MassiveGrassInfo {
	if x, ok := x.GetEntityInfo().(*ClientMassiveEntity_GrassInfo); ok {
		return x.GrassInfo
	}
	return nil
}

func (x *ClientMassiveEntity) GetBoxInfo() *MassiveBoxInfo {
	if x, ok := x.GetEntityInfo().(*ClientMassiveEntity_BoxInfo); ok {
		return x.BoxInfo
	}
	return nil
}

type isClientMassiveEntity_EntityInfo interface {
	isClientMassiveEntity_EntityInfo()
}

type ClientMassiveEntity_WaterInfo struct {
	WaterInfo *MassiveWaterInfo `protobuf:"bytes,4,opt,name=water_info,json=waterInfo,proto3,oneof"`
}

type ClientMassiveEntity_GrassInfo struct {
	GrassInfo *MassiveGrassInfo `protobuf:"bytes,5,opt,name=grass_info,json=grassInfo,proto3,oneof"`
}

type ClientMassiveEntity_BoxInfo struct {
	BoxInfo *MassiveBoxInfo `protobuf:"bytes,6,opt,name=box_info,json=boxInfo,proto3,oneof"`
}

func (*ClientMassiveEntity_WaterInfo) isClientMassiveEntity_EntityInfo() {}

func (*ClientMassiveEntity_GrassInfo) isClientMassiveEntity_EntityInfo() {}

func (*ClientMassiveEntity_BoxInfo) isClientMassiveEntity_EntityInfo() {}

type ShapeSphere struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Center *Vector `protobuf:"bytes,1,opt,name=center,proto3" json:"center,omitempty"`
	Radius float32 `protobuf:"fixed32,2,opt,name=radius,proto3" json:"radius,omitempty"`
}

func (x *ShapeSphere) Reset() {
	*x = ShapeSphere{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShapeSphere) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShapeSphere) ProtoMessage() {}

func (x *ShapeSphere) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShapeSphere.ProtoReflect.Descriptor instead.
func (*ShapeSphere) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{128}
}

func (x *ShapeSphere) GetCenter() *Vector {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *ShapeSphere) GetRadius() float32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

type ShapeBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Center  *Vector `protobuf:"bytes,1,opt,name=center,proto3" json:"center,omitempty"`
	Axis0   *Vector `protobuf:"bytes,2,opt,name=axis0,proto3" json:"axis0,omitempty"`
	Axis1   *Vector `protobuf:"bytes,3,opt,name=axis1,proto3" json:"axis1,omitempty"`
	Axis2   *Vector `protobuf:"bytes,4,opt,name=axis2,proto3" json:"axis2,omitempty"`
	Extents *Vector `protobuf:"bytes,5,opt,name=extents,proto3" json:"extents,omitempty"`
}

func (x *ShapeBox) Reset() {
	*x = ShapeBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShapeBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShapeBox) ProtoMessage() {}

func (x *ShapeBox) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShapeBox.ProtoReflect.Descriptor instead.
func (*ShapeBox) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{129}
}

func (x *ShapeBox) GetCenter() *Vector {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *ShapeBox) GetAxis0() *Vector {
	if x != nil {
		return x.Axis0
	}
	return nil
}

func (x *ShapeBox) GetAxis1() *Vector {
	if x != nil {
		return x.Axis1
	}
	return nil
}

func (x *ShapeBox) GetAxis2() *Vector {
	if x != nil {
		return x.Axis2
	}
	return nil
}

func (x *ShapeBox) GetExtents() *Vector {
	if x != nil {
		return x.Extents
	}
	return nil
}

type ServerMassiveEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityType      uint32 `protobuf:"varint,1,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	ConfigId        uint32 `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	RuntimeId       uint32 `protobuf:"varint,3,opt,name=runtime_id,json=runtimeId,proto3" json:"runtime_id,omitempty"`
	AuthorityPeerId uint32 `protobuf:"varint,4,opt,name=authority_peer_id,json=authorityPeerId,proto3" json:"authority_peer_id,omitempty"`
	ObjId           int64  `protobuf:"varint,5,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	// Types that are assignable to EntityInfo:
	//
	//	*ServerMassiveEntity_WaterInfo
	//	*ServerMassiveEntity_GrassInfo
	//	*ServerMassiveEntity_BoxInfo
	EntityInfo isServerMassiveEntity_EntityInfo `protobuf_oneof:"entity_info"`
}

func (x *ServerMassiveEntity) Reset() {
	*x = ServerMassiveEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMassiveEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMassiveEntity) ProtoMessage() {}

func (x *ServerMassiveEntity) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMassiveEntity.ProtoReflect.Descriptor instead.
func (*ServerMassiveEntity) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{130}
}

func (x *ServerMassiveEntity) GetEntityType() uint32 {
	if x != nil {
		return x.EntityType
	}
	return 0
}

func (x *ServerMassiveEntity) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *ServerMassiveEntity) GetRuntimeId() uint32 {
	if x != nil {
		return x.RuntimeId
	}
	return 0
}

func (x *ServerMassiveEntity) GetAuthorityPeerId() uint32 {
	if x != nil {
		return x.AuthorityPeerId
	}
	return 0
}

func (x *ServerMassiveEntity) GetObjId() int64 {
	if x != nil {
		return x.ObjId
	}
	return 0
}

func (m *ServerMassiveEntity) GetEntityInfo() isServerMassiveEntity_EntityInfo {
	if m != nil {
		return m.EntityInfo
	}
	return nil
}

func (x *ServerMassiveEntity) GetWaterInfo() *MassiveWaterInfo {
	if x, ok := x.GetEntityInfo().(*ServerMassiveEntity_WaterInfo); ok {
		return x.WaterInfo
	}
	return nil
}

func (x *ServerMassiveEntity) GetGrassInfo() *MassiveGrassInfo {
	if x, ok := x.GetEntityInfo().(*ServerMassiveEntity_GrassInfo); ok {
		return x.GrassInfo
	}
	return nil
}

func (x *ServerMassiveEntity) GetBoxInfo() *MassiveBoxInfo {
	if x, ok := x.GetEntityInfo().(*ServerMassiveEntity_BoxInfo); ok {
		return x.BoxInfo
	}
	return nil
}

type isServerMassiveEntity_EntityInfo interface {
	isServerMassiveEntity_EntityInfo()
}

type ServerMassiveEntity_WaterInfo struct {
	WaterInfo *MassiveWaterInfo `protobuf:"bytes,6,opt,name=water_info,json=waterInfo,proto3,oneof"`
}

type ServerMassiveEntity_GrassInfo struct {
	GrassInfo *MassiveGrassInfo `protobuf:"bytes,7,opt,name=grass_info,json=grassInfo,proto3,oneof"`
}

type ServerMassiveEntity_BoxInfo struct {
	BoxInfo *MassiveBoxInfo `protobuf:"bytes,8,opt,name=box_info,json=boxInfo,proto3,oneof"`
}

func (*ServerMassiveEntity_WaterInfo) isServerMassiveEntity_EntityInfo() {}

func (*ServerMassiveEntity_GrassInfo) isServerMassiveEntity_EntityInfo() {}

func (*ServerMassiveEntity_BoxInfo) isServerMassiveEntity_EntityInfo() {}

type MassiveEntityState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityType   uint32 `protobuf:"varint,1,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	ObjId        int64  `protobuf:"varint,2,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	ElementState uint32 `protobuf:"varint,3,opt,name=element_state,json=elementState,proto3" json:"element_state,omitempty"`
}

func (x *MassiveEntityState) Reset() {
	*x = MassiveEntityState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MassiveEntityState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MassiveEntityState) ProtoMessage() {}

func (x *MassiveEntityState) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MassiveEntityState.ProtoReflect.Descriptor instead.
func (*MassiveEntityState) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{131}
}

func (x *MassiveEntityState) GetEntityType() uint32 {
	if x != nil {
		return x.EntityType
	}
	return 0
}

func (x *MassiveEntityState) GetObjId() int64 {
	if x != nil {
		return x.ObjId
	}
	return 0
}

func (x *MassiveEntityState) GetElementState() uint32 {
	if x != nil {
		return x.ElementState
	}
	return 0
}

type EntityClientData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindChangeSceneTime   uint32  `protobuf:"varint,1,opt,name=wind_change_scene_time,json=windChangeSceneTime,proto3" json:"wind_change_scene_time,omitempty"`
	WindmillSyncAngle     float32 `protobuf:"fixed32,2,opt,name=windmill_sync_angle,json=windmillSyncAngle,proto3" json:"windmill_sync_angle,omitempty"`
	WindChangeTargetLevel int32   `protobuf:"varint,3,opt,name=wind_change_target_level,json=windChangeTargetLevel,proto3" json:"wind_change_target_level,omitempty"`
}

func (x *EntityClientData) Reset() {
	*x = EntityClientData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityClientData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityClientData) ProtoMessage() {}

func (x *EntityClientData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityClientData.ProtoReflect.Descriptor instead.
func (*EntityClientData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{132}
}

func (x *EntityClientData) GetWindChangeSceneTime() uint32 {
	if x != nil {
		return x.WindChangeSceneTime
	}
	return 0
}

func (x *EntityClientData) GetWindmillSyncAngle() float32 {
	if x != nil {
		return x.WindmillSyncAngle
	}
	return 0
}

func (x *EntityClientData) GetWindChangeTargetLevel() int32 {
	if x != nil {
		return x.WindChangeTargetLevel
	}
	return 0
}

type BlockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId     uint32 `protobuf:"varint,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	DataVersion uint32 `protobuf:"varint,2,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"`
	BinData     []byte `protobuf:"bytes,3,opt,name=bin_data,json=binData,proto3" json:"bin_data,omitempty"`
	IsDirty     bool   `protobuf:"varint,4,opt,name=is_dirty,json=isDirty,proto3" json:"is_dirty,omitempty"`
}

func (x *BlockInfo) Reset() {
	*x = BlockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockInfo) ProtoMessage() {}

func (x *BlockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockInfo.ProtoReflect.Descriptor instead.
func (*BlockInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{133}
}

func (x *BlockInfo) GetBlockId() uint32 {
	if x != nil {
		return x.BlockId
	}
	return 0
}

func (x *BlockInfo) GetDataVersion() uint32 {
	if x != nil {
		return x.DataVersion
	}
	return 0
}

func (x *BlockInfo) GetBinData() []byte {
	if x != nil {
		return x.BinData
	}
	return nil
}

func (x *BlockInfo) GetIsDirty() bool {
	if x != nil {
		return x.IsDirty
	}
	return false
}

type ShopMcoinProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId     string `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	PriceTier     string `protobuf:"bytes,2,opt,name=price_tier,json=priceTier,proto3" json:"price_tier,omitempty"`
	McoinBase     uint32 `protobuf:"varint,3,opt,name=mcoin_base,json=mcoinBase,proto3" json:"mcoin_base,omitempty"`
	McoinNonFirst uint32 `protobuf:"varint,4,opt,name=mcoin_non_first,json=mcoinNonFirst,proto3" json:"mcoin_non_first,omitempty"`
	McoinFirst    uint32 `protobuf:"varint,5,opt,name=mcoin_first,json=mcoinFirst,proto3" json:"mcoin_first,omitempty"`
	BoughtNum     uint32 `protobuf:"varint,6,opt,name=bought_num,json=boughtNum,proto3" json:"bought_num,omitempty"`
	IsAudit       bool   `protobuf:"varint,7,opt,name=is_audit,json=isAudit,proto3" json:"is_audit,omitempty"`
}

func (x *ShopMcoinProduct) Reset() {
	*x = ShopMcoinProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopMcoinProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopMcoinProduct) ProtoMessage() {}

func (x *ShopMcoinProduct) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopMcoinProduct.ProtoReflect.Descriptor instead.
func (*ShopMcoinProduct) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{134}
}

func (x *ShopMcoinProduct) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ShopMcoinProduct) GetPriceTier() string {
	if x != nil {
		return x.PriceTier
	}
	return ""
}

func (x *ShopMcoinProduct) GetMcoinBase() uint32 {
	if x != nil {
		return x.McoinBase
	}
	return 0
}

func (x *ShopMcoinProduct) GetMcoinNonFirst() uint32 {
	if x != nil {
		return x.McoinNonFirst
	}
	return 0
}

func (x *ShopMcoinProduct) GetMcoinFirst() uint32 {
	if x != nil {
		return x.McoinFirst
	}
	return 0
}

func (x *ShopMcoinProduct) GetBoughtNum() uint32 {
	if x != nil {
		return x.BoughtNum
	}
	return 0
}

func (x *ShopMcoinProduct) GetIsAudit() bool {
	if x != nil {
		return x.IsAudit
	}
	return false
}

type ShopCardProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId        string `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	PriceTier        string `protobuf:"bytes,2,opt,name=price_tier,json=priceTier,proto3" json:"price_tier,omitempty"`
	McoinBase        uint32 `protobuf:"varint,3,opt,name=mcoin_base,json=mcoinBase,proto3" json:"mcoin_base,omitempty"`
	HcoinPerDay      uint32 `protobuf:"varint,4,opt,name=hcoin_per_day,json=hcoinPerDay,proto3" json:"hcoin_per_day,omitempty"`
	Days             uint32 `protobuf:"varint,5,opt,name=days,proto3" json:"days,omitempty"`
	RemainRewardDays uint32 `protobuf:"varint,6,opt,name=remain_reward_days,json=remainRewardDays,proto3" json:"remain_reward_days,omitempty"`
	CardProductType  uint32 `protobuf:"varint,7,opt,name=card_product_type,json=cardProductType,proto3" json:"card_product_type,omitempty"`
	// Types that are assignable to ExtraCardData:
	//
	//	*ShopCardProduct_ResinCard_
	ExtraCardData isShopCardProduct_ExtraCardData `protobuf_oneof:"extra_card_data"`
}

func (x *ShopCardProduct) Reset() {
	*x = ShopCardProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopCardProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopCardProduct) ProtoMessage() {}

func (x *ShopCardProduct) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopCardProduct.ProtoReflect.Descriptor instead.
func (*ShopCardProduct) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{135}
}

func (x *ShopCardProduct) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ShopCardProduct) GetPriceTier() string {
	if x != nil {
		return x.PriceTier
	}
	return ""
}

func (x *ShopCardProduct) GetMcoinBase() uint32 {
	if x != nil {
		return x.McoinBase
	}
	return 0
}

func (x *ShopCardProduct) GetHcoinPerDay() uint32 {
	if x != nil {
		return x.HcoinPerDay
	}
	return 0
}

func (x *ShopCardProduct) GetDays() uint32 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *ShopCardProduct) GetRemainRewardDays() uint32 {
	if x != nil {
		return x.RemainRewardDays
	}
	return 0
}

func (x *ShopCardProduct) GetCardProductType() uint32 {
	if x != nil {
		return x.CardProductType
	}
	return 0
}

func (m *ShopCardProduct) GetExtraCardData() isShopCardProduct_ExtraCardData {
	if m != nil {
		return m.ExtraCardData
	}
	return nil
}

func (x *ShopCardProduct) GetResinCard() *ShopCardProduct_ResinCard {
	if x, ok := x.GetExtraCardData().(*ShopCardProduct_ResinCard_); ok {
		return x.ResinCard
	}
	return nil
}

type isShopCardProduct_ExtraCardData interface {
	isShopCardProduct_ExtraCardData()
}

type ShopCardProduct_ResinCard_ struct {
	ResinCard *ShopCardProduct_ResinCard `protobuf:"bytes,101,opt,name=resin_card,json=resinCard,proto3,oneof"`
}

func (*ShopCardProduct_ResinCard_) isShopCardProduct_ExtraCardData() {}

type PlayProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId  string `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	PriceTier  string `protobuf:"bytes,2,opt,name=price_tier,json=priceTier,proto3" json:"price_tier,omitempty"`
	ScheduleId uint32 `protobuf:"varint,3,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *PlayProduct) Reset() {
	*x = PlayProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayProduct) ProtoMessage() {}

func (x *PlayProduct) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayProduct.ProtoReflect.Descriptor instead.
func (*PlayProduct) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{136}
}

func (x *PlayProduct) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *PlayProduct) GetPriceTier() string {
	if x != nil {
		return x.PriceTier
	}
	return ""
}

func (x *PlayProduct) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type ShopConcertProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId   string `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	PriceTier   string `protobuf:"bytes,2,opt,name=price_tier,json=priceTier,proto3" json:"price_tier,omitempty"`
	ObtainCount uint32 `protobuf:"varint,3,opt,name=obtain_count,json=obtainCount,proto3" json:"obtain_count,omitempty"`
	ObtainLimit uint32 `protobuf:"varint,4,opt,name=obtain_limit,json=obtainLimit,proto3" json:"obtain_limit,omitempty"`
	BeginTime   uint32 `protobuf:"varint,5,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	EndTime     uint32 `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	BuyTimes    uint32 `protobuf:"varint,7,opt,name=buy_times,json=buyTimes,proto3" json:"buy_times,omitempty"`
}

func (x *ShopConcertProduct) Reset() {
	*x = ShopConcertProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopConcertProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopConcertProduct) ProtoMessage() {}

func (x *ShopConcertProduct) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopConcertProduct.ProtoReflect.Descriptor instead.
func (*ShopConcertProduct) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{137}
}

func (x *ShopConcertProduct) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ShopConcertProduct) GetPriceTier() string {
	if x != nil {
		return x.PriceTier
	}
	return ""
}

func (x *ShopConcertProduct) GetObtainCount() uint32 {
	if x != nil {
		return x.ObtainCount
	}
	return 0
}

func (x *ShopConcertProduct) GetObtainLimit() uint32 {
	if x != nil {
		return x.ObtainLimit
	}
	return 0
}

func (x *ShopConcertProduct) GetBeginTime() uint32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *ShopConcertProduct) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ShopConcertProduct) GetBuyTimes() uint32 {
	if x != nil {
		return x.BuyTimes
	}
	return 0
}

type HashedString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash uint32 `protobuf:"varint,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *HashedString) Reset() {
	*x = HashedString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashedString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashedString) ProtoMessage() {}

func (x *HashedString) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashedString.ProtoReflect.Descriptor instead.
func (*HashedString) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{138}
}

func (x *HashedString) GetHash() uint32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type PlayTeamEntityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId        uint32                `protobuf:"varint,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	PlayerUid       uint32                `protobuf:"varint,2,opt,name=player_uid,json=playerUid,proto3" json:"player_uid,omitempty"`
	AuthorityPeerId uint32                `protobuf:"varint,3,opt,name=authority_peer_id,json=authorityPeerId,proto3" json:"authority_peer_id,omitempty"`
	GadgetConfigId  uint32                `protobuf:"varint,5,opt,name=gadget_config_id,json=gadgetConfigId,proto3" json:"gadget_config_id,omitempty"`
	AbilityInfo     *AbilitySyncStateInfo `protobuf:"bytes,6,opt,name=ability_info,json=abilityInfo,proto3" json:"ability_info,omitempty"`
}

func (x *PlayTeamEntityInfo) Reset() {
	*x = PlayTeamEntityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayTeamEntityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayTeamEntityInfo) ProtoMessage() {}

func (x *PlayTeamEntityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayTeamEntityInfo.ProtoReflect.Descriptor instead.
func (*PlayTeamEntityInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{139}
}

func (x *PlayTeamEntityInfo) GetEntityId() uint32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *PlayTeamEntityInfo) GetPlayerUid() uint32 {
	if x != nil {
		return x.PlayerUid
	}
	return 0
}

func (x *PlayTeamEntityInfo) GetAuthorityPeerId() uint32 {
	if x != nil {
		return x.AuthorityPeerId
	}
	return 0
}

func (x *PlayTeamEntityInfo) GetGadgetConfigId() uint32 {
	if x != nil {
		return x.GadgetConfigId
	}
	return 0
}

func (x *PlayTeamEntityInfo) GetAbilityInfo() *AbilitySyncStateInfo {
	if x != nil {
		return x.AbilityInfo
	}
	return nil
}

type FeatureBlockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureType uint32 `protobuf:"varint,1,opt,name=feature_type,json=featureType,proto3" json:"feature_type,omitempty"`
	EndTime     uint32 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *FeatureBlockInfo) Reset() {
	*x = FeatureBlockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureBlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureBlockInfo) ProtoMessage() {}

func (x *FeatureBlockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureBlockInfo.ProtoReflect.Descriptor instead.
func (*FeatureBlockInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{140}
}

func (x *FeatureBlockInfo) GetFeatureType() uint32 {
	if x != nil {
		return x.FeatureType
	}
	return 0
}

func (x *FeatureBlockInfo) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type MapMarkTipsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TipsType    MapMarkTipsType `protobuf:"varint,1,opt,name=tips_type,json=tipsType,proto3,enum=proto.MapMarkTipsType" json:"tips_type,omitempty"`
	PointIdList []uint32        `protobuf:"varint,2,rep,packed,name=point_id_list,json=pointIdList,proto3" json:"point_id_list,omitempty"`
}

func (x *MapMarkTipsInfo) Reset() {
	*x = MapMarkTipsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapMarkTipsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapMarkTipsInfo) ProtoMessage() {}

func (x *MapMarkTipsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapMarkTipsInfo.ProtoReflect.Descriptor instead.
func (*MapMarkTipsInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{141}
}

func (x *MapMarkTipsInfo) GetTipsType() MapMarkTipsType {
	if x != nil {
		return x.TipsType
	}
	return MapMarkTipsType_MARK_TIPS_DUNGEON_ELEMENT_TRIAL
}

func (x *MapMarkTipsInfo) GetPointIdList() []uint32 {
	if x != nil {
		return x.PointIdList
	}
	return nil
}

type ExhibitionDisplayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Param       uint32 `protobuf:"varint,2,opt,name=param,proto3" json:"param,omitempty"`
	DetailParam uint32 `protobuf:"varint,3,opt,name=detail_param,json=detailParam,proto3" json:"detail_param,omitempty"`
}

func (x *ExhibitionDisplayInfo) Reset() {
	*x = ExhibitionDisplayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExhibitionDisplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExhibitionDisplayInfo) ProtoMessage() {}

func (x *ExhibitionDisplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExhibitionDisplayInfo.ProtoReflect.Descriptor instead.
func (*ExhibitionDisplayInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{142}
}

func (x *ExhibitionDisplayInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExhibitionDisplayInfo) GetParam() uint32 {
	if x != nil {
		return x.Param
	}
	return 0
}

func (x *ExhibitionDisplayInfo) GetDetailParam() uint32 {
	if x != nil {
		return x.DetailParam
	}
	return 0
}

type ProfilePicture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId  uint32 `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	CostumeId uint32 `protobuf:"varint,2,opt,name=costume_id,json=costumeId,proto3" json:"costume_id,omitempty"`
}

func (x *ProfilePicture) Reset() {
	*x = ProfilePicture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfilePicture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfilePicture) ProtoMessage() {}

func (x *ProfilePicture) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfilePicture.ProtoReflect.Descriptor instead.
func (*ProfilePicture) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{143}
}

func (x *ProfilePicture) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *ProfilePicture) GetCostumeId() uint32 {
	if x != nil {
		return x.CostumeId
	}
	return 0
}

type RedPointData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedPointType uint32 `protobuf:"varint,1,opt,name=red_point_type,json=redPointType,proto3" json:"red_point_type,omitempty"`
	IsShow       bool   `protobuf:"varint,2,opt,name=is_show,json=isShow,proto3" json:"is_show,omitempty"`
	ContentId    uint32 `protobuf:"varint,3,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
}

func (x *RedPointData) Reset() {
	*x = RedPointData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedPointData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedPointData) ProtoMessage() {}

func (x *RedPointData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedPointData.ProtoReflect.Descriptor instead.
func (*RedPointData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{144}
}

func (x *RedPointData) GetRedPointType() uint32 {
	if x != nil {
		return x.RedPointType
	}
	return 0
}

func (x *RedPointData) GetIsShow() bool {
	if x != nil {
		return x.IsShow
	}
	return false
}

func (x *RedPointData) GetContentId() uint32 {
	if x != nil {
		return x.ContentId
	}
	return 0
}

type HomeMarkPointNPCData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId  uint32 `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	CostumeId uint32 `protobuf:"varint,2,opt,name=costume_id,json=costumeId,proto3" json:"costume_id,omitempty"`
}

func (x *HomeMarkPointNPCData) Reset() {
	*x = HomeMarkPointNPCData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeMarkPointNPCData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeMarkPointNPCData) ProtoMessage() {}

func (x *HomeMarkPointNPCData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeMarkPointNPCData.ProtoReflect.Descriptor instead.
func (*HomeMarkPointNPCData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{145}
}

func (x *HomeMarkPointNPCData) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *HomeMarkPointNPCData) GetCostumeId() uint32 {
	if x != nil {
		return x.CostumeId
	}
	return 0
}

type HomeMarkPointSuiteData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuiteId uint32 `protobuf:"varint,1,opt,name=suite_id,json=suiteId,proto3" json:"suite_id,omitempty"`
}

func (x *HomeMarkPointSuiteData) Reset() {
	*x = HomeMarkPointSuiteData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeMarkPointSuiteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeMarkPointSuiteData) ProtoMessage() {}

func (x *HomeMarkPointSuiteData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeMarkPointSuiteData.ProtoReflect.Descriptor instead.
func (*HomeMarkPointSuiteData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{146}
}

func (x *HomeMarkPointSuiteData) GetSuiteId() uint32 {
	if x != nil {
		return x.SuiteId
	}
	return 0
}

type HomeMarkPointFurnitureData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid          uint32  `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	FurnitureId   uint32  `protobuf:"varint,2,opt,name=furniture_id,json=furnitureId,proto3" json:"furniture_id,omitempty"`
	FurnitureType uint32  `protobuf:"varint,3,opt,name=furniture_type,json=furnitureType,proto3" json:"furniture_type,omitempty"`
	Pos           *Vector `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
	// Types that are assignable to Extra:
	//
	//	*HomeMarkPointFurnitureData_NpcData
	//	*HomeMarkPointFurnitureData_SuiteData
	Extra isHomeMarkPointFurnitureData_Extra `protobuf_oneof:"extra"`
}

func (x *HomeMarkPointFurnitureData) Reset() {
	*x = HomeMarkPointFurnitureData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeMarkPointFurnitureData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeMarkPointFurnitureData) ProtoMessage() {}

func (x *HomeMarkPointFurnitureData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeMarkPointFurnitureData.ProtoReflect.Descriptor instead.
func (*HomeMarkPointFurnitureData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{147}
}

func (x *HomeMarkPointFurnitureData) GetGuid() uint32 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *HomeMarkPointFurnitureData) GetFurnitureId() uint32 {
	if x != nil {
		return x.FurnitureId
	}
	return 0
}

func (x *HomeMarkPointFurnitureData) GetFurnitureType() uint32 {
	if x != nil {
		return x.FurnitureType
	}
	return 0
}

func (x *HomeMarkPointFurnitureData) GetPos() *Vector {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (m *HomeMarkPointFurnitureData) GetExtra() isHomeMarkPointFurnitureData_Extra {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (x *HomeMarkPointFurnitureData) GetNpcData() *HomeMarkPointNPCData {
	if x, ok := x.GetExtra().(*HomeMarkPointFurnitureData_NpcData); ok {
		return x.NpcData
	}
	return nil
}

func (x *HomeMarkPointFurnitureData) GetSuiteData() *HomeMarkPointSuiteData {
	if x, ok := x.GetExtra().(*HomeMarkPointFurnitureData_SuiteData); ok {
		return x.SuiteData
	}
	return nil
}

type isHomeMarkPointFurnitureData_Extra interface {
	isHomeMarkPointFurnitureData_Extra()
}

type HomeMarkPointFurnitureData_NpcData struct {
	NpcData *HomeMarkPointNPCData `protobuf:"bytes,6,opt,name=npc_data,json=npcData,proto3,oneof"`
}

type HomeMarkPointFurnitureData_SuiteData struct {
	SuiteData *HomeMarkPointSuiteData `protobuf:"bytes,7,opt,name=suite_data,json=suiteData,proto3,oneof"`
}

func (*HomeMarkPointFurnitureData_NpcData) isHomeMarkPointFurnitureData_Extra() {}

func (*HomeMarkPointFurnitureData_SuiteData) isHomeMarkPointFurnitureData_Extra() {}

type MapAreaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapAreaId uint32 `protobuf:"varint,1,opt,name=map_area_id,json=mapAreaId,proto3" json:"map_area_id,omitempty"`
	IsOpen    bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *MapAreaInfo) Reset() {
	*x = MapAreaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapAreaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapAreaInfo) ProtoMessage() {}

func (x *MapAreaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapAreaInfo.ProtoReflect.Descriptor instead.
func (*MapAreaInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{148}
}

func (x *MapAreaInfo) GetMapAreaId() uint32 {
	if x != nil {
		return x.MapAreaId
	}
	return 0
}

func (x *MapAreaInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type HomeFurnitureArrangementMuipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FurnitureId uint32  `protobuf:"varint,1,opt,name=furniture_id,json=furnitureId,proto3" json:"furniture_id,omitempty"`
	SpawnPos    *Vector `protobuf:"bytes,2,opt,name=spawn_pos,json=spawnPos,proto3" json:"spawn_pos,omitempty"`
	SpawnRot    *Vector `protobuf:"bytes,3,opt,name=spawn_rot,json=spawnRot,proto3" json:"spawn_rot,omitempty"`
}

func (x *HomeFurnitureArrangementMuipData) Reset() {
	*x = HomeFurnitureArrangementMuipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeFurnitureArrangementMuipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeFurnitureArrangementMuipData) ProtoMessage() {}

func (x *HomeFurnitureArrangementMuipData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeFurnitureArrangementMuipData.ProtoReflect.Descriptor instead.
func (*HomeFurnitureArrangementMuipData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{149}
}

func (x *HomeFurnitureArrangementMuipData) GetFurnitureId() uint32 {
	if x != nil {
		return x.FurnitureId
	}
	return 0
}

func (x *HomeFurnitureArrangementMuipData) GetSpawnPos() *Vector {
	if x != nil {
		return x.SpawnPos
	}
	return nil
}

func (x *HomeFurnitureArrangementMuipData) GetSpawnRot() *Vector {
	if x != nil {
		return x.SpawnRot
	}
	return nil
}

type HomeBlockArrangementMuipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId           uint32                              `protobuf:"varint,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	FurnitureDataList []*HomeFurnitureArrangementMuipData `protobuf:"bytes,2,rep,name=furniture_data_list,json=furnitureDataList,proto3" json:"furniture_data_list,omitempty"`
}

func (x *HomeBlockArrangementMuipData) Reset() {
	*x = HomeBlockArrangementMuipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeBlockArrangementMuipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeBlockArrangementMuipData) ProtoMessage() {}

func (x *HomeBlockArrangementMuipData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeBlockArrangementMuipData.ProtoReflect.Descriptor instead.
func (*HomeBlockArrangementMuipData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{150}
}

func (x *HomeBlockArrangementMuipData) GetBlockId() uint32 {
	if x != nil {
		return x.BlockId
	}
	return 0
}

func (x *HomeBlockArrangementMuipData) GetFurnitureDataList() []*HomeFurnitureArrangementMuipData {
	if x != nil {
		return x.FurnitureDataList
	}
	return nil
}

type HomeSceneArrangementMuipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleId      uint32                          `protobuf:"varint,1,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	SceneId       uint32                          `protobuf:"varint,2,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	IsRoom        bool                            `protobuf:"varint,3,opt,name=is_room,json=isRoom,proto3" json:"is_room,omitempty"`
	BlockDataList []*HomeBlockArrangementMuipData `protobuf:"bytes,4,rep,name=block_data_list,json=blockDataList,proto3" json:"block_data_list,omitempty"`
}

func (x *HomeSceneArrangementMuipData) Reset() {
	*x = HomeSceneArrangementMuipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeSceneArrangementMuipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeSceneArrangementMuipData) ProtoMessage() {}

func (x *HomeSceneArrangementMuipData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeSceneArrangementMuipData.ProtoReflect.Descriptor instead.
func (*HomeSceneArrangementMuipData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{151}
}

func (x *HomeSceneArrangementMuipData) GetModuleId() uint32 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

func (x *HomeSceneArrangementMuipData) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *HomeSceneArrangementMuipData) GetIsRoom() bool {
	if x != nil {
		return x.IsRoom
	}
	return false
}

func (x *HomeSceneArrangementMuipData) GetBlockDataList() []*HomeBlockArrangementMuipData {
	if x != nil {
		return x.BlockDataList
	}
	return nil
}

type CustomDungeonBattleRecordMuipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonGuid uint64 `protobuf:"varint,1,opt,name=dungeon_guid,json=dungeonGuid,proto3" json:"dungeon_guid,omitempty"`
	MinCostTime uint32 `protobuf:"varint,2,opt,name=min_cost_time,json=minCostTime,proto3" json:"min_cost_time,omitempty"`
}

func (x *CustomDungeonBattleRecordMuipData) Reset() {
	*x = CustomDungeonBattleRecordMuipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDungeonBattleRecordMuipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDungeonBattleRecordMuipData) ProtoMessage() {}

func (x *CustomDungeonBattleRecordMuipData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDungeonBattleRecordMuipData.ProtoReflect.Descriptor instead.
func (*CustomDungeonBattleRecordMuipData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{152}
}

func (x *CustomDungeonBattleRecordMuipData) GetDungeonGuid() uint64 {
	if x != nil {
		return x.DungeonGuid
	}
	return 0
}

func (x *CustomDungeonBattleRecordMuipData) GetMinCostTime() uint32 {
	if x != nil {
		return x.MinCostTime
	}
	return 0
}

type PlayerCustomDungeonMuipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                uint32                               `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	PublishDungeonList []uint64                             `protobuf:"varint,2,rep,packed,name=publish_dungeon_list,json=publishDungeonList,proto3" json:"publish_dungeon_list,omitempty"`
	StoreDungeonList   []uint64                             `protobuf:"varint,3,rep,packed,name=store_dungeon_list,json=storeDungeonList,proto3" json:"store_dungeon_list,omitempty"`
	BattleRecordList   []*CustomDungeonBattleRecordMuipData `protobuf:"bytes,4,rep,name=battle_record_list,json=battleRecordList,proto3" json:"battle_record_list,omitempty"`
}

func (x *PlayerCustomDungeonMuipData) Reset() {
	*x = PlayerCustomDungeonMuipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerCustomDungeonMuipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerCustomDungeonMuipData) ProtoMessage() {}

func (x *PlayerCustomDungeonMuipData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerCustomDungeonMuipData.ProtoReflect.Descriptor instead.
func (*PlayerCustomDungeonMuipData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{153}
}

func (x *PlayerCustomDungeonMuipData) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlayerCustomDungeonMuipData) GetPublishDungeonList() []uint64 {
	if x != nil {
		return x.PublishDungeonList
	}
	return nil
}

func (x *PlayerCustomDungeonMuipData) GetStoreDungeonList() []uint64 {
	if x != nil {
		return x.StoreDungeonList
	}
	return nil
}

func (x *PlayerCustomDungeonMuipData) GetBattleRecordList() []*CustomDungeonBattleRecordMuipData {
	if x != nil {
		return x.BattleRecordList
	}
	return nil
}

type CustomDungeonSettingMuipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsArriveFinish bool   `protobuf:"varint,1,opt,name=is_arrive_finish,json=isArriveFinish,proto3" json:"is_arrive_finish,omitempty"`
	CoinLimit      uint32 `protobuf:"varint,2,opt,name=coin_limit,json=coinLimit,proto3" json:"coin_limit,omitempty"`
	TimeLimit      uint32 `protobuf:"varint,3,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`
	IsForbidSkill  bool   `protobuf:"varint,4,opt,name=is_forbid_skill,json=isForbidSkill,proto3" json:"is_forbid_skill,omitempty"`
	LifeNum        uint32 `protobuf:"varint,5,opt,name=life_num,json=lifeNum,proto3" json:"life_num,omitempty"`
}

func (x *CustomDungeonSettingMuipData) Reset() {
	*x = CustomDungeonSettingMuipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDungeonSettingMuipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDungeonSettingMuipData) ProtoMessage() {}

func (x *CustomDungeonSettingMuipData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDungeonSettingMuipData.ProtoReflect.Descriptor instead.
func (*CustomDungeonSettingMuipData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{154}
}

func (x *CustomDungeonSettingMuipData) GetIsArriveFinish() bool {
	if x != nil {
		return x.IsArriveFinish
	}
	return false
}

func (x *CustomDungeonSettingMuipData) GetCoinLimit() uint32 {
	if x != nil {
		return x.CoinLimit
	}
	return 0
}

func (x *CustomDungeonSettingMuipData) GetTimeLimit() uint32 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *CustomDungeonSettingMuipData) GetIsForbidSkill() bool {
	if x != nil {
		return x.IsForbidSkill
	}
	return false
}

func (x *CustomDungeonSettingMuipData) GetLifeNum() uint32 {
	if x != nil {
		return x.LifeNum
	}
	return 0
}

type CustomDungeonAbstractMuipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstPublishTime   uint32            `protobuf:"varint,1,opt,name=first_publish_time,json=firstPublishTime,proto3" json:"first_publish_time,omitempty"`
	LastPublishTime    uint32            `protobuf:"varint,2,opt,name=last_publish_time,json=lastPublishTime,proto3" json:"last_publish_time,omitempty"`
	BrickStatisticsMap map[uint32]uint32 `protobuf:"bytes,3,rep,name=brick_statistics_map,json=brickStatisticsMap,proto3" json:"brick_statistics_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *CustomDungeonAbstractMuipData) Reset() {
	*x = CustomDungeonAbstractMuipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDungeonAbstractMuipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDungeonAbstractMuipData) ProtoMessage() {}

func (x *CustomDungeonAbstractMuipData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDungeonAbstractMuipData.ProtoReflect.Descriptor instead.
func (*CustomDungeonAbstractMuipData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{155}
}

func (x *CustomDungeonAbstractMuipData) GetFirstPublishTime() uint32 {
	if x != nil {
		return x.FirstPublishTime
	}
	return 0
}

func (x *CustomDungeonAbstractMuipData) GetLastPublishTime() uint32 {
	if x != nil {
		return x.LastPublishTime
	}
	return 0
}

func (x *CustomDungeonAbstractMuipData) GetBrickStatisticsMap() map[uint32]uint32 {
	if x != nil {
		return x.BrickStatisticsMap
	}
	return nil
}

type CustomDungeonSocialMuipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayNum  uint32 `protobuf:"varint,1,opt,name=play_num,json=playNum,proto3" json:"play_num,omitempty"`
	LikeNum  uint32 `protobuf:"varint,2,opt,name=like_num,json=likeNum,proto3" json:"like_num,omitempty"`
	StoreNum uint32 `protobuf:"varint,3,opt,name=store_num,json=storeNum,proto3" json:"store_num,omitempty"`
	WinNum   uint32 `protobuf:"varint,4,opt,name=win_num,json=winNum,proto3" json:"win_num,omitempty"`
}

func (x *CustomDungeonSocialMuipData) Reset() {
	*x = CustomDungeonSocialMuipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDungeonSocialMuipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDungeonSocialMuipData) ProtoMessage() {}

func (x *CustomDungeonSocialMuipData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDungeonSocialMuipData.ProtoReflect.Descriptor instead.
func (*CustomDungeonSocialMuipData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{156}
}

func (x *CustomDungeonSocialMuipData) GetPlayNum() uint32 {
	if x != nil {
		return x.PlayNum
	}
	return 0
}

func (x *CustomDungeonSocialMuipData) GetLikeNum() uint32 {
	if x != nil {
		return x.LikeNum
	}
	return 0
}

func (x *CustomDungeonSocialMuipData) GetStoreNum() uint32 {
	if x != nil {
		return x.StoreNum
	}
	return 0
}

func (x *CustomDungeonSocialMuipData) GetWinNum() uint32 {
	if x != nil {
		return x.WinNum
	}
	return 0
}

type CustomDungeonBriefMuipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonGuid     uint64                         `protobuf:"varint,1,opt,name=dungeon_guid,json=dungeonGuid,proto3" json:"dungeon_guid,omitempty"`
	DungeonId       uint32                         `protobuf:"varint,2,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	CreatorNickname string                         `protobuf:"bytes,3,opt,name=creator_nickname,json=creatorNickname,proto3" json:"creator_nickname,omitempty"`
	TagList         []uint32                       `protobuf:"varint,4,rep,packed,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty"`
	Setting         *CustomDungeonSettingMuipData  `protobuf:"bytes,5,opt,name=setting,proto3" json:"setting,omitempty"`
	Abstract        *CustomDungeonAbstractMuipData `protobuf:"bytes,6,opt,name=abstract,proto3" json:"abstract,omitempty"`
	Social          *CustomDungeonSocialMuipData   `protobuf:"bytes,7,opt,name=social,proto3" json:"social,omitempty"`
}

func (x *CustomDungeonBriefMuipData) Reset() {
	*x = CustomDungeonBriefMuipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDungeonBriefMuipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDungeonBriefMuipData) ProtoMessage() {}

func (x *CustomDungeonBriefMuipData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDungeonBriefMuipData.ProtoReflect.Descriptor instead.
func (*CustomDungeonBriefMuipData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{157}
}

func (x *CustomDungeonBriefMuipData) GetDungeonGuid() uint64 {
	if x != nil {
		return x.DungeonGuid
	}
	return 0
}

func (x *CustomDungeonBriefMuipData) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *CustomDungeonBriefMuipData) GetCreatorNickname() string {
	if x != nil {
		return x.CreatorNickname
	}
	return ""
}

func (x *CustomDungeonBriefMuipData) GetTagList() []uint32 {
	if x != nil {
		return x.TagList
	}
	return nil
}

func (x *CustomDungeonBriefMuipData) GetSetting() *CustomDungeonSettingMuipData {
	if x != nil {
		return x.Setting
	}
	return nil
}

func (x *CustomDungeonBriefMuipData) GetAbstract() *CustomDungeonAbstractMuipData {
	if x != nil {
		return x.Abstract
	}
	return nil
}

func (x *CustomDungeonBriefMuipData) GetSocial() *CustomDungeonSocialMuipData {
	if x != nil {
		return x.Social
	}
	return nil
}

type CustomDungeonBatchBriefMuipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BriefList []*CustomDungeonBriefMuipData `protobuf:"bytes,1,rep,name=brief_list,json=briefList,proto3" json:"brief_list,omitempty"`
}

func (x *CustomDungeonBatchBriefMuipData) Reset() {
	*x = CustomDungeonBatchBriefMuipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDungeonBatchBriefMuipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDungeonBatchBriefMuipData) ProtoMessage() {}

func (x *CustomDungeonBatchBriefMuipData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDungeonBatchBriefMuipData.ProtoReflect.Descriptor instead.
func (*CustomDungeonBatchBriefMuipData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{158}
}

func (x *CustomDungeonBatchBriefMuipData) GetBriefList() []*CustomDungeonBriefMuipData {
	if x != nil {
		return x.BriefList
	}
	return nil
}

type HomeBlueprintBriefMuipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareCode   string `protobuf:"bytes,1,opt,name=share_code,json=shareCode,proto3" json:"share_code,omitempty"`
	OwnerUid    uint32 `protobuf:"varint,2,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
	ModuleId    uint32 `protobuf:"varint,3,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	SceneId     uint32 `protobuf:"varint,4,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	BlockId     uint32 `protobuf:"varint,5,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	IsAllowCopy bool   `protobuf:"varint,6,opt,name=is_allow_copy,json=isAllowCopy,proto3" json:"is_allow_copy,omitempty"`
	CreateTime  uint32 `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *HomeBlueprintBriefMuipData) Reset() {
	*x = HomeBlueprintBriefMuipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeBlueprintBriefMuipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeBlueprintBriefMuipData) ProtoMessage() {}

func (x *HomeBlueprintBriefMuipData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeBlueprintBriefMuipData.ProtoReflect.Descriptor instead.
func (*HomeBlueprintBriefMuipData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{159}
}

func (x *HomeBlueprintBriefMuipData) GetShareCode() string {
	if x != nil {
		return x.ShareCode
	}
	return ""
}

func (x *HomeBlueprintBriefMuipData) GetOwnerUid() uint32 {
	if x != nil {
		return x.OwnerUid
	}
	return 0
}

func (x *HomeBlueprintBriefMuipData) GetModuleId() uint32 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

func (x *HomeBlueprintBriefMuipData) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *HomeBlueprintBriefMuipData) GetBlockId() uint32 {
	if x != nil {
		return x.BlockId
	}
	return 0
}

func (x *HomeBlueprintBriefMuipData) GetIsAllowCopy() bool {
	if x != nil {
		return x.IsAllowCopy
	}
	return false
}

func (x *HomeBlueprintBriefMuipData) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type HomeBlueprintBatchBriefMuipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BriefList             []*HomeBlueprintBriefMuipData `protobuf:"bytes,1,rep,name=brief_list,json=briefList,proto3" json:"brief_list,omitempty"`
	NotExistShareCodeList []string                      `protobuf:"bytes,2,rep,name=not_exist_share_code_list,json=notExistShareCodeList,proto3" json:"not_exist_share_code_list,omitempty"`
}

func (x *HomeBlueprintBatchBriefMuipData) Reset() {
	*x = HomeBlueprintBatchBriefMuipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeBlueprintBatchBriefMuipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeBlueprintBatchBriefMuipData) ProtoMessage() {}

func (x *HomeBlueprintBatchBriefMuipData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeBlueprintBatchBriefMuipData.ProtoReflect.Descriptor instead.
func (*HomeBlueprintBatchBriefMuipData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{160}
}

func (x *HomeBlueprintBatchBriefMuipData) GetBriefList() []*HomeBlueprintBriefMuipData {
	if x != nil {
		return x.BriefList
	}
	return nil
}

func (x *HomeBlueprintBatchBriefMuipData) GetNotExistShareCodeList() []string {
	if x != nil {
		return x.NotExistShareCodeList
	}
	return nil
}

type ContentAuditInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen      bool       `protobuf:"varint,1,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	Content     string     `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	SubmitCount uint32     `protobuf:"varint,3,opt,name=submit_count,json=submitCount,proto3" json:"submit_count,omitempty"`
	AuditState  AuditState `protobuf:"varint,4,opt,name=audit_state,json=auditState,proto3,enum=proto.AuditState" json:"audit_state,omitempty"`
	SubmitLimit uint32     `protobuf:"varint,5,opt,name=submit_limit,json=submitLimit,proto3" json:"submit_limit,omitempty"`
}

func (x *ContentAuditInfo) Reset() {
	*x = ContentAuditInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentAuditInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentAuditInfo) ProtoMessage() {}

func (x *ContentAuditInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentAuditInfo.ProtoReflect.Descriptor instead.
func (*ContentAuditInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{161}
}

func (x *ContentAuditInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *ContentAuditInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ContentAuditInfo) GetSubmitCount() uint32 {
	if x != nil {
		return x.SubmitCount
	}
	return 0
}

func (x *ContentAuditInfo) GetAuditState() AuditState {
	if x != nil {
		return x.AuditState
	}
	return AuditState_AUDIT_NONE
}

func (x *ContentAuditInfo) GetSubmitLimit() uint32 {
	if x != nil {
		return x.SubmitLimit
	}
	return 0
}

type ContentAuditData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Content      string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	AutoPassTime uint32 `protobuf:"varint,3,opt,name=auto_pass_time,json=autoPassTime,proto3" json:"auto_pass_time,omitempty"`
}

func (x *ContentAuditData) Reset() {
	*x = ContentAuditData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentAuditData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentAuditData) ProtoMessage() {}

func (x *ContentAuditData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentAuditData.ProtoReflect.Descriptor instead.
func (*ContentAuditData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{162}
}

func (x *ContentAuditData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ContentAuditData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ContentAuditData) GetAutoPassTime() uint32 {
	if x != nil {
		return x.AutoPassTime
	}
	return 0
}

type ContentAuditField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentList []*ContentAuditData `protobuf:"bytes,1,rep,name=segment_list,json=segmentList,proto3" json:"segment_list,omitempty"`
	Name        string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ContentAuditField) Reset() {
	*x = ContentAuditField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentAuditField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentAuditField) ProtoMessage() {}

func (x *ContentAuditField) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentAuditField.ProtoReflect.Descriptor instead.
func (*ContentAuditField) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{163}
}

func (x *ContentAuditField) GetSegmentList() []*ContentAuditData {
	if x != nil {
		return x.SegmentList
	}
	return nil
}

func (x *ContentAuditField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ContentAuditAuxiliaryField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ContentAuditAuxiliaryField) Reset() {
	*x = ContentAuditAuxiliaryField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentAuditAuxiliaryField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentAuditAuxiliaryField) ProtoMessage() {}

func (x *ContentAuditAuxiliaryField) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentAuditAuxiliaryField.ProtoReflect.Descriptor instead.
func (*ContentAuditAuxiliaryField) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{164}
}

func (x *ContentAuditAuxiliaryField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContentAuditAuxiliaryField) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type NicknameSignatureAuditData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aid            string                        `protobuf:"bytes,1,opt,name=aid,proto3" json:"aid,omitempty"`
	EntityId       string                        `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Lang           string                        `protobuf:"bytes,3,opt,name=lang,proto3" json:"lang,omitempty"`
	QueueKey       string                        `protobuf:"bytes,4,opt,name=queue_key,json=queueKey,proto3" json:"queue_key,omitempty"`
	Region         string                        `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	Uid            uint32                        `protobuf:"varint,6,opt,name=uid,proto3" json:"uid,omitempty"`
	AuditFieldList []*ContentAuditField          `protobuf:"bytes,7,rep,name=audit_field_list,json=auditFieldList,proto3" json:"audit_field_list,omitempty"`
	AuxFieldList   []*ContentAuditAuxiliaryField `protobuf:"bytes,8,rep,name=aux_field_list,json=auxFieldList,proto3" json:"aux_field_list,omitempty"`
}

func (x *NicknameSignatureAuditData) Reset() {
	*x = NicknameSignatureAuditData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NicknameSignatureAuditData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NicknameSignatureAuditData) ProtoMessage() {}

func (x *NicknameSignatureAuditData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NicknameSignatureAuditData.ProtoReflect.Descriptor instead.
func (*NicknameSignatureAuditData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{165}
}

func (x *NicknameSignatureAuditData) GetAid() string {
	if x != nil {
		return x.Aid
	}
	return ""
}

func (x *NicknameSignatureAuditData) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *NicknameSignatureAuditData) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *NicknameSignatureAuditData) GetQueueKey() string {
	if x != nil {
		return x.QueueKey
	}
	return ""
}

func (x *NicknameSignatureAuditData) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *NicknameSignatureAuditData) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *NicknameSignatureAuditData) GetAuditFieldList() []*ContentAuditField {
	if x != nil {
		return x.AuditFieldList
	}
	return nil
}

func (x *NicknameSignatureAuditData) GetAuxFieldList() []*ContentAuditAuxiliaryField {
	if x != nil {
		return x.AuxFieldList
	}
	return nil
}

type AvatarRenameAuditContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Content      string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	AutoFailTime uint32 `protobuf:"varint,3,opt,name=auto_fail_time,json=autoFailTime,proto3" json:"auto_fail_time,omitempty"`
}

func (x *AvatarRenameAuditContent) Reset() {
	*x = AvatarRenameAuditContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarRenameAuditContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarRenameAuditContent) ProtoMessage() {}

func (x *AvatarRenameAuditContent) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarRenameAuditContent.ProtoReflect.Descriptor instead.
func (*AvatarRenameAuditContent) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{166}
}

func (x *AvatarRenameAuditContent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AvatarRenameAuditContent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AvatarRenameAuditContent) GetAutoFailTime() uint32 {
	if x != nil {
		return x.AutoFailTime
	}
	return 0
}

type AvatarRenameContentAuditField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentList []*AvatarRenameAuditContent `protobuf:"bytes,1,rep,name=segment_list,json=segmentList,proto3" json:"segment_list,omitempty"`
	Name        string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AvatarRenameContentAuditField) Reset() {
	*x = AvatarRenameContentAuditField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarRenameContentAuditField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarRenameContentAuditField) ProtoMessage() {}

func (x *AvatarRenameContentAuditField) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarRenameContentAuditField.ProtoReflect.Descriptor instead.
func (*AvatarRenameContentAuditField) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{167}
}

func (x *AvatarRenameContentAuditField) GetSegmentList() []*AvatarRenameAuditContent {
	if x != nil {
		return x.SegmentList
	}
	return nil
}

func (x *AvatarRenameContentAuditField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AvatarRenameAuditData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aid            string                           `protobuf:"bytes,1,opt,name=aid,proto3" json:"aid,omitempty"`
	EntityId       string                           `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Lang           string                           `protobuf:"bytes,3,opt,name=lang,proto3" json:"lang,omitempty"`
	QueueKey       string                           `protobuf:"bytes,4,opt,name=queue_key,json=queueKey,proto3" json:"queue_key,omitempty"`
	Region         string                           `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	Uid            uint32                           `protobuf:"varint,6,opt,name=uid,proto3" json:"uid,omitempty"`
	AuditFieldList []*AvatarRenameContentAuditField `protobuf:"bytes,7,rep,name=audit_field_list,json=auditFieldList,proto3" json:"audit_field_list,omitempty"`
	AuxFieldList   []*ContentAuditAuxiliaryField    `protobuf:"bytes,8,rep,name=aux_field_list,json=auxFieldList,proto3" json:"aux_field_list,omitempty"`
}

func (x *AvatarRenameAuditData) Reset() {
	*x = AvatarRenameAuditData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarRenameAuditData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarRenameAuditData) ProtoMessage() {}

func (x *AvatarRenameAuditData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarRenameAuditData.ProtoReflect.Descriptor instead.
func (*AvatarRenameAuditData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{168}
}

func (x *AvatarRenameAuditData) GetAid() string {
	if x != nil {
		return x.Aid
	}
	return ""
}

func (x *AvatarRenameAuditData) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *AvatarRenameAuditData) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *AvatarRenameAuditData) GetQueueKey() string {
	if x != nil {
		return x.QueueKey
	}
	return ""
}

func (x *AvatarRenameAuditData) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AvatarRenameAuditData) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AvatarRenameAuditData) GetAuditFieldList() []*AvatarRenameContentAuditField {
	if x != nil {
		return x.AuditFieldList
	}
	return nil
}

func (x *AvatarRenameAuditData) GetAuxFieldList() []*ContentAuditAuxiliaryField {
	if x != nil {
		return x.AuxFieldList
	}
	return nil
}

type ActivityDungeonAvatar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId  uint32 `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	IsTrial   bool   `protobuf:"varint,2,opt,name=is_trial,json=isTrial,proto3" json:"is_trial,omitempty"`
	CostumeId uint32 `protobuf:"varint,3,opt,name=costume_id,json=costumeId,proto3" json:"costume_id,omitempty"`
}

func (x *ActivityDungeonAvatar) Reset() {
	*x = ActivityDungeonAvatar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDungeonAvatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDungeonAvatar) ProtoMessage() {}

func (x *ActivityDungeonAvatar) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDungeonAvatar.ProtoReflect.Descriptor instead.
func (*ActivityDungeonAvatar) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{169}
}

func (x *ActivityDungeonAvatar) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *ActivityDungeonAvatar) GetIsTrial() bool {
	if x != nil {
		return x.IsTrial
	}
	return false
}

func (x *ActivityDungeonAvatar) GetCostumeId() uint32 {
	if x != nil {
		return x.CostumeId
	}
	return 0
}

type GCGChallengeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId   uint32   `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	ChallengeType uint32   `protobuf:"varint,2,opt,name=challenge_type,json=challengeType,proto3" json:"challenge_type,omitempty"`
	ParamList     []uint32 `protobuf:"varint,3,rep,packed,name=param_list,json=paramList,proto3" json:"param_list,omitempty"`
	Progress      uint32   `protobuf:"varint,4,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *GCGChallengeData) Reset() {
	*x = GCGChallengeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGChallengeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGChallengeData) ProtoMessage() {}

func (x *GCGChallengeData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGChallengeData.ProtoReflect.Descriptor instead.
func (*GCGChallengeData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{170}
}

func (x *GCGChallengeData) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

func (x *GCGChallengeData) GetChallengeType() uint32 {
	if x != nil {
		return x.ChallengeType
	}
	return 0
}

func (x *GCGChallengeData) GetParamList() []uint32 {
	if x != nil {
		return x.ParamList
	}
	return nil
}

func (x *GCGChallengeData) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type GCGDuelExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardIdList                []uint32            `protobuf:"varint,1,rep,packed,name=card_id_list,json=cardIdList,proto3" json:"card_id_list,omitempty"`
	FieldId                   uint32              `protobuf:"varint,2,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	CardBackId                uint32              `protobuf:"varint,3,opt,name=card_back_id,json=cardBackId,proto3" json:"card_back_id,omitempty"`
	CardFaceMap               map[uint32]uint32   `protobuf:"bytes,4,rep,name=card_face_map,json=cardFaceMap,proto3" json:"card_face_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ChallengeList             []*GCGChallengeData `protobuf:"bytes,5,rep,name=challenge_list,json=challengeList,proto3" json:"challenge_list,omitempty"`
	Score                     uint32              `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
	IsMatchAi                 bool                `protobuf:"varint,7,opt,name=is_match_ai,json=isMatchAi,proto3" json:"is_match_ai,omitempty"`
	AiDeckId                  uint32              `protobuf:"varint,8,opt,name=ai_deck_id,json=aiDeckId,proto3" json:"ai_deck_id,omitempty"`
	IsInternal                bool                `protobuf:"varint,9,opt,name=is_internal,json=isInternal,proto3" json:"is_internal,omitempty"`
	ForbidFinishChallengeList []uint32            `protobuf:"varint,10,rep,packed,name=forbid_finish_challenge_list,json=forbidFinishChallengeList,proto3" json:"forbid_finish_challenge_list,omitempty"`
	Level                     uint32              `protobuf:"varint,11,opt,name=level,proto3" json:"level,omitempty"`
	ClientVersion             uint32              `protobuf:"varint,12,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
}

func (x *GCGDuelExtra) Reset() {
	*x = GCGDuelExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDuelExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDuelExtra) ProtoMessage() {}

func (x *GCGDuelExtra) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDuelExtra.ProtoReflect.Descriptor instead.
func (*GCGDuelExtra) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{171}
}

func (x *GCGDuelExtra) GetCardIdList() []uint32 {
	if x != nil {
		return x.CardIdList
	}
	return nil
}

func (x *GCGDuelExtra) GetFieldId() uint32 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (x *GCGDuelExtra) GetCardBackId() uint32 {
	if x != nil {
		return x.CardBackId
	}
	return 0
}

func (x *GCGDuelExtra) GetCardFaceMap() map[uint32]uint32 {
	if x != nil {
		return x.CardFaceMap
	}
	return nil
}

func (x *GCGDuelExtra) GetChallengeList() []*GCGChallengeData {
	if x != nil {
		return x.ChallengeList
	}
	return nil
}

func (x *GCGDuelExtra) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GCGDuelExtra) GetIsMatchAi() bool {
	if x != nil {
		return x.IsMatchAi
	}
	return false
}

func (x *GCGDuelExtra) GetAiDeckId() uint32 {
	if x != nil {
		return x.AiDeckId
	}
	return 0
}

func (x *GCGDuelExtra) GetIsInternal() bool {
	if x != nil {
		return x.IsInternal
	}
	return false
}

func (x *GCGDuelExtra) GetForbidFinishChallengeList() []uint32 {
	if x != nil {
		return x.ForbidFinishChallengeList
	}
	return nil
}

func (x *GCGDuelExtra) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GCGDuelExtra) GetClientVersion() uint32 {
	if x != nil {
		return x.ClientVersion
	}
	return 0
}

type QueryIpRegionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *QueryIpRegionData) Reset() {
	*x = QueryIpRegionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIpRegionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIpRegionData) ProtoMessage() {}

func (x *QueryIpRegionData) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIpRegionData.ProtoReflect.Descriptor instead.
func (*QueryIpRegionData) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{172}
}

func (x *QueryIpRegionData) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type MaterialDeleteInfo_CountDownDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteTimeNumMap    map[uint32]uint32 `protobuf:"bytes,1,rep,name=delete_time_num_map,json=deleteTimeNumMap,proto3" json:"delete_time_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ConfigCountDownTime uint32            `protobuf:"varint,2,opt,name=config_count_down_time,json=configCountDownTime,proto3" json:"config_count_down_time,omitempty"`
}

func (x *MaterialDeleteInfo_CountDownDelete) Reset() {
	*x = MaterialDeleteInfo_CountDownDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialDeleteInfo_CountDownDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialDeleteInfo_CountDownDelete) ProtoMessage() {}

func (x *MaterialDeleteInfo_CountDownDelete) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialDeleteInfo_CountDownDelete.ProtoReflect.Descriptor instead.
func (*MaterialDeleteInfo_CountDownDelete) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{13, 0}
}

func (x *MaterialDeleteInfo_CountDownDelete) GetDeleteTimeNumMap() map[uint32]uint32 {
	if x != nil {
		return x.DeleteTimeNumMap
	}
	return nil
}

func (x *MaterialDeleteInfo_CountDownDelete) GetConfigCountDownTime() uint32 {
	if x != nil {
		return x.ConfigCountDownTime
	}
	return 0
}

type MaterialDeleteInfo_DateTimeDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteTime uint32 `protobuf:"varint,1,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
}

func (x *MaterialDeleteInfo_DateTimeDelete) Reset() {
	*x = MaterialDeleteInfo_DateTimeDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialDeleteInfo_DateTimeDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialDeleteInfo_DateTimeDelete) ProtoMessage() {}

func (x *MaterialDeleteInfo_DateTimeDelete) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialDeleteInfo_DateTimeDelete.ProtoReflect.Descriptor instead.
func (*MaterialDeleteInfo_DateTimeDelete) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{13, 1}
}

func (x *MaterialDeleteInfo_DateTimeDelete) GetDeleteTime() uint32 {
	if x != nil {
		return x.DeleteTime
	}
	return 0
}

type MaterialDeleteInfo_DelayWeekCountDownDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteTimeNumMap    map[uint32]uint32 `protobuf:"bytes,1,rep,name=delete_time_num_map,json=deleteTimeNumMap,proto3" json:"delete_time_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ConfigDelayWeek     uint32            `protobuf:"varint,2,opt,name=config_delay_week,json=configDelayWeek,proto3" json:"config_delay_week,omitempty"`
	ConfigCountDownTime uint32            `protobuf:"varint,3,opt,name=config_count_down_time,json=configCountDownTime,proto3" json:"config_count_down_time,omitempty"`
}

func (x *MaterialDeleteInfo_DelayWeekCountDownDelete) Reset() {
	*x = MaterialDeleteInfo_DelayWeekCountDownDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialDeleteInfo_DelayWeekCountDownDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialDeleteInfo_DelayWeekCountDownDelete) ProtoMessage() {}

func (x *MaterialDeleteInfo_DelayWeekCountDownDelete) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialDeleteInfo_DelayWeekCountDownDelete.ProtoReflect.Descriptor instead.
func (*MaterialDeleteInfo_DelayWeekCountDownDelete) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{13, 2}
}

func (x *MaterialDeleteInfo_DelayWeekCountDownDelete) GetDeleteTimeNumMap() map[uint32]uint32 {
	if x != nil {
		return x.DeleteTimeNumMap
	}
	return nil
}

func (x *MaterialDeleteInfo_DelayWeekCountDownDelete) GetConfigDelayWeek() uint32 {
	if x != nil {
		return x.ConfigDelayWeek
	}
	return 0
}

func (x *MaterialDeleteInfo_DelayWeekCountDownDelete) GetConfigCountDownTime() uint32 {
	if x != nil {
		return x.ConfigCountDownTime
	}
	return 0
}

type CreateGadgetInfo_Chest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChestDropId    uint32 `protobuf:"varint,1,opt,name=chest_drop_id,json=chestDropId,proto3" json:"chest_drop_id,omitempty"`
	IsShowCutscene bool   `protobuf:"varint,2,opt,name=is_show_cutscene,json=isShowCutscene,proto3" json:"is_show_cutscene,omitempty"`
}

func (x *CreateGadgetInfo_Chest) Reset() {
	*x = CreateGadgetInfo_Chest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGadgetInfo_Chest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGadgetInfo_Chest) ProtoMessage() {}

func (x *CreateGadgetInfo_Chest) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGadgetInfo_Chest.ProtoReflect.Descriptor instead.
func (*CreateGadgetInfo_Chest) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{104, 0}
}

func (x *CreateGadgetInfo_Chest) GetChestDropId() uint32 {
	if x != nil {
		return x.ChestDropId
	}
	return 0
}

func (x *CreateGadgetInfo_Chest) GetIsShowCutscene() bool {
	if x != nil {
		return x.IsShowCutscene
	}
	return false
}

type ShopCardProduct_ResinCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseItemList   []*ItemParam `protobuf:"bytes,1,rep,name=base_item_list,json=baseItemList,proto3" json:"base_item_list,omitempty"`
	PerDayItemList []*ItemParam `protobuf:"bytes,2,rep,name=per_day_item_list,json=perDayItemList,proto3" json:"per_day_item_list,omitempty"`
}

func (x *ShopCardProduct_ResinCard) Reset() {
	*x = ShopCardProduct_ResinCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopCardProduct_ResinCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopCardProduct_ResinCard) ProtoMessage() {}

func (x *ShopCardProduct_ResinCard) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopCardProduct_ResinCard.ProtoReflect.Descriptor instead.
func (*ShopCardProduct_ResinCard) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{135, 0}
}

func (x *ShopCardProduct_ResinCard) GetBaseItemList() []*ItemParam {
	if x != nil {
		return x.BaseItemList
	}
	return nil
}

func (x *ShopCardProduct_ResinCard) GetPerDayItemList() []*ItemParam {
	if x != nil {
		return x.PerDayItemList
	}
	return nil
}

var File_define_proto protoreflect.FileDescriptor

var file_define_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2a, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x66, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x04, 0x69, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x04, 0x69, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x04, 0x66, 0x76,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x04, 0x66, 0x76, 0x61, 0x6c,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x34, 0x0a, 0x0a, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x73, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x55, 0x72, 0x6c, 0x22, 0x85, 0x02, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x74, 0x74, 0x70, 0x52, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x43, 0x0a, 0x1e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x63, 0x22, 0x3b, 0x0a, 0x0f,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x8f, 0x01, 0x0a, 0x0e, 0x53, 0x74,
	0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x6f,
	0x70, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x22, 0xf5, 0x01, 0x0a, 0x10,
	0x52, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x0a, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x61, 0x74, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x6c, 0x6c,
	0x65, 0x74, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x62, 0x61, 0x6b, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55,
	0x72, 0x6c, 0x42, 0x61, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72,
	0x6c, 0x5f, 0x62, 0x61, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x55, 0x72, 0x6c, 0x42, 0x61, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x62,
	0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68,
	0x61, 0x6e, 0x64, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x18, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x64,
	0x35, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x64, 0x35, 0x12, 0x45, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x72,
	0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x34,
	0x0a, 0x16, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x55, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x41, 0x0a, 0x1d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x3b, 0x0a, 0x1a, 0x75,
	0x73, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x75, 0x73, 0x65, 0x47, 0x61, 0x74, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x67, 0x61, 0x74, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x67, 0x61, 0x74, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x72, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x64, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x64, 0x6b, 0x65, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x4e, 0x0a, 0x17, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x62, 0x69, 0x7a, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x42,
	0x69, 0x7a, 0x22, 0xbc, 0x03, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x32, 0x0a, 0x0b, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x1e, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x1b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x50,
	0x0a, 0x25, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x21, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x12, 0x3b, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x64, 0x70, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x64, 0x70, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a,
	0x0b, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x6f,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x22, 0x35, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x69, 0x64, 0x45, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x67,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xa9, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x6c,
	0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x50,
	0x72, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x10, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x06, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x09,
	0x61, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x2e, 0x41,
	0x66, 0x66, 0x69, 0x78, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x66,
	0x66, 0x69, 0x78, 0x4d, 0x61, 0x70, 0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x66, 0x66, 0x69, 0x78, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xd8, 0x07, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61,
	0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x4b, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x74, 0x0a, 0x1c,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x18, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x57,
	0x65, 0x65, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x1a, 0xfb, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x6e, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x43, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x31, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0xb9, 0x02, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x57, 0x65, 0x65,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x77, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x57, 0x65,
	0x65, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x43, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x5c,
	0x0a, 0x08, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x89, 0x01, 0x0a,
	0x05, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x69,
	0x71, 0x75, 0x61, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65,
	0x61, 0x70, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x42, 0x08,
	0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x21, 0x0a, 0x09, 0x46, 0x75, 0x72, 0x6e,
	0x69, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x04,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x75, 0x69,
	0x64, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x24, 0x0a, 0x05, 0x65, 0x71, 0x75, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x71, 0x75, 0x69, 0x70, 0x12, 0x30, 0x0a, 0x09, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x66,
	0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x22, 0x3a, 0x0a, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x84,
	0x01, 0x0a, 0x0a, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x75,
	0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x40, 0x0a, 0x0e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x54, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x41, 0x0a,
	0x0d, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12,
	0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x73,
	0x74, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x29, 0x0a, 0x11, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x17,
	0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x37, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52,
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1f, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x75, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x86, 0x02, 0x0a, 0x15, 0x41, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x0c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0b, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x10,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x41, 0x0a,
	0x0c, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4d, 0x61, 0x70,
	0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x22, 0xf4, 0x01, 0x0a, 0x17, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x62, 0x75, 0x66, 0x66, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x28, 0x0a, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0x6a, 0x0a, 0x12, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x13, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x82, 0x06, 0x0a, 0x16, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x17, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x65, 0x78, 0x69, 0x73, 0x74, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x1b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x19, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3b,
	0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x13, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x75, 0x72,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x62, 0x75, 0x66, 0x66,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x62, 0x75, 0x66,
	0x66, 0x55, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x75,
	0x66, 0x66, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x4d,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x10, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x5b, 0x0a,
	0x13, 0x4d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x53, 0x79, 0x6e, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2d, 0x0a, 0x0f, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x22, 0x46, 0x0a, 0x11, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x6f, 0x75, 0x74, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x68, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x68, 0x70, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xb5, 0x03, 0x0a, 0x1e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x33,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x35, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x35,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x36, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x36, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x6c,
	0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x6c, 0x31, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x65,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x6f,
	0x6f, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfa, 0x04, 0x0a, 0x16, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x6f, 0x75, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x03, 0x70, 0x6f,
	0x73, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x6f, 0x75, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x07, 0x6d, 0x6f, 0x76,
	0x65, 0x44, 0x69, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6e,
	0x69, 0x74, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x12, 0x4a, 0x0a, 0x0d, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75,
	0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x09,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74,
	0x42, 0x72, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x48, 0x69, 0x74, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x6f, 0x75, 0x74, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x53, 0x75, 0x69, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x62,
	0x72, 0x69, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x10,
	0x73, 0x70, 0x61, 0x77, 0x6e, 0x65, 0x64, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x61, 0x0a, 0x1e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x7c, 0x0a, 0x1a, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x53,
	0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x55, 0x69, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x9f, 0x08, 0x0a, 0x10, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x53, 0x6e,
	0x61, 0x70, 0x53, 0x68, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x62, 0x61,
	0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x62, 0x61,
	0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x12, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x6d, 0x62, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x6d, 0x62, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x61, 0x76, 0x65, 0x5f, 0x73, 0x75, 0x69, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x77,
	0x61, 0x76, 0x65, 0x53, 0x75, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x43, 0x0a,
	0x10, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x0e, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x62, 0x6f, 0x73, 0x73, 0x5f, 0x68, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x73, 0x73, 0x48, 0x70, 0x12, 0x64,
	0x0a, 0x1b, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x6f, 0x75, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x18, 0x62, 0x72, 0x69, 0x63,
	0x6b, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x1a, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52,
	0x17, 0x62, 0x61, 0x6c, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x75, 0x69, 0x64, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74,
	0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x55, 0x69, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x75, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x4d, 0x0a, 0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x11, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x72, 0x61, 0x77, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xca, 0x06, 0x0a, 0x0e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x03,
	0x70, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x32, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x64,
	0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32,
	0x52, 0x07, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x12,
	0x30, 0x0a, 0x14, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x62,
	0x61, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x3c, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x42, 0x61,
	0x6c, 0x6c, 0x44, 0x69, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x62,
	0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x42, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x9e, 0x01, 0x0a, 0x12, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x55, 0x4e,
	0x43, 0x48, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59,
	0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4c, 0x45, 0x10, 0x04,
	0x22, 0x8a, 0x03, 0x0a, 0x17, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x69, 0x78, 0x69,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x75,
	0x66, 0x66, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x11, 0x6d, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0f, 0x6d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x45, 0x0a, 0x12, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x5f, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x53,
	0x6e, 0x61, 0x70, 0x53, 0x68, 0x6f, 0x74, 0x52, 0x10, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75,
	0x74, 0x53, 0x6e, 0x61, 0x70, 0x53, 0x68, 0x6f, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x13,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xb9, 0x03,
	0x0a, 0x14, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x69,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x69,
	0x74, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x12,
	0x49, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x4e, 0x0a, 0x13, 0x6d, 0x69, 0x78, 0x69, 0x6e, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x4d, 0x69, 0x78, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x11, 0x6d, 0x69, 0x78, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x51, 0x0a, 0x15, 0x73, 0x67, 0x76, 0x5f, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x73, 0x67, 0x76, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x22, 0x97, 0x01, 0x0a, 0x0d, 0x41, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6d, 0x62, 0x72, 0x79, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x17, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x22, 0x5b, 0x0a, 0x13, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x44, 0x0a, 0x13, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6d, 0x62, 0x72, 0x79, 0x6f, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6d, 0x62, 0x72, 0x79, 0x6f, 0x52, 0x11, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6d, 0x62, 0x72, 0x79, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x32, 0x0a, 0x06, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x01, 0x7a, 0x22, 0x29, 0x0a, 0x0b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x22,
	0x36, 0x0a, 0x0a, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x49, 0x6e, 0x74, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x7a, 0x22, 0xc4, 0x01, 0x0a, 0x0e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0b, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x71, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xcf,
	0x02, 0x0a, 0x0a, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x1f,
	0x0a, 0x03, 0x72, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x03, 0x72, 0x6f, 0x74, 0x12,
	0x23, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x5f, 0x70, 0x6f, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x66, 0x50, 0x6f, 0x73, 0x12, 0x15, 0x0a,
	0x06, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72,
	0x65, 0x66, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x22, 0x4d, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x1f,
	0x0a, 0x03, 0x72, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x03, 0x72, 0x6f, 0x74, 0x22,
	0xc9, 0x03, 0x0a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x09, 0x61, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x41, 0x66, 0x66, 0x69, 0x78, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x61, 0x66, 0x66, 0x69, 0x78, 0x4d, 0x61, 0x70, 0x12, 0x54, 0x0a, 0x15, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3b,
	0x0a, 0x0d, 0x41, 0x66, 0x66, 0x69, 0x78, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7c, 0x0a, 0x12, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xe4, 0x01, 0x0a, 0x0a, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x55, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x42, 0x75, 0x66, 0x66, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x41, 0x64, 0x64, 0x65, 0x64,
	0x22, 0x3f, 0x0a, 0x0e, 0x43, 0x75, 0x72, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x6f,
	0x73, 0x22, 0x91, 0x02, 0x0a, 0x0f, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x78, 0x63, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x50, 0x61, 0x74, 0x68, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x35, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x14, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x50, 0x61, 0x74, 0x68, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x62, 0x61,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x61, 0x73, 0x68, 0x22, 0x81, 0x09, 0x0a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70,
	0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x77,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61,
	0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x69, 0x71,
	0x75, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x69, 0x71, 0x75,
	0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x75, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x19,
	0x69, 0x6e, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x75, 0x64, 0x5f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x16, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x75, 0x64, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x71, 0x0a, 0x1b, 0x70, 0x72,
	0x6f, 0x75, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x75, 0x64, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x75, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x3b, 0x0a,
	0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x6f, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x65,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x77, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x6c, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f,
	0x72, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62,
	0x6f, 0x72, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x75,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x73,
	0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x5f, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x72, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x65, 0x6c,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x40, 0x0a, 0x12, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a,
	0x1c, 0x50, 0x72, 0x6f, 0x75, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe1, 0x01, 0x0a, 0x0d, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x46, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x66,
	0x69, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x69,
	0x73, 0x68, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x66, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0d, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x66, 0x69, 0x73, 0x68, 0x50,
	0x6f, 0x6f, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x61, 0x64,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x68,
	0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x98, 0x01,
	0x0a, 0x10, 0x46, 0x69, 0x73, 0x68, 0x74, 0x61, 0x6e, 0x6b, 0x46, 0x69, 0x73, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x37, 0x0a, 0x18, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x66, 0x69, 0x73, 0x68, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x73, 0x68, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x66, 0x69, 0x73, 0x68, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x22, 0xbb, 0x08, 0x0a, 0x10, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x66, 0x66,
	0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x66, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x65,
	0x6c, 0x69, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x45, 0x6c,
	0x69, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x12, 0x4f,
	0x0a, 0x0e, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x70, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x70, 0x6f, 0x73, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x62, 0x6f, 0x72, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x62, 0x6f, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0c,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x61, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x61, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74,
	0x50, 0x6f, 0x73, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x33, 0x0a, 0x09,
	0x66, 0x69, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x46, 0x69, 0x73,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x47, 0x0a, 0x12, 0x66, 0x69, 0x73, 0x68, 0x74, 0x61, 0x6e, 0x6b, 0x5f, 0x66, 0x69,
	0x73, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x74, 0x61, 0x6e, 0x6b, 0x46, 0x69,
	0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x66, 0x69, 0x73, 0x68, 0x74, 0x61,
	0x6e, 0x6b, 0x46, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x75,
	0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x0c, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x4e, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x70, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x0b, 0x57, 0x6f,
	0x72, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73,
	0x5f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x22, 0x48, 0x0a, 0x0e, 0x4d,
	0x61, 0x74, 0x68, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x01, 0x77, 0x22, 0xd2, 0x04, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x70, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74,
	0x68, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x73, 0x74, 0x6f, 0x70, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x0a, 0x70, 0x6f, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x09, 0x70, 0x6f, 0x73, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x72,
	0x6f, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x68, 0x51, 0x75, 0x61, 0x74,
	0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x6f, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x4b, 0x0a, 0x14, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x6d, 0x6f, 0x76, 0x69,
	0x6e, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xfb, 0x02, 0x0a, 0x0a, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x69,
	0x76, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x68, 0x61, 0x73, 0x52, 0x65, 0x61, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x00, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x74, 0x68, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x48,
	0x01, 0x52, 0x0d, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x36, 0x0a, 0x0a, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74,
	0x68, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x09, 0x61,
	0x78, 0x69, 0x73, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x5c, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x34, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x0c, 0x4d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x22, 0x35, 0x0a, 0x0b, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x26, 0x0a, 0x0f, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x22, 0xb4, 0x02, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x61, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x32, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x50, 0x65, 0x65, 0x72, 0x49,
	0x64, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x15, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x80,
	0x01, 0x0a, 0x11, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x6d, 0x70, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x22, 0x53, 0x0a, 0x10, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x47, 0x61, 0x64, 0x67, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x5f, 0x67, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x47, 0x75, 0x65, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x75, 0x65,
	0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x70,
	0x65, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x6e,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x65, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xbd, 0x01, 0x0a, 0x1b, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x42, 0x6f, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x73, 0x69, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x69, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x22,
	0xde, 0x02, 0x0a, 0x0d, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x73, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65,
	0x73, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x75, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x55, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x69, 0x64, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x69, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x75, 0x69, 0x64, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x1a, 0x65, 0x0a, 0x13, 0x55, 0x69, 0x64,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79,
	0x42, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x73, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe8, 0x01, 0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x43, 0x68, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x73, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x55, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c,
	0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f,
	0x6d, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x12, 0x47,
	0x61, 0x64, 0x67, 0x65, 0x74, 0x43, 0x72, 0x75, 0x63, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9e, 0x02, 0x0a, 0x0e, 0x47, 0x61,
	0x64, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x63,
	0x72, 0x75, 0x63, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x64, 0x67, 0x65,
	0x74, 0x43, 0x72, 0x75, 0x63, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x0c, 0x63, 0x72, 0x75, 0x63, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0b, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x7a, 0x0a, 0x10, 0x4d, 0x70,
	0x50, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x65, 0x73, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72,
	0x65, 0x73, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x75,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x55,
	0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x17, 0x47, 0x61, 0x64, 0x67, 0x65,
	0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x72, 0x65, 0x73, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x61,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79,
	0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x09, 0x69,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x2f, 0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x0c, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x22, 0xb0, 0x01, 0x0a, 0x0e, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x55, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x0d, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22,
	0x82, 0x01, 0x0a, 0x0b, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x35, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x55, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x69,
	0x6e, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61,
	0x6d, 0x69, 0x6e, 0x61, 0x22, 0x2a, 0x0a, 0x0d, 0x45, 0x63, 0x68, 0x6f, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x49, 0x64,
	0x22, 0x55, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17,
	0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x0c, 0x46, 0x69, 0x73, 0x68, 0x50,
	0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x69, 0x73, 0x68, 0x41, 0x72,
	0x65, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f,
	0x66, 0x69, 0x73, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x74, 0x6f, 0x64, 0x61, 0x79, 0x46, 0x69, 0x73, 0x68, 0x4e, 0x75, 0x6d, 0x22, 0x7f, 0x0a, 0x14,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x6c, 0x6f, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x50, 0x0a,
	0x14, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x54, 0x72, 0x65,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x90, 0x01, 0x0a, 0x13, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x47, 0x61, 0x64,
	0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c,
	0x49, 0x64, 0x22, 0x3a, 0x0a, 0x13, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x43, 0x72, 0x6f, 0x77, 0x47,
	0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0c, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3f,
	0x0a, 0x18, 0x44, 0x65, 0x73, 0x68, 0x72, 0x65, 0x74, 0x4f, 0x62, 0x65, 0x6c, 0x69, 0x73, 0x6b,
	0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0c, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x34, 0x0a, 0x17, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x8d, 0x11, 0x0a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47,
	0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x64,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61,
	0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x62, 0x6f, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61,
	0x64, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x75, 0x74, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77,
	0x43, 0x75, 0x74, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x50, 0x65,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x2f, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x70, 0x72, 0x6f, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x75,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x64, 0x72, 0x61, 0x66, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x61, 0x64,
	0x67, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x54, 0x61, 0x6c, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x0b, 0x74, 0x72, 0x69,
	0x66, 0x6c, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x74,
	0x72, 0x69, 0x66, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3e, 0x0a, 0x0d, 0x67, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x47,
	0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x77, 0x6f, 0x72,
	0x6b, 0x74, 0x6f, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x6f, 0x70, 0x12, 0x3e, 0x0a, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47,
	0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x77, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x07, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x65, 0x5f, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x65, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x65, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x0a,
	0x62, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x73, 0x73, 0x43, 0x68,
	0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x43, 0x68, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x43, 0x68,
	0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x6d, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x47, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3a, 0x0a,
	0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0f, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0c, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x63, 0x68, 0x6f, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x09, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0b, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3b, 0x0a, 0x0e, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x0c, 0x66, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54,
	0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f,
	0x74, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61,
	0x64, 0x67, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x14,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50, 0x0a, 0x15, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b,
	0x65, 0x5f, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75,
	0x65, 0x6c, 0x69, 0x6b, 0x65, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x13, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x47, 0x61, 0x64, 0x67,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x16, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x63, 0x72, 0x6f, 0x77, 0x5f, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x72, 0x6f, 0x77, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x43, 0x72, 0x6f, 0x77, 0x47,
	0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x60, 0x0a, 0x1b, 0x64, 0x65, 0x73,
	0x68, 0x72, 0x65, 0x74, 0x5f, 0x6f, 0x62, 0x65, 0x6c, 0x69, 0x73, 0x6b, 0x5f, 0x67, 0x61, 0x64,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x68, 0x72, 0x65, 0x74, 0x4f, 0x62,
	0x65, 0x6c, 0x69, 0x73, 0x6b, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x18, 0x64, 0x65, 0x73, 0x68, 0x72, 0x65, 0x74, 0x4f, 0x62, 0x65, 0x6c, 0x69, 0x73,
	0x6b, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5d, 0x0a, 0x1a, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x17, 0x63, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x1a, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x09,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x00, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x08, 0x62,
	0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x61,
	0x56, 0x61, 0x6c, 0x22, 0x5f, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x6f, 0x72, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0xeb, 0x04, 0x0a, 0x11, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x41, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x61, 0x69, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x41, 0x69, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x08, 0x62, 0x6f, 0x72, 0x6e,
	0x5f, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x62, 0x6f, 0x72, 0x6e, 0x50,
	0x6f, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x64, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x69, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x35,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x61, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0d, 0x61, 0x69, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x41, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x69, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x69, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x74, 0x4d, 0x61, 0x70, 0x12, 0x5a, 0x0a, 0x12, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x63, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x41, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x64, 0x4d, 0x61, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x5f, 0x74, 0x61, 0x63, 0x74, 0x69, 0x63, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x75, 0x72, 0x54, 0x61, 0x63, 0x74, 0x69, 0x63, 0x1a,
	0x3d, 0x0a, 0x0f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e,
	0x0a, 0x10, 0x41, 0x69, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42,
	0x0a, 0x14, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x64, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x8d, 0x02, 0x0a, 0x19, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x63, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x1a, 0x43, 0x0a,
	0x15, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x4f, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x69, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x4b, 0x0a, 0x0d, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x81, 0x01, 0x0a, 0x1e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x61, 0x69, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0d,
	0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x22, 0x6b, 0x0a, 0x15, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a,
	0x11, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6a, 0x73, 0x6f, 0x6e, 0x43, 0x6c,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x49,
	0x64, 0x22, 0x5a, 0x0a, 0x15, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x15, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x13, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x41,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x03,
	0x0a, 0x13, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x15, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65,
	0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x07, 0x61,
	0x69, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x41, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x61, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28,
	0x0a, 0x08, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x07, 0x62, 0x6f, 0x72, 0x6e, 0x50, 0x6f, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x93, 0x08, 0x0a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0b,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x0f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0d, 0x66,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x69, 0x66, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x69, 0x72, 0x52, 0x10,
	0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x71,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x12, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x5d, 0x0a, 0x1c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x19, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x4e, 0x0a, 0x15, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x10,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x42, 0x75, 0x66, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x6d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x03, 0x6e, 0x70, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4e, 0x70, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x70, 0x63, 0x12, 0x30, 0x0a, 0x06, 0x67, 0x61, 0x64,
	0x67, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x06, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xd2, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x09, 0x62, 0x6f,
	0x72, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x72, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x62, 0x6f, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33,
	0x0a, 0x05, 0x63, 0x68, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x64, 0x67,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x74, 0x52, 0x05, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x1a, 0x55, 0x0a, 0x05, 0x43, 0x68, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x73, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x75, 0x74, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x68,
	0x6f, 0x77, 0x43, 0x75, 0x74, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x22, 0x8f, 0x03, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x1f, 0x0a, 0x03, 0x72, 0x6f, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x03, 0x72, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x06, 0x6e, 0x70, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x09, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x67, 0x61, 0x64,
	0x67, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x01, 0x52, 0x06, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x42, 0x08, 0x0a, 0x06,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xb7, 0x04, 0x0a,
	0x16, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xc8, 0x03, 0x0a, 0x0b,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x52, 0x41, 0x4e,
	0x54, 0x5f, 0x42, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e,
	0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x54, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x41,
	0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x02,
	0x12, 0x26, 0x0a, 0x22, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x44, 0x55, 0x4e,
	0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x52, 0x41, 0x4e,
	0x54, 0x5f, 0x42, 0x59, 0x5f, 0x4d, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x49, 0x41, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x52,
	0x41, 0x4e, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x55, 0x4d, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f,
	0x42, 0x59, 0x5f, 0x50, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x59,
	0x5f, 0x43, 0x52, 0x59, 0x53, 0x54, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x52, 0x41, 0x4e,
	0x54, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x52, 0x4f, 0x44, 0x4f, 0x52, 0x49, 0x5f, 0x4d, 0x41, 0x53,
	0x54, 0x45, 0x52, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x42,
	0x59, 0x5f, 0x47, 0x4d, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f,
	0x42, 0x59, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x50, 0x52, 0x41,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x0a, 0x12, 0x24, 0x0a, 0x20,
	0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x4d, 0x55, 0x51, 0x41, 0x44, 0x41, 0x53,
	0x5f, 0x50, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x56,
	0x49, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0c,
	0x12, 0x1b, 0x0a, 0x17, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x43, 0x48, 0x41,
	0x52, 0x5f, 0x41, 0x4d, 0x55, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0d, 0x12, 0x17, 0x0a,
	0x13, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x44, 0x55, 0x45, 0x4c, 0x5f, 0x48,
	0x45, 0x41, 0x52, 0x54, 0x10, 0x0e, 0x22, 0xb2, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x10, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x74, 0x72, 0x69, 0x61, 0x6c,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x0f,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x20, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x43, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x11, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x75,
	0x6c, 0x6c, 0x43, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x0a, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x65, 0x74, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x87, 0x02, 0x0a,
	0x10, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x78, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x78, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a,
	0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x5f, 0x66, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x17, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x66, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x66, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x14, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x78, 0x70,
	0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x78, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f,
	0x75, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68,
	0x6f, 0x75, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65,
	0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0x5e, 0x0a, 0x14, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x41, 0x66, 0x66, 0x69, 0x78, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x61, 0x66, 0x66,
	0x69, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x41, 0x66, 0x66, 0x69, 0x78, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x65, 0x66,
	0x74, 0x5f, 0x63, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x6c, 0x65, 0x66, 0x74, 0x43, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xab, 0x0d, 0x0a, 0x0a,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x47, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0e, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x66, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x12, 0x42,
	0x0a, 0x11, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x70,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x44,
	0x65, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x66, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x66, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x33, 0x0a, 0x16, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x75, 0x64, 0x5f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x75, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x75, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x47,
	0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6c, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x75, 0x64,
	0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x75, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x70, 0x72,
	0x6f, 0x75, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x63, 0x75,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x46, 0x6f, 0x63, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11,
	0x74, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x79,
	0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x77, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x49,
	0x64, 0x12, 0x45, 0x0a, 0x10, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x78,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x41,
	0x66, 0x66, 0x69, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x41,
	0x66, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x72, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x6f, 0x72,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x18, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e,
	0x69, 0x6d, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61,
	0x6e, 0x69, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x4c, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a,
	0x1c, 0x50, 0x72, 0x6f, 0x75, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x01, 0x0a, 0x09, 0x53, 0x68,
	0x6f, 0x77, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x69,
	0x71, 0x75, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61,
	0x72, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x99, 0x08, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x68, 0x6f, 0x77, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x70, 0x4d, 0x61, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x66, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x16, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x75, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x75, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x50, 0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61,
	0x70, 0x12, 0x70, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x68, 0x6f, 0x77, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x75, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x75,
	0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x4d, 0x61, 0x70, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x68, 0x6f, 0x77, 0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x66, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x66, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x0a, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x4c, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x75, 0x64, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xd7, 0x05, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6e, 0x70, 0x63, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x4e, 0x70, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x66,
	0x61, 0x69, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0e, 0x6c, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x5f, 0x6e, 0x70, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4c, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x4e, 0x70, 0x63, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x6c, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x4e, 0x70, 0x63, 0x4d, 0x61, 0x70, 0x12,
	0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6c,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6c, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x3f, 0x0a, 0x11, 0x4c, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x4e, 0x70, 0x63, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4c, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x49, 0x0a, 0x0f, 0x4e,
	0x70, 0x63, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15,
	0x0a, 0x06, 0x6e, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6e, 0x70, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0x59, 0x0a, 0x0f, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x65,
	0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x22, 0x7a, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x32, 0x0a,
	0x0b, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb8, 0x03,
	0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x69,
	0x6c, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x11, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x78, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x6f,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xf7, 0x03, 0x0a, 0x10, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0f, 0x6d,
	0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x70, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6d, 0x70, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x17, 0x63, 0x75, 0x72,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x75, 0x72, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x49, 0x6e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x70,
	0x73, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x73, 0x6e,
	0x49, 0x64, 0x22, 0x32, 0x0a, 0x08, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x64, 0x61, 0x79, 0x22, 0x85, 0x02, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x4d, 0x61,
	0x72, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x72,
	0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x22,
	0x0a, 0x10, 0x4d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x57, 0x61, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x6c, 0x0a, 0x10, 0x4d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x47, 0x72, 0x61,
	0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x22, 0xf9, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x78, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1d, 0x0a, 0x02, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x75, 0x70, 0x12, 0x27,
	0x0a, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x07,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0xa1, 0x02, 0x0a,
	0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x57, 0x61, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x77, 0x61, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x47, 0x72, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x09, 0x67, 0x72, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a,
	0x08, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x42,
	0x6f, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x78, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0x4c, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x12,
	0x25, 0x0a, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0xc9,
	0x01, 0x0a, 0x08, 0x53, 0x68, 0x61, 0x70, 0x65, 0x42, 0x6f, 0x78, 0x12, 0x25, 0x0a, 0x06, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x61, 0x78, 0x69, 0x73, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x05, 0x61, 0x78, 0x69, 0x73, 0x30, 0x12, 0x23, 0x0a, 0x05, 0x61, 0x78, 0x69, 0x73, 0x31,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x78, 0x69, 0x73, 0x31, 0x12, 0x23, 0x0a, 0x05,
	0x61, 0x78, 0x69, 0x73, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x78, 0x69, 0x73,
	0x32, 0x12, 0x27, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xec, 0x02, 0x0a, 0x13, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f,
	0x62, 0x6a, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x62, 0x6a,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x57, 0x61, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x09, 0x77, 0x61, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0a,
	0x67, 0x72, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x47, 0x72, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x67, 0x72, 0x61,
	0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x08, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x07, 0x62, 0x6f, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x71, 0x0a, 0x12, 0x4d, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xb0, 0x01, 0x0a,
	0x10, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x33, 0x0a, 0x16, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x77, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x69, 0x6e, 0x64, 0x6d, 0x69,
	0x6c, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x11, 0x77, 0x69, 0x6e, 0x64, 0x6d, 0x69, 0x6c, 0x6c, 0x53, 0x79, 0x6e,
	0x63, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x77, 0x69, 0x6e, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0x7f, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x69,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x44, 0x69, 0x72, 0x74, 0x79,
	0x22, 0xf2, 0x01, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x70, 0x4d, 0x63, 0x6f, 0x69, 0x6e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54,
	0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x61,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x63, 0x6f,
	0x69, 0x6e, 0x4e, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x6d, 0x63, 0x6f, 0x69, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6f, 0x75, 0x67, 0x68, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x22, 0xd9, 0x03, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x61,
	0x72, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x63, 0x6f, 0x69, 0x6e,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x63, 0x6f,
	0x69, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x63, 0x6f, 0x69, 0x6e, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x68,
	0x63, 0x6f, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x64, 0x61, 0x79, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x79, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x69,
	0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x69, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x1a, 0x80, 0x01, 0x0a, 0x09,
	0x52, 0x65, 0x73, 0x69, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x0e, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0e,
	0x70, 0x65, 0x72, 0x44, 0x61, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x11,
	0x0a, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x6c, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0xef, 0x01, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x54, 0x69, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x62, 0x74, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x62, 0x74, 0x61, 0x69,
	0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f,
	0x62, 0x74, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x22, 0x22, 0x0a, 0x0c, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xe6, 0x01, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x65,
	0x61, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x50, 0x65,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x3e,
	0x0a, 0x0c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x50,
	0x0a, 0x10, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x6a, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x69, 0x70, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x69, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x69, 0x70, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x74, 0x69, 0x70, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x15,
	0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x4c,
	0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x0c,
	0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e,
	0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x14, 0x48, 0x6f,
	0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x50, 0x43, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x33,
	0x0a, 0x16, 0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53,
	0x75, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x69, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x75, 0x69, 0x74,
	0x65, 0x49, 0x64, 0x22, 0x9e, 0x02, 0x0a, 0x1a, 0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x75,
	0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x75, 0x72,
	0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x03, 0x70, 0x6f,
	0x73, 0x12, 0x38, 0x0a, 0x08, 0x6e, 0x70, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x50, 0x43, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x07, 0x6e, 0x70, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x0a, 0x73,
	0x75, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x09, 0x73, 0x75, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x22, 0x46, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x65, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x41, 0x72, 0x65,
	0x61, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x9d, 0x01, 0x0a,
	0x20, 0x48, 0x6f, 0x6d, 0x65, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x41, 0x72,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x5f, 0x70, 0x6f,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x50, 0x6f, 0x73,
	0x12, 0x2a, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x5f, 0x72, 0x6f, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x52, 0x6f, 0x74, 0x22, 0x92, 0x01, 0x0a,
	0x1c, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x13, 0x66, 0x75, 0x72, 0x6e,
	0x69, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f,
	0x6d, 0x65, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x41, 0x72, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11,
	0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xbc, 0x01, 0x0a, 0x1c, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x41,
	0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x75, 0x69, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52,
	0x6f, 0x6f, 0x6d, 0x12, 0x4b, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x72,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x6a, 0x0a, 0x21, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x75, 0x69,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe7, 0x01, 0x0a,
	0x1b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x4d, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x12, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x10, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x56,
	0x0a, 0x12, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x75, 0x69, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc9, 0x01, 0x0a, 0x1c, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x61, 0x72,
	0x72, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x69, 0x66, 0x65, 0x4e,
	0x75, 0x6d, 0x22, 0xb0, 0x02, 0x0a, 0x1d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x75, 0x69, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6e,
	0x0a, 0x14, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x75, 0x69, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x62, 0x72, 0x69, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0x45,
	0x0a, 0x17, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x75, 0x69,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x75, 0x6d,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6c, 0x69, 0x6b, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x4e, 0x75,
	0x6d, 0x22, 0xe1, 0x02, 0x0a, 0x1a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x42, 0x72, 0x69, 0x65, 0x66, 0x4d, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x47,
	0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x08, 0x61, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x41,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x22, 0x63, 0x0a, 0x1f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x72, 0x69, 0x65, 0x66,
	0x4d, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0a, 0x62, 0x72, 0x69, 0x65,
	0x66, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x42, 0x72, 0x69, 0x65, 0x66, 0x4d, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x09, 0x62, 0x72, 0x69, 0x65, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xf0, 0x01, 0x0a, 0x1a, 0x48,
	0x6f, 0x6d, 0x65, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x42, 0x72, 0x69, 0x65,
	0x66, 0x4d, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9d, 0x01,
	0x0a, 0x1f, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x42, 0x72, 0x69, 0x65, 0x66, 0x4d, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x40, 0x0a, 0x0a, 0x62, 0x72, 0x69, 0x65, 0x66, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f,
	0x6d, 0x65, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x42, 0x72, 0x69, 0x65, 0x66,
	0x4d, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x62, 0x72, 0x69, 0x65, 0x66, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x19, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x6e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xbf, 0x01,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x66, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x50,
	0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3a, 0x0a, 0x0c,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x1a,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x75, 0x78, 0x69,
	0x6c, 0x69, 0x61, 0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xb3, 0x02, 0x0a, 0x1a, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x61, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x42, 0x0a,
	0x10, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x47, 0x0a, 0x0e, 0x61, 0x75, 0x78, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x75,
	0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0c, 0x61, 0x75,
	0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6e, 0x0a, 0x18, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x75,
	0x74, 0x6f, 0x46, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x1d, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x42, 0x0a, 0x0c, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xba, 0x02, 0x0a, 0x15, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x10, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0e, 0x61, 0x75, 0x78, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x41, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x0c, 0x61, 0x75, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x6e, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64,
	0x22, 0x97, 0x01, 0x0a, 0x10, 0x47, 0x43, 0x47, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xaa, 0x04, 0x0a, 0x0c, 0x47,
	0x43, 0x47, 0x44, 0x75, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x20, 0x0a, 0x0c, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x63, 0x61, 0x72, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x44, 0x75, 0x65,
	0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61, 0x63, 0x65, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x46, 0x61, 0x63,
	0x65, 0x4d, 0x61, 0x70, 0x12, 0x3e, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x69, 0x12, 0x1c, 0x0a, 0x0a, 0x61, 0x69,
	0x5f, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x61, 0x69, 0x44, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x1c, 0x66, 0x6f, 0x72,
	0x62, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x19, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x3e, 0x0a, 0x10, 0x43, 0x61, 0x72, 0x64, 0x46,
	0x61, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x23, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x2a, 0xf7, 0x04, 0x0a,
	0x0a, 0x45, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x45,
	0x4e, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x4e, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x4c, 0x4f, 0x47,
	0x49, 0x4e, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x07,
	0x12, 0x19, 0x0a, 0x15, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55,
	0x4e, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x45,
	0x4e, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x5f,
	0x54, 0x4f, 0x4f, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0x0a, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x46, 0x45,
	0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4e, 0x45, 0x54, 0x5f,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x10, 0x0d, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x10, 0x0f, 0x12, 0x1a, 0x0a, 0x16,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x4c, 0x55, 0x41, 0x5f, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x53, 0x44, 0x4b, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x10, 0x11, 0x12,
	0x19, 0x0a, 0x15, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43,
	0x4f, 0x53, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x12, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x52, 0x45, 0x51, 0x10, 0x13, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x57,
	0x41, 0x49, 0x54, 0x5f, 0x53, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x14, 0x12, 0x1f, 0x0a,
	0x17, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0xd2, 0x85, 0xd8, 0xcc, 0x04, 0x12, 0x26,
	0x0a, 0x1e, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x44,
	0x49, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x4b, 0x45, 0x59,
	0x10, 0xb1, 0xd1, 0xf9, 0xd6, 0x03, 0x2a, 0xd7, 0x02, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x4d, 0x49, 0x48, 0x4f, 0x59, 0x4f, 0x5f, 0x47, 0x55, 0x45, 0x53, 0x54, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x48, 0x4f,
	0x59, 0x4f, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x58, 0x49, 0x41, 0x4f, 0x4d, 0x49, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x50, 0x41, 0x44, 0x10, 0x0c, 0x12, 0x0f, 0x0a,
	0x0b, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x59, 0x59, 0x42, 0x10, 0x0d, 0x12, 0x10,
	0x0a, 0x0c, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x49, 0x10, 0x0e,
	0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x48, 0x55, 0x41, 0x57,
	0x45, 0x49, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x4d, 0x45, 0x49, 0x5a, 0x55, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x33, 0x36, 0x30, 0x10, 0x11, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x50, 0x4f, 0x10, 0x12, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x56, 0x49, 0x56, 0x4f, 0x10, 0x13, 0x12, 0x0e, 0x0a, 0x0a,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x55, 0x43, 0x10, 0x14, 0x12, 0x14, 0x0a, 0x10,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x57, 0x41, 0x4e, 0x44, 0x4f, 0x4a, 0x49, 0x41,
	0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x45,
	0x4e, 0x4f, 0x56, 0x4f, 0x10, 0x16, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x4a, 0x49, 0x4e, 0x4c, 0x49, 0x10, 0x17, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x49, 0x44, 0x55, 0x10, 0x19, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x1a,
	0x2a, 0xeb, 0x02, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x49, 0x48, 0x4f, 0x59, 0x4f, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x58, 0x49, 0x41,
	0x4f, 0x4d, 0x49, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x50, 0x41, 0x44, 0x10, 0x0c, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x59, 0x59, 0x42, 0x10,
	0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f,
	0x42, 0x49, 0x4c, 0x49, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x55, 0x41, 0x57, 0x45, 0x49, 0x10, 0x0f, 0x12, 0x14, 0x0a,
	0x10, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x49, 0x5a,
	0x55, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49,
	0x44, 0x5f, 0x33, 0x36, 0x30, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x50, 0x50, 0x4f, 0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x56, 0x49, 0x56, 0x4f, 0x10,
	0x13, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x43, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x49, 0x44, 0x5f, 0x4c, 0x45, 0x4e, 0x4f, 0x56, 0x4f, 0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4a, 0x49, 0x4e, 0x4c, 0x49, 0x10,
	0x17, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f,
	0x42, 0x41, 0x49, 0x44, 0x55, 0x10, 0x19, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x1a, 0x2a, 0xaa,
	0x03, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x47, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x42, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x4e, 0x53, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x07, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x55, 0x49,
	0x50, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4f,
	0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x0a, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x50, 0x10, 0x0b, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x50, 0x52,
	0x4f, 0x58, 0x59, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x4f, 0x41, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x11, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4f,
	0x50, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54,
	0x4f, 0x54, 0x48, 0x45, 0x4d, 0x4f, 0x4f, 0x4e, 0x10, 0x13, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x43, 0x47, 0x10, 0x14, 0x2a, 0x30, 0x0a, 0x0a, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x56, 0x10, 0x01, 0x2a, 0x59, 0x0a,
	0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x52,
	0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x41, 0x4d, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x56, 0x5f, 0x50,
	0x55, 0x42, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x56, 0x5f, 0x50, 0x52, 0x49, 0x10, 0x03, 0x2a, 0xb9, 0x4d, 0x0a, 0x10, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x46, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53,
	0x48, 0x4f, 0x50, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x55, 0x50,
	0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x05, 0x12, 0x1c,
	0x0a, 0x18, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x41, 0x44, 0x44, 0x5f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x41,
	0x44, 0x47, 0x45, 0x54, 0x5f, 0x45, 0x4e, 0x56, 0x5f, 0x41, 0x4e, 0x49, 0x4d, 0x41, 0x4c, 0x10,
	0x07, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x56, 0x5f, 0x41,
	0x4e, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x41, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x0f, 0x12,
	0x25, 0x0a, 0x21, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x5f, 0x52, 0x45,
	0x57, 0x41, 0x52, 0x44, 0x10, 0x11, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x45, 0x58, 0x50,
	0x4c, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x12, 0x12, 0x25, 0x0a,
	0x21, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41,
	0x52, 0x44, 0x10, 0x13, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x46, 0x49,
	0x52, 0x53, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x14, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x55, 0x4e, 0x47,
	0x45, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x15, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x17, 0x12, 0x1d,
	0x0a, 0x19, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x46, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x19, 0x12, 0x22, 0x0a,
	0x1e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44,
	0x41, 0x49, 0x4c, 0x59, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10,
	0x1a, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x48, 0x4f,
	0x53, 0x54, 0x10, 0x1b, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x48, 0x4f, 0x53, 0x54, 0x10, 0x1c, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x44, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x1d, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x41, 0x43, 0x48, 0x41, 0x10, 0x1e, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x10, 0x1f, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x47, 0x55, 0x45, 0x53, 0x54, 0x10, 0x20, 0x12, 0x22, 0x0a, 0x1e, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x49,
	0x4c, 0x59, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x47, 0x55, 0x45, 0x53, 0x54, 0x10, 0x21, 0x12,
	0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x46, 0x4f, 0x52, 0x47, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x22, 0x12,
	0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x46, 0x4f, 0x52, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x23, 0x12,
	0x1d, 0x0a, 0x19, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x10, 0x24, 0x12, 0x1d,
	0x0a, 0x19, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x45, 0x10, 0x25, 0x12, 0x14, 0x0a,
	0x10, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47,
	0x4d, 0x10, 0x26, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x54, 0x10,
	0x27, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x47, 0x41, 0x44, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x49, 0x45, 0x10, 0x28, 0x12,
	0x23, 0x0a, 0x1f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x48, 0x50, 0x10, 0x29, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x10, 0x2a, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x54, 0x49, 0x50, 0x53,
	0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x2b, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x10, 0x2c, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x41, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x2d, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x55, 0x42, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x2e, 0x12,
	0x27, 0x0a, 0x23, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x2f, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x5f,
	0x46, 0x4c, 0x4f, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x10, 0x30, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54,
	0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x31, 0x12, 0x24,
	0x0a, 0x20, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x54, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x57, 0x41,
	0x52, 0x44, 0x10, 0x32, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x52, 0x49, 0x56, 0x49, 0x41, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10,
	0x33, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x5f, 0x42, 0x4f,
	0x53, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x54, 0x10, 0x34, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x54, 0x45,
	0x52, 0x49, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x55,
	0x52, 0x4e, 0x10, 0x35, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x45,
	0x57, 0x41, 0x52, 0x44, 0x10, 0x36, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x42, 0x4c, 0x4f,
	0x53, 0x53, 0x4f, 0x4d, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x54, 0x10, 0x37, 0x12, 0x1a, 0x0a, 0x16,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x38, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10,
	0x39, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4d, 0x4f,
	0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x3a, 0x12,
	0x29, 0x0a, 0x25, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x46, 0x4c, 0x4f, 0x4f,
	0x52, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x3b, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x48,
	0x41, 0x52, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x10, 0x3c, 0x12, 0x1f, 0x0a, 0x1b,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x3d, 0x12, 0x25, 0x0a,
	0x21, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x41, 0x49,
	0x4c, 0x59, 0x10, 0x3e, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x3f, 0x12, 0x2c, 0x0a,
	0x28, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x41, 0x43, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x40, 0x12, 0x27, 0x0a, 0x23, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43,
	0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41,
	0x43, 0x45, 0x10, 0x41, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x54, 0x41,
	0x4b, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x42, 0x12, 0x22, 0x0a, 0x1e, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x10, 0x43, 0x12,
	0x27, 0x0a, 0x23, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x4d, 0x41, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45,
	0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x44, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x4d,
	0x41, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x45, 0x12, 0x18, 0x0a, 0x14, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x42,
	0x41, 0x54, 0x45, 0x10, 0x46, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x58, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x47, 0x12, 0x33, 0x0a,
	0x2f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44,
	0x41, 0x49, 0x4c, 0x59, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x4c, 0x45, 0x47, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59,
	0x10, 0x48, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f,
	0x4e, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x49, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x45, 0x54, 0x54, 0x45, 0x52,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x4a, 0x12,
	0x1b, 0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x42, 0x55, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x4e, 0x10, 0x4b, 0x12, 0x22, 0x0a, 0x1e,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x4c,
	0x12, 0x27, 0x0a, 0x23, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59,
	0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x4d, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x5f,
	0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x10, 0x4e, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x4f, 0x12, 0x29, 0x0a, 0x25, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x49, 0x54,
	0x59, 0x5f, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x50, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x50,
	0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x52, 0x45, 0x10,
	0x51, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x10, 0x52, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x45, 0x5f, 0x48, 0x4f,
	0x53, 0x54, 0x10, 0x53, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x45, 0x5f, 0x47, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x54, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f,
	0x4d, 0x41, 0x50, 0x5f, 0x53, 0x50, 0x4f, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x59,
	0x12, 0x31, 0x0a, 0x2d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x42,
	0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x10, 0x5a, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x4d, 0x41,
	0x50, 0x5f, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x5b, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x10, 0x5c, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c,
	0x4f, 0x57, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x5d, 0x12, 0x32,
	0x0a, 0x2e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f,
	0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44,
	0x10, 0x60, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x41, 0x54,
	0x43, 0x48, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x61, 0x12, 0x1f, 0x0a, 0x1b,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x48, 0x49,
	0x54, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x62, 0x12, 0x29, 0x0a,
	0x25, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x5f,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x63, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45,
	0x10, 0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e,
	0x44, 0x10, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x66, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x51,
	0x55, 0x41, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x67,
	0x12, 0x2b, 0x0a, 0x27, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c,
	0x45, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x47, 0x41, 0x52, 0x44, 0x10, 0x68, 0x12, 0x2a, 0x0a,
	0x26, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x52, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x69, 0x12, 0x32, 0x0a, 0x2e, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x48, 0x41,
	0x52, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x6a, 0x12, 0x2e, 0x0a,
	0x2a, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53,
	0x45, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x4d, 0x55, 0x49, 0x50, 0x10, 0x6b, 0x12, 0x2a, 0x0a,
	0x26, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x47, 0x49,
	0x46, 0x54, 0x5f, 0x47, 0x41, 0x52, 0x44, 0x10, 0x6c, 0x12, 0x33, 0x0a, 0x2f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x48, 0x41,
	0x52, 0x47, 0x45, 0x5f, 0x50, 0x53, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x4e, 0x53, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x6d, 0x12, 0x20,
	0x0a, 0x1c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x10, 0x6e,
	0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x57, 0x4f, 0x4f, 0x44, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x6f, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x70, 0x12,
	0x25, 0x0a, 0x21, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x45, 0x54, 0x10, 0x71, 0x12, 0x22, 0x0a, 0x1d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x55,
	0x53, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0xe9, 0x07, 0x12, 0x1c, 0x0a, 0x17, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0xea, 0x07, 0x12, 0x21, 0x0a, 0x1c, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e,
	0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0xf3, 0x07, 0x12, 0x21, 0x0a, 0x1c, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x57, 0x45, 0x41,
	0x50, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0xf4, 0x07, 0x12, 0x20,
	0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x41, 0x57, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0xf5, 0x07,
	0x12, 0x20, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x43, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10,
	0xf6, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0xf7, 0x07, 0x12, 0x26,
	0x0a, 0x21, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x45, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x10, 0xf8, 0x07, 0x12, 0x1e, 0x0a, 0x19, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x4d, 0x53, 0x47, 0x10, 0xf9, 0x07, 0x12, 0x21, 0x0a, 0x1c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x55,
	0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0xfa, 0x07, 0x12, 0x21, 0x0a, 0x1c, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x56, 0x41, 0x54, 0x41,
	0x52, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0xfb, 0x07, 0x12, 0x1f, 0x0a, 0x1a,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xfd, 0x07, 0x12, 0x1f, 0x0a,
	0x1a, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43,
	0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x10, 0xfe, 0x07, 0x12, 0x20,
	0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x80, 0x08,
	0x12, 0x20, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x10,
	0x81, 0x08, 0x12, 0x26, 0x0a, 0x21, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x55,
	0x44, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x82, 0x08, 0x12, 0x28, 0x0a, 0x23, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x55,
	0x50, 0x10, 0x83, 0x08, 0x12, 0x20, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x44, 0x41,
	0x49, 0x4c, 0x59, 0x10, 0x84, 0x08, 0x12, 0x1e, 0x0a, 0x19, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x47, 0x49, 0x56,
	0x49, 0x4e, 0x47, 0x10, 0x86, 0x08, 0x12, 0x1d, 0x0a, 0x18, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x47, 0x45, 0x5f, 0x43, 0x4f,
	0x53, 0x54, 0x10, 0x87, 0x08, 0x12, 0x27, 0x0a, 0x22, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x49, 0x47, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x88, 0x08, 0x12, 0x2e,
	0x0a, 0x29, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41,
	0x52, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x89, 0x08, 0x12, 0x22,
	0x0a, 0x1d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x47, 0x41, 0x44, 0x47, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x10,
	0x8a, 0x08, 0x12, 0x27, 0x0a, 0x22, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x4c, 0x41, 0x4d, 0x50, 0x5f, 0x43, 0x49, 0x5f,
	0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x8c, 0x08, 0x12, 0x2f, 0x0a, 0x2a, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x41,
	0x5f, 0x4c, 0x41, 0x4d, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x8d, 0x08, 0x12, 0x28, 0x0a, 0x23,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x45,
	0x41, 0x5f, 0x4c, 0x41, 0x4d, 0x50, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x10, 0x8e, 0x08, 0x12, 0x24, 0x0a, 0x1f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x4c, 0x41, 0x4d, 0x50,
	0x5f, 0x46, 0x4c, 0x59, 0x5f, 0x4c, 0x41, 0x4d, 0x50, 0x10, 0x8f, 0x08, 0x12, 0x1f, 0x0a, 0x1a,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x55,
	0x54, 0x4f, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x90, 0x08, 0x12, 0x27, 0x0a,
	0x22, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x10, 0x91, 0x08, 0x12, 0x24, 0x0a, 0x1f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x4f, 0x49, 0x4e,
	0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x92, 0x08, 0x12, 0x21, 0x0a, 0x1c,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x41,
	0x52, 0x47, 0x41, 0x49, 0x4e, 0x5f, 0x44, 0x45, 0x44, 0x55, 0x43, 0x54, 0x10, 0x93, 0x08, 0x12,
	0x2a, 0x0a, 0x25, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x50, 0x41, 0x49,
	0x44, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x94, 0x08, 0x12, 0x2b, 0x0a, 0x26, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x54,
	0x54, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x52,
	0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x95, 0x08, 0x12, 0x3a, 0x0a, 0x35, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x41, 0x4c, 0x5f,
	0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x10, 0x96, 0x08, 0x12, 0x28, 0x0a, 0x23, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x97, 0x08, 0x12, 0x29,
	0x0a, 0x24, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x52, 0x54, 0x48, 0x44, 0x41, 0x59, 0x5f, 0x42,
	0x45, 0x4e, 0x45, 0x46, 0x49, 0x54, 0x10, 0x98, 0x08, 0x12, 0x25, 0x0a, 0x20, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45,
	0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x99, 0x08,
	0x12, 0x2a, 0x0a, 0x25, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x4f,
	0x41, 0x4c, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x9a, 0x08, 0x12, 0x30, 0x0a, 0x2b,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x49,
	0x52, 0x53, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x4f, 0x43,
	0x49, 0x41, 0x4c, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x9b, 0x08, 0x12, 0x23,
	0x0a, 0x1e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c,
	0x10, 0x9c, 0x08, 0x12, 0x27, 0x0a, 0x22, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x58, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x55, 0x50, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x9d, 0x08, 0x12, 0x27, 0x0a, 0x22,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x48, 0x55,
	0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x57, 0x41,
	0x52, 0x44, 0x10, 0x9e, 0x08, 0x12, 0x2a, 0x0a, 0x25, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x57, 0x49, 0x44, 0x47, 0x45,
	0x54, 0x5f, 0x41, 0x4e, 0x43, 0x48, 0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x9f,
	0x08, 0x12, 0x25, 0x0a, 0x20, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x57, 0x49, 0x44, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4f,
	0x4e, 0x46, 0x49, 0x52, 0x45, 0x10, 0xa0, 0x08, 0x12, 0x31, 0x0a, 0x2c, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x47, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f,
	0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0xa1, 0x08, 0x12, 0x3a, 0x0a, 0x35, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45,
	0x5f, 0x57, 0x49, 0x44, 0x47, 0x45, 0x54, 0x5f, 0x4f, 0x4e, 0x45, 0x4f, 0x46, 0x46, 0x5f, 0x47,
	0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x45,
	0x43, 0x54, 0x4f, 0x52, 0x10, 0xa2, 0x08, 0x12, 0x2e, 0x0a, 0x29, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x57, 0x49, 0x44,
	0x47, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45,
	0x43, 0x54, 0x4f, 0x52, 0x10, 0xa3, 0x08, 0x12, 0x2d, 0x0a, 0x28, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x57, 0x49, 0x44,
	0x47, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x4f, 0x52, 0x10, 0xa4, 0x08, 0x12, 0x26, 0x0a, 0x21, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x47, 0x45, 0x4e,
	0x45, 0x52, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xa5, 0x08, 0x12, 0x2c,
	0x0a, 0x27, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x41, 0x4c, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xa6, 0x08, 0x12, 0x24, 0x0a, 0x1f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x58, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x10,
	0xa7, 0x08, 0x12, 0x20, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x10, 0xa8, 0x08, 0x12, 0x2c, 0x0a, 0x27, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x57, 0x49, 0x44, 0x47, 0x45, 0x54,
	0x5f, 0x47, 0x41, 0x44, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x45, 0x52, 0x10,
	0xa9, 0x08, 0x12, 0x2b, 0x0a, 0x26, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x46, 0x46, 0x49, 0x47, 0x59, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54,
	0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xaa, 0x08, 0x12,
	0x20, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x45, 0x46, 0x46, 0x49, 0x47, 0x59, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xab,
	0x08, 0x12, 0x2c, 0x0a, 0x27, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54,
	0x5f, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xac, 0x08, 0x12,
	0x29, 0x0a, 0x24, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x49, 0x4e,
	0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xad, 0x08, 0x12, 0x29, 0x0a, 0x24, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x55, 0x4e,
	0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x57, 0x41,
	0x52, 0x44, 0x10, 0xae, 0x08, 0x12, 0x25, 0x0a, 0x20, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x4d, 0x41, 0x4e, 0x5f,
	0x4d, 0x50, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xaf, 0x08, 0x12, 0x29, 0x0a, 0x24,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x57, 0x41, 0x52, 0x44, 0x10, 0xb0, 0x08, 0x12, 0x29, 0x0a, 0x24, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x45, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x5f, 0x52, 0x45, 0x44, 0x45, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10,
	0xb1, 0x08, 0x12, 0x1f, 0x0a, 0x1a, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x52,
	0x41, 0x43, 0x4c, 0x45, 0x5f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44,
	0x10, 0xb2, 0x08, 0x12, 0x24, 0x0a, 0x1f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xb3, 0x08, 0x12, 0x2f, 0x0a, 0x2a, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x53,
	0x55, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x44,
	0x45, 0x54, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0xb4, 0x08, 0x12, 0x2c, 0x0a, 0x27, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x43, 0x48,
	0x41, 0x4e, 0x49, 0x43, 0x55, 0x53, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x54,
	0x49, 0x43, 0x4b, 0x45, 0x54, 0x10, 0xb5, 0x08, 0x12, 0x2a, 0x0a, 0x25, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e,
	0x49, 0x43, 0x55, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x5f, 0x47, 0x45, 0x41,
	0x52, 0x10, 0xb6, 0x08, 0x12, 0x2b, 0x0a, 0x26, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x43, 0x55, 0x53,
	0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x10, 0xb7,
	0x08, 0x12, 0x27, 0x0a, 0x22, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48,
	0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xb8, 0x08, 0x12, 0x26, 0x0a, 0x21, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4f, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x50, 0x54, 0x45, 0x52, 0x10,
	0xb9, 0x08, 0x12, 0x23, 0x0a, 0x1e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x50, 0x5f, 0x52, 0x45,
	0x57, 0x41, 0x52, 0x44, 0x10, 0xba, 0x08, 0x12, 0x2c, 0x0a, 0x27, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x4c, 0x45, 0x55, 0x52, 0x5f, 0x46,
	0x41, 0x49, 0x52, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41,
	0x52, 0x44, 0x10, 0xbb, 0x08, 0x12, 0x21, 0x0a, 0x1c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0xbc, 0x08, 0x12, 0x38, 0x0a, 0x33, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x4c, 0x41, 0x42, 0x5f, 0x4f, 0x4e, 0x45, 0x4f, 0x46, 0x46,
	0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10,
	0xbd, 0x08, 0x12, 0x27, 0x0a, 0x22, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4d, 0x41,
	0x4b, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0xbe, 0x08, 0x12, 0x26, 0x0a, 0x21, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x52,
	0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x5f, 0x54, 0x41, 0x4b, 0x45,
	0x10, 0xbf, 0x08, 0x12, 0x28, 0x0a, 0x23, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4d,
	0x41, 0x4b, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0xc0, 0x08, 0x12, 0x2d, 0x0a,
	0x28, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46,
	0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x5f, 0x46, 0x41,
	0x53, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0xc1, 0x08, 0x12, 0x41, 0x0a, 0x3c,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x4c, 0x41, 0x42, 0x5f, 0x4c, 0x4f,
	0x4f, 0x50, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54,
	0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xc2, 0x08, 0x12,
	0x3c, 0x0a, 0x37, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x4c, 0x41, 0x42,
	0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xc3, 0x08, 0x12, 0x28, 0x0a,
	0x23, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x48,
	0x4f, 0x4d, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x48, 0x4f, 0x50,
	0x5f, 0x42, 0x55, 0x59, 0x10, 0xc4, 0x08, 0x12, 0x24, 0x0a, 0x1f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x43, 0x4f,
	0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0xc5, 0x08, 0x12, 0x32, 0x0a,
	0x2d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53,
	0x55, 0x4d, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xc6,
	0x08, 0x12, 0x31, 0x0a, 0x2c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53,
	0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x10, 0xc7, 0x08, 0x12, 0x2a, 0x0a, 0x25, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xc8, 0x08,
	0x12, 0x2a, 0x0a, 0x25, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x42, 0x4f,
	0x4d, 0x42, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xc9, 0x08, 0x12, 0x26, 0x0a, 0x21,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x48, 0x4f,
	0x4d, 0x45, 0x5f, 0x46, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43,
	0x54, 0x10, 0xca, 0x08, 0x12, 0x24, 0x0a, 0x1f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x53, 0x48, 0x45, 0x4c, 0x4c,
	0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xcb, 0x08, 0x12, 0x24, 0x0a, 0x1f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4d, 0x45,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xcc, 0x08,
	0x12, 0x2c, 0x0a, 0x27, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x42, 0x4c, 0x49, 0x54, 0x5a, 0x5f, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x44, 0x55, 0x4e,
	0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xcd, 0x08, 0x12, 0x28,
	0x0a, 0x23, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x5f, 0x52,
	0x45, 0x54, 0x55, 0x52, 0x4e, 0x10, 0xce, 0x08, 0x12, 0x28, 0x0a, 0x23, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x50,
	0x4c, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x58, 0x5f, 0x47, 0x41, 0x54, 0x48, 0x45, 0x52, 0x10,
	0xcf, 0x08, 0x12, 0x22, 0x0a, 0x1d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x5f, 0x53,
	0x45, 0x45, 0x44, 0x10, 0xd0, 0x08, 0x12, 0x24, 0x0a, 0x1f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x50, 0x4c, 0x41,
	0x4e, 0x54, 0x5f, 0x47, 0x41, 0x54, 0x48, 0x45, 0x52, 0x10, 0xd1, 0x08, 0x12, 0x27, 0x0a, 0x22,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x48,
	0x45, 0x53, 0x53, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41,
	0x52, 0x44, 0x10, 0xd2, 0x08, 0x12, 0x2b, 0x0a, 0x26, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10,
	0xd3, 0x08, 0x12, 0x26, 0x0a, 0x21, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x55, 0x4e, 0x41, 0x5f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x41,
	0x43, 0x52, 0x49, 0x46, 0x49, 0x43, 0x45, 0x10, 0xd4, 0x08, 0x12, 0x32, 0x0a, 0x2d, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x55, 0x4e, 0x41,
	0x5f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x53, 0x41, 0x43, 0x52, 0x49,
	0x46, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xd5, 0x08, 0x12, 0x1c,
	0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x46, 0x49, 0x53, 0x48, 0x5f, 0x42, 0x49, 0x54, 0x45, 0x10, 0xd6, 0x08, 0x12, 0x1c, 0x0a, 0x17,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x49,
	0x53, 0x48, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x10, 0xd7, 0x08, 0x12, 0x26, 0x0a, 0x21, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e,
	0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10,
	0xd8, 0x08, 0x12, 0x2c, 0x0a, 0x27, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x45, 0x52,
	0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0xd9, 0x08,
	0x12, 0x2b, 0x0a, 0x26, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x47,
	0x49, 0x56, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0xda, 0x08, 0x12, 0x2b, 0x0a,
	0x26, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50,
	0x4c, 0x41, 0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x56,
	0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0xdb, 0x08, 0x12, 0x29, 0x0a, 0x24, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x47, 0x55,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x4c, 0x45, 0x10, 0xdc, 0x08, 0x12, 0x2f, 0x0a, 0x2a, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x54, 0x41, 0x4b,
	0x45, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x10, 0xdd, 0x08, 0x12, 0x2a, 0x0a, 0x25, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x55, 0x50,
	0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x4b, 0x49, 0x47, 0x41, 0x4d, 0x49, 0x10,
	0xde, 0x08, 0x12, 0x25, 0x0a, 0x20, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53,
	0x48, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0xdf, 0x08, 0x12, 0x2c, 0x0a, 0x27, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x57,
	0x49, 0x44, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4e,
	0x49, 0x4d, 0x41, 0x4c, 0x10, 0xe0, 0x08, 0x12, 0x26, 0x0a, 0x21, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x41, 0x4e, 0x49, 0x4d, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x10, 0xe1, 0x08, 0x12,
	0x1e, 0x0a, 0x19, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x53, 0x4e, 0x4f, 0x57, 0x5f, 0x44, 0x52, 0x49, 0x46, 0x54, 0x53, 0x10, 0xe2, 0x08, 0x12,
	0x28, 0x0a, 0x23, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x57, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4d, 0x50, 0x5f, 0x47, 0x49, 0x56,
	0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0xe3, 0x08, 0x12, 0x28, 0x0a, 0x23, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x56, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x10, 0xe4, 0x08, 0x12, 0x2d, 0x0a, 0x28, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4d, 0x50,
	0x5f, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10,
	0xe5, 0x08, 0x12, 0x2c, 0x0a, 0x27, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4d, 0x50, 0x5f,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xe6, 0x08,
	0x12, 0x2b, 0x0a, 0x26, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x4c, 0x41, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x53,
	0x4b, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xe7, 0x08, 0x12, 0x2e, 0x0a,
	0x29, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c,
	0x41, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x44, 0x55, 0x4e, 0x47,
	0x45, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xe8, 0x08, 0x12, 0x38, 0x0a,
	0x33, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d,
	0x49, 0x43, 0x48, 0x49, 0x41, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x53, 0x55, 0x52, 0x49, 0x5f, 0x44,
	0x41, 0x52, 0x4b, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45,
	0x57, 0x41, 0x52, 0x44, 0x10, 0xe9, 0x08, 0x12, 0x37, 0x0a, 0x32, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x43, 0x48, 0x49, 0x41, 0x45,
	0x5f, 0x4d, 0x41, 0x54, 0x53, 0x55, 0x52, 0x49, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x43, 0x52, 0x59, 0x53, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0xea, 0x08,
	0x12, 0x2c, 0x0a, 0x27, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x4c, 0x41, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xeb, 0x08, 0x12, 0x29,
	0x0a, 0x24, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x53, 0x54, 0x55, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f,
	0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0xec, 0x08, 0x12, 0x2c, 0x0a, 0x27, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x50, 0x49, 0x43, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x5f, 0x53,
	0x50, 0x49, 0x43, 0x45, 0x10, 0xed, 0x08, 0x12, 0x2e, 0x0a, 0x29, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x50, 0x49, 0x43, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x46, 0x4f, 0x4f, 0x44, 0x10, 0xee, 0x08, 0x12, 0x2a, 0x0a, 0x25, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x50, 0x49, 0x43, 0x45, 0x5f, 0x41,
	0x44, 0x44, 0x5f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x46, 0x45, 0x54, 0x54, 0x45, 0x52,
	0x10, 0xef, 0x08, 0x12, 0x2e, 0x0a, 0x29, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x41, 0x43, 0x48, 0x41, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44,
	0x10, 0xf0, 0x08, 0x12, 0x23, 0x0a, 0x1e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x49, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x41, 0x4b, 0x45,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0xf1, 0x08, 0x12, 0x30, 0x0a, 0x2b, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x45, 0x52,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x56, 0x32, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xf2, 0x08, 0x12, 0x2f, 0x0a, 0x2a, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x41, 0x56,
	0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x4e, 0x4f, 0x43, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4d,
	0x50, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xf3, 0x08, 0x12, 0x2f, 0x0a, 0x2a, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x45,
	0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x45, 0x4c, 0x49, 0x45, 0x5f, 0x43, 0x48, 0x45,
	0x53, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xf4, 0x08, 0x12, 0x38, 0x0a, 0x33,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x43,
	0x47, 0x5f, 0x54, 0x41, 0x56, 0x45, 0x52, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e,
	0x47, 0x45, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43,
	0x54, 0x45, 0x52, 0x10, 0xf5, 0x08, 0x12, 0x23, 0x0a, 0x1e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x43, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xf7, 0x08, 0x12, 0x27, 0x0a, 0x22, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x43, 0x47,
	0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53,
	0x48, 0x10, 0xf8, 0x08, 0x12, 0x26, 0x0a, 0x21, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x10, 0xf9, 0x08, 0x12, 0x29, 0x0a, 0x24,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x56, 0x49,
	0x4e, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x42, 0x41, 0x52,
	0x47, 0x41, 0x49, 0x4e, 0x10, 0xfa, 0x08, 0x12, 0x27, 0x0a, 0x22, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x4e, 0x54, 0x41, 0x47, 0x45,
	0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0xfb, 0x08,
	0x12, 0x22, 0x0a, 0x1d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x56, 0x49, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e,
	0x54, 0x10, 0xfc, 0x08, 0x12, 0x25, 0x0a, 0x20, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x50,
	0x45, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0xfd, 0x08, 0x12, 0x2c, 0x0a, 0x27, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x4e,
	0x54, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0xfe, 0x08, 0x12, 0x2a, 0x0a, 0x25, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x4e, 0x54, 0x41,
	0x47, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x4e, 0x50, 0x43, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x10, 0xff, 0x08, 0x12, 0x2c, 0x0a, 0x27, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x43, 0x4b, 0x5f, 0x42, 0x4f, 0x41, 0x52,
	0x44, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44,
	0x10, 0x80, 0x09, 0x12, 0x29, 0x0a, 0x24, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x44, 0x10, 0x81, 0x09, 0x12, 0x20,
	0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x82, 0x09,
	0x12, 0x29, 0x0a, 0x24, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x47, 0x43, 0x47, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x83, 0x09, 0x12, 0x29, 0x0a, 0x24, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x43, 0x47,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x10, 0x84, 0x09, 0x12, 0x2c, 0x0a, 0x27, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x55, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x10, 0x85, 0x09, 0x2a, 0x3c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x54,
	0x10, 0x02, 0x2a, 0xf0, 0x11, 0x0a, 0x0b, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55,
	0x41, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52,
	0x5f, 0x45, 0x58, 0x50, 0x10, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56,
	0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x45, 0x58,
	0x50, 0x10, 0x66, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54,
	0x55, 0x41, 0x4c, 0x5f, 0x46, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x10, 0x69,
	0x12, 0x16, 0x0a, 0x12, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c,
	0x5f, 0x52, 0x45, 0x53, 0x49, 0x4e, 0x10, 0x6a, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x4c, 0x45, 0x47, 0x45, 0x4e, 0x44, 0x41,
	0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x6b, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x6c, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x6d, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x6e, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56,
	0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x53, 0x48, 0x49, 0x4d, 0x4d, 0x45, 0x52, 0x49, 0x4e,
	0x47, 0x5f, 0x45, 0x53, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x6f, 0x12, 0x1d, 0x0a, 0x19, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x57, 0x41, 0x52, 0x4d,
	0x5f, 0x45, 0x53, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x70, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x57, 0x4f, 0x4e, 0x44, 0x52,
	0x4f, 0x55, 0x53, 0x5f, 0x45, 0x53, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x71, 0x12, 0x23, 0x0a,
	0x1f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x52,
	0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x10, 0x72, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55,
	0x41, 0x4c, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x4c, 0x41, 0x4d, 0x50, 0x5f, 0x43, 0x4f, 0x49, 0x4e,
	0x10, 0x73, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55,
	0x41, 0x4c, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x4c, 0x41, 0x4d, 0x50, 0x5f, 0x50, 0x4f, 0x50, 0x55,
	0x4c, 0x41, 0x52, 0x49, 0x54, 0x59, 0x10, 0x74, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49,
	0x43, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x75, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x46, 0x4c, 0x45, 0x55, 0x52,
	0x5f, 0x46, 0x41, 0x49, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x76, 0x12, 0x21,
	0x0a, 0x1d, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x46,
	0x4c, 0x45, 0x55, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x52, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10,
	0x77, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41,
	0x4c, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x50, 0x49, 0x52, 0x49, 0x54, 0x5f, 0x43,
	0x4f, 0x49, 0x4e, 0x10, 0x78, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49,
	0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x10, 0x79,
	0x12, 0x26, 0x0a, 0x22, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x4c, 0x41, 0x42,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x7a, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x48, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x4e,
	0x44, 0x5f, 0x53, 0x45, 0x45, 0x4b, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x7b, 0x12, 0x27, 0x0a,
	0x23, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x53, 0x55,
	0x4d, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x5f,
	0x57, 0x4f, 0x4f, 0x44, 0x10, 0x7c, 0x12, 0x2b, 0x0a, 0x27, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56,
	0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x5f, 0x48, 0x41, 0x52, 0x50, 0x41, 0x53, 0x54, 0x55,
	0x4d, 0x10, 0x7d, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54,
	0x55, 0x41, 0x4c, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4a, 0x55,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x7e, 0x12, 0x22, 0x0a, 0x1e, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x42, 0x4c, 0x49, 0x54,
	0x5a, 0x5f, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x10, 0x7f, 0x12,
	0x23, 0x0a, 0x1e, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f,
	0x42, 0x4c, 0x49, 0x54, 0x5a, 0x5f, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f,
	0x42, 0x10, 0x80, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52,
	0x54, 0x55, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x10, 0x81,
	0x01, 0x12, 0x1c, 0x0a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41,
	0x4c, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x82, 0x01, 0x12,
	0x26, 0x0a, 0x21, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f,
	0x4c, 0x55, 0x4e, 0x41, 0x5f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x41, 0x54, 0x4d, 0x4f, 0x53, 0x50,
	0x48, 0x45, 0x52, 0x45, 0x10, 0x83, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x4c, 0x49, 0x4b,
	0x45, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x10, 0x84, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x4f, 0x47, 0x55,
	0x45, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x42, 0x10, 0x85, 0x01, 0x12,
	0x22, 0x0a, 0x1d, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f,
	0x52, 0x4f, 0x47, 0x55, 0x45, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x43,
	0x10, 0x86, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54,
	0x55, 0x41, 0x4c, 0x5f, 0x57, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4d, 0x50, 0x5f,
	0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x10, 0x87, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x57, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x43, 0x41, 0x4d, 0x50, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x42, 0x10, 0x88, 0x01, 0x12,
	0x25, 0x0a, 0x20, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f,
	0x4c, 0x41, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x49,
	0x4e, 0x5f, 0x41, 0x10, 0x89, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56,
	0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x4c, 0x41, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x52,
	0x49, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x42, 0x10, 0x8a, 0x01, 0x12, 0x25, 0x0a,
	0x20, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x4c, 0x41,
	0x4e, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f,
	0x43, 0x10, 0x8b, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52,
	0x54, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x8c, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x45, 0x52, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x56, 0x32, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x8d, 0x01, 0x12,
	0x2a, 0x0a, 0x25, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f,
	0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x44, 0x55, 0x4e, 0x47,
	0x45, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x8e, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x47, 0x52, 0x41, 0x56,
	0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x4e, 0x4f, 0x43, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x49,
	0x4e, 0x5f, 0x41, 0x10, 0x8f, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56,
	0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x47, 0x52, 0x41, 0x56, 0x45, 0x4e, 0x5f, 0x49, 0x4e,
	0x4e, 0x4f, 0x43, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x42, 0x10, 0x90,
	0x01, 0x12, 0x26, 0x0a, 0x21, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41,
	0x4c, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x45, 0x4c, 0x49,
	0x45, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x91, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x56, 0x49, 0x4e, 0x54, 0x41, 0x47,
	0x45, 0x5f, 0x50, 0x4f, 0x50, 0x55, 0x4c, 0x41, 0x52, 0x49, 0x54, 0x59, 0x10, 0x93, 0x01, 0x12,
	0x19, 0x0a, 0x14, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f,
	0x47, 0x43, 0x47, 0x5f, 0x45, 0x58, 0x50, 0x10, 0x92, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x56, 0x49, 0x4e, 0x54, 0x41,
	0x47, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x41,
	0x10, 0x94, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54,
	0x55, 0x41, 0x4c, 0x5f, 0x56, 0x49, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x42, 0x10, 0x95, 0x01, 0x12, 0x27, 0x0a, 0x22,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x56, 0x49, 0x4e,
	0x54, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x49, 0x4e,
	0x5f, 0x43, 0x10, 0x96, 0x01, 0x12, 0x2d, 0x0a, 0x28, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49,
	0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x46, 0x55, 0x4e, 0x47, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x47,
	0x48, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x49,
	0x4e, 0x10, 0x97, 0x01, 0x12, 0x2e, 0x0a, 0x29, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52,
	0x54, 0x55, 0x41, 0x4c, 0x5f, 0x46, 0x55, 0x4e, 0x47, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x47, 0x48,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x49,
	0x4e, 0x10, 0x98, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52,
	0x54, 0x55, 0x41, 0x4c, 0x5f, 0x45, 0x46, 0x46, 0x49, 0x47, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4c,
	0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x56, 0x32, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x99, 0x01,
	0x12, 0x21, 0x0a, 0x1c, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c,
	0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x49, 0x4e,
	0x10, 0x9a, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54,
	0x55, 0x41, 0x4c, 0x5f, 0x42, 0x52, 0x49, 0x43, 0x4b, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x9b, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x4c, 0x41,
	0x4d, 0x50, 0x5f, 0x56, 0x33, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x9c, 0x01, 0x12, 0x17, 0x0a,
	0x12, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x48, 0x43,
	0x4f, 0x49, 0x4e, 0x10, 0xc9, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56,
	0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x53, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0xca, 0x01, 0x12,
	0x17, 0x0a, 0x12, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f,
	0x4d, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0xcb, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x43, 0x4f,
	0x49, 0x4e, 0x10, 0xcc, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49,
	0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x47, 0x43, 0x47, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0xcd,
	0x01, 0x12, 0x24, 0x0a, 0x1f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41,
	0x4c, 0x5f, 0x49, 0x4e, 0x41, 0x5a, 0x55, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0xba, 0x02, 0x12, 0x23, 0x0a, 0x1e, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x4d, 0x45, 0x4e, 0x47, 0x44, 0x45, 0x5f, 0x52,
	0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xbb, 0x02, 0x12, 0x23, 0x0a, 0x1e,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x4d,
	0x45, 0x52, 0x55, 0x5f, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xbc,
	0x02, 0x12, 0x22, 0x0a, 0x1d, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41,
	0x4c, 0x5f, 0x4c, 0x49, 0x59, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0xbd, 0x02, 0x2a, 0x94, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x69, 0x71, 0x75,
	0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x19,
	0x52, 0x45, 0x4c, 0x49, 0x51, 0x55, 0x41, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x52,
	0x45, 0x4c, 0x49, 0x51, 0x55, 0x41, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45,
	0x4c, 0x49, 0x51, 0x55, 0x41, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45,
	0x4c, 0x49, 0x51, 0x55, 0x41, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x57, 0x45, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x2a, 0x8e, 0x01, 0x0a,
	0x18, 0x52, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x4c,
	0x49, 0x51, 0x55, 0x41, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x24, 0x0a, 0x20, 0x52, 0x45, 0x4c, 0x49, 0x51, 0x55, 0x41, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c,
	0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x4c, 0x49, 0x51, 0x55, 0x41,
	0x52, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x2a, 0xa0, 0x01,
	0x0a, 0x19, 0x52, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x52,
	0x45, 0x4c, 0x49, 0x51, 0x55, 0x41, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x4c, 0x49, 0x51, 0x55, 0x41, 0x52, 0x59, 0x5f,
	0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x01, 0x12,
	0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x4c, 0x49, 0x51, 0x55, 0x41, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x02,
	0x2a, 0xae, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x57, 0x65, 0x61, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x22, 0x52, 0x45, 0x4c, 0x49, 0x51, 0x55, 0x41, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x57, 0x45, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d, 0x52, 0x45, 0x4c, 0x49, 0x51,
	0x55, 0x41, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x57, 0x45, 0x41, 0x52,
	0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x42, 0x45, 0x45,
	0x4e, 0x5f, 0x57, 0x45, 0x41, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x35, 0x0a, 0x31, 0x52, 0x45,
	0x4c, 0x49, 0x51, 0x55, 0x41, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x57,
	0x45, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x45, 0x45, 0x4e, 0x5f, 0x57, 0x45, 0x41, 0x52, 0x45, 0x44, 0x10,
	0x02, 0x2a, 0xec, 0x01, 0x0a, 0x11, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x4c, 0x4f, 0x41, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x10,
	0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x43, 0x41,
	0x4c, 0x41, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52,
	0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x43,
	0x41, 0x4c, 0x41, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x43,
	0x41, 0x4c, 0x41, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x10, 0x06,
	0x2a, 0xbe, 0x0a, 0x0a, 0x0b, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x4c, 0x4b, 0x10,
	0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x55, 0x4e, 0x10,
	0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x53, 0x48,
	0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x49,
	0x4d, 0x42, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x4c, 0x49, 0x4d, 0x42, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x4d,
	0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x5f, 0x54, 0x4f,
	0x5f, 0x43, 0x4c, 0x49, 0x4d, 0x42, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x47, 0x48, 0x54, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x4d,
	0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a,
	0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4c, 0x59, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10,
	0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x57, 0x49, 0x4d, 0x5f, 0x4d, 0x4f, 0x56, 0x45,
	0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x57, 0x49,
	0x4d, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x57, 0x49, 0x4d, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x10, 0x10, 0x12, 0x14,
	0x0a, 0x10, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x57, 0x49, 0x4d, 0x5f, 0x4a, 0x55,
	0x4d, 0x50, 0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x4c, 0x49, 0x50, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x47, 0x4f, 0x5f, 0x55, 0x50, 0x53, 0x54, 0x41, 0x49, 0x52, 0x53, 0x10, 0x13, 0x12, 0x19, 0x0a,
	0x15, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x5f, 0x4f, 0x4e, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x14, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x4f, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x5f, 0x55, 0x50, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x5f,
	0x46, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x15, 0x12, 0x18, 0x0a,
	0x14, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x5f, 0x4f, 0x46, 0x46,
	0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x10, 0x16, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x46, 0x4c, 0x59, 0x10, 0x17, 0x12,
	0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x44, 0x44, 0x45, 0x52,
	0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x18, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x41, 0x44, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x19, 0x12,
	0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x44, 0x44, 0x45, 0x52,
	0x5f, 0x53, 0x4c, 0x49, 0x50, 0x10, 0x1a, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x4f, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x41, 0x44,
	0x44, 0x45, 0x52, 0x10, 0x1b, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x41, 0x44, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42,
	0x59, 0x10, 0x1c, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41,
	0x4e, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x1d, 0x12, 0x1e,
	0x0a, 0x1a, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x1e, 0x12, 0x16,
	0x0a, 0x12, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x5f,
	0x57, 0x41, 0x4c, 0x4b, 0x10, 0x1f, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x5f, 0x52, 0x55, 0x4e, 0x10, 0x20, 0x12, 0x16, 0x0a,
	0x12, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x5f, 0x44,
	0x41, 0x53, 0x48, 0x10, 0x21, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x52, 0x4f, 0x55, 0x43, 0x48, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x22, 0x12, 0x16, 0x0a,
	0x12, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x4f, 0x55, 0x43, 0x48, 0x5f, 0x4d,
	0x4f, 0x56, 0x45, 0x10, 0x23, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x52, 0x4f, 0x55, 0x43, 0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x10, 0x24, 0x12, 0x11, 0x0a,
	0x0d, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x25,
	0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x4e, 0x44, 0x5f,
	0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x26, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x4b, 0x10,
	0x27, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x4c, 0x4c, 0x10, 0x28, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x4f, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x48,
	0x41, 0x4b, 0x45, 0x10, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x2a, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x50,
	0x4f, 0x53, 0x10, 0x2b, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x10,
	0x2c, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x4c, 0x4c,
	0x4f, 0x57, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x2d, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4b, 0x49, 0x46, 0x46, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x2e, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x4b, 0x49, 0x46, 0x46, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x2f, 0x12, 0x15,
	0x0a, 0x11, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4b, 0x49, 0x46, 0x46, 0x5f, 0x44,
	0x41, 0x53, 0x48, 0x10, 0x30, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x4b, 0x49, 0x46, 0x46, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x41,
	0x53, 0x48, 0x10, 0x31, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x32,
	0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4c, 0x59, 0x5f, 0x49,
	0x44, 0x4c, 0x45, 0x10, 0x33, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x4c, 0x59, 0x5f, 0x53, 0x4c, 0x4f, 0x57, 0x10, 0x34, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x4f,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4c, 0x59, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x10, 0x35, 0x12,
	0x13, 0x0a, 0x0f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x49, 0x4d, 0x5f, 0x4d, 0x4f,
	0x56, 0x45, 0x10, 0x36, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x49, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x4e, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x37, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x10,
	0x38, 0x2a, 0x86, 0x03, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52,
	0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x50,
	0x52, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x50, 0x43, 0x10, 0x03,
	0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x47, 0x41, 0x44, 0x47, 0x45, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x54,
	0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x10, 0x05,
	0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x54,
	0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x07, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x54,
	0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x09, 0x12, 0x1e,
	0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41,
	0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x0a, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x50,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x54,
	0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x54, 0x45, 0x41,
	0x4d, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52,
	0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x59, 0x45, 0x5f, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x0e, 0x2a, 0x49, 0x0a, 0x0c, 0x4e, 0x70,
	0x63, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x50,
	0x43, 0x5f, 0x54, 0x41, 0x4c, 0x4b, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x4e, 0x50, 0x43, 0x5f, 0x54, 0x41, 0x4c, 0x4b, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x50, 0x43, 0x5f, 0x54, 0x41, 0x4c, 0x4b, 0x5f, 0x4d, 0x41, 0x4e,
	0x55, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0x28, 0x0a, 0x0b, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x53, 0x6c, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x5f,
	0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x00, 0x2a,
	0x5b, 0x0a, 0x0f, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x42, 0x4f,
	0x52, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x4e,
	0x53, 0x54, 0x45, 0x52, 0x5f, 0x42, 0x4f, 0x52, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x42,
	0x4f, 0x52, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x02, 0x2a, 0xc0, 0x01, 0x0a,
	0x0e, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x47, 0x41, 0x44, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4f, 0x52, 0x4e, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x41, 0x44, 0x47, 0x45, 0x54, 0x5f,
	0x42, 0x4f, 0x52, 0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x49, 0x52, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x47, 0x41, 0x44, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4f, 0x52, 0x4e, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x41, 0x44, 0x47, 0x45, 0x54, 0x5f,
	0x42, 0x4f, 0x52, 0x4e, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x49, 0x54,
	0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x41, 0x44, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4f, 0x52,
	0x4e, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x45, 0x10, 0x04, 0x12,
	0x16, 0x0a, 0x12, 0x47, 0x41, 0x44, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4f, 0x52, 0x4e, 0x5f, 0x47,
	0x41, 0x44, 0x47, 0x45, 0x54, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x41, 0x44, 0x47, 0x45,
	0x54, 0x5f, 0x42, 0x4f, 0x52, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x2a,
	0x86, 0x01, 0x0a, 0x12, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47,
	0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x03, 0x2a, 0x40, 0x0a, 0x0e, 0x47, 0x61, 0x64, 0x67,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x41,
	0x44, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x47, 0x41, 0x44, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f,
	0x43, 0x52, 0x55, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x2a, 0x87, 0x01, 0x0a, 0x10, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x16, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x55, 0x49,
	0x4c, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x55, 0x49,
	0x4c, 0x54, 0x10, 0x03, 0x2a, 0xd4, 0x06, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x48, 0x70,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x48, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x41, 0x56, 0x41, 0x54,
	0x41, 0x52, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48,
	0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x50, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x47, 0x45, 0x41, 0x52, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x48, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x50, 0x5f, 0x53, 0x55,
	0x42, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x48, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x4e, 0x10,
	0x06, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x50, 0x5f, 0x53,
	0x55, 0x42, 0x5f, 0x41, 0x42, 0x59, 0x53, 0x53, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x48, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x09, 0x12,
	0x18, 0x0a, 0x14, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x50, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x48, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x47, 0x4d, 0x10, 0x0b, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x50, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x4c,
	0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x44, 0x10, 0x0d, 0x12, 0x21, 0x0a, 0x1d,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x54,
	0x4f, 0x52, 0x4d, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x0e, 0x12,
	0x24, 0x0a, 0x20, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x50, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x47, 0x41, 0x44,
	0x47, 0x45, 0x54, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x48, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x10,
	0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x50, 0x5f, 0x53, 0x55,
	0x42, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x11,
	0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x50, 0x5f, 0x41, 0x54,
	0x54, 0x41, 0x43, 0x4b, 0x5f, 0x42, 0x59, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x10, 0x12,
	0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x50, 0x5f, 0x41, 0x54,
	0x54, 0x41, 0x43, 0x4b, 0x5f, 0x42, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x10,
	0x13, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x50, 0x5f, 0x42,
	0x59, 0x5f, 0x4c, 0x55, 0x41, 0x10, 0x33, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x48, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x10, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x50, 0x5f,
	0x41, 0x44, 0x44, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x66, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x52, 0x45, 0x56, 0x49,
	0x56, 0x45, 0x10, 0x67, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48,
	0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x68, 0x12,
	0x18, 0x0a, 0x14, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x50, 0x5f, 0x41, 0x44, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x45, 0x10, 0x69, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x48, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x47,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x6a, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x48, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x47, 0x4d, 0x10, 0x6b, 0x12, 0x27, 0x0a,
	0x23, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x54,
	0x52, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x10, 0x6c, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x48, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x52, 0x4f, 0x55, 0x47, 0x55, 0x45, 0x4c, 0x49,
	0x4b, 0x45, 0x5f, 0x53, 0x50, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x6d, 0x2a, 0xf1, 0x01, 0x0a, 0x0d,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x69, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x45,
	0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x42, 0x59, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x45,
	0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x42, 0x59, 0x5f, 0x47, 0x45, 0x41, 0x52, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x45, 0x5f, 0x46, 0x41,
	0x4c, 0x4c, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44,
	0x49, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x4e, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x45, 0x5f, 0x41, 0x42, 0x59, 0x53, 0x53, 0x10, 0x05,
	0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x45, 0x5f, 0x47,
	0x4d, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x49,
	0x45, 0x5f, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x44, 0x10, 0x07,
	0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x45, 0x5f, 0x53,
	0x54, 0x4f, 0x52, 0x4d, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x2a,
	0x5f, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x69, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x49, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x49, 0x45, 0x5f,
	0x4f, 0x50, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x44, 0x49, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x56, 0x45, 0x10, 0x03,
	0x2a, 0x89, 0x01, 0x0a, 0x0b, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x15, 0x0a, 0x11, 0x46, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x45, 0x54, 0x54, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x45, 0x54,
	0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x41, 0x4c, 0x10, 0x04, 0x2a, 0xc4, 0x01, 0x0a,
	0x15, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52,
	0x5f, 0x45, 0x58, 0x50, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x45, 0x58, 0x50,
	0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x28, 0x0a, 0x24, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x57, 0x41, 0x49, 0x54,
	0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x56, 0x41,
	0x54, 0x41, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f,
	0x45, 0x58, 0x50, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45,
	0x44, 0x10, 0x04, 0x2a, 0x69, 0x0a, 0x0a, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x56, 0x41, 0x54, 0x41,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x2a, 0x49,
	0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x49, 0x47,
	0x47, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x10, 0x01, 0x2a, 0x8b, 0x01, 0x0a, 0x10, 0x4d, 0x61,
	0x69, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b,
	0x0a, 0x17, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x42,
	0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4f, 0x4e, 0x57, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f,
	0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x4c, 0x4c,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x67, 0x0a, 0x0d, 0x4d, 0x70, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x50, 0x5f, 0x53,
	0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x50, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x1c, 0x4d, 0x50, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x02,
	0x2a, 0xb1, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x68, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x54, 0x48, 0x5f,
	0x45, 0x58, 0x50, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d,
	0x41, 0x54, 0x48, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x54, 0x48, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a,
	0x19, 0x4d, 0x41, 0x54, 0x48, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a,
	0x4d, 0x41, 0x54, 0x48, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12,
	0x4d, 0x41, 0x54, 0x48, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f,
	0x52, 0x4d, 0x10, 0x05, 0x2a, 0x4c, 0x0a, 0x15, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x49, 0x4d,
	0x4d, 0x45, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f,
	0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54,
	0x10, 0x01, 0x2a, 0xa0, 0x02, 0x0a, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x43, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x43, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x52, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x53, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x54, 0x10, 0x07, 0x12, 0x0f, 0x0a,
	0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x55, 0x10, 0x08, 0x12, 0x0f,
	0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4a, 0x50, 0x10, 0x09, 0x12,
	0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4b, 0x52, 0x10, 0x0a,
	0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x48, 0x10,
	0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x4e,
	0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x49,
	0x44, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x52, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x49, 0x54, 0x10, 0x0f, 0x2a, 0xea, 0x01, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x44, 0x49, 0x54, 0x4f, 0x52,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4f, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41,
	0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x43, 0x10, 0x03,
	0x12, 0x07, 0x0a, 0x03, 0x50, 0x53, 0x34, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x41,
	0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4c, 0x4f, 0x55,
	0x44, 0x5f, 0x49, 0x4f, 0x53, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x53, 0x35, 0x10, 0x08,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x10, 0x09, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x54, 0x56, 0x10, 0x0a, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x43, 0x10, 0x0c, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f,
	0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4c, 0x4f, 0x55,
	0x44, 0x5f, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x50, 0x43,
	0x10, 0x0e, 0x2a, 0x69, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x50, 0x43, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x49, 0x4e, 0x45, 0x10,
	0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0d,
	0x0a, 0x09, 0x46, 0x49, 0x53, 0x48, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x06, 0x2a, 0x6b, 0x0a,
	0x0f, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x50, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x46, 0x52, 0x4f,
	0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a,
	0x4d, 0x41, 0x50, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18,
	0x4d, 0x41, 0x50, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x2a, 0xdd, 0x01, 0x0a, 0x1f, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c,
	0x0a, 0x28, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28,
	0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x55,
	0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x55,
	0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x10, 0x03, 0x2a, 0xf3, 0x01, 0x0a, 0x13, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x47, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x44, 0x72,
	0x6f, 0x70, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1d,
	0x0a, 0x19, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x42, 0x41, 0x4e, 0x5f, 0x44, 0x49, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x42,
	0x41, 0x4e, 0x5f, 0x44, 0x49, 0x45, 0x5f, 0x4c, 0x55, 0x41, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b,
	0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x41,
	0x4e, 0x5f, 0x44, 0x49, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x22, 0x0a,
	0x1e, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x42,
	0x41, 0x4e, 0x5f, 0x44, 0x49, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10,
	0x08, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x48, 0x50, 0x10, 0x10,
	0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x42, 0x41, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x20,
	0x2a, 0x6c, 0x0a, 0x12, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x47, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x61, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x41, 0x44, 0x47, 0x45, 0x54,
	0x5f, 0x47, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x41, 0x44, 0x47, 0x45, 0x54, 0x5f, 0x47, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x42, 0x41, 0x4e, 0x5f, 0x44, 0x49, 0x45, 0x5f, 0x4c, 0x55, 0x41, 0x10, 0x01, 0x12,
	0x1d, 0x0a, 0x19, 0x47, 0x41, 0x44, 0x47, 0x45, 0x54, 0x5f, 0x47, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x42, 0x41, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x02, 0x2a, 0x69,
	0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x2a, 0x97, 0x01, 0x0a, 0x09, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41,
	0x4e, 0x49, 0x43, 0x55, 0x53, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x04, 0x12,
	0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x43,
	0x47, 0x10, 0x05, 0x2a, 0x49, 0x0a, 0x0a, 0x4d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x44,
	0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x50, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x5f, 0x43, 0x52, 0x55, 0x43, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x91,
	0x01, 0x0a, 0x0e, 0x4f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x49, 0x4e, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x42, 0x4f, 0x4e, 0x55, 0x53, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x56, 0x45, 0x4c, 0x5f, 0x42, 0x55,
	0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x55, 0x43, 0x49, 0x42, 0x4c, 0x45,
	0x10, 0x04, 0x2a, 0xeb, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x49, 0x4e, 0x49,
	0x53, 0x48, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x4d, 0x50, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x09,
	0x2a, 0x3c, 0x0a, 0x12, 0x4c, 0x75, 0x61, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x55, 0x41, 0x53, 0x48, 0x45,
	0x4c, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c,
	0x55, 0x41, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x5f, 0x48, 0x49, 0x44, 0x45, 0x10, 0x01, 0x2a, 0x66,
	0x0a, 0x0c, 0x4c, 0x75, 0x61, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x4c, 0x55, 0x41, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x55, 0x41, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x5f, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x55, 0x41, 0x53, 0x48, 0x45,
	0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x4c, 0x55, 0x41, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x2a, 0x89, 0x01, 0x0a, 0x12, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x6d, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x4d, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x41, 0x4c, 0x45, 0x53,
	0x4d, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x4d,
	0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x4d, 0x41, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44,
	0x10, 0x03, 0x2a, 0x46, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x01, 0x2a, 0xae, 0x01, 0x0a, 0x09, 0x43,
	0x6f, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x44, 0x45,
	0x58, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x44, 0x45,
	0x58, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x44,
	0x45, 0x58, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x4f, 0x44, 0x45, 0x58, 0x5f, 0x41, 0x4e, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x4f, 0x44, 0x45, 0x58, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x44, 0x45, 0x58, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x53,
	0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x44, 0x45, 0x58, 0x5f, 0x50, 0x55, 0x53, 0x48,
	0x54, 0x49, 0x50, 0x53, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x44, 0x45, 0x58, 0x5f,
	0x56, 0x49, 0x45, 0x57, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x44, 0x45, 0x58, 0x5f,
	0x52, 0x45, 0x4c, 0x49, 0x51, 0x55, 0x41, 0x52, 0x59, 0x10, 0x08, 0x2a, 0xad, 0x01, 0x0a, 0x14,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x52, 0x43, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x43, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x59, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x43, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x41, 0x53, 0x53, 0x45, 0x4d, 0x42, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x43, 0x5f, 0x58, 0x4c, 0x55, 0x41, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x41,
	0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x4c, 0x49, 0x42, 0x49, 0x4c, 0x32, 0x43, 0x50, 0x50,
	0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x4c, 0x49,
	0x42, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4e, 0x44, 0x52,
	0x4f, 0x49, 0x44, 0x5f, 0x4c, 0x49, 0x42, 0x58, 0x4c, 0x55, 0x41, 0x10, 0x0d, 0x12, 0x0c, 0x0a,
	0x08, 0x49, 0x4f, 0x53, 0x5f, 0x48, 0x4b, 0x34, 0x45, 0x10, 0x15, 0x2a, 0x67, 0x0a, 0x11, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x4d, 0x43, 0x4f, 0x49,
	0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x4d, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x50, 0x43, 0x4d, 0x5f, 0x54, 0x4f,
	0x5f, 0x50, 0x53, 0x4e, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x4d, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x50, 0x53, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x50,
	0x43, 0x4d, 0x10, 0x02, 0x2a, 0x71, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x52, 0x45, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x52, 0x45,
	0x5f, 0x43, 0x52, 0x59, 0x53, 0x54, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x58,
	0x50, 0x4c, 0x4f, 0x52, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x45, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x45, 0x4c,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x04, 0x2a, 0x97, 0x01, 0x0a, 0x15, 0x41, 0x73, 0x74, 0x65,
	0x72, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x54, 0x54, 0x4c,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x1c, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10,
	0x03, 0x2a, 0x93, 0x01, 0x0a, 0x11, 0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x55, 0x4e, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x48, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x48, 0x55, 0x4e, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x55, 0x4e,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x10, 0x03, 0x2a, 0x9e, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x55, 0x4e, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x41,
	0x52, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a,
	0x19, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x57,
	0x41, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16,
	0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x6a, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x54, 0x61, 0x67, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x54, 0x41, 0x47, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x10, 0x05, 0x2a, 0xa1, 0x01, 0x0a, 0x10, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x45, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x46, 0x45, 0x41, 0x54, 0x52, 0x55, 0x52, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x43, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x04, 0x2a, 0xcd, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x43, 0x45, 0x50, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x41, 0x44, 0x53, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x41, 0x54, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x05,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x06, 0x2a, 0x36, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x4d,
	0x61, 0x72, 0x6b, 0x54, 0x69, 0x70, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x4d,
	0x41, 0x52, 0x4b, 0x5f, 0x54, 0x49, 0x50, 0x53, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e,
	0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x00,
	0x2a, 0x87, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x58, 0x50, 0x45, 0x44, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x58, 0x50,
	0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x58, 0x50, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x58,
	0x50, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x58, 0x50, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x04, 0x2a, 0xc5, 0x0f, 0x0a, 0x0b, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x0b, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x56, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x59,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f,
	0x51, 0x55, 0x49, 0x54, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x4d, 0x10, 0x15, 0x12, 0x1f, 0x0a, 0x1b, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x1f, 0x12, 0x18, 0x0a, 0x14,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x56,
	0x49, 0x56, 0x41, 0x4c, 0x10, 0x20, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x10, 0x29, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x10, 0x2a, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x4d, 0x49, 0x54, 0x10, 0x2b, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x52,
	0x41, 0x47, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x2c, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4b,
	0x49, 0x43, 0x4b, 0x10, 0x33, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10,
	0x34, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x35, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x55,
	0x49, 0x50, 0x10, 0x36, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56,
	0x49, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x37, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x55, 0x41,
	0x10, 0x38, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x41, 0x44,
	0x5f, 0x54, 0x45, 0x52, 0x52, 0x41, 0x49, 0x4e, 0x10, 0x39, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f,
	0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x4d,
	0x50, 0x10, 0x3a, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x3b, 0x12, 0x1d, 0x0a,
	0x19, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x4e,
	0x43, 0x48, 0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x3c, 0x12, 0x1c, 0x0a, 0x18,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x55, 0x41,
	0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x55, 0x49, 0x10, 0x3d, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x54, 0x45, 0x52, 0x52, 0x41, 0x49, 0x4e, 0x10, 0x3e, 0x12, 0x1f, 0x0a, 0x1b, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x41, 0x46,
	0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x3f, 0x12, 0x1b, 0x0a, 0x17,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x40, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x48,
	0x4f, 0x4d, 0x45, 0x10, 0x41, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x4f, 0x4d,
	0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x42, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x41, 0x4c, 0x4c, 0x45,
	0x52, 0x59, 0x10, 0x43, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x4a, 0x55, 0x4d, 0x50, 0x10, 0x44, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x53, 0x45, 0x45, 0x4b, 0x10, 0x45, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x54, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x46, 0x12, 0x21,
	0x0a, 0x1d, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46,
	0x4f, 0x52, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x49, 0x54, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x10,
	0x47, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x43, 0x4f, 0x55, 0x52, 0x53, 0x45, 0x10, 0x48, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x10, 0x49, 0x12,
	0x29, 0x0a, 0x25, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x53, 0x55, 0x4d, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x42, 0x4f, 0x41, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x4a, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x53, 0x55, 0x52, 0x55,
	0x4d, 0x49, 0x5f, 0x4d, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x10,
	0x4b, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x54, 0x53, 0x55, 0x52, 0x55, 0x4d, 0x49, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x5f, 0x4d, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x10,
	0x4c, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x57, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4d, 0x50, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x4d, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x4c, 0x4b, 0x5f, 0x45, 0x58, 0x45,
	0x43, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x4e, 0x12, 0x25, 0x0a, 0x21,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x41,
	0x4c, 0x41, 0x4d, 0x50, 0x5f, 0x42, 0x4f, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x10, 0x4f, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x4c, 0x41, 0x4d, 0x50, 0x5f, 0x42, 0x4f, 0x41, 0x54,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x50, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47,
	0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b,
	0x10, 0x51, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x49, 0x52, 0x4f, 0x44, 0x4f, 0x52, 0x49, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x52, 0x12, 0x1d, 0x0a, 0x19,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x41, 0x4c,
	0x4c, 0x45, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x53, 0x12, 0x2c, 0x0a, 0x28, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x4d, 0x4d,
	0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x56, 0x32, 0x5f, 0x42, 0x4f, 0x41, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x54, 0x12, 0x32, 0x0a, 0x2e, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x4c, 0x41, 0x4e, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x47, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x55, 0x12, 0x2e, 0x0a,
	0x2a, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x52,
	0x41, 0x56, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x4e, 0x4f, 0x43, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x52,
	0x41, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x56, 0x12, 0x29, 0x0a,
	0x25, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x56, 0x49,
	0x4e, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x57, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x47, 0x55, 0x53, 0x5f,
	0x46, 0x49, 0x47, 0x48, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x10, 0x58, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x42, 0x52, 0x49, 0x43, 0x4b, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52,
	0x10, 0x59, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x42, 0x52, 0x49, 0x43, 0x4b, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52,
	0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x5a, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x47, 0x55, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x5b, 0x12,
	0x24, 0x0a, 0x20, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x49, 0x4e,
	0x47, 0x4c, 0x45, 0x10, 0x5c, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x4e, 0x5f, 0x56, 0x33, 0x5f, 0x42, 0x4f, 0x41,
	0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x5d, 0x12, 0x24, 0x0a, 0x20,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x4e,
	0x5f, 0x56, 0x33, 0x5f, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x10, 0x5e, 0x2a, 0x8c, 0x01, 0x0a, 0x15, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x25,
	0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x4f, 0x4d,
	0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x52, 0x49, 0x45, 0x4e,
	0x44, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f,
	0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x4f, 0x4d,
	0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10,
	0x02, 0x2a, 0xb8, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x45, 0x41,
	0x4d, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x46,
	0x52, 0x49, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x48, 0x49, 0x44, 0x45, 0x41, 0x4e, 0x44, 0x53, 0x45, 0x45, 0x4b,
	0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x48, 0x49,
	0x44, 0x45, 0x41, 0x4e, 0x44, 0x53, 0x45, 0x45, 0x4b, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x05,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4c, 0x41, 0x4e, 0x5f,
	0x56, 0x33, 0x5f, 0x42, 0x4f, 0x41, 0x54, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x64, 0x2a, 0x9a, 0x01, 0x0a,
	0x10, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1d,
	0x0a, 0x19, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12, 0x24, 0x0a,
	0x20, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x59, 0x5f, 0x57, 0x4f, 0x52, 0x4c,
	0x44, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x57, 0x4f, 0x52,
	0x4c, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x42,
	0x59, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x03, 0x2a, 0xb7, 0x01, 0x0a, 0x1f, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a,
	0x28, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x33, 0x44,
	0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x56, 0x41, 0x54,
	0x41, 0x52, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f,
	0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x10, 0x02, 0x2a, 0x77, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x64,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x5f, 0x47, 0x41, 0x44, 0x47, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x41, 0x44, 0x47,
	0x45, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x41, 0x44, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x47, 0x41, 0x44, 0x47, 0x45, 0x54, 0x5f, 0x47, 0x4d, 0x10, 0x03, 0x2a, 0x81, 0x01, 0x0a,
	0x16, 0x4c, 0x75, 0x6e, 0x61, 0x52, 0x69, 0x74, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x55, 0x4e, 0x41, 0x5f,
	0x52, 0x49, 0x54, 0x45, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x4c, 0x55,
	0x4e, 0x41, 0x5f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x1c, 0x4c, 0x55, 0x4e, 0x41, 0x5f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x48, 0x49, 0x4e, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x02,
	0x2a, 0x72, 0x0a, 0x15, 0x4c, 0x75, 0x6e, 0x61, 0x52, 0x69, 0x74, 0x65, 0x48, 0x69, 0x6e, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x55, 0x4e,
	0x41, 0x5f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x55, 0x4e, 0x41, 0x5f,
	0x52, 0x49, 0x54, 0x45, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x55, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x55, 0x4e, 0x41, 0x5f, 0x52, 0x49,
	0x54, 0x45, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x45,
	0x53, 0x54, 0x10, 0x02, 0x2a, 0x4c, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x41, 0x52,
	0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
	0x4c, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x10, 0x01, 0x2a, 0x80, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a,
	0x1a, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x4b, 0x45,
	0x59, 0x42, 0x4f, 0x52, 0x44, 0x5f, 0x4d, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x50, 0x41, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x4f, 0x55, 0x43, 0x48, 0x5f, 0x50, 0x41,
	0x4e, 0x45, 0x4c, 0x10, 0x03, 0x2a, 0x82, 0x01, 0x0a, 0x12, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x19,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4f,
	0x55, 0x54, 0x5f, 0x53, 0x54, 0x55, 0x43, 0x4b, 0x10, 0x02, 0x2a, 0x64, 0x0a, 0x10, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a,
	0x0a, 0x16, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4c,
	0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x50, 0x43, 0x4d, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x53, 0x4e, 0x10, 0x02,
	0x2a, 0xbb, 0x01, 0x0a, 0x11, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x49,
	0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f,
	0x4d, 0x41, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x49,
	0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x49, 0x53, 0x4c, 0x41, 0x4e, 0x44, 0x10, 0x04,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53,
	0x54, 0x5f, 0x45, 0x4e, 0x4b, 0x41, 0x4e, 0x4f, 0x4d, 0x49, 0x59, 0x41, 0x10, 0x05, 0x12, 0x21,
	0x0a, 0x1d, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f,
	0x4d, 0x49, 0x43, 0x48, 0x49, 0x41, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x53, 0x55, 0x52, 0x49, 0x10,
	0x07, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e,
	0x53, 0x54, 0x5f, 0x32, 0x38, 0x5f, 0x49, 0x53, 0x4c, 0x41, 0x4e, 0x44, 0x10, 0x09, 0x2a, 0x89,
	0x01, 0x0a, 0x10, 0x43, 0x69, 0x74, 0x79, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x49, 0x54, 0x59, 0x49, 0x44, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x49,
	0x54, 0x59, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x4e, 0x47, 0x44,
	0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x49, 0x54, 0x59, 0x49, 0x44, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x59, 0x55, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x49, 0x54, 0x59, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x44, 0x41, 0x4f, 0x51,
	0x49, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x49, 0x54, 0x59, 0x49, 0x44, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x54, 0x5f, 0x58, 0x55, 0x4d, 0x49, 0x10, 0x04, 0x2a, 0xb4, 0x01, 0x0a, 0x16, 0x41,
	0x72, 0x61, 0x6e, 0x61, 0x72, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x52, 0x41, 0x4e, 0x41, 0x52, 0x41,
	0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x52, 0x41, 0x4e,
	0x41, 0x52, 0x41, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x52, 0x41, 0x4e, 0x41, 0x52, 0x41, 0x5f, 0x43, 0x4f,
	0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x52,
	0x41, 0x4e, 0x41, 0x52, 0x41, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10,
	0x03, 0x2a, 0x41, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x02, 0x2a, 0x8d, 0x01, 0x0a, 0x1b, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x52,
	0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x56, 0x41,
	0x54, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x24,
	0x0a, 0x20, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x02, 0x2a, 0xbf, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52,
	0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x41,
	0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x50, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x56, 0x41,
	0x54, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x10, 0x02, 0x12,
	0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f,
	0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x79, 0x76, 0x61, 0x74, 0x2d, 0x68, 0x65, 0x6c, 0x70,
	0x65, 0x72, 0x2f, 0x68, 0x6b, 0x34, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_define_proto_rawDescOnce sync.Once
	file_define_proto_rawDescData = file_define_proto_rawDesc
)

func file_define_proto_rawDescGZIP() []byte {
	file_define_proto_rawDescOnce.Do(func() {
		file_define_proto_rawDescData = protoimpl.X.CompressGZIP(file_define_proto_rawDescData)
	})
	return file_define_proto_rawDescData
}

var file_define_proto_enumTypes = make([]protoimpl.EnumInfo, 82)
var file_define_proto_msgTypes = make([]protoimpl.MessageInfo, 203)
var file_define_proto_goTypes = []interface{}{
	(ENetReason)(0),                                     // 0: proto.ENetReason
	(AccountType)(0),                                    // 1: proto.AccountType
	(ChannelIdType)(0),                                  // 2: proto.ChannelIdType
	(ServiceType)(0),                                    // 3: proto.ServiceType
	(ClientType)(0),                                     // 4: proto.ClientType
	(RegionType)(0),                                     // 5: proto.RegionType
	(ActionReasonType)(0),                               // 6: proto.ActionReasonType
	(StoreType)(0),                                      // 7: proto.StoreType
	(VirtualItem)(0),                                    // 8: proto.VirtualItem
	(ReliquaryFilterKey)(0),                             // 9: proto.ReliquaryFilterKey
	(ReliquaryFilterLockState)(0),                       // 10: proto.ReliquaryFilterLockState
	(ReliquaryFilterLevelState)(0),                      // 11: proto.ReliquaryFilterLevelState
	(ReliquaryFilterWearedState)(0),                     // 12: proto.ReliquaryFilterWearedState
	(AbilityScalarType)(0),                              // 13: proto.AbilityScalarType
	(MotionState)(0),                                    // 14: proto.MotionState
	(ProtEntityType)(0),                                 // 15: proto.ProtEntityType
	(NpcTalkState)(0),                                   // 16: proto.NpcTalkState
	(VehicleSlot)(0),                                    // 17: proto.VehicleSlot
	(MonsterBornType)(0),                                // 18: proto.MonsterBornType
	(GadgetBornType)(0),                                 // 19: proto.GadgetBornType
	(MovingPlatformType)(0),                             // 20: proto.MovingPlatformType
	(GadgetPlayType)(0),                                 // 21: proto.GadgetPlayType
	(FoundationStatus)(0),                               // 22: proto.FoundationStatus
	(ChangHpReason)(0),                                  // 23: proto.ChangHpReason
	(PlayerDieType)(0),                                  // 24: proto.PlayerDieType
	(PlayerDieOption)(0),                                // 25: proto.PlayerDieOption
	(FetterState)(0),                                    // 26: proto.FetterState
	(AvatarExpeditionState)(0),                          // 27: proto.AvatarExpeditionState
	(AvatarType)(0),                                     // 28: proto.AvatarType
	(EventTriggerType)(0),                               // 29: proto.EventTriggerType
	(MailCollectState)(0),                               // 30: proto.MailCollectState
	(MpSettingType)(0),                                  // 31: proto.MpSettingType
	(MathExpressionType)(0),                             // 32: proto.MathExpressionType
	(LoginRewardConfigType)(0),                          // 33: proto.LoginRewardConfigType
	(LanguageType)(0),                                   // 34: proto.LanguageType
	(PlatformType)(0),                                   // 35: proto.PlatformType
	(MapMarkPointType)(0),                               // 36: proto.MapMarkPointType
	(MapMarkFromType)(0),                                // 37: proto.MapMarkFromType
	(DungeonCandidateTeamInviteState)(0),                // 38: proto.DungeonCandidateTeamInviteState
	(MonsterGuestBanDrop)(0),                            // 39: proto.MonsterGuestBanDrop
	(GadgetGuestBanDrop)(0),                             // 40: proto.GadgetGuestBanDrop
	(GroupLoadStrategy)(0),                              // 41: proto.GroupLoadStrategy
	(MatchType)(0),                                      // 42: proto.MatchType
	(MpPlayType)(0),                                     // 43: proto.MpPlayType
	(OpActivityType)(0),                                 // 44: proto.OpActivityType
	(MatchReason)(0),                                    // 45: proto.MatchReason
	(LuaShellNotifyType)(0),                             // 46: proto.LuaShellNotifyType
	(LuaShellType)(0),                                   // 47: proto.LuaShellType
	(SalesmanStatusType)(0),                             // 48: proto.SalesmanStatusType
	(SecurityCheckType)(0),                              // 49: proto.SecurityCheckType
	(CodexType)(0),                                      // 50: proto.CodexType
	(SegmentCRCModuleType)(0),                           // 51: proto.SegmentCRCModuleType
	(ExchangeMcoinType)(0),                              // 52: proto.ExchangeMcoinType
	(ExploreType)(0),                                    // 53: proto.ExploreType
	(AsterLittleStageState)(0),                          // 54: proto.AsterLittleStageState
	(HuntingOfferState)(0),                              // 55: proto.HuntingOfferState
	(RegionSearchState)(0),                              // 56: proto.RegionSearchState
	(PlayerTag)(0),                                      // 57: proto.PlayerTag
	(FeatureBlockType)(0),                               // 58: proto.FeatureBlockType
	(ReportReasonType)(0),                               // 59: proto.ReportReasonType
	(MapMarkTipsType)(0),                                // 60: proto.MapMarkTipsType
	(ExpeditionState)(0),                                // 61: proto.ExpeditionState
	(EnterReason)(0),                                    // 62: proto.EnterReason
	(FriendEnterHomeOption)(0),                          // 63: proto.FriendEnterHomeOption
	(ChatChannel)(0),                                    // 64: proto.ChatChannel
	(LeaveWorldReason)(0),                               // 65: proto.LeaveWorldReason
	(DungeonCandidateTeamPlayerState)(0),                // 66: proto.DungeonCandidateTeamPlayerState
	(CreateGadgetReason)(0),                             // 67: proto.CreateGadgetReason
	(LunaRiteHintStatusType)(0),                         // 68: proto.LunaRiteHintStatusType
	(LunaRiteHintPointType)(0),                          // 69: proto.LunaRiteHintPointType
	(GroupVariableType)(0),                              // 70: proto.GroupVariableType
	(ClientInputType)(0),                                // 71: proto.ClientInputType
	(CustomDungeonEvent)(0),                             // 72: proto.CustomDungeonEvent
	(PlatformCategory)(0),                               // 73: proto.PlatformCategory
	(SceneidConstValue)(0),                              // 74: proto.SceneidConstValue
	(CityidConstValue)(0),                               // 75: proto.CityidConstValue
	(AranaraCollectionState)(0),                         // 76: proto.AranaraCollectionState
	(AuditState)(0),                                     // 77: proto.AuditState
	(AvatarRenameAuditSourceType)(0),                    // 78: proto.AvatarRenameAuditSourceType
	(ResetAvatarRenameReason)(0),                        // 79: proto.ResetAvatarRenameReason
	(BreakoutAction_BreakoutActionType)(0),              // 80: proto.BreakoutAction.BreakoutActionType
	(TrialAvatarGrantRecord_GrantReason)(0),             // 81: proto.TrialAvatarGrantRecord.GrantReason
	(*ParamList)(nil),                                   // 82: proto.ParamList
	(*PropValue)(nil),                                   // 83: proto.PropValue
	(*Uint32Pair)(nil),                                  // 84: proto.Uint32Pair
	(*RegionSimpleInfo)(nil),                            // 85: proto.RegionSimpleInfo
	(*QueryRegionListHttpRsp)(nil),                      // 86: proto.QueryRegionListHttpRsp
	(*ForceUpdateInfo)(nil),                             // 87: proto.ForceUpdateInfo
	(*StopServerInfo)(nil),                              // 88: proto.StopServerInfo
	(*ResVersionConfig)(nil),                            // 89: proto.ResVersionConfig
	(*RegionInfo)(nil),                                  // 90: proto.RegionInfo
	(*QueryCurrRegionHttpRsp)(nil),                      // 91: proto.QueryCurrRegionHttpRsp
	(*PlayerUidExtInfo)(nil),                            // 92: proto.PlayerUidExtInfo
	(*Reliquary)(nil),                                   // 93: proto.Reliquary
	(*Weapon)(nil),                                      // 94: proto.Weapon
	(*MaterialDeleteInfo)(nil),                          // 95: proto.MaterialDeleteInfo
	(*Material)(nil),                                    // 96: proto.Material
	(*Equip)(nil),                                       // 97: proto.Equip
	(*Furniture)(nil),                                   // 98: proto.Furniture
	(*Item)(nil),                                        // 99: proto.Item
	(*ItemParam)(nil),                                   // 100: proto.ItemParam
	(*EquipParam)(nil),                                  // 101: proto.EquipParam
	(*EquipParamList)(nil),                              // 102: proto.EquipParamList
	(*Reward)(nil),                                      // 103: proto.Reward
	(*AbilityString)(nil),                               // 104: proto.AbilityString
	(*AbilityFloatValue)(nil),                           // 105: proto.AbilityFloatValue
	(*AbilityScalarValueEntry)(nil),                     // 106: proto.AbilityScalarValueEntry
	(*AbilityAppliedAbility)(nil),                       // 107: proto.AbilityAppliedAbility
	(*AbilityAttachedModifier)(nil),                     // 108: proto.AbilityAttachedModifier
	(*ModifierDurability)(nil),                          // 109: proto.ModifierDurability
	(*AbilityAppliedModifier)(nil),                      // 110: proto.AbilityAppliedModifier
	(*MassivePropParam)(nil),                            // 111: proto.MassivePropParam
	(*MassivePropSyncInfo)(nil),                         // 112: proto.MassivePropSyncInfo
	(*BreakoutVector2)(nil),                             // 113: proto.BreakoutVector2
	(*BreakoutBrickInfo)(nil),                           // 114: proto.BreakoutBrickInfo
	(*BreakoutPhysicalObjectModifier)(nil),              // 115: proto.BreakoutPhysicalObjectModifier
	(*BreakoutPhysicalObject)(nil),                      // 116: proto.BreakoutPhysicalObject
	(*BreakoutSpawnPoint)(nil),                          // 117: proto.BreakoutSpawnPoint
	(*BreakoutElementReactionCounter)(nil),              // 118: proto.BreakoutElementReactionCounter
	(*BreakoutSyncConnectUidInfo)(nil),                  // 119: proto.BreakoutSyncConnectUidInfo
	(*BreakoutSnapShot)(nil),                            // 120: proto.BreakoutSnapShot
	(*BreakoutAction)(nil),                              // 121: proto.BreakoutAction
	(*AbilityMixinRecoverInfo)(nil),                     // 122: proto.AbilityMixinRecoverInfo
	(*AbilitySyncStateInfo)(nil),                        // 123: proto.AbilitySyncStateInfo
	(*AbilityEmbryo)(nil),                               // 124: proto.AbilityEmbryo
	(*AbilityControlBlock)(nil),                         // 125: proto.AbilityControlBlock
	(*Vector)(nil),                                      // 126: proto.Vector
	(*VectorPlane)(nil),                                 // 127: proto.VectorPlane
	(*Vector3Int)(nil),                                  // 128: proto.Vector3Int
	(*EntityMoveInfo)(nil),                              // 129: proto.EntityMoveInfo
	(*MotionInfo)(nil),                                  // 130: proto.MotionInfo
	(*PlaceInfo)(nil),                                   // 131: proto.PlaceInfo
	(*SceneWeaponInfo)(nil),                             // 132: proto.SceneWeaponInfo
	(*SceneReliquaryInfo)(nil),                          // 133: proto.SceneReliquaryInfo
	(*ServerBuff)(nil),                                  // 134: proto.ServerBuff
	(*CurVehicleInfo)(nil),                              // 135: proto.CurVehicleInfo
	(*AvatarExcelInfo)(nil),                             // 136: proto.AvatarExcelInfo
	(*SceneAvatarInfo)(nil),                             // 137: proto.SceneAvatarInfo
	(*SceneFishInfo)(nil),                               // 138: proto.SceneFishInfo
	(*FishtankFishInfo)(nil),                            // 139: proto.FishtankFishInfo
	(*SceneMonsterInfo)(nil),                            // 140: proto.SceneMonsterInfo
	(*SceneNpcInfo)(nil),                                // 141: proto.SceneNpcInfo
	(*WorktopInfo)(nil),                                 // 142: proto.WorktopInfo
	(*MathQuaternion)(nil),                              // 143: proto.MathQuaternion
	(*PlatformInfo)(nil),                                // 144: proto.PlatformInfo
	(*RoutePoint)(nil),                                  // 145: proto.RoutePoint
	(*Route)(nil),                                       // 146: proto.Route
	(*MonsterRoute)(nil),                                // 147: proto.MonsterRoute
	(*WeatherInfo)(nil),                                 // 148: proto.WeatherInfo
	(*ClientGadgetInfo)(nil),                            // 149: proto.ClientGadgetInfo
	(*AbilityGadgetInfo)(nil),                           // 150: proto.AbilityGadgetInfo
	(*GatherGadgetInfo)(nil),                            // 151: proto.GatherGadgetInfo
	(*StatueGadgetInfo)(nil),                            // 152: proto.StatueGadgetInfo
	(*WeeklyBossResinDiscountInfo)(nil),                 // 153: proto.WeeklyBossResinDiscountInfo
	(*BossChestInfo)(nil),                               // 154: proto.BossChestInfo
	(*BlossomChestInfo)(nil),                            // 155: proto.BlossomChestInfo
	(*GadgetCrucibleInfo)(nil),                          // 156: proto.GadgetCrucibleInfo
	(*GadgetPlayInfo)(nil),                              // 157: proto.GadgetPlayInfo
	(*MpPlayRewardInfo)(nil),                            // 158: proto.MpPlayRewardInfo
	(*GadgetGeneralRewardInfo)(nil),                     // 159: proto.GadgetGeneralRewardInfo
	(*OfferingInfo)(nil),                                // 160: proto.OfferingInfo
	(*BuildingInfo)(nil),                                // 161: proto.BuildingInfo
	(*FoundationInfo)(nil),                              // 162: proto.FoundationInfo
	(*VehicleMember)(nil),                               // 163: proto.VehicleMember
	(*VehicleInfo)(nil),                                 // 164: proto.VehicleInfo
	(*EchoShellInfo)(nil),                               // 165: proto.EchoShellInfo
	(*ScreenInfo)(nil),                                  // 166: proto.ScreenInfo
	(*FishPoolInfo)(nil),                                // 167: proto.FishPoolInfo
	(*CustomCommonNodeInfo)(nil),                        // 168: proto.CustomCommonNodeInfo
	(*CustomGadgetTreeInfo)(nil),                        // 169: proto.CustomGadgetTreeInfo
	(*RoguelikeGadgetInfo)(nil),                         // 170: proto.RoguelikeGadgetInfo
	(*NightCrowGadgetInfo)(nil),                         // 171: proto.NightCrowGadgetInfo
	(*DeshretObeliskGadgetInfo)(nil),                    // 172: proto.DeshretObeliskGadgetInfo
	(*CoinCollectOperatorInfo)(nil),                     // 173: proto.CoinCollectOperatorInfo
	(*SceneGadgetInfo)(nil),                             // 174: proto.SceneGadgetInfo
	(*AnimatorParameterValueInfo)(nil),                  // 175: proto.AnimatorParameterValueInfo
	(*ServantInfo)(nil),                                 // 176: proto.ServantInfo
	(*SceneEntityAiInfo)(nil),                           // 177: proto.SceneEntityAiInfo
	(*EntityRendererChangedInfo)(nil),                   // 178: proto.EntityRendererChangedInfo
	(*PropPair)(nil),                                    // 179: proto.PropPair
	(*FightPropPair)(nil),                               // 180: proto.FightPropPair
	(*AnimatorParameterValueInfoPair)(nil),              // 181: proto.AnimatorParameterValueInfoPair
	(*EntityEnvironmentInfo)(nil),                       // 182: proto.EntityEnvironmentInfo
	(*EntityClientExtraInfo)(nil),                       // 183: proto.EntityClientExtraInfo
	(*EntityAuthorityInfo)(nil),                         // 184: proto.EntityAuthorityInfo
	(*SceneEntityInfo)(nil),                             // 185: proto.SceneEntityInfo
	(*CreateGadgetInfo)(nil),                            // 186: proto.CreateGadgetInfo
	(*CreateEntityInfo)(nil),                            // 187: proto.CreateEntityInfo
	(*TrialAvatarGrantRecord)(nil),                      // 188: proto.TrialAvatarGrantRecord
	(*TrialAvatarInfo)(nil),                             // 189: proto.TrialAvatarInfo
	(*AvatarSkillInfo)(nil),                             // 190: proto.AvatarSkillInfo
	(*FetterData)(nil),                                  // 191: proto.FetterData
	(*AvatarFetterInfo)(nil),                            // 192: proto.AvatarFetterInfo
	(*AvatarExpeditionInfo)(nil),                        // 193: proto.AvatarExpeditionInfo
	(*AvatarEquipAffixInfo)(nil),                        // 194: proto.AvatarEquipAffixInfo
	(*AvatarInfo)(nil),                                  // 195: proto.AvatarInfo
	(*ShowEquip)(nil),                                   // 196: proto.ShowEquip
	(*ShowAvatarInfo)(nil),                              // 197: proto.ShowAvatarInfo
	(*Quest)(nil),                                       // 198: proto.Quest
	(*NpcPositionInfo)(nil),                             // 199: proto.NpcPositionInfo
	(*MailTextContent)(nil),                             // 200: proto.MailTextContent
	(*MailItem)(nil),                                    // 201: proto.MailItem
	(*MailData)(nil),                                    // 202: proto.MailData
	(*OnlinePlayerInfo)(nil),                            // 203: proto.OnlinePlayerInfo
	(*Birthday)(nil),                                    // 204: proto.Birthday
	(*MapMarkPoint)(nil),                                // 205: proto.MapMarkPoint
	(*MassiveWaterInfo)(nil),                            // 206: proto.MassiveWaterInfo
	(*MassiveGrassInfo)(nil),                            // 207: proto.MassiveGrassInfo
	(*MassiveBoxInfo)(nil),                              // 208: proto.MassiveBoxInfo
	(*ClientMassiveEntity)(nil),                         // 209: proto.ClientMassiveEntity
	(*ShapeSphere)(nil),                                 // 210: proto.ShapeSphere
	(*ShapeBox)(nil),                                    // 211: proto.ShapeBox
	(*ServerMassiveEntity)(nil),                         // 212: proto.ServerMassiveEntity
	(*MassiveEntityState)(nil),                          // 213: proto.MassiveEntityState
	(*EntityClientData)(nil),                            // 214: proto.EntityClientData
	(*BlockInfo)(nil),                                   // 215: proto.BlockInfo
	(*ShopMcoinProduct)(nil),                            // 216: proto.ShopMcoinProduct
	(*ShopCardProduct)(nil),                             // 217: proto.ShopCardProduct
	(*PlayProduct)(nil),                                 // 218: proto.PlayProduct
	(*ShopConcertProduct)(nil),                          // 219: proto.ShopConcertProduct
	(*HashedString)(nil),                                // 220: proto.HashedString
	(*PlayTeamEntityInfo)(nil),                          // 221: proto.PlayTeamEntityInfo
	(*FeatureBlockInfo)(nil),                            // 222: proto.FeatureBlockInfo
	(*MapMarkTipsInfo)(nil),                             // 223: proto.MapMarkTipsInfo
	(*ExhibitionDisplayInfo)(nil),                       // 224: proto.ExhibitionDisplayInfo
	(*ProfilePicture)(nil),                              // 225: proto.ProfilePicture
	(*RedPointData)(nil),                                // 226: proto.RedPointData
	(*HomeMarkPointNPCData)(nil),                        // 227: proto.HomeMarkPointNPCData
	(*HomeMarkPointSuiteData)(nil),                      // 228: proto.HomeMarkPointSuiteData
	(*HomeMarkPointFurnitureData)(nil),                  // 229: proto.HomeMarkPointFurnitureData
	(*MapAreaInfo)(nil),                                 // 230: proto.MapAreaInfo
	(*HomeFurnitureArrangementMuipData)(nil),            // 231: proto.HomeFurnitureArrangementMuipData
	(*HomeBlockArrangementMuipData)(nil),                // 232: proto.HomeBlockArrangementMuipData
	(*HomeSceneArrangementMuipData)(nil),                // 233: proto.HomeSceneArrangementMuipData
	(*CustomDungeonBattleRecordMuipData)(nil),           // 234: proto.CustomDungeonBattleRecordMuipData
	(*PlayerCustomDungeonMuipData)(nil),                 // 235: proto.PlayerCustomDungeonMuipData
	(*CustomDungeonSettingMuipData)(nil),                // 236: proto.CustomDungeonSettingMuipData
	(*CustomDungeonAbstractMuipData)(nil),               // 237: proto.CustomDungeonAbstractMuipData
	(*CustomDungeonSocialMuipData)(nil),                 // 238: proto.CustomDungeonSocialMuipData
	(*CustomDungeonBriefMuipData)(nil),                  // 239: proto.CustomDungeonBriefMuipData
	(*CustomDungeonBatchBriefMuipData)(nil),             // 240: proto.CustomDungeonBatchBriefMuipData
	(*HomeBlueprintBriefMuipData)(nil),                  // 241: proto.HomeBlueprintBriefMuipData
	(*HomeBlueprintBatchBriefMuipData)(nil),             // 242: proto.HomeBlueprintBatchBriefMuipData
	(*ContentAuditInfo)(nil),                            // 243: proto.ContentAuditInfo
	(*ContentAuditData)(nil),                            // 244: proto.ContentAuditData
	(*ContentAuditField)(nil),                           // 245: proto.ContentAuditField
	(*ContentAuditAuxiliaryField)(nil),                  // 246: proto.ContentAuditAuxiliaryField
	(*NicknameSignatureAuditData)(nil),                  // 247: proto.NicknameSignatureAuditData
	(*AvatarRenameAuditContent)(nil),                    // 248: proto.AvatarRenameAuditContent
	(*AvatarRenameContentAuditField)(nil),               // 249: proto.AvatarRenameContentAuditField
	(*AvatarRenameAuditData)(nil),                       // 250: proto.AvatarRenameAuditData
	(*ActivityDungeonAvatar)(nil),                       // 251: proto.ActivityDungeonAvatar
	(*GCGChallengeData)(nil),                            // 252: proto.GCGChallengeData
	(*GCGDuelExtra)(nil),                                // 253: proto.GCGDuelExtra
	(*QueryIpRegionData)(nil),                           // 254: proto.QueryIpRegionData
	nil,                                                 // 255: proto.Weapon.AffixMapEntry
	(*MaterialDeleteInfo_CountDownDelete)(nil),          // 256: proto.MaterialDeleteInfo.CountDownDelete
	(*MaterialDeleteInfo_DateTimeDelete)(nil),           // 257: proto.MaterialDeleteInfo.DateTimeDelete
	(*MaterialDeleteInfo_DelayWeekCountDownDelete)(nil), // 258: proto.MaterialDeleteInfo.DelayWeekCountDownDelete
	nil,                               // 259: proto.MaterialDeleteInfo.CountDownDelete.DeleteTimeNumMapEntry
	nil,                               // 260: proto.MaterialDeleteInfo.DelayWeekCountDownDelete.DeleteTimeNumMapEntry
	nil,                               // 261: proto.SceneWeaponInfo.AffixMapEntry
	nil,                               // 262: proto.SceneAvatarInfo.SkillLevelMapEntry
	nil,                               // 263: proto.SceneAvatarInfo.ProudSkillExtraLevelMapEntry
	nil,                               // 264: proto.SceneMonsterInfo.SummonTagMapEntry
	nil,                               // 265: proto.BossChestInfo.UidDiscountMapEntry
	nil,                               // 266: proto.SceneEntityAiInfo.SkillCdMapEntry
	nil,                               // 267: proto.SceneEntityAiInfo.AiThreatMapEntry
	nil,                               // 268: proto.SceneEntityAiInfo.SkillGroupCdMapEntry
	nil,                               // 269: proto.EntityRendererChangedInfo.ChangedRenderersEntry
	(*CreateGadgetInfo_Chest)(nil),    // 270: proto.CreateGadgetInfo.Chest
	nil,                               // 271: proto.AvatarInfo.PropMapEntry
	nil,                               // 272: proto.AvatarInfo.FightPropMapEntry
	nil,                               // 273: proto.AvatarInfo.SkillMapEntry
	nil,                               // 274: proto.AvatarInfo.SkillLevelMapEntry
	nil,                               // 275: proto.AvatarInfo.ProudSkillExtraLevelMapEntry
	nil,                               // 276: proto.ShowAvatarInfo.PropMapEntry
	nil,                               // 277: proto.ShowAvatarInfo.FightPropMapEntry
	nil,                               // 278: proto.ShowAvatarInfo.SkillLevelMapEntry
	nil,                               // 279: proto.ShowAvatarInfo.ProudSkillExtraLevelMapEntry
	nil,                               // 280: proto.Quest.LackedNpcMapEntry
	nil,                               // 281: proto.Quest.LackedPlaceMapEntry
	(*ShopCardProduct_ResinCard)(nil), // 282: proto.ShopCardProduct.ResinCard
	nil,                               // 283: proto.CustomDungeonAbstractMuipData.BrickStatisticsMapEntry
	nil,                               // 284: proto.GCGDuelExtra.CardFaceMapEntry
}
var file_define_proto_depIdxs = []int32{
	85,  // 0: proto.QueryRegionListHttpRsp.region_list:type_name -> proto.RegionSimpleInfo
	89,  // 1: proto.RegionInfo.res_version_config:type_name -> proto.ResVersionConfig
	89,  // 2: proto.RegionInfo.next_res_version_config:type_name -> proto.ResVersionConfig
	90,  // 3: proto.QueryCurrRegionHttpRsp.region_info:type_name -> proto.RegionInfo
	87,  // 4: proto.QueryCurrRegionHttpRsp.force_udpate:type_name -> proto.ForceUpdateInfo
	88,  // 5: proto.QueryCurrRegionHttpRsp.stop_server:type_name -> proto.StopServerInfo
	255, // 6: proto.Weapon.affix_map:type_name -> proto.Weapon.AffixMapEntry
	256, // 7: proto.MaterialDeleteInfo.count_down_delete:type_name -> proto.MaterialDeleteInfo.CountDownDelete
	257, // 8: proto.MaterialDeleteInfo.date_delete:type_name -> proto.MaterialDeleteInfo.DateTimeDelete
	258, // 9: proto.MaterialDeleteInfo.delay_week_count_down_delete:type_name -> proto.MaterialDeleteInfo.DelayWeekCountDownDelete
	95,  // 10: proto.Material.delete_info:type_name -> proto.MaterialDeleteInfo
	93,  // 11: proto.Equip.reliquary:type_name -> proto.Reliquary
	94,  // 12: proto.Equip.weapon:type_name -> proto.Weapon
	96,  // 13: proto.Item.material:type_name -> proto.Material
	97,  // 14: proto.Item.equip:type_name -> proto.Equip
	98,  // 15: proto.Item.furniture:type_name -> proto.Furniture
	101, // 16: proto.EquipParamList.item_list:type_name -> proto.EquipParam
	100, // 17: proto.Reward.item_list:type_name -> proto.ItemParam
	104, // 18: proto.AbilityScalarValueEntry.key:type_name -> proto.AbilityString
	13,  // 19: proto.AbilityScalarValueEntry.value_type:type_name -> proto.AbilityScalarType
	104, // 20: proto.AbilityAppliedAbility.ability_name:type_name -> proto.AbilityString
	104, // 21: proto.AbilityAppliedAbility.ability_override:type_name -> proto.AbilityString
	106, // 22: proto.AbilityAppliedAbility.override_map:type_name -> proto.AbilityScalarValueEntry
	104, // 23: proto.AbilityAppliedModifier.parent_ability_name:type_name -> proto.AbilityString
	104, // 24: proto.AbilityAppliedModifier.parent_ability_override:type_name -> proto.AbilityString
	108, // 25: proto.AbilityAppliedModifier.attached_instanced_modifier:type_name -> proto.AbilityAttachedModifier
	109, // 26: proto.AbilityAppliedModifier.modifier_durability:type_name -> proto.ModifierDurability
	111, // 27: proto.MassivePropSyncInfo.prop_list:type_name -> proto.MassivePropParam
	113, // 28: proto.BreakoutPhysicalObject.pos:type_name -> proto.BreakoutVector2
	113, // 29: proto.BreakoutPhysicalObject.move_dir:type_name -> proto.BreakoutVector2
	115, // 30: proto.BreakoutPhysicalObject.modifier_list:type_name -> proto.BreakoutPhysicalObjectModifier
	114, // 31: proto.BreakoutPhysicalObject.info_list:type_name -> proto.BreakoutBrickInfo
	116, // 32: proto.BreakoutSpawnPoint.spawned_brick_list:type_name -> proto.BreakoutPhysicalObject
	116, // 33: proto.BreakoutSnapShot.ball_list:type_name -> proto.BreakoutPhysicalObject
	116, // 34: proto.BreakoutSnapShot.physical_object_list:type_name -> proto.BreakoutPhysicalObject
	121, // 35: proto.BreakoutSnapShot.action_list:type_name -> proto.BreakoutAction
	117, // 36: proto.BreakoutSnapShot.spawn_point_list:type_name -> proto.BreakoutSpawnPoint
	118, // 37: proto.BreakoutSnapShot.brick_element_reaction_list:type_name -> proto.BreakoutElementReactionCounter
	118, // 38: proto.BreakoutSnapShot.ball_element_reaction_list:type_name -> proto.BreakoutElementReactionCounter
	119, // 39: proto.BreakoutSnapShot.uid_info_list:type_name -> proto.BreakoutSyncConnectUidInfo
	116, // 40: proto.BreakoutSnapShot.dynamic_object_list:type_name -> proto.BreakoutPhysicalObject
	80,  // 41: proto.BreakoutAction.action_type:type_name -> proto.BreakoutAction.BreakoutActionType
	113, // 42: proto.BreakoutAction.pos:type_name -> proto.BreakoutVector2
	113, // 43: proto.BreakoutAction.move_dir:type_name -> proto.BreakoutVector2
	113, // 44: proto.BreakoutAction.extra_ball_dir:type_name -> proto.BreakoutVector2
	112, // 45: proto.AbilityMixinRecoverInfo.massive_prop_list:type_name -> proto.MassivePropSyncInfo
	120, // 46: proto.AbilityMixinRecoverInfo.breakout_snap_shot:type_name -> proto.BreakoutSnapShot
	106, // 47: proto.AbilitySyncStateInfo.dynamic_value_map:type_name -> proto.AbilityScalarValueEntry
	107, // 48: proto.AbilitySyncStateInfo.applied_abilities:type_name -> proto.AbilityAppliedAbility
	110, // 49: proto.AbilitySyncStateInfo.applied_modifiers:type_name -> proto.AbilityAppliedModifier
	122, // 50: proto.AbilitySyncStateInfo.mixin_recover_infos:type_name -> proto.AbilityMixinRecoverInfo
	106, // 51: proto.AbilitySyncStateInfo.sgv_dynamic_value_map:type_name -> proto.AbilityScalarValueEntry
	124, // 52: proto.AbilityControlBlock.ability_embryo_list:type_name -> proto.AbilityEmbryo
	130, // 53: proto.EntityMoveInfo.motion_info:type_name -> proto.MotionInfo
	126, // 54: proto.MotionInfo.pos:type_name -> proto.Vector
	126, // 55: proto.MotionInfo.rot:type_name -> proto.Vector
	126, // 56: proto.MotionInfo.speed:type_name -> proto.Vector
	14,  // 57: proto.MotionInfo.state:type_name -> proto.MotionState
	126, // 58: proto.MotionInfo.params:type_name -> proto.Vector
	126, // 59: proto.MotionInfo.ref_pos:type_name -> proto.Vector
	126, // 60: proto.PlaceInfo.pos:type_name -> proto.Vector
	126, // 61: proto.PlaceInfo.rot:type_name -> proto.Vector
	123, // 62: proto.SceneWeaponInfo.ability_info:type_name -> proto.AbilitySyncStateInfo
	261, // 63: proto.SceneWeaponInfo.affix_map:type_name -> proto.SceneWeaponInfo.AffixMapEntry
	178, // 64: proto.SceneWeaponInfo.renderer_changed_info:type_name -> proto.EntityRendererChangedInfo
	132, // 65: proto.SceneAvatarInfo.weapon:type_name -> proto.SceneWeaponInfo
	133, // 66: proto.SceneAvatarInfo.reliquary_list:type_name -> proto.SceneReliquaryInfo
	262, // 67: proto.SceneAvatarInfo.skill_level_map:type_name -> proto.SceneAvatarInfo.SkillLevelMapEntry
	263, // 68: proto.SceneAvatarInfo.proud_skill_extra_level_map:type_name -> proto.SceneAvatarInfo.ProudSkillExtraLevelMapEntry
	134, // 69: proto.SceneAvatarInfo.server_buff_list:type_name -> proto.ServerBuff
	135, // 70: proto.SceneAvatarInfo.cur_vehicle_info:type_name -> proto.CurVehicleInfo
	136, // 71: proto.SceneAvatarInfo.excel_info:type_name -> proto.AvatarExcelInfo
	126, // 72: proto.SceneFishInfo.fish_pool_pos:type_name -> proto.Vector
	132, // 73: proto.SceneMonsterInfo.weapon_list:type_name -> proto.SceneWeaponInfo
	264, // 74: proto.SceneMonsterInfo.summon_tag_map:type_name -> proto.SceneMonsterInfo.SummonTagMapEntry
	18,  // 75: proto.SceneMonsterInfo.born_type:type_name -> proto.MonsterBornType
	147, // 76: proto.SceneMonsterInfo.monster_route:type_name -> proto.MonsterRoute
	138, // 77: proto.SceneMonsterInfo.fish_info:type_name -> proto.SceneFishInfo
	139, // 78: proto.SceneMonsterInfo.fishtank_fish_info:type_name -> proto.FishtankFishInfo
	126, // 79: proto.PlatformInfo.start_pos:type_name -> proto.Vector
	143, // 80: proto.PlatformInfo.start_rot:type_name -> proto.MathQuaternion
	126, // 81: proto.PlatformInfo.pos_offset:type_name -> proto.Vector
	143, // 82: proto.PlatformInfo.rot_offset:type_name -> proto.MathQuaternion
	20,  // 83: proto.PlatformInfo.moving_platform_type:type_name -> proto.MovingPlatformType
	146, // 84: proto.PlatformInfo.route:type_name -> proto.Route
	126, // 85: proto.RoutePoint.position:type_name -> proto.Vector
	126, // 86: proto.RoutePoint.rotation:type_name -> proto.Vector
	143, // 87: proto.RoutePoint.rotation_speed:type_name -> proto.MathQuaternion
	143, // 88: proto.RoutePoint.axis_speed:type_name -> proto.MathQuaternion
	145, // 89: proto.Route.route_points:type_name -> proto.RoutePoint
	145, // 90: proto.MonsterRoute.route_points:type_name -> proto.RoutePoint
	265, // 91: proto.BossChestInfo.uid_discount_map:type_name -> proto.BossChestInfo.UidDiscountMapEntry
	156, // 92: proto.GadgetPlayInfo.crucible_info:type_name -> proto.GadgetCrucibleInfo
	100, // 93: proto.GadgetGeneralRewardInfo.item_param:type_name -> proto.ItemParam
	22,  // 94: proto.FoundationInfo.status:type_name -> proto.FoundationStatus
	163, // 95: proto.VehicleInfo.member_list:type_name -> proto.VehicleMember
	168, // 96: proto.CustomGadgetTreeInfo.node_list:type_name -> proto.CustomCommonNodeInfo
	19,  // 97: proto.SceneGadgetInfo.born_type:type_name -> proto.GadgetBornType
	144, // 98: proto.SceneGadgetInfo.platform:type_name -> proto.PlatformInfo
	157, // 99: proto.SceneGadgetInfo.play_info:type_name -> proto.GadgetPlayInfo
	99,  // 100: proto.SceneGadgetInfo.trifle_item:type_name -> proto.Item
	151, // 101: proto.SceneGadgetInfo.gather_gadget:type_name -> proto.GatherGadgetInfo
	142, // 102: proto.SceneGadgetInfo.worktop:type_name -> proto.WorktopInfo
	149, // 103: proto.SceneGadgetInfo.client_gadget:type_name -> proto.ClientGadgetInfo
	148, // 104: proto.SceneGadgetInfo.weather:type_name -> proto.WeatherInfo
	150, // 105: proto.SceneGadgetInfo.ability_gadget:type_name -> proto.AbilityGadgetInfo
	152, // 106: proto.SceneGadgetInfo.statue_gadget:type_name -> proto.StatueGadgetInfo
	154, // 107: proto.SceneGadgetInfo.boss_chest:type_name -> proto.BossChestInfo
	155, // 108: proto.SceneGadgetInfo.blossom_chest:type_name -> proto.BlossomChestInfo
	158, // 109: proto.SceneGadgetInfo.mp_play_reward:type_name -> proto.MpPlayRewardInfo
	159, // 110: proto.SceneGadgetInfo.general_reward:type_name -> proto.GadgetGeneralRewardInfo
	160, // 111: proto.SceneGadgetInfo.offering_info:type_name -> proto.OfferingInfo
	162, // 112: proto.SceneGadgetInfo.foundation_info:type_name -> proto.FoundationInfo
	164, // 113: proto.SceneGadgetInfo.vehicle_info:type_name -> proto.VehicleInfo
	165, // 114: proto.SceneGadgetInfo.shell_info:type_name -> proto.EchoShellInfo
	166, // 115: proto.SceneGadgetInfo.screen_info:type_name -> proto.ScreenInfo
	167, // 116: proto.SceneGadgetInfo.fish_pool_info:type_name -> proto.FishPoolInfo
	169, // 117: proto.SceneGadgetInfo.custom_gadget_tree_info:type_name -> proto.CustomGadgetTreeInfo
	170, // 118: proto.SceneGadgetInfo.roguelike_gadget_info:type_name -> proto.RoguelikeGadgetInfo
	171, // 119: proto.SceneGadgetInfo.night_crow_gadget_info:type_name -> proto.NightCrowGadgetInfo
	172, // 120: proto.SceneGadgetInfo.deshret_obelisk_gadget_info:type_name -> proto.DeshretObeliskGadgetInfo
	173, // 121: proto.SceneGadgetInfo.coin_collect_operator_info:type_name -> proto.CoinCollectOperatorInfo
	126, // 122: proto.SceneEntityAiInfo.born_pos:type_name -> proto.Vector
	266, // 123: proto.SceneEntityAiInfo.skill_cd_map:type_name -> proto.SceneEntityAiInfo.SkillCdMapEntry
	176, // 124: proto.SceneEntityAiInfo.servant_info:type_name -> proto.ServantInfo
	267, // 125: proto.SceneEntityAiInfo.ai_threat_map:type_name -> proto.SceneEntityAiInfo.AiThreatMapEntry
	268, // 126: proto.SceneEntityAiInfo.skill_group_cd_map:type_name -> proto.SceneEntityAiInfo.SkillGroupCdMapEntry
	269, // 127: proto.EntityRendererChangedInfo.changed_renderers:type_name -> proto.EntityRendererChangedInfo.ChangedRenderersEntry
	83,  // 128: proto.PropPair.prop_value:type_name -> proto.PropValue
	175, // 129: proto.AnimatorParameterValueInfoPair.animator_para:type_name -> proto.AnimatorParameterValueInfo
	126, // 130: proto.EntityClientExtraInfo.skill_anchor_position:type_name -> proto.Vector
	123, // 131: proto.EntityAuthorityInfo.ability_info:type_name -> proto.AbilitySyncStateInfo
	178, // 132: proto.EntityAuthorityInfo.renderer_changed_info:type_name -> proto.EntityRendererChangedInfo
	177, // 133: proto.EntityAuthorityInfo.ai_info:type_name -> proto.SceneEntityAiInfo
	126, // 134: proto.EntityAuthorityInfo.born_pos:type_name -> proto.Vector
	181, // 135: proto.EntityAuthorityInfo.pose_para_list:type_name -> proto.AnimatorParameterValueInfoPair
	183, // 136: proto.EntityAuthorityInfo.client_extra_info:type_name -> proto.EntityClientExtraInfo
	15,  // 137: proto.SceneEntityInfo.entity_type:type_name -> proto.ProtEntityType
	130, // 138: proto.SceneEntityInfo.motion_info:type_name -> proto.MotionInfo
	179, // 139: proto.SceneEntityInfo.prop_list:type_name -> proto.PropPair
	180, // 140: proto.SceneEntityInfo.fight_prop_list:type_name -> proto.FightPropPair
	181, // 141: proto.SceneEntityInfo.animator_para_list:type_name -> proto.AnimatorParameterValueInfoPair
	214, // 142: proto.SceneEntityInfo.entity_client_data:type_name -> proto.EntityClientData
	182, // 143: proto.SceneEntityInfo.entity_environment_info_list:type_name -> proto.EntityEnvironmentInfo
	184, // 144: proto.SceneEntityInfo.entity_authority_info:type_name -> proto.EntityAuthorityInfo
	134, // 145: proto.SceneEntityInfo.server_buff_list:type_name -> proto.ServerBuff
	137, // 146: proto.SceneEntityInfo.avatar:type_name -> proto.SceneAvatarInfo
	140, // 147: proto.SceneEntityInfo.monster:type_name -> proto.SceneMonsterInfo
	141, // 148: proto.SceneEntityInfo.npc:type_name -> proto.SceneNpcInfo
	174, // 149: proto.SceneEntityInfo.gadget:type_name -> proto.SceneGadgetInfo
	19,  // 150: proto.CreateGadgetInfo.born_type:type_name -> proto.GadgetBornType
	270, // 151: proto.CreateGadgetInfo.chest:type_name -> proto.CreateGadgetInfo.Chest
	126, // 152: proto.CreateEntityInfo.pos:type_name -> proto.Vector
	126, // 153: proto.CreateEntityInfo.rot:type_name -> proto.Vector
	186, // 154: proto.CreateEntityInfo.gadget:type_name -> proto.CreateGadgetInfo
	99,  // 155: proto.TrialAvatarInfo.trial_equip_list:type_name -> proto.Item
	188, // 156: proto.TrialAvatarInfo.grant_record:type_name -> proto.TrialAvatarGrantRecord
	191, // 157: proto.AvatarFetterInfo.fetter_list:type_name -> proto.FetterData
	27,  // 158: proto.AvatarExpeditionInfo.state:type_name -> proto.AvatarExpeditionState
	271, // 159: proto.AvatarInfo.prop_map:type_name -> proto.AvatarInfo.PropMapEntry
	272, // 160: proto.AvatarInfo.fight_prop_map:type_name -> proto.AvatarInfo.FightPropMapEntry
	189, // 161: proto.AvatarInfo.trial_avatar_info:type_name -> proto.TrialAvatarInfo
	273, // 162: proto.AvatarInfo.skill_map:type_name -> proto.AvatarInfo.SkillMapEntry
	192, // 163: proto.AvatarInfo.fetter_info:type_name -> proto.AvatarFetterInfo
	274, // 164: proto.AvatarInfo.skill_level_map:type_name -> proto.AvatarInfo.SkillLevelMapEntry
	27,  // 165: proto.AvatarInfo.expedition_state:type_name -> proto.AvatarExpeditionState
	275, // 166: proto.AvatarInfo.proud_skill_extra_level_map:type_name -> proto.AvatarInfo.ProudSkillExtraLevelMapEntry
	194, // 167: proto.AvatarInfo.equip_affix_list:type_name -> proto.AvatarEquipAffixInfo
	136, // 168: proto.AvatarInfo.excel_info:type_name -> proto.AvatarExcelInfo
	93,  // 169: proto.ShowEquip.reliquary:type_name -> proto.Reliquary
	94,  // 170: proto.ShowEquip.weapon:type_name -> proto.Weapon
	276, // 171: proto.ShowAvatarInfo.prop_map:type_name -> proto.ShowAvatarInfo.PropMapEntry
	277, // 172: proto.ShowAvatarInfo.fight_prop_map:type_name -> proto.ShowAvatarInfo.FightPropMapEntry
	278, // 173: proto.ShowAvatarInfo.skill_level_map:type_name -> proto.ShowAvatarInfo.SkillLevelMapEntry
	279, // 174: proto.ShowAvatarInfo.proud_skill_extra_level_map:type_name -> proto.ShowAvatarInfo.ProudSkillExtraLevelMapEntry
	196, // 175: proto.ShowAvatarInfo.equip_list:type_name -> proto.ShowEquip
	192, // 176: proto.ShowAvatarInfo.fetter_info:type_name -> proto.AvatarFetterInfo
	136, // 177: proto.ShowAvatarInfo.excel_info:type_name -> proto.AvatarExcelInfo
	280, // 178: proto.Quest.lacked_npc_map:type_name -> proto.Quest.LackedNpcMapEntry
	281, // 179: proto.Quest.lacked_place_map:type_name -> proto.Quest.LackedPlaceMapEntry
	126, // 180: proto.NpcPositionInfo.pos:type_name -> proto.Vector
	101, // 181: proto.MailItem.equip_param:type_name -> proto.EquipParam
	95,  // 182: proto.MailItem.delete_info:type_name -> proto.MaterialDeleteInfo
	200, // 183: proto.MailData.mail_text_content:type_name -> proto.MailTextContent
	201, // 184: proto.MailData.item_list:type_name -> proto.MailItem
	30,  // 185: proto.MailData.collect_state:type_name -> proto.MailCollectState
	31,  // 186: proto.OnlinePlayerInfo.mp_setting_type:type_name -> proto.MpSettingType
	225, // 187: proto.OnlinePlayerInfo.profile_picture:type_name -> proto.ProfilePicture
	126, // 188: proto.MapMarkPoint.pos:type_name -> proto.Vector
	36,  // 189: proto.MapMarkPoint.point_type:type_name -> proto.MapMarkPointType
	37,  // 190: proto.MapMarkPoint.from_type:type_name -> proto.MapMarkFromType
	126, // 191: proto.MassiveGrassInfo.center:type_name -> proto.Vector
	126, // 192: proto.MassiveGrassInfo.size:type_name -> proto.Vector
	126, // 193: proto.MassiveBoxInfo.center:type_name -> proto.Vector
	126, // 194: proto.MassiveBoxInfo.extents:type_name -> proto.Vector
	126, // 195: proto.MassiveBoxInfo.up:type_name -> proto.Vector
	126, // 196: proto.MassiveBoxInfo.forward:type_name -> proto.Vector
	126, // 197: proto.MassiveBoxInfo.right:type_name -> proto.Vector
	206, // 198: proto.ClientMassiveEntity.water_info:type_name -> proto.MassiveWaterInfo
	207, // 199: proto.ClientMassiveEntity.grass_info:type_name -> proto.MassiveGrassInfo
	208, // 200: proto.ClientMassiveEntity.box_info:type_name -> proto.MassiveBoxInfo
	126, // 201: proto.ShapeSphere.center:type_name -> proto.Vector
	126, // 202: proto.ShapeBox.center:type_name -> proto.Vector
	126, // 203: proto.ShapeBox.axis0:type_name -> proto.Vector
	126, // 204: proto.ShapeBox.axis1:type_name -> proto.Vector
	126, // 205: proto.ShapeBox.axis2:type_name -> proto.Vector
	126, // 206: proto.ShapeBox.extents:type_name -> proto.Vector
	206, // 207: proto.ServerMassiveEntity.water_info:type_name -> proto.MassiveWaterInfo
	207, // 208: proto.ServerMassiveEntity.grass_info:type_name -> proto.MassiveGrassInfo
	208, // 209: proto.ServerMassiveEntity.box_info:type_name -> proto.MassiveBoxInfo
	282, // 210: proto.ShopCardProduct.resin_card:type_name -> proto.ShopCardProduct.ResinCard
	123, // 211: proto.PlayTeamEntityInfo.ability_info:type_name -> proto.AbilitySyncStateInfo
	60,  // 212: proto.MapMarkTipsInfo.tips_type:type_name -> proto.MapMarkTipsType
	126, // 213: proto.HomeMarkPointFurnitureData.pos:type_name -> proto.Vector
	227, // 214: proto.HomeMarkPointFurnitureData.npc_data:type_name -> proto.HomeMarkPointNPCData
	228, // 215: proto.HomeMarkPointFurnitureData.suite_data:type_name -> proto.HomeMarkPointSuiteData
	126, // 216: proto.HomeFurnitureArrangementMuipData.spawn_pos:type_name -> proto.Vector
	126, // 217: proto.HomeFurnitureArrangementMuipData.spawn_rot:type_name -> proto.Vector
	231, // 218: proto.HomeBlockArrangementMuipData.furniture_data_list:type_name -> proto.HomeFurnitureArrangementMuipData
	232, // 219: proto.HomeSceneArrangementMuipData.block_data_list:type_name -> proto.HomeBlockArrangementMuipData
	234, // 220: proto.PlayerCustomDungeonMuipData.battle_record_list:type_name -> proto.CustomDungeonBattleRecordMuipData
	283, // 221: proto.CustomDungeonAbstractMuipData.brick_statistics_map:type_name -> proto.CustomDungeonAbstractMuipData.BrickStatisticsMapEntry
	236, // 222: proto.CustomDungeonBriefMuipData.setting:type_name -> proto.CustomDungeonSettingMuipData
	237, // 223: proto.CustomDungeonBriefMuipData.abstract:type_name -> proto.CustomDungeonAbstractMuipData
	238, // 224: proto.CustomDungeonBriefMuipData.social:type_name -> proto.CustomDungeonSocialMuipData
	239, // 225: proto.CustomDungeonBatchBriefMuipData.brief_list:type_name -> proto.CustomDungeonBriefMuipData
	241, // 226: proto.HomeBlueprintBatchBriefMuipData.brief_list:type_name -> proto.HomeBlueprintBriefMuipData
	77,  // 227: proto.ContentAuditInfo.audit_state:type_name -> proto.AuditState
	244, // 228: proto.ContentAuditField.segment_list:type_name -> proto.ContentAuditData
	245, // 229: proto.NicknameSignatureAuditData.audit_field_list:type_name -> proto.ContentAuditField
	246, // 230: proto.NicknameSignatureAuditData.aux_field_list:type_name -> proto.ContentAuditAuxiliaryField
	248, // 231: proto.AvatarRenameContentAuditField.segment_list:type_name -> proto.AvatarRenameAuditContent
	249, // 232: proto.AvatarRenameAuditData.audit_field_list:type_name -> proto.AvatarRenameContentAuditField
	246, // 233: proto.AvatarRenameAuditData.aux_field_list:type_name -> proto.ContentAuditAuxiliaryField
	284, // 234: proto.GCGDuelExtra.card_face_map:type_name -> proto.GCGDuelExtra.CardFaceMapEntry
	252, // 235: proto.GCGDuelExtra.challenge_list:type_name -> proto.GCGChallengeData
	259, // 236: proto.MaterialDeleteInfo.CountDownDelete.delete_time_num_map:type_name -> proto.MaterialDeleteInfo.CountDownDelete.DeleteTimeNumMapEntry
	260, // 237: proto.MaterialDeleteInfo.DelayWeekCountDownDelete.delete_time_num_map:type_name -> proto.MaterialDeleteInfo.DelayWeekCountDownDelete.DeleteTimeNumMapEntry
	153, // 238: proto.BossChestInfo.UidDiscountMapEntry.value:type_name -> proto.WeeklyBossResinDiscountInfo
	83,  // 239: proto.AvatarInfo.PropMapEntry.value:type_name -> proto.PropValue
	190, // 240: proto.AvatarInfo.SkillMapEntry.value:type_name -> proto.AvatarSkillInfo
	83,  // 241: proto.ShowAvatarInfo.PropMapEntry.value:type_name -> proto.PropValue
	100, // 242: proto.ShopCardProduct.ResinCard.base_item_list:type_name -> proto.ItemParam
	100, // 243: proto.ShopCardProduct.ResinCard.per_day_item_list:type_name -> proto.ItemParam
	244, // [244:244] is the sub-list for method output_type
	244, // [244:244] is the sub-list for method input_type
	244, // [244:244] is the sub-list for extension type_name
	244, // [244:244] is the sub-list for extension extendee
	0,   // [0:244] is the sub-list for field type_name
}

func init() { file_define_proto_init() }
func file_define_proto_init() {
	if File_define_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_define_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParamList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint32Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionSimpleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRegionListHttpRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceUpdateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResVersionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCurrRegionHttpRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerUidExtInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reliquary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Weapon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialDeleteInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Material); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Equip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Furniture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipParamList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbilityString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbilityFloatValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbilityScalarValueEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbilityAppliedAbility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbilityAttachedModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifierDurability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbilityAppliedModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MassivePropParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MassivePropSyncInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakoutVector2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakoutBrickInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakoutPhysicalObjectModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakoutPhysicalObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakoutSpawnPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakoutElementReactionCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakoutSyncConnectUidInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakoutSnapShot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakoutAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbilityMixinRecoverInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbilitySyncStateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbilityEmbryo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbilityControlBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorPlane); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector3Int); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityMoveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MotionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneWeaponInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneReliquaryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerBuff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurVehicleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarExcelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneAvatarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneFishInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishtankFishInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneMonsterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneNpcInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorktopInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MathQuaternion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonsterRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeatherInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientGadgetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbilityGadgetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatherGadgetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatueGadgetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeeklyBossResinDiscountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BossChestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlossomChestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GadgetCrucibleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GadgetPlayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MpPlayRewardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GadgetGeneralRewardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoundationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoShellInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishPoolInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomCommonNodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomGadgetTreeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeGadgetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NightCrowGadgetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeshretObeliskGadgetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinCollectOperatorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGadgetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnimatorParameterValueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServantInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneEntityAiInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityRendererChangedInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightPropPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnimatorParameterValueInfoPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityEnvironmentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityClientExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityAuthorityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneEntityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGadgetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEntityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialAvatarGrantRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialAvatarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarSkillInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetterData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarFetterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarExpeditionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarEquipAffixInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowEquip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowAvatarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpcPositionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailTextContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlinePlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Birthday); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapMarkPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MassiveWaterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MassiveGrassInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MassiveBoxInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMassiveEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShapeSphere); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShapeBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMassiveEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MassiveEntityState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityClientData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopMcoinProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopCardProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopConcertProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashedString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayTeamEntityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureBlockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapMarkTipsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExhibitionDisplayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfilePicture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedPointData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeMarkPointNPCData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeMarkPointSuiteData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeMarkPointFurnitureData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapAreaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeFurnitureArrangementMuipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeBlockArrangementMuipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeSceneArrangementMuipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDungeonBattleRecordMuipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerCustomDungeonMuipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDungeonSettingMuipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDungeonAbstractMuipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDungeonSocialMuipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDungeonBriefMuipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDungeonBatchBriefMuipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeBlueprintBriefMuipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeBlueprintBatchBriefMuipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentAuditInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentAuditData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentAuditField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentAuditAuxiliaryField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NicknameSignatureAuditData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarRenameAuditContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarRenameContentAuditField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarRenameAuditData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDungeonAvatar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGChallengeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDuelExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIpRegionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialDeleteInfo_CountDownDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialDeleteInfo_DateTimeDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialDeleteInfo_DelayWeekCountDownDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGadgetInfo_Chest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopCardProduct_ResinCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_define_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*PropValue_Ival)(nil),
		(*PropValue_Fval)(nil),
	}
	file_define_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*QueryCurrRegionHttpRsp_ForceUdpate)(nil),
		(*QueryCurrRegionHttpRsp_StopServer)(nil),
	}
	file_define_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*MaterialDeleteInfo_CountDownDelete_)(nil),
		(*MaterialDeleteInfo_DateDelete)(nil),
		(*MaterialDeleteInfo_DelayWeekCountDownDelete_)(nil),
	}
	file_define_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Equip_Reliquary)(nil),
		(*Equip_Weapon)(nil),
	}
	file_define_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*Item_Material)(nil),
		(*Item_Equip)(nil),
		(*Item_Furniture)(nil),
	}
	file_define_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*AbilityString_Str)(nil),
		(*AbilityString_Hash)(nil),
	}
	file_define_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*AbilityScalarValueEntry_FloatValue)(nil),
		(*AbilityScalarValueEntry_StringValue)(nil),
		(*AbilityScalarValueEntry_IntValue)(nil),
		(*AbilityScalarValueEntry_UintValue)(nil),
	}
	file_define_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*AbilityMixinRecoverInfo_InstancedAbilityId)(nil),
		(*AbilityMixinRecoverInfo_InstancedModifierId)(nil),
	}
	file_define_proto_msgTypes[58].OneofWrappers = []interface{}{
		(*SceneMonsterInfo_FishInfo)(nil),
		(*SceneMonsterInfo_FishtankFishInfo)(nil),
	}
	file_define_proto_msgTypes[63].OneofWrappers = []interface{}{
		(*RoutePoint_Velocity)(nil),
		(*RoutePoint_Time)(nil),
		(*RoutePoint_Rotation)(nil),
		(*RoutePoint_RotationSpeed)(nil),
		(*RoutePoint_AxisSpeed)(nil),
	}
	file_define_proto_msgTypes[75].OneofWrappers = []interface{}{
		(*GadgetPlayInfo_CrucibleInfo)(nil),
	}
	file_define_proto_msgTypes[92].OneofWrappers = []interface{}{
		(*SceneGadgetInfo_TrifleItem)(nil),
		(*SceneGadgetInfo_GatherGadget)(nil),
		(*SceneGadgetInfo_Worktop)(nil),
		(*SceneGadgetInfo_ClientGadget)(nil),
		(*SceneGadgetInfo_Weather)(nil),
		(*SceneGadgetInfo_AbilityGadget)(nil),
		(*SceneGadgetInfo_StatueGadget)(nil),
		(*SceneGadgetInfo_BossChest)(nil),
		(*SceneGadgetInfo_BlossomChest)(nil),
		(*SceneGadgetInfo_MpPlayReward)(nil),
		(*SceneGadgetInfo_GeneralReward)(nil),
		(*SceneGadgetInfo_OfferingInfo)(nil),
		(*SceneGadgetInfo_FoundationInfo)(nil),
		(*SceneGadgetInfo_VehicleInfo)(nil),
		(*SceneGadgetInfo_ShellInfo)(nil),
		(*SceneGadgetInfo_ScreenInfo)(nil),
		(*SceneGadgetInfo_FishPoolInfo)(nil),
		(*SceneGadgetInfo_CustomGadgetTreeInfo)(nil),
		(*SceneGadgetInfo_RoguelikeGadgetInfo)(nil),
		(*SceneGadgetInfo_NightCrowGadgetInfo)(nil),
		(*SceneGadgetInfo_DeshretObeliskGadgetInfo)(nil),
		(*SceneGadgetInfo_CoinCollectOperatorInfo)(nil),
	}
	file_define_proto_msgTypes[93].OneofWrappers = []interface{}{
		(*AnimatorParameterValueInfo_IntVal)(nil),
		(*AnimatorParameterValueInfo_FloatVal)(nil),
		(*AnimatorParameterValueInfo_BoolVal)(nil),
	}
	file_define_proto_msgTypes[103].OneofWrappers = []interface{}{
		(*SceneEntityInfo_Avatar)(nil),
		(*SceneEntityInfo_Monster)(nil),
		(*SceneEntityInfo_Npc)(nil),
		(*SceneEntityInfo_Gadget)(nil),
	}
	file_define_proto_msgTypes[105].OneofWrappers = []interface{}{
		(*CreateEntityInfo_MonsterId)(nil),
		(*CreateEntityInfo_NpcId)(nil),
		(*CreateEntityInfo_GadgetId)(nil),
		(*CreateEntityInfo_ItemId)(nil),
		(*CreateEntityInfo_Gadget)(nil),
	}
	file_define_proto_msgTypes[114].OneofWrappers = []interface{}{
		(*ShowEquip_Reliquary)(nil),
		(*ShowEquip_Weapon)(nil),
	}
	file_define_proto_msgTypes[127].OneofWrappers = []interface{}{
		(*ClientMassiveEntity_WaterInfo)(nil),
		(*ClientMassiveEntity_GrassInfo)(nil),
		(*ClientMassiveEntity_BoxInfo)(nil),
	}
	file_define_proto_msgTypes[130].OneofWrappers = []interface{}{
		(*ServerMassiveEntity_WaterInfo)(nil),
		(*ServerMassiveEntity_GrassInfo)(nil),
		(*ServerMassiveEntity_BoxInfo)(nil),
	}
	file_define_proto_msgTypes[135].OneofWrappers = []interface{}{
		(*ShopCardProduct_ResinCard_)(nil),
	}
	file_define_proto_msgTypes[147].OneofWrappers = []interface{}{
		(*HomeMarkPointFurnitureData_NpcData)(nil),
		(*HomeMarkPointFurnitureData_SuiteData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_define_proto_rawDesc,
			NumEnums:      82,
			NumMessages:   203,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_define_proto_goTypes,
		DependencyIndexes: file_define_proto_depIdxs,
		EnumInfos:         file_define_proto_enumTypes,
		MessageInfos:      file_define_proto_msgTypes,
	}.Build()
	File_define_proto = out.File
	file_define_proto_rawDesc = nil
	file_define_proto_goTypes = nil
	file_define_proto_depIdxs = nil
}
