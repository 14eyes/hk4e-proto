// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: cmd/cmd_gallery.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GalleryStageType int32

const (
	GalleryStageType_GALLERY_NONE     GalleryStageType = 0
	GalleryStageType_GALLERY_PRESTART GalleryStageType = 1
	GalleryStageType_GALLERY_START    GalleryStageType = 2
)

// Enum value maps for GalleryStageType.
var (
	GalleryStageType_name = map[int32]string{
		0: "GALLERY_NONE",
		1: "GALLERY_PRESTART",
		2: "GALLERY_START",
	}
	GalleryStageType_value = map[string]int32{
		"GALLERY_NONE":     0,
		"GALLERY_PRESTART": 1,
		"GALLERY_START":    2,
	}
)

func (x GalleryStageType) Enum() *GalleryStageType {
	p := new(GalleryStageType)
	*p = x
	return p
}

func (x GalleryStageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GalleryStageType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[0].Descriptor()
}

func (GalleryStageType) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[0]
}

func (x GalleryStageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GalleryStageType.Descriptor instead.
func (GalleryStageType) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{0}
}

type GalleryStopReason int32

const (
	GalleryStopReason_GALLERY_STOP_NONE                  GalleryStopReason = 0
	GalleryStopReason_GALLERY_STOP_TIMEUP                GalleryStopReason = 1
	GalleryStopReason_GALLERY_STOP_CLIENT_INTERRUPT      GalleryStopReason = 2
	GalleryStopReason_GALLERY_STOP_LUA_INTERRUPT_SUCCESS GalleryStopReason = 3
	GalleryStopReason_GALLERY_STOP_LUA_INTERRUPT_FAIL    GalleryStopReason = 4
	GalleryStopReason_GALLERY_STOP_OWNER_LEAVE_SCENE     GalleryStopReason = 5
	GalleryStopReason_GALLERY_STOP_PLAY_INIT_FAILED      GalleryStopReason = 6
	GalleryStopReason_GALLERY_STOP_OTHER_PLAYER_ENTER    GalleryStopReason = 7
	GalleryStopReason_GALLERY_STOP_AVATAR_DIE            GalleryStopReason = 8
	GalleryStopReason_GALLERY_STOP_FINISHED              GalleryStopReason = 9
	GalleryStopReason_GALLERY_STOP_FUNGUS_ALL_DIE        GalleryStopReason = 10
	GalleryStopReason_GALLERY_STOP_LIFE_COUNT_ZERO       GalleryStopReason = 11
)

// Enum value maps for GalleryStopReason.
var (
	GalleryStopReason_name = map[int32]string{
		0:  "GALLERY_STOP_NONE",
		1:  "GALLERY_STOP_TIMEUP",
		2:  "GALLERY_STOP_CLIENT_INTERRUPT",
		3:  "GALLERY_STOP_LUA_INTERRUPT_SUCCESS",
		4:  "GALLERY_STOP_LUA_INTERRUPT_FAIL",
		5:  "GALLERY_STOP_OWNER_LEAVE_SCENE",
		6:  "GALLERY_STOP_PLAY_INIT_FAILED",
		7:  "GALLERY_STOP_OTHER_PLAYER_ENTER",
		8:  "GALLERY_STOP_AVATAR_DIE",
		9:  "GALLERY_STOP_FINISHED",
		10: "GALLERY_STOP_FUNGUS_ALL_DIE",
		11: "GALLERY_STOP_LIFE_COUNT_ZERO",
	}
	GalleryStopReason_value = map[string]int32{
		"GALLERY_STOP_NONE":                  0,
		"GALLERY_STOP_TIMEUP":                1,
		"GALLERY_STOP_CLIENT_INTERRUPT":      2,
		"GALLERY_STOP_LUA_INTERRUPT_SUCCESS": 3,
		"GALLERY_STOP_LUA_INTERRUPT_FAIL":    4,
		"GALLERY_STOP_OWNER_LEAVE_SCENE":     5,
		"GALLERY_STOP_PLAY_INIT_FAILED":      6,
		"GALLERY_STOP_OTHER_PLAYER_ENTER":    7,
		"GALLERY_STOP_AVATAR_DIE":            8,
		"GALLERY_STOP_FINISHED":              9,
		"GALLERY_STOP_FUNGUS_ALL_DIE":        10,
		"GALLERY_STOP_LIFE_COUNT_ZERO":       11,
	}
)

func (x GalleryStopReason) Enum() *GalleryStopReason {
	p := new(GalleryStopReason)
	*p = x
	return p
}

func (x GalleryStopReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GalleryStopReason) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[1].Descriptor()
}

func (GalleryStopReason) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[1]
}

func (x GalleryStopReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GalleryStopReason.Descriptor instead.
func (GalleryStopReason) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{1}
}

type GalleryStartSource int32

const (
	GalleryStartSource_GALLERY_START_BY_NONE  GalleryStartSource = 0
	GalleryStartSource_GALLERY_START_BY_MATCH GalleryStartSource = 1
	GalleryStartSource_GALLERY_START_BY_DRAFT GalleryStartSource = 2
)

// Enum value maps for GalleryStartSource.
var (
	GalleryStartSource_name = map[int32]string{
		0: "GALLERY_START_BY_NONE",
		1: "GALLERY_START_BY_MATCH",
		2: "GALLERY_START_BY_DRAFT",
	}
	GalleryStartSource_value = map[string]int32{
		"GALLERY_START_BY_NONE":  0,
		"GALLERY_START_BY_MATCH": 1,
		"GALLERY_START_BY_DRAFT": 2,
	}
)

func (x GalleryStartSource) Enum() *GalleryStartSource {
	p := new(GalleryStartSource)
	*p = x
	return p
}

func (x GalleryStartSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GalleryStartSource) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[2].Descriptor()
}

func (GalleryStartSource) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[2]
}

func (x GalleryStartSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GalleryStartSource.Descriptor instead.
func (GalleryStartSource) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{2}
}

type SalvagePreventStopReason int32

const (
	SalvagePreventStopReason_SALVAGE_PREVENT_STOP_NONE      SalvagePreventStopReason = 0
	SalvagePreventStopReason_SALVAGE_PREVENT_STOP_SUCCESS   SalvagePreventStopReason = 1
	SalvagePreventStopReason_SALVAGE_PREVENT_STOP_ARRIVAL   SalvagePreventStopReason = 2
	SalvagePreventStopReason_SALVAGE_PREVENT_STOP_INTERRUPT SalvagePreventStopReason = 3
	SalvagePreventStopReason_SALVAGE_PREVENT_STOP_LEAVE     SalvagePreventStopReason = 4
	SalvagePreventStopReason_SALVAGE_PREVENT_STOP_FULL      SalvagePreventStopReason = 5
	SalvagePreventStopReason_SALVAGE_PREVENT_STOP_AWAY      SalvagePreventStopReason = 6
)

// Enum value maps for SalvagePreventStopReason.
var (
	SalvagePreventStopReason_name = map[int32]string{
		0: "SALVAGE_PREVENT_STOP_NONE",
		1: "SALVAGE_PREVENT_STOP_SUCCESS",
		2: "SALVAGE_PREVENT_STOP_ARRIVAL",
		3: "SALVAGE_PREVENT_STOP_INTERRUPT",
		4: "SALVAGE_PREVENT_STOP_LEAVE",
		5: "SALVAGE_PREVENT_STOP_FULL",
		6: "SALVAGE_PREVENT_STOP_AWAY",
	}
	SalvagePreventStopReason_value = map[string]int32{
		"SALVAGE_PREVENT_STOP_NONE":      0,
		"SALVAGE_PREVENT_STOP_SUCCESS":   1,
		"SALVAGE_PREVENT_STOP_ARRIVAL":   2,
		"SALVAGE_PREVENT_STOP_INTERRUPT": 3,
		"SALVAGE_PREVENT_STOP_LEAVE":     4,
		"SALVAGE_PREVENT_STOP_FULL":      5,
		"SALVAGE_PREVENT_STOP_AWAY":      6,
	}
)

func (x SalvagePreventStopReason) Enum() *SalvagePreventStopReason {
	p := new(SalvagePreventStopReason)
	*p = x
	return p
}

func (x SalvagePreventStopReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SalvagePreventStopReason) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[3].Descriptor()
}

func (SalvagePreventStopReason) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[3]
}

func (x SalvagePreventStopReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SalvagePreventStopReason.Descriptor instead.
func (SalvagePreventStopReason) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{3}
}

type SalvageEscortStopReason int32

const (
	SalvageEscortStopReason_SALVAGE_ESCORT_STOP_NONE      SalvageEscortStopReason = 0
	SalvageEscortStopReason_SALVAGE_ESCORT_STOP_SUCCESS   SalvageEscortStopReason = 1
	SalvageEscortStopReason_SALVAGE_ESCORT_STOP_DUMP      SalvageEscortStopReason = 2
	SalvageEscortStopReason_SALVAGE_ESCORT_STOP_TIME      SalvageEscortStopReason = 3
	SalvageEscortStopReason_SALVAGE_ESCORT_STOP_INTERRUPT SalvageEscortStopReason = 4
	SalvageEscortStopReason_SALVAGE_ESCORT_STOP_LEAVE     SalvageEscortStopReason = 5
	SalvageEscortStopReason_SALVAGE_ESCORT_STOP_FULL      SalvageEscortStopReason = 6
)

// Enum value maps for SalvageEscortStopReason.
var (
	SalvageEscortStopReason_name = map[int32]string{
		0: "SALVAGE_ESCORT_STOP_NONE",
		1: "SALVAGE_ESCORT_STOP_SUCCESS",
		2: "SALVAGE_ESCORT_STOP_DUMP",
		3: "SALVAGE_ESCORT_STOP_TIME",
		4: "SALVAGE_ESCORT_STOP_INTERRUPT",
		5: "SALVAGE_ESCORT_STOP_LEAVE",
		6: "SALVAGE_ESCORT_STOP_FULL",
	}
	SalvageEscortStopReason_value = map[string]int32{
		"SALVAGE_ESCORT_STOP_NONE":      0,
		"SALVAGE_ESCORT_STOP_SUCCESS":   1,
		"SALVAGE_ESCORT_STOP_DUMP":      2,
		"SALVAGE_ESCORT_STOP_TIME":      3,
		"SALVAGE_ESCORT_STOP_INTERRUPT": 4,
		"SALVAGE_ESCORT_STOP_LEAVE":     5,
		"SALVAGE_ESCORT_STOP_FULL":      6,
	}
)

func (x SalvageEscortStopReason) Enum() *SalvageEscortStopReason {
	p := new(SalvageEscortStopReason)
	*p = x
	return p
}

func (x SalvageEscortStopReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SalvageEscortStopReason) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[4].Descriptor()
}

func (SalvageEscortStopReason) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[4]
}

func (x SalvageEscortStopReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SalvageEscortStopReason.Descriptor instead.
func (SalvageEscortStopReason) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{4}
}

type IslandPartySailStage int32

const (
	IslandPartySailStage_ISLAND_PARTY_SAIL_STAGE_NONE   IslandPartySailStage = 0
	IslandPartySailStage_ISLAND_PARTY_SAIL_STAGE_SAIL   IslandPartySailStage = 1
	IslandPartySailStage_ISLAND_PARTY_SAIL_STAGE_BATTLE IslandPartySailStage = 2
)

// Enum value maps for IslandPartySailStage.
var (
	IslandPartySailStage_name = map[int32]string{
		0: "ISLAND_PARTY_SAIL_STAGE_NONE",
		1: "ISLAND_PARTY_SAIL_STAGE_SAIL",
		2: "ISLAND_PARTY_SAIL_STAGE_BATTLE",
	}
	IslandPartySailStage_value = map[string]int32{
		"ISLAND_PARTY_SAIL_STAGE_NONE":   0,
		"ISLAND_PARTY_SAIL_STAGE_SAIL":   1,
		"ISLAND_PARTY_SAIL_STAGE_BATTLE": 2,
	}
)

func (x IslandPartySailStage) Enum() *IslandPartySailStage {
	p := new(IslandPartySailStage)
	*p = x
	return p
}

func (x IslandPartySailStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IslandPartySailStage) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[5].Descriptor()
}

func (IslandPartySailStage) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[5]
}

func (x IslandPartySailStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IslandPartySailStage.Descriptor instead.
func (IslandPartySailStage) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{5}
}

type GalleryStartNotify_CmdId int32

const (
	GalleryStartNotify_NONE             GalleryStartNotify_CmdId = 0
	GalleryStartNotify_CMD_ID           GalleryStartNotify_CmdId = 5572
	GalleryStartNotify_ENET_CHANNEL_ID  GalleryStartNotify_CmdId = 0
	GalleryStartNotify_ENET_IS_RELIABLE GalleryStartNotify_CmdId = 1
)

// Enum value maps for GalleryStartNotify_CmdId.
var (
	GalleryStartNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5572: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	GalleryStartNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5572,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x GalleryStartNotify_CmdId) Enum() *GalleryStartNotify_CmdId {
	p := new(GalleryStartNotify_CmdId)
	*p = x
	return p
}

func (x GalleryStartNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GalleryStartNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[6].Descriptor()
}

func (GalleryStartNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[6]
}

func (x GalleryStartNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GalleryStartNotify_CmdId.Descriptor instead.
func (GalleryStartNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{1, 0}
}

type GalleryBalloonShootNotify_CmdId int32

const (
	GalleryBalloonShootNotify_NONE             GalleryBalloonShootNotify_CmdId = 0
	GalleryBalloonShootNotify_CMD_ID           GalleryBalloonShootNotify_CmdId = 5598
	GalleryBalloonShootNotify_ENET_CHANNEL_ID  GalleryBalloonShootNotify_CmdId = 0
	GalleryBalloonShootNotify_ENET_IS_RELIABLE GalleryBalloonShootNotify_CmdId = 1
)

// Enum value maps for GalleryBalloonShootNotify_CmdId.
var (
	GalleryBalloonShootNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5598: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	GalleryBalloonShootNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5598,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x GalleryBalloonShootNotify_CmdId) Enum() *GalleryBalloonShootNotify_CmdId {
	p := new(GalleryBalloonShootNotify_CmdId)
	*p = x
	return p
}

func (x GalleryBalloonShootNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GalleryBalloonShootNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[7].Descriptor()
}

func (GalleryBalloonShootNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[7]
}

func (x GalleryBalloonShootNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GalleryBalloonShootNotify_CmdId.Descriptor instead.
func (GalleryBalloonShootNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{2, 0}
}

type GalleryBalloonScoreNotify_CmdId int32

const (
	GalleryBalloonScoreNotify_NONE             GalleryBalloonScoreNotify_CmdId = 0
	GalleryBalloonScoreNotify_CMD_ID           GalleryBalloonScoreNotify_CmdId = 5512
	GalleryBalloonScoreNotify_ENET_CHANNEL_ID  GalleryBalloonScoreNotify_CmdId = 0
	GalleryBalloonScoreNotify_ENET_IS_RELIABLE GalleryBalloonScoreNotify_CmdId = 1
)

// Enum value maps for GalleryBalloonScoreNotify_CmdId.
var (
	GalleryBalloonScoreNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5512: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	GalleryBalloonScoreNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5512,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x GalleryBalloonScoreNotify_CmdId) Enum() *GalleryBalloonScoreNotify_CmdId {
	p := new(GalleryBalloonScoreNotify_CmdId)
	*p = x
	return p
}

func (x GalleryBalloonScoreNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GalleryBalloonScoreNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[8].Descriptor()
}

func (GalleryBalloonScoreNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[8]
}

func (x GalleryBalloonScoreNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GalleryBalloonScoreNotify_CmdId.Descriptor instead.
func (GalleryBalloonScoreNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{3, 0}
}

type GalleryStopNotify_CmdId int32

const (
	GalleryStopNotify_NONE             GalleryStopNotify_CmdId = 0
	GalleryStopNotify_CMD_ID           GalleryStopNotify_CmdId = 5535
	GalleryStopNotify_ENET_CHANNEL_ID  GalleryStopNotify_CmdId = 0
	GalleryStopNotify_ENET_IS_RELIABLE GalleryStopNotify_CmdId = 1
)

// Enum value maps for GalleryStopNotify_CmdId.
var (
	GalleryStopNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5535: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	GalleryStopNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5535,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x GalleryStopNotify_CmdId) Enum() *GalleryStopNotify_CmdId {
	p := new(GalleryStopNotify_CmdId)
	*p = x
	return p
}

func (x GalleryStopNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GalleryStopNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[9].Descriptor()
}

func (GalleryStopNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[9]
}

func (x GalleryStopNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GalleryStopNotify_CmdId.Descriptor instead.
func (GalleryStopNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{5, 0}
}

type GalleryFallCatchNotify_CmdId int32

const (
	GalleryFallCatchNotify_NONE             GalleryFallCatchNotify_CmdId = 0
	GalleryFallCatchNotify_CMD_ID           GalleryFallCatchNotify_CmdId = 5507
	GalleryFallCatchNotify_ENET_CHANNEL_ID  GalleryFallCatchNotify_CmdId = 0
	GalleryFallCatchNotify_ENET_IS_RELIABLE GalleryFallCatchNotify_CmdId = 1
)

// Enum value maps for GalleryFallCatchNotify_CmdId.
var (
	GalleryFallCatchNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5507: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	GalleryFallCatchNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5507,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x GalleryFallCatchNotify_CmdId) Enum() *GalleryFallCatchNotify_CmdId {
	p := new(GalleryFallCatchNotify_CmdId)
	*p = x
	return p
}

func (x GalleryFallCatchNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GalleryFallCatchNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[10].Descriptor()
}

func (GalleryFallCatchNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[10]
}

func (x GalleryFallCatchNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GalleryFallCatchNotify_CmdId.Descriptor instead.
func (GalleryFallCatchNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{7, 0}
}

type GalleryFallScoreNotify_CmdId int32

const (
	GalleryFallScoreNotify_NONE             GalleryFallScoreNotify_CmdId = 0
	GalleryFallScoreNotify_CMD_ID           GalleryFallScoreNotify_CmdId = 5521
	GalleryFallScoreNotify_ENET_CHANNEL_ID  GalleryFallScoreNotify_CmdId = 0
	GalleryFallScoreNotify_ENET_IS_RELIABLE GalleryFallScoreNotify_CmdId = 1
)

// Enum value maps for GalleryFallScoreNotify_CmdId.
var (
	GalleryFallScoreNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5521: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	GalleryFallScoreNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5521,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x GalleryFallScoreNotify_CmdId) Enum() *GalleryFallScoreNotify_CmdId {
	p := new(GalleryFallScoreNotify_CmdId)
	*p = x
	return p
}

func (x GalleryFallScoreNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GalleryFallScoreNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[11].Descriptor()
}

func (GalleryFallScoreNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[11]
}

func (x GalleryFallScoreNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GalleryFallScoreNotify_CmdId.Descriptor instead.
func (GalleryFallScoreNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{9, 0}
}

type GetAllSceneGalleryInfoReq_CmdId int32

const (
	GetAllSceneGalleryInfoReq_NONE             GetAllSceneGalleryInfoReq_CmdId = 0
	GetAllSceneGalleryInfoReq_CMD_ID           GetAllSceneGalleryInfoReq_CmdId = 5503
	GetAllSceneGalleryInfoReq_ENET_CHANNEL_ID  GetAllSceneGalleryInfoReq_CmdId = 0
	GetAllSceneGalleryInfoReq_ENET_IS_RELIABLE GetAllSceneGalleryInfoReq_CmdId = 1
	GetAllSceneGalleryInfoReq_IS_ALLOW_CLIENT  GetAllSceneGalleryInfoReq_CmdId = 1
)

// Enum value maps for GetAllSceneGalleryInfoReq_CmdId.
var (
	GetAllSceneGalleryInfoReq_CmdId_name = map[int32]string{
		0:    "NONE",
		5503: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	GetAllSceneGalleryInfoReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5503,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x GetAllSceneGalleryInfoReq_CmdId) Enum() *GetAllSceneGalleryInfoReq_CmdId {
	p := new(GetAllSceneGalleryInfoReq_CmdId)
	*p = x
	return p
}

func (x GetAllSceneGalleryInfoReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetAllSceneGalleryInfoReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[12].Descriptor()
}

func (GetAllSceneGalleryInfoReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[12]
}

func (x GetAllSceneGalleryInfoReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetAllSceneGalleryInfoReq_CmdId.Descriptor instead.
func (GetAllSceneGalleryInfoReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{46, 0}
}

type GetAllSceneGalleryInfoRsp_CmdId int32

const (
	GetAllSceneGalleryInfoRsp_NONE             GetAllSceneGalleryInfoRsp_CmdId = 0
	GetAllSceneGalleryInfoRsp_CMD_ID           GetAllSceneGalleryInfoRsp_CmdId = 5590
	GetAllSceneGalleryInfoRsp_ENET_CHANNEL_ID  GetAllSceneGalleryInfoRsp_CmdId = 0
	GetAllSceneGalleryInfoRsp_ENET_IS_RELIABLE GetAllSceneGalleryInfoRsp_CmdId = 1
)

// Enum value maps for GetAllSceneGalleryInfoRsp_CmdId.
var (
	GetAllSceneGalleryInfoRsp_CmdId_name = map[int32]string{
		0:    "NONE",
		5590: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	GetAllSceneGalleryInfoRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5590,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x GetAllSceneGalleryInfoRsp_CmdId) Enum() *GetAllSceneGalleryInfoRsp_CmdId {
	p := new(GetAllSceneGalleryInfoRsp_CmdId)
	*p = x
	return p
}

func (x GetAllSceneGalleryInfoRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetAllSceneGalleryInfoRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[13].Descriptor()
}

func (GetAllSceneGalleryInfoRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[13]
}

func (x GetAllSceneGalleryInfoRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetAllSceneGalleryInfoRsp_CmdId.Descriptor instead.
func (GetAllSceneGalleryInfoRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{47, 0}
}

type GalleryFlowerCatchNotify_CmdId int32

const (
	GalleryFlowerCatchNotify_NONE             GalleryFlowerCatchNotify_CmdId = 0
	GalleryFlowerCatchNotify_CMD_ID           GalleryFlowerCatchNotify_CmdId = 5573
	GalleryFlowerCatchNotify_ENET_CHANNEL_ID  GalleryFlowerCatchNotify_CmdId = 0
	GalleryFlowerCatchNotify_ENET_IS_RELIABLE GalleryFlowerCatchNotify_CmdId = 1
)

// Enum value maps for GalleryFlowerCatchNotify_CmdId.
var (
	GalleryFlowerCatchNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5573: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	GalleryFlowerCatchNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5573,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x GalleryFlowerCatchNotify_CmdId) Enum() *GalleryFlowerCatchNotify_CmdId {
	p := new(GalleryFlowerCatchNotify_CmdId)
	*p = x
	return p
}

func (x GalleryFlowerCatchNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GalleryFlowerCatchNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[14].Descriptor()
}

func (GalleryFlowerCatchNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[14]
}

func (x GalleryFlowerCatchNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GalleryFlowerCatchNotify_CmdId.Descriptor instead.
func (GalleryFlowerCatchNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{48, 0}
}

type GalleryPreStartNotify_CmdId int32

const (
	GalleryPreStartNotify_NONE             GalleryPreStartNotify_CmdId = 0
	GalleryPreStartNotify_CMD_ID           GalleryPreStartNotify_CmdId = 5599
	GalleryPreStartNotify_ENET_CHANNEL_ID  GalleryPreStartNotify_CmdId = 0
	GalleryPreStartNotify_ENET_IS_RELIABLE GalleryPreStartNotify_CmdId = 1
)

// Enum value maps for GalleryPreStartNotify_CmdId.
var (
	GalleryPreStartNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5599: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	GalleryPreStartNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5599,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x GalleryPreStartNotify_CmdId) Enum() *GalleryPreStartNotify_CmdId {
	p := new(GalleryPreStartNotify_CmdId)
	*p = x
	return p
}

func (x GalleryPreStartNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GalleryPreStartNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[15].Descriptor()
}

func (GalleryPreStartNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[15]
}

func (x GalleryPreStartNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GalleryPreStartNotify_CmdId.Descriptor instead.
func (GalleryPreStartNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{49, 0}
}

type GalleryBulletHitNotify_CmdId int32

const (
	GalleryBulletHitNotify_NONE             GalleryBulletHitNotify_CmdId = 0
	GalleryBulletHitNotify_CMD_ID           GalleryBulletHitNotify_CmdId = 5531
	GalleryBulletHitNotify_ENET_CHANNEL_ID  GalleryBulletHitNotify_CmdId = 0
	GalleryBulletHitNotify_ENET_IS_RELIABLE GalleryBulletHitNotify_CmdId = 1
)

// Enum value maps for GalleryBulletHitNotify_CmdId.
var (
	GalleryBulletHitNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5531: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	GalleryBulletHitNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5531,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x GalleryBulletHitNotify_CmdId) Enum() *GalleryBulletHitNotify_CmdId {
	p := new(GalleryBulletHitNotify_CmdId)
	*p = x
	return p
}

func (x GalleryBulletHitNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GalleryBulletHitNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[16].Descriptor()
}

func (GalleryBulletHitNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[16]
}

func (x GalleryBulletHitNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GalleryBulletHitNotify_CmdId.Descriptor instead.
func (GalleryBulletHitNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{50, 0}
}

type GalleryBrokenFloorFallNotify_CmdId int32

const (
	GalleryBrokenFloorFallNotify_NONE             GalleryBrokenFloorFallNotify_CmdId = 0
	GalleryBrokenFloorFallNotify_CMD_ID           GalleryBrokenFloorFallNotify_CmdId = 5575
	GalleryBrokenFloorFallNotify_ENET_CHANNEL_ID  GalleryBrokenFloorFallNotify_CmdId = 0
	GalleryBrokenFloorFallNotify_ENET_IS_RELIABLE GalleryBrokenFloorFallNotify_CmdId = 1
)

// Enum value maps for GalleryBrokenFloorFallNotify_CmdId.
var (
	GalleryBrokenFloorFallNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5575: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	GalleryBrokenFloorFallNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5575,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x GalleryBrokenFloorFallNotify_CmdId) Enum() *GalleryBrokenFloorFallNotify_CmdId {
	p := new(GalleryBrokenFloorFallNotify_CmdId)
	*p = x
	return p
}

func (x GalleryBrokenFloorFallNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GalleryBrokenFloorFallNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[17].Descriptor()
}

func (GalleryBrokenFloorFallNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[17]
}

func (x GalleryBrokenFloorFallNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GalleryBrokenFloorFallNotify_CmdId.Descriptor instead.
func (GalleryBrokenFloorFallNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{51, 0}
}

type InterruptGalleryReq_CmdId int32

const (
	InterruptGalleryReq_NONE             InterruptGalleryReq_CmdId = 0
	InterruptGalleryReq_CMD_ID           InterruptGalleryReq_CmdId = 5548
	InterruptGalleryReq_ENET_CHANNEL_ID  InterruptGalleryReq_CmdId = 0
	InterruptGalleryReq_ENET_IS_RELIABLE InterruptGalleryReq_CmdId = 1
	InterruptGalleryReq_IS_ALLOW_CLIENT  InterruptGalleryReq_CmdId = 1
)

// Enum value maps for InterruptGalleryReq_CmdId.
var (
	InterruptGalleryReq_CmdId_name = map[int32]string{
		0:    "NONE",
		5548: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	InterruptGalleryReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5548,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x InterruptGalleryReq_CmdId) Enum() *InterruptGalleryReq_CmdId {
	p := new(InterruptGalleryReq_CmdId)
	*p = x
	return p
}

func (x InterruptGalleryReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterruptGalleryReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[18].Descriptor()
}

func (InterruptGalleryReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[18]
}

func (x InterruptGalleryReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterruptGalleryReq_CmdId.Descriptor instead.
func (InterruptGalleryReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{52, 0}
}

type InterruptGalleryRsp_CmdId int32

const (
	InterruptGalleryRsp_NONE             InterruptGalleryRsp_CmdId = 0
	InterruptGalleryRsp_CMD_ID           InterruptGalleryRsp_CmdId = 5597
	InterruptGalleryRsp_ENET_CHANNEL_ID  InterruptGalleryRsp_CmdId = 0
	InterruptGalleryRsp_ENET_IS_RELIABLE InterruptGalleryRsp_CmdId = 1
	InterruptGalleryRsp_IS_ALLOW_CLIENT  InterruptGalleryRsp_CmdId = 1
)

// Enum value maps for InterruptGalleryRsp_CmdId.
var (
	InterruptGalleryRsp_CmdId_name = map[int32]string{
		0:    "NONE",
		5597: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	InterruptGalleryRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5597,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x InterruptGalleryRsp_CmdId) Enum() *InterruptGalleryRsp_CmdId {
	p := new(InterruptGalleryRsp_CmdId)
	*p = x
	return p
}

func (x InterruptGalleryRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterruptGalleryRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[19].Descriptor()
}

func (InterruptGalleryRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[19]
}

func (x InterruptGalleryRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterruptGalleryRsp_CmdId.Descriptor instead.
func (InterruptGalleryRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{53, 0}
}

type SceneGalleryInfoNotify_CmdId int32

const (
	SceneGalleryInfoNotify_NONE             SceneGalleryInfoNotify_CmdId = 0
	SceneGalleryInfoNotify_CMD_ID           SceneGalleryInfoNotify_CmdId = 5581
	SceneGalleryInfoNotify_ENET_CHANNEL_ID  SceneGalleryInfoNotify_CmdId = 0
	SceneGalleryInfoNotify_ENET_IS_RELIABLE SceneGalleryInfoNotify_CmdId = 1
)

// Enum value maps for SceneGalleryInfoNotify_CmdId.
var (
	SceneGalleryInfoNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5581: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	SceneGalleryInfoNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5581,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x SceneGalleryInfoNotify_CmdId) Enum() *SceneGalleryInfoNotify_CmdId {
	p := new(SceneGalleryInfoNotify_CmdId)
	*p = x
	return p
}

func (x SceneGalleryInfoNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SceneGalleryInfoNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[20].Descriptor()
}

func (SceneGalleryInfoNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[20]
}

func (x SceneGalleryInfoNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SceneGalleryInfoNotify_CmdId.Descriptor instead.
func (SceneGalleryInfoNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{54, 0}
}

type GalleryBounceConjuringHitNotify_CmdId int32

const (
	GalleryBounceConjuringHitNotify_NONE             GalleryBounceConjuringHitNotify_CmdId = 0
	GalleryBounceConjuringHitNotify_CMD_ID           GalleryBounceConjuringHitNotify_CmdId = 5505
	GalleryBounceConjuringHitNotify_ENET_CHANNEL_ID  GalleryBounceConjuringHitNotify_CmdId = 0
	GalleryBounceConjuringHitNotify_ENET_IS_RELIABLE GalleryBounceConjuringHitNotify_CmdId = 1
)

// Enum value maps for GalleryBounceConjuringHitNotify_CmdId.
var (
	GalleryBounceConjuringHitNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5505: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	GalleryBounceConjuringHitNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5505,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x GalleryBounceConjuringHitNotify_CmdId) Enum() *GalleryBounceConjuringHitNotify_CmdId {
	p := new(GalleryBounceConjuringHitNotify_CmdId)
	*p = x
	return p
}

func (x GalleryBounceConjuringHitNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GalleryBounceConjuringHitNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[21].Descriptor()
}

func (GalleryBounceConjuringHitNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[21]
}

func (x GalleryBounceConjuringHitNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GalleryBounceConjuringHitNotify_CmdId.Descriptor instead.
func (GalleryBounceConjuringHitNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{57, 0}
}

type GallerySumoKillMonsterNotify_CmdId int32

const (
	GallerySumoKillMonsterNotify_NONE             GallerySumoKillMonsterNotify_CmdId = 0
	GallerySumoKillMonsterNotify_CMD_ID           GallerySumoKillMonsterNotify_CmdId = 5582
	GallerySumoKillMonsterNotify_ENET_CHANNEL_ID  GallerySumoKillMonsterNotify_CmdId = 0
	GallerySumoKillMonsterNotify_ENET_IS_RELIABLE GallerySumoKillMonsterNotify_CmdId = 1
)

// Enum value maps for GallerySumoKillMonsterNotify_CmdId.
var (
	GallerySumoKillMonsterNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5582: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	GallerySumoKillMonsterNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5582,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x GallerySumoKillMonsterNotify_CmdId) Enum() *GallerySumoKillMonsterNotify_CmdId {
	p := new(GallerySumoKillMonsterNotify_CmdId)
	*p = x
	return p
}

func (x GallerySumoKillMonsterNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GallerySumoKillMonsterNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[22].Descriptor()
}

func (GallerySumoKillMonsterNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[22]
}

func (x GallerySumoKillMonsterNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GallerySumoKillMonsterNotify_CmdId.Descriptor instead.
func (GallerySumoKillMonsterNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{58, 0}
}

type GalleryCrystalLinkKillMonsterNotify_CmdId int32

const (
	GalleryCrystalLinkKillMonsterNotify_NONE             GalleryCrystalLinkKillMonsterNotify_CmdId = 0
	GalleryCrystalLinkKillMonsterNotify_CMD_ID           GalleryCrystalLinkKillMonsterNotify_CmdId = 5547
	GalleryCrystalLinkKillMonsterNotify_ENET_CHANNEL_ID  GalleryCrystalLinkKillMonsterNotify_CmdId = 0
	GalleryCrystalLinkKillMonsterNotify_ENET_IS_RELIABLE GalleryCrystalLinkKillMonsterNotify_CmdId = 1
)

// Enum value maps for GalleryCrystalLinkKillMonsterNotify_CmdId.
var (
	GalleryCrystalLinkKillMonsterNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5547: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	GalleryCrystalLinkKillMonsterNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5547,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x GalleryCrystalLinkKillMonsterNotify_CmdId) Enum() *GalleryCrystalLinkKillMonsterNotify_CmdId {
	p := new(GalleryCrystalLinkKillMonsterNotify_CmdId)
	*p = x
	return p
}

func (x GalleryCrystalLinkKillMonsterNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GalleryCrystalLinkKillMonsterNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[23].Descriptor()
}

func (GalleryCrystalLinkKillMonsterNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[23]
}

func (x GalleryCrystalLinkKillMonsterNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GalleryCrystalLinkKillMonsterNotify_CmdId.Descriptor instead.
func (GalleryCrystalLinkKillMonsterNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{59, 0}
}

type GalleryCrystalLinkBuffInfoNotify_CmdId int32

const (
	GalleryCrystalLinkBuffInfoNotify_NONE             GalleryCrystalLinkBuffInfoNotify_CmdId = 0
	GalleryCrystalLinkBuffInfoNotify_CMD_ID           GalleryCrystalLinkBuffInfoNotify_CmdId = 5539
	GalleryCrystalLinkBuffInfoNotify_ENET_CHANNEL_ID  GalleryCrystalLinkBuffInfoNotify_CmdId = 0
	GalleryCrystalLinkBuffInfoNotify_ENET_IS_RELIABLE GalleryCrystalLinkBuffInfoNotify_CmdId = 1
)

// Enum value maps for GalleryCrystalLinkBuffInfoNotify_CmdId.
var (
	GalleryCrystalLinkBuffInfoNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5539: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	GalleryCrystalLinkBuffInfoNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5539,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x GalleryCrystalLinkBuffInfoNotify_CmdId) Enum() *GalleryCrystalLinkBuffInfoNotify_CmdId {
	p := new(GalleryCrystalLinkBuffInfoNotify_CmdId)
	*p = x
	return p
}

func (x GalleryCrystalLinkBuffInfoNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GalleryCrystalLinkBuffInfoNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[24].Descriptor()
}

func (GalleryCrystalLinkBuffInfoNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[24]
}

func (x GalleryCrystalLinkBuffInfoNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GalleryCrystalLinkBuffInfoNotify_CmdId.Descriptor instead.
func (GalleryCrystalLinkBuffInfoNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{60, 0}
}

type HomeGalleryInPlayingNotify_CmdId int32

const (
	HomeGalleryInPlayingNotify_NONE             HomeGalleryInPlayingNotify_CmdId = 0
	HomeGalleryInPlayingNotify_CMD_ID           HomeGalleryInPlayingNotify_CmdId = 5553
	HomeGalleryInPlayingNotify_ENET_CHANNEL_ID  HomeGalleryInPlayingNotify_CmdId = 0
	HomeGalleryInPlayingNotify_ENET_IS_RELIABLE HomeGalleryInPlayingNotify_CmdId = 1
)

// Enum value maps for HomeGalleryInPlayingNotify_CmdId.
var (
	HomeGalleryInPlayingNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5553: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	HomeGalleryInPlayingNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5553,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x HomeGalleryInPlayingNotify_CmdId) Enum() *HomeGalleryInPlayingNotify_CmdId {
	p := new(HomeGalleryInPlayingNotify_CmdId)
	*p = x
	return p
}

func (x HomeGalleryInPlayingNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HomeGalleryInPlayingNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[25].Descriptor()
}

func (HomeGalleryInPlayingNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[25]
}

func (x HomeGalleryInPlayingNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HomeGalleryInPlayingNotify_CmdId.Descriptor instead.
func (HomeGalleryInPlayingNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{71, 0}
}

type GalleryIslandPartyDownHillInfoNotify_CmdId int32

const (
	GalleryIslandPartyDownHillInfoNotify_NONE             GalleryIslandPartyDownHillInfoNotify_CmdId = 0
	GalleryIslandPartyDownHillInfoNotify_CMD_ID           GalleryIslandPartyDownHillInfoNotify_CmdId = 5522
	GalleryIslandPartyDownHillInfoNotify_ENET_CHANNEL_ID  GalleryIslandPartyDownHillInfoNotify_CmdId = 0
	GalleryIslandPartyDownHillInfoNotify_ENET_IS_RELIABLE GalleryIslandPartyDownHillInfoNotify_CmdId = 1
)

// Enum value maps for GalleryIslandPartyDownHillInfoNotify_CmdId.
var (
	GalleryIslandPartyDownHillInfoNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5522: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	GalleryIslandPartyDownHillInfoNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5522,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x GalleryIslandPartyDownHillInfoNotify_CmdId) Enum() *GalleryIslandPartyDownHillInfoNotify_CmdId {
	p := new(GalleryIslandPartyDownHillInfoNotify_CmdId)
	*p = x
	return p
}

func (x GalleryIslandPartyDownHillInfoNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GalleryIslandPartyDownHillInfoNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[26].Descriptor()
}

func (GalleryIslandPartyDownHillInfoNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[26]
}

func (x GalleryIslandPartyDownHillInfoNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GalleryIslandPartyDownHillInfoNotify_CmdId.Descriptor instead.
func (GalleryIslandPartyDownHillInfoNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{73, 0}
}

type IslandPartyRaftInfoNotify_CmdId int32

const (
	IslandPartyRaftInfoNotify_NONE             IslandPartyRaftInfoNotify_CmdId = 0
	IslandPartyRaftInfoNotify_CMD_ID           IslandPartyRaftInfoNotify_CmdId = 5565
	IslandPartyRaftInfoNotify_ENET_CHANNEL_ID  IslandPartyRaftInfoNotify_CmdId = 0
	IslandPartyRaftInfoNotify_ENET_IS_RELIABLE IslandPartyRaftInfoNotify_CmdId = 1
)

// Enum value maps for IslandPartyRaftInfoNotify_CmdId.
var (
	IslandPartyRaftInfoNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5565: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	IslandPartyRaftInfoNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5565,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x IslandPartyRaftInfoNotify_CmdId) Enum() *IslandPartyRaftInfoNotify_CmdId {
	p := new(IslandPartyRaftInfoNotify_CmdId)
	*p = x
	return p
}

func (x IslandPartyRaftInfoNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IslandPartyRaftInfoNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[27].Descriptor()
}

func (IslandPartyRaftInfoNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[27]
}

func (x IslandPartyRaftInfoNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IslandPartyRaftInfoNotify_CmdId.Descriptor instead.
func (IslandPartyRaftInfoNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{74, 0}
}

type IslandPartySailInfoNotify_CmdId int32

const (
	IslandPartySailInfoNotify_NONE             IslandPartySailInfoNotify_CmdId = 0
	IslandPartySailInfoNotify_CMD_ID           IslandPartySailInfoNotify_CmdId = 5504
	IslandPartySailInfoNotify_ENET_CHANNEL_ID  IslandPartySailInfoNotify_CmdId = 0
	IslandPartySailInfoNotify_ENET_IS_RELIABLE IslandPartySailInfoNotify_CmdId = 1
)

// Enum value maps for IslandPartySailInfoNotify_CmdId.
var (
	IslandPartySailInfoNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5504: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	IslandPartySailInfoNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5504,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x IslandPartySailInfoNotify_CmdId) Enum() *IslandPartySailInfoNotify_CmdId {
	p := new(IslandPartySailInfoNotify_CmdId)
	*p = x
	return p
}

func (x IslandPartySailInfoNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IslandPartySailInfoNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[28].Descriptor()
}

func (IslandPartySailInfoNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[28]
}

func (x IslandPartySailInfoNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IslandPartySailInfoNotify_CmdId.Descriptor instead.
func (IslandPartySailInfoNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{75, 0}
}

type BackRebornGalleryReq_CmdId int32

const (
	BackRebornGalleryReq_NONE             BackRebornGalleryReq_CmdId = 0
	BackRebornGalleryReq_CMD_ID           BackRebornGalleryReq_CmdId = 5593
	BackRebornGalleryReq_ENET_CHANNEL_ID  BackRebornGalleryReq_CmdId = 0
	BackRebornGalleryReq_ENET_IS_RELIABLE BackRebornGalleryReq_CmdId = 1
	BackRebornGalleryReq_IS_ALLOW_CLIENT  BackRebornGalleryReq_CmdId = 1
)

// Enum value maps for BackRebornGalleryReq_CmdId.
var (
	BackRebornGalleryReq_CmdId_name = map[int32]string{
		0:    "NONE",
		5593: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	BackRebornGalleryReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5593,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x BackRebornGalleryReq_CmdId) Enum() *BackRebornGalleryReq_CmdId {
	p := new(BackRebornGalleryReq_CmdId)
	*p = x
	return p
}

func (x BackRebornGalleryReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackRebornGalleryReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[29].Descriptor()
}

func (BackRebornGalleryReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[29]
}

func (x BackRebornGalleryReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackRebornGalleryReq_CmdId.Descriptor instead.
func (BackRebornGalleryReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{77, 0}
}

type BackRebornGalleryRsp_CmdId int32

const (
	BackRebornGalleryRsp_NONE             BackRebornGalleryRsp_CmdId = 0
	BackRebornGalleryRsp_CMD_ID           BackRebornGalleryRsp_CmdId = 5527
	BackRebornGalleryRsp_ENET_CHANNEL_ID  BackRebornGalleryRsp_CmdId = 0
	BackRebornGalleryRsp_ENET_IS_RELIABLE BackRebornGalleryRsp_CmdId = 1
)

// Enum value maps for BackRebornGalleryRsp_CmdId.
var (
	BackRebornGalleryRsp_CmdId_name = map[int32]string{
		0:    "NONE",
		5527: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	BackRebornGalleryRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5527,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x BackRebornGalleryRsp_CmdId) Enum() *BackRebornGalleryRsp_CmdId {
	p := new(BackRebornGalleryRsp_CmdId)
	*p = x
	return p
}

func (x BackRebornGalleryRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackRebornGalleryRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[30].Descriptor()
}

func (BackRebornGalleryRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[30]
}

func (x BackRebornGalleryRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackRebornGalleryRsp_CmdId.Descriptor instead.
func (BackRebornGalleryRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{78, 0}
}

type GalleryWillStartCountdownNotify_CmdId int32

const (
	GalleryWillStartCountdownNotify_NONE             GalleryWillStartCountdownNotify_CmdId = 0
	GalleryWillStartCountdownNotify_CMD_ID           GalleryWillStartCountdownNotify_CmdId = 5594
	GalleryWillStartCountdownNotify_ENET_CHANNEL_ID  GalleryWillStartCountdownNotify_CmdId = 0
	GalleryWillStartCountdownNotify_ENET_IS_RELIABLE GalleryWillStartCountdownNotify_CmdId = 1
)

// Enum value maps for GalleryWillStartCountdownNotify_CmdId.
var (
	GalleryWillStartCountdownNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5594: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	GalleryWillStartCountdownNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5594,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x GalleryWillStartCountdownNotify_CmdId) Enum() *GalleryWillStartCountdownNotify_CmdId {
	p := new(GalleryWillStartCountdownNotify_CmdId)
	*p = x
	return p
}

func (x GalleryWillStartCountdownNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GalleryWillStartCountdownNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[31].Descriptor()
}

func (GalleryWillStartCountdownNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[31]
}

func (x GalleryWillStartCountdownNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GalleryWillStartCountdownNotify_CmdId.Descriptor instead.
func (GalleryWillStartCountdownNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{79, 0}
}

type InstableSprayGalleryInfoNotify_CmdId int32

const (
	InstableSprayGalleryInfoNotify_NONE             InstableSprayGalleryInfoNotify_CmdId = 0
	InstableSprayGalleryInfoNotify_CMD_ID           InstableSprayGalleryInfoNotify_CmdId = 5588
	InstableSprayGalleryInfoNotify_ENET_CHANNEL_ID  InstableSprayGalleryInfoNotify_CmdId = 0
	InstableSprayGalleryInfoNotify_ENET_IS_RELIABLE InstableSprayGalleryInfoNotify_CmdId = 1
)

// Enum value maps for InstableSprayGalleryInfoNotify_CmdId.
var (
	InstableSprayGalleryInfoNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5588: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	InstableSprayGalleryInfoNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5588,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x InstableSprayGalleryInfoNotify_CmdId) Enum() *InstableSprayGalleryInfoNotify_CmdId {
	p := new(InstableSprayGalleryInfoNotify_CmdId)
	*p = x
	return p
}

func (x InstableSprayGalleryInfoNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstableSprayGalleryInfoNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[32].Descriptor()
}

func (InstableSprayGalleryInfoNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[32]
}

func (x InstableSprayGalleryInfoNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstableSprayGalleryInfoNotify_CmdId.Descriptor instead.
func (InstableSprayGalleryInfoNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{80, 0}
}

type WindFieldGalleryInfoNotify_CmdId int32

const (
	WindFieldGalleryInfoNotify_NONE             WindFieldGalleryInfoNotify_CmdId = 0
	WindFieldGalleryInfoNotify_CMD_ID           WindFieldGalleryInfoNotify_CmdId = 5526
	WindFieldGalleryInfoNotify_ENET_CHANNEL_ID  WindFieldGalleryInfoNotify_CmdId = 0
	WindFieldGalleryInfoNotify_ENET_IS_RELIABLE WindFieldGalleryInfoNotify_CmdId = 1
)

// Enum value maps for WindFieldGalleryInfoNotify_CmdId.
var (
	WindFieldGalleryInfoNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5526: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	WindFieldGalleryInfoNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5526,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x WindFieldGalleryInfoNotify_CmdId) Enum() *WindFieldGalleryInfoNotify_CmdId {
	p := new(WindFieldGalleryInfoNotify_CmdId)
	*p = x
	return p
}

func (x WindFieldGalleryInfoNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WindFieldGalleryInfoNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[33].Descriptor()
}

func (WindFieldGalleryInfoNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[33]
}

func (x WindFieldGalleryInfoNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WindFieldGalleryInfoNotify_CmdId.Descriptor instead.
func (WindFieldGalleryInfoNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{86, 0}
}

type WindFieldGalleryChallengeInfoNotify_CmdId int32

const (
	WindFieldGalleryChallengeInfoNotify_NONE             WindFieldGalleryChallengeInfoNotify_CmdId = 0
	WindFieldGalleryChallengeInfoNotify_CMD_ID           WindFieldGalleryChallengeInfoNotify_CmdId = 5563
	WindFieldGalleryChallengeInfoNotify_ENET_CHANNEL_ID  WindFieldGalleryChallengeInfoNotify_CmdId = 0
	WindFieldGalleryChallengeInfoNotify_ENET_IS_RELIABLE WindFieldGalleryChallengeInfoNotify_CmdId = 1
)

// Enum value maps for WindFieldGalleryChallengeInfoNotify_CmdId.
var (
	WindFieldGalleryChallengeInfoNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5563: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	WindFieldGalleryChallengeInfoNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5563,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x WindFieldGalleryChallengeInfoNotify_CmdId) Enum() *WindFieldGalleryChallengeInfoNotify_CmdId {
	p := new(WindFieldGalleryChallengeInfoNotify_CmdId)
	*p = x
	return p
}

func (x WindFieldGalleryChallengeInfoNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WindFieldGalleryChallengeInfoNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[34].Descriptor()
}

func (WindFieldGalleryChallengeInfoNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[34]
}

func (x WindFieldGalleryChallengeInfoNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WindFieldGalleryChallengeInfoNotify_CmdId.Descriptor instead.
func (WindFieldGalleryChallengeInfoNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{87, 0}
}

type FungusFighterTrainingInfoNotify_CmdId int32

const (
	FungusFighterTrainingInfoNotify_NONE             FungusFighterTrainingInfoNotify_CmdId = 0
	FungusFighterTrainingInfoNotify_CMD_ID           FungusFighterTrainingInfoNotify_CmdId = 5595
	FungusFighterTrainingInfoNotify_ENET_CHANNEL_ID  FungusFighterTrainingInfoNotify_CmdId = 0
	FungusFighterTrainingInfoNotify_ENET_IS_RELIABLE FungusFighterTrainingInfoNotify_CmdId = 1
)

// Enum value maps for FungusFighterTrainingInfoNotify_CmdId.
var (
	FungusFighterTrainingInfoNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5595: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	FungusFighterTrainingInfoNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5595,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x FungusFighterTrainingInfoNotify_CmdId) Enum() *FungusFighterTrainingInfoNotify_CmdId {
	p := new(FungusFighterTrainingInfoNotify_CmdId)
	*p = x
	return p
}

func (x FungusFighterTrainingInfoNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FungusFighterTrainingInfoNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[35].Descriptor()
}

func (FungusFighterTrainingInfoNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[35]
}

func (x FungusFighterTrainingInfoNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FungusFighterTrainingInfoNotify_CmdId.Descriptor instead.
func (FungusFighterTrainingInfoNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{88, 0}
}

type FungusCaptureSettleNotify_CmdId int32

const (
	FungusCaptureSettleNotify_NONE             FungusCaptureSettleNotify_CmdId = 0
	FungusCaptureSettleNotify_CMD_ID           FungusCaptureSettleNotify_CmdId = 5506
	FungusCaptureSettleNotify_ENET_CHANNEL_ID  FungusCaptureSettleNotify_CmdId = 0
	FungusCaptureSettleNotify_ENET_IS_RELIABLE FungusCaptureSettleNotify_CmdId = 1
)

// Enum value maps for FungusCaptureSettleNotify_CmdId.
var (
	FungusCaptureSettleNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5506: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	FungusCaptureSettleNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5506,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x FungusCaptureSettleNotify_CmdId) Enum() *FungusCaptureSettleNotify_CmdId {
	p := new(FungusCaptureSettleNotify_CmdId)
	*p = x
	return p
}

func (x FungusCaptureSettleNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FungusCaptureSettleNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[36].Descriptor()
}

func (FungusCaptureSettleNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[36]
}

func (x FungusCaptureSettleNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FungusCaptureSettleNotify_CmdId.Descriptor instead.
func (FungusCaptureSettleNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{90, 0}
}

type HideAndSeekPlayerCapturedNotify_CmdId int32

const (
	HideAndSeekPlayerCapturedNotify_NONE             HideAndSeekPlayerCapturedNotify_CmdId = 0
	HideAndSeekPlayerCapturedNotify_CMD_ID           HideAndSeekPlayerCapturedNotify_CmdId = 5534
	HideAndSeekPlayerCapturedNotify_ENET_CHANNEL_ID  HideAndSeekPlayerCapturedNotify_CmdId = 0
	HideAndSeekPlayerCapturedNotify_ENET_IS_RELIABLE HideAndSeekPlayerCapturedNotify_CmdId = 1
)

// Enum value maps for HideAndSeekPlayerCapturedNotify_CmdId.
var (
	HideAndSeekPlayerCapturedNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5534: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	HideAndSeekPlayerCapturedNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5534,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x HideAndSeekPlayerCapturedNotify_CmdId) Enum() *HideAndSeekPlayerCapturedNotify_CmdId {
	p := new(HideAndSeekPlayerCapturedNotify_CmdId)
	*p = x
	return p
}

func (x HideAndSeekPlayerCapturedNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HideAndSeekPlayerCapturedNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[37].Descriptor()
}

func (HideAndSeekPlayerCapturedNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[37]
}

func (x HideAndSeekPlayerCapturedNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HideAndSeekPlayerCapturedNotify_CmdId.Descriptor instead.
func (HideAndSeekPlayerCapturedNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{91, 0}
}

type CoinCollectGallerySettleNotify_CmdId int32

const (
	CoinCollectGallerySettleNotify_NONE             CoinCollectGallerySettleNotify_CmdId = 0
	CoinCollectGallerySettleNotify_CMD_ID           CoinCollectGallerySettleNotify_CmdId = 5550
	CoinCollectGallerySettleNotify_ENET_CHANNEL_ID  CoinCollectGallerySettleNotify_CmdId = 0
	CoinCollectGallerySettleNotify_ENET_IS_RELIABLE CoinCollectGallerySettleNotify_CmdId = 1
)

// Enum value maps for CoinCollectGallerySettleNotify_CmdId.
var (
	CoinCollectGallerySettleNotify_CmdId_name = map[int32]string{
		0:    "NONE",
		5550: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	CoinCollectGallerySettleNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           5550,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x CoinCollectGallerySettleNotify_CmdId) Enum() *CoinCollectGallerySettleNotify_CmdId {
	p := new(CoinCollectGallerySettleNotify_CmdId)
	*p = x
	return p
}

func (x CoinCollectGallerySettleNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoinCollectGallerySettleNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gallery_proto_enumTypes[38].Descriptor()
}

func (CoinCollectGallerySettleNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gallery_proto_enumTypes[38]
}

func (x CoinCollectGallerySettleNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoinCollectGallerySettleNotify_CmdId.Descriptor instead.
func (CoinCollectGallerySettleNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{92, 0}
}

type GalleryFlowerStartParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetScore uint32 `protobuf:"varint,5,opt,name=target_score,json=targetScore,proto3" json:"target_score,omitempty"`
}

func (x *GalleryFlowerStartParam) Reset() {
	*x = GalleryFlowerStartParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryFlowerStartParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryFlowerStartParam) ProtoMessage() {}

func (x *GalleryFlowerStartParam) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryFlowerStartParam.ProtoReflect.Descriptor instead.
func (*GalleryFlowerStartParam) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{0}
}

func (x *GalleryFlowerStartParam) GetTargetScore() uint32 {
	if x != nil {
		return x.TargetScore
	}
	return 0
}

type GalleryStartNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTime     uint32 `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	PlayerCount uint32 `protobuf:"varint,11,opt,name=player_count,json=playerCount,proto3" json:"player_count,omitempty"`
	OwnerUid    uint32 `protobuf:"varint,9,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
	GalleryId   uint32 `protobuf:"varint,13,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	StartTime   uint32 `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Types that are assignable to Detail:
	//
	//	*GalleryStartNotify_FlowerStartParam
	Detail isGalleryStartNotify_Detail `protobuf_oneof:"detail"`
}

func (x *GalleryStartNotify) Reset() {
	*x = GalleryStartNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryStartNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryStartNotify) ProtoMessage() {}

func (x *GalleryStartNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryStartNotify.ProtoReflect.Descriptor instead.
func (*GalleryStartNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{1}
}

func (x *GalleryStartNotify) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GalleryStartNotify) GetPlayerCount() uint32 {
	if x != nil {
		return x.PlayerCount
	}
	return 0
}

func (x *GalleryStartNotify) GetOwnerUid() uint32 {
	if x != nil {
		return x.OwnerUid
	}
	return 0
}

func (x *GalleryStartNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *GalleryStartNotify) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (m *GalleryStartNotify) GetDetail() isGalleryStartNotify_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *GalleryStartNotify) GetFlowerStartParam() *GalleryFlowerStartParam {
	if x, ok := x.GetDetail().(*GalleryStartNotify_FlowerStartParam); ok {
		return x.FlowerStartParam
	}
	return nil
}

type isGalleryStartNotify_Detail interface {
	isGalleryStartNotify_Detail()
}

type GalleryStartNotify_FlowerStartParam struct {
	FlowerStartParam *GalleryFlowerStartParam `protobuf:"bytes,15,opt,name=flower_start_param,json=flowerStartParam,proto3,oneof"`
}

func (*GalleryStartNotify_FlowerStartParam) isGalleryStartNotify_Detail() {}

type GalleryBalloonShootNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerEntityId  uint32 `protobuf:"varint,12,opt,name=trigger_entity_id,json=triggerEntityId,proto3" json:"trigger_entity_id,omitempty"`
	GalleryId        uint32 `protobuf:"varint,5,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	Combo            uint32 `protobuf:"varint,14,opt,name=combo,proto3" json:"combo,omitempty"`
	ComboDisableTime uint64 `protobuf:"varint,6,opt,name=combo_disable_time,json=comboDisableTime,proto3" json:"combo_disable_time,omitempty"`
	AddScore         int32  `protobuf:"varint,11,opt,name=add_score,json=addScore,proto3" json:"add_score,omitempty"`
	CurScore         uint32 `protobuf:"varint,13,opt,name=cur_score,json=curScore,proto3" json:"cur_score,omitempty"`
}

func (x *GalleryBalloonShootNotify) Reset() {
	*x = GalleryBalloonShootNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryBalloonShootNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryBalloonShootNotify) ProtoMessage() {}

func (x *GalleryBalloonShootNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryBalloonShootNotify.ProtoReflect.Descriptor instead.
func (*GalleryBalloonShootNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{2}
}

func (x *GalleryBalloonShootNotify) GetTriggerEntityId() uint32 {
	if x != nil {
		return x.TriggerEntityId
	}
	return 0
}

func (x *GalleryBalloonShootNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *GalleryBalloonShootNotify) GetCombo() uint32 {
	if x != nil {
		return x.Combo
	}
	return 0
}

func (x *GalleryBalloonShootNotify) GetComboDisableTime() uint64 {
	if x != nil {
		return x.ComboDisableTime
	}
	return 0
}

func (x *GalleryBalloonShootNotify) GetAddScore() int32 {
	if x != nil {
		return x.AddScore
	}
	return 0
}

func (x *GalleryBalloonShootNotify) GetCurScore() uint32 {
	if x != nil {
		return x.CurScore
	}
	return 0
}

type GalleryBalloonScoreNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId   uint32            `protobuf:"varint,9,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	UidScoreMap map[uint32]uint32 `protobuf:"bytes,7,rep,name=uid_score_map,json=uidScoreMap,proto3" json:"uid_score_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GalleryBalloonScoreNotify) Reset() {
	*x = GalleryBalloonScoreNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryBalloonScoreNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryBalloonScoreNotify) ProtoMessage() {}

func (x *GalleryBalloonScoreNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryBalloonScoreNotify.ProtoReflect.Descriptor instead.
func (*GalleryBalloonScoreNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{3}
}

func (x *GalleryBalloonScoreNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *GalleryBalloonScoreNotify) GetUidScoreMap() map[uint32]uint32 {
	if x != nil {
		return x.UidScoreMap
	}
	return nil
}

type BalloonSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        uint32            `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	ShootCount uint32            `protobuf:"varint,12,opt,name=shoot_count,json=shootCount,proto3" json:"shoot_count,omitempty"`
	MaxCombo   uint32            `protobuf:"varint,9,opt,name=max_combo,json=maxCombo,proto3" json:"max_combo,omitempty"`
	FinalScore uint32            `protobuf:"varint,7,opt,name=final_score,json=finalScore,proto3" json:"final_score,omitempty"`
	PlayerInfo *OnlinePlayerInfo `protobuf:"bytes,2,opt,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"`
}

func (x *BalloonSettleInfo) Reset() {
	*x = BalloonSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalloonSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalloonSettleInfo) ProtoMessage() {}

func (x *BalloonSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalloonSettleInfo.ProtoReflect.Descriptor instead.
func (*BalloonSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{4}
}

func (x *BalloonSettleInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BalloonSettleInfo) GetShootCount() uint32 {
	if x != nil {
		return x.ShootCount
	}
	return 0
}

func (x *BalloonSettleInfo) GetMaxCombo() uint32 {
	if x != nil {
		return x.MaxCombo
	}
	return 0
}

func (x *BalloonSettleInfo) GetFinalScore() uint32 {
	if x != nil {
		return x.FinalScore
	}
	return 0
}

func (x *BalloonSettleInfo) GetPlayerInfo() *OnlinePlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type GalleryStopNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId uint32 `protobuf:"varint,8,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *GalleryStopNotify) Reset() {
	*x = GalleryStopNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryStopNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryStopNotify) ProtoMessage() {}

func (x *GalleryStopNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryStopNotify.ProtoReflect.Descriptor instead.
func (*GalleryStopNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{5}
}

func (x *GalleryStopNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type FallSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatchCount              uint32            `protobuf:"varint,15,opt,name=catch_count,json=catchCount,proto3" json:"catch_count,omitempty"`
	PlayerInfo              *OnlinePlayerInfo `protobuf:"bytes,13,opt,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"`
	Uid                     uint32            `protobuf:"varint,14,opt,name=uid,proto3" json:"uid,omitempty"`
	FlowerRingCatchCountMap map[uint32]uint32 `protobuf:"bytes,3,rep,name=flower_ring_catch_count_map,json=flowerRingCatchCountMap,proto3" json:"flower_ring_catch_count_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RemainTime              uint32            `protobuf:"varint,10,opt,name=remain_time,json=remainTime,proto3" json:"remain_time,omitempty"`
	FinalScore              uint32            `protobuf:"varint,1,opt,name=final_score,json=finalScore,proto3" json:"final_score,omitempty"`
}

func (x *FallSettleInfo) Reset() {
	*x = FallSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FallSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FallSettleInfo) ProtoMessage() {}

func (x *FallSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FallSettleInfo.ProtoReflect.Descriptor instead.
func (*FallSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{6}
}

func (x *FallSettleInfo) GetCatchCount() uint32 {
	if x != nil {
		return x.CatchCount
	}
	return 0
}

func (x *FallSettleInfo) GetPlayerInfo() *OnlinePlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *FallSettleInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FallSettleInfo) GetFlowerRingCatchCountMap() map[uint32]uint32 {
	if x != nil {
		return x.FlowerRingCatchCountMap
	}
	return nil
}

func (x *FallSettleInfo) GetRemainTime() uint32 {
	if x != nil {
		return x.RemainTime
	}
	return 0
}

func (x *FallSettleInfo) GetFinalScore() uint32 {
	if x != nil {
		return x.FinalScore
	}
	return 0
}

type GalleryFallCatchNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurScore          uint32            `protobuf:"varint,6,opt,name=cur_score,json=curScore,proto3" json:"cur_score,omitempty"`
	TimeCost          uint32            `protobuf:"varint,11,opt,name=time_cost,json=timeCost,proto3" json:"time_cost,omitempty"`
	BallCatchCountMap map[uint32]uint32 `protobuf:"bytes,15,rep,name=ball_catch_count_map,json=ballCatchCountMap,proto3" json:"ball_catch_count_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AddScore          uint32            `protobuf:"varint,1,opt,name=add_score,json=addScore,proto3" json:"add_score,omitempty"`
	IsGround          bool              `protobuf:"varint,12,opt,name=is_ground,json=isGround,proto3" json:"is_ground,omitempty"`
	GalleryId         uint32            `protobuf:"varint,10,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *GalleryFallCatchNotify) Reset() {
	*x = GalleryFallCatchNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryFallCatchNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryFallCatchNotify) ProtoMessage() {}

func (x *GalleryFallCatchNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryFallCatchNotify.ProtoReflect.Descriptor instead.
func (*GalleryFallCatchNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{7}
}

func (x *GalleryFallCatchNotify) GetCurScore() uint32 {
	if x != nil {
		return x.CurScore
	}
	return 0
}

func (x *GalleryFallCatchNotify) GetTimeCost() uint32 {
	if x != nil {
		return x.TimeCost
	}
	return 0
}

func (x *GalleryFallCatchNotify) GetBallCatchCountMap() map[uint32]uint32 {
	if x != nil {
		return x.BallCatchCountMap
	}
	return nil
}

func (x *GalleryFallCatchNotify) GetAddScore() uint32 {
	if x != nil {
		return x.AddScore
	}
	return 0
}

func (x *GalleryFallCatchNotify) GetIsGround() bool {
	if x != nil {
		return x.IsGround
	}
	return false
}

func (x *GalleryFallCatchNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type FallPlayerBrief struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      uint32 `protobuf:"varint,13,opt,name=uid,proto3" json:"uid,omitempty"`
	IsGround bool   `protobuf:"varint,5,opt,name=is_ground,json=isGround,proto3" json:"is_ground,omitempty"`
	Score    uint32 `protobuf:"varint,10,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *FallPlayerBrief) Reset() {
	*x = FallPlayerBrief{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FallPlayerBrief) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FallPlayerBrief) ProtoMessage() {}

func (x *FallPlayerBrief) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FallPlayerBrief.ProtoReflect.Descriptor instead.
func (*FallPlayerBrief) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{8}
}

func (x *FallPlayerBrief) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FallPlayerBrief) GetIsGround() bool {
	if x != nil {
		return x.IsGround
	}
	return false
}

func (x *FallPlayerBrief) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type GalleryFallScoreNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId   uint32                      `protobuf:"varint,7,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	UidBriefMap map[uint32]*FallPlayerBrief `protobuf:"bytes,1,rep,name=uid_brief_map,json=uidBriefMap,proto3" json:"uid_brief_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GalleryFallScoreNotify) Reset() {
	*x = GalleryFallScoreNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryFallScoreNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryFallScoreNotify) ProtoMessage() {}

func (x *GalleryFallScoreNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryFallScoreNotify.ProtoReflect.Descriptor instead.
func (*GalleryFallScoreNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{9}
}

func (x *GalleryFallScoreNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *GalleryFallScoreNotify) GetUidBriefMap() map[uint32]*FallPlayerBrief {
	if x != nil {
		return x.UidBriefMap
	}
	return nil
}

type BalloonPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid              uint32 `protobuf:"varint,15,opt,name=uid,proto3" json:"uid,omitempty"`
	CurScore         uint32 `protobuf:"varint,2,opt,name=cur_score,json=curScore,proto3" json:"cur_score,omitempty"`
	ComboDisableTime uint32 `protobuf:"varint,14,opt,name=combo_disable_time,json=comboDisableTime,proto3" json:"combo_disable_time,omitempty"`
	Combo            uint32 `protobuf:"varint,11,opt,name=combo,proto3" json:"combo,omitempty"`
}

func (x *BalloonPlayerInfo) Reset() {
	*x = BalloonPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalloonPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalloonPlayerInfo) ProtoMessage() {}

func (x *BalloonPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalloonPlayerInfo.ProtoReflect.Descriptor instead.
func (*BalloonPlayerInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{10}
}

func (x *BalloonPlayerInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BalloonPlayerInfo) GetCurScore() uint32 {
	if x != nil {
		return x.CurScore
	}
	return 0
}

func (x *BalloonPlayerInfo) GetComboDisableTime() uint32 {
	if x != nil {
		return x.ComboDisableTime
	}
	return 0
}

func (x *BalloonPlayerInfo) GetCombo() uint32 {
	if x != nil {
		return x.Combo
	}
	return 0
}

type FallPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeCost          uint32            `protobuf:"varint,11,opt,name=time_cost,json=timeCost,proto3" json:"time_cost,omitempty"`
	Uid               uint32            `protobuf:"varint,9,opt,name=uid,proto3" json:"uid,omitempty"`
	BallCatchCountMap map[uint32]uint32 `protobuf:"bytes,6,rep,name=ball_catch_count_map,json=ballCatchCountMap,proto3" json:"ball_catch_count_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CurScore          uint32            `protobuf:"varint,7,opt,name=cur_score,json=curScore,proto3" json:"cur_score,omitempty"`
	IsGround          bool              `protobuf:"varint,15,opt,name=is_ground,json=isGround,proto3" json:"is_ground,omitempty"`
}

func (x *FallPlayerInfo) Reset() {
	*x = FallPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FallPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FallPlayerInfo) ProtoMessage() {}

func (x *FallPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FallPlayerInfo.ProtoReflect.Descriptor instead.
func (*FallPlayerInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{11}
}

func (x *FallPlayerInfo) GetTimeCost() uint32 {
	if x != nil {
		return x.TimeCost
	}
	return 0
}

func (x *FallPlayerInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FallPlayerInfo) GetBallCatchCountMap() map[uint32]uint32 {
	if x != nil {
		return x.BallCatchCountMap
	}
	return nil
}

func (x *FallPlayerInfo) GetCurScore() uint32 {
	if x != nil {
		return x.CurScore
	}
	return 0
}

func (x *FallPlayerInfo) GetIsGround() bool {
	if x != nil {
		return x.IsGround
	}
	return false
}

type SceneGalleryBalloonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScenePlayerBalloonInfoMap map[uint32]*BalloonPlayerInfo `protobuf:"bytes,14,rep,name=scene_player_balloon_info_map,json=scenePlayerBalloonInfoMap,proto3" json:"scene_player_balloon_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EndTime                   uint32                        `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *SceneGalleryBalloonInfo) Reset() {
	*x = SceneGalleryBalloonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryBalloonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryBalloonInfo) ProtoMessage() {}

func (x *SceneGalleryBalloonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryBalloonInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryBalloonInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{12}
}

func (x *SceneGalleryBalloonInfo) GetScenePlayerBalloonInfoMap() map[uint32]*BalloonPlayerInfo {
	if x != nil {
		return x.ScenePlayerBalloonInfoMap
	}
	return nil
}

func (x *SceneGalleryBalloonInfo) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type SceneGalleryFallInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScenePlayerFallInfoMap map[uint32]*FallPlayerInfo `protobuf:"bytes,12,rep,name=scene_player_fall_info_map,json=scenePlayerFallInfoMap,proto3" json:"scene_player_fall_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EndTime                uint32                     `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *SceneGalleryFallInfo) Reset() {
	*x = SceneGalleryFallInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryFallInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryFallInfo) ProtoMessage() {}

func (x *SceneGalleryFallInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryFallInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryFallInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{13}
}

func (x *SceneGalleryFallInfo) GetScenePlayerFallInfoMap() map[uint32]*FallPlayerInfo {
	if x != nil {
		return x.ScenePlayerFallInfoMap
	}
	return nil
}

func (x *SceneGalleryFallInfo) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type SceneGalleryFlowerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTime     uint32 `protobuf:"varint,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	TargetScore uint32 `protobuf:"varint,13,opt,name=target_score,json=targetScore,proto3" json:"target_score,omitempty"`
	CurScore    uint32 `protobuf:"varint,9,opt,name=cur_score,json=curScore,proto3" json:"cur_score,omitempty"`
}

func (x *SceneGalleryFlowerInfo) Reset() {
	*x = SceneGalleryFlowerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryFlowerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryFlowerInfo) ProtoMessage() {}

func (x *SceneGalleryFlowerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryFlowerInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryFlowerInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{14}
}

func (x *SceneGalleryFlowerInfo) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SceneGalleryFlowerInfo) GetTargetScore() uint32 {
	if x != nil {
		return x.TargetScore
	}
	return 0
}

func (x *SceneGalleryFlowerInfo) GetCurScore() uint32 {
	if x != nil {
		return x.CurScore
	}
	return 0
}

type SceneGalleryBulletInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTime     uint32            `protobuf:"varint,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	HitCountMap map[uint32]uint32 `protobuf:"bytes,10,rep,name=hit_count_map,json=hitCountMap,proto3" json:"hit_count_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *SceneGalleryBulletInfo) Reset() {
	*x = SceneGalleryBulletInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryBulletInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryBulletInfo) ProtoMessage() {}

func (x *SceneGalleryBulletInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryBulletInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryBulletInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{15}
}

func (x *SceneGalleryBulletInfo) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SceneGalleryBulletInfo) GetHitCountMap() map[uint32]uint32 {
	if x != nil {
		return x.HitCountMap
	}
	return nil
}

type SceneGalleryBrokenFloorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FallCountMap map[uint32]uint32 `protobuf:"bytes,3,rep,name=fall_count_map,json=fallCountMap,proto3" json:"fall_count_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	EndTime      uint32            `protobuf:"varint,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *SceneGalleryBrokenFloorInfo) Reset() {
	*x = SceneGalleryBrokenFloorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryBrokenFloorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryBrokenFloorInfo) ProtoMessage() {}

func (x *SceneGalleryBrokenFloorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryBrokenFloorInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryBrokenFloorInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{16}
}

func (x *SceneGalleryBrokenFloorInfo) GetFallCountMap() map[uint32]uint32 {
	if x != nil {
		return x.FallCountMap
	}
	return nil
}

func (x *SceneGalleryBrokenFloorInfo) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type SceneGalleryHideAndSeekInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VisibleUidList []uint32 `protobuf:"varint,13,rep,packed,name=visible_uid_list,json=visibleUidList,proto3" json:"visible_uid_list,omitempty"`
	CaughtUidList  []uint32 `protobuf:"varint,4,rep,packed,name=caught_uid_list,json=caughtUidList,proto3" json:"caught_uid_list,omitempty"`
}

func (x *SceneGalleryHideAndSeekInfo) Reset() {
	*x = SceneGalleryHideAndSeekInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryHideAndSeekInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryHideAndSeekInfo) ProtoMessage() {}

func (x *SceneGalleryHideAndSeekInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryHideAndSeekInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryHideAndSeekInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{17}
}

func (x *SceneGalleryHideAndSeekInfo) GetVisibleUidList() []uint32 {
	if x != nil {
		return x.VisibleUidList
	}
	return nil
}

func (x *SceneGalleryHideAndSeekInfo) GetCaughtUidList() []uint32 {
	if x != nil {
		return x.CaughtUidList
	}
	return nil
}

type SceneGalleryBuoyantCombatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score                   uint32 `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
	KillSpecialMonsterCount uint32 `protobuf:"varint,1,opt,name=kill_special_monster_count,json=killSpecialMonsterCount,proto3" json:"kill_special_monster_count,omitempty"`
	KillMonsterCount        uint32 `protobuf:"varint,14,opt,name=kill_monster_count,json=killMonsterCount,proto3" json:"kill_monster_count,omitempty"`
}

func (x *SceneGalleryBuoyantCombatInfo) Reset() {
	*x = SceneGalleryBuoyantCombatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryBuoyantCombatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryBuoyantCombatInfo) ProtoMessage() {}

func (x *SceneGalleryBuoyantCombatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryBuoyantCombatInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryBuoyantCombatInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{18}
}

func (x *SceneGalleryBuoyantCombatInfo) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SceneGalleryBuoyantCombatInfo) GetKillSpecialMonsterCount() uint32 {
	if x != nil {
		return x.KillSpecialMonsterCount
	}
	return 0
}

func (x *SceneGalleryBuoyantCombatInfo) GetKillMonsterCount() uint32 {
	if x != nil {
		return x.KillMonsterCount
	}
	return 0
}

type SceneGalleryProgressInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgressStageList []uint32 `protobuf:"varint,8,rep,packed,name=progress_stage_list,json=progressStageList,proto3" json:"progress_stage_list,omitempty"`
	Key               string   `protobuf:"bytes,11,opt,name=key,proto3" json:"key,omitempty"`
	Progress          uint32   `protobuf:"varint,5,opt,name=progress,proto3" json:"progress,omitempty"`
	UiForm            uint32   `protobuf:"varint,12,opt,name=ui_form,json=uiForm,proto3" json:"ui_form,omitempty"`
}

func (x *SceneGalleryProgressInfo) Reset() {
	*x = SceneGalleryProgressInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryProgressInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryProgressInfo) ProtoMessage() {}

func (x *SceneGalleryProgressInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryProgressInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryProgressInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{19}
}

func (x *SceneGalleryProgressInfo) GetProgressStageList() []uint32 {
	if x != nil {
		return x.ProgressStageList
	}
	return nil
}

func (x *SceneGalleryProgressInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SceneGalleryProgressInfo) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *SceneGalleryProgressInfo) GetUiForm() uint32 {
	if x != nil {
		return x.UiForm
	}
	return 0
}

type SceneGalleryBounceConjuringInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalDestroyedMachineCount uint32 `protobuf:"varint,4,opt,name=total_destroyed_machine_count,json=totalDestroyedMachineCount,proto3" json:"total_destroyed_machine_count,omitempty"`
	TotalScore                 uint32 `protobuf:"varint,6,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`
}

func (x *SceneGalleryBounceConjuringInfo) Reset() {
	*x = SceneGalleryBounceConjuringInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryBounceConjuringInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryBounceConjuringInfo) ProtoMessage() {}

func (x *SceneGalleryBounceConjuringInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryBounceConjuringInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryBounceConjuringInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{20}
}

func (x *SceneGalleryBounceConjuringInfo) GetTotalDestroyedMachineCount() uint32 {
	if x != nil {
		return x.TotalDestroyedMachineCount
	}
	return 0
}

func (x *SceneGalleryBounceConjuringInfo) GetTotalScore() uint32 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

type SceneGalleryHandballInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BallPlaceInfo *PlaceInfo `protobuf:"bytes,9,opt,name=ball_place_info,json=ballPlaceInfo,proto3" json:"ball_place_info,omitempty"`
	IsHaveBall    bool       `protobuf:"varint,15,opt,name=is_have_ball,json=isHaveBall,proto3" json:"is_have_ball,omitempty"`
}

func (x *SceneGalleryHandballInfo) Reset() {
	*x = SceneGalleryHandballInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryHandballInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryHandballInfo) ProtoMessage() {}

func (x *SceneGalleryHandballInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryHandballInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryHandballInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{21}
}

func (x *SceneGalleryHandballInfo) GetBallPlaceInfo() *PlaceInfo {
	if x != nil {
		return x.BallPlaceInfo
	}
	return nil
}

func (x *SceneGalleryHandballInfo) GetIsHaveBall() bool {
	if x != nil {
		return x.IsHaveBall
	}
	return false
}

type SceneGallerySumoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score                uint32 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	KillNormalMosnterNum uint32 `protobuf:"varint,15,opt,name=kill_normal_mosnter_num,json=killNormalMosnterNum,proto3" json:"kill_normal_mosnter_num,omitempty"`
	KillEliteMonsterNum  uint32 `protobuf:"varint,14,opt,name=kill_elite_monster_num,json=killEliteMonsterNum,proto3" json:"kill_elite_monster_num,omitempty"`
}

func (x *SceneGallerySumoInfo) Reset() {
	*x = SceneGallerySumoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGallerySumoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGallerySumoInfo) ProtoMessage() {}

func (x *SceneGallerySumoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGallerySumoInfo.ProtoReflect.Descriptor instead.
func (*SceneGallerySumoInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{22}
}

func (x *SceneGallerySumoInfo) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SceneGallerySumoInfo) GetKillNormalMosnterNum() uint32 {
	if x != nil {
		return x.KillNormalMosnterNum
	}
	return 0
}

func (x *SceneGallerySumoInfo) GetKillEliteMonsterNum() uint32 {
	if x != nil {
		return x.KillEliteMonsterNum
	}
	return 0
}

type SceneGallerySalvagePreventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterCount uint32 `protobuf:"varint,7,opt,name=monster_count,json=monsterCount,proto3" json:"monster_count,omitempty"`
}

func (x *SceneGallerySalvagePreventInfo) Reset() {
	*x = SceneGallerySalvagePreventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGallerySalvagePreventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGallerySalvagePreventInfo) ProtoMessage() {}

func (x *SceneGallerySalvagePreventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGallerySalvagePreventInfo.ProtoReflect.Descriptor instead.
func (*SceneGallerySalvagePreventInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{23}
}

func (x *SceneGallerySalvagePreventInfo) GetMonsterCount() uint32 {
	if x != nil {
		return x.MonsterCount
	}
	return 0
}

type SceneGallerySalvageEscortInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxBoxCount     uint32 `protobuf:"varint,14,opt,name=max_box_count,json=maxBoxCount,proto3" json:"max_box_count,omitempty"`
	MaxMonsterCount uint32 `protobuf:"varint,3,opt,name=max_monster_count,json=maxMonsterCount,proto3" json:"max_monster_count,omitempty"`
	BoxCount        uint32 `protobuf:"varint,7,opt,name=box_count,json=boxCount,proto3" json:"box_count,omitempty"`
	MonsterCount    uint32 `protobuf:"varint,11,opt,name=monster_count,json=monsterCount,proto3" json:"monster_count,omitempty"`
}

func (x *SceneGallerySalvageEscortInfo) Reset() {
	*x = SceneGallerySalvageEscortInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGallerySalvageEscortInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGallerySalvageEscortInfo) ProtoMessage() {}

func (x *SceneGallerySalvageEscortInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGallerySalvageEscortInfo.ProtoReflect.Descriptor instead.
func (*SceneGallerySalvageEscortInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{24}
}

func (x *SceneGallerySalvageEscortInfo) GetMaxBoxCount() uint32 {
	if x != nil {
		return x.MaxBoxCount
	}
	return 0
}

func (x *SceneGallerySalvageEscortInfo) GetMaxMonsterCount() uint32 {
	if x != nil {
		return x.MaxMonsterCount
	}
	return 0
}

func (x *SceneGallerySalvageEscortInfo) GetBoxCount() uint32 {
	if x != nil {
		return x.BoxCount
	}
	return 0
}

func (x *SceneGallerySalvageEscortInfo) GetMonsterCount() uint32 {
	if x != nil {
		return x.MonsterCount
	}
	return 0
}

type SceneGalleryCrystalLinkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score uint32 `protobuf:"varint,10,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *SceneGalleryCrystalLinkInfo) Reset() {
	*x = SceneGalleryCrystalLinkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryCrystalLinkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryCrystalLinkInfo) ProtoMessage() {}

func (x *SceneGalleryCrystalLinkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryCrystalLinkInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryCrystalLinkInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{25}
}

func (x *SceneGalleryCrystalLinkInfo) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type SceneGalleryIrodoriMasterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId    uint32 `protobuf:"varint,8,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	Difficulty uint32 `protobuf:"varint,1,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	IsCgViewed bool   `protobuf:"varint,5,opt,name=is_cg_viewed,json=isCgViewed,proto3" json:"is_cg_viewed,omitempty"`
}

func (x *SceneGalleryIrodoriMasterInfo) Reset() {
	*x = SceneGalleryIrodoriMasterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryIrodoriMasterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryIrodoriMasterInfo) ProtoMessage() {}

func (x *SceneGalleryIrodoriMasterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryIrodoriMasterInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryIrodoriMasterInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{26}
}

func (x *SceneGalleryIrodoriMasterInfo) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *SceneGalleryIrodoriMasterInfo) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *SceneGalleryIrodoriMasterInfo) GetIsCgViewed() bool {
	if x != nil {
		return x.IsCgViewed
	}
	return false
}

type SceneGalleryHomeBalloonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score uint32 `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *SceneGalleryHomeBalloonInfo) Reset() {
	*x = SceneGalleryHomeBalloonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryHomeBalloonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryHomeBalloonInfo) ProtoMessage() {}

func (x *SceneGalleryHomeBalloonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryHomeBalloonInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryHomeBalloonInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{27}
}

func (x *SceneGalleryHomeBalloonInfo) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type SceneGalleryLuminanceStoneChallengeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KillMonsterCount        uint32 `protobuf:"varint,5,opt,name=kill_monster_count,json=killMonsterCount,proto3" json:"kill_monster_count,omitempty"`
	Score                   uint32 `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	CleanMudCount           uint32 `protobuf:"varint,2,opt,name=clean_mud_count,json=cleanMudCount,proto3" json:"clean_mud_count,omitempty"`
	KillSpecialMonsterCount uint32 `protobuf:"varint,6,opt,name=kill_special_monster_count,json=killSpecialMonsterCount,proto3" json:"kill_special_monster_count,omitempty"`
}

func (x *SceneGalleryLuminanceStoneChallengeInfo) Reset() {
	*x = SceneGalleryLuminanceStoneChallengeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryLuminanceStoneChallengeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryLuminanceStoneChallengeInfo) ProtoMessage() {}

func (x *SceneGalleryLuminanceStoneChallengeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryLuminanceStoneChallengeInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryLuminanceStoneChallengeInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{28}
}

func (x *SceneGalleryLuminanceStoneChallengeInfo) GetKillMonsterCount() uint32 {
	if x != nil {
		return x.KillMonsterCount
	}
	return 0
}

func (x *SceneGalleryLuminanceStoneChallengeInfo) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SceneGalleryLuminanceStoneChallengeInfo) GetCleanMudCount() uint32 {
	if x != nil {
		return x.CleanMudCount
	}
	return 0
}

func (x *SceneGalleryLuminanceStoneChallengeInfo) GetKillSpecialMonsterCount() uint32 {
	if x != nil {
		return x.KillSpecialMonsterCount
	}
	return 0
}

type SceneGalleryHomeSeekFurnitureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurTideLeftNum      uint32            `protobuf:"varint,6,opt,name=cur_tide_left_num,json=curTideLeftNum,proto3" json:"cur_tide_left_num,omitempty"`
	PlayerScoreMap      map[uint32]uint32 `protobuf:"bytes,8,rep,name=player_score_map,json=playerScoreMap,proto3" json:"player_score_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CurTideDurationTime uint32            `protobuf:"varint,12,opt,name=cur_tide_duration_time,json=curTideDurationTime,proto3" json:"cur_tide_duration_time,omitempty"`
	CurTideTotalNum     uint32            `protobuf:"varint,9,opt,name=cur_tide_total_num,json=curTideTotalNum,proto3" json:"cur_tide_total_num,omitempty"`
}

func (x *SceneGalleryHomeSeekFurnitureInfo) Reset() {
	*x = SceneGalleryHomeSeekFurnitureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryHomeSeekFurnitureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryHomeSeekFurnitureInfo) ProtoMessage() {}

func (x *SceneGalleryHomeSeekFurnitureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryHomeSeekFurnitureInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryHomeSeekFurnitureInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{29}
}

func (x *SceneGalleryHomeSeekFurnitureInfo) GetCurTideLeftNum() uint32 {
	if x != nil {
		return x.CurTideLeftNum
	}
	return 0
}

func (x *SceneGalleryHomeSeekFurnitureInfo) GetPlayerScoreMap() map[uint32]uint32 {
	if x != nil {
		return x.PlayerScoreMap
	}
	return nil
}

func (x *SceneGalleryHomeSeekFurnitureInfo) GetCurTideDurationTime() uint32 {
	if x != nil {
		return x.CurTideDurationTime
	}
	return 0
}

func (x *SceneGalleryHomeSeekFurnitureInfo) GetCurTideTotalNum() uint32 {
	if x != nil {
		return x.CurTideTotalNum
	}
	return 0
}

type SceneGalleryIslandPartyDownHillInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalKillMonsterCount uint32             `protobuf:"varint,14,opt,name=total_kill_monster_count,json=totalKillMonsterCount,proto3" json:"total_kill_monster_count,omitempty"`
	StartSource           GalleryStartSource `protobuf:"varint,15,opt,name=start_source,json=startSource,proto3,enum=proto.GalleryStartSource" json:"start_source,omitempty"`
	MaxKillMonsterCount   uint32             `protobuf:"varint,5,opt,name=max_kill_monster_count,json=maxKillMonsterCount,proto3" json:"max_kill_monster_count,omitempty"`
	Coin                  uint32             `protobuf:"varint,13,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (x *SceneGalleryIslandPartyDownHillInfo) Reset() {
	*x = SceneGalleryIslandPartyDownHillInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryIslandPartyDownHillInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryIslandPartyDownHillInfo) ProtoMessage() {}

func (x *SceneGalleryIslandPartyDownHillInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryIslandPartyDownHillInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryIslandPartyDownHillInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{30}
}

func (x *SceneGalleryIslandPartyDownHillInfo) GetTotalKillMonsterCount() uint32 {
	if x != nil {
		return x.TotalKillMonsterCount
	}
	return 0
}

func (x *SceneGalleryIslandPartyDownHillInfo) GetStartSource() GalleryStartSource {
	if x != nil {
		return x.StartSource
	}
	return GalleryStartSource_GALLERY_START_BY_NONE
}

func (x *SceneGalleryIslandPartyDownHillInfo) GetMaxKillMonsterCount() uint32 {
	if x != nil {
		return x.MaxKillMonsterCount
	}
	return 0
}

func (x *SceneGalleryIslandPartyDownHillInfo) GetCoin() uint32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

type SceneGallerySummerTimeV2BoatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param1   uint32 `protobuf:"varint,15,opt,name=param1,proto3" json:"param1,omitempty"`
	Param3   uint32 `protobuf:"varint,3,opt,name=param3,proto3" json:"param3,omitempty"`
	UsedTime uint32 `protobuf:"varint,11,opt,name=used_time,json=usedTime,proto3" json:"used_time,omitempty"`
	Param2   uint32 `protobuf:"varint,7,opt,name=param2,proto3" json:"param2,omitempty"`
}

func (x *SceneGallerySummerTimeV2BoatInfo) Reset() {
	*x = SceneGallerySummerTimeV2BoatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGallerySummerTimeV2BoatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGallerySummerTimeV2BoatInfo) ProtoMessage() {}

func (x *SceneGallerySummerTimeV2BoatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGallerySummerTimeV2BoatInfo.ProtoReflect.Descriptor instead.
func (*SceneGallerySummerTimeV2BoatInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{31}
}

func (x *SceneGallerySummerTimeV2BoatInfo) GetParam1() uint32 {
	if x != nil {
		return x.Param1
	}
	return 0
}

func (x *SceneGallerySummerTimeV2BoatInfo) GetParam3() uint32 {
	if x != nil {
		return x.Param3
	}
	return 0
}

func (x *SceneGallerySummerTimeV2BoatInfo) GetUsedTime() uint32 {
	if x != nil {
		return x.UsedTime
	}
	return 0
}

func (x *SceneGallerySummerTimeV2BoatInfo) GetParam2() uint32 {
	if x != nil {
		return x.Param2
	}
	return 0
}

type SceneGalleryIslandPartyRaftInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin         uint32             `protobuf:"varint,6,opt,name=coin,proto3" json:"coin,omitempty"`
	StartSource  GalleryStartSource `protobuf:"varint,7,opt,name=start_source,json=startSource,proto3,enum=proto.GalleryStartSource" json:"start_source,omitempty"`
	Component    uint32             `protobuf:"varint,1,opt,name=component,proto3" json:"component,omitempty"`
	Fuel         uint32             `protobuf:"varint,15,opt,name=fuel,proto3" json:"fuel,omitempty"`
	PointId      uint32             `protobuf:"varint,12,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
	RaftEntityId uint32             `protobuf:"varint,4,opt,name=raft_entity_id,json=raftEntityId,proto3" json:"raft_entity_id,omitempty"`
}

func (x *SceneGalleryIslandPartyRaftInfo) Reset() {
	*x = SceneGalleryIslandPartyRaftInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryIslandPartyRaftInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryIslandPartyRaftInfo) ProtoMessage() {}

func (x *SceneGalleryIslandPartyRaftInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryIslandPartyRaftInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryIslandPartyRaftInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{32}
}

func (x *SceneGalleryIslandPartyRaftInfo) GetCoin() uint32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *SceneGalleryIslandPartyRaftInfo) GetStartSource() GalleryStartSource {
	if x != nil {
		return x.StartSource
	}
	return GalleryStartSource_GALLERY_START_BY_NONE
}

func (x *SceneGalleryIslandPartyRaftInfo) GetComponent() uint32 {
	if x != nil {
		return x.Component
	}
	return 0
}

func (x *SceneGalleryIslandPartyRaftInfo) GetFuel() uint32 {
	if x != nil {
		return x.Fuel
	}
	return 0
}

func (x *SceneGalleryIslandPartyRaftInfo) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

func (x *SceneGalleryIslandPartyRaftInfo) GetRaftEntityId() uint32 {
	if x != nil {
		return x.RaftEntityId
	}
	return 0
}

type SceneGalleryIslandPartySailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxCleanProgress uint32               `protobuf:"varint,14,opt,name=max_clean_progress,json=maxCleanProgress,proto3" json:"max_clean_progress,omitempty"`
	CleanProgress    uint32               `protobuf:"varint,10,opt,name=clean_progress,json=cleanProgress,proto3" json:"clean_progress,omitempty"`
	StartSource      GalleryStartSource   `protobuf:"varint,1,opt,name=start_source,json=startSource,proto3,enum=proto.GalleryStartSource" json:"start_source,omitempty"`
	KillProgress     uint32               `protobuf:"varint,11,opt,name=kill_progress,json=killProgress,proto3" json:"kill_progress,omitempty"`
	Coin             uint32               `protobuf:"varint,15,opt,name=coin,proto3" json:"coin,omitempty"`
	Stage            IslandPartySailStage `protobuf:"varint,12,opt,name=stage,proto3,enum=proto.IslandPartySailStage" json:"stage,omitempty"`
	MaxKillProgress  uint32               `protobuf:"varint,8,opt,name=max_kill_progress,json=maxKillProgress,proto3" json:"max_kill_progress,omitempty"`
}

func (x *SceneGalleryIslandPartySailInfo) Reset() {
	*x = SceneGalleryIslandPartySailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryIslandPartySailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryIslandPartySailInfo) ProtoMessage() {}

func (x *SceneGalleryIslandPartySailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryIslandPartySailInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryIslandPartySailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{33}
}

func (x *SceneGalleryIslandPartySailInfo) GetMaxCleanProgress() uint32 {
	if x != nil {
		return x.MaxCleanProgress
	}
	return 0
}

func (x *SceneGalleryIslandPartySailInfo) GetCleanProgress() uint32 {
	if x != nil {
		return x.CleanProgress
	}
	return 0
}

func (x *SceneGalleryIslandPartySailInfo) GetStartSource() GalleryStartSource {
	if x != nil {
		return x.StartSource
	}
	return GalleryStartSource_GALLERY_START_BY_NONE
}

func (x *SceneGalleryIslandPartySailInfo) GetKillProgress() uint32 {
	if x != nil {
		return x.KillProgress
	}
	return 0
}

func (x *SceneGalleryIslandPartySailInfo) GetCoin() uint32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *SceneGalleryIslandPartySailInfo) GetStage() IslandPartySailStage {
	if x != nil {
		return x.Stage
	}
	return IslandPartySailStage_ISLAND_PARTY_SAIL_STAGE_NONE
}

func (x *SceneGalleryIslandPartySailInfo) GetMaxKillProgress() uint32 {
	if x != nil {
		return x.MaxKillProgress
	}
	return 0
}

type SceneGalleryInstableSprayBuffInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffId      uint32 `protobuf:"varint,6,opt,name=buff_id,json=buffId,proto3" json:"buff_id,omitempty"`
	BuffEndTime uint64 `protobuf:"varint,9,opt,name=buff_end_time,json=buffEndTime,proto3" json:"buff_end_time,omitempty"`
	BuffMaxTime uint64 `protobuf:"varint,4,opt,name=buff_max_time,json=buffMaxTime,proto3" json:"buff_max_time,omitempty"`
}

func (x *SceneGalleryInstableSprayBuffInfo) Reset() {
	*x = SceneGalleryInstableSprayBuffInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryInstableSprayBuffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryInstableSprayBuffInfo) ProtoMessage() {}

func (x *SceneGalleryInstableSprayBuffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryInstableSprayBuffInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryInstableSprayBuffInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{34}
}

func (x *SceneGalleryInstableSprayBuffInfo) GetBuffId() uint32 {
	if x != nil {
		return x.BuffId
	}
	return 0
}

func (x *SceneGalleryInstableSprayBuffInfo) GetBuffEndTime() uint64 {
	if x != nil {
		return x.BuffEndTime
	}
	return 0
}

func (x *SceneGalleryInstableSprayBuffInfo) GetBuffMaxTime() uint64 {
	if x != nil {
		return x.BuffMaxTime
	}
	return 0
}

type SceneGalleryInstaleSprayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score        uint32                               `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
	BuffInfoList []*SceneGalleryInstableSprayBuffInfo `protobuf:"bytes,12,rep,name=buff_info_list,json=buffInfoList,proto3" json:"buff_info_list,omitempty"`
}

func (x *SceneGalleryInstaleSprayInfo) Reset() {
	*x = SceneGalleryInstaleSprayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryInstaleSprayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryInstaleSprayInfo) ProtoMessage() {}

func (x *SceneGalleryInstaleSprayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryInstaleSprayInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryInstaleSprayInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{35}
}

func (x *SceneGalleryInstaleSprayInfo) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SceneGalleryInstaleSprayInfo) GetBuffInfoList() []*SceneGalleryInstableSprayBuffInfo {
	if x != nil {
		return x.BuffInfoList
	}
	return nil
}

type SceneGalleryTreasureSeelieInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress uint32 `protobuf:"varint,15,opt,name=progress,proto3" json:"progress,omitempty"`
	Goal     uint32 `protobuf:"varint,14,opt,name=goal,proto3" json:"goal,omitempty"`
}

func (x *SceneGalleryTreasureSeelieInfo) Reset() {
	*x = SceneGalleryTreasureSeelieInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryTreasureSeelieInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryTreasureSeelieInfo) ProtoMessage() {}

func (x *SceneGalleryTreasureSeelieInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryTreasureSeelieInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryTreasureSeelieInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{36}
}

func (x *SceneGalleryTreasureSeelieInfo) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *SceneGalleryTreasureSeelieInfo) GetGoal() uint32 {
	if x != nil {
		return x.Goal
	}
	return 0
}

type SceneGalleryWindFieldInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KilledMonsterNum      uint32 `protobuf:"varint,5,opt,name=killed_monster_num,json=killedMonsterNum,proto3" json:"killed_monster_num,omitempty"`
	ChallengeBallMaxCount uint32 `protobuf:"varint,12,opt,name=challenge_ball_max_count,json=challengeBallMaxCount,proto3" json:"challenge_ball_max_count,omitempty"`
	ShowId                uint32 `protobuf:"varint,15,opt,name=show_id,json=showId,proto3" json:"show_id,omitempty"`
	ChallengeTotalTime    uint32 `protobuf:"varint,4,opt,name=challenge_total_time,json=challengeTotalTime,proto3" json:"challenge_total_time,omitempty"`
	ChallengeBallCurCount uint32 `protobuf:"varint,9,opt,name=challenge_ball_cur_count,json=challengeBallCurCount,proto3" json:"challenge_ball_cur_count,omitempty"`
	CoinNum               uint32 `protobuf:"varint,1,opt,name=coin_num,json=coinNum,proto3" json:"coin_num,omitempty"`
	ChallengeTimestamp    uint32 `protobuf:"varint,13,opt,name=challenge_timestamp,json=challengeTimestamp,proto3" json:"challenge_timestamp,omitempty"`
	ElementBallNum        uint32 `protobuf:"varint,10,opt,name=element_ball_num,json=elementBallNum,proto3" json:"element_ball_num,omitempty"`
}

func (x *SceneGalleryWindFieldInfo) Reset() {
	*x = SceneGalleryWindFieldInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryWindFieldInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryWindFieldInfo) ProtoMessage() {}

func (x *SceneGalleryWindFieldInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryWindFieldInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryWindFieldInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{37}
}

func (x *SceneGalleryWindFieldInfo) GetKilledMonsterNum() uint32 {
	if x != nil {
		return x.KilledMonsterNum
	}
	return 0
}

func (x *SceneGalleryWindFieldInfo) GetChallengeBallMaxCount() uint32 {
	if x != nil {
		return x.ChallengeBallMaxCount
	}
	return 0
}

func (x *SceneGalleryWindFieldInfo) GetShowId() uint32 {
	if x != nil {
		return x.ShowId
	}
	return 0
}

func (x *SceneGalleryWindFieldInfo) GetChallengeTotalTime() uint32 {
	if x != nil {
		return x.ChallengeTotalTime
	}
	return 0
}

func (x *SceneGalleryWindFieldInfo) GetChallengeBallCurCount() uint32 {
	if x != nil {
		return x.ChallengeBallCurCount
	}
	return 0
}

func (x *SceneGalleryWindFieldInfo) GetCoinNum() uint32 {
	if x != nil {
		return x.CoinNum
	}
	return 0
}

func (x *SceneGalleryWindFieldInfo) GetChallengeTimestamp() uint32 {
	if x != nil {
		return x.ChallengeTimestamp
	}
	return 0
}

func (x *SceneGalleryWindFieldInfo) GetElementBallNum() uint32 {
	if x != nil {
		return x.ElementBallNum
	}
	return 0
}

type SceneGalleryFungusFighterTrainingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxMonsterCount    uint32 `protobuf:"varint,4,opt,name=max_monster_count,json=maxMonsterCount,proto3" json:"max_monster_count,omitempty"`
	KilledMonsterCount uint32 `protobuf:"varint,9,opt,name=killed_monster_count,json=killedMonsterCount,proto3" json:"killed_monster_count,omitempty"`
	BuffStartTime      uint32 `protobuf:"varint,13,opt,name=buff_start_time,json=buffStartTime,proto3" json:"buff_start_time,omitempty"`
	BuffId             uint32 `protobuf:"varint,1,opt,name=buff_id,json=buffId,proto3" json:"buff_id,omitempty"`
	MaxSkillCount      uint32 `protobuf:"varint,10,opt,name=max_skill_count,json=maxSkillCount,proto3" json:"max_skill_count,omitempty"`
	BuffLastTime       uint32 `protobuf:"varint,14,opt,name=buff_last_time,json=buffLastTime,proto3" json:"buff_last_time,omitempty"`
	RestSkillCount     uint32 `protobuf:"varint,5,opt,name=rest_skill_count,json=restSkillCount,proto3" json:"rest_skill_count,omitempty"`
}

func (x *SceneGalleryFungusFighterTrainingInfo) Reset() {
	*x = SceneGalleryFungusFighterTrainingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryFungusFighterTrainingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryFungusFighterTrainingInfo) ProtoMessage() {}

func (x *SceneGalleryFungusFighterTrainingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryFungusFighterTrainingInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryFungusFighterTrainingInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{38}
}

func (x *SceneGalleryFungusFighterTrainingInfo) GetMaxMonsterCount() uint32 {
	if x != nil {
		return x.MaxMonsterCount
	}
	return 0
}

func (x *SceneGalleryFungusFighterTrainingInfo) GetKilledMonsterCount() uint32 {
	if x != nil {
		return x.KilledMonsterCount
	}
	return 0
}

func (x *SceneGalleryFungusFighterTrainingInfo) GetBuffStartTime() uint32 {
	if x != nil {
		return x.BuffStartTime
	}
	return 0
}

func (x *SceneGalleryFungusFighterTrainingInfo) GetBuffId() uint32 {
	if x != nil {
		return x.BuffId
	}
	return 0
}

func (x *SceneGalleryFungusFighterTrainingInfo) GetMaxSkillCount() uint32 {
	if x != nil {
		return x.MaxSkillCount
	}
	return 0
}

func (x *SceneGalleryFungusFighterTrainingInfo) GetBuffLastTime() uint32 {
	if x != nil {
		return x.BuffLastTime
	}
	return 0
}

func (x *SceneGalleryFungusFighterTrainingInfo) GetRestSkillCount() uint32 {
	if x != nil {
		return x.RestSkillCount
	}
	return 0
}

type SceneGalleryFungusFighterCaptureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHideProgress bool `protobuf:"varint,13,opt,name=is_hide_progress,json=isHideProgress,proto3" json:"is_hide_progress,omitempty"`
}

func (x *SceneGalleryFungusFighterCaptureInfo) Reset() {
	*x = SceneGalleryFungusFighterCaptureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryFungusFighterCaptureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryFungusFighterCaptureInfo) ProtoMessage() {}

func (x *SceneGalleryFungusFighterCaptureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryFungusFighterCaptureInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryFungusFighterCaptureInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{39}
}

func (x *SceneGalleryFungusFighterCaptureInfo) GetIsHideProgress() bool {
	if x != nil {
		return x.IsHideProgress
	}
	return false
}

type SceneGalleryEffigyChallengeV2Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KilledMonsterCnt   uint32 `protobuf:"varint,10,opt,name=killed_monster_cnt,json=killedMonsterCnt,proto3" json:"killed_monster_cnt,omitempty"`
	TotalTargetKillCnt uint32 `protobuf:"varint,15,opt,name=total_target_kill_cnt,json=totalTargetKillCnt,proto3" json:"total_target_kill_cnt,omitempty"`
	SceneStartTime     uint32 `protobuf:"varint,14,opt,name=scene_start_time,json=sceneStartTime,proto3" json:"scene_start_time,omitempty"`
	TRemainUseTime     uint32 `protobuf:"varint,6,opt,name=t_remain_use_time,json=tRemainUseTime,proto3" json:"t_remain_use_time,omitempty"`
	BossViolentLevel   uint32 `protobuf:"varint,9,opt,name=boss_violent_level,json=bossViolentLevel,proto3" json:"boss_violent_level,omitempty"`
}

func (x *SceneGalleryEffigyChallengeV2Info) Reset() {
	*x = SceneGalleryEffigyChallengeV2Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryEffigyChallengeV2Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryEffigyChallengeV2Info) ProtoMessage() {}

func (x *SceneGalleryEffigyChallengeV2Info) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryEffigyChallengeV2Info.ProtoReflect.Descriptor instead.
func (*SceneGalleryEffigyChallengeV2Info) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{40}
}

func (x *SceneGalleryEffigyChallengeV2Info) GetKilledMonsterCnt() uint32 {
	if x != nil {
		return x.KilledMonsterCnt
	}
	return 0
}

func (x *SceneGalleryEffigyChallengeV2Info) GetTotalTargetKillCnt() uint32 {
	if x != nil {
		return x.TotalTargetKillCnt
	}
	return 0
}

func (x *SceneGalleryEffigyChallengeV2Info) GetSceneStartTime() uint32 {
	if x != nil {
		return x.SceneStartTime
	}
	return 0
}

func (x *SceneGalleryEffigyChallengeV2Info) GetTRemainUseTime() uint32 {
	if x != nil {
		return x.TRemainUseTime
	}
	return 0
}

func (x *SceneGalleryEffigyChallengeV2Info) GetBossViolentLevel() uint32 {
	if x != nil {
		return x.BossViolentLevel
	}
	return 0
}

type SceneGalleryCharAmusementInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLastLevel bool   `protobuf:"varint,2,opt,name=is_last_level,json=isLastLevel,proto3" json:"is_last_level,omitempty"`
	MaxScore    uint32 `protobuf:"varint,9,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	CurScore    uint32 `protobuf:"varint,14,opt,name=cur_score,json=curScore,proto3" json:"cur_score,omitempty"`
	IsFinish    bool   `protobuf:"varint,10,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	IsSuccess   bool   `protobuf:"varint,1,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
}

func (x *SceneGalleryCharAmusementInfo) Reset() {
	*x = SceneGalleryCharAmusementInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryCharAmusementInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryCharAmusementInfo) ProtoMessage() {}

func (x *SceneGalleryCharAmusementInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryCharAmusementInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryCharAmusementInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{41}
}

func (x *SceneGalleryCharAmusementInfo) GetIsLastLevel() bool {
	if x != nil {
		return x.IsLastLevel
	}
	return false
}

func (x *SceneGalleryCharAmusementInfo) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *SceneGalleryCharAmusementInfo) GetCurScore() uint32 {
	if x != nil {
		return x.CurScore
	}
	return 0
}

func (x *SceneGalleryCharAmusementInfo) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *SceneGalleryCharAmusementInfo) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

type SceneGalleryBrickBreakerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score     uint32 `protobuf:"varint,10,opt,name=score,proto3" json:"score,omitempty"`
	LifeCount uint32 `protobuf:"varint,4,opt,name=life_count,json=lifeCount,proto3" json:"life_count,omitempty"`
	Fever     uint32 `protobuf:"varint,2,opt,name=fever,proto3" json:"fever,omitempty"`
	Combo     uint32 `protobuf:"varint,1,opt,name=combo,proto3" json:"combo,omitempty"`
}

func (x *SceneGalleryBrickBreakerInfo) Reset() {
	*x = SceneGalleryBrickBreakerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryBrickBreakerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryBrickBreakerInfo) ProtoMessage() {}

func (x *SceneGalleryBrickBreakerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryBrickBreakerInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryBrickBreakerInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{42}
}

func (x *SceneGalleryBrickBreakerInfo) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SceneGalleryBrickBreakerInfo) GetLifeCount() uint32 {
	if x != nil {
		return x.LifeCount
	}
	return 0
}

func (x *SceneGalleryBrickBreakerInfo) GetFever() uint32 {
	if x != nil {
		return x.Fever
	}
	return 0
}

func (x *SceneGalleryBrickBreakerInfo) GetCombo() uint32 {
	if x != nil {
		return x.Combo
	}
	return 0
}

type SceneGalleryCoinCollectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinTotalNum   uint32 `protobuf:"varint,4,opt,name=coin_total_num,json=coinTotalNum,proto3" json:"coin_total_num,omitempty"`
	CoinCollectNum uint32 `protobuf:"varint,2,opt,name=coin_collect_num,json=coinCollectNum,proto3" json:"coin_collect_num,omitempty"`
}

func (x *SceneGalleryCoinCollectInfo) Reset() {
	*x = SceneGalleryCoinCollectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryCoinCollectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryCoinCollectInfo) ProtoMessage() {}

func (x *SceneGalleryCoinCollectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryCoinCollectInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryCoinCollectInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{43}
}

func (x *SceneGalleryCoinCollectInfo) GetCoinTotalNum() uint32 {
	if x != nil {
		return x.CoinTotalNum
	}
	return 0
}

func (x *SceneGalleryCoinCollectInfo) GetCoinCollectNum() uint32 {
	if x != nil {
		return x.CoinCollectNum
	}
	return 0
}

type SceneGalleryTeamChainInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryScoreEndTime uint32 `protobuf:"varint,14,opt,name=gallery_score_end_time,json=galleryScoreEndTime,proto3" json:"gallery_score_end_time,omitempty"`
	CurTotalScore       uint32 `protobuf:"varint,7,opt,name=cur_total_score,json=curTotalScore,proto3" json:"cur_total_score,omitempty"`
	CurGalleryIdx       uint32 `protobuf:"varint,3,opt,name=cur_gallery_idx,json=curGalleryIdx,proto3" json:"cur_gallery_idx,omitempty"`
	TotalTargetKillCnt  uint32 `protobuf:"varint,10,opt,name=total_target_kill_cnt,json=totalTargetKillCnt,proto3" json:"total_target_kill_cnt,omitempty"`
	KilledMonsterCnt    uint32 `protobuf:"varint,12,opt,name=killed_monster_cnt,json=killedMonsterCnt,proto3" json:"killed_monster_cnt,omitempty"`
}

func (x *SceneGalleryTeamChainInfo) Reset() {
	*x = SceneGalleryTeamChainInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryTeamChainInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryTeamChainInfo) ProtoMessage() {}

func (x *SceneGalleryTeamChainInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryTeamChainInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryTeamChainInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{44}
}

func (x *SceneGalleryTeamChainInfo) GetGalleryScoreEndTime() uint32 {
	if x != nil {
		return x.GalleryScoreEndTime
	}
	return 0
}

func (x *SceneGalleryTeamChainInfo) GetCurTotalScore() uint32 {
	if x != nil {
		return x.CurTotalScore
	}
	return 0
}

func (x *SceneGalleryTeamChainInfo) GetCurGalleryIdx() uint32 {
	if x != nil {
		return x.CurGalleryIdx
	}
	return 0
}

func (x *SceneGalleryTeamChainInfo) GetTotalTargetKillCnt() uint32 {
	if x != nil {
		return x.TotalTargetKillCnt
	}
	return 0
}

func (x *SceneGalleryTeamChainInfo) GetKilledMonsterCnt() uint32 {
	if x != nil {
		return x.KilledMonsterCnt
	}
	return 0
}

type SceneGalleryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stage            GalleryStageType            `protobuf:"varint,5,opt,name=stage,proto3,enum=proto.GalleryStageType" json:"stage,omitempty"`
	ProgressInfoList []*SceneGalleryProgressInfo `protobuf:"bytes,4,rep,name=progress_info_list,json=progressInfoList,proto3" json:"progress_info_list,omitempty"`
	GalleryId        uint32                      `protobuf:"varint,2,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	StartTime        uint32                      `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime          uint32                      `protobuf:"varint,11,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	OwnerUid         uint32                      `protobuf:"varint,9,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
	PlayerCount      uint32                      `protobuf:"varint,1,opt,name=player_count,json=playerCount,proto3" json:"player_count,omitempty"`
	PreStartEndTime  uint32                      `protobuf:"varint,15,opt,name=pre_start_end_time,json=preStartEndTime,proto3" json:"pre_start_end_time,omitempty"`
	// Types that are assignable to Info:
	//
	//	*SceneGalleryInfo_BalloonInfo
	//	*SceneGalleryInfo_FallInfo
	//	*SceneGalleryInfo_FlowerInfo
	//	*SceneGalleryInfo_BulletInfo
	//	*SceneGalleryInfo_BrokenFloorInfo
	//	*SceneGalleryInfo_HideAndSeekInfo
	//	*SceneGalleryInfo_BuoyantCombatInfo
	//	*SceneGalleryInfo_BounceConjuringInfo
	//	*SceneGalleryInfo_HandballInfo
	//	*SceneGalleryInfo_SumoInfo
	//	*SceneGalleryInfo_SalvagePreventInfo
	//	*SceneGalleryInfo_SalvageEscortInfo
	//	*SceneGalleryInfo_HomeBalloonInfo
	//	*SceneGalleryInfo_CrystalLinkInfo
	//	*SceneGalleryInfo_IrodoriMasterInfo
	//	*SceneGalleryInfo_LuminanceStoneChallengeInfo
	//	*SceneGalleryInfo_HomeSeekFurnitureInfo
	//	*SceneGalleryInfo_IslandPartyDownHillInfo
	//	*SceneGalleryInfo_SummerTimeV2BoatInfo
	//	*SceneGalleryInfo_IslandPartyRaftInfo
	//	*SceneGalleryInfo_IslandPartySailInfo
	//	*SceneGalleryInfo_InstableSprayInfo
	//	*SceneGalleryInfo_MuqadasPotionInfo
	//	*SceneGalleryInfo_TreasureSeelieInfo
	//	*SceneGalleryInfo_VintageHuntingInfo
	//	*SceneGalleryInfo_WindFieldInfo
	//	*SceneGalleryInfo_FungusFighterTrainingInfo
	//	*SceneGalleryInfo_EffigyChallengeInfo
	//	*SceneGalleryInfo_FungusFighterCaptureInfo
	//	*SceneGalleryInfo_CharAmusementInfo
	//	*SceneGalleryInfo_BrickBreakerInfo
	//	*SceneGalleryInfo_CoinCollectInfo
	//	*SceneGalleryInfo_TeamChainInfo
	Info isSceneGalleryInfo_Info `protobuf_oneof:"info"`
}

func (x *SceneGalleryInfo) Reset() {
	*x = SceneGalleryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryInfo) ProtoMessage() {}

func (x *SceneGalleryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{45}
}

func (x *SceneGalleryInfo) GetStage() GalleryStageType {
	if x != nil {
		return x.Stage
	}
	return GalleryStageType_GALLERY_NONE
}

func (x *SceneGalleryInfo) GetProgressInfoList() []*SceneGalleryProgressInfo {
	if x != nil {
		return x.ProgressInfoList
	}
	return nil
}

func (x *SceneGalleryInfo) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *SceneGalleryInfo) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SceneGalleryInfo) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SceneGalleryInfo) GetOwnerUid() uint32 {
	if x != nil {
		return x.OwnerUid
	}
	return 0
}

func (x *SceneGalleryInfo) GetPlayerCount() uint32 {
	if x != nil {
		return x.PlayerCount
	}
	return 0
}

func (x *SceneGalleryInfo) GetPreStartEndTime() uint32 {
	if x != nil {
		return x.PreStartEndTime
	}
	return 0
}

func (m *SceneGalleryInfo) GetInfo() isSceneGalleryInfo_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (x *SceneGalleryInfo) GetBalloonInfo() *SceneGalleryBalloonInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_BalloonInfo); ok {
		return x.BalloonInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetFallInfo() *SceneGalleryFallInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_FallInfo); ok {
		return x.FallInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetFlowerInfo() *SceneGalleryFlowerInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_FlowerInfo); ok {
		return x.FlowerInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetBulletInfo() *SceneGalleryBulletInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_BulletInfo); ok {
		return x.BulletInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetBrokenFloorInfo() *SceneGalleryBrokenFloorInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_BrokenFloorInfo); ok {
		return x.BrokenFloorInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetHideAndSeekInfo() *SceneGalleryHideAndSeekInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_HideAndSeekInfo); ok {
		return x.HideAndSeekInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetBuoyantCombatInfo() *SceneGalleryBuoyantCombatInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_BuoyantCombatInfo); ok {
		return x.BuoyantCombatInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetBounceConjuringInfo() *SceneGalleryBounceConjuringInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_BounceConjuringInfo); ok {
		return x.BounceConjuringInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetHandballInfo() *SceneGalleryHandballInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_HandballInfo); ok {
		return x.HandballInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetSumoInfo() *SceneGallerySumoInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_SumoInfo); ok {
		return x.SumoInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetSalvagePreventInfo() *SceneGallerySalvagePreventInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_SalvagePreventInfo); ok {
		return x.SalvagePreventInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetSalvageEscortInfo() *SceneGallerySalvageEscortInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_SalvageEscortInfo); ok {
		return x.SalvageEscortInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetHomeBalloonInfo() *SceneGalleryHomeBalloonInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_HomeBalloonInfo); ok {
		return x.HomeBalloonInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetCrystalLinkInfo() *SceneGalleryCrystalLinkInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_CrystalLinkInfo); ok {
		return x.CrystalLinkInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetIrodoriMasterInfo() *SceneGalleryIrodoriMasterInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_IrodoriMasterInfo); ok {
		return x.IrodoriMasterInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetLuminanceStoneChallengeInfo() *SceneGalleryLuminanceStoneChallengeInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_LuminanceStoneChallengeInfo); ok {
		return x.LuminanceStoneChallengeInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetHomeSeekFurnitureInfo() *SceneGalleryHomeSeekFurnitureInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_HomeSeekFurnitureInfo); ok {
		return x.HomeSeekFurnitureInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetIslandPartyDownHillInfo() *SceneGalleryIslandPartyDownHillInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_IslandPartyDownHillInfo); ok {
		return x.IslandPartyDownHillInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetSummerTimeV2BoatInfo() *SceneGallerySummerTimeV2BoatInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_SummerTimeV2BoatInfo); ok {
		return x.SummerTimeV2BoatInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetIslandPartyRaftInfo() *SceneGalleryIslandPartyRaftInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_IslandPartyRaftInfo); ok {
		return x.IslandPartyRaftInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetIslandPartySailInfo() *SceneGalleryIslandPartySailInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_IslandPartySailInfo); ok {
		return x.IslandPartySailInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetInstableSprayInfo() *SceneGalleryInstaleSprayInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_InstableSprayInfo); ok {
		return x.InstableSprayInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetMuqadasPotionInfo() *SceneGalleryMuqadasPotionInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_MuqadasPotionInfo); ok {
		return x.MuqadasPotionInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetTreasureSeelieInfo() *SceneGalleryTreasureSeelieInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_TreasureSeelieInfo); ok {
		return x.TreasureSeelieInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetVintageHuntingInfo() *SceneGalleryVintageHuntingInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_VintageHuntingInfo); ok {
		return x.VintageHuntingInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetWindFieldInfo() *SceneGalleryWindFieldInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_WindFieldInfo); ok {
		return x.WindFieldInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetFungusFighterTrainingInfo() *SceneGalleryFungusFighterTrainingInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_FungusFighterTrainingInfo); ok {
		return x.FungusFighterTrainingInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetEffigyChallengeInfo() *SceneGalleryEffigyChallengeV2Info {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_EffigyChallengeInfo); ok {
		return x.EffigyChallengeInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetFungusFighterCaptureInfo() *SceneGalleryFungusFighterCaptureInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_FungusFighterCaptureInfo); ok {
		return x.FungusFighterCaptureInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetCharAmusementInfo() *SceneGalleryCharAmusementInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_CharAmusementInfo); ok {
		return x.CharAmusementInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetBrickBreakerInfo() *SceneGalleryBrickBreakerInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_BrickBreakerInfo); ok {
		return x.BrickBreakerInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetCoinCollectInfo() *SceneGalleryCoinCollectInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_CoinCollectInfo); ok {
		return x.CoinCollectInfo
	}
	return nil
}

func (x *SceneGalleryInfo) GetTeamChainInfo() *SceneGalleryTeamChainInfo {
	if x, ok := x.GetInfo().(*SceneGalleryInfo_TeamChainInfo); ok {
		return x.TeamChainInfo
	}
	return nil
}

type isSceneGalleryInfo_Info interface {
	isSceneGalleryInfo_Info()
}

type SceneGalleryInfo_BalloonInfo struct {
	BalloonInfo *SceneGalleryBalloonInfo `protobuf:"bytes,14,opt,name=balloon_info,json=balloonInfo,proto3,oneof"`
}

type SceneGalleryInfo_FallInfo struct {
	FallInfo *SceneGalleryFallInfo `protobuf:"bytes,7,opt,name=fall_info,json=fallInfo,proto3,oneof"`
}

type SceneGalleryInfo_FlowerInfo struct {
	FlowerInfo *SceneGalleryFlowerInfo `protobuf:"bytes,8,opt,name=flower_info,json=flowerInfo,proto3,oneof"`
}

type SceneGalleryInfo_BulletInfo struct {
	BulletInfo *SceneGalleryBulletInfo `protobuf:"bytes,13,opt,name=bullet_info,json=bulletInfo,proto3,oneof"`
}

type SceneGalleryInfo_BrokenFloorInfo struct {
	BrokenFloorInfo *SceneGalleryBrokenFloorInfo `protobuf:"bytes,10,opt,name=broken_floor_info,json=brokenFloorInfo,proto3,oneof"`
}

type SceneGalleryInfo_HideAndSeekInfo struct {
	HideAndSeekInfo *SceneGalleryHideAndSeekInfo `protobuf:"bytes,6,opt,name=hide_and_seek_info,json=hideAndSeekInfo,proto3,oneof"`
}

type SceneGalleryInfo_BuoyantCombatInfo struct {
	BuoyantCombatInfo *SceneGalleryBuoyantCombatInfo `protobuf:"bytes,1384,opt,name=buoyant_combat_info,json=buoyantCombatInfo,proto3,oneof"`
}

type SceneGalleryInfo_BounceConjuringInfo struct {
	BounceConjuringInfo *SceneGalleryBounceConjuringInfo `protobuf:"bytes,708,opt,name=bounce_conjuring_info,json=bounceConjuringInfo,proto3,oneof"`
}

type SceneGalleryInfo_HandballInfo struct {
	HandballInfo *SceneGalleryHandballInfo `protobuf:"bytes,1997,opt,name=handball_info,json=handballInfo,proto3,oneof"`
}

type SceneGalleryInfo_SumoInfo struct {
	SumoInfo *SceneGallerySumoInfo `protobuf:"bytes,811,opt,name=sumo_info,json=sumoInfo,proto3,oneof"`
}

type SceneGalleryInfo_SalvagePreventInfo struct {
	SalvagePreventInfo *SceneGallerySalvagePreventInfo `protobuf:"bytes,1700,opt,name=salvage_prevent_info,json=salvagePreventInfo,proto3,oneof"`
}

type SceneGalleryInfo_SalvageEscortInfo struct {
	SalvageEscortInfo *SceneGallerySalvageEscortInfo `protobuf:"bytes,759,opt,name=salvage_escort_info,json=salvageEscortInfo,proto3,oneof"`
}

type SceneGalleryInfo_HomeBalloonInfo struct {
	HomeBalloonInfo *SceneGalleryHomeBalloonInfo `protobuf:"bytes,1034,opt,name=home_balloon_info,json=homeBalloonInfo,proto3,oneof"`
}

type SceneGalleryInfo_CrystalLinkInfo struct {
	CrystalLinkInfo *SceneGalleryCrystalLinkInfo `protobuf:"bytes,2004,opt,name=crystal_link_info,json=crystalLinkInfo,proto3,oneof"`
}

type SceneGalleryInfo_IrodoriMasterInfo struct {
	IrodoriMasterInfo *SceneGalleryIrodoriMasterInfo `protobuf:"bytes,1953,opt,name=irodori_master_info,json=irodoriMasterInfo,proto3,oneof"`
}

type SceneGalleryInfo_LuminanceStoneChallengeInfo struct {
	LuminanceStoneChallengeInfo *SceneGalleryLuminanceStoneChallengeInfo `protobuf:"bytes,106,opt,name=luminance_stone_challenge_info,json=luminanceStoneChallengeInfo,proto3,oneof"`
}

type SceneGalleryInfo_HomeSeekFurnitureInfo struct {
	HomeSeekFurnitureInfo *SceneGalleryHomeSeekFurnitureInfo `protobuf:"bytes,1456,opt,name=home_seek_furniture_info,json=homeSeekFurnitureInfo,proto3,oneof"`
}

type SceneGalleryInfo_IslandPartyDownHillInfo struct {
	IslandPartyDownHillInfo *SceneGalleryIslandPartyDownHillInfo `protobuf:"bytes,462,opt,name=island_party_down_hill_info,json=islandPartyDownHillInfo,proto3,oneof"`
}

type SceneGalleryInfo_SummerTimeV2BoatInfo struct {
	SummerTimeV2BoatInfo *SceneGallerySummerTimeV2BoatInfo `protobuf:"bytes,296,opt,name=summer_time_v2_boat_info,json=summerTimeV2BoatInfo,proto3,oneof"`
}

type SceneGalleryInfo_IslandPartyRaftInfo struct {
	IslandPartyRaftInfo *SceneGalleryIslandPartyRaftInfo `protobuf:"bytes,1805,opt,name=island_party_raft_info,json=islandPartyRaftInfo,proto3,oneof"`
}

type SceneGalleryInfo_IslandPartySailInfo struct {
	IslandPartySailInfo *SceneGalleryIslandPartySailInfo `protobuf:"bytes,1133,opt,name=island_party_sail_info,json=islandPartySailInfo,proto3,oneof"`
}

type SceneGalleryInfo_InstableSprayInfo struct {
	InstableSprayInfo *SceneGalleryInstaleSprayInfo `protobuf:"bytes,1196,opt,name=instable_spray_info,json=instableSprayInfo,proto3,oneof"`
}

type SceneGalleryInfo_MuqadasPotionInfo struct {
	MuqadasPotionInfo *SceneGalleryMuqadasPotionInfo `protobuf:"bytes,865,opt,name=muqadas_potion_info,json=muqadasPotionInfo,proto3,oneof"`
}

type SceneGalleryInfo_TreasureSeelieInfo struct {
	TreasureSeelieInfo *SceneGalleryTreasureSeelieInfo `protobuf:"bytes,1525,opt,name=treasure_seelie_info,json=treasureSeelieInfo,proto3,oneof"`
}

type SceneGalleryInfo_VintageHuntingInfo struct {
	VintageHuntingInfo *SceneGalleryVintageHuntingInfo `protobuf:"bytes,254,opt,name=vintage_hunting_info,json=vintageHuntingInfo,proto3,oneof"`
}

type SceneGalleryInfo_WindFieldInfo struct {
	WindFieldInfo *SceneGalleryWindFieldInfo `protobuf:"bytes,1080,opt,name=wind_field_info,json=windFieldInfo,proto3,oneof"`
}

type SceneGalleryInfo_FungusFighterTrainingInfo struct {
	FungusFighterTrainingInfo *SceneGalleryFungusFighterTrainingInfo `protobuf:"bytes,1328,opt,name=fungus_fighter_training_info,json=fungusFighterTrainingInfo,proto3,oneof"`
}

type SceneGalleryInfo_EffigyChallengeInfo struct {
	EffigyChallengeInfo *SceneGalleryEffigyChallengeV2Info `protobuf:"bytes,882,opt,name=effigy_challenge_info,json=effigyChallengeInfo,proto3,oneof"`
}

type SceneGalleryInfo_FungusFighterCaptureInfo struct {
	FungusFighterCaptureInfo *SceneGalleryFungusFighterCaptureInfo `protobuf:"bytes,422,opt,name=fungus_fighter_capture_info,json=fungusFighterCaptureInfo,proto3,oneof"`
}

type SceneGalleryInfo_CharAmusementInfo struct {
	CharAmusementInfo *SceneGalleryCharAmusementInfo `protobuf:"bytes,1086,opt,name=char_amusement_info,json=charAmusementInfo,proto3,oneof"`
}

type SceneGalleryInfo_BrickBreakerInfo struct {
	BrickBreakerInfo *SceneGalleryBrickBreakerInfo `protobuf:"bytes,1425,opt,name=brick_breaker_info,json=brickBreakerInfo,proto3,oneof"`
}

type SceneGalleryInfo_CoinCollectInfo struct {
	CoinCollectInfo *SceneGalleryCoinCollectInfo `protobuf:"bytes,1574,opt,name=coin_collect_info,json=coinCollectInfo,proto3,oneof"`
}

type SceneGalleryInfo_TeamChainInfo struct {
	TeamChainInfo *SceneGalleryTeamChainInfo `protobuf:"bytes,1495,opt,name=team_chain_info,json=teamChainInfo,proto3,oneof"`
}

func (*SceneGalleryInfo_BalloonInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_FallInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_FlowerInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_BulletInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_BrokenFloorInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_HideAndSeekInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_BuoyantCombatInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_BounceConjuringInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_HandballInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_SumoInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_SalvagePreventInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_SalvageEscortInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_HomeBalloonInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_CrystalLinkInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_IrodoriMasterInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_LuminanceStoneChallengeInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_HomeSeekFurnitureInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_IslandPartyDownHillInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_SummerTimeV2BoatInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_IslandPartyRaftInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_IslandPartySailInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_InstableSprayInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_MuqadasPotionInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_TreasureSeelieInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_VintageHuntingInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_WindFieldInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_FungusFighterTrainingInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_EffigyChallengeInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_FungusFighterCaptureInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_CharAmusementInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_BrickBreakerInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_CoinCollectInfo) isSceneGalleryInfo_Info() {}

func (*SceneGalleryInfo_TeamChainInfo) isSceneGalleryInfo_Info() {}

type GetAllSceneGalleryInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllSceneGalleryInfoReq) Reset() {
	*x = GetAllSceneGalleryInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllSceneGalleryInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllSceneGalleryInfoReq) ProtoMessage() {}

func (x *GetAllSceneGalleryInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllSceneGalleryInfoReq.ProtoReflect.Descriptor instead.
func (*GetAllSceneGalleryInfoReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{46}
}

type GetAllSceneGalleryInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryInfoList []*SceneGalleryInfo `protobuf:"bytes,12,rep,name=gallery_info_list,json=galleryInfoList,proto3" json:"gallery_info_list,omitempty"`
	Retcode         int32               `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GetAllSceneGalleryInfoRsp) Reset() {
	*x = GetAllSceneGalleryInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllSceneGalleryInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllSceneGalleryInfoRsp) ProtoMessage() {}

func (x *GetAllSceneGalleryInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllSceneGalleryInfoRsp.ProtoReflect.Descriptor instead.
func (*GetAllSceneGalleryInfoRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{47}
}

func (x *GetAllSceneGalleryInfoRsp) GetGalleryInfoList() []*SceneGalleryInfo {
	if x != nil {
		return x.GalleryInfoList
	}
	return nil
}

func (x *GetAllSceneGalleryInfoRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type GalleryFlowerCatchNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurScore  uint32 `protobuf:"varint,12,opt,name=cur_score,json=curScore,proto3" json:"cur_score,omitempty"`
	AddScore  uint32 `protobuf:"varint,14,opt,name=add_score,json=addScore,proto3" json:"add_score,omitempty"`
	GalleryId uint32 `protobuf:"varint,5,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *GalleryFlowerCatchNotify) Reset() {
	*x = GalleryFlowerCatchNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryFlowerCatchNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryFlowerCatchNotify) ProtoMessage() {}

func (x *GalleryFlowerCatchNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryFlowerCatchNotify.ProtoReflect.Descriptor instead.
func (*GalleryFlowerCatchNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{48}
}

func (x *GalleryFlowerCatchNotify) GetCurScore() uint32 {
	if x != nil {
		return x.CurScore
	}
	return 0
}

func (x *GalleryFlowerCatchNotify) GetAddScore() uint32 {
	if x != nil {
		return x.AddScore
	}
	return 0
}

func (x *GalleryFlowerCatchNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type GalleryPreStartNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId       uint32 `protobuf:"varint,10,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	PreStartEndTime uint32 `protobuf:"varint,9,opt,name=pre_start_end_time,json=preStartEndTime,proto3" json:"pre_start_end_time,omitempty"`
}

func (x *GalleryPreStartNotify) Reset() {
	*x = GalleryPreStartNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryPreStartNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryPreStartNotify) ProtoMessage() {}

func (x *GalleryPreStartNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryPreStartNotify.ProtoReflect.Descriptor instead.
func (*GalleryPreStartNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{49}
}

func (x *GalleryPreStartNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *GalleryPreStartNotify) GetPreStartEndTime() uint32 {
	if x != nil {
		return x.PreStartEndTime
	}
	return 0
}

type GalleryBulletHitNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HitCount  uint32 `protobuf:"varint,14,opt,name=hit_count,json=hitCount,proto3" json:"hit_count,omitempty"`
	GalleryId uint32 `protobuf:"varint,12,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *GalleryBulletHitNotify) Reset() {
	*x = GalleryBulletHitNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryBulletHitNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryBulletHitNotify) ProtoMessage() {}

func (x *GalleryBulletHitNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryBulletHitNotify.ProtoReflect.Descriptor instead.
func (*GalleryBulletHitNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{50}
}

func (x *GalleryBulletHitNotify) GetHitCount() uint32 {
	if x != nil {
		return x.HitCount
	}
	return 0
}

func (x *GalleryBulletHitNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type GalleryBrokenFloorFallNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FallCount uint32 `protobuf:"varint,3,opt,name=fall_count,json=fallCount,proto3" json:"fall_count,omitempty"`
	GalleryId uint32 `protobuf:"varint,5,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *GalleryBrokenFloorFallNotify) Reset() {
	*x = GalleryBrokenFloorFallNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryBrokenFloorFallNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryBrokenFloorFallNotify) ProtoMessage() {}

func (x *GalleryBrokenFloorFallNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryBrokenFloorFallNotify.ProtoReflect.Descriptor instead.
func (*GalleryBrokenFloorFallNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{51}
}

func (x *GalleryBrokenFloorFallNotify) GetFallCount() uint32 {
	if x != nil {
		return x.FallCount
	}
	return 0
}

func (x *GalleryBrokenFloorFallNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type InterruptGalleryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId uint32 `protobuf:"varint,13,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *InterruptGalleryReq) Reset() {
	*x = InterruptGalleryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterruptGalleryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterruptGalleryReq) ProtoMessage() {}

func (x *InterruptGalleryReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterruptGalleryReq.ProtoReflect.Descriptor instead.
func (*InterruptGalleryReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{52}
}

func (x *InterruptGalleryReq) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type InterruptGalleryRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode   int32  `protobuf:"varint,12,opt,name=retcode,proto3" json:"retcode,omitempty"`
	GalleryId uint32 `protobuf:"varint,9,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *InterruptGalleryRsp) Reset() {
	*x = InterruptGalleryRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterruptGalleryRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterruptGalleryRsp) ProtoMessage() {}

func (x *InterruptGalleryRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterruptGalleryRsp.ProtoReflect.Descriptor instead.
func (*InterruptGalleryRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{53}
}

func (x *InterruptGalleryRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *InterruptGalleryRsp) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type SceneGalleryInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryInfo *SceneGalleryInfo `protobuf:"bytes,4,opt,name=gallery_info,json=galleryInfo,proto3" json:"gallery_info,omitempty"`
}

func (x *SceneGalleryInfoNotify) Reset() {
	*x = SceneGalleryInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryInfoNotify) ProtoMessage() {}

func (x *SceneGalleryInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryInfoNotify.ProtoReflect.Descriptor instead.
func (*SceneGalleryInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{54}
}

func (x *SceneGalleryInfoNotify) GetGalleryInfo() *SceneGalleryInfo {
	if x != nil {
		return x.GalleryInfo
	}
	return nil
}

type BuoyantCombatGallerySettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryLevel            uint32 `protobuf:"varint,12,opt,name=gallery_level,json=galleryLevel,proto3" json:"gallery_level,omitempty"`
	FinalScore              uint32 `protobuf:"varint,15,opt,name=final_score,json=finalScore,proto3" json:"final_score,omitempty"`
	KillMonsterCount        uint32 `protobuf:"varint,9,opt,name=kill_monster_count,json=killMonsterCount,proto3" json:"kill_monster_count,omitempty"`
	KillTargetCount         uint32 `protobuf:"varint,1,opt,name=kill_target_count,json=killTargetCount,proto3" json:"kill_target_count,omitempty"`
	KillSpecialMonsterCount uint32 `protobuf:"varint,4,opt,name=kill_special_monster_count,json=killSpecialMonsterCount,proto3" json:"kill_special_monster_count,omitempty"`
	GalleryId               uint32 `protobuf:"varint,2,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	GalleryMultiple         uint32 `protobuf:"varint,11,opt,name=gallery_multiple,json=galleryMultiple,proto3" json:"gallery_multiple,omitempty"`
}

func (x *BuoyantCombatGallerySettleInfo) Reset() {
	*x = BuoyantCombatGallerySettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuoyantCombatGallerySettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuoyantCombatGallerySettleInfo) ProtoMessage() {}

func (x *BuoyantCombatGallerySettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuoyantCombatGallerySettleInfo.ProtoReflect.Descriptor instead.
func (*BuoyantCombatGallerySettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{55}
}

func (x *BuoyantCombatGallerySettleInfo) GetGalleryLevel() uint32 {
	if x != nil {
		return x.GalleryLevel
	}
	return 0
}

func (x *BuoyantCombatGallerySettleInfo) GetFinalScore() uint32 {
	if x != nil {
		return x.FinalScore
	}
	return 0
}

func (x *BuoyantCombatGallerySettleInfo) GetKillMonsterCount() uint32 {
	if x != nil {
		return x.KillMonsterCount
	}
	return 0
}

func (x *BuoyantCombatGallerySettleInfo) GetKillTargetCount() uint32 {
	if x != nil {
		return x.KillTargetCount
	}
	return 0
}

func (x *BuoyantCombatGallerySettleInfo) GetKillSpecialMonsterCount() uint32 {
	if x != nil {
		return x.KillSpecialMonsterCount
	}
	return 0
}

func (x *BuoyantCombatGallerySettleInfo) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *BuoyantCombatGallerySettleInfo) GetGalleryMultiple() uint32 {
	if x != nil {
		return x.GalleryMultiple
	}
	return 0
}

type BounceConjuringGallerySettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfo            *OnlinePlayerInfo        `protobuf:"bytes,14,opt,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"`
	DestroyedMachineCount uint32                   `protobuf:"varint,5,opt,name=destroyed_machine_count,json=destroyedMachineCount,proto3" json:"destroyed_machine_count,omitempty"`
	FeverCount            uint32                   `protobuf:"varint,6,opt,name=fever_count,json=feverCount,proto3" json:"fever_count,omitempty"`
	NormalHitCount        uint32                   `protobuf:"varint,4,opt,name=normal_hit_count,json=normalHitCount,proto3" json:"normal_hit_count,omitempty"`
	Damage                float32                  `protobuf:"fixed32,11,opt,name=damage,proto3" json:"damage,omitempty"`
	GadgetCountMap        map[uint32]uint32        `protobuf:"bytes,15,rep,name=gadget_count_map,json=gadgetCountMap,proto3" json:"gadget_count_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Score                 uint32                   `protobuf:"varint,12,opt,name=score,proto3" json:"score,omitempty"`
	PerfectHitCount       uint32                   `protobuf:"varint,8,opt,name=perfect_hit_count,json=perfectHitCount,proto3" json:"perfect_hit_count,omitempty"`
	CardList              []*ExhibitionDisplayInfo `protobuf:"bytes,7,rep,name=card_list,json=cardList,proto3" json:"card_list,omitempty"`
}

func (x *BounceConjuringGallerySettleInfo) Reset() {
	*x = BounceConjuringGallerySettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BounceConjuringGallerySettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BounceConjuringGallerySettleInfo) ProtoMessage() {}

func (x *BounceConjuringGallerySettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BounceConjuringGallerySettleInfo.ProtoReflect.Descriptor instead.
func (*BounceConjuringGallerySettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{56}
}

func (x *BounceConjuringGallerySettleInfo) GetPlayerInfo() *OnlinePlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *BounceConjuringGallerySettleInfo) GetDestroyedMachineCount() uint32 {
	if x != nil {
		return x.DestroyedMachineCount
	}
	return 0
}

func (x *BounceConjuringGallerySettleInfo) GetFeverCount() uint32 {
	if x != nil {
		return x.FeverCount
	}
	return 0
}

func (x *BounceConjuringGallerySettleInfo) GetNormalHitCount() uint32 {
	if x != nil {
		return x.NormalHitCount
	}
	return 0
}

func (x *BounceConjuringGallerySettleInfo) GetDamage() float32 {
	if x != nil {
		return x.Damage
	}
	return 0
}

func (x *BounceConjuringGallerySettleInfo) GetGadgetCountMap() map[uint32]uint32 {
	if x != nil {
		return x.GadgetCountMap
	}
	return nil
}

func (x *BounceConjuringGallerySettleInfo) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *BounceConjuringGallerySettleInfo) GetPerfectHitCount() uint32 {
	if x != nil {
		return x.PerfectHitCount
	}
	return 0
}

func (x *BounceConjuringGallerySettleInfo) GetCardList() []*ExhibitionDisplayInfo {
	if x != nil {
		return x.CardList
	}
	return nil
}

type GalleryBounceConjuringHitNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddScore  uint32 `protobuf:"varint,8,opt,name=add_score,json=addScore,proto3" json:"add_score,omitempty"`
	IsPerfect bool   `protobuf:"varint,5,opt,name=is_perfect,json=isPerfect,proto3" json:"is_perfect,omitempty"`
	GalleryId uint32 `protobuf:"varint,10,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *GalleryBounceConjuringHitNotify) Reset() {
	*x = GalleryBounceConjuringHitNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryBounceConjuringHitNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryBounceConjuringHitNotify) ProtoMessage() {}

func (x *GalleryBounceConjuringHitNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryBounceConjuringHitNotify.ProtoReflect.Descriptor instead.
func (*GalleryBounceConjuringHitNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{57}
}

func (x *GalleryBounceConjuringHitNotify) GetAddScore() uint32 {
	if x != nil {
		return x.AddScore
	}
	return 0
}

func (x *GalleryBounceConjuringHitNotify) GetIsPerfect() bool {
	if x != nil {
		return x.IsPerfect
	}
	return false
}

func (x *GalleryBounceConjuringHitNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type GallerySumoKillMonsterNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KillNormalMosnterNum uint32 `protobuf:"varint,4,opt,name=kill_normal_mosnter_num,json=killNormalMosnterNum,proto3" json:"kill_normal_mosnter_num,omitempty"`
	Score                uint32 `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`
	KillEliteMonsterNum  uint32 `protobuf:"varint,14,opt,name=kill_elite_monster_num,json=killEliteMonsterNum,proto3" json:"kill_elite_monster_num,omitempty"`
	GalleryId            uint32 `protobuf:"varint,11,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *GallerySumoKillMonsterNotify) Reset() {
	*x = GallerySumoKillMonsterNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GallerySumoKillMonsterNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GallerySumoKillMonsterNotify) ProtoMessage() {}

func (x *GallerySumoKillMonsterNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GallerySumoKillMonsterNotify.ProtoReflect.Descriptor instead.
func (*GallerySumoKillMonsterNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{58}
}

func (x *GallerySumoKillMonsterNotify) GetKillNormalMosnterNum() uint32 {
	if x != nil {
		return x.KillNormalMosnterNum
	}
	return 0
}

func (x *GallerySumoKillMonsterNotify) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GallerySumoKillMonsterNotify) GetKillEliteMonsterNum() uint32 {
	if x != nil {
		return x.KillEliteMonsterNum
	}
	return 0
}

func (x *GallerySumoKillMonsterNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type GalleryCrystalLinkKillMonsterNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score     uint32 `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`
	GalleryId uint32 `protobuf:"varint,9,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *GalleryCrystalLinkKillMonsterNotify) Reset() {
	*x = GalleryCrystalLinkKillMonsterNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryCrystalLinkKillMonsterNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryCrystalLinkKillMonsterNotify) ProtoMessage() {}

func (x *GalleryCrystalLinkKillMonsterNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryCrystalLinkKillMonsterNotify.ProtoReflect.Descriptor instead.
func (*GalleryCrystalLinkKillMonsterNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{59}
}

func (x *GalleryCrystalLinkKillMonsterNotify) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GalleryCrystalLinkKillMonsterNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type GalleryCrystalLinkBuffInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId   uint32 `protobuf:"varint,13,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	IsBuffValid bool   `protobuf:"varint,11,opt,name=is_buff_valid,json=isBuffValid,proto3" json:"is_buff_valid,omitempty"`
	BuffId      uint32 `protobuf:"varint,14,opt,name=buff_id,json=buffId,proto3" json:"buff_id,omitempty"`
}

func (x *GalleryCrystalLinkBuffInfoNotify) Reset() {
	*x = GalleryCrystalLinkBuffInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryCrystalLinkBuffInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryCrystalLinkBuffInfoNotify) ProtoMessage() {}

func (x *GalleryCrystalLinkBuffInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryCrystalLinkBuffInfoNotify.ProtoReflect.Descriptor instead.
func (*GalleryCrystalLinkBuffInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{60}
}

func (x *GalleryCrystalLinkBuffInfoNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *GalleryCrystalLinkBuffInfoNotify) GetIsBuffValid() bool {
	if x != nil {
		return x.IsBuffValid
	}
	return false
}

func (x *GalleryCrystalLinkBuffInfoNotify) GetBuffId() uint32 {
	if x != nil {
		return x.BuffId
	}
	return 0
}

type FishInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreeCount    uint32 `protobuf:"varint,11,opt,name=free_count,json=freeCount,proto3" json:"free_count,omitempty"`
	IntoBagCount uint32 `protobuf:"varint,12,opt,name=into_bag_count,json=intoBagCount,proto3" json:"into_bag_count,omitempty"`
}

func (x *FishInfo) Reset() {
	*x = FishInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishInfo) ProtoMessage() {}

func (x *FishInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishInfo.ProtoReflect.Descriptor instead.
func (*FishInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{61}
}

func (x *FishInfo) GetFreeCount() uint32 {
	if x != nil {
		return x.FreeCount
	}
	return 0
}

func (x *FishInfo) GetIntoBagCount() uint32 {
	if x != nil {
		return x.IntoBagCount
	}
	return 0
}

type FishingScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishingScore uint32 `protobuf:"varint,2,opt,name=fishing_score,json=fishingScore,proto3" json:"fishing_score,omitempty"`
	IsNewRecord  bool   `protobuf:"varint,4,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
}

func (x *FishingScore) Reset() {
	*x = FishingScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishingScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishingScore) ProtoMessage() {}

func (x *FishingScore) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishingScore.ProtoReflect.Descriptor instead.
func (*FishingScore) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{62}
}

func (x *FishingScore) GetFishingScore() uint32 {
	if x != nil {
		return x.FishingScore
	}
	return 0
}

func (x *FishingScore) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

type FishingGallerySettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishMap          map[uint32]*FishInfo `protobuf:"bytes,11,rep,name=fish_map,json=fishMap,proto3" json:"fish_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FishingScoreList []*FishingScore      `protobuf:"bytes,15,rep,name=fishing_score_list,json=fishingScoreList,proto3" json:"fishing_score_list,omitempty"`
}

func (x *FishingGallerySettleInfo) Reset() {
	*x = FishingGallerySettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishingGallerySettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishingGallerySettleInfo) ProtoMessage() {}

func (x *FishingGallerySettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishingGallerySettleInfo.ProtoReflect.Descriptor instead.
func (*FishingGallerySettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{63}
}

func (x *FishingGallerySettleInfo) GetFishMap() map[uint32]*FishInfo {
	if x != nil {
		return x.FishMap
	}
	return nil
}

func (x *FishingGallerySettleInfo) GetFishingScoreList() []*FishingScore {
	if x != nil {
		return x.FishingScoreList
	}
	return nil
}

type RacingGallerySettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinnerUid uint32            `protobuf:"varint,6,opt,name=winner_uid,json=winnerUid,proto3" json:"winner_uid,omitempty"`
	Reason    GalleryStopReason `protobuf:"varint,4,opt,name=reason,proto3,enum=proto.GalleryStopReason" json:"reason,omitempty"`
	UseTime   uint32            `protobuf:"varint,1,opt,name=use_time,json=useTime,proto3" json:"use_time,omitempty"`
}

func (x *RacingGallerySettleInfo) Reset() {
	*x = RacingGallerySettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RacingGallerySettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RacingGallerySettleInfo) ProtoMessage() {}

func (x *RacingGallerySettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RacingGallerySettleInfo.ProtoReflect.Descriptor instead.
func (*RacingGallerySettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{64}
}

func (x *RacingGallerySettleInfo) GetWinnerUid() uint32 {
	if x != nil {
		return x.WinnerUid
	}
	return 0
}

func (x *RacingGallerySettleInfo) GetReason() GalleryStopReason {
	if x != nil {
		return x.Reason
	}
	return GalleryStopReason_GALLERY_STOP_NONE
}

func (x *RacingGallerySettleInfo) GetUseTime() uint32 {
	if x != nil {
		return x.UseTime
	}
	return 0
}

type SalvagePreventGallerySettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRemain   uint32                   `protobuf:"varint,8,opt,name=time_remain,json=timeRemain,proto3" json:"time_remain,omitempty"`
	Reason       SalvagePreventStopReason `protobuf:"varint,7,opt,name=reason,proto3,enum=proto.SalvagePreventStopReason" json:"reason,omitempty"`
	FinalScore   uint32                   `protobuf:"varint,13,opt,name=final_score,json=finalScore,proto3" json:"final_score,omitempty"`
	MonsterCount uint32                   `protobuf:"varint,15,opt,name=monster_count,json=monsterCount,proto3" json:"monster_count,omitempty"`
}

func (x *SalvagePreventGallerySettleInfo) Reset() {
	*x = SalvagePreventGallerySettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalvagePreventGallerySettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalvagePreventGallerySettleInfo) ProtoMessage() {}

func (x *SalvagePreventGallerySettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalvagePreventGallerySettleInfo.ProtoReflect.Descriptor instead.
func (*SalvagePreventGallerySettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{65}
}

func (x *SalvagePreventGallerySettleInfo) GetTimeRemain() uint32 {
	if x != nil {
		return x.TimeRemain
	}
	return 0
}

func (x *SalvagePreventGallerySettleInfo) GetReason() SalvagePreventStopReason {
	if x != nil {
		return x.Reason
	}
	return SalvagePreventStopReason_SALVAGE_PREVENT_STOP_NONE
}

func (x *SalvagePreventGallerySettleInfo) GetFinalScore() uint32 {
	if x != nil {
		return x.FinalScore
	}
	return 0
}

func (x *SalvagePreventGallerySettleInfo) GetMonsterCount() uint32 {
	if x != nil {
		return x.MonsterCount
	}
	return 0
}

type SalvageEscortGallerySettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRemain uint32                  `protobuf:"varint,14,opt,name=time_remain,json=timeRemain,proto3" json:"time_remain,omitempty"`
	Reason     SalvageEscortStopReason `protobuf:"varint,7,opt,name=reason,proto3,enum=proto.SalvageEscortStopReason" json:"reason,omitempty"`
}

func (x *SalvageEscortGallerySettleInfo) Reset() {
	*x = SalvageEscortGallerySettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalvageEscortGallerySettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalvageEscortGallerySettleInfo) ProtoMessage() {}

func (x *SalvageEscortGallerySettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalvageEscortGallerySettleInfo.ProtoReflect.Descriptor instead.
func (*SalvageEscortGallerySettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{66}
}

func (x *SalvageEscortGallerySettleInfo) GetTimeRemain() uint32 {
	if x != nil {
		return x.TimeRemain
	}
	return 0
}

func (x *SalvageEscortGallerySettleInfo) GetReason() SalvageEscortStopReason {
	if x != nil {
		return x.Reason
	}
	return SalvageEscortStopReason_SALVAGE_ESCORT_STOP_NONE
}

type BalloonGallerySettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score    uint32            `protobuf:"varint,8,opt,name=score,proto3" json:"score,omitempty"`
	Reason   GalleryStopReason `protobuf:"varint,14,opt,name=reason,proto3,enum=proto.GalleryStopReason" json:"reason,omitempty"`
	HitCount uint32            `protobuf:"varint,10,opt,name=hit_count,json=hitCount,proto3" json:"hit_count,omitempty"`
	OwnerUid uint32            `protobuf:"varint,6,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
}

func (x *BalloonGallerySettleInfo) Reset() {
	*x = BalloonGallerySettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalloonGallerySettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalloonGallerySettleInfo) ProtoMessage() {}

func (x *BalloonGallerySettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalloonGallerySettleInfo.ProtoReflect.Descriptor instead.
func (*BalloonGallerySettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{67}
}

func (x *BalloonGallerySettleInfo) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *BalloonGallerySettleInfo) GetReason() GalleryStopReason {
	if x != nil {
		return x.Reason
	}
	return GalleryStopReason_GALLERY_STOP_NONE
}

func (x *BalloonGallerySettleInfo) GetHitCount() uint32 {
	if x != nil {
		return x.HitCount
	}
	return 0
}

func (x *BalloonGallerySettleInfo) GetOwnerUid() uint32 {
	if x != nil {
		return x.OwnerUid
	}
	return 0
}

type IrodoriMasterGallerySettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason     GalleryStopReason `protobuf:"varint,15,opt,name=reason,proto3,enum=proto.GalleryStopReason" json:"reason,omitempty"`
	IsFinish   bool              `protobuf:"varint,11,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	FinishTime uint32            `protobuf:"varint,14,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Difficult  uint32            `protobuf:"varint,6,opt,name=difficult,proto3" json:"difficult,omitempty"`
	LevelId    uint32            `protobuf:"varint,4,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *IrodoriMasterGallerySettleInfo) Reset() {
	*x = IrodoriMasterGallerySettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriMasterGallerySettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriMasterGallerySettleInfo) ProtoMessage() {}

func (x *IrodoriMasterGallerySettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriMasterGallerySettleInfo.ProtoReflect.Descriptor instead.
func (*IrodoriMasterGallerySettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{68}
}

func (x *IrodoriMasterGallerySettleInfo) GetReason() GalleryStopReason {
	if x != nil {
		return x.Reason
	}
	return GalleryStopReason_GALLERY_STOP_NONE
}

func (x *IrodoriMasterGallerySettleInfo) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *IrodoriMasterGallerySettleInfo) GetFinishTime() uint32 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *IrodoriMasterGallerySettleInfo) GetDifficult() uint32 {
	if x != nil {
		return x.Difficult
	}
	return 0
}

func (x *IrodoriMasterGallerySettleInfo) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type PhotoGallerySettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason GalleryStopReason `protobuf:"varint,7,opt,name=reason,proto3,enum=proto.GalleryStopReason" json:"reason,omitempty"`
}

func (x *PhotoGallerySettleInfo) Reset() {
	*x = PhotoGallerySettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoGallerySettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoGallerySettleInfo) ProtoMessage() {}

func (x *PhotoGallerySettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoGallerySettleInfo.ProtoReflect.Descriptor instead.
func (*PhotoGallerySettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{69}
}

func (x *PhotoGallerySettleInfo) GetReason() GalleryStopReason {
	if x != nil {
		return x.Reason
	}
	return GalleryStopReason_GALLERY_STOP_NONE
}

type LuminanceStoneChallengeGallerySettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KillMonsterCount        uint32            `protobuf:"varint,12,opt,name=kill_monster_count,json=killMonsterCount,proto3" json:"kill_monster_count,omitempty"`
	KillSpecialMonsterCount uint32            `protobuf:"varint,8,opt,name=kill_special_monster_count,json=killSpecialMonsterCount,proto3" json:"kill_special_monster_count,omitempty"`
	CleanMudCount           uint32            `protobuf:"varint,10,opt,name=clean_mud_count,json=cleanMudCount,proto3" json:"clean_mud_count,omitempty"`
	GalleryId               uint32            `protobuf:"varint,2,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	Reason                  GalleryStopReason `protobuf:"varint,11,opt,name=reason,proto3,enum=proto.GalleryStopReason" json:"reason,omitempty"`
	FinalScore              uint32            `protobuf:"varint,13,opt,name=final_score,json=finalScore,proto3" json:"final_score,omitempty"`
}

func (x *LuminanceStoneChallengeGallerySettleInfo) Reset() {
	*x = LuminanceStoneChallengeGallerySettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuminanceStoneChallengeGallerySettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuminanceStoneChallengeGallerySettleInfo) ProtoMessage() {}

func (x *LuminanceStoneChallengeGallerySettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuminanceStoneChallengeGallerySettleInfo.ProtoReflect.Descriptor instead.
func (*LuminanceStoneChallengeGallerySettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{70}
}

func (x *LuminanceStoneChallengeGallerySettleInfo) GetKillMonsterCount() uint32 {
	if x != nil {
		return x.KillMonsterCount
	}
	return 0
}

func (x *LuminanceStoneChallengeGallerySettleInfo) GetKillSpecialMonsterCount() uint32 {
	if x != nil {
		return x.KillSpecialMonsterCount
	}
	return 0
}

func (x *LuminanceStoneChallengeGallerySettleInfo) GetCleanMudCount() uint32 {
	if x != nil {
		return x.CleanMudCount
	}
	return 0
}

func (x *LuminanceStoneChallengeGallerySettleInfo) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *LuminanceStoneChallengeGallerySettleInfo) GetReason() GalleryStopReason {
	if x != nil {
		return x.Reason
	}
	return GalleryStopReason_GALLERY_STOP_NONE
}

func (x *LuminanceStoneChallengeGallerySettleInfo) GetFinalScore() uint32 {
	if x != nil {
		return x.FinalScore
	}
	return 0
}

type HomeGalleryInPlayingNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId uint32 `protobuf:"varint,13,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *HomeGalleryInPlayingNotify) Reset() {
	*x = HomeGalleryInPlayingNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeGalleryInPlayingNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeGalleryInPlayingNotify) ProtoMessage() {}

func (x *HomeGalleryInPlayingNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeGalleryInPlayingNotify.ProtoReflect.Descriptor instead.
func (*HomeGalleryInPlayingNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{71}
}

func (x *HomeGalleryInPlayingNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type SummerTimeV2BoatGallerySettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param1    uint32            `protobuf:"varint,7,opt,name=param1,proto3" json:"param1,omitempty"`
	Param2    uint32            `protobuf:"varint,2,opt,name=param2,proto3" json:"param2,omitempty"`
	Reason    GalleryStopReason `protobuf:"varint,3,opt,name=reason,proto3,enum=proto.GalleryStopReason" json:"reason,omitempty"`
	Param3    uint32            `protobuf:"varint,6,opt,name=param3,proto3" json:"param3,omitempty"`
	UsedTime  uint32            `protobuf:"varint,12,opt,name=used_time,json=usedTime,proto3" json:"used_time,omitempty"`
	GalleryId uint32            `protobuf:"varint,1,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *SummerTimeV2BoatGallerySettleInfo) Reset() {
	*x = SummerTimeV2BoatGallerySettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeV2BoatGallerySettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeV2BoatGallerySettleInfo) ProtoMessage() {}

func (x *SummerTimeV2BoatGallerySettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeV2BoatGallerySettleInfo.ProtoReflect.Descriptor instead.
func (*SummerTimeV2BoatGallerySettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{72}
}

func (x *SummerTimeV2BoatGallerySettleInfo) GetParam1() uint32 {
	if x != nil {
		return x.Param1
	}
	return 0
}

func (x *SummerTimeV2BoatGallerySettleInfo) GetParam2() uint32 {
	if x != nil {
		return x.Param2
	}
	return 0
}

func (x *SummerTimeV2BoatGallerySettleInfo) GetReason() GalleryStopReason {
	if x != nil {
		return x.Reason
	}
	return GalleryStopReason_GALLERY_STOP_NONE
}

func (x *SummerTimeV2BoatGallerySettleInfo) GetParam3() uint32 {
	if x != nil {
		return x.Param3
	}
	return 0
}

func (x *SummerTimeV2BoatGallerySettleInfo) GetUsedTime() uint32 {
	if x != nil {
		return x.UsedTime
	}
	return 0
}

func (x *SummerTimeV2BoatGallerySettleInfo) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type GalleryIslandPartyDownHillInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId             uint32 `protobuf:"varint,2,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	Coin                  uint32 `protobuf:"varint,9,opt,name=coin,proto3" json:"coin,omitempty"`
	TotalKillMonsterCount uint32 `protobuf:"varint,11,opt,name=total_kill_monster_count,json=totalKillMonsterCount,proto3" json:"total_kill_monster_count,omitempty"`
}

func (x *GalleryIslandPartyDownHillInfoNotify) Reset() {
	*x = GalleryIslandPartyDownHillInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryIslandPartyDownHillInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryIslandPartyDownHillInfoNotify) ProtoMessage() {}

func (x *GalleryIslandPartyDownHillInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryIslandPartyDownHillInfoNotify.ProtoReflect.Descriptor instead.
func (*GalleryIslandPartyDownHillInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{73}
}

func (x *GalleryIslandPartyDownHillInfoNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *GalleryIslandPartyDownHillInfoNotify) GetCoin() uint32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *GalleryIslandPartyDownHillInfoNotify) GetTotalKillMonsterCount() uint32 {
	if x != nil {
		return x.TotalKillMonsterCount
	}
	return 0
}

type IslandPartyRaftInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointId   uint32 `protobuf:"varint,7,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
	Coin      uint32 `protobuf:"varint,15,opt,name=coin,proto3" json:"coin,omitempty"`
	Fuel      uint32 `protobuf:"varint,3,opt,name=fuel,proto3" json:"fuel,omitempty"`
	Component uint32 `protobuf:"varint,13,opt,name=component,proto3" json:"component,omitempty"`
}

func (x *IslandPartyRaftInfoNotify) Reset() {
	*x = IslandPartyRaftInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IslandPartyRaftInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IslandPartyRaftInfoNotify) ProtoMessage() {}

func (x *IslandPartyRaftInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IslandPartyRaftInfoNotify.ProtoReflect.Descriptor instead.
func (*IslandPartyRaftInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{74}
}

func (x *IslandPartyRaftInfoNotify) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

func (x *IslandPartyRaftInfoNotify) GetCoin() uint32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *IslandPartyRaftInfoNotify) GetFuel() uint32 {
	if x != nil {
		return x.Fuel
	}
	return 0
}

func (x *IslandPartyRaftInfoNotify) GetComponent() uint32 {
	if x != nil {
		return x.Component
	}
	return 0
}

type IslandPartySailInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin             uint32               `protobuf:"varint,10,opt,name=coin,proto3" json:"coin,omitempty"`
	Stage            IslandPartySailStage `protobuf:"varint,8,opt,name=stage,proto3,enum=proto.IslandPartySailStage" json:"stage,omitempty"`
	KillMonsterCount uint32               `protobuf:"varint,4,opt,name=kill_monster_count,json=killMonsterCount,proto3" json:"kill_monster_count,omitempty"`
	Progress         uint32               `protobuf:"varint,15,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *IslandPartySailInfoNotify) Reset() {
	*x = IslandPartySailInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IslandPartySailInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IslandPartySailInfoNotify) ProtoMessage() {}

func (x *IslandPartySailInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IslandPartySailInfoNotify.ProtoReflect.Descriptor instead.
func (*IslandPartySailInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{75}
}

func (x *IslandPartySailInfoNotify) GetCoin() uint32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *IslandPartySailInfoNotify) GetStage() IslandPartySailStage {
	if x != nil {
		return x.Stage
	}
	return IslandPartySailStage_ISLAND_PARTY_SAIL_STAGE_NONE
}

func (x *IslandPartySailInfoNotify) GetKillMonsterCount() uint32 {
	if x != nil {
		return x.KillMonsterCount
	}
	return 0
}

func (x *IslandPartySailInfoNotify) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type IslandPartyGallerySettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfo *OnlinePlayerInfo        `protobuf:"bytes,13,opt,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"`
	CardList   []*ExhibitionDisplayInfo `protobuf:"bytes,11,rep,name=card_list,json=cardList,proto3" json:"card_list,omitempty"`
}

func (x *IslandPartyGallerySettleInfo) Reset() {
	*x = IslandPartyGallerySettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IslandPartyGallerySettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IslandPartyGallerySettleInfo) ProtoMessage() {}

func (x *IslandPartyGallerySettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IslandPartyGallerySettleInfo.ProtoReflect.Descriptor instead.
func (*IslandPartyGallerySettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{76}
}

func (x *IslandPartyGallerySettleInfo) GetPlayerInfo() *OnlinePlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *IslandPartyGallerySettleInfo) GetCardList() []*ExhibitionDisplayInfo {
	if x != nil {
		return x.CardList
	}
	return nil
}

type BackRebornGalleryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId uint32 `protobuf:"varint,15,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *BackRebornGalleryReq) Reset() {
	*x = BackRebornGalleryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackRebornGalleryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackRebornGalleryReq) ProtoMessage() {}

func (x *BackRebornGalleryReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackRebornGalleryReq.ProtoReflect.Descriptor instead.
func (*BackRebornGalleryReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{77}
}

func (x *BackRebornGalleryReq) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type BackRebornGalleryRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId uint32 `protobuf:"varint,9,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	Retcode   int32  `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *BackRebornGalleryRsp) Reset() {
	*x = BackRebornGalleryRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackRebornGalleryRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackRebornGalleryRsp) ProtoMessage() {}

func (x *BackRebornGalleryRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackRebornGalleryRsp.ProtoReflect.Descriptor instead.
func (*BackRebornGalleryRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{78}
}

func (x *BackRebornGalleryRsp) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *BackRebornGalleryRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type GalleryWillStartCountdownNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartSource GalleryStartSource `protobuf:"varint,11,opt,name=start_source,json=startSource,proto3,enum=proto.GalleryStartSource" json:"start_source,omitempty"`
	EndTime     uint32             `protobuf:"varint,12,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	IsEnd       bool               `protobuf:"varint,7,opt,name=is_end,json=isEnd,proto3" json:"is_end,omitempty"`
	GalleryId   uint32             `protobuf:"varint,14,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *GalleryWillStartCountdownNotify) Reset() {
	*x = GalleryWillStartCountdownNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryWillStartCountdownNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryWillStartCountdownNotify) ProtoMessage() {}

func (x *GalleryWillStartCountdownNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryWillStartCountdownNotify.ProtoReflect.Descriptor instead.
func (*GalleryWillStartCountdownNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{79}
}

func (x *GalleryWillStartCountdownNotify) GetStartSource() GalleryStartSource {
	if x != nil {
		return x.StartSource
	}
	return GalleryStartSource_GALLERY_START_BY_NONE
}

func (x *GalleryWillStartCountdownNotify) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GalleryWillStartCountdownNotify) GetIsEnd() bool {
	if x != nil {
		return x.IsEnd
	}
	return false
}

func (x *GalleryWillStartCountdownNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type InstableSprayGalleryInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score uint32 `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *InstableSprayGalleryInfoNotify) Reset() {
	*x = InstableSprayGalleryInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstableSprayGalleryInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstableSprayGalleryInfoNotify) ProtoMessage() {}

func (x *InstableSprayGalleryInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstableSprayGalleryInfoNotify.ProtoReflect.Descriptor instead.
func (*InstableSprayGalleryInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{80}
}

func (x *InstableSprayGalleryInfoNotify) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type SceneGalleryMuqadasPotionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score                uint32 `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
	CaptureWeaknessCount uint32 `protobuf:"varint,4,opt,name=capture_weakness_count,json=captureWeaknessCount,proto3" json:"capture_weakness_count,omitempty"`
	SkillEnergy          uint32 `protobuf:"varint,10,opt,name=skill_energy,json=skillEnergy,proto3" json:"skill_energy,omitempty"`
	SkillUseLimit        uint32 `protobuf:"varint,9,opt,name=skill_use_limit,json=skillUseLimit,proto3" json:"skill_use_limit,omitempty"`
}

func (x *SceneGalleryMuqadasPotionInfo) Reset() {
	*x = SceneGalleryMuqadasPotionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryMuqadasPotionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryMuqadasPotionInfo) ProtoMessage() {}

func (x *SceneGalleryMuqadasPotionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryMuqadasPotionInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryMuqadasPotionInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{81}
}

func (x *SceneGalleryMuqadasPotionInfo) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SceneGalleryMuqadasPotionInfo) GetCaptureWeaknessCount() uint32 {
	if x != nil {
		return x.CaptureWeaknessCount
	}
	return 0
}

func (x *SceneGalleryMuqadasPotionInfo) GetSkillEnergy() uint32 {
	if x != nil {
		return x.SkillEnergy
	}
	return 0
}

func (x *SceneGalleryMuqadasPotionInfo) GetSkillUseLimit() uint32 {
	if x != nil {
		return x.SkillUseLimit
	}
	return 0
}

type VintageHuntingFirstStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimidCnt  uint32 `protobuf:"varint,15,opt,name=timid_cnt,json=timidCnt,proto3" json:"timid_cnt,omitempty"`
	BrutalCnt uint32 `protobuf:"varint,7,opt,name=brutal_cnt,json=brutalCnt,proto3" json:"brutal_cnt,omitempty"`
	Score     uint32 `protobuf:"varint,14,opt,name=score,proto3" json:"score,omitempty"`
	EliteCnt  uint32 `protobuf:"varint,11,opt,name=elite_cnt,json=eliteCnt,proto3" json:"elite_cnt,omitempty"`
}

func (x *VintageHuntingFirstStageInfo) Reset() {
	*x = VintageHuntingFirstStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageHuntingFirstStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageHuntingFirstStageInfo) ProtoMessage() {}

func (x *VintageHuntingFirstStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageHuntingFirstStageInfo.ProtoReflect.Descriptor instead.
func (*VintageHuntingFirstStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{82}
}

func (x *VintageHuntingFirstStageInfo) GetTimidCnt() uint32 {
	if x != nil {
		return x.TimidCnt
	}
	return 0
}

func (x *VintageHuntingFirstStageInfo) GetBrutalCnt() uint32 {
	if x != nil {
		return x.BrutalCnt
	}
	return 0
}

func (x *VintageHuntingFirstStageInfo) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *VintageHuntingFirstStageInfo) GetEliteCnt() uint32 {
	if x != nil {
		return x.EliteCnt
	}
	return 0
}

type VintageHuntingSecondStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalNum         uint32 `protobuf:"varint,11,opt,name=total_num,json=totalNum,proto3" json:"total_num,omitempty"`
	CaptureAnimalNum uint32 `protobuf:"varint,13,opt,name=capture_animal_num,json=captureAnimalNum,proto3" json:"capture_animal_num,omitempty"`
	LeftNum          uint32 `protobuf:"varint,3,opt,name=left_num,json=leftNum,proto3" json:"left_num,omitempty"`
}

func (x *VintageHuntingSecondStageInfo) Reset() {
	*x = VintageHuntingSecondStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageHuntingSecondStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageHuntingSecondStageInfo) ProtoMessage() {}

func (x *VintageHuntingSecondStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageHuntingSecondStageInfo.ProtoReflect.Descriptor instead.
func (*VintageHuntingSecondStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{83}
}

func (x *VintageHuntingSecondStageInfo) GetTotalNum() uint32 {
	if x != nil {
		return x.TotalNum
	}
	return 0
}

func (x *VintageHuntingSecondStageInfo) GetCaptureAnimalNum() uint32 {
	if x != nil {
		return x.CaptureAnimalNum
	}
	return 0
}

func (x *VintageHuntingSecondStageInfo) GetLeftNum() uint32 {
	if x != nil {
		return x.LeftNum
	}
	return 0
}

type VintageHuntingThirdStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VintageHuntingThirdStageInfo) Reset() {
	*x = VintageHuntingThirdStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageHuntingThirdStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageHuntingThirdStageInfo) ProtoMessage() {}

func (x *VintageHuntingThirdStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageHuntingThirdStageInfo.ProtoReflect.Descriptor instead.
func (*VintageHuntingThirdStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{84}
}

type SceneGalleryVintageHuntingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId uint32 `protobuf:"varint,7,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	// Types that are assignable to Info:
	//
	//	*SceneGalleryVintageHuntingInfo_FirstStageInfo
	//	*SceneGalleryVintageHuntingInfo_SecondStageInfo
	//	*SceneGalleryVintageHuntingInfo_ThirdStageInfo
	Info isSceneGalleryVintageHuntingInfo_Info `protobuf_oneof:"info"`
}

func (x *SceneGalleryVintageHuntingInfo) Reset() {
	*x = SceneGalleryVintageHuntingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryVintageHuntingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryVintageHuntingInfo) ProtoMessage() {}

func (x *SceneGalleryVintageHuntingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryVintageHuntingInfo.ProtoReflect.Descriptor instead.
func (*SceneGalleryVintageHuntingInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{85}
}

func (x *SceneGalleryVintageHuntingInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (m *SceneGalleryVintageHuntingInfo) GetInfo() isSceneGalleryVintageHuntingInfo_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (x *SceneGalleryVintageHuntingInfo) GetFirstStageInfo() *VintageHuntingFirstStageInfo {
	if x, ok := x.GetInfo().(*SceneGalleryVintageHuntingInfo_FirstStageInfo); ok {
		return x.FirstStageInfo
	}
	return nil
}

func (x *SceneGalleryVintageHuntingInfo) GetSecondStageInfo() *VintageHuntingSecondStageInfo {
	if x, ok := x.GetInfo().(*SceneGalleryVintageHuntingInfo_SecondStageInfo); ok {
		return x.SecondStageInfo
	}
	return nil
}

func (x *SceneGalleryVintageHuntingInfo) GetThirdStageInfo() *VintageHuntingThirdStageInfo {
	if x, ok := x.GetInfo().(*SceneGalleryVintageHuntingInfo_ThirdStageInfo); ok {
		return x.ThirdStageInfo
	}
	return nil
}

type isSceneGalleryVintageHuntingInfo_Info interface {
	isSceneGalleryVintageHuntingInfo_Info()
}

type SceneGalleryVintageHuntingInfo_FirstStageInfo struct {
	FirstStageInfo *VintageHuntingFirstStageInfo `protobuf:"bytes,2,opt,name=first_stage_info,json=firstStageInfo,proto3,oneof"`
}

type SceneGalleryVintageHuntingInfo_SecondStageInfo struct {
	SecondStageInfo *VintageHuntingSecondStageInfo `protobuf:"bytes,15,opt,name=second_stage_info,json=secondStageInfo,proto3,oneof"`
}

type SceneGalleryVintageHuntingInfo_ThirdStageInfo struct {
	ThirdStageInfo *VintageHuntingThirdStageInfo `protobuf:"bytes,12,opt,name=third_stage_info,json=thirdStageInfo,proto3,oneof"`
}

func (*SceneGalleryVintageHuntingInfo_FirstStageInfo) isSceneGalleryVintageHuntingInfo_Info() {}

func (*SceneGalleryVintageHuntingInfo_SecondStageInfo) isSceneGalleryVintageHuntingInfo_Info() {}

func (*SceneGalleryVintageHuntingInfo_ThirdStageInfo) isSceneGalleryVintageHuntingInfo_Info() {}

type WindFieldGalleryInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowId                uint32 `protobuf:"varint,3,opt,name=show_id,json=showId,proto3" json:"show_id,omitempty"`
	KilledMonsterNum      uint32 `protobuf:"varint,7,opt,name=killed_monster_num,json=killedMonsterNum,proto3" json:"killed_monster_num,omitempty"`
	CoinNum               uint32 `protobuf:"varint,9,opt,name=coin_num,json=coinNum,proto3" json:"coin_num,omitempty"`
	ChallengeBallMaxCount uint32 `protobuf:"varint,1,opt,name=challenge_ball_max_count,json=challengeBallMaxCount,proto3" json:"challenge_ball_max_count,omitempty"`
	ChallengeTotalTime    uint32 `protobuf:"varint,5,opt,name=challenge_total_time,json=challengeTotalTime,proto3" json:"challenge_total_time,omitempty"`
	ChallengeBallCurCount uint32 `protobuf:"varint,10,opt,name=challenge_ball_cur_count,json=challengeBallCurCount,proto3" json:"challenge_ball_cur_count,omitempty"`
	ChallengeTimestamp    uint32 `protobuf:"varint,4,opt,name=challenge_timestamp,json=challengeTimestamp,proto3" json:"challenge_timestamp,omitempty"`
	ElementBallNum        uint32 `protobuf:"varint,14,opt,name=element_ball_num,json=elementBallNum,proto3" json:"element_ball_num,omitempty"`
}

func (x *WindFieldGalleryInfoNotify) Reset() {
	*x = WindFieldGalleryInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindFieldGalleryInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindFieldGalleryInfoNotify) ProtoMessage() {}

func (x *WindFieldGalleryInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindFieldGalleryInfoNotify.ProtoReflect.Descriptor instead.
func (*WindFieldGalleryInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{86}
}

func (x *WindFieldGalleryInfoNotify) GetShowId() uint32 {
	if x != nil {
		return x.ShowId
	}
	return 0
}

func (x *WindFieldGalleryInfoNotify) GetKilledMonsterNum() uint32 {
	if x != nil {
		return x.KilledMonsterNum
	}
	return 0
}

func (x *WindFieldGalleryInfoNotify) GetCoinNum() uint32 {
	if x != nil {
		return x.CoinNum
	}
	return 0
}

func (x *WindFieldGalleryInfoNotify) GetChallengeBallMaxCount() uint32 {
	if x != nil {
		return x.ChallengeBallMaxCount
	}
	return 0
}

func (x *WindFieldGalleryInfoNotify) GetChallengeTotalTime() uint32 {
	if x != nil {
		return x.ChallengeTotalTime
	}
	return 0
}

func (x *WindFieldGalleryInfoNotify) GetChallengeBallCurCount() uint32 {
	if x != nil {
		return x.ChallengeBallCurCount
	}
	return 0
}

func (x *WindFieldGalleryInfoNotify) GetChallengeTimestamp() uint32 {
	if x != nil {
		return x.ChallengeTimestamp
	}
	return 0
}

func (x *WindFieldGalleryInfoNotify) GetElementBallNum() uint32 {
	if x != nil {
		return x.ElementBallNum
	}
	return 0
}

type WindFieldGalleryChallengeInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeTimestamp    uint32 `protobuf:"varint,6,opt,name=challenge_timestamp,json=challengeTimestamp,proto3" json:"challenge_timestamp,omitempty"`
	IsStart               bool   `protobuf:"varint,8,opt,name=is_start,json=isStart,proto3" json:"is_start,omitempty"`
	ShowId                uint32 `protobuf:"varint,12,opt,name=show_id,json=showId,proto3" json:"show_id,omitempty"`
	IsSuccess             bool   `protobuf:"varint,7,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	ChallengeTotalTime    uint32 `protobuf:"varint,13,opt,name=challenge_total_time,json=challengeTotalTime,proto3" json:"challenge_total_time,omitempty"`
	ChallengeBallMaxCount uint32 `protobuf:"varint,11,opt,name=challenge_ball_max_count,json=challengeBallMaxCount,proto3" json:"challenge_ball_max_count,omitempty"`
	ChallengeBallCurCount uint32 `protobuf:"varint,1,opt,name=challenge_ball_cur_count,json=challengeBallCurCount,proto3" json:"challenge_ball_cur_count,omitempty"`
}

func (x *WindFieldGalleryChallengeInfoNotify) Reset() {
	*x = WindFieldGalleryChallengeInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindFieldGalleryChallengeInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindFieldGalleryChallengeInfoNotify) ProtoMessage() {}

func (x *WindFieldGalleryChallengeInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindFieldGalleryChallengeInfoNotify.ProtoReflect.Descriptor instead.
func (*WindFieldGalleryChallengeInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{87}
}

func (x *WindFieldGalleryChallengeInfoNotify) GetChallengeTimestamp() uint32 {
	if x != nil {
		return x.ChallengeTimestamp
	}
	return 0
}

func (x *WindFieldGalleryChallengeInfoNotify) GetIsStart() bool {
	if x != nil {
		return x.IsStart
	}
	return false
}

func (x *WindFieldGalleryChallengeInfoNotify) GetShowId() uint32 {
	if x != nil {
		return x.ShowId
	}
	return 0
}

func (x *WindFieldGalleryChallengeInfoNotify) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *WindFieldGalleryChallengeInfoNotify) GetChallengeTotalTime() uint32 {
	if x != nil {
		return x.ChallengeTotalTime
	}
	return 0
}

func (x *WindFieldGalleryChallengeInfoNotify) GetChallengeBallMaxCount() uint32 {
	if x != nil {
		return x.ChallengeBallMaxCount
	}
	return 0
}

func (x *WindFieldGalleryChallengeInfoNotify) GetChallengeBallCurCount() uint32 {
	if x != nil {
		return x.ChallengeBallCurCount
	}
	return 0
}

type FungusFighterTrainingInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffStartTime      uint32 `protobuf:"varint,3,opt,name=buff_start_time,json=buffStartTime,proto3" json:"buff_start_time,omitempty"`
	MaxSkillCount      uint32 `protobuf:"varint,7,opt,name=max_skill_count,json=maxSkillCount,proto3" json:"max_skill_count,omitempty"`
	MaxMonsterCount    uint32 `protobuf:"varint,8,opt,name=max_monster_count,json=maxMonsterCount,proto3" json:"max_monster_count,omitempty"`
	BuffId             uint32 `protobuf:"varint,14,opt,name=buff_id,json=buffId,proto3" json:"buff_id,omitempty"`
	BuffLastTime       uint32 `protobuf:"varint,4,opt,name=buff_last_time,json=buffLastTime,proto3" json:"buff_last_time,omitempty"`
	RestSkillCount     uint32 `protobuf:"varint,6,opt,name=rest_skill_count,json=restSkillCount,proto3" json:"rest_skill_count,omitempty"`
	KilledMonsterCount uint32 `protobuf:"varint,15,opt,name=killed_monster_count,json=killedMonsterCount,proto3" json:"killed_monster_count,omitempty"`
}

func (x *FungusFighterTrainingInfoNotify) Reset() {
	*x = FungusFighterTrainingInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusFighterTrainingInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusFighterTrainingInfoNotify) ProtoMessage() {}

func (x *FungusFighterTrainingInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusFighterTrainingInfoNotify.ProtoReflect.Descriptor instead.
func (*FungusFighterTrainingInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{88}
}

func (x *FungusFighterTrainingInfoNotify) GetBuffStartTime() uint32 {
	if x != nil {
		return x.BuffStartTime
	}
	return 0
}

func (x *FungusFighterTrainingInfoNotify) GetMaxSkillCount() uint32 {
	if x != nil {
		return x.MaxSkillCount
	}
	return 0
}

func (x *FungusFighterTrainingInfoNotify) GetMaxMonsterCount() uint32 {
	if x != nil {
		return x.MaxMonsterCount
	}
	return 0
}

func (x *FungusFighterTrainingInfoNotify) GetBuffId() uint32 {
	if x != nil {
		return x.BuffId
	}
	return 0
}

func (x *FungusFighterTrainingInfoNotify) GetBuffLastTime() uint32 {
	if x != nil {
		return x.BuffLastTime
	}
	return 0
}

func (x *FungusFighterTrainingInfoNotify) GetRestSkillCount() uint32 {
	if x != nil {
		return x.RestSkillCount
	}
	return 0
}

func (x *FungusFighterTrainingInfoNotify) GetKilledMonsterCount() uint32 {
	if x != nil {
		return x.KilledMonsterCount
	}
	return 0
}

type FungusFighterTrainingSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsedTime    uint32            `protobuf:"varint,15,opt,name=used_time,json=usedTime,proto3" json:"used_time,omitempty"`
	Reason      GalleryStopReason `protobuf:"varint,3,opt,name=reason,proto3,enum=proto.GalleryStopReason" json:"reason,omitempty"`
	Transaction string            `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *FungusFighterTrainingSettleInfo) Reset() {
	*x = FungusFighterTrainingSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusFighterTrainingSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusFighterTrainingSettleInfo) ProtoMessage() {}

func (x *FungusFighterTrainingSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusFighterTrainingSettleInfo.ProtoReflect.Descriptor instead.
func (*FungusFighterTrainingSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{89}
}

func (x *FungusFighterTrainingSettleInfo) GetUsedTime() uint32 {
	if x != nil {
		return x.UsedTime
	}
	return 0
}

func (x *FungusFighterTrainingSettleInfo) GetReason() GalleryStopReason {
	if x != nil {
		return x.Reason
	}
	return GalleryStopReason_GALLERY_STOP_NONE
}

func (x *FungusFighterTrainingSettleInfo) GetTransaction() string {
	if x != nil {
		return x.Transaction
	}
	return ""
}

type FungusCaptureSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess bool `protobuf:"varint,2,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
}

func (x *FungusCaptureSettleNotify) Reset() {
	*x = FungusCaptureSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusCaptureSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusCaptureSettleNotify) ProtoMessage() {}

func (x *FungusCaptureSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusCaptureSettleNotify.ProtoReflect.Descriptor instead.
func (*FungusCaptureSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{90}
}

func (x *FungusCaptureSettleNotify) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

type HideAndSeekPlayerCapturedNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GhostSkillId uint32 `protobuf:"varint,12,opt,name=ghost_skill_id,json=ghostSkillId,proto3" json:"ghost_skill_id,omitempty"`
}

func (x *HideAndSeekPlayerCapturedNotify) Reset() {
	*x = HideAndSeekPlayerCapturedNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideAndSeekPlayerCapturedNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideAndSeekPlayerCapturedNotify) ProtoMessage() {}

func (x *HideAndSeekPlayerCapturedNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideAndSeekPlayerCapturedNotify.ProtoReflect.Descriptor instead.
func (*HideAndSeekPlayerCapturedNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{91}
}

func (x *HideAndSeekPlayerCapturedNotify) GetGhostSkillId() uint32 {
	if x != nil {
		return x.GhostSkillId
	}
	return 0
}

type CoinCollectGallerySettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinCollectNum      uint32 `protobuf:"varint,11,opt,name=coin_collect_num,json=coinCollectNum,proto3" json:"coin_collect_num,omitempty"`
	CoinTotalNum        uint32 `protobuf:"varint,7,opt,name=coin_total_num,json=coinTotalNum,proto3" json:"coin_total_num,omitempty"`
	LevelId             uint32 `protobuf:"varint,9,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	CoinCollectTime     uint32 `protobuf:"varint,4,opt,name=coin_collect_time,json=coinCollectTime,proto3" json:"coin_collect_time,omitempty"`
	MultistagePlayIndex uint32 `protobuf:"varint,6,opt,name=multistage_play_index,json=multistagePlayIndex,proto3" json:"multistage_play_index,omitempty"`
	IsNewRecord         bool   `protobuf:"varint,10,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
}

func (x *CoinCollectGallerySettleNotify) Reset() {
	*x = CoinCollectGallerySettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gallery_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinCollectGallerySettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinCollectGallerySettleNotify) ProtoMessage() {}

func (x *CoinCollectGallerySettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gallery_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinCollectGallerySettleNotify.ProtoReflect.Descriptor instead.
func (*CoinCollectGallerySettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gallery_proto_rawDescGZIP(), []int{92}
}

func (x *CoinCollectGallerySettleNotify) GetCoinCollectNum() uint32 {
	if x != nil {
		return x.CoinCollectNum
	}
	return 0
}

func (x *CoinCollectGallerySettleNotify) GetCoinTotalNum() uint32 {
	if x != nil {
		return x.CoinTotalNum
	}
	return 0
}

func (x *CoinCollectGallerySettleNotify) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *CoinCollectGallerySettleNotify) GetCoinCollectTime() uint32 {
	if x != nil {
		return x.CoinCollectTime
	}
	return 0
}

func (x *CoinCollectGallerySettleNotify) GetMultistagePlayIndex() uint32 {
	if x != nil {
		return x.MultistagePlayIndex
	}
	return 0
}

func (x *CoinCollectGallerySettleNotify) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

var File_cmd_cmd_gallery_proto protoreflect.FileDescriptor

var file_cmd_cmd_gallery_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x6d, 0x64, 0x5f, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x17,
	0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xd6, 0x02, 0x0a, 0x12, 0x47,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x66, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x10, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d,
	0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xc4, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x22, 0xb3, 0x02, 0x0a, 0x19, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x42,
	0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6d,
	0x62, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x5f, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x64, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d,
	0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xde, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xa0, 0x02, 0x0a, 0x19, 0x47, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x79, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x0d, 0x75, 0x69, 0x64, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x42, 0x61, 0x6c,
	0x6c, 0x6f, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e,
	0x55, 0x69, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x75, 0x69, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x3e, 0x0a,
	0x10, 0x55, 0x69, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a,
	0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x88, 0x2b, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45,
	0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xbe, 0x01, 0x0a,
	0x11, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x6f, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6d,
	0x62, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6d,
	0x62, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x81, 0x01,
	0x0a, 0x11, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10,
	0x9f, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f,
	0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10,
	0x01, 0x22, 0xfd, 0x02, 0x0a, 0x0e, 0x46, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x70, 0x0a, 0x1b, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x66, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x4a, 0x0a, 0x1c, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xa7, 0x03, 0x0a, 0x16, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x46, 0x61, 0x6c,
	0x6c, 0x43, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x75, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x14, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x63,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x46, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x62, 0x61, 0x6c, 0x6c,
	0x43, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x61, 0x64, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x1a, 0x44, 0x0a, 0x16, 0x42, 0x61, 0x6c, 0x6c, 0x43, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x05,
	0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x83, 0x2b, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c,
	0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x56, 0x0a, 0x0f, 0x46,
	0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x16, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x46,
	0x61, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x52, 0x0a,
	0x0d, 0x75, 0x69, 0x64, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x46, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2e, 0x55, 0x69, 0x64, 0x42, 0x72, 0x69, 0x65, 0x66, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x75, 0x69, 0x64, 0x42, 0x72, 0x69, 0x65, 0x66, 0x4d, 0x61,
	0x70, 0x1a, 0x56, 0x0a, 0x10, 0x55, 0x69, 0x64, 0x42, 0x72, 0x69, 0x65, 0x66, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64,
	0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06,
	0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x91, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x42, 0x61, 0x6c,
	0x6c, 0x6f, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x62, 0x6f,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x6d, 0x62, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x62,
	0x6f, 0x22, 0x9e, 0x02, 0x0a, 0x0e, 0x46, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x14, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x6c, 0x6c, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x11, 0x62, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x44, 0x0a, 0x16,
	0x42, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x9d, 0x02, 0x0a, 0x17, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x7f,
	0x0a, 0x1d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x62,
	0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x66, 0x0a, 0x1e, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x88, 0x02, 0x0a, 0x14, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x46, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x73, 0x0a, 0x1a, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x6c, 0x6c,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x46, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x60, 0x0a, 0x1b, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x61, 0x6c, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x73, 0x0a,
	0x16, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x46, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x16, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x68, 0x69, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48,
	0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x68, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x1a, 0x3e, 0x0a, 0x10,
	0x48, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd5, 0x01, 0x0a,
	0x1b, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x6e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5a, 0x0a, 0x0e,
	0x66, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x66, 0x61, 0x6c, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0x3f, 0x0a, 0x11, 0x46, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x6f, 0x0a, 0x1b, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x75,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x61, 0x75, 0x67, 0x68, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x61, 0x75, 0x67, 0x68, 0x74, 0x55, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x1d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x42, 0x75, 0x6f, 0x79, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3b, 0x0a,
	0x1a, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x17, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x18, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x69, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x69, 0x46, 0x6f, 0x72, 0x6d, 0x22, 0x85, 0x01, 0x0a,
	0x1f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x42, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x41, 0x0a, 0x1d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0x76, 0x0a, 0x18, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x62, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x38, 0x0a, 0x0f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x62, 0x61, 0x6c,
	0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x48, 0x61, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x6c, 0x22, 0x98, 0x01, 0x0a,
	0x14, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d,
	0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x73, 0x6e, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6b, 0x69,
	0x6c, 0x6c, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x6f, 0x73, 0x6e, 0x74, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x12, 0x33, 0x0a, 0x16, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x6c, 0x69, 0x74, 0x65,
	0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x6c, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x22, 0x45, 0x0a, 0x1e, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x50, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb1,
	0x01, 0x0a, 0x1d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53,
	0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x45, 0x73, 0x63, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x42, 0x6f, 0x78, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x6d, 0x61, 0x78, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x6f, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x33, 0x0a, 0x1b, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x7c, 0x0a, 0x1d, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x67, 0x5f, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x67, 0x56,
	0x69, 0x65, 0x77, 0x65, 0x64, 0x22, 0x33, 0x0a, 0x1b, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x27, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x4c, 0x75, 0x6d, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c,
	0x65, 0x61, 0x6e, 0x5f, 0x6d, 0x75, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x4d, 0x75, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xdb, 0x02, 0x0a, 0x21, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x48, 0x6f, 0x6d, 0x65, 0x53, 0x65, 0x65, 0x6b, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x5f, 0x74, 0x69, 0x64,
	0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x63, 0x75, 0x72, 0x54, 0x69, 0x64, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x4e, 0x75, 0x6d,
	0x12, 0x66, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x48,
	0x6f, 0x6d, 0x65, 0x53, 0x65, 0x65, 0x6b, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x5f,
	0x74, 0x69, 0x64, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x75, 0x72, 0x54, 0x69, 0x64,
	0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x12, 0x63, 0x75, 0x72, 0x5f, 0x74, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x54, 0x69,
	0x64, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x1a, 0x41, 0x0a, 0x13, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe5, 0x01,
	0x0a, 0x23, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x44, 0x6f, 0x77, 0x6e, 0x48, 0x69, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4b, 0x69,
	0x6c, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x16,
	0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61,
	0x78, 0x4b, 0x69, 0x6c, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x20, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x56, 0x32, 0x42, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x22,
	0xe6, 0x01, 0x0a, 0x1f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x61, 0x66, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x66, 0x75, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x61, 0x66, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xcc, 0x02, 0x0a, 0x1f, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x53, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x12,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c,
	0x65, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x61, 0x69, 0x6c, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d,
	0x61, 0x78, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x21, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x70, 0x72, 0x61, 0x79, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a,
	0x07, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62,
	0x75, 0x66, 0x66, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x75,
	0x66, 0x66, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x84,
	0x01, 0x0a, 0x1c, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x42,
	0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x1e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x65, 0x65,
	0x6c, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x22, 0xfc, 0x02, 0x0a, 0x19, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x57, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x42, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x68, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x13, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x10,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x61, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x22, 0xbe, 0x02, 0x0a, 0x25, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x61, 0x78,
	0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6b, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x75, 0x66, 0x66, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75, 0x66, 0x66, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x62, 0x75, 0x66, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x50, 0x0a, 0x24, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x72, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x48, 0x69, 0x64,
	0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x87, 0x02, 0x0a, 0x21, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x56, 0x32, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2c, 0x0a, 0x12, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6b, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6e, 0x74, 0x12, 0x31, 0x0a,
	0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x74, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x76, 0x69,
	0x6f, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x62, 0x6f, 0x73, 0x73, 0x56, 0x69, 0x6f, 0x6c, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0xb9, 0x01, 0x0a, 0x1d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x72, 0x41, 0x6d, 0x75, 0x73, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x4c, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x7f, 0x0a, 0x1c, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x42,
	0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x65, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x65, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x6d, 0x62, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x62, 0x6f,
	0x22, 0x6d, 0x0a, 0x1b, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x63, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x22,
	0x81, 0x02, 0x0a, 0x19, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a,
	0x16, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x67,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75,
	0x72, 0x5f, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x78, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4b, 0x69,
	0x6c, 0x6c, 0x43, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6e, 0x74, 0x22, 0xaf, 0x19, 0x0a, 0x10, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2b, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c,
	0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3a, 0x0a, 0x09, 0x66, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x46, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a,
	0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x40, 0x0a, 0x0b, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x50, 0x0a, 0x11, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x0f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x12, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x73, 0x65, 0x65, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x68, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65,
	0x65, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x13, 0x62, 0x75, 0x6f, 0x79, 0x61, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xe8, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x42, 0x75, 0x6f, 0x79, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x62, 0x75,
	0x6f, 0x79, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x5d, 0x0a, 0x15, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xc4, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x62, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47,
	0x0a, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0xcd, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x62,
	0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x62,
	0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x6f, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0xab, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x53, 0x75, 0x6d, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x73, 0x75, 0x6d, 0x6f,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5a, 0x0a, 0x14, 0x73, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xa4, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x73, 0x61,
	0x6c, 0x76, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x57, 0x0a, 0x13, 0x73, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x73, 0x63, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xf7, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x45, 0x73, 0x63, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x73, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x45,
	0x73, 0x63, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x11, 0x68, 0x6f, 0x6d,
	0x65, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x8a,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x61,
	0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x68, 0x6f, 0x6d,
	0x65, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x11,
	0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0xd4, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x43, 0x72, 0x79,
	0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f,
	0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x57, 0x0a, 0x13, 0x69, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xa1, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x69, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x75, 0x0a, 0x1e, 0x6c, 0x75, 0x6d, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x79, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x6f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x1b, 0x6c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f,
	0x6e, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x64, 0x0a, 0x18, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x5f, 0x66, 0x75, 0x72,
	0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xb0, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x65, 0x65, 0x6b, 0x46,
	0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x15,
	0x68, 0x6f, 0x6d, 0x65, 0x53, 0x65, 0x65, 0x6b, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6b, 0x0a, 0x1b, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x68, 0x69, 0x6c, 0x6c, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0xce, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x44, 0x6f, 0x77, 0x6e, 0x48,
	0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x69, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x44, 0x6f, 0x77, 0x6e, 0x48, 0x69, 0x6c, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x62, 0x0a, 0x18, 0x73, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x6f, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xa8,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x56, 0x32, 0x42, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x14, 0x73, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x32, 0x42, 0x6f,
	0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5e, 0x0a, 0x16, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x8d, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x13, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x61,
	0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5e, 0x0a, 0x16, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0xed, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x13, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x61,
	0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x56, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x70, 0x72, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xac, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x65,
	0x53, 0x70, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57,
	0x0a, 0x13, 0x6d, 0x75, 0x71, 0x61, 0x64, 0x61, 0x73, 0x5f, 0x70, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xe1, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x4d, 0x75, 0x71, 0x61, 0x64, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x75, 0x71, 0x61, 0x64, 0x61, 0x73, 0x50, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5a, 0x0a, 0x14, 0x74, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x65, 0x6c, 0x69, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0xf5, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x54, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x53, 0x65, 0x65, 0x6c, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x12, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x65, 0x65, 0x6c, 0x69, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x5a, 0x0a, 0x14, 0x76, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x68,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xfe, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x76, 0x69, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4b, 0x0a, 0x0f, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0xb8, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x57, 0x69,
	0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x77,
	0x69, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x70, 0x0a, 0x1c,
	0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x5f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xb0, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x19, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5f,
	0x0a, 0x15, 0x65, 0x66, 0x66, 0x69, 0x67, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xf2, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x56, 0x32, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x65, 0x66, 0x66, 0x69,
	0x67, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x6d, 0x0a, 0x1b, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x5f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xa6,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x65, 0x72, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57,
	0x0a, 0x13, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x61, 0x6d, 0x75, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xbe, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x43, 0x68, 0x61, 0x72, 0x41, 0x6d, 0x75, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x63, 0x68, 0x61, 0x72, 0x41, 0x6d, 0x75, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x12, 0x62, 0x72, 0x69, 0x63, 0x6b,
	0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x91, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x62, 0x72, 0x69,
	0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a,
	0x11, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0xa6, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4b, 0x0a, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0xd7, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x54,
	0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d,
	0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x06, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x7f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10,
	0xff, 0x2a, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f,
	0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xc9, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x11, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44,
	0x10, 0xd6, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02,
	0x10, 0x01, 0x22, 0xc2, 0x01, 0x0a, 0x18, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x46, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x61, 0x64, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49,
	0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43,
	0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xc5, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xb2, 0x01, 0x0a, 0x15, 0x47, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4d, 0x0a,
	0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xdf, 0x2b, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45,
	0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xa3, 0x01, 0x0a,
	0x16, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x69,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x69, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44,
	0x10, 0x9b, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02,
	0x10, 0x01, 0x22, 0xab, 0x01, 0x0a, 0x1c, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x46, 0x61, 0x6c, 0x6c, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xc7,
	0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01,
	0x22, 0x98, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x47, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d,
	0x44, 0x5f, 0x49, 0x44, 0x10, 0xac, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xb2, 0x01, 0x0a, 0x13,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x05,
	0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xdd, 0x2b, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c,
	0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01,
	0x22, 0xa3, 0x01, 0x0a, 0x16, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x3a, 0x0a, 0x0c, 0x67,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x67, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d,
	0x44, 0x5f, 0x49, 0x44, 0x10, 0xcd, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xc7, 0x02, 0x0a, 0x1e, 0x42, 0x75, 0x6f, 0x79, 0x61,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6b, 0x69, 0x6c,
	0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6b,
	0x69, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x22, 0x9e, 0x04, 0x0a, 0x20, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6a, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x36, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x76, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x65,
	0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x10, 0x67, 0x61,
	0x64, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x61,
	0x64, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x63, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x66, 0x65, 0x63, 0x74, 0x48, 0x69, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x41,
	0x0a, 0x13, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xcb, 0x01, 0x0a, 0x1f, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x42, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x65, 0x63, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x65, 0x72, 0x66, 0x65, 0x63,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64,
	0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x81, 0x2b,
	0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53,
	0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22,
	0x8e, 0x02, 0x0a, 0x1c, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x6f, 0x4b,
	0x69, 0x6c, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x35, 0x0a, 0x17, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f,
	0x6d, 0x6f, 0x73, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x6f, 0x73,
	0x6e, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x33, 0x0a,
	0x16, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6b,
	0x69, 0x6c, 0x6c, 0x45, 0x6c, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xce,
	0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01,
	0x22, 0xa9, 0x01, 0x0a, 0x23, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x43, 0x72, 0x79, 0x73,
	0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x4d, 0x0a,
	0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xab, 0x2b, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45,
	0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xcd, 0x01, 0x0a,
	0x20, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c,
	0x69, 0x6e, 0x6b, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x42, 0x75, 0x66, 0x66, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x22, 0x4d, 0x0a,
	0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xa3, 0x2b, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45,
	0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x4f, 0x0a, 0x08,
	0x46, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72,
	0x65, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x6f, 0x5f,
	0x62, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x69, 0x6e, 0x74, 0x6f, 0x42, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x57, 0x0a,
	0x0c, 0x46, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xf3, 0x01, 0x0a, 0x18, 0x46, 0x69, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x08, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x66, 0x69, 0x73, 0x68, 0x4d, 0x61, 0x70, 0x12, 0x41, 0x0a, 0x12,
	0x66, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x10, 0x66,
	0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a,
	0x4b, 0x0a, 0x0c, 0x46, 0x69, 0x73, 0x68, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x85, 0x01, 0x0a,
	0x17, 0x52, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x1f, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x79, 0x0a, 0x1e, 0x53, 0x61, 0x6c, 0x76,
	0x61, 0x67, 0x65, 0x45, 0x73, 0x63, 0x6f, 0x72, 0x74, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x45, 0x73, 0x63, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x18, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x47,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x69, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x69, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55,
	0x69, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x1e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x4a,
	0x0a, 0x16, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xaf, 0x02, 0x0a, 0x28, 0x4c,
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6b, 0x69, 0x6c, 0x6c, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x6d, 0x75, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x65,
	0x61, 0x6e, 0x4d, 0x75, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x8a, 0x01, 0x0a,
	0x1a, 0x48, 0x6f, 0x6d, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x50, 0x6c,
	0x61, 0x79, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d,
	0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xb1, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xd9, 0x01, 0x0a, 0x21, 0x53, 0x75,
	0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x32, 0x42, 0x6f, 0x61, 0x74, 0x47, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12,
	0x30, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x24, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x44, 0x6f, 0x77, 0x6e,
	0x48, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x4d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d,
	0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x92, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xcb, 0x01, 0x0a, 0x19, 0x49, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x75, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49,
	0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43,
	0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xbd, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xfb, 0x01, 0x0a, 0x19, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x61, 0x69, 0x6c,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44,
	0x5f, 0x49, 0x44, 0x10, 0x80, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x1c, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x39, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x68, 0x69,
	0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x14,
	0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x62, 0x6f, 0x72, 0x6e, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44,
	0x10, 0xd9, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x9e, 0x01, 0x0a, 0x14, 0x42, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x62, 0x6f, 0x72, 0x6e, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x52, 0x73, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64,
	0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06,
	0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x97, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xff, 0x01, 0x0a, 0x1f, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x57, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x3c, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x45, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43,
	0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xda, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x85, 0x01, 0x0a, 0x1e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x47, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44,
	0x10, 0xd4, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02,
	0x10, 0x01, 0x22, 0xb6, 0x01, 0x0a, 0x1d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x4d, 0x75, 0x71, 0x61, 0x64, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x77, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x75, 0x73, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x1c,
	0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x69, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x69, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x75,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x72, 0x75, 0x74, 0x61, 0x6c, 0x43, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x43, 0x6e, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x1d,
	0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x41,
	0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x66, 0x74,
	0x4e, 0x75, 0x6d, 0x22, 0x1e, 0x0a, 0x1c, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x69, 0x72, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0xb9, 0x02, 0x0a, 0x1e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x4f, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x52, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x10, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x69, 0x72, 0x64, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0xcc, 0x03, 0x0a, 0x1a, 0x57, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x75, 0x6d,
	0x12, 0x37, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x61,
	0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x6c,
	0x6c, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x75,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x22,
	0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x96, 0x2b, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x9c,
	0x03, 0x0a, 0x23, 0x57, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x78,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x42, 0x61, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4d,
	0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xbb, 0x2b, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52,
	0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x87, 0x03,
	0x0a, 0x1f, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x75, 0x66, 0x66,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x61,
	0x78, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x62, 0x75, 0x66, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x72, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49,
	0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43,
	0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xdb, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x92, 0x01, 0x0a, 0x1f, 0x46, 0x75, 0x6e, 0x67,
	0x75, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a,
	0x19, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64,
	0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06,
	0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x82, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x96, 0x01, 0x0a, 0x1f, 0x48, 0x69, 0x64,
	0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x24, 0x0a, 0x0e,
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10,
	0x9e, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f,
	0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10,
	0x01, 0x22, 0xde, 0x02, 0x0a, 0x1e, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x63, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x24,
	0x0a, 0x0e, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x69, 0x6e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44,
	0x10, 0xae, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02,
	0x10, 0x01, 0x2a, 0x4d, 0x0a, 0x10, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x41, 0x4c, 0x4c, 0x45, 0x52,
	0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x41, 0x4c, 0x4c,
	0x45, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x47, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10,
	0x02, 0x2a, 0x9a, 0x03, 0x0a, 0x11, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f,
	0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x41, 0x4c, 0x4c, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x47, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x55, 0x50, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x41, 0x4c, 0x4c, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x47, 0x41,
	0x4c, 0x4c, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x55, 0x41, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x47, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x4f, 0x50, 0x5f, 0x4c, 0x55, 0x41, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x41, 0x4c, 0x4c, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x4c, 0x45,
	0x41, 0x56, 0x45, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x47,
	0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x23,
	0x0a, 0x1f, 0x47, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x54, 0x4f, 0x50, 0x5f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x44, 0x49, 0x45, 0x10, 0x08,
	0x12, 0x19, 0x0a, 0x15, 0x47, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x47,
	0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x46, 0x55, 0x4e, 0x47,
	0x55, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x49, 0x45, 0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c,
	0x47, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x49, 0x46,
	0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x0b, 0x2a, 0x67,
	0x0a, 0x12, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x47, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x5f, 0x42, 0x59, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x47,
	0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f,
	0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x02, 0x2a, 0xff, 0x01, 0x0a, 0x18, 0x53, 0x61, 0x6c, 0x76,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x41, 0x4c, 0x56, 0x41, 0x47, 0x45, 0x5f,
	0x50, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x41, 0x4c, 0x56, 0x41, 0x47, 0x45, 0x5f, 0x50,
	0x52, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x41, 0x4c, 0x56, 0x41, 0x47, 0x45,
	0x5f, 0x50, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x41, 0x52,
	0x52, 0x49, 0x56, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x41, 0x4c, 0x56, 0x41,
	0x47, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53,
	0x41, 0x4c, 0x56, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x53,
	0x41, 0x4c, 0x56, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x4f, 0x50, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x41,
	0x4c, 0x56, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x4f, 0x50, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x10, 0x06, 0x2a, 0xf4, 0x01, 0x0a, 0x17, 0x53, 0x61,
	0x6c, 0x76, 0x61, 0x67, 0x65, 0x45, 0x73, 0x63, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x41, 0x4c, 0x56, 0x41, 0x47, 0x45,
	0x5f, 0x45, 0x53, 0x43, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x41, 0x4c, 0x56, 0x41, 0x47, 0x45, 0x5f, 0x45,
	0x53, 0x43, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x41, 0x4c, 0x56, 0x41, 0x47, 0x45, 0x5f,
	0x45, 0x53, 0x43, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x44, 0x55, 0x4d, 0x50,
	0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x41, 0x4c, 0x56, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x53,
	0x43, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x03,
	0x12, 0x21, 0x0a, 0x1d, 0x53, 0x41, 0x4c, 0x56, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x53, 0x43, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50,
	0x54, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x41, 0x4c, 0x56, 0x41, 0x47, 0x45, 0x5f, 0x45,
	0x53, 0x43, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45,
	0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x41, 0x4c, 0x56, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x53,
	0x43, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x06,
	0x2a, 0x7e, 0x0a, 0x14, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53,
	0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x53, 0x4c, 0x41,
	0x4e, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x53, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x54,
	0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x53,
	0x4c, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x53, 0x41, 0x49, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e,
	0x49, 0x53, 0x4c, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x53, 0x41, 0x49,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x02,
	0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74,
	0x65, 0x79, 0x76, 0x61, 0x74, 0x2d, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2f, 0x68, 0x6b, 0x34,
	0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_cmd_cmd_gallery_proto_rawDescOnce sync.Once
	file_cmd_cmd_gallery_proto_rawDescData = file_cmd_cmd_gallery_proto_rawDesc
)

func file_cmd_cmd_gallery_proto_rawDescGZIP() []byte {
	file_cmd_cmd_gallery_proto_rawDescOnce.Do(func() {
		file_cmd_cmd_gallery_proto_rawDescData = protoimpl.X.CompressGZIP(file_cmd_cmd_gallery_proto_rawDescData)
	})
	return file_cmd_cmd_gallery_proto_rawDescData
}

var file_cmd_cmd_gallery_proto_enumTypes = make([]protoimpl.EnumInfo, 39)
var file_cmd_cmd_gallery_proto_msgTypes = make([]protoimpl.MessageInfo, 105)
var file_cmd_cmd_gallery_proto_goTypes = []interface{}{
	(GalleryStageType)(0),                            // 0: proto.GalleryStageType
	(GalleryStopReason)(0),                           // 1: proto.GalleryStopReason
	(GalleryStartSource)(0),                          // 2: proto.GalleryStartSource
	(SalvagePreventStopReason)(0),                    // 3: proto.SalvagePreventStopReason
	(SalvageEscortStopReason)(0),                     // 4: proto.SalvageEscortStopReason
	(IslandPartySailStage)(0),                        // 5: proto.IslandPartySailStage
	(GalleryStartNotify_CmdId)(0),                    // 6: proto.GalleryStartNotify.CmdId
	(GalleryBalloonShootNotify_CmdId)(0),             // 7: proto.GalleryBalloonShootNotify.CmdId
	(GalleryBalloonScoreNotify_CmdId)(0),             // 8: proto.GalleryBalloonScoreNotify.CmdId
	(GalleryStopNotify_CmdId)(0),                     // 9: proto.GalleryStopNotify.CmdId
	(GalleryFallCatchNotify_CmdId)(0),                // 10: proto.GalleryFallCatchNotify.CmdId
	(GalleryFallScoreNotify_CmdId)(0),                // 11: proto.GalleryFallScoreNotify.CmdId
	(GetAllSceneGalleryInfoReq_CmdId)(0),             // 12: proto.GetAllSceneGalleryInfoReq.CmdId
	(GetAllSceneGalleryInfoRsp_CmdId)(0),             // 13: proto.GetAllSceneGalleryInfoRsp.CmdId
	(GalleryFlowerCatchNotify_CmdId)(0),              // 14: proto.GalleryFlowerCatchNotify.CmdId
	(GalleryPreStartNotify_CmdId)(0),                 // 15: proto.GalleryPreStartNotify.CmdId
	(GalleryBulletHitNotify_CmdId)(0),                // 16: proto.GalleryBulletHitNotify.CmdId
	(GalleryBrokenFloorFallNotify_CmdId)(0),          // 17: proto.GalleryBrokenFloorFallNotify.CmdId
	(InterruptGalleryReq_CmdId)(0),                   // 18: proto.InterruptGalleryReq.CmdId
	(InterruptGalleryRsp_CmdId)(0),                   // 19: proto.InterruptGalleryRsp.CmdId
	(SceneGalleryInfoNotify_CmdId)(0),                // 20: proto.SceneGalleryInfoNotify.CmdId
	(GalleryBounceConjuringHitNotify_CmdId)(0),       // 21: proto.GalleryBounceConjuringHitNotify.CmdId
	(GallerySumoKillMonsterNotify_CmdId)(0),          // 22: proto.GallerySumoKillMonsterNotify.CmdId
	(GalleryCrystalLinkKillMonsterNotify_CmdId)(0),   // 23: proto.GalleryCrystalLinkKillMonsterNotify.CmdId
	(GalleryCrystalLinkBuffInfoNotify_CmdId)(0),      // 24: proto.GalleryCrystalLinkBuffInfoNotify.CmdId
	(HomeGalleryInPlayingNotify_CmdId)(0),            // 25: proto.HomeGalleryInPlayingNotify.CmdId
	(GalleryIslandPartyDownHillInfoNotify_CmdId)(0),  // 26: proto.GalleryIslandPartyDownHillInfoNotify.CmdId
	(IslandPartyRaftInfoNotify_CmdId)(0),             // 27: proto.IslandPartyRaftInfoNotify.CmdId
	(IslandPartySailInfoNotify_CmdId)(0),             // 28: proto.IslandPartySailInfoNotify.CmdId
	(BackRebornGalleryReq_CmdId)(0),                  // 29: proto.BackRebornGalleryReq.CmdId
	(BackRebornGalleryRsp_CmdId)(0),                  // 30: proto.BackRebornGalleryRsp.CmdId
	(GalleryWillStartCountdownNotify_CmdId)(0),       // 31: proto.GalleryWillStartCountdownNotify.CmdId
	(InstableSprayGalleryInfoNotify_CmdId)(0),        // 32: proto.InstableSprayGalleryInfoNotify.CmdId
	(WindFieldGalleryInfoNotify_CmdId)(0),            // 33: proto.WindFieldGalleryInfoNotify.CmdId
	(WindFieldGalleryChallengeInfoNotify_CmdId)(0),   // 34: proto.WindFieldGalleryChallengeInfoNotify.CmdId
	(FungusFighterTrainingInfoNotify_CmdId)(0),       // 35: proto.FungusFighterTrainingInfoNotify.CmdId
	(FungusCaptureSettleNotify_CmdId)(0),             // 36: proto.FungusCaptureSettleNotify.CmdId
	(HideAndSeekPlayerCapturedNotify_CmdId)(0),       // 37: proto.HideAndSeekPlayerCapturedNotify.CmdId
	(CoinCollectGallerySettleNotify_CmdId)(0),        // 38: proto.CoinCollectGallerySettleNotify.CmdId
	(*GalleryFlowerStartParam)(nil),                  // 39: proto.GalleryFlowerStartParam
	(*GalleryStartNotify)(nil),                       // 40: proto.GalleryStartNotify
	(*GalleryBalloonShootNotify)(nil),                // 41: proto.GalleryBalloonShootNotify
	(*GalleryBalloonScoreNotify)(nil),                // 42: proto.GalleryBalloonScoreNotify
	(*BalloonSettleInfo)(nil),                        // 43: proto.BalloonSettleInfo
	(*GalleryStopNotify)(nil),                        // 44: proto.GalleryStopNotify
	(*FallSettleInfo)(nil),                           // 45: proto.FallSettleInfo
	(*GalleryFallCatchNotify)(nil),                   // 46: proto.GalleryFallCatchNotify
	(*FallPlayerBrief)(nil),                          // 47: proto.FallPlayerBrief
	(*GalleryFallScoreNotify)(nil),                   // 48: proto.GalleryFallScoreNotify
	(*BalloonPlayerInfo)(nil),                        // 49: proto.BalloonPlayerInfo
	(*FallPlayerInfo)(nil),                           // 50: proto.FallPlayerInfo
	(*SceneGalleryBalloonInfo)(nil),                  // 51: proto.SceneGalleryBalloonInfo
	(*SceneGalleryFallInfo)(nil),                     // 52: proto.SceneGalleryFallInfo
	(*SceneGalleryFlowerInfo)(nil),                   // 53: proto.SceneGalleryFlowerInfo
	(*SceneGalleryBulletInfo)(nil),                   // 54: proto.SceneGalleryBulletInfo
	(*SceneGalleryBrokenFloorInfo)(nil),              // 55: proto.SceneGalleryBrokenFloorInfo
	(*SceneGalleryHideAndSeekInfo)(nil),              // 56: proto.SceneGalleryHideAndSeekInfo
	(*SceneGalleryBuoyantCombatInfo)(nil),            // 57: proto.SceneGalleryBuoyantCombatInfo
	(*SceneGalleryProgressInfo)(nil),                 // 58: proto.SceneGalleryProgressInfo
	(*SceneGalleryBounceConjuringInfo)(nil),          // 59: proto.SceneGalleryBounceConjuringInfo
	(*SceneGalleryHandballInfo)(nil),                 // 60: proto.SceneGalleryHandballInfo
	(*SceneGallerySumoInfo)(nil),                     // 61: proto.SceneGallerySumoInfo
	(*SceneGallerySalvagePreventInfo)(nil),           // 62: proto.SceneGallerySalvagePreventInfo
	(*SceneGallerySalvageEscortInfo)(nil),            // 63: proto.SceneGallerySalvageEscortInfo
	(*SceneGalleryCrystalLinkInfo)(nil),              // 64: proto.SceneGalleryCrystalLinkInfo
	(*SceneGalleryIrodoriMasterInfo)(nil),            // 65: proto.SceneGalleryIrodoriMasterInfo
	(*SceneGalleryHomeBalloonInfo)(nil),              // 66: proto.SceneGalleryHomeBalloonInfo
	(*SceneGalleryLuminanceStoneChallengeInfo)(nil),  // 67: proto.SceneGalleryLuminanceStoneChallengeInfo
	(*SceneGalleryHomeSeekFurnitureInfo)(nil),        // 68: proto.SceneGalleryHomeSeekFurnitureInfo
	(*SceneGalleryIslandPartyDownHillInfo)(nil),      // 69: proto.SceneGalleryIslandPartyDownHillInfo
	(*SceneGallerySummerTimeV2BoatInfo)(nil),         // 70: proto.SceneGallerySummerTimeV2BoatInfo
	(*SceneGalleryIslandPartyRaftInfo)(nil),          // 71: proto.SceneGalleryIslandPartyRaftInfo
	(*SceneGalleryIslandPartySailInfo)(nil),          // 72: proto.SceneGalleryIslandPartySailInfo
	(*SceneGalleryInstableSprayBuffInfo)(nil),        // 73: proto.SceneGalleryInstableSprayBuffInfo
	(*SceneGalleryInstaleSprayInfo)(nil),             // 74: proto.SceneGalleryInstaleSprayInfo
	(*SceneGalleryTreasureSeelieInfo)(nil),           // 75: proto.SceneGalleryTreasureSeelieInfo
	(*SceneGalleryWindFieldInfo)(nil),                // 76: proto.SceneGalleryWindFieldInfo
	(*SceneGalleryFungusFighterTrainingInfo)(nil),    // 77: proto.SceneGalleryFungusFighterTrainingInfo
	(*SceneGalleryFungusFighterCaptureInfo)(nil),     // 78: proto.SceneGalleryFungusFighterCaptureInfo
	(*SceneGalleryEffigyChallengeV2Info)(nil),        // 79: proto.SceneGalleryEffigyChallengeV2Info
	(*SceneGalleryCharAmusementInfo)(nil),            // 80: proto.SceneGalleryCharAmusementInfo
	(*SceneGalleryBrickBreakerInfo)(nil),             // 81: proto.SceneGalleryBrickBreakerInfo
	(*SceneGalleryCoinCollectInfo)(nil),              // 82: proto.SceneGalleryCoinCollectInfo
	(*SceneGalleryTeamChainInfo)(nil),                // 83: proto.SceneGalleryTeamChainInfo
	(*SceneGalleryInfo)(nil),                         // 84: proto.SceneGalleryInfo
	(*GetAllSceneGalleryInfoReq)(nil),                // 85: proto.GetAllSceneGalleryInfoReq
	(*GetAllSceneGalleryInfoRsp)(nil),                // 86: proto.GetAllSceneGalleryInfoRsp
	(*GalleryFlowerCatchNotify)(nil),                 // 87: proto.GalleryFlowerCatchNotify
	(*GalleryPreStartNotify)(nil),                    // 88: proto.GalleryPreStartNotify
	(*GalleryBulletHitNotify)(nil),                   // 89: proto.GalleryBulletHitNotify
	(*GalleryBrokenFloorFallNotify)(nil),             // 90: proto.GalleryBrokenFloorFallNotify
	(*InterruptGalleryReq)(nil),                      // 91: proto.InterruptGalleryReq
	(*InterruptGalleryRsp)(nil),                      // 92: proto.InterruptGalleryRsp
	(*SceneGalleryInfoNotify)(nil),                   // 93: proto.SceneGalleryInfoNotify
	(*BuoyantCombatGallerySettleInfo)(nil),           // 94: proto.BuoyantCombatGallerySettleInfo
	(*BounceConjuringGallerySettleInfo)(nil),         // 95: proto.BounceConjuringGallerySettleInfo
	(*GalleryBounceConjuringHitNotify)(nil),          // 96: proto.GalleryBounceConjuringHitNotify
	(*GallerySumoKillMonsterNotify)(nil),             // 97: proto.GallerySumoKillMonsterNotify
	(*GalleryCrystalLinkKillMonsterNotify)(nil),      // 98: proto.GalleryCrystalLinkKillMonsterNotify
	(*GalleryCrystalLinkBuffInfoNotify)(nil),         // 99: proto.GalleryCrystalLinkBuffInfoNotify
	(*FishInfo)(nil),                                 // 100: proto.FishInfo
	(*FishingScore)(nil),                             // 101: proto.FishingScore
	(*FishingGallerySettleInfo)(nil),                 // 102: proto.FishingGallerySettleInfo
	(*RacingGallerySettleInfo)(nil),                  // 103: proto.RacingGallerySettleInfo
	(*SalvagePreventGallerySettleInfo)(nil),          // 104: proto.SalvagePreventGallerySettleInfo
	(*SalvageEscortGallerySettleInfo)(nil),           // 105: proto.SalvageEscortGallerySettleInfo
	(*BalloonGallerySettleInfo)(nil),                 // 106: proto.BalloonGallerySettleInfo
	(*IrodoriMasterGallerySettleInfo)(nil),           // 107: proto.IrodoriMasterGallerySettleInfo
	(*PhotoGallerySettleInfo)(nil),                   // 108: proto.PhotoGallerySettleInfo
	(*LuminanceStoneChallengeGallerySettleInfo)(nil), // 109: proto.LuminanceStoneChallengeGallerySettleInfo
	(*HomeGalleryInPlayingNotify)(nil),               // 110: proto.HomeGalleryInPlayingNotify
	(*SummerTimeV2BoatGallerySettleInfo)(nil),        // 111: proto.SummerTimeV2BoatGallerySettleInfo
	(*GalleryIslandPartyDownHillInfoNotify)(nil),     // 112: proto.GalleryIslandPartyDownHillInfoNotify
	(*IslandPartyRaftInfoNotify)(nil),                // 113: proto.IslandPartyRaftInfoNotify
	(*IslandPartySailInfoNotify)(nil),                // 114: proto.IslandPartySailInfoNotify
	(*IslandPartyGallerySettleInfo)(nil),             // 115: proto.IslandPartyGallerySettleInfo
	(*BackRebornGalleryReq)(nil),                     // 116: proto.BackRebornGalleryReq
	(*BackRebornGalleryRsp)(nil),                     // 117: proto.BackRebornGalleryRsp
	(*GalleryWillStartCountdownNotify)(nil),          // 118: proto.GalleryWillStartCountdownNotify
	(*InstableSprayGalleryInfoNotify)(nil),           // 119: proto.InstableSprayGalleryInfoNotify
	(*SceneGalleryMuqadasPotionInfo)(nil),            // 120: proto.SceneGalleryMuqadasPotionInfo
	(*VintageHuntingFirstStageInfo)(nil),             // 121: proto.VintageHuntingFirstStageInfo
	(*VintageHuntingSecondStageInfo)(nil),            // 122: proto.VintageHuntingSecondStageInfo
	(*VintageHuntingThirdStageInfo)(nil),             // 123: proto.VintageHuntingThirdStageInfo
	(*SceneGalleryVintageHuntingInfo)(nil),           // 124: proto.SceneGalleryVintageHuntingInfo
	(*WindFieldGalleryInfoNotify)(nil),               // 125: proto.WindFieldGalleryInfoNotify
	(*WindFieldGalleryChallengeInfoNotify)(nil),      // 126: proto.WindFieldGalleryChallengeInfoNotify
	(*FungusFighterTrainingInfoNotify)(nil),          // 127: proto.FungusFighterTrainingInfoNotify
	(*FungusFighterTrainingSettleInfo)(nil),          // 128: proto.FungusFighterTrainingSettleInfo
	(*FungusCaptureSettleNotify)(nil),                // 129: proto.FungusCaptureSettleNotify
	(*HideAndSeekPlayerCapturedNotify)(nil),          // 130: proto.HideAndSeekPlayerCapturedNotify
	(*CoinCollectGallerySettleNotify)(nil),           // 131: proto.CoinCollectGallerySettleNotify
	nil,                                              // 132: proto.GalleryBalloonScoreNotify.UidScoreMapEntry
	nil,                                              // 133: proto.FallSettleInfo.FlowerRingCatchCountMapEntry
	nil,                                              // 134: proto.GalleryFallCatchNotify.BallCatchCountMapEntry
	nil,                                              // 135: proto.GalleryFallScoreNotify.UidBriefMapEntry
	nil,                                              // 136: proto.FallPlayerInfo.BallCatchCountMapEntry
	nil,                                              // 137: proto.SceneGalleryBalloonInfo.ScenePlayerBalloonInfoMapEntry
	nil,                                              // 138: proto.SceneGalleryFallInfo.ScenePlayerFallInfoMapEntry
	nil,                                              // 139: proto.SceneGalleryBulletInfo.HitCountMapEntry
	nil,                                              // 140: proto.SceneGalleryBrokenFloorInfo.FallCountMapEntry
	nil,                                              // 141: proto.SceneGalleryHomeSeekFurnitureInfo.PlayerScoreMapEntry
	nil,                                              // 142: proto.BounceConjuringGallerySettleInfo.GadgetCountMapEntry
	nil,                                              // 143: proto.FishingGallerySettleInfo.FishMapEntry
	(*OnlinePlayerInfo)(nil),                         // 144: proto.OnlinePlayerInfo
	(*PlaceInfo)(nil),                                // 145: proto.PlaceInfo
	(*ExhibitionDisplayInfo)(nil),                    // 146: proto.ExhibitionDisplayInfo
}
var file_cmd_cmd_gallery_proto_depIdxs = []int32{
	39,  // 0: proto.GalleryStartNotify.flower_start_param:type_name -> proto.GalleryFlowerStartParam
	132, // 1: proto.GalleryBalloonScoreNotify.uid_score_map:type_name -> proto.GalleryBalloonScoreNotify.UidScoreMapEntry
	144, // 2: proto.BalloonSettleInfo.player_info:type_name -> proto.OnlinePlayerInfo
	144, // 3: proto.FallSettleInfo.player_info:type_name -> proto.OnlinePlayerInfo
	133, // 4: proto.FallSettleInfo.flower_ring_catch_count_map:type_name -> proto.FallSettleInfo.FlowerRingCatchCountMapEntry
	134, // 5: proto.GalleryFallCatchNotify.ball_catch_count_map:type_name -> proto.GalleryFallCatchNotify.BallCatchCountMapEntry
	135, // 6: proto.GalleryFallScoreNotify.uid_brief_map:type_name -> proto.GalleryFallScoreNotify.UidBriefMapEntry
	136, // 7: proto.FallPlayerInfo.ball_catch_count_map:type_name -> proto.FallPlayerInfo.BallCatchCountMapEntry
	137, // 8: proto.SceneGalleryBalloonInfo.scene_player_balloon_info_map:type_name -> proto.SceneGalleryBalloonInfo.ScenePlayerBalloonInfoMapEntry
	138, // 9: proto.SceneGalleryFallInfo.scene_player_fall_info_map:type_name -> proto.SceneGalleryFallInfo.ScenePlayerFallInfoMapEntry
	139, // 10: proto.SceneGalleryBulletInfo.hit_count_map:type_name -> proto.SceneGalleryBulletInfo.HitCountMapEntry
	140, // 11: proto.SceneGalleryBrokenFloorInfo.fall_count_map:type_name -> proto.SceneGalleryBrokenFloorInfo.FallCountMapEntry
	145, // 12: proto.SceneGalleryHandballInfo.ball_place_info:type_name -> proto.PlaceInfo
	141, // 13: proto.SceneGalleryHomeSeekFurnitureInfo.player_score_map:type_name -> proto.SceneGalleryHomeSeekFurnitureInfo.PlayerScoreMapEntry
	2,   // 14: proto.SceneGalleryIslandPartyDownHillInfo.start_source:type_name -> proto.GalleryStartSource
	2,   // 15: proto.SceneGalleryIslandPartyRaftInfo.start_source:type_name -> proto.GalleryStartSource
	2,   // 16: proto.SceneGalleryIslandPartySailInfo.start_source:type_name -> proto.GalleryStartSource
	5,   // 17: proto.SceneGalleryIslandPartySailInfo.stage:type_name -> proto.IslandPartySailStage
	73,  // 18: proto.SceneGalleryInstaleSprayInfo.buff_info_list:type_name -> proto.SceneGalleryInstableSprayBuffInfo
	0,   // 19: proto.SceneGalleryInfo.stage:type_name -> proto.GalleryStageType
	58,  // 20: proto.SceneGalleryInfo.progress_info_list:type_name -> proto.SceneGalleryProgressInfo
	51,  // 21: proto.SceneGalleryInfo.balloon_info:type_name -> proto.SceneGalleryBalloonInfo
	52,  // 22: proto.SceneGalleryInfo.fall_info:type_name -> proto.SceneGalleryFallInfo
	53,  // 23: proto.SceneGalleryInfo.flower_info:type_name -> proto.SceneGalleryFlowerInfo
	54,  // 24: proto.SceneGalleryInfo.bullet_info:type_name -> proto.SceneGalleryBulletInfo
	55,  // 25: proto.SceneGalleryInfo.broken_floor_info:type_name -> proto.SceneGalleryBrokenFloorInfo
	56,  // 26: proto.SceneGalleryInfo.hide_and_seek_info:type_name -> proto.SceneGalleryHideAndSeekInfo
	57,  // 27: proto.SceneGalleryInfo.buoyant_combat_info:type_name -> proto.SceneGalleryBuoyantCombatInfo
	59,  // 28: proto.SceneGalleryInfo.bounce_conjuring_info:type_name -> proto.SceneGalleryBounceConjuringInfo
	60,  // 29: proto.SceneGalleryInfo.handball_info:type_name -> proto.SceneGalleryHandballInfo
	61,  // 30: proto.SceneGalleryInfo.sumo_info:type_name -> proto.SceneGallerySumoInfo
	62,  // 31: proto.SceneGalleryInfo.salvage_prevent_info:type_name -> proto.SceneGallerySalvagePreventInfo
	63,  // 32: proto.SceneGalleryInfo.salvage_escort_info:type_name -> proto.SceneGallerySalvageEscortInfo
	66,  // 33: proto.SceneGalleryInfo.home_balloon_info:type_name -> proto.SceneGalleryHomeBalloonInfo
	64,  // 34: proto.SceneGalleryInfo.crystal_link_info:type_name -> proto.SceneGalleryCrystalLinkInfo
	65,  // 35: proto.SceneGalleryInfo.irodori_master_info:type_name -> proto.SceneGalleryIrodoriMasterInfo
	67,  // 36: proto.SceneGalleryInfo.luminance_stone_challenge_info:type_name -> proto.SceneGalleryLuminanceStoneChallengeInfo
	68,  // 37: proto.SceneGalleryInfo.home_seek_furniture_info:type_name -> proto.SceneGalleryHomeSeekFurnitureInfo
	69,  // 38: proto.SceneGalleryInfo.island_party_down_hill_info:type_name -> proto.SceneGalleryIslandPartyDownHillInfo
	70,  // 39: proto.SceneGalleryInfo.summer_time_v2_boat_info:type_name -> proto.SceneGallerySummerTimeV2BoatInfo
	71,  // 40: proto.SceneGalleryInfo.island_party_raft_info:type_name -> proto.SceneGalleryIslandPartyRaftInfo
	72,  // 41: proto.SceneGalleryInfo.island_party_sail_info:type_name -> proto.SceneGalleryIslandPartySailInfo
	74,  // 42: proto.SceneGalleryInfo.instable_spray_info:type_name -> proto.SceneGalleryInstaleSprayInfo
	120, // 43: proto.SceneGalleryInfo.muqadas_potion_info:type_name -> proto.SceneGalleryMuqadasPotionInfo
	75,  // 44: proto.SceneGalleryInfo.treasure_seelie_info:type_name -> proto.SceneGalleryTreasureSeelieInfo
	124, // 45: proto.SceneGalleryInfo.vintage_hunting_info:type_name -> proto.SceneGalleryVintageHuntingInfo
	76,  // 46: proto.SceneGalleryInfo.wind_field_info:type_name -> proto.SceneGalleryWindFieldInfo
	77,  // 47: proto.SceneGalleryInfo.fungus_fighter_training_info:type_name -> proto.SceneGalleryFungusFighterTrainingInfo
	79,  // 48: proto.SceneGalleryInfo.effigy_challenge_info:type_name -> proto.SceneGalleryEffigyChallengeV2Info
	78,  // 49: proto.SceneGalleryInfo.fungus_fighter_capture_info:type_name -> proto.SceneGalleryFungusFighterCaptureInfo
	80,  // 50: proto.SceneGalleryInfo.char_amusement_info:type_name -> proto.SceneGalleryCharAmusementInfo
	81,  // 51: proto.SceneGalleryInfo.brick_breaker_info:type_name -> proto.SceneGalleryBrickBreakerInfo
	82,  // 52: proto.SceneGalleryInfo.coin_collect_info:type_name -> proto.SceneGalleryCoinCollectInfo
	83,  // 53: proto.SceneGalleryInfo.team_chain_info:type_name -> proto.SceneGalleryTeamChainInfo
	84,  // 54: proto.GetAllSceneGalleryInfoRsp.gallery_info_list:type_name -> proto.SceneGalleryInfo
	84,  // 55: proto.SceneGalleryInfoNotify.gallery_info:type_name -> proto.SceneGalleryInfo
	144, // 56: proto.BounceConjuringGallerySettleInfo.player_info:type_name -> proto.OnlinePlayerInfo
	142, // 57: proto.BounceConjuringGallerySettleInfo.gadget_count_map:type_name -> proto.BounceConjuringGallerySettleInfo.GadgetCountMapEntry
	146, // 58: proto.BounceConjuringGallerySettleInfo.card_list:type_name -> proto.ExhibitionDisplayInfo
	143, // 59: proto.FishingGallerySettleInfo.fish_map:type_name -> proto.FishingGallerySettleInfo.FishMapEntry
	101, // 60: proto.FishingGallerySettleInfo.fishing_score_list:type_name -> proto.FishingScore
	1,   // 61: proto.RacingGallerySettleInfo.reason:type_name -> proto.GalleryStopReason
	3,   // 62: proto.SalvagePreventGallerySettleInfo.reason:type_name -> proto.SalvagePreventStopReason
	4,   // 63: proto.SalvageEscortGallerySettleInfo.reason:type_name -> proto.SalvageEscortStopReason
	1,   // 64: proto.BalloonGallerySettleInfo.reason:type_name -> proto.GalleryStopReason
	1,   // 65: proto.IrodoriMasterGallerySettleInfo.reason:type_name -> proto.GalleryStopReason
	1,   // 66: proto.PhotoGallerySettleInfo.reason:type_name -> proto.GalleryStopReason
	1,   // 67: proto.LuminanceStoneChallengeGallerySettleInfo.reason:type_name -> proto.GalleryStopReason
	1,   // 68: proto.SummerTimeV2BoatGallerySettleInfo.reason:type_name -> proto.GalleryStopReason
	5,   // 69: proto.IslandPartySailInfoNotify.stage:type_name -> proto.IslandPartySailStage
	144, // 70: proto.IslandPartyGallerySettleInfo.player_info:type_name -> proto.OnlinePlayerInfo
	146, // 71: proto.IslandPartyGallerySettleInfo.card_list:type_name -> proto.ExhibitionDisplayInfo
	2,   // 72: proto.GalleryWillStartCountdownNotify.start_source:type_name -> proto.GalleryStartSource
	121, // 73: proto.SceneGalleryVintageHuntingInfo.first_stage_info:type_name -> proto.VintageHuntingFirstStageInfo
	122, // 74: proto.SceneGalleryVintageHuntingInfo.second_stage_info:type_name -> proto.VintageHuntingSecondStageInfo
	123, // 75: proto.SceneGalleryVintageHuntingInfo.third_stage_info:type_name -> proto.VintageHuntingThirdStageInfo
	1,   // 76: proto.FungusFighterTrainingSettleInfo.reason:type_name -> proto.GalleryStopReason
	47,  // 77: proto.GalleryFallScoreNotify.UidBriefMapEntry.value:type_name -> proto.FallPlayerBrief
	49,  // 78: proto.SceneGalleryBalloonInfo.ScenePlayerBalloonInfoMapEntry.value:type_name -> proto.BalloonPlayerInfo
	50,  // 79: proto.SceneGalleryFallInfo.ScenePlayerFallInfoMapEntry.value:type_name -> proto.FallPlayerInfo
	100, // 80: proto.FishingGallerySettleInfo.FishMapEntry.value:type_name -> proto.FishInfo
	81,  // [81:81] is the sub-list for method output_type
	81,  // [81:81] is the sub-list for method input_type
	81,  // [81:81] is the sub-list for extension type_name
	81,  // [81:81] is the sub-list for extension extendee
	0,   // [0:81] is the sub-list for field type_name
}

func init() { file_cmd_cmd_gallery_proto_init() }
func file_cmd_cmd_gallery_proto_init() {
	if File_cmd_cmd_gallery_proto != nil {
		return
	}
	file_define_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cmd_cmd_gallery_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryFlowerStartParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryStartNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryBalloonShootNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryBalloonScoreNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalloonSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryStopNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FallSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryFallCatchNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FallPlayerBrief); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryFallScoreNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalloonPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FallPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryBalloonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryFallInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryFlowerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryBulletInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryBrokenFloorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryHideAndSeekInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryBuoyantCombatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryProgressInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryBounceConjuringInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryHandballInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGallerySumoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGallerySalvagePreventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGallerySalvageEscortInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryCrystalLinkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryIrodoriMasterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryHomeBalloonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryLuminanceStoneChallengeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryHomeSeekFurnitureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryIslandPartyDownHillInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGallerySummerTimeV2BoatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryIslandPartyRaftInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryIslandPartySailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryInstableSprayBuffInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryInstaleSprayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryTreasureSeelieInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryWindFieldInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryFungusFighterTrainingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryFungusFighterCaptureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryEffigyChallengeV2Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryCharAmusementInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryBrickBreakerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryCoinCollectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryTeamChainInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllSceneGalleryInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllSceneGalleryInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryFlowerCatchNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryPreStartNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryBulletHitNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryBrokenFloorFallNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterruptGalleryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterruptGalleryRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuoyantCombatGallerySettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BounceConjuringGallerySettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryBounceConjuringHitNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GallerySumoKillMonsterNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryCrystalLinkKillMonsterNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryCrystalLinkBuffInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishingScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishingGallerySettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RacingGallerySettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalvagePreventGallerySettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalvageEscortGallerySettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalloonGallerySettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriMasterGallerySettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoGallerySettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuminanceStoneChallengeGallerySettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeGalleryInPlayingNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeV2BoatGallerySettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryIslandPartyDownHillInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IslandPartyRaftInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IslandPartySailInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IslandPartyGallerySettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackRebornGalleryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackRebornGalleryRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryWillStartCountdownNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstableSprayGalleryInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryMuqadasPotionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageHuntingFirstStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageHuntingSecondStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageHuntingThirdStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryVintageHuntingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindFieldGalleryInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindFieldGalleryChallengeInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusFighterTrainingInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusFighterTrainingSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusCaptureSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideAndSeekPlayerCapturedNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gallery_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinCollectGallerySettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cmd_cmd_gallery_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*GalleryStartNotify_FlowerStartParam)(nil),
	}
	file_cmd_cmd_gallery_proto_msgTypes[45].OneofWrappers = []interface{}{
		(*SceneGalleryInfo_BalloonInfo)(nil),
		(*SceneGalleryInfo_FallInfo)(nil),
		(*SceneGalleryInfo_FlowerInfo)(nil),
		(*SceneGalleryInfo_BulletInfo)(nil),
		(*SceneGalleryInfo_BrokenFloorInfo)(nil),
		(*SceneGalleryInfo_HideAndSeekInfo)(nil),
		(*SceneGalleryInfo_BuoyantCombatInfo)(nil),
		(*SceneGalleryInfo_BounceConjuringInfo)(nil),
		(*SceneGalleryInfo_HandballInfo)(nil),
		(*SceneGalleryInfo_SumoInfo)(nil),
		(*SceneGalleryInfo_SalvagePreventInfo)(nil),
		(*SceneGalleryInfo_SalvageEscortInfo)(nil),
		(*SceneGalleryInfo_HomeBalloonInfo)(nil),
		(*SceneGalleryInfo_CrystalLinkInfo)(nil),
		(*SceneGalleryInfo_IrodoriMasterInfo)(nil),
		(*SceneGalleryInfo_LuminanceStoneChallengeInfo)(nil),
		(*SceneGalleryInfo_HomeSeekFurnitureInfo)(nil),
		(*SceneGalleryInfo_IslandPartyDownHillInfo)(nil),
		(*SceneGalleryInfo_SummerTimeV2BoatInfo)(nil),
		(*SceneGalleryInfo_IslandPartyRaftInfo)(nil),
		(*SceneGalleryInfo_IslandPartySailInfo)(nil),
		(*SceneGalleryInfo_InstableSprayInfo)(nil),
		(*SceneGalleryInfo_MuqadasPotionInfo)(nil),
		(*SceneGalleryInfo_TreasureSeelieInfo)(nil),
		(*SceneGalleryInfo_VintageHuntingInfo)(nil),
		(*SceneGalleryInfo_WindFieldInfo)(nil),
		(*SceneGalleryInfo_FungusFighterTrainingInfo)(nil),
		(*SceneGalleryInfo_EffigyChallengeInfo)(nil),
		(*SceneGalleryInfo_FungusFighterCaptureInfo)(nil),
		(*SceneGalleryInfo_CharAmusementInfo)(nil),
		(*SceneGalleryInfo_BrickBreakerInfo)(nil),
		(*SceneGalleryInfo_CoinCollectInfo)(nil),
		(*SceneGalleryInfo_TeamChainInfo)(nil),
	}
	file_cmd_cmd_gallery_proto_msgTypes[85].OneofWrappers = []interface{}{
		(*SceneGalleryVintageHuntingInfo_FirstStageInfo)(nil),
		(*SceneGalleryVintageHuntingInfo_SecondStageInfo)(nil),
		(*SceneGalleryVintageHuntingInfo_ThirdStageInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cmd_cmd_gallery_proto_rawDesc,
			NumEnums:      39,
			NumMessages:   105,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cmd_cmd_gallery_proto_goTypes,
		DependencyIndexes: file_cmd_cmd_gallery_proto_depIdxs,
		EnumInfos:         file_cmd_cmd_gallery_proto_enumTypes,
		MessageInfos:      file_cmd_cmd_gallery_proto_msgTypes,
	}.Build()
	File_cmd_cmd_gallery_proto = out.File
	file_cmd_cmd_gallery_proto_rawDesc = nil
	file_cmd_cmd_gallery_proto_goTypes = nil
	file_cmd_cmd_gallery_proto_depIdxs = nil
}
