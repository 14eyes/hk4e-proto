// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: cmd/cmd_dungeon.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WindFieldDungeonFailReason int32

const (
	WindFieldDungeonFailReason_WIND_FIELD_DUNGEON_FAIL_NONE           WindFieldDungeonFailReason = 0
	WindFieldDungeonFailReason_WIND_FIELD_DUNGEON_FAIL_CANCEL         WindFieldDungeonFailReason = 1
	WindFieldDungeonFailReason_WIND_FIELD_DUNGEON_FAIL_TIMEOUT        WindFieldDungeonFailReason = 2
	WindFieldDungeonFailReason_WIND_FIELD_DUNGEON_FAIL_ALL_AVATAR_DIE WindFieldDungeonFailReason = 3
	WindFieldDungeonFailReason_WIND_FIELD_DUNGEON_FAIL_LUA_INTERRUPT  WindFieldDungeonFailReason = 4
)

// Enum value maps for WindFieldDungeonFailReason.
var (
	WindFieldDungeonFailReason_name = map[int32]string{
		0: "WIND_FIELD_DUNGEON_FAIL_NONE",
		1: "WIND_FIELD_DUNGEON_FAIL_CANCEL",
		2: "WIND_FIELD_DUNGEON_FAIL_TIMEOUT",
		3: "WIND_FIELD_DUNGEON_FAIL_ALL_AVATAR_DIE",
		4: "WIND_FIELD_DUNGEON_FAIL_LUA_INTERRUPT",
	}
	WindFieldDungeonFailReason_value = map[string]int32{
		"WIND_FIELD_DUNGEON_FAIL_NONE":           0,
		"WIND_FIELD_DUNGEON_FAIL_CANCEL":         1,
		"WIND_FIELD_DUNGEON_FAIL_TIMEOUT":        2,
		"WIND_FIELD_DUNGEON_FAIL_ALL_AVATAR_DIE": 3,
		"WIND_FIELD_DUNGEON_FAIL_LUA_INTERRUPT":  4,
	}
)

func (x WindFieldDungeonFailReason) Enum() *WindFieldDungeonFailReason {
	p := new(WindFieldDungeonFailReason)
	*p = x
	return p
}

func (x WindFieldDungeonFailReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WindFieldDungeonFailReason) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[0].Descriptor()
}

func (WindFieldDungeonFailReason) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[0]
}

func (x WindFieldDungeonFailReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WindFieldDungeonFailReason.Descriptor instead.
func (WindFieldDungeonFailReason) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{0}
}

type DungeonDataType int32

const (
	DungeonDataType_DUNGEON_DATA_NONE                          DungeonDataType = 0
	DungeonDataType_DUNGEON_DATA_END_TIME                      DungeonDataType = 1
	DungeonDataType_DUNGEON_DATA_MONSTER_DIE_COUNT             DungeonDataType = 2
	DungeonDataType_DUNGEON_DATA_LEVEL_CONFIG_ID               DungeonDataType = 3
	DungeonDataType_DUNGEON_DATA_TOWER_MONTHLY_LEVEL_CONFIG_ID DungeonDataType = 4
	DungeonDataType_DUNGEON_DATA_TOWER_FLOOR_LEVEL_CONFIG_ID   DungeonDataType = 5
)

// Enum value maps for DungeonDataType.
var (
	DungeonDataType_name = map[int32]string{
		0: "DUNGEON_DATA_NONE",
		1: "DUNGEON_DATA_END_TIME",
		2: "DUNGEON_DATA_MONSTER_DIE_COUNT",
		3: "DUNGEON_DATA_LEVEL_CONFIG_ID",
		4: "DUNGEON_DATA_TOWER_MONTHLY_LEVEL_CONFIG_ID",
		5: "DUNGEON_DATA_TOWER_FLOOR_LEVEL_CONFIG_ID",
	}
	DungeonDataType_value = map[string]int32{
		"DUNGEON_DATA_NONE":                          0,
		"DUNGEON_DATA_END_TIME":                      1,
		"DUNGEON_DATA_MONSTER_DIE_COUNT":             2,
		"DUNGEON_DATA_LEVEL_CONFIG_ID":               3,
		"DUNGEON_DATA_TOWER_MONTHLY_LEVEL_CONFIG_ID": 4,
		"DUNGEON_DATA_TOWER_FLOOR_LEVEL_CONFIG_ID":   5,
	}
)

func (x DungeonDataType) Enum() *DungeonDataType {
	p := new(DungeonDataType)
	*p = x
	return p
}

func (x DungeonDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[1].Descriptor()
}

func (DungeonDataType) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[1]
}

func (x DungeonDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonDataType.Descriptor instead.
func (DungeonDataType) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{1}
}

type ChallengeFinishType int32

const (
	ChallengeFinishType_CHALLENGE_FINISH_TYPE_NONE  ChallengeFinishType = 0
	ChallengeFinishType_CHALLENGE_FINISH_TYPE_FAIL  ChallengeFinishType = 1
	ChallengeFinishType_CHALLENGE_FINISH_TYPE_SUCC  ChallengeFinishType = 2
	ChallengeFinishType_CHALLENGE_FINISH_TYPE_PAUSE ChallengeFinishType = 3
)

// Enum value maps for ChallengeFinishType.
var (
	ChallengeFinishType_name = map[int32]string{
		0: "CHALLENGE_FINISH_TYPE_NONE",
		1: "CHALLENGE_FINISH_TYPE_FAIL",
		2: "CHALLENGE_FINISH_TYPE_SUCC",
		3: "CHALLENGE_FINISH_TYPE_PAUSE",
	}
	ChallengeFinishType_value = map[string]int32{
		"CHALLENGE_FINISH_TYPE_NONE":  0,
		"CHALLENGE_FINISH_TYPE_FAIL":  1,
		"CHALLENGE_FINISH_TYPE_SUCC":  2,
		"CHALLENGE_FINISH_TYPE_PAUSE": 3,
	}
)

func (x ChallengeFinishType) Enum() *ChallengeFinishType {
	p := new(ChallengeFinishType)
	*p = x
	return p
}

func (x ChallengeFinishType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeFinishType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[2].Descriptor()
}

func (ChallengeFinishType) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[2]
}

func (x ChallengeFinishType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChallengeFinishType.Descriptor instead.
func (ChallengeFinishType) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{2}
}

type CustomDungeonFinishType int32

const (
	CustomDungeonFinishType_CUSTOM_DUNGEON_FINISH_PLAY_NORMAL      CustomDungeonFinishType = 0
	CustomDungeonFinishType_CUSTOM_DUNGEON_FINISH_PLAY_TRY         CustomDungeonFinishType = 1
	CustomDungeonFinishType_CUSTOM_DUNGEON_FINISH_EDIT_TRY         CustomDungeonFinishType = 2
	CustomDungeonFinishType_CUSTOM_DUNGEON_FINISH_SELF_PLAY_NORMAL CustomDungeonFinishType = 3
)

// Enum value maps for CustomDungeonFinishType.
var (
	CustomDungeonFinishType_name = map[int32]string{
		0: "CUSTOM_DUNGEON_FINISH_PLAY_NORMAL",
		1: "CUSTOM_DUNGEON_FINISH_PLAY_TRY",
		2: "CUSTOM_DUNGEON_FINISH_EDIT_TRY",
		3: "CUSTOM_DUNGEON_FINISH_SELF_PLAY_NORMAL",
	}
	CustomDungeonFinishType_value = map[string]int32{
		"CUSTOM_DUNGEON_FINISH_PLAY_NORMAL":      0,
		"CUSTOM_DUNGEON_FINISH_PLAY_TRY":         1,
		"CUSTOM_DUNGEON_FINISH_EDIT_TRY":         2,
		"CUSTOM_DUNGEON_FINISH_SELF_PLAY_NORMAL": 3,
	}
)

func (x CustomDungeonFinishType) Enum() *CustomDungeonFinishType {
	p := new(CustomDungeonFinishType)
	*p = x
	return p
}

func (x CustomDungeonFinishType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomDungeonFinishType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[3].Descriptor()
}

func (CustomDungeonFinishType) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[3]
}

func (x CustomDungeonFinishType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomDungeonFinishType.Descriptor instead.
func (CustomDungeonFinishType) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{3}
}

type DungeonCandidateTeamPlayerLeaveReason int32

const (
	DungeonCandidateTeamPlayerLeaveReason_DUNGEON_CANDIDATE_TPLR_NORMAL  DungeonCandidateTeamPlayerLeaveReason = 0
	DungeonCandidateTeamPlayerLeaveReason_DUNGEON_CANDIDATE_TPLR_DIE     DungeonCandidateTeamPlayerLeaveReason = 1
	DungeonCandidateTeamPlayerLeaveReason_DUNGEON_CANDIDATE_TPLR_BE_KICK DungeonCandidateTeamPlayerLeaveReason = 2
	DungeonCandidateTeamPlayerLeaveReason_DUNGEON_CANDIDATE_DISCONNECT   DungeonCandidateTeamPlayerLeaveReason = 3
)

// Enum value maps for DungeonCandidateTeamPlayerLeaveReason.
var (
	DungeonCandidateTeamPlayerLeaveReason_name = map[int32]string{
		0: "DUNGEON_CANDIDATE_TPLR_NORMAL",
		1: "DUNGEON_CANDIDATE_TPLR_DIE",
		2: "DUNGEON_CANDIDATE_TPLR_BE_KICK",
		3: "DUNGEON_CANDIDATE_DISCONNECT",
	}
	DungeonCandidateTeamPlayerLeaveReason_value = map[string]int32{
		"DUNGEON_CANDIDATE_TPLR_NORMAL":  0,
		"DUNGEON_CANDIDATE_TPLR_DIE":     1,
		"DUNGEON_CANDIDATE_TPLR_BE_KICK": 2,
		"DUNGEON_CANDIDATE_DISCONNECT":   3,
	}
)

func (x DungeonCandidateTeamPlayerLeaveReason) Enum() *DungeonCandidateTeamPlayerLeaveReason {
	p := new(DungeonCandidateTeamPlayerLeaveReason)
	*p = x
	return p
}

func (x DungeonCandidateTeamPlayerLeaveReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamPlayerLeaveReason) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[4].Descriptor()
}

func (DungeonCandidateTeamPlayerLeaveReason) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[4]
}

func (x DungeonCandidateTeamPlayerLeaveReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamPlayerLeaveReason.Descriptor instead.
func (DungeonCandidateTeamPlayerLeaveReason) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{4}
}

type DungeonCandidateTeamDismissReason int32

const (
	DungeonCandidateTeamDismissReason_DUNGEON_CANDIDATE_TPDR_NORMAL     DungeonCandidateTeamDismissReason = 0
	DungeonCandidateTeamDismissReason_DUNGEON_CANDIDATE_TPDR_DIE        DungeonCandidateTeamDismissReason = 1
	DungeonCandidateTeamDismissReason_DUNGEON_CANDIDATE_TPDR_DISCONNECT DungeonCandidateTeamDismissReason = 2
)

// Enum value maps for DungeonCandidateTeamDismissReason.
var (
	DungeonCandidateTeamDismissReason_name = map[int32]string{
		0: "DUNGEON_CANDIDATE_TPDR_NORMAL",
		1: "DUNGEON_CANDIDATE_TPDR_DIE",
		2: "DUNGEON_CANDIDATE_TPDR_DISCONNECT",
	}
	DungeonCandidateTeamDismissReason_value = map[string]int32{
		"DUNGEON_CANDIDATE_TPDR_NORMAL":     0,
		"DUNGEON_CANDIDATE_TPDR_DIE":        1,
		"DUNGEON_CANDIDATE_TPDR_DISCONNECT": 2,
	}
)

func (x DungeonCandidateTeamDismissReason) Enum() *DungeonCandidateTeamDismissReason {
	p := new(DungeonCandidateTeamDismissReason)
	*p = x
	return p
}

func (x DungeonCandidateTeamDismissReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamDismissReason) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[5].Descriptor()
}

func (DungeonCandidateTeamDismissReason) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[5]
}

func (x DungeonCandidateTeamDismissReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamDismissReason.Descriptor instead.
func (DungeonCandidateTeamDismissReason) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{5}
}

type DungeonRestartReason int32

const (
	DungeonRestartReason_DUNGEON_RESTART_REASON_NONE          DungeonRestartReason = 0
	DungeonRestartReason_DUNGEON_RESTART_REASON_DAILY_RESTART DungeonRestartReason = 1
	DungeonRestartReason_DUNGEON_RESTART_REASON_DIE_RETRY     DungeonRestartReason = 2
)

// Enum value maps for DungeonRestartReason.
var (
	DungeonRestartReason_name = map[int32]string{
		0: "DUNGEON_RESTART_REASON_NONE",
		1: "DUNGEON_RESTART_REASON_DAILY_RESTART",
		2: "DUNGEON_RESTART_REASON_DIE_RETRY",
	}
	DungeonRestartReason_value = map[string]int32{
		"DUNGEON_RESTART_REASON_NONE":          0,
		"DUNGEON_RESTART_REASON_DAILY_RESTART": 1,
		"DUNGEON_RESTART_REASON_DIE_RETRY":     2,
	}
)

func (x DungeonRestartReason) Enum() *DungeonRestartReason {
	p := new(DungeonRestartReason)
	*p = x
	return p
}

func (x DungeonRestartReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonRestartReason) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[6].Descriptor()
}

func (DungeonRestartReason) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[6]
}

func (x DungeonRestartReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonRestartReason.Descriptor instead.
func (DungeonRestartReason) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{6}
}

type DungeonEntryInfoReq_CmdId int32

const (
	DungeonEntryInfoReq_NONE             DungeonEntryInfoReq_CmdId = 0
	DungeonEntryInfoReq_CMD_ID           DungeonEntryInfoReq_CmdId = 972
	DungeonEntryInfoReq_ENET_CHANNEL_ID  DungeonEntryInfoReq_CmdId = 0
	DungeonEntryInfoReq_ENET_IS_RELIABLE DungeonEntryInfoReq_CmdId = 1
	DungeonEntryInfoReq_IS_ALLOW_CLIENT  DungeonEntryInfoReq_CmdId = 1
)

// Enum value maps for DungeonEntryInfoReq_CmdId.
var (
	DungeonEntryInfoReq_CmdId_name = map[int32]string{
		0:   "NONE",
		972: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	DungeonEntryInfoReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           972,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x DungeonEntryInfoReq_CmdId) Enum() *DungeonEntryInfoReq_CmdId {
	p := new(DungeonEntryInfoReq_CmdId)
	*p = x
	return p
}

func (x DungeonEntryInfoReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonEntryInfoReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[7].Descriptor()
}

func (DungeonEntryInfoReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[7]
}

func (x DungeonEntryInfoReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonEntryInfoReq_CmdId.Descriptor instead.
func (DungeonEntryInfoReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{0, 0}
}

type DungeonEntryInfoRsp_CmdId int32

const (
	DungeonEntryInfoRsp_NONE             DungeonEntryInfoRsp_CmdId = 0
	DungeonEntryInfoRsp_CMD_ID           DungeonEntryInfoRsp_CmdId = 998
	DungeonEntryInfoRsp_ENET_CHANNEL_ID  DungeonEntryInfoRsp_CmdId = 0
	DungeonEntryInfoRsp_ENET_IS_RELIABLE DungeonEntryInfoRsp_CmdId = 1
)

// Enum value maps for DungeonEntryInfoRsp_CmdId.
var (
	DungeonEntryInfoRsp_CmdId_name = map[int32]string{
		0:   "NONE",
		998: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonEntryInfoRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           998,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonEntryInfoRsp_CmdId) Enum() *DungeonEntryInfoRsp_CmdId {
	p := new(DungeonEntryInfoRsp_CmdId)
	*p = x
	return p
}

func (x DungeonEntryInfoRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonEntryInfoRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[8].Descriptor()
}

func (DungeonEntryInfoRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[8]
}

func (x DungeonEntryInfoRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonEntryInfoRsp_CmdId.Descriptor instead.
func (DungeonEntryInfoRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{3, 0}
}

type PlayerEnterDungeonReq_CmdId int32

const (
	PlayerEnterDungeonReq_NONE             PlayerEnterDungeonReq_CmdId = 0
	PlayerEnterDungeonReq_CMD_ID           PlayerEnterDungeonReq_CmdId = 912
	PlayerEnterDungeonReq_ENET_CHANNEL_ID  PlayerEnterDungeonReq_CmdId = 0
	PlayerEnterDungeonReq_ENET_IS_RELIABLE PlayerEnterDungeonReq_CmdId = 1
	PlayerEnterDungeonReq_IS_ALLOW_CLIENT  PlayerEnterDungeonReq_CmdId = 1
)

// Enum value maps for PlayerEnterDungeonReq_CmdId.
var (
	PlayerEnterDungeonReq_CmdId_name = map[int32]string{
		0:   "NONE",
		912: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	PlayerEnterDungeonReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           912,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x PlayerEnterDungeonReq_CmdId) Enum() *PlayerEnterDungeonReq_CmdId {
	p := new(PlayerEnterDungeonReq_CmdId)
	*p = x
	return p
}

func (x PlayerEnterDungeonReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerEnterDungeonReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[9].Descriptor()
}

func (PlayerEnterDungeonReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[9]
}

func (x PlayerEnterDungeonReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerEnterDungeonReq_CmdId.Descriptor instead.
func (PlayerEnterDungeonReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{5, 0}
}

type PlayerEnterDungeonRsp_CmdId int32

const (
	PlayerEnterDungeonRsp_NONE             PlayerEnterDungeonRsp_CmdId = 0
	PlayerEnterDungeonRsp_CMD_ID           PlayerEnterDungeonRsp_CmdId = 935
	PlayerEnterDungeonRsp_ENET_CHANNEL_ID  PlayerEnterDungeonRsp_CmdId = 0
	PlayerEnterDungeonRsp_ENET_IS_RELIABLE PlayerEnterDungeonRsp_CmdId = 1
)

// Enum value maps for PlayerEnterDungeonRsp_CmdId.
var (
	PlayerEnterDungeonRsp_CmdId_name = map[int32]string{
		0:   "NONE",
		935: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	PlayerEnterDungeonRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           935,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x PlayerEnterDungeonRsp_CmdId) Enum() *PlayerEnterDungeonRsp_CmdId {
	p := new(PlayerEnterDungeonRsp_CmdId)
	*p = x
	return p
}

func (x PlayerEnterDungeonRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerEnterDungeonRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[10].Descriptor()
}

func (PlayerEnterDungeonRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[10]
}

func (x PlayerEnterDungeonRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerEnterDungeonRsp_CmdId.Descriptor instead.
func (PlayerEnterDungeonRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{6, 0}
}

type PlayerQuitDungeonReq_CmdId int32

const (
	PlayerQuitDungeonReq_NONE             PlayerQuitDungeonReq_CmdId = 0
	PlayerQuitDungeonReq_CMD_ID           PlayerQuitDungeonReq_CmdId = 907
	PlayerQuitDungeonReq_ENET_CHANNEL_ID  PlayerQuitDungeonReq_CmdId = 0
	PlayerQuitDungeonReq_ENET_IS_RELIABLE PlayerQuitDungeonReq_CmdId = 1
	PlayerQuitDungeonReq_IS_ALLOW_CLIENT  PlayerQuitDungeonReq_CmdId = 1
)

// Enum value maps for PlayerQuitDungeonReq_CmdId.
var (
	PlayerQuitDungeonReq_CmdId_name = map[int32]string{
		0:   "NONE",
		907: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	PlayerQuitDungeonReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           907,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x PlayerQuitDungeonReq_CmdId) Enum() *PlayerQuitDungeonReq_CmdId {
	p := new(PlayerQuitDungeonReq_CmdId)
	*p = x
	return p
}

func (x PlayerQuitDungeonReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerQuitDungeonReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[11].Descriptor()
}

func (PlayerQuitDungeonReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[11]
}

func (x PlayerQuitDungeonReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerQuitDungeonReq_CmdId.Descriptor instead.
func (PlayerQuitDungeonReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{7, 0}
}

type PlayerQuitDungeonRsp_CmdId int32

const (
	PlayerQuitDungeonRsp_NONE             PlayerQuitDungeonRsp_CmdId = 0
	PlayerQuitDungeonRsp_CMD_ID           PlayerQuitDungeonRsp_CmdId = 921
	PlayerQuitDungeonRsp_ENET_CHANNEL_ID  PlayerQuitDungeonRsp_CmdId = 0
	PlayerQuitDungeonRsp_ENET_IS_RELIABLE PlayerQuitDungeonRsp_CmdId = 1
)

// Enum value maps for PlayerQuitDungeonRsp_CmdId.
var (
	PlayerQuitDungeonRsp_CmdId_name = map[int32]string{
		0:   "NONE",
		921: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	PlayerQuitDungeonRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           921,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x PlayerQuitDungeonRsp_CmdId) Enum() *PlayerQuitDungeonRsp_CmdId {
	p := new(PlayerQuitDungeonRsp_CmdId)
	*p = x
	return p
}

func (x PlayerQuitDungeonRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerQuitDungeonRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[12].Descriptor()
}

func (PlayerQuitDungeonRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[12]
}

func (x PlayerQuitDungeonRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerQuitDungeonRsp_CmdId.Descriptor instead.
func (PlayerQuitDungeonRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{8, 0}
}

type DungeonWayPointNotify_CmdId int32

const (
	DungeonWayPointNotify_NONE             DungeonWayPointNotify_CmdId = 0
	DungeonWayPointNotify_CMD_ID           DungeonWayPointNotify_CmdId = 903
	DungeonWayPointNotify_ENET_CHANNEL_ID  DungeonWayPointNotify_CmdId = 0
	DungeonWayPointNotify_ENET_IS_RELIABLE DungeonWayPointNotify_CmdId = 1
)

// Enum value maps for DungeonWayPointNotify_CmdId.
var (
	DungeonWayPointNotify_CmdId_name = map[int32]string{
		0:   "NONE",
		903: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonWayPointNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           903,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonWayPointNotify_CmdId) Enum() *DungeonWayPointNotify_CmdId {
	p := new(DungeonWayPointNotify_CmdId)
	*p = x
	return p
}

func (x DungeonWayPointNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonWayPointNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[13].Descriptor()
}

func (DungeonWayPointNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[13]
}

func (x DungeonWayPointNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonWayPointNotify_CmdId.Descriptor instead.
func (DungeonWayPointNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{9, 0}
}

type DungeonWayPointActivateReq_CmdId int32

const (
	DungeonWayPointActivateReq_NONE             DungeonWayPointActivateReq_CmdId = 0
	DungeonWayPointActivateReq_CMD_ID           DungeonWayPointActivateReq_CmdId = 990
	DungeonWayPointActivateReq_ENET_CHANNEL_ID  DungeonWayPointActivateReq_CmdId = 0
	DungeonWayPointActivateReq_ENET_IS_RELIABLE DungeonWayPointActivateReq_CmdId = 1
	DungeonWayPointActivateReq_IS_ALLOW_CLIENT  DungeonWayPointActivateReq_CmdId = 1
)

// Enum value maps for DungeonWayPointActivateReq_CmdId.
var (
	DungeonWayPointActivateReq_CmdId_name = map[int32]string{
		0:   "NONE",
		990: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	DungeonWayPointActivateReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           990,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x DungeonWayPointActivateReq_CmdId) Enum() *DungeonWayPointActivateReq_CmdId {
	p := new(DungeonWayPointActivateReq_CmdId)
	*p = x
	return p
}

func (x DungeonWayPointActivateReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonWayPointActivateReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[14].Descriptor()
}

func (DungeonWayPointActivateReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[14]
}

func (x DungeonWayPointActivateReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonWayPointActivateReq_CmdId.Descriptor instead.
func (DungeonWayPointActivateReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{10, 0}
}

type DungeonWayPointActivateRsp_CmdId int32

const (
	DungeonWayPointActivateRsp_NONE             DungeonWayPointActivateRsp_CmdId = 0
	DungeonWayPointActivateRsp_CMD_ID           DungeonWayPointActivateRsp_CmdId = 973
	DungeonWayPointActivateRsp_ENET_CHANNEL_ID  DungeonWayPointActivateRsp_CmdId = 0
	DungeonWayPointActivateRsp_ENET_IS_RELIABLE DungeonWayPointActivateRsp_CmdId = 1
)

// Enum value maps for DungeonWayPointActivateRsp_CmdId.
var (
	DungeonWayPointActivateRsp_CmdId_name = map[int32]string{
		0:   "NONE",
		973: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonWayPointActivateRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           973,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonWayPointActivateRsp_CmdId) Enum() *DungeonWayPointActivateRsp_CmdId {
	p := new(DungeonWayPointActivateRsp_CmdId)
	*p = x
	return p
}

func (x DungeonWayPointActivateRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonWayPointActivateRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[15].Descriptor()
}

func (DungeonWayPointActivateRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[15]
}

func (x DungeonWayPointActivateRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonWayPointActivateRsp_CmdId.Descriptor instead.
func (DungeonWayPointActivateRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{11, 0}
}

type DungeonSettleNotify_CmdId int32

const (
	DungeonSettleNotify_NONE             DungeonSettleNotify_CmdId = 0
	DungeonSettleNotify_CMD_ID           DungeonSettleNotify_CmdId = 999
	DungeonSettleNotify_ENET_CHANNEL_ID  DungeonSettleNotify_CmdId = 0
	DungeonSettleNotify_ENET_IS_RELIABLE DungeonSettleNotify_CmdId = 1
)

// Enum value maps for DungeonSettleNotify_CmdId.
var (
	DungeonSettleNotify_CmdId_name = map[int32]string{
		0:   "NONE",
		999: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonSettleNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           999,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonSettleNotify_CmdId) Enum() *DungeonSettleNotify_CmdId {
	p := new(DungeonSettleNotify_CmdId)
	*p = x
	return p
}

func (x DungeonSettleNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonSettleNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[16].Descriptor()
}

func (DungeonSettleNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[16]
}

func (x DungeonSettleNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonSettleNotify_CmdId.Descriptor instead.
func (DungeonSettleNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{20, 0}
}

type DungeonPlayerDieNotify_CmdId int32

const (
	DungeonPlayerDieNotify_NONE             DungeonPlayerDieNotify_CmdId = 0
	DungeonPlayerDieNotify_CMD_ID           DungeonPlayerDieNotify_CmdId = 931
	DungeonPlayerDieNotify_ENET_CHANNEL_ID  DungeonPlayerDieNotify_CmdId = 0
	DungeonPlayerDieNotify_ENET_IS_RELIABLE DungeonPlayerDieNotify_CmdId = 1
)

// Enum value maps for DungeonPlayerDieNotify_CmdId.
var (
	DungeonPlayerDieNotify_CmdId_name = map[int32]string{
		0:   "NONE",
		931: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonPlayerDieNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           931,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonPlayerDieNotify_CmdId) Enum() *DungeonPlayerDieNotify_CmdId {
	p := new(DungeonPlayerDieNotify_CmdId)
	*p = x
	return p
}

func (x DungeonPlayerDieNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonPlayerDieNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[17].Descriptor()
}

func (DungeonPlayerDieNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[17]
}

func (x DungeonPlayerDieNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonPlayerDieNotify_CmdId.Descriptor instead.
func (DungeonPlayerDieNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{21, 0}
}

type DungeonDieOptionReq_CmdId int32

const (
	DungeonDieOptionReq_NONE             DungeonDieOptionReq_CmdId = 0
	DungeonDieOptionReq_CMD_ID           DungeonDieOptionReq_CmdId = 975
	DungeonDieOptionReq_ENET_CHANNEL_ID  DungeonDieOptionReq_CmdId = 0
	DungeonDieOptionReq_ENET_IS_RELIABLE DungeonDieOptionReq_CmdId = 1
	DungeonDieOptionReq_IS_ALLOW_CLIENT  DungeonDieOptionReq_CmdId = 1
)

// Enum value maps for DungeonDieOptionReq_CmdId.
var (
	DungeonDieOptionReq_CmdId_name = map[int32]string{
		0:   "NONE",
		975: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	DungeonDieOptionReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           975,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x DungeonDieOptionReq_CmdId) Enum() *DungeonDieOptionReq_CmdId {
	p := new(DungeonDieOptionReq_CmdId)
	*p = x
	return p
}

func (x DungeonDieOptionReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonDieOptionReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[18].Descriptor()
}

func (DungeonDieOptionReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[18]
}

func (x DungeonDieOptionReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonDieOptionReq_CmdId.Descriptor instead.
func (DungeonDieOptionReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{22, 0}
}

type DungeonDieOptionRsp_CmdId int32

const (
	DungeonDieOptionRsp_NONE             DungeonDieOptionRsp_CmdId = 0
	DungeonDieOptionRsp_CMD_ID           DungeonDieOptionRsp_CmdId = 948
	DungeonDieOptionRsp_ENET_CHANNEL_ID  DungeonDieOptionRsp_CmdId = 0
	DungeonDieOptionRsp_ENET_IS_RELIABLE DungeonDieOptionRsp_CmdId = 1
)

// Enum value maps for DungeonDieOptionRsp_CmdId.
var (
	DungeonDieOptionRsp_CmdId_name = map[int32]string{
		0:   "NONE",
		948: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonDieOptionRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           948,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonDieOptionRsp_CmdId) Enum() *DungeonDieOptionRsp_CmdId {
	p := new(DungeonDieOptionRsp_CmdId)
	*p = x
	return p
}

func (x DungeonDieOptionRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonDieOptionRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[19].Descriptor()
}

func (DungeonDieOptionRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[19]
}

func (x DungeonDieOptionRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonDieOptionRsp_CmdId.Descriptor instead.
func (DungeonDieOptionRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{23, 0}
}

type DungeonShowReminderNotify_CmdId int32

const (
	DungeonShowReminderNotify_NONE             DungeonShowReminderNotify_CmdId = 0
	DungeonShowReminderNotify_CMD_ID           DungeonShowReminderNotify_CmdId = 997
	DungeonShowReminderNotify_ENET_CHANNEL_ID  DungeonShowReminderNotify_CmdId = 0
	DungeonShowReminderNotify_ENET_IS_RELIABLE DungeonShowReminderNotify_CmdId = 1
)

// Enum value maps for DungeonShowReminderNotify_CmdId.
var (
	DungeonShowReminderNotify_CmdId_name = map[int32]string{
		0:   "NONE",
		997: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonShowReminderNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           997,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonShowReminderNotify_CmdId) Enum() *DungeonShowReminderNotify_CmdId {
	p := new(DungeonShowReminderNotify_CmdId)
	*p = x
	return p
}

func (x DungeonShowReminderNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonShowReminderNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[20].Descriptor()
}

func (DungeonShowReminderNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[20]
}

func (x DungeonShowReminderNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonShowReminderNotify_CmdId.Descriptor instead.
func (DungeonShowReminderNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{24, 0}
}

type DungeonPlayerDieReq_CmdId int32

const (
	DungeonPlayerDieReq_NONE             DungeonPlayerDieReq_CmdId = 0
	DungeonPlayerDieReq_CMD_ID           DungeonPlayerDieReq_CmdId = 981
	DungeonPlayerDieReq_ENET_CHANNEL_ID  DungeonPlayerDieReq_CmdId = 0
	DungeonPlayerDieReq_ENET_IS_RELIABLE DungeonPlayerDieReq_CmdId = 1
	DungeonPlayerDieReq_IS_ALLOW_CLIENT  DungeonPlayerDieReq_CmdId = 1
)

// Enum value maps for DungeonPlayerDieReq_CmdId.
var (
	DungeonPlayerDieReq_CmdId_name = map[int32]string{
		0:   "NONE",
		981: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	DungeonPlayerDieReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           981,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x DungeonPlayerDieReq_CmdId) Enum() *DungeonPlayerDieReq_CmdId {
	p := new(DungeonPlayerDieReq_CmdId)
	*p = x
	return p
}

func (x DungeonPlayerDieReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonPlayerDieReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[21].Descriptor()
}

func (DungeonPlayerDieReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[21]
}

func (x DungeonPlayerDieReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonPlayerDieReq_CmdId.Descriptor instead.
func (DungeonPlayerDieReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{25, 0}
}

type DungeonPlayerDieRsp_CmdId int32

const (
	DungeonPlayerDieRsp_NONE             DungeonPlayerDieRsp_CmdId = 0
	DungeonPlayerDieRsp_CMD_ID           DungeonPlayerDieRsp_CmdId = 905
	DungeonPlayerDieRsp_ENET_CHANNEL_ID  DungeonPlayerDieRsp_CmdId = 0
	DungeonPlayerDieRsp_ENET_IS_RELIABLE DungeonPlayerDieRsp_CmdId = 1
)

// Enum value maps for DungeonPlayerDieRsp_CmdId.
var (
	DungeonPlayerDieRsp_CmdId_name = map[int32]string{
		0:   "NONE",
		905: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonPlayerDieRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           905,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonPlayerDieRsp_CmdId) Enum() *DungeonPlayerDieRsp_CmdId {
	p := new(DungeonPlayerDieRsp_CmdId)
	*p = x
	return p
}

func (x DungeonPlayerDieRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonPlayerDieRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[22].Descriptor()
}

func (DungeonPlayerDieRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[22]
}

func (x DungeonPlayerDieRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonPlayerDieRsp_CmdId.Descriptor instead.
func (DungeonPlayerDieRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{26, 0}
}

type DungeonDataNotify_CmdId int32

const (
	DungeonDataNotify_NONE             DungeonDataNotify_CmdId = 0
	DungeonDataNotify_CMD_ID           DungeonDataNotify_CmdId = 982
	DungeonDataNotify_ENET_CHANNEL_ID  DungeonDataNotify_CmdId = 0
	DungeonDataNotify_ENET_IS_RELIABLE DungeonDataNotify_CmdId = 1
)

// Enum value maps for DungeonDataNotify_CmdId.
var (
	DungeonDataNotify_CmdId_name = map[int32]string{
		0:   "NONE",
		982: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonDataNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           982,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonDataNotify_CmdId) Enum() *DungeonDataNotify_CmdId {
	p := new(DungeonDataNotify_CmdId)
	*p = x
	return p
}

func (x DungeonDataNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonDataNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[23].Descriptor()
}

func (DungeonDataNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[23]
}

func (x DungeonDataNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonDataNotify_CmdId.Descriptor instead.
func (DungeonDataNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{27, 0}
}

type DungeonChallengeBeginNotify_CmdId int32

const (
	DungeonChallengeBeginNotify_NONE             DungeonChallengeBeginNotify_CmdId = 0
	DungeonChallengeBeginNotify_CMD_ID           DungeonChallengeBeginNotify_CmdId = 947
	DungeonChallengeBeginNotify_ENET_CHANNEL_ID  DungeonChallengeBeginNotify_CmdId = 0
	DungeonChallengeBeginNotify_ENET_IS_RELIABLE DungeonChallengeBeginNotify_CmdId = 1
)

// Enum value maps for DungeonChallengeBeginNotify_CmdId.
var (
	DungeonChallengeBeginNotify_CmdId_name = map[int32]string{
		0:   "NONE",
		947: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonChallengeBeginNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           947,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonChallengeBeginNotify_CmdId) Enum() *DungeonChallengeBeginNotify_CmdId {
	p := new(DungeonChallengeBeginNotify_CmdId)
	*p = x
	return p
}

func (x DungeonChallengeBeginNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonChallengeBeginNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[24].Descriptor()
}

func (DungeonChallengeBeginNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[24]
}

func (x DungeonChallengeBeginNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonChallengeBeginNotify_CmdId.Descriptor instead.
func (DungeonChallengeBeginNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{28, 0}
}

type DungeonChallengeFinishNotify_CmdId int32

const (
	DungeonChallengeFinishNotify_NONE             DungeonChallengeFinishNotify_CmdId = 0
	DungeonChallengeFinishNotify_CMD_ID           DungeonChallengeFinishNotify_CmdId = 939
	DungeonChallengeFinishNotify_ENET_CHANNEL_ID  DungeonChallengeFinishNotify_CmdId = 0
	DungeonChallengeFinishNotify_ENET_IS_RELIABLE DungeonChallengeFinishNotify_CmdId = 1
)

// Enum value maps for DungeonChallengeFinishNotify_CmdId.
var (
	DungeonChallengeFinishNotify_CmdId_name = map[int32]string{
		0:   "NONE",
		939: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonChallengeFinishNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           939,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonChallengeFinishNotify_CmdId) Enum() *DungeonChallengeFinishNotify_CmdId {
	p := new(DungeonChallengeFinishNotify_CmdId)
	*p = x
	return p
}

func (x DungeonChallengeFinishNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonChallengeFinishNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[25].Descriptor()
}

func (DungeonChallengeFinishNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[25]
}

func (x DungeonChallengeFinishNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonChallengeFinishNotify_CmdId.Descriptor instead.
func (DungeonChallengeFinishNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{31, 0}
}

type ChallengeDataNotify_CmdId int32

const (
	ChallengeDataNotify_NONE             ChallengeDataNotify_CmdId = 0
	ChallengeDataNotify_CMD_ID           ChallengeDataNotify_CmdId = 953
	ChallengeDataNotify_ENET_CHANNEL_ID  ChallengeDataNotify_CmdId = 0
	ChallengeDataNotify_ENET_IS_RELIABLE ChallengeDataNotify_CmdId = 1
)

// Enum value maps for ChallengeDataNotify_CmdId.
var (
	ChallengeDataNotify_CmdId_name = map[int32]string{
		0:   "NONE",
		953: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	ChallengeDataNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           953,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x ChallengeDataNotify_CmdId) Enum() *ChallengeDataNotify_CmdId {
	p := new(ChallengeDataNotify_CmdId)
	*p = x
	return p
}

func (x ChallengeDataNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeDataNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[26].Descriptor()
}

func (ChallengeDataNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[26]
}

func (x ChallengeDataNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChallengeDataNotify_CmdId.Descriptor instead.
func (ChallengeDataNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{32, 0}
}

type DungeonFollowNotify_CmdId int32

const (
	DungeonFollowNotify_NONE             DungeonFollowNotify_CmdId = 0
	DungeonFollowNotify_CMD_ID           DungeonFollowNotify_CmdId = 922
	DungeonFollowNotify_ENET_CHANNEL_ID  DungeonFollowNotify_CmdId = 0
	DungeonFollowNotify_ENET_IS_RELIABLE DungeonFollowNotify_CmdId = 1
)

// Enum value maps for DungeonFollowNotify_CmdId.
var (
	DungeonFollowNotify_CmdId_name = map[int32]string{
		0:   "NONE",
		922: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonFollowNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           922,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonFollowNotify_CmdId) Enum() *DungeonFollowNotify_CmdId {
	p := new(DungeonFollowNotify_CmdId)
	*p = x
	return p
}

func (x DungeonFollowNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonFollowNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[27].Descriptor()
}

func (DungeonFollowNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[27]
}

func (x DungeonFollowNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonFollowNotify_CmdId.Descriptor instead.
func (DungeonFollowNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{33, 0}
}

type DungeonGetStatueDropReq_CmdId int32

const (
	DungeonGetStatueDropReq_NONE             DungeonGetStatueDropReq_CmdId = 0
	DungeonGetStatueDropReq_CMD_ID           DungeonGetStatueDropReq_CmdId = 965
	DungeonGetStatueDropReq_ENET_CHANNEL_ID  DungeonGetStatueDropReq_CmdId = 0
	DungeonGetStatueDropReq_ENET_IS_RELIABLE DungeonGetStatueDropReq_CmdId = 1
	DungeonGetStatueDropReq_IS_ALLOW_CLIENT  DungeonGetStatueDropReq_CmdId = 1
)

// Enum value maps for DungeonGetStatueDropReq_CmdId.
var (
	DungeonGetStatueDropReq_CmdId_name = map[int32]string{
		0:   "NONE",
		965: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	DungeonGetStatueDropReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           965,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x DungeonGetStatueDropReq_CmdId) Enum() *DungeonGetStatueDropReq_CmdId {
	p := new(DungeonGetStatueDropReq_CmdId)
	*p = x
	return p
}

func (x DungeonGetStatueDropReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonGetStatueDropReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[28].Descriptor()
}

func (DungeonGetStatueDropReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[28]
}

func (x DungeonGetStatueDropReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonGetStatueDropReq_CmdId.Descriptor instead.
func (DungeonGetStatueDropReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{34, 0}
}

type DungeonGetStatueDropRsp_CmdId int32

const (
	DungeonGetStatueDropRsp_NONE             DungeonGetStatueDropRsp_CmdId = 0
	DungeonGetStatueDropRsp_CMD_ID           DungeonGetStatueDropRsp_CmdId = 904
	DungeonGetStatueDropRsp_ENET_CHANNEL_ID  DungeonGetStatueDropRsp_CmdId = 0
	DungeonGetStatueDropRsp_ENET_IS_RELIABLE DungeonGetStatueDropRsp_CmdId = 1
)

// Enum value maps for DungeonGetStatueDropRsp_CmdId.
var (
	DungeonGetStatueDropRsp_CmdId_name = map[int32]string{
		0:   "NONE",
		904: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonGetStatueDropRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           904,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonGetStatueDropRsp_CmdId) Enum() *DungeonGetStatueDropRsp_CmdId {
	p := new(DungeonGetStatueDropRsp_CmdId)
	*p = x
	return p
}

func (x DungeonGetStatueDropRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonGetStatueDropRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[29].Descriptor()
}

func (DungeonGetStatueDropRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[29]
}

func (x DungeonGetStatueDropRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonGetStatueDropRsp_CmdId.Descriptor instead.
func (DungeonGetStatueDropRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{35, 0}
}

type ChallengeRecordNotify_CmdId int32

const (
	ChallengeRecordNotify_NONE             ChallengeRecordNotify_CmdId = 0
	ChallengeRecordNotify_CMD_ID           ChallengeRecordNotify_CmdId = 993
	ChallengeRecordNotify_ENET_CHANNEL_ID  ChallengeRecordNotify_CmdId = 0
	ChallengeRecordNotify_ENET_IS_RELIABLE ChallengeRecordNotify_CmdId = 1
)

// Enum value maps for ChallengeRecordNotify_CmdId.
var (
	ChallengeRecordNotify_CmdId_name = map[int32]string{
		0:   "NONE",
		993: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	ChallengeRecordNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           993,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x ChallengeRecordNotify_CmdId) Enum() *ChallengeRecordNotify_CmdId {
	p := new(ChallengeRecordNotify_CmdId)
	*p = x
	return p
}

func (x ChallengeRecordNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeRecordNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[30].Descriptor()
}

func (ChallengeRecordNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[30]
}

func (x ChallengeRecordNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChallengeRecordNotify_CmdId.Descriptor instead.
func (ChallengeRecordNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{37, 0}
}

type DungeonCandidateTeamInfoNotify_CmdId int32

const (
	DungeonCandidateTeamInfoNotify_NONE             DungeonCandidateTeamInfoNotify_CmdId = 0
	DungeonCandidateTeamInfoNotify_CMD_ID           DungeonCandidateTeamInfoNotify_CmdId = 927
	DungeonCandidateTeamInfoNotify_ENET_CHANNEL_ID  DungeonCandidateTeamInfoNotify_CmdId = 0
	DungeonCandidateTeamInfoNotify_ENET_IS_RELIABLE DungeonCandidateTeamInfoNotify_CmdId = 1
)

// Enum value maps for DungeonCandidateTeamInfoNotify_CmdId.
var (
	DungeonCandidateTeamInfoNotify_CmdId_name = map[int32]string{
		0:   "NONE",
		927: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonCandidateTeamInfoNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           927,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonCandidateTeamInfoNotify_CmdId) Enum() *DungeonCandidateTeamInfoNotify_CmdId {
	p := new(DungeonCandidateTeamInfoNotify_CmdId)
	*p = x
	return p
}

func (x DungeonCandidateTeamInfoNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamInfoNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[31].Descriptor()
}

func (DungeonCandidateTeamInfoNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[31]
}

func (x DungeonCandidateTeamInfoNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamInfoNotify_CmdId.Descriptor instead.
func (DungeonCandidateTeamInfoNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{39, 0}
}

type DungeonCandidateTeamInviteNotify_CmdId int32

const (
	DungeonCandidateTeamInviteNotify_NONE             DungeonCandidateTeamInviteNotify_CmdId = 0
	DungeonCandidateTeamInviteNotify_CMD_ID           DungeonCandidateTeamInviteNotify_CmdId = 994
	DungeonCandidateTeamInviteNotify_ENET_CHANNEL_ID  DungeonCandidateTeamInviteNotify_CmdId = 0
	DungeonCandidateTeamInviteNotify_ENET_IS_RELIABLE DungeonCandidateTeamInviteNotify_CmdId = 1
)

// Enum value maps for DungeonCandidateTeamInviteNotify_CmdId.
var (
	DungeonCandidateTeamInviteNotify_CmdId_name = map[int32]string{
		0:   "NONE",
		994: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonCandidateTeamInviteNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           994,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonCandidateTeamInviteNotify_CmdId) Enum() *DungeonCandidateTeamInviteNotify_CmdId {
	p := new(DungeonCandidateTeamInviteNotify_CmdId)
	*p = x
	return p
}

func (x DungeonCandidateTeamInviteNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamInviteNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[32].Descriptor()
}

func (DungeonCandidateTeamInviteNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[32]
}

func (x DungeonCandidateTeamInviteNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamInviteNotify_CmdId.Descriptor instead.
func (DungeonCandidateTeamInviteNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{40, 0}
}

type DungeonCandidateTeamRefuseNotify_CmdId int32

const (
	DungeonCandidateTeamRefuseNotify_NONE             DungeonCandidateTeamRefuseNotify_CmdId = 0
	DungeonCandidateTeamRefuseNotify_CMD_ID           DungeonCandidateTeamRefuseNotify_CmdId = 988
	DungeonCandidateTeamRefuseNotify_ENET_CHANNEL_ID  DungeonCandidateTeamRefuseNotify_CmdId = 0
	DungeonCandidateTeamRefuseNotify_ENET_IS_RELIABLE DungeonCandidateTeamRefuseNotify_CmdId = 1
)

// Enum value maps for DungeonCandidateTeamRefuseNotify_CmdId.
var (
	DungeonCandidateTeamRefuseNotify_CmdId_name = map[int32]string{
		0:   "NONE",
		988: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonCandidateTeamRefuseNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           988,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonCandidateTeamRefuseNotify_CmdId) Enum() *DungeonCandidateTeamRefuseNotify_CmdId {
	p := new(DungeonCandidateTeamRefuseNotify_CmdId)
	*p = x
	return p
}

func (x DungeonCandidateTeamRefuseNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamRefuseNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[33].Descriptor()
}

func (DungeonCandidateTeamRefuseNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[33]
}

func (x DungeonCandidateTeamRefuseNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamRefuseNotify_CmdId.Descriptor instead.
func (DungeonCandidateTeamRefuseNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{41, 0}
}

type DungeonCandidateTeamPlayerLeaveNotify_CmdId int32

const (
	DungeonCandidateTeamPlayerLeaveNotify_NONE             DungeonCandidateTeamPlayerLeaveNotify_CmdId = 0
	DungeonCandidateTeamPlayerLeaveNotify_CMD_ID           DungeonCandidateTeamPlayerLeaveNotify_CmdId = 926
	DungeonCandidateTeamPlayerLeaveNotify_ENET_CHANNEL_ID  DungeonCandidateTeamPlayerLeaveNotify_CmdId = 0
	DungeonCandidateTeamPlayerLeaveNotify_ENET_IS_RELIABLE DungeonCandidateTeamPlayerLeaveNotify_CmdId = 1
)

// Enum value maps for DungeonCandidateTeamPlayerLeaveNotify_CmdId.
var (
	DungeonCandidateTeamPlayerLeaveNotify_CmdId_name = map[int32]string{
		0:   "NONE",
		926: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonCandidateTeamPlayerLeaveNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           926,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonCandidateTeamPlayerLeaveNotify_CmdId) Enum() *DungeonCandidateTeamPlayerLeaveNotify_CmdId {
	p := new(DungeonCandidateTeamPlayerLeaveNotify_CmdId)
	*p = x
	return p
}

func (x DungeonCandidateTeamPlayerLeaveNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamPlayerLeaveNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[34].Descriptor()
}

func (DungeonCandidateTeamPlayerLeaveNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[34]
}

func (x DungeonCandidateTeamPlayerLeaveNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamPlayerLeaveNotify_CmdId.Descriptor instead.
func (DungeonCandidateTeamPlayerLeaveNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{42, 0}
}

type DungeonCandidateTeamDismissNotify_CmdId int32

const (
	DungeonCandidateTeamDismissNotify_NONE             DungeonCandidateTeamDismissNotify_CmdId = 0
	DungeonCandidateTeamDismissNotify_CMD_ID           DungeonCandidateTeamDismissNotify_CmdId = 963
	DungeonCandidateTeamDismissNotify_ENET_CHANNEL_ID  DungeonCandidateTeamDismissNotify_CmdId = 0
	DungeonCandidateTeamDismissNotify_ENET_IS_RELIABLE DungeonCandidateTeamDismissNotify_CmdId = 1
)

// Enum value maps for DungeonCandidateTeamDismissNotify_CmdId.
var (
	DungeonCandidateTeamDismissNotify_CmdId_name = map[int32]string{
		0:   "NONE",
		963: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonCandidateTeamDismissNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           963,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonCandidateTeamDismissNotify_CmdId) Enum() *DungeonCandidateTeamDismissNotify_CmdId {
	p := new(DungeonCandidateTeamDismissNotify_CmdId)
	*p = x
	return p
}

func (x DungeonCandidateTeamDismissNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamDismissNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[35].Descriptor()
}

func (DungeonCandidateTeamDismissNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[35]
}

func (x DungeonCandidateTeamDismissNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamDismissNotify_CmdId.Descriptor instead.
func (DungeonCandidateTeamDismissNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{43, 0}
}

type DungeonCandidateTeamCreateReq_CmdId int32

const (
	DungeonCandidateTeamCreateReq_NONE             DungeonCandidateTeamCreateReq_CmdId = 0
	DungeonCandidateTeamCreateReq_CMD_ID           DungeonCandidateTeamCreateReq_CmdId = 995
	DungeonCandidateTeamCreateReq_ENET_CHANNEL_ID  DungeonCandidateTeamCreateReq_CmdId = 0
	DungeonCandidateTeamCreateReq_ENET_IS_RELIABLE DungeonCandidateTeamCreateReq_CmdId = 1
	DungeonCandidateTeamCreateReq_IS_ALLOW_CLIENT  DungeonCandidateTeamCreateReq_CmdId = 1
)

// Enum value maps for DungeonCandidateTeamCreateReq_CmdId.
var (
	DungeonCandidateTeamCreateReq_CmdId_name = map[int32]string{
		0:   "NONE",
		995: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	DungeonCandidateTeamCreateReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           995,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x DungeonCandidateTeamCreateReq_CmdId) Enum() *DungeonCandidateTeamCreateReq_CmdId {
	p := new(DungeonCandidateTeamCreateReq_CmdId)
	*p = x
	return p
}

func (x DungeonCandidateTeamCreateReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamCreateReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[36].Descriptor()
}

func (DungeonCandidateTeamCreateReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[36]
}

func (x DungeonCandidateTeamCreateReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamCreateReq_CmdId.Descriptor instead.
func (DungeonCandidateTeamCreateReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{44, 0}
}

type DungeonCandidateTeamCreateRsp_CmdId int32

const (
	DungeonCandidateTeamCreateRsp_NONE             DungeonCandidateTeamCreateRsp_CmdId = 0
	DungeonCandidateTeamCreateRsp_CMD_ID           DungeonCandidateTeamCreateRsp_CmdId = 906
	DungeonCandidateTeamCreateRsp_ENET_CHANNEL_ID  DungeonCandidateTeamCreateRsp_CmdId = 0
	DungeonCandidateTeamCreateRsp_ENET_IS_RELIABLE DungeonCandidateTeamCreateRsp_CmdId = 1
)

// Enum value maps for DungeonCandidateTeamCreateRsp_CmdId.
var (
	DungeonCandidateTeamCreateRsp_CmdId_name = map[int32]string{
		0:   "NONE",
		906: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonCandidateTeamCreateRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           906,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonCandidateTeamCreateRsp_CmdId) Enum() *DungeonCandidateTeamCreateRsp_CmdId {
	p := new(DungeonCandidateTeamCreateRsp_CmdId)
	*p = x
	return p
}

func (x DungeonCandidateTeamCreateRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamCreateRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[37].Descriptor()
}

func (DungeonCandidateTeamCreateRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[37]
}

func (x DungeonCandidateTeamCreateRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamCreateRsp_CmdId.Descriptor instead.
func (DungeonCandidateTeamCreateRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{45, 0}
}

type DungeonCandidateTeamInviteReq_CmdId int32

const (
	DungeonCandidateTeamInviteReq_NONE             DungeonCandidateTeamInviteReq_CmdId = 0
	DungeonCandidateTeamInviteReq_CMD_ID           DungeonCandidateTeamInviteReq_CmdId = 934
	DungeonCandidateTeamInviteReq_ENET_CHANNEL_ID  DungeonCandidateTeamInviteReq_CmdId = 0
	DungeonCandidateTeamInviteReq_ENET_IS_RELIABLE DungeonCandidateTeamInviteReq_CmdId = 1
	DungeonCandidateTeamInviteReq_IS_ALLOW_CLIENT  DungeonCandidateTeamInviteReq_CmdId = 1
)

// Enum value maps for DungeonCandidateTeamInviteReq_CmdId.
var (
	DungeonCandidateTeamInviteReq_CmdId_name = map[int32]string{
		0:   "NONE",
		934: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	DungeonCandidateTeamInviteReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           934,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x DungeonCandidateTeamInviteReq_CmdId) Enum() *DungeonCandidateTeamInviteReq_CmdId {
	p := new(DungeonCandidateTeamInviteReq_CmdId)
	*p = x
	return p
}

func (x DungeonCandidateTeamInviteReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamInviteReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[38].Descriptor()
}

func (DungeonCandidateTeamInviteReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[38]
}

func (x DungeonCandidateTeamInviteReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamInviteReq_CmdId.Descriptor instead.
func (DungeonCandidateTeamInviteReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{46, 0}
}

type DungeonCandidateTeamInviteRsp_CmdId int32

const (
	DungeonCandidateTeamInviteRsp_NONE             DungeonCandidateTeamInviteRsp_CmdId = 0
	DungeonCandidateTeamInviteRsp_CMD_ID           DungeonCandidateTeamInviteRsp_CmdId = 950
	DungeonCandidateTeamInviteRsp_ENET_CHANNEL_ID  DungeonCandidateTeamInviteRsp_CmdId = 0
	DungeonCandidateTeamInviteRsp_ENET_IS_RELIABLE DungeonCandidateTeamInviteRsp_CmdId = 1
)

// Enum value maps for DungeonCandidateTeamInviteRsp_CmdId.
var (
	DungeonCandidateTeamInviteRsp_CmdId_name = map[int32]string{
		0:   "NONE",
		950: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonCandidateTeamInviteRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           950,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonCandidateTeamInviteRsp_CmdId) Enum() *DungeonCandidateTeamInviteRsp_CmdId {
	p := new(DungeonCandidateTeamInviteRsp_CmdId)
	*p = x
	return p
}

func (x DungeonCandidateTeamInviteRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamInviteRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[39].Descriptor()
}

func (DungeonCandidateTeamInviteRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[39]
}

func (x DungeonCandidateTeamInviteRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamInviteRsp_CmdId.Descriptor instead.
func (DungeonCandidateTeamInviteRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{47, 0}
}

type DungeonCandidateTeamKickReq_CmdId int32

const (
	DungeonCandidateTeamKickReq_NONE             DungeonCandidateTeamKickReq_CmdId = 0
	DungeonCandidateTeamKickReq_CMD_ID           DungeonCandidateTeamKickReq_CmdId = 943
	DungeonCandidateTeamKickReq_ENET_CHANNEL_ID  DungeonCandidateTeamKickReq_CmdId = 0
	DungeonCandidateTeamKickReq_ENET_IS_RELIABLE DungeonCandidateTeamKickReq_CmdId = 1
	DungeonCandidateTeamKickReq_IS_ALLOW_CLIENT  DungeonCandidateTeamKickReq_CmdId = 1
)

// Enum value maps for DungeonCandidateTeamKickReq_CmdId.
var (
	DungeonCandidateTeamKickReq_CmdId_name = map[int32]string{
		0:   "NONE",
		943: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	DungeonCandidateTeamKickReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           943,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x DungeonCandidateTeamKickReq_CmdId) Enum() *DungeonCandidateTeamKickReq_CmdId {
	p := new(DungeonCandidateTeamKickReq_CmdId)
	*p = x
	return p
}

func (x DungeonCandidateTeamKickReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamKickReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[40].Descriptor()
}

func (DungeonCandidateTeamKickReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[40]
}

func (x DungeonCandidateTeamKickReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamKickReq_CmdId.Descriptor instead.
func (DungeonCandidateTeamKickReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{48, 0}
}

type DungeonCandidateTeamKickRsp_CmdId int32

const (
	DungeonCandidateTeamKickRsp_NONE             DungeonCandidateTeamKickRsp_CmdId = 0
	DungeonCandidateTeamKickRsp_CMD_ID           DungeonCandidateTeamKickRsp_CmdId = 974
	DungeonCandidateTeamKickRsp_ENET_CHANNEL_ID  DungeonCandidateTeamKickRsp_CmdId = 0
	DungeonCandidateTeamKickRsp_ENET_IS_RELIABLE DungeonCandidateTeamKickRsp_CmdId = 1
)

// Enum value maps for DungeonCandidateTeamKickRsp_CmdId.
var (
	DungeonCandidateTeamKickRsp_CmdId_name = map[int32]string{
		0:   "NONE",
		974: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonCandidateTeamKickRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           974,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonCandidateTeamKickRsp_CmdId) Enum() *DungeonCandidateTeamKickRsp_CmdId {
	p := new(DungeonCandidateTeamKickRsp_CmdId)
	*p = x
	return p
}

func (x DungeonCandidateTeamKickRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamKickRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[41].Descriptor()
}

func (DungeonCandidateTeamKickRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[41]
}

func (x DungeonCandidateTeamKickRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamKickRsp_CmdId.Descriptor instead.
func (DungeonCandidateTeamKickRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{49, 0}
}

type DungeonCandidateTeamLeaveReq_CmdId int32

const (
	DungeonCandidateTeamLeaveReq_NONE             DungeonCandidateTeamLeaveReq_CmdId = 0
	DungeonCandidateTeamLeaveReq_CMD_ID           DungeonCandidateTeamLeaveReq_CmdId = 976
	DungeonCandidateTeamLeaveReq_ENET_CHANNEL_ID  DungeonCandidateTeamLeaveReq_CmdId = 0
	DungeonCandidateTeamLeaveReq_ENET_IS_RELIABLE DungeonCandidateTeamLeaveReq_CmdId = 1
	DungeonCandidateTeamLeaveReq_IS_ALLOW_CLIENT  DungeonCandidateTeamLeaveReq_CmdId = 1
)

// Enum value maps for DungeonCandidateTeamLeaveReq_CmdId.
var (
	DungeonCandidateTeamLeaveReq_CmdId_name = map[int32]string{
		0:   "NONE",
		976: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	DungeonCandidateTeamLeaveReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           976,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x DungeonCandidateTeamLeaveReq_CmdId) Enum() *DungeonCandidateTeamLeaveReq_CmdId {
	p := new(DungeonCandidateTeamLeaveReq_CmdId)
	*p = x
	return p
}

func (x DungeonCandidateTeamLeaveReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamLeaveReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[42].Descriptor()
}

func (DungeonCandidateTeamLeaveReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[42]
}

func (x DungeonCandidateTeamLeaveReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamLeaveReq_CmdId.Descriptor instead.
func (DungeonCandidateTeamLeaveReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{50, 0}
}

type DungeonCandidateTeamLeaveRsp_CmdId int32

const (
	DungeonCandidateTeamLeaveRsp_NONE             DungeonCandidateTeamLeaveRsp_CmdId = 0
	DungeonCandidateTeamLeaveRsp_CMD_ID           DungeonCandidateTeamLeaveRsp_CmdId = 946
	DungeonCandidateTeamLeaveRsp_ENET_CHANNEL_ID  DungeonCandidateTeamLeaveRsp_CmdId = 0
	DungeonCandidateTeamLeaveRsp_ENET_IS_RELIABLE DungeonCandidateTeamLeaveRsp_CmdId = 1
)

// Enum value maps for DungeonCandidateTeamLeaveRsp_CmdId.
var (
	DungeonCandidateTeamLeaveRsp_CmdId_name = map[int32]string{
		0:   "NONE",
		946: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonCandidateTeamLeaveRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           946,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonCandidateTeamLeaveRsp_CmdId) Enum() *DungeonCandidateTeamLeaveRsp_CmdId {
	p := new(DungeonCandidateTeamLeaveRsp_CmdId)
	*p = x
	return p
}

func (x DungeonCandidateTeamLeaveRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamLeaveRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[43].Descriptor()
}

func (DungeonCandidateTeamLeaveRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[43]
}

func (x DungeonCandidateTeamLeaveRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamLeaveRsp_CmdId.Descriptor instead.
func (DungeonCandidateTeamLeaveRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{51, 0}
}

type DungeonCandidateTeamReplyInviteReq_CmdId int32

const (
	DungeonCandidateTeamReplyInviteReq_NONE             DungeonCandidateTeamReplyInviteReq_CmdId = 0
	DungeonCandidateTeamReplyInviteReq_CMD_ID           DungeonCandidateTeamReplyInviteReq_CmdId = 941
	DungeonCandidateTeamReplyInviteReq_ENET_CHANNEL_ID  DungeonCandidateTeamReplyInviteReq_CmdId = 0
	DungeonCandidateTeamReplyInviteReq_ENET_IS_RELIABLE DungeonCandidateTeamReplyInviteReq_CmdId = 1
	DungeonCandidateTeamReplyInviteReq_IS_ALLOW_CLIENT  DungeonCandidateTeamReplyInviteReq_CmdId = 1
)

// Enum value maps for DungeonCandidateTeamReplyInviteReq_CmdId.
var (
	DungeonCandidateTeamReplyInviteReq_CmdId_name = map[int32]string{
		0:   "NONE",
		941: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	DungeonCandidateTeamReplyInviteReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           941,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x DungeonCandidateTeamReplyInviteReq_CmdId) Enum() *DungeonCandidateTeamReplyInviteReq_CmdId {
	p := new(DungeonCandidateTeamReplyInviteReq_CmdId)
	*p = x
	return p
}

func (x DungeonCandidateTeamReplyInviteReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamReplyInviteReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[44].Descriptor()
}

func (DungeonCandidateTeamReplyInviteReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[44]
}

func (x DungeonCandidateTeamReplyInviteReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamReplyInviteReq_CmdId.Descriptor instead.
func (DungeonCandidateTeamReplyInviteReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{52, 0}
}

type DungeonCandidateTeamReplyInviteRsp_CmdId int32

const (
	DungeonCandidateTeamReplyInviteRsp_NONE             DungeonCandidateTeamReplyInviteRsp_CmdId = 0
	DungeonCandidateTeamReplyInviteRsp_CMD_ID           DungeonCandidateTeamReplyInviteRsp_CmdId = 949
	DungeonCandidateTeamReplyInviteRsp_ENET_CHANNEL_ID  DungeonCandidateTeamReplyInviteRsp_CmdId = 0
	DungeonCandidateTeamReplyInviteRsp_ENET_IS_RELIABLE DungeonCandidateTeamReplyInviteRsp_CmdId = 1
)

// Enum value maps for DungeonCandidateTeamReplyInviteRsp_CmdId.
var (
	DungeonCandidateTeamReplyInviteRsp_CmdId_name = map[int32]string{
		0:   "NONE",
		949: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonCandidateTeamReplyInviteRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           949,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonCandidateTeamReplyInviteRsp_CmdId) Enum() *DungeonCandidateTeamReplyInviteRsp_CmdId {
	p := new(DungeonCandidateTeamReplyInviteRsp_CmdId)
	*p = x
	return p
}

func (x DungeonCandidateTeamReplyInviteRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamReplyInviteRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[45].Descriptor()
}

func (DungeonCandidateTeamReplyInviteRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[45]
}

func (x DungeonCandidateTeamReplyInviteRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamReplyInviteRsp_CmdId.Descriptor instead.
func (DungeonCandidateTeamReplyInviteRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{53, 0}
}

type DungeonCandidateTeamSetReadyReq_CmdId int32

const (
	DungeonCandidateTeamSetReadyReq_NONE             DungeonCandidateTeamSetReadyReq_CmdId = 0
	DungeonCandidateTeamSetReadyReq_CMD_ID           DungeonCandidateTeamSetReadyReq_CmdId = 991
	DungeonCandidateTeamSetReadyReq_ENET_CHANNEL_ID  DungeonCandidateTeamSetReadyReq_CmdId = 0
	DungeonCandidateTeamSetReadyReq_ENET_IS_RELIABLE DungeonCandidateTeamSetReadyReq_CmdId = 1
	DungeonCandidateTeamSetReadyReq_IS_ALLOW_CLIENT  DungeonCandidateTeamSetReadyReq_CmdId = 1
)

// Enum value maps for DungeonCandidateTeamSetReadyReq_CmdId.
var (
	DungeonCandidateTeamSetReadyReq_CmdId_name = map[int32]string{
		0:   "NONE",
		991: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	DungeonCandidateTeamSetReadyReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           991,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x DungeonCandidateTeamSetReadyReq_CmdId) Enum() *DungeonCandidateTeamSetReadyReq_CmdId {
	p := new(DungeonCandidateTeamSetReadyReq_CmdId)
	*p = x
	return p
}

func (x DungeonCandidateTeamSetReadyReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamSetReadyReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[46].Descriptor()
}

func (DungeonCandidateTeamSetReadyReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[46]
}

func (x DungeonCandidateTeamSetReadyReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamSetReadyReq_CmdId.Descriptor instead.
func (DungeonCandidateTeamSetReadyReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{54, 0}
}

type DungeonCandidateTeamSetReadyRsp_CmdId int32

const (
	DungeonCandidateTeamSetReadyRsp_NONE             DungeonCandidateTeamSetReadyRsp_CmdId = 0
	DungeonCandidateTeamSetReadyRsp_CMD_ID           DungeonCandidateTeamSetReadyRsp_CmdId = 924
	DungeonCandidateTeamSetReadyRsp_ENET_CHANNEL_ID  DungeonCandidateTeamSetReadyRsp_CmdId = 0
	DungeonCandidateTeamSetReadyRsp_ENET_IS_RELIABLE DungeonCandidateTeamSetReadyRsp_CmdId = 1
)

// Enum value maps for DungeonCandidateTeamSetReadyRsp_CmdId.
var (
	DungeonCandidateTeamSetReadyRsp_CmdId_name = map[int32]string{
		0:   "NONE",
		924: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonCandidateTeamSetReadyRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           924,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonCandidateTeamSetReadyRsp_CmdId) Enum() *DungeonCandidateTeamSetReadyRsp_CmdId {
	p := new(DungeonCandidateTeamSetReadyRsp_CmdId)
	*p = x
	return p
}

func (x DungeonCandidateTeamSetReadyRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamSetReadyRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[47].Descriptor()
}

func (DungeonCandidateTeamSetReadyRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[47]
}

func (x DungeonCandidateTeamSetReadyRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamSetReadyRsp_CmdId.Descriptor instead.
func (DungeonCandidateTeamSetReadyRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{55, 0}
}

type DungeonCandidateTeamChangeAvatarReq_CmdId int32

const (
	DungeonCandidateTeamChangeAvatarReq_NONE             DungeonCandidateTeamChangeAvatarReq_CmdId = 0
	DungeonCandidateTeamChangeAvatarReq_CMD_ID           DungeonCandidateTeamChangeAvatarReq_CmdId = 956
	DungeonCandidateTeamChangeAvatarReq_ENET_CHANNEL_ID  DungeonCandidateTeamChangeAvatarReq_CmdId = 0
	DungeonCandidateTeamChangeAvatarReq_ENET_IS_RELIABLE DungeonCandidateTeamChangeAvatarReq_CmdId = 1
	DungeonCandidateTeamChangeAvatarReq_IS_ALLOW_CLIENT  DungeonCandidateTeamChangeAvatarReq_CmdId = 1
)

// Enum value maps for DungeonCandidateTeamChangeAvatarReq_CmdId.
var (
	DungeonCandidateTeamChangeAvatarReq_CmdId_name = map[int32]string{
		0:   "NONE",
		956: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	DungeonCandidateTeamChangeAvatarReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           956,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x DungeonCandidateTeamChangeAvatarReq_CmdId) Enum() *DungeonCandidateTeamChangeAvatarReq_CmdId {
	p := new(DungeonCandidateTeamChangeAvatarReq_CmdId)
	*p = x
	return p
}

func (x DungeonCandidateTeamChangeAvatarReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamChangeAvatarReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[48].Descriptor()
}

func (DungeonCandidateTeamChangeAvatarReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[48]
}

func (x DungeonCandidateTeamChangeAvatarReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamChangeAvatarReq_CmdId.Descriptor instead.
func (DungeonCandidateTeamChangeAvatarReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{56, 0}
}

type DungeonCandidateTeamChangeAvatarRsp_CmdId int32

const (
	DungeonCandidateTeamChangeAvatarRsp_NONE             DungeonCandidateTeamChangeAvatarRsp_CmdId = 0
	DungeonCandidateTeamChangeAvatarRsp_CMD_ID           DungeonCandidateTeamChangeAvatarRsp_CmdId = 942
	DungeonCandidateTeamChangeAvatarRsp_ENET_CHANNEL_ID  DungeonCandidateTeamChangeAvatarRsp_CmdId = 0
	DungeonCandidateTeamChangeAvatarRsp_ENET_IS_RELIABLE DungeonCandidateTeamChangeAvatarRsp_CmdId = 1
)

// Enum value maps for DungeonCandidateTeamChangeAvatarRsp_CmdId.
var (
	DungeonCandidateTeamChangeAvatarRsp_CmdId_name = map[int32]string{
		0:   "NONE",
		942: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonCandidateTeamChangeAvatarRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           942,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonCandidateTeamChangeAvatarRsp_CmdId) Enum() *DungeonCandidateTeamChangeAvatarRsp_CmdId {
	p := new(DungeonCandidateTeamChangeAvatarRsp_CmdId)
	*p = x
	return p
}

func (x DungeonCandidateTeamChangeAvatarRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamChangeAvatarRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[49].Descriptor()
}

func (DungeonCandidateTeamChangeAvatarRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[49]
}

func (x DungeonCandidateTeamChangeAvatarRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamChangeAvatarRsp_CmdId.Descriptor instead.
func (DungeonCandidateTeamChangeAvatarRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{57, 0}
}

type GetDailyDungeonEntryInfoReq_CmdId int32

const (
	GetDailyDungeonEntryInfoReq_NONE             GetDailyDungeonEntryInfoReq_CmdId = 0
	GetDailyDungeonEntryInfoReq_CMD_ID           GetDailyDungeonEntryInfoReq_CmdId = 930
	GetDailyDungeonEntryInfoReq_ENET_CHANNEL_ID  GetDailyDungeonEntryInfoReq_CmdId = 0
	GetDailyDungeonEntryInfoReq_ENET_IS_RELIABLE GetDailyDungeonEntryInfoReq_CmdId = 1
	GetDailyDungeonEntryInfoReq_IS_ALLOW_CLIENT  GetDailyDungeonEntryInfoReq_CmdId = 1
)

// Enum value maps for GetDailyDungeonEntryInfoReq_CmdId.
var (
	GetDailyDungeonEntryInfoReq_CmdId_name = map[int32]string{
		0:   "NONE",
		930: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	GetDailyDungeonEntryInfoReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           930,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x GetDailyDungeonEntryInfoReq_CmdId) Enum() *GetDailyDungeonEntryInfoReq_CmdId {
	p := new(GetDailyDungeonEntryInfoReq_CmdId)
	*p = x
	return p
}

func (x GetDailyDungeonEntryInfoReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetDailyDungeonEntryInfoReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[50].Descriptor()
}

func (GetDailyDungeonEntryInfoReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[50]
}

func (x GetDailyDungeonEntryInfoReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetDailyDungeonEntryInfoReq_CmdId.Descriptor instead.
func (GetDailyDungeonEntryInfoReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{59, 0}
}

type GetDailyDungeonEntryInfoRsp_CmdId int32

const (
	GetDailyDungeonEntryInfoRsp_NONE             GetDailyDungeonEntryInfoRsp_CmdId = 0
	GetDailyDungeonEntryInfoRsp_CMD_ID           GetDailyDungeonEntryInfoRsp_CmdId = 967
	GetDailyDungeonEntryInfoRsp_ENET_CHANNEL_ID  GetDailyDungeonEntryInfoRsp_CmdId = 0
	GetDailyDungeonEntryInfoRsp_ENET_IS_RELIABLE GetDailyDungeonEntryInfoRsp_CmdId = 1
)

// Enum value maps for GetDailyDungeonEntryInfoRsp_CmdId.
var (
	GetDailyDungeonEntryInfoRsp_CmdId_name = map[int32]string{
		0:   "NONE",
		967: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	GetDailyDungeonEntryInfoRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           967,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x GetDailyDungeonEntryInfoRsp_CmdId) Enum() *GetDailyDungeonEntryInfoRsp_CmdId {
	p := new(GetDailyDungeonEntryInfoRsp_CmdId)
	*p = x
	return p
}

func (x GetDailyDungeonEntryInfoRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetDailyDungeonEntryInfoRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[51].Descriptor()
}

func (GetDailyDungeonEntryInfoRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[51]
}

func (x GetDailyDungeonEntryInfoRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetDailyDungeonEntryInfoRsp_CmdId.Descriptor instead.
func (GetDailyDungeonEntryInfoRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{60, 0}
}

type DungeonSlipRevivePointActivateReq_CmdId int32

const (
	DungeonSlipRevivePointActivateReq_NONE             DungeonSlipRevivePointActivateReq_CmdId = 0
	DungeonSlipRevivePointActivateReq_CMD_ID           DungeonSlipRevivePointActivateReq_CmdId = 958
	DungeonSlipRevivePointActivateReq_ENET_CHANNEL_ID  DungeonSlipRevivePointActivateReq_CmdId = 0
	DungeonSlipRevivePointActivateReq_ENET_IS_RELIABLE DungeonSlipRevivePointActivateReq_CmdId = 1
	DungeonSlipRevivePointActivateReq_IS_ALLOW_CLIENT  DungeonSlipRevivePointActivateReq_CmdId = 1
)

// Enum value maps for DungeonSlipRevivePointActivateReq_CmdId.
var (
	DungeonSlipRevivePointActivateReq_CmdId_name = map[int32]string{
		0:   "NONE",
		958: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	DungeonSlipRevivePointActivateReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           958,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x DungeonSlipRevivePointActivateReq_CmdId) Enum() *DungeonSlipRevivePointActivateReq_CmdId {
	p := new(DungeonSlipRevivePointActivateReq_CmdId)
	*p = x
	return p
}

func (x DungeonSlipRevivePointActivateReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonSlipRevivePointActivateReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[52].Descriptor()
}

func (DungeonSlipRevivePointActivateReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[52]
}

func (x DungeonSlipRevivePointActivateReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonSlipRevivePointActivateReq_CmdId.Descriptor instead.
func (DungeonSlipRevivePointActivateReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{61, 0}
}

type DungeonSlipRevivePointActivateRsp_CmdId int32

const (
	DungeonSlipRevivePointActivateRsp_NONE             DungeonSlipRevivePointActivateRsp_CmdId = 0
	DungeonSlipRevivePointActivateRsp_CMD_ID           DungeonSlipRevivePointActivateRsp_CmdId = 970
	DungeonSlipRevivePointActivateRsp_ENET_CHANNEL_ID  DungeonSlipRevivePointActivateRsp_CmdId = 0
	DungeonSlipRevivePointActivateRsp_ENET_IS_RELIABLE DungeonSlipRevivePointActivateRsp_CmdId = 1
)

// Enum value maps for DungeonSlipRevivePointActivateRsp_CmdId.
var (
	DungeonSlipRevivePointActivateRsp_CmdId_name = map[int32]string{
		0:   "NONE",
		970: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonSlipRevivePointActivateRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           970,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonSlipRevivePointActivateRsp_CmdId) Enum() *DungeonSlipRevivePointActivateRsp_CmdId {
	p := new(DungeonSlipRevivePointActivateRsp_CmdId)
	*p = x
	return p
}

func (x DungeonSlipRevivePointActivateRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonSlipRevivePointActivateRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[53].Descriptor()
}

func (DungeonSlipRevivePointActivateRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[53]
}

func (x DungeonSlipRevivePointActivateRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonSlipRevivePointActivateRsp_CmdId.Descriptor instead.
func (DungeonSlipRevivePointActivateRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{62, 0}
}

type DungeonInterruptChallengeReq_CmdId int32

const (
	DungeonInterruptChallengeReq_NONE             DungeonInterruptChallengeReq_CmdId = 0
	DungeonInterruptChallengeReq_CMD_ID           DungeonInterruptChallengeReq_CmdId = 917
	DungeonInterruptChallengeReq_ENET_CHANNEL_ID  DungeonInterruptChallengeReq_CmdId = 0
	DungeonInterruptChallengeReq_ENET_IS_RELIABLE DungeonInterruptChallengeReq_CmdId = 1
	DungeonInterruptChallengeReq_IS_ALLOW_CLIENT  DungeonInterruptChallengeReq_CmdId = 1
)

// Enum value maps for DungeonInterruptChallengeReq_CmdId.
var (
	DungeonInterruptChallengeReq_CmdId_name = map[int32]string{
		0:   "NONE",
		917: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	DungeonInterruptChallengeReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           917,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x DungeonInterruptChallengeReq_CmdId) Enum() *DungeonInterruptChallengeReq_CmdId {
	p := new(DungeonInterruptChallengeReq_CmdId)
	*p = x
	return p
}

func (x DungeonInterruptChallengeReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonInterruptChallengeReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[54].Descriptor()
}

func (DungeonInterruptChallengeReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[54]
}

func (x DungeonInterruptChallengeReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonInterruptChallengeReq_CmdId.Descriptor instead.
func (DungeonInterruptChallengeReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{63, 0}
}

type DungeonInterruptChallengeRsp_CmdId int32

const (
	DungeonInterruptChallengeRsp_NONE             DungeonInterruptChallengeRsp_CmdId = 0
	DungeonInterruptChallengeRsp_CMD_ID           DungeonInterruptChallengeRsp_CmdId = 902
	DungeonInterruptChallengeRsp_ENET_CHANNEL_ID  DungeonInterruptChallengeRsp_CmdId = 0
	DungeonInterruptChallengeRsp_ENET_IS_RELIABLE DungeonInterruptChallengeRsp_CmdId = 1
)

// Enum value maps for DungeonInterruptChallengeRsp_CmdId.
var (
	DungeonInterruptChallengeRsp_CmdId_name = map[int32]string{
		0:   "NONE",
		902: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonInterruptChallengeRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           902,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonInterruptChallengeRsp_CmdId) Enum() *DungeonInterruptChallengeRsp_CmdId {
	p := new(DungeonInterruptChallengeRsp_CmdId)
	*p = x
	return p
}

func (x DungeonInterruptChallengeRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonInterruptChallengeRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[55].Descriptor()
}

func (DungeonInterruptChallengeRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[55]
}

func (x DungeonInterruptChallengeRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonInterruptChallengeRsp_CmdId.Descriptor instead.
func (DungeonInterruptChallengeRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{64, 0}
}

type InteractDailyDungeonInfoNotify_CmdId int32

const (
	InteractDailyDungeonInfoNotify_NONE             InteractDailyDungeonInfoNotify_CmdId = 0
	InteractDailyDungeonInfoNotify_CMD_ID           InteractDailyDungeonInfoNotify_CmdId = 919
	InteractDailyDungeonInfoNotify_ENET_CHANNEL_ID  InteractDailyDungeonInfoNotify_CmdId = 0
	InteractDailyDungeonInfoNotify_ENET_IS_RELIABLE InteractDailyDungeonInfoNotify_CmdId = 1
	InteractDailyDungeonInfoNotify_IS_ALLOW_CLIENT  InteractDailyDungeonInfoNotify_CmdId = 1
)

// Enum value maps for InteractDailyDungeonInfoNotify_CmdId.
var (
	InteractDailyDungeonInfoNotify_CmdId_name = map[int32]string{
		0:   "NONE",
		919: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	InteractDailyDungeonInfoNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           919,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x InteractDailyDungeonInfoNotify_CmdId) Enum() *InteractDailyDungeonInfoNotify_CmdId {
	p := new(InteractDailyDungeonInfoNotify_CmdId)
	*p = x
	return p
}

func (x InteractDailyDungeonInfoNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InteractDailyDungeonInfoNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[56].Descriptor()
}

func (InteractDailyDungeonInfoNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[56]
}

func (x InteractDailyDungeonInfoNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InteractDailyDungeonInfoNotify_CmdId.Descriptor instead.
func (InteractDailyDungeonInfoNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{65, 0}
}

type DungeonRestartReq_CmdId int32

const (
	DungeonRestartReq_NONE             DungeonRestartReq_CmdId = 0
	DungeonRestartReq_CMD_ID           DungeonRestartReq_CmdId = 961
	DungeonRestartReq_ENET_CHANNEL_ID  DungeonRestartReq_CmdId = 0
	DungeonRestartReq_ENET_IS_RELIABLE DungeonRestartReq_CmdId = 1
	DungeonRestartReq_IS_ALLOW_CLIENT  DungeonRestartReq_CmdId = 1
)

// Enum value maps for DungeonRestartReq_CmdId.
var (
	DungeonRestartReq_CmdId_name = map[int32]string{
		0:   "NONE",
		961: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	DungeonRestartReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           961,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x DungeonRestartReq_CmdId) Enum() *DungeonRestartReq_CmdId {
	p := new(DungeonRestartReq_CmdId)
	*p = x
	return p
}

func (x DungeonRestartReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonRestartReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[57].Descriptor()
}

func (DungeonRestartReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[57]
}

func (x DungeonRestartReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonRestartReq_CmdId.Descriptor instead.
func (DungeonRestartReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{66, 0}
}

type DungeonRestartRsp_CmdId int32

const (
	DungeonRestartRsp_NONE             DungeonRestartRsp_CmdId = 0
	DungeonRestartRsp_CMD_ID           DungeonRestartRsp_CmdId = 929
	DungeonRestartRsp_ENET_CHANNEL_ID  DungeonRestartRsp_CmdId = 0
	DungeonRestartRsp_ENET_IS_RELIABLE DungeonRestartRsp_CmdId = 1
)

// Enum value maps for DungeonRestartRsp_CmdId.
var (
	DungeonRestartRsp_CmdId_name = map[int32]string{
		0:   "NONE",
		929: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonRestartRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           929,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonRestartRsp_CmdId) Enum() *DungeonRestartRsp_CmdId {
	p := new(DungeonRestartRsp_CmdId)
	*p = x
	return p
}

func (x DungeonRestartRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonRestartRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[58].Descriptor()
}

func (DungeonRestartRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[58]
}

func (x DungeonRestartRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonRestartRsp_CmdId.Descriptor instead.
func (DungeonRestartRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{67, 0}
}

type DungeonRestartInviteNotify_CmdId int32

const (
	DungeonRestartInviteNotify_NONE             DungeonRestartInviteNotify_CmdId = 0
	DungeonRestartInviteNotify_CMD_ID           DungeonRestartInviteNotify_CmdId = 957
	DungeonRestartInviteNotify_ENET_CHANNEL_ID  DungeonRestartInviteNotify_CmdId = 0
	DungeonRestartInviteNotify_ENET_IS_RELIABLE DungeonRestartInviteNotify_CmdId = 1
	DungeonRestartInviteNotify_IS_ALLOW_CLIENT  DungeonRestartInviteNotify_CmdId = 1
)

// Enum value maps for DungeonRestartInviteNotify_CmdId.
var (
	DungeonRestartInviteNotify_CmdId_name = map[int32]string{
		0:   "NONE",
		957: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	DungeonRestartInviteNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           957,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x DungeonRestartInviteNotify_CmdId) Enum() *DungeonRestartInviteNotify_CmdId {
	p := new(DungeonRestartInviteNotify_CmdId)
	*p = x
	return p
}

func (x DungeonRestartInviteNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonRestartInviteNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[59].Descriptor()
}

func (DungeonRestartInviteNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[59]
}

func (x DungeonRestartInviteNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonRestartInviteNotify_CmdId.Descriptor instead.
func (DungeonRestartInviteNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{68, 0}
}

type DungeonRestartInviteReplyReq_CmdId int32

const (
	DungeonRestartInviteReplyReq_NONE             DungeonRestartInviteReplyReq_CmdId = 0
	DungeonRestartInviteReplyReq_CMD_ID           DungeonRestartInviteReplyReq_CmdId = 1000
	DungeonRestartInviteReplyReq_ENET_CHANNEL_ID  DungeonRestartInviteReplyReq_CmdId = 0
	DungeonRestartInviteReplyReq_ENET_IS_RELIABLE DungeonRestartInviteReplyReq_CmdId = 1
	DungeonRestartInviteReplyReq_IS_ALLOW_CLIENT  DungeonRestartInviteReplyReq_CmdId = 1
)

// Enum value maps for DungeonRestartInviteReplyReq_CmdId.
var (
	DungeonRestartInviteReplyReq_CmdId_name = map[int32]string{
		0:    "NONE",
		1000: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	DungeonRestartInviteReplyReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           1000,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x DungeonRestartInviteReplyReq_CmdId) Enum() *DungeonRestartInviteReplyReq_CmdId {
	p := new(DungeonRestartInviteReplyReq_CmdId)
	*p = x
	return p
}

func (x DungeonRestartInviteReplyReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonRestartInviteReplyReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[60].Descriptor()
}

func (DungeonRestartInviteReplyReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[60]
}

func (x DungeonRestartInviteReplyReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonRestartInviteReplyReq_CmdId.Descriptor instead.
func (DungeonRestartInviteReplyReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{69, 0}
}

type DungeonRestartInviteReplyRsp_CmdId int32

const (
	DungeonRestartInviteReplyRsp_NONE             DungeonRestartInviteReplyRsp_CmdId = 0
	DungeonRestartInviteReplyRsp_CMD_ID           DungeonRestartInviteReplyRsp_CmdId = 916
	DungeonRestartInviteReplyRsp_ENET_CHANNEL_ID  DungeonRestartInviteReplyRsp_CmdId = 0
	DungeonRestartInviteReplyRsp_ENET_IS_RELIABLE DungeonRestartInviteReplyRsp_CmdId = 1
)

// Enum value maps for DungeonRestartInviteReplyRsp_CmdId.
var (
	DungeonRestartInviteReplyRsp_CmdId_name = map[int32]string{
		0:   "NONE",
		916: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonRestartInviteReplyRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           916,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonRestartInviteReplyRsp_CmdId) Enum() *DungeonRestartInviteReplyRsp_CmdId {
	p := new(DungeonRestartInviteReplyRsp_CmdId)
	*p = x
	return p
}

func (x DungeonRestartInviteReplyRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonRestartInviteReplyRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[61].Descriptor()
}

func (DungeonRestartInviteReplyRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[61]
}

func (x DungeonRestartInviteReplyRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonRestartInviteReplyRsp_CmdId.Descriptor instead.
func (DungeonRestartInviteReplyRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{70, 0}
}

type DungeonRestartInviteReplyNotify_CmdId int32

const (
	DungeonRestartInviteReplyNotify_NONE             DungeonRestartInviteReplyNotify_CmdId = 0
	DungeonRestartInviteReplyNotify_CMD_ID           DungeonRestartInviteReplyNotify_CmdId = 987
	DungeonRestartInviteReplyNotify_ENET_CHANNEL_ID  DungeonRestartInviteReplyNotify_CmdId = 0
	DungeonRestartInviteReplyNotify_ENET_IS_RELIABLE DungeonRestartInviteReplyNotify_CmdId = 1
	DungeonRestartInviteReplyNotify_IS_ALLOW_CLIENT  DungeonRestartInviteReplyNotify_CmdId = 1
)

// Enum value maps for DungeonRestartInviteReplyNotify_CmdId.
var (
	DungeonRestartInviteReplyNotify_CmdId_name = map[int32]string{
		0:   "NONE",
		987: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	DungeonRestartInviteReplyNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           987,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x DungeonRestartInviteReplyNotify_CmdId) Enum() *DungeonRestartInviteReplyNotify_CmdId {
	p := new(DungeonRestartInviteReplyNotify_CmdId)
	*p = x
	return p
}

func (x DungeonRestartInviteReplyNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonRestartInviteReplyNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[62].Descriptor()
}

func (DungeonRestartInviteReplyNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[62]
}

func (x DungeonRestartInviteReplyNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonRestartInviteReplyNotify_CmdId.Descriptor instead.
func (DungeonRestartInviteReplyNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{71, 0}
}

type DungeonRestartResultNotify_CmdId int32

const (
	DungeonRestartResultNotify_NONE             DungeonRestartResultNotify_CmdId = 0
	DungeonRestartResultNotify_CMD_ID           DungeonRestartResultNotify_CmdId = 940
	DungeonRestartResultNotify_ENET_CHANNEL_ID  DungeonRestartResultNotify_CmdId = 0
	DungeonRestartResultNotify_ENET_IS_RELIABLE DungeonRestartResultNotify_CmdId = 1
	DungeonRestartResultNotify_IS_ALLOW_CLIENT  DungeonRestartResultNotify_CmdId = 1
)

// Enum value maps for DungeonRestartResultNotify_CmdId.
var (
	DungeonRestartResultNotify_CmdId_name = map[int32]string{
		0:   "NONE",
		940: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	DungeonRestartResultNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           940,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x DungeonRestartResultNotify_CmdId) Enum() *DungeonRestartResultNotify_CmdId {
	p := new(DungeonRestartResultNotify_CmdId)
	*p = x
	return p
}

func (x DungeonRestartResultNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonRestartResultNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[63].Descriptor()
}

func (DungeonRestartResultNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[63]
}

func (x DungeonRestartResultNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonRestartResultNotify_CmdId.Descriptor instead.
func (DungeonRestartResultNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{72, 0}
}

type DungeonCandidateTeamSetChangingAvatarReq_CmdId int32

const (
	DungeonCandidateTeamSetChangingAvatarReq_NONE             DungeonCandidateTeamSetChangingAvatarReq_CmdId = 0
	DungeonCandidateTeamSetChangingAvatarReq_CMD_ID           DungeonCandidateTeamSetChangingAvatarReq_CmdId = 918
	DungeonCandidateTeamSetChangingAvatarReq_ENET_CHANNEL_ID  DungeonCandidateTeamSetChangingAvatarReq_CmdId = 0
	DungeonCandidateTeamSetChangingAvatarReq_ENET_IS_RELIABLE DungeonCandidateTeamSetChangingAvatarReq_CmdId = 1
	DungeonCandidateTeamSetChangingAvatarReq_IS_ALLOW_CLIENT  DungeonCandidateTeamSetChangingAvatarReq_CmdId = 1
)

// Enum value maps for DungeonCandidateTeamSetChangingAvatarReq_CmdId.
var (
	DungeonCandidateTeamSetChangingAvatarReq_CmdId_name = map[int32]string{
		0:   "NONE",
		918: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	DungeonCandidateTeamSetChangingAvatarReq_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           918,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x DungeonCandidateTeamSetChangingAvatarReq_CmdId) Enum() *DungeonCandidateTeamSetChangingAvatarReq_CmdId {
	p := new(DungeonCandidateTeamSetChangingAvatarReq_CmdId)
	*p = x
	return p
}

func (x DungeonCandidateTeamSetChangingAvatarReq_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamSetChangingAvatarReq_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[64].Descriptor()
}

func (DungeonCandidateTeamSetChangingAvatarReq_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[64]
}

func (x DungeonCandidateTeamSetChangingAvatarReq_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamSetChangingAvatarReq_CmdId.Descriptor instead.
func (DungeonCandidateTeamSetChangingAvatarReq_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{73, 0}
}

type DungeonCandidateTeamSetChangingAvatarRsp_CmdId int32

const (
	DungeonCandidateTeamSetChangingAvatarRsp_NONE             DungeonCandidateTeamSetChangingAvatarRsp_CmdId = 0
	DungeonCandidateTeamSetChangingAvatarRsp_CMD_ID           DungeonCandidateTeamSetChangingAvatarRsp_CmdId = 966
	DungeonCandidateTeamSetChangingAvatarRsp_ENET_CHANNEL_ID  DungeonCandidateTeamSetChangingAvatarRsp_CmdId = 0
	DungeonCandidateTeamSetChangingAvatarRsp_ENET_IS_RELIABLE DungeonCandidateTeamSetChangingAvatarRsp_CmdId = 1
)

// Enum value maps for DungeonCandidateTeamSetChangingAvatarRsp_CmdId.
var (
	DungeonCandidateTeamSetChangingAvatarRsp_CmdId_name = map[int32]string{
		0:   "NONE",
		966: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
	}
	DungeonCandidateTeamSetChangingAvatarRsp_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           966,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
	}
)

func (x DungeonCandidateTeamSetChangingAvatarRsp_CmdId) Enum() *DungeonCandidateTeamSetChangingAvatarRsp_CmdId {
	p := new(DungeonCandidateTeamSetChangingAvatarRsp_CmdId)
	*p = x
	return p
}

func (x DungeonCandidateTeamSetChangingAvatarRsp_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonCandidateTeamSetChangingAvatarRsp_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[65].Descriptor()
}

func (DungeonCandidateTeamSetChangingAvatarRsp_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[65]
}

func (x DungeonCandidateTeamSetChangingAvatarRsp_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonCandidateTeamSetChangingAvatarRsp_CmdId.Descriptor instead.
func (DungeonCandidateTeamSetChangingAvatarRsp_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{74, 0}
}

type MistTrialFloorLevelNotify_CmdId int32

const (
	MistTrialFloorLevelNotify_NONE             MistTrialFloorLevelNotify_CmdId = 0
	MistTrialFloorLevelNotify_CMD_ID           MistTrialFloorLevelNotify_CmdId = 968
	MistTrialFloorLevelNotify_ENET_CHANNEL_ID  MistTrialFloorLevelNotify_CmdId = 0
	MistTrialFloorLevelNotify_ENET_IS_RELIABLE MistTrialFloorLevelNotify_CmdId = 1
	MistTrialFloorLevelNotify_IS_ALLOW_CLIENT  MistTrialFloorLevelNotify_CmdId = 1
)

// Enum value maps for MistTrialFloorLevelNotify_CmdId.
var (
	MistTrialFloorLevelNotify_CmdId_name = map[int32]string{
		0:   "NONE",
		968: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	MistTrialFloorLevelNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           968,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x MistTrialFloorLevelNotify_CmdId) Enum() *MistTrialFloorLevelNotify_CmdId {
	p := new(MistTrialFloorLevelNotify_CmdId)
	*p = x
	return p
}

func (x MistTrialFloorLevelNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MistTrialFloorLevelNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[66].Descriptor()
}

func (MistTrialFloorLevelNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[66]
}

func (x MistTrialFloorLevelNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MistTrialFloorLevelNotify_CmdId.Descriptor instead.
func (MistTrialFloorLevelNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{75, 0}
}

type DungeonReviseLevelNotify_CmdId int32

const (
	DungeonReviseLevelNotify_NONE             DungeonReviseLevelNotify_CmdId = 0
	DungeonReviseLevelNotify_CMD_ID           DungeonReviseLevelNotify_CmdId = 933
	DungeonReviseLevelNotify_ENET_CHANNEL_ID  DungeonReviseLevelNotify_CmdId = 0
	DungeonReviseLevelNotify_ENET_IS_RELIABLE DungeonReviseLevelNotify_CmdId = 1
	DungeonReviseLevelNotify_IS_ALLOW_CLIENT  DungeonReviseLevelNotify_CmdId = 1
)

// Enum value maps for DungeonReviseLevelNotify_CmdId.
var (
	DungeonReviseLevelNotify_CmdId_name = map[int32]string{
		0:   "NONE",
		933: "CMD_ID",
		// Duplicate value: 0: "ENET_CHANNEL_ID",
		1: "ENET_IS_RELIABLE",
		// Duplicate value: 1: "IS_ALLOW_CLIENT",
	}
	DungeonReviseLevelNotify_CmdId_value = map[string]int32{
		"NONE":             0,
		"CMD_ID":           933,
		"ENET_CHANNEL_ID":  0,
		"ENET_IS_RELIABLE": 1,
		"IS_ALLOW_CLIENT":  1,
	}
)

func (x DungeonReviseLevelNotify_CmdId) Enum() *DungeonReviseLevelNotify_CmdId {
	p := new(DungeonReviseLevelNotify_CmdId)
	*p = x
	return p
}

func (x DungeonReviseLevelNotify_CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DungeonReviseLevelNotify_CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_dungeon_proto_enumTypes[67].Descriptor()
}

func (DungeonReviseLevelNotify_CmdId) Type() protoreflect.EnumType {
	return &file_cmd_cmd_dungeon_proto_enumTypes[67]
}

func (x DungeonReviseLevelNotify_CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DungeonReviseLevelNotify_CmdId.Descriptor instead.
func (DungeonReviseLevelNotify_CmdId) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{76, 0}
}

type DungeonEntryInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointId          uint32        `protobuf:"varint,2,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
	SceneId          uint32        `protobuf:"varint,9,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	ScenePointIdList []*Uint32Pair `protobuf:"bytes,4,rep,name=scene_point_id_list,json=scenePointIdList,proto3" json:"scene_point_id_list,omitempty"`
}

func (x *DungeonEntryInfoReq) Reset() {
	*x = DungeonEntryInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonEntryInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonEntryInfoReq) ProtoMessage() {}

func (x *DungeonEntryInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonEntryInfoReq.ProtoReflect.Descriptor instead.
func (*DungeonEntryInfoReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{0}
}

func (x *DungeonEntryInfoReq) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

func (x *DungeonEntryInfoReq) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *DungeonEntryInfoReq) GetScenePointIdList() []*Uint32Pair {
	if x != nil {
		return x.ScenePointIdList
	}
	return nil
}

type DungeonEntryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTime                     uint32                       `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	DungeonId                   uint32                       `protobuf:"varint,5,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	BossChestNum                uint32                       `protobuf:"varint,12,opt,name=boss_chest_num,json=bossChestNum,proto3" json:"boss_chest_num,omitempty"`
	MaxBossChestNum             uint32                       `protobuf:"varint,13,opt,name=max_boss_chest_num,json=maxBossChestNum,proto3" json:"max_boss_chest_num,omitempty"`
	NextRefreshTime             uint32                       `protobuf:"varint,11,opt,name=next_refresh_time,json=nextRefreshTime,proto3" json:"next_refresh_time,omitempty"`
	WeeklyBossResinDiscountInfo *WeeklyBossResinDiscountInfo `protobuf:"bytes,9,opt,name=weekly_boss_resin_discount_info,json=weeklyBossResinDiscountInfo,proto3" json:"weekly_boss_resin_discount_info,omitempty"`
	StartTime                   uint32                       `protobuf:"varint,15,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	IsPassed                    bool                         `protobuf:"varint,4,opt,name=is_passed,json=isPassed,proto3" json:"is_passed,omitempty"`
	LeftTimes                   uint32                       `protobuf:"varint,7,opt,name=left_times,json=leftTimes,proto3" json:"left_times,omitempty"`
}

func (x *DungeonEntryInfo) Reset() {
	*x = DungeonEntryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonEntryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonEntryInfo) ProtoMessage() {}

func (x *DungeonEntryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonEntryInfo.ProtoReflect.Descriptor instead.
func (*DungeonEntryInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{1}
}

func (x *DungeonEntryInfo) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *DungeonEntryInfo) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *DungeonEntryInfo) GetBossChestNum() uint32 {
	if x != nil {
		return x.BossChestNum
	}
	return 0
}

func (x *DungeonEntryInfo) GetMaxBossChestNum() uint32 {
	if x != nil {
		return x.MaxBossChestNum
	}
	return 0
}

func (x *DungeonEntryInfo) GetNextRefreshTime() uint32 {
	if x != nil {
		return x.NextRefreshTime
	}
	return 0
}

func (x *DungeonEntryInfo) GetWeeklyBossResinDiscountInfo() *WeeklyBossResinDiscountInfo {
	if x != nil {
		return x.WeeklyBossResinDiscountInfo
	}
	return nil
}

func (x *DungeonEntryInfo) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DungeonEntryInfo) GetIsPassed() bool {
	if x != nil {
		return x.IsPassed
	}
	return false
}

func (x *DungeonEntryInfo) GetLeftTimes() uint32 {
	if x != nil {
		return x.LeftTimes
	}
	return 0
}

type DungeonEntryPointInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId            uint32              `protobuf:"varint,12,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	PointId            uint32              `protobuf:"varint,6,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
	DungeonEntryList   []*DungeonEntryInfo `protobuf:"bytes,1,rep,name=dungeon_entry_list,json=dungeonEntryList,proto3" json:"dungeon_entry_list,omitempty"`
	RecommendDungeonId uint32              `protobuf:"varint,8,opt,name=recommend_dungeon_id,json=recommendDungeonId,proto3" json:"recommend_dungeon_id,omitempty"`
}

func (x *DungeonEntryPointInfo) Reset() {
	*x = DungeonEntryPointInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonEntryPointInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonEntryPointInfo) ProtoMessage() {}

func (x *DungeonEntryPointInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonEntryPointInfo.ProtoReflect.Descriptor instead.
func (*DungeonEntryPointInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{2}
}

func (x *DungeonEntryPointInfo) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *DungeonEntryPointInfo) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

func (x *DungeonEntryPointInfo) GetDungeonEntryList() []*DungeonEntryInfo {
	if x != nil {
		return x.DungeonEntryList
	}
	return nil
}

func (x *DungeonEntryPointInfo) GetRecommendDungeonId() uint32 {
	if x != nil {
		return x.RecommendDungeonId
	}
	return 0
}

type DungeonEntryInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonEntryList      []*DungeonEntryInfo      `protobuf:"bytes,12,rep,name=dungeon_entry_list,json=dungeonEntryList,proto3" json:"dungeon_entry_list,omitempty"`
	PointId               uint32                   `protobuf:"varint,15,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
	DungeonEntryPointList []*DungeonEntryPointInfo `protobuf:"bytes,4,rep,name=dungeon_entry_point_list,json=dungeonEntryPointList,proto3" json:"dungeon_entry_point_list,omitempty"`
	RecommendDungeonId    uint32                   `protobuf:"varint,14,opt,name=recommend_dungeon_id,json=recommendDungeonId,proto3" json:"recommend_dungeon_id,omitempty"`
	Retcode               int32                    `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *DungeonEntryInfoRsp) Reset() {
	*x = DungeonEntryInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonEntryInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonEntryInfoRsp) ProtoMessage() {}

func (x *DungeonEntryInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonEntryInfoRsp.ProtoReflect.Descriptor instead.
func (*DungeonEntryInfoRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{3}
}

func (x *DungeonEntryInfoRsp) GetDungeonEntryList() []*DungeonEntryInfo {
	if x != nil {
		return x.DungeonEntryList
	}
	return nil
}

func (x *DungeonEntryInfoRsp) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

func (x *DungeonEntryInfoRsp) GetDungeonEntryPointList() []*DungeonEntryPointInfo {
	if x != nil {
		return x.DungeonEntryPointList
	}
	return nil
}

func (x *DungeonEntryInfoRsp) GetRecommendDungeonId() uint32 {
	if x != nil {
		return x.RecommendDungeonId
	}
	return 0
}

func (x *DungeonEntryInfoRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type DungeonEnterPosInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestId uint32 `protobuf:"varint,13,opt,name=quest_id,json=questId,proto3" json:"quest_id,omitempty"`
	PointId uint32 `protobuf:"varint,6,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
}

func (x *DungeonEnterPosInfo) Reset() {
	*x = DungeonEnterPosInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonEnterPosInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonEnterPosInfo) ProtoMessage() {}

func (x *DungeonEnterPosInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonEnterPosInfo.ProtoReflect.Descriptor instead.
func (*DungeonEnterPosInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{4}
}

func (x *DungeonEnterPosInfo) GetQuestId() uint32 {
	if x != nil {
		return x.QuestId
	}
	return 0
}

func (x *DungeonEnterPosInfo) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

type PlayerEnterDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterPosInfo *DungeonEnterPosInfo `protobuf:"bytes,2,opt,name=enter_pos_info,json=enterPosInfo,proto3" json:"enter_pos_info,omitempty"`
	PointId      uint32               `protobuf:"varint,13,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
	DungeonId    uint32               `protobuf:"varint,7,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
}

func (x *PlayerEnterDungeonReq) Reset() {
	*x = PlayerEnterDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerEnterDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerEnterDungeonReq) ProtoMessage() {}

func (x *PlayerEnterDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerEnterDungeonReq.ProtoReflect.Descriptor instead.
func (*PlayerEnterDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{5}
}

func (x *PlayerEnterDungeonReq) GetEnterPosInfo() *DungeonEnterPosInfo {
	if x != nil {
		return x.EnterPosInfo
	}
	return nil
}

func (x *PlayerEnterDungeonReq) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

func (x *PlayerEnterDungeonReq) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

type PlayerEnterDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonId uint32 `protobuf:"varint,2,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	PointId   uint32 `protobuf:"varint,6,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
	Retcode   int32  `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *PlayerEnterDungeonRsp) Reset() {
	*x = PlayerEnterDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerEnterDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerEnterDungeonRsp) ProtoMessage() {}

func (x *PlayerEnterDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerEnterDungeonRsp.ProtoReflect.Descriptor instead.
func (*PlayerEnterDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{6}
}

func (x *PlayerEnterDungeonRsp) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *PlayerEnterDungeonRsp) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

func (x *PlayerEnterDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type PlayerQuitDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsQuitImmediately bool   `protobuf:"varint,10,opt,name=is_quit_immediately,json=isQuitImmediately,proto3" json:"is_quit_immediately,omitempty"`
	PointId           uint32 `protobuf:"varint,7,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
}

func (x *PlayerQuitDungeonReq) Reset() {
	*x = PlayerQuitDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQuitDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQuitDungeonReq) ProtoMessage() {}

func (x *PlayerQuitDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQuitDungeonReq.ProtoReflect.Descriptor instead.
func (*PlayerQuitDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{7}
}

func (x *PlayerQuitDungeonReq) GetIsQuitImmediately() bool {
	if x != nil {
		return x.IsQuitImmediately
	}
	return false
}

func (x *PlayerQuitDungeonReq) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

type PlayerQuitDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointId uint32 `protobuf:"varint,11,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
	Retcode int32  `protobuf:"varint,7,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *PlayerQuitDungeonRsp) Reset() {
	*x = PlayerQuitDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQuitDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQuitDungeonRsp) ProtoMessage() {}

func (x *PlayerQuitDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQuitDungeonRsp.ProtoReflect.Descriptor instead.
func (*PlayerQuitDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{8}
}

func (x *PlayerQuitDungeonRsp) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

func (x *PlayerQuitDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type DungeonWayPointNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAdd              bool     `protobuf:"varint,9,opt,name=is_add,json=isAdd,proto3" json:"is_add,omitempty"`
	ActiveWayPointList []uint32 `protobuf:"varint,4,rep,packed,name=active_way_point_list,json=activeWayPointList,proto3" json:"active_way_point_list,omitempty"`
}

func (x *DungeonWayPointNotify) Reset() {
	*x = DungeonWayPointNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonWayPointNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonWayPointNotify) ProtoMessage() {}

func (x *DungeonWayPointNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonWayPointNotify.ProtoReflect.Descriptor instead.
func (*DungeonWayPointNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{9}
}

func (x *DungeonWayPointNotify) GetIsAdd() bool {
	if x != nil {
		return x.IsAdd
	}
	return false
}

func (x *DungeonWayPointNotify) GetActiveWayPointList() []uint32 {
	if x != nil {
		return x.ActiveWayPointList
	}
	return nil
}

type DungeonWayPointActivateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WayPointId uint32 `protobuf:"varint,3,opt,name=way_point_id,json=wayPointId,proto3" json:"way_point_id,omitempty"`
}

func (x *DungeonWayPointActivateReq) Reset() {
	*x = DungeonWayPointActivateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonWayPointActivateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonWayPointActivateReq) ProtoMessage() {}

func (x *DungeonWayPointActivateReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonWayPointActivateReq.ProtoReflect.Descriptor instead.
func (*DungeonWayPointActivateReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{10}
}

func (x *DungeonWayPointActivateReq) GetWayPointId() uint32 {
	if x != nil {
		return x.WayPointId
	}
	return 0
}

type DungeonWayPointActivateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode    int32  `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
	WayPointId uint32 `protobuf:"varint,7,opt,name=way_point_id,json=wayPointId,proto3" json:"way_point_id,omitempty"`
}

func (x *DungeonWayPointActivateRsp) Reset() {
	*x = DungeonWayPointActivateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonWayPointActivateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonWayPointActivateRsp) ProtoMessage() {}

func (x *DungeonWayPointActivateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonWayPointActivateRsp.ProtoReflect.Descriptor instead.
func (*DungeonWayPointActivateRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{11}
}

func (x *DungeonWayPointActivateRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *DungeonWayPointActivateRsp) GetWayPointId() uint32 {
	if x != nil {
		return x.WayPointId
	}
	return 0
}

type StrengthenPointData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasePoint uint32 `protobuf:"varint,10,opt,name=base_point,json=basePoint,proto3" json:"base_point,omitempty"`
	CurPoint  uint32 `protobuf:"varint,11,opt,name=cur_point,json=curPoint,proto3" json:"cur_point,omitempty"`
}

func (x *StrengthenPointData) Reset() {
	*x = StrengthenPointData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrengthenPointData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrengthenPointData) ProtoMessage() {}

func (x *StrengthenPointData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrengthenPointData.ProtoReflect.Descriptor instead.
func (*StrengthenPointData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{12}
}

func (x *StrengthenPointData) GetBasePoint() uint32 {
	if x != nil {
		return x.BasePoint
	}
	return 0
}

func (x *StrengthenPointData) GetCurPoint() uint32 {
	if x != nil {
		return x.CurPoint
	}
	return 0
}

type DungeonSettleExhibitionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfo *OnlinePlayerInfo        `protobuf:"bytes,3,opt,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"`
	CardList   []*ExhibitionDisplayInfo `protobuf:"bytes,13,rep,name=card_list,json=cardList,proto3" json:"card_list,omitempty"`
}

func (x *DungeonSettleExhibitionInfo) Reset() {
	*x = DungeonSettleExhibitionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonSettleExhibitionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonSettleExhibitionInfo) ProtoMessage() {}

func (x *DungeonSettleExhibitionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonSettleExhibitionInfo.ProtoReflect.Descriptor instead.
func (*DungeonSettleExhibitionInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{13}
}

func (x *DungeonSettleExhibitionInfo) GetPlayerInfo() *OnlinePlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *DungeonSettleExhibitionInfo) GetCardList() []*ExhibitionDisplayInfo {
	if x != nil {
		return x.CardList
	}
	return nil
}

type CrystalLinkDungeonSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KillEliteMonsterNum  uint32 `protobuf:"varint,2,opt,name=kill_elite_monster_num,json=killEliteMonsterNum,proto3" json:"kill_elite_monster_num,omitempty"`
	FinalScore           uint32 `protobuf:"varint,6,opt,name=final_score,json=finalScore,proto3" json:"final_score,omitempty"`
	LevelId              uint32 `protobuf:"varint,12,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsNewRecord          bool   `protobuf:"varint,13,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
	DifficultyId         uint32 `protobuf:"varint,9,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
	KillNormalMosnterNum uint32 `protobuf:"varint,3,opt,name=kill_normal_mosnter_num,json=killNormalMosnterNum,proto3" json:"kill_normal_mosnter_num,omitempty"`
}

func (x *CrystalLinkDungeonSettleInfo) Reset() {
	*x = CrystalLinkDungeonSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrystalLinkDungeonSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrystalLinkDungeonSettleInfo) ProtoMessage() {}

func (x *CrystalLinkDungeonSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrystalLinkDungeonSettleInfo.ProtoReflect.Descriptor instead.
func (*CrystalLinkDungeonSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{14}
}

func (x *CrystalLinkDungeonSettleInfo) GetKillEliteMonsterNum() uint32 {
	if x != nil {
		return x.KillEliteMonsterNum
	}
	return 0
}

func (x *CrystalLinkDungeonSettleInfo) GetFinalScore() uint32 {
	if x != nil {
		return x.FinalScore
	}
	return 0
}

func (x *CrystalLinkDungeonSettleInfo) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *CrystalLinkDungeonSettleInfo) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

func (x *CrystalLinkDungeonSettleInfo) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

func (x *CrystalLinkDungeonSettleInfo) GetKillNormalMosnterNum() uint32 {
	if x != nil {
		return x.KillNormalMosnterNum
	}
	return 0
}

type SummerTimeV2DungeonSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess             bool   `protobuf:"varint,5,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	TakenRewardCount      uint32 `protobuf:"varint,2,opt,name=taken_reward_count,json=takenRewardCount,proto3" json:"taken_reward_count,omitempty"`
	CurDungeonRewardLimit uint32 `protobuf:"varint,11,opt,name=cur_dungeon_reward_limit,json=curDungeonRewardLimit,proto3" json:"cur_dungeon_reward_limit,omitempty"`
}

func (x *SummerTimeV2DungeonSettleInfo) Reset() {
	*x = SummerTimeV2DungeonSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeV2DungeonSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeV2DungeonSettleInfo) ProtoMessage() {}

func (x *SummerTimeV2DungeonSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeV2DungeonSettleInfo.ProtoReflect.Descriptor instead.
func (*SummerTimeV2DungeonSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{15}
}

func (x *SummerTimeV2DungeonSettleInfo) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *SummerTimeV2DungeonSettleInfo) GetTakenRewardCount() uint32 {
	if x != nil {
		return x.TakenRewardCount
	}
	return 0
}

func (x *SummerTimeV2DungeonSettleInfo) GetCurDungeonRewardLimit() uint32 {
	if x != nil {
		return x.CurDungeonRewardLimit
	}
	return 0
}

type InstableSprayDungeonSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId     uint32   `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	ScoreList   []uint32 `protobuf:"varint,4,rep,packed,name=score_list,json=scoreList,proto3" json:"score_list,omitempty"`
	IsNewRecord bool     `protobuf:"varint,13,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
	Difficulty  uint32   `protobuf:"varint,5,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
}

func (x *InstableSprayDungeonSettleInfo) Reset() {
	*x = InstableSprayDungeonSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstableSprayDungeonSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstableSprayDungeonSettleInfo) ProtoMessage() {}

func (x *InstableSprayDungeonSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstableSprayDungeonSettleInfo.ProtoReflect.Descriptor instead.
func (*InstableSprayDungeonSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{16}
}

func (x *InstableSprayDungeonSettleInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *InstableSprayDungeonSettleInfo) GetScoreList() []uint32 {
	if x != nil {
		return x.ScoreList
	}
	return nil
}

func (x *InstableSprayDungeonSettleInfo) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

func (x *InstableSprayDungeonSettleInfo) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

type WindFieldDungeonSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfterWatcherIdList  []uint32                   `protobuf:"varint,11,rep,packed,name=after_watcher_id_list,json=afterWatcherIdList,proto3" json:"after_watcher_id_list,omitempty"`
	BeforeWatcherIdList []uint32                   `protobuf:"varint,7,rep,packed,name=before_watcher_id_list,json=beforeWatcherIdList,proto3" json:"before_watcher_id_list,omitempty"`
	FailReason          WindFieldDungeonFailReason `protobuf:"varint,2,opt,name=fail_reason,json=failReason,proto3,enum=proto.WindFieldDungeonFailReason" json:"fail_reason,omitempty"`
}

func (x *WindFieldDungeonSettleInfo) Reset() {
	*x = WindFieldDungeonSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindFieldDungeonSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindFieldDungeonSettleInfo) ProtoMessage() {}

func (x *WindFieldDungeonSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindFieldDungeonSettleInfo.ProtoReflect.Descriptor instead.
func (*WindFieldDungeonSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{17}
}

func (x *WindFieldDungeonSettleInfo) GetAfterWatcherIdList() []uint32 {
	if x != nil {
		return x.AfterWatcherIdList
	}
	return nil
}

func (x *WindFieldDungeonSettleInfo) GetBeforeWatcherIdList() []uint32 {
	if x != nil {
		return x.BeforeWatcherIdList
	}
	return nil
}

func (x *WindFieldDungeonSettleInfo) GetFailReason() WindFieldDungeonFailReason {
	if x != nil {
		return x.FailReason
	}
	return WindFieldDungeonFailReason_WIND_FIELD_DUNGEON_FAIL_NONE
}

type EffigyChallengeV2SettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsChallengeHighestDifficulty bool   `protobuf:"varint,7,opt,name=is_challenge_highest_difficulty,json=isChallengeHighestDifficulty,proto3" json:"is_challenge_highest_difficulty,omitempty"`
	CreateDungeonPlayerUid       uint32 `protobuf:"varint,4,opt,name=create_dungeon_player_uid,json=createDungeonPlayerUid,proto3" json:"create_dungeon_player_uid,omitempty"`
	ChallengeModeDifficulty      uint32 `protobuf:"varint,6,opt,name=challenge_mode_difficulty,json=challengeModeDifficulty,proto3" json:"challenge_mode_difficulty,omitempty"`
	IsNewRecordTime              bool   `protobuf:"varint,1,opt,name=is_new_record_time,json=isNewRecordTime,proto3" json:"is_new_record_time,omitempty"`
	RecordTime                   uint32 `protobuf:"varint,12,opt,name=record_time,json=recordTime,proto3" json:"record_time,omitempty"`
	FirstTimeFinishDifficulty    uint32 `protobuf:"varint,5,opt,name=first_time_finish_difficulty,json=firstTimeFinishDifficulty,proto3" json:"first_time_finish_difficulty,omitempty"`
}

func (x *EffigyChallengeV2SettleInfo) Reset() {
	*x = EffigyChallengeV2SettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffigyChallengeV2SettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffigyChallengeV2SettleInfo) ProtoMessage() {}

func (x *EffigyChallengeV2SettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffigyChallengeV2SettleInfo.ProtoReflect.Descriptor instead.
func (*EffigyChallengeV2SettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{18}
}

func (x *EffigyChallengeV2SettleInfo) GetIsChallengeHighestDifficulty() bool {
	if x != nil {
		return x.IsChallengeHighestDifficulty
	}
	return false
}

func (x *EffigyChallengeV2SettleInfo) GetCreateDungeonPlayerUid() uint32 {
	if x != nil {
		return x.CreateDungeonPlayerUid
	}
	return 0
}

func (x *EffigyChallengeV2SettleInfo) GetChallengeModeDifficulty() uint32 {
	if x != nil {
		return x.ChallengeModeDifficulty
	}
	return 0
}

func (x *EffigyChallengeV2SettleInfo) GetIsNewRecordTime() bool {
	if x != nil {
		return x.IsNewRecordTime
	}
	return false
}

func (x *EffigyChallengeV2SettleInfo) GetRecordTime() uint32 {
	if x != nil {
		return x.RecordTime
	}
	return 0
}

func (x *EffigyChallengeV2SettleInfo) GetFirstTimeFinishDifficulty() uint32 {
	if x != nil {
		return x.FirstTimeFinishDifficulty
	}
	return 0
}

type TeamChainSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoreList   []uint32 `protobuf:"varint,9,rep,packed,name=score_list,json=scoreList,proto3" json:"score_list,omitempty"`
	TotalScore  uint32   `protobuf:"varint,1,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`
	Difficulty  uint32   `protobuf:"varint,15,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	StageId     uint32   `protobuf:"varint,12,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsNewRecord bool     `protobuf:"varint,4,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
}

func (x *TeamChainSettleInfo) Reset() {
	*x = TeamChainSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamChainSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamChainSettleInfo) ProtoMessage() {}

func (x *TeamChainSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamChainSettleInfo.ProtoReflect.Descriptor instead.
func (*TeamChainSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{19}
}

func (x *TeamChainSettleInfo) GetScoreList() []uint32 {
	if x != nil {
		return x.ScoreList
	}
	return nil
}

func (x *TeamChainSettleInfo) GetTotalScore() uint32 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *TeamChainSettleInfo) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *TeamChainSettleInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *TeamChainSettleInfo) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

type DungeonSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result                 uint32                          `protobuf:"varint,10,opt,name=result,proto3" json:"result,omitempty"`
	DungeonId              uint32                          `protobuf:"varint,13,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	StrengthenPointDataMap map[uint32]*StrengthenPointData `protobuf:"bytes,14,rep,name=strengthen_point_data_map,json=strengthenPointDataMap,proto3" json:"strengthen_point_data_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExhibitionInfoList     []*DungeonSettleExhibitionInfo  `protobuf:"bytes,8,rep,name=exhibition_info_list,json=exhibitionInfoList,proto3" json:"exhibition_info_list,omitempty"`
	CreatePlayerUid        uint32                          `protobuf:"varint,12,opt,name=create_player_uid,json=createPlayerUid,proto3" json:"create_player_uid,omitempty"`
	FailCondList           []uint32                        `protobuf:"varint,11,rep,packed,name=fail_cond_list,json=failCondList,proto3" json:"fail_cond_list,omitempty"`
	UseTime                uint32                          `protobuf:"varint,1,opt,name=use_time,json=useTime,proto3" json:"use_time,omitempty"`
	CloseTime              uint32                          `protobuf:"varint,4,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
	IsSuccess              bool                            `protobuf:"varint,7,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	SettleShow             map[uint32]*ParamList           `protobuf:"bytes,5,rep,name=settle_show,json=settleShow,proto3" json:"settle_show,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to Detail:
	//
	//	*DungeonSettleNotify_TowerLevelEndNotify
	//	*DungeonSettleNotify_TrialAvatarFirstPassDungeonNotify
	//	*DungeonSettleNotify_ChannellerSlabLoopDungeonResultInfo
	//	*DungeonSettleNotify_EffigyChallengeDungeonResultInfo
	//	*DungeonSettleNotify_RoguelikeDungeonSettleInfo
	//	*DungeonSettleNotify_CrystalLinkSettleInfo
	//	*DungeonSettleNotify_SummerTimeV2DungeonSettleInfo
	//	*DungeonSettleNotify_InstableSpraySettleInfo
	//	*DungeonSettleNotify_WindFieldDungeonSettleInfo
	//	*DungeonSettleNotify_EffigyChallengeV2SettleInfo
	//	*DungeonSettleNotify_TeamChainSettleInfo
	Detail isDungeonSettleNotify_Detail `protobuf_oneof:"detail"`
}

func (x *DungeonSettleNotify) Reset() {
	*x = DungeonSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonSettleNotify) ProtoMessage() {}

func (x *DungeonSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonSettleNotify.ProtoReflect.Descriptor instead.
func (*DungeonSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{20}
}

func (x *DungeonSettleNotify) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *DungeonSettleNotify) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *DungeonSettleNotify) GetStrengthenPointDataMap() map[uint32]*StrengthenPointData {
	if x != nil {
		return x.StrengthenPointDataMap
	}
	return nil
}

func (x *DungeonSettleNotify) GetExhibitionInfoList() []*DungeonSettleExhibitionInfo {
	if x != nil {
		return x.ExhibitionInfoList
	}
	return nil
}

func (x *DungeonSettleNotify) GetCreatePlayerUid() uint32 {
	if x != nil {
		return x.CreatePlayerUid
	}
	return 0
}

func (x *DungeonSettleNotify) GetFailCondList() []uint32 {
	if x != nil {
		return x.FailCondList
	}
	return nil
}

func (x *DungeonSettleNotify) GetUseTime() uint32 {
	if x != nil {
		return x.UseTime
	}
	return 0
}

func (x *DungeonSettleNotify) GetCloseTime() uint32 {
	if x != nil {
		return x.CloseTime
	}
	return 0
}

func (x *DungeonSettleNotify) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *DungeonSettleNotify) GetSettleShow() map[uint32]*ParamList {
	if x != nil {
		return x.SettleShow
	}
	return nil
}

func (m *DungeonSettleNotify) GetDetail() isDungeonSettleNotify_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *DungeonSettleNotify) GetTowerLevelEndNotify() *TowerLevelEndNotify {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_TowerLevelEndNotify); ok {
		return x.TowerLevelEndNotify
	}
	return nil
}

func (x *DungeonSettleNotify) GetTrialAvatarFirstPassDungeonNotify() *TrialAvatarFirstPassDungeonNotify {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_TrialAvatarFirstPassDungeonNotify); ok {
		return x.TrialAvatarFirstPassDungeonNotify
	}
	return nil
}

func (x *DungeonSettleNotify) GetChannellerSlabLoopDungeonResultInfo() *ChannellerSlabLoopDungeonResultInfo {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_ChannellerSlabLoopDungeonResultInfo); ok {
		return x.ChannellerSlabLoopDungeonResultInfo
	}
	return nil
}

func (x *DungeonSettleNotify) GetEffigyChallengeDungeonResultInfo() *EffigyChallengeDungeonResultInfo {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_EffigyChallengeDungeonResultInfo); ok {
		return x.EffigyChallengeDungeonResultInfo
	}
	return nil
}

func (x *DungeonSettleNotify) GetRoguelikeDungeonSettleInfo() *RoguelikeDungeonSettleInfo {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_RoguelikeDungeonSettleInfo); ok {
		return x.RoguelikeDungeonSettleInfo
	}
	return nil
}

func (x *DungeonSettleNotify) GetCrystalLinkSettleInfo() *CrystalLinkDungeonSettleInfo {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_CrystalLinkSettleInfo); ok {
		return x.CrystalLinkSettleInfo
	}
	return nil
}

func (x *DungeonSettleNotify) GetSummerTimeV2DungeonSettleInfo() *SummerTimeV2DungeonSettleInfo {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_SummerTimeV2DungeonSettleInfo); ok {
		return x.SummerTimeV2DungeonSettleInfo
	}
	return nil
}

func (x *DungeonSettleNotify) GetInstableSpraySettleInfo() *InstableSprayDungeonSettleInfo {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_InstableSpraySettleInfo); ok {
		return x.InstableSpraySettleInfo
	}
	return nil
}

func (x *DungeonSettleNotify) GetWindFieldDungeonSettleInfo() *WindFieldDungeonSettleInfo {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_WindFieldDungeonSettleInfo); ok {
		return x.WindFieldDungeonSettleInfo
	}
	return nil
}

func (x *DungeonSettleNotify) GetEffigyChallengeV2SettleInfo() *EffigyChallengeV2SettleInfo {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_EffigyChallengeV2SettleInfo); ok {
		return x.EffigyChallengeV2SettleInfo
	}
	return nil
}

func (x *DungeonSettleNotify) GetTeamChainSettleInfo() *TeamChainSettleInfo {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_TeamChainSettleInfo); ok {
		return x.TeamChainSettleInfo
	}
	return nil
}

type isDungeonSettleNotify_Detail interface {
	isDungeonSettleNotify_Detail()
}

type DungeonSettleNotify_TowerLevelEndNotify struct {
	TowerLevelEndNotify *TowerLevelEndNotify `protobuf:"bytes,351,opt,name=tower_level_end_notify,json=towerLevelEndNotify,proto3,oneof"`
}

type DungeonSettleNotify_TrialAvatarFirstPassDungeonNotify struct {
	TrialAvatarFirstPassDungeonNotify *TrialAvatarFirstPassDungeonNotify `protobuf:"bytes,635,opt,name=trial_avatar_first_pass_dungeon_notify,json=trialAvatarFirstPassDungeonNotify,proto3,oneof"`
}

type DungeonSettleNotify_ChannellerSlabLoopDungeonResultInfo struct {
	ChannellerSlabLoopDungeonResultInfo *ChannellerSlabLoopDungeonResultInfo `protobuf:"bytes,686,opt,name=channeller_slab_loop_dungeon_result_info,json=channellerSlabLoopDungeonResultInfo,proto3,oneof"`
}

type DungeonSettleNotify_EffigyChallengeDungeonResultInfo struct {
	EffigyChallengeDungeonResultInfo *EffigyChallengeDungeonResultInfo `protobuf:"bytes,328,opt,name=effigy_challenge_dungeon_result_info,json=effigyChallengeDungeonResultInfo,proto3,oneof"`
}

type DungeonSettleNotify_RoguelikeDungeonSettleInfo struct {
	RoguelikeDungeonSettleInfo *RoguelikeDungeonSettleInfo `protobuf:"bytes,1482,opt,name=roguelike_dungeon_settle_info,json=roguelikeDungeonSettleInfo,proto3,oneof"`
}

type DungeonSettleNotify_CrystalLinkSettleInfo struct {
	CrystalLinkSettleInfo *CrystalLinkDungeonSettleInfo `protobuf:"bytes,112,opt,name=crystal_link_settle_info,json=crystalLinkSettleInfo,proto3,oneof"`
}

type DungeonSettleNotify_SummerTimeV2DungeonSettleInfo struct {
	SummerTimeV2DungeonSettleInfo *SummerTimeV2DungeonSettleInfo `protobuf:"bytes,1882,opt,name=summer_time_v2_dungeon_settle_info,json=summerTimeV2DungeonSettleInfo,proto3,oneof"`
}

type DungeonSettleNotify_InstableSpraySettleInfo struct {
	InstableSpraySettleInfo *InstableSprayDungeonSettleInfo `protobuf:"bytes,193,opt,name=instable_spray_settle_info,json=instableSpraySettleInfo,proto3,oneof"`
}

type DungeonSettleNotify_WindFieldDungeonSettleInfo struct {
	WindFieldDungeonSettleInfo *WindFieldDungeonSettleInfo `protobuf:"bytes,1825,opt,name=wind_field_dungeon_settle_info,json=windFieldDungeonSettleInfo,proto3,oneof"`
}

type DungeonSettleNotify_EffigyChallengeV2SettleInfo struct {
	EffigyChallengeV2SettleInfo *EffigyChallengeV2SettleInfo `protobuf:"bytes,1802,opt,name=effigy_challenge_v2_settle_info,json=effigyChallengeV2SettleInfo,proto3,oneof"`
}

type DungeonSettleNotify_TeamChainSettleInfo struct {
	TeamChainSettleInfo *TeamChainSettleInfo `protobuf:"bytes,324,opt,name=team_chain_settle_info,json=teamChainSettleInfo,proto3,oneof"`
}

func (*DungeonSettleNotify_TowerLevelEndNotify) isDungeonSettleNotify_Detail() {}

func (*DungeonSettleNotify_TrialAvatarFirstPassDungeonNotify) isDungeonSettleNotify_Detail() {}

func (*DungeonSettleNotify_ChannellerSlabLoopDungeonResultInfo) isDungeonSettleNotify_Detail() {}

func (*DungeonSettleNotify_EffigyChallengeDungeonResultInfo) isDungeonSettleNotify_Detail() {}

func (*DungeonSettleNotify_RoguelikeDungeonSettleInfo) isDungeonSettleNotify_Detail() {}

func (*DungeonSettleNotify_CrystalLinkSettleInfo) isDungeonSettleNotify_Detail() {}

func (*DungeonSettleNotify_SummerTimeV2DungeonSettleInfo) isDungeonSettleNotify_Detail() {}

func (*DungeonSettleNotify_InstableSpraySettleInfo) isDungeonSettleNotify_Detail() {}

func (*DungeonSettleNotify_WindFieldDungeonSettleInfo) isDungeonSettleNotify_Detail() {}

func (*DungeonSettleNotify_EffigyChallengeV2SettleInfo) isDungeonSettleNotify_Detail() {}

func (*DungeonSettleNotify_TeamChainSettleInfo) isDungeonSettleNotify_Detail() {}

type DungeonPlayerDieNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrengthenPointDataMap map[uint32]*StrengthenPointData `protobuf:"bytes,15,rep,name=strengthen_point_data_map,json=strengthenPointDataMap,proto3" json:"strengthen_point_data_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WaitTime               uint32                          `protobuf:"varint,1,opt,name=wait_time,json=waitTime,proto3" json:"wait_time,omitempty"`
	DungeonId              uint32                          `protobuf:"varint,9,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	MurdererEntityId       uint32                          `protobuf:"varint,13,opt,name=murderer_entity_id,json=murdererEntityId,proto3" json:"murderer_entity_id,omitempty"`
	DieType                PlayerDieType                   `protobuf:"varint,3,opt,name=die_type,json=dieType,proto3,enum=proto.PlayerDieType" json:"die_type,omitempty"`
	ReviveCount            uint32                          `protobuf:"varint,6,opt,name=revive_count,json=reviveCount,proto3" json:"revive_count,omitempty"`
	// Types that are assignable to Entity:
	//
	//	*DungeonPlayerDieNotify_MonsterId
	//	*DungeonPlayerDieNotify_GadgetId
	Entity isDungeonPlayerDieNotify_Entity `protobuf_oneof:"entity"`
}

func (x *DungeonPlayerDieNotify) Reset() {
	*x = DungeonPlayerDieNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonPlayerDieNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonPlayerDieNotify) ProtoMessage() {}

func (x *DungeonPlayerDieNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonPlayerDieNotify.ProtoReflect.Descriptor instead.
func (*DungeonPlayerDieNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{21}
}

func (x *DungeonPlayerDieNotify) GetStrengthenPointDataMap() map[uint32]*StrengthenPointData {
	if x != nil {
		return x.StrengthenPointDataMap
	}
	return nil
}

func (x *DungeonPlayerDieNotify) GetWaitTime() uint32 {
	if x != nil {
		return x.WaitTime
	}
	return 0
}

func (x *DungeonPlayerDieNotify) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *DungeonPlayerDieNotify) GetMurdererEntityId() uint32 {
	if x != nil {
		return x.MurdererEntityId
	}
	return 0
}

func (x *DungeonPlayerDieNotify) GetDieType() PlayerDieType {
	if x != nil {
		return x.DieType
	}
	return PlayerDieType_PLAYER_DIE_NONE
}

func (x *DungeonPlayerDieNotify) GetReviveCount() uint32 {
	if x != nil {
		return x.ReviveCount
	}
	return 0
}

func (m *DungeonPlayerDieNotify) GetEntity() isDungeonPlayerDieNotify_Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (x *DungeonPlayerDieNotify) GetMonsterId() uint32 {
	if x, ok := x.GetEntity().(*DungeonPlayerDieNotify_MonsterId); ok {
		return x.MonsterId
	}
	return 0
}

func (x *DungeonPlayerDieNotify) GetGadgetId() uint32 {
	if x, ok := x.GetEntity().(*DungeonPlayerDieNotify_GadgetId); ok {
		return x.GadgetId
	}
	return 0
}

type isDungeonPlayerDieNotify_Entity interface {
	isDungeonPlayerDieNotify_Entity()
}

type DungeonPlayerDieNotify_MonsterId struct {
	MonsterId uint32 `protobuf:"varint,4,opt,name=monster_id,json=monsterId,proto3,oneof"`
}

type DungeonPlayerDieNotify_GadgetId struct {
	GadgetId uint32 `protobuf:"varint,8,opt,name=gadget_id,json=gadgetId,proto3,oneof"`
}

func (*DungeonPlayerDieNotify_MonsterId) isDungeonPlayerDieNotify_Entity() {}

func (*DungeonPlayerDieNotify_GadgetId) isDungeonPlayerDieNotify_Entity() {}

type DungeonDieOptionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DieOption         PlayerDieOption `protobuf:"varint,11,opt,name=die_option,json=dieOption,proto3,enum=proto.PlayerDieOption" json:"die_option,omitempty"`
	IsQuitImmediately bool            `protobuf:"varint,14,opt,name=is_quit_immediately,json=isQuitImmediately,proto3" json:"is_quit_immediately,omitempty"`
}

func (x *DungeonDieOptionReq) Reset() {
	*x = DungeonDieOptionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonDieOptionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonDieOptionReq) ProtoMessage() {}

func (x *DungeonDieOptionReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonDieOptionReq.ProtoReflect.Descriptor instead.
func (*DungeonDieOptionReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{22}
}

func (x *DungeonDieOptionReq) GetDieOption() PlayerDieOption {
	if x != nil {
		return x.DieOption
	}
	return PlayerDieOption_DIE_OPT_NONE
}

func (x *DungeonDieOptionReq) GetIsQuitImmediately() bool {
	if x != nil {
		return x.IsQuitImmediately
	}
	return false
}

type DungeonDieOptionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode     int32           `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ReviveCount uint32          `protobuf:"varint,10,opt,name=revive_count,json=reviveCount,proto3" json:"revive_count,omitempty"`
	DieOption   PlayerDieOption `protobuf:"varint,6,opt,name=die_option,json=dieOption,proto3,enum=proto.PlayerDieOption" json:"die_option,omitempty"`
}

func (x *DungeonDieOptionRsp) Reset() {
	*x = DungeonDieOptionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonDieOptionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonDieOptionRsp) ProtoMessage() {}

func (x *DungeonDieOptionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonDieOptionRsp.ProtoReflect.Descriptor instead.
func (*DungeonDieOptionRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{23}
}

func (x *DungeonDieOptionRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *DungeonDieOptionRsp) GetReviveCount() uint32 {
	if x != nil {
		return x.ReviveCount
	}
	return 0
}

func (x *DungeonDieOptionRsp) GetDieOption() PlayerDieOption {
	if x != nil {
		return x.DieOption
	}
	return PlayerDieOption_DIE_OPT_NONE
}

type DungeonShowReminderNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReminderId uint32 `protobuf:"varint,9,opt,name=reminder_id,json=reminderId,proto3" json:"reminder_id,omitempty"`
}

func (x *DungeonShowReminderNotify) Reset() {
	*x = DungeonShowReminderNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonShowReminderNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonShowReminderNotify) ProtoMessage() {}

func (x *DungeonShowReminderNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonShowReminderNotify.ProtoReflect.Descriptor instead.
func (*DungeonShowReminderNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{24}
}

func (x *DungeonShowReminderNotify) GetReminderId() uint32 {
	if x != nil {
		return x.ReminderId
	}
	return 0
}

type DungeonPlayerDieReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DieType   PlayerDieType `protobuf:"varint,6,opt,name=die_type,json=dieType,proto3,enum=proto.PlayerDieType" json:"die_type,omitempty"`
	DungeonId uint32        `protobuf:"varint,8,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
}

func (x *DungeonPlayerDieReq) Reset() {
	*x = DungeonPlayerDieReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonPlayerDieReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonPlayerDieReq) ProtoMessage() {}

func (x *DungeonPlayerDieReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonPlayerDieReq.ProtoReflect.Descriptor instead.
func (*DungeonPlayerDieReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{25}
}

func (x *DungeonPlayerDieReq) GetDieType() PlayerDieType {
	if x != nil {
		return x.DieType
	}
	return PlayerDieType_PLAYER_DIE_NONE
}

func (x *DungeonPlayerDieReq) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

type DungeonPlayerDieRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *DungeonPlayerDieRsp) Reset() {
	*x = DungeonPlayerDieRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonPlayerDieRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonPlayerDieRsp) ProtoMessage() {}

func (x *DungeonPlayerDieRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonPlayerDieRsp.ProtoReflect.Descriptor instead.
func (*DungeonPlayerDieRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{26}
}

func (x *DungeonPlayerDieRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type DungeonDataNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonDataMap map[uint32]uint32 `protobuf:"bytes,1,rep,name=dungeon_data_map,json=dungeonDataMap,proto3" json:"dungeon_data_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DungeonDataNotify) Reset() {
	*x = DungeonDataNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonDataNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonDataNotify) ProtoMessage() {}

func (x *DungeonDataNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonDataNotify.ProtoReflect.Descriptor instead.
func (*DungeonDataNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{27}
}

func (x *DungeonDataNotify) GetDungeonDataMap() map[uint32]uint32 {
	if x != nil {
		return x.DungeonDataMap
	}
	return nil
}

type DungeonChallengeBeginNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FatherIndex    uint32   `protobuf:"varint,5,opt,name=father_index,json=fatherIndex,proto3" json:"father_index,omitempty"`
	ParamList      []uint32 `protobuf:"varint,14,rep,packed,name=param_list,json=paramList,proto3" json:"param_list,omitempty"`
	ChallengeIndex uint32   `protobuf:"varint,6,opt,name=challenge_index,json=challengeIndex,proto3" json:"challenge_index,omitempty"`
	ChallengeId    uint32   `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	GroupId        uint32   `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UidList        []uint32 `protobuf:"varint,12,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"`
}

func (x *DungeonChallengeBeginNotify) Reset() {
	*x = DungeonChallengeBeginNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonChallengeBeginNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonChallengeBeginNotify) ProtoMessage() {}

func (x *DungeonChallengeBeginNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonChallengeBeginNotify.ProtoReflect.Descriptor instead.
func (*DungeonChallengeBeginNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{28}
}

func (x *DungeonChallengeBeginNotify) GetFatherIndex() uint32 {
	if x != nil {
		return x.FatherIndex
	}
	return 0
}

func (x *DungeonChallengeBeginNotify) GetParamList() []uint32 {
	if x != nil {
		return x.ParamList
	}
	return nil
}

func (x *DungeonChallengeBeginNotify) GetChallengeIndex() uint32 {
	if x != nil {
		return x.ChallengeIndex
	}
	return 0
}

func (x *DungeonChallengeBeginNotify) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

func (x *DungeonChallengeBeginNotify) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *DungeonChallengeBeginNotify) GetUidList() []uint32 {
	if x != nil {
		return x.UidList
	}
	return nil
}

type ChallengeBrief struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurProgress    uint32 `protobuf:"varint,9,opt,name=cur_progress,json=curProgress,proto3" json:"cur_progress,omitempty"`
	ChallengeIndex uint32 `protobuf:"varint,10,opt,name=challenge_index,json=challengeIndex,proto3" json:"challenge_index,omitempty"`
	IsSuccess      bool   `protobuf:"varint,4,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	ChallengeId    uint32 `protobuf:"varint,8,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (x *ChallengeBrief) Reset() {
	*x = ChallengeBrief{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeBrief) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeBrief) ProtoMessage() {}

func (x *ChallengeBrief) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeBrief.ProtoReflect.Descriptor instead.
func (*ChallengeBrief) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{29}
}

func (x *ChallengeBrief) GetCurProgress() uint32 {
	if x != nil {
		return x.CurProgress
	}
	return 0
}

func (x *ChallengeBrief) GetChallengeIndex() uint32 {
	if x != nil {
		return x.ChallengeIndex
	}
	return 0
}

func (x *ChallengeBrief) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *ChallengeBrief) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

type CustomDungeonResultInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLiked            bool                    `protobuf:"varint,12,opt,name=is_liked,json=isLiked,proto3" json:"is_liked,omitempty"`
	GotCoinNum         uint32                  `protobuf:"varint,9,opt,name=got_coin_num,json=gotCoinNum,proto3" json:"got_coin_num,omitempty"`
	ChildChallengeList []*ChallengeBrief       `protobuf:"bytes,6,rep,name=child_challenge_list,json=childChallengeList,proto3" json:"child_challenge_list,omitempty"`
	DungeonGuid        uint64                  `protobuf:"varint,3,opt,name=dungeon_guid,json=dungeonGuid,proto3" json:"dungeon_guid,omitempty"`
	FinishType         CustomDungeonFinishType `protobuf:"varint,7,opt,name=finish_type,json=finishType,proto3,enum=proto.CustomDungeonFinishType" json:"finish_type,omitempty"`
	TimeCost           uint32                  `protobuf:"varint,11,opt,name=time_cost,json=timeCost,proto3" json:"time_cost,omitempty"`
	IsArriveFinish     bool                    `protobuf:"varint,2,opt,name=is_arrive_finish,json=isArriveFinish,proto3" json:"is_arrive_finish,omitempty"`
	IsStored           bool                    `protobuf:"varint,14,opt,name=is_stored,json=isStored,proto3" json:"is_stored,omitempty"`
}

func (x *CustomDungeonResultInfo) Reset() {
	*x = CustomDungeonResultInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDungeonResultInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDungeonResultInfo) ProtoMessage() {}

func (x *CustomDungeonResultInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDungeonResultInfo.ProtoReflect.Descriptor instead.
func (*CustomDungeonResultInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{30}
}

func (x *CustomDungeonResultInfo) GetIsLiked() bool {
	if x != nil {
		return x.IsLiked
	}
	return false
}

func (x *CustomDungeonResultInfo) GetGotCoinNum() uint32 {
	if x != nil {
		return x.GotCoinNum
	}
	return 0
}

func (x *CustomDungeonResultInfo) GetChildChallengeList() []*ChallengeBrief {
	if x != nil {
		return x.ChildChallengeList
	}
	return nil
}

func (x *CustomDungeonResultInfo) GetDungeonGuid() uint64 {
	if x != nil {
		return x.DungeonGuid
	}
	return 0
}

func (x *CustomDungeonResultInfo) GetFinishType() CustomDungeonFinishType {
	if x != nil {
		return x.FinishType
	}
	return CustomDungeonFinishType_CUSTOM_DUNGEON_FINISH_PLAY_NORMAL
}

func (x *CustomDungeonResultInfo) GetTimeCost() uint32 {
	if x != nil {
		return x.TimeCost
	}
	return 0
}

func (x *CustomDungeonResultInfo) GetIsArriveFinish() bool {
	if x != nil {
		return x.IsArriveFinish
	}
	return false
}

func (x *CustomDungeonResultInfo) GetIsStored() bool {
	if x != nil {
		return x.IsStored
	}
	return false
}

type DungeonChallengeFinishNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrengthenPointDataMap map[uint32]*StrengthenPointData `protobuf:"bytes,13,rep,name=strengthen_point_data_map,json=strengthenPointDataMap,proto3" json:"strengthen_point_data_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FinishType             ChallengeFinishType             `protobuf:"varint,9,opt,name=finish_type,json=finishType,proto3,enum=proto.ChallengeFinishType" json:"finish_type,omitempty"`
	IsNewRecord            bool                            `protobuf:"varint,10,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
	ChallengeRecordType    uint32                          `protobuf:"varint,7,opt,name=challenge_record_type,json=challengeRecordType,proto3" json:"challenge_record_type,omitempty"`
	TimeCost               uint32                          `protobuf:"varint,4,opt,name=time_cost,json=timeCost,proto3" json:"time_cost,omitempty"`
	CurrentValue           uint32                          `protobuf:"varint,15,opt,name=current_value,json=currentValue,proto3" json:"current_value,omitempty"`
	IsSuccess              bool                            `protobuf:"varint,3,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	ChallengeIndex         uint32                          `protobuf:"varint,5,opt,name=challenge_index,json=challengeIndex,proto3" json:"challenge_index,omitempty"`
	// Types that are assignable to Detail:
	//
	//	*DungeonChallengeFinishNotify_ChannellerSlabLoopDungeonResultInfo
	//	*DungeonChallengeFinishNotify_EffigyChallengeDungeonResultInfo
	//	*DungeonChallengeFinishNotify_PotionDungeonResultInfo
	//	*DungeonChallengeFinishNotify_CustomDungeonResultInfo
	Detail isDungeonChallengeFinishNotify_Detail `protobuf_oneof:"detail"`
}

func (x *DungeonChallengeFinishNotify) Reset() {
	*x = DungeonChallengeFinishNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonChallengeFinishNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonChallengeFinishNotify) ProtoMessage() {}

func (x *DungeonChallengeFinishNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonChallengeFinishNotify.ProtoReflect.Descriptor instead.
func (*DungeonChallengeFinishNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{31}
}

func (x *DungeonChallengeFinishNotify) GetStrengthenPointDataMap() map[uint32]*StrengthenPointData {
	if x != nil {
		return x.StrengthenPointDataMap
	}
	return nil
}

func (x *DungeonChallengeFinishNotify) GetFinishType() ChallengeFinishType {
	if x != nil {
		return x.FinishType
	}
	return ChallengeFinishType_CHALLENGE_FINISH_TYPE_NONE
}

func (x *DungeonChallengeFinishNotify) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

func (x *DungeonChallengeFinishNotify) GetChallengeRecordType() uint32 {
	if x != nil {
		return x.ChallengeRecordType
	}
	return 0
}

func (x *DungeonChallengeFinishNotify) GetTimeCost() uint32 {
	if x != nil {
		return x.TimeCost
	}
	return 0
}

func (x *DungeonChallengeFinishNotify) GetCurrentValue() uint32 {
	if x != nil {
		return x.CurrentValue
	}
	return 0
}

func (x *DungeonChallengeFinishNotify) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *DungeonChallengeFinishNotify) GetChallengeIndex() uint32 {
	if x != nil {
		return x.ChallengeIndex
	}
	return 0
}

func (m *DungeonChallengeFinishNotify) GetDetail() isDungeonChallengeFinishNotify_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *DungeonChallengeFinishNotify) GetChannellerSlabLoopDungeonResultInfo() *ChannellerSlabLoopDungeonResultInfo {
	if x, ok := x.GetDetail().(*DungeonChallengeFinishNotify_ChannellerSlabLoopDungeonResultInfo); ok {
		return x.ChannellerSlabLoopDungeonResultInfo
	}
	return nil
}

func (x *DungeonChallengeFinishNotify) GetEffigyChallengeDungeonResultInfo() *EffigyChallengeDungeonResultInfo {
	if x, ok := x.GetDetail().(*DungeonChallengeFinishNotify_EffigyChallengeDungeonResultInfo); ok {
		return x.EffigyChallengeDungeonResultInfo
	}
	return nil
}

func (x *DungeonChallengeFinishNotify) GetPotionDungeonResultInfo() *PotionDungeonResultInfo {
	if x, ok := x.GetDetail().(*DungeonChallengeFinishNotify_PotionDungeonResultInfo); ok {
		return x.PotionDungeonResultInfo
	}
	return nil
}

func (x *DungeonChallengeFinishNotify) GetCustomDungeonResultInfo() *CustomDungeonResultInfo {
	if x, ok := x.GetDetail().(*DungeonChallengeFinishNotify_CustomDungeonResultInfo); ok {
		return x.CustomDungeonResultInfo
	}
	return nil
}

type isDungeonChallengeFinishNotify_Detail interface {
	isDungeonChallengeFinishNotify_Detail()
}

type DungeonChallengeFinishNotify_ChannellerSlabLoopDungeonResultInfo struct {
	ChannellerSlabLoopDungeonResultInfo *ChannellerSlabLoopDungeonResultInfo `protobuf:"bytes,1521,opt,name=channeller_slab_loop_dungeon_result_info,json=channellerSlabLoopDungeonResultInfo,proto3,oneof"`
}

type DungeonChallengeFinishNotify_EffigyChallengeDungeonResultInfo struct {
	EffigyChallengeDungeonResultInfo *EffigyChallengeDungeonResultInfo `protobuf:"bytes,1627,opt,name=effigy_challenge_dungeon_result_info,json=effigyChallengeDungeonResultInfo,proto3,oneof"`
}

type DungeonChallengeFinishNotify_PotionDungeonResultInfo struct {
	PotionDungeonResultInfo *PotionDungeonResultInfo `protobuf:"bytes,1824,opt,name=potion_dungeon_result_info,json=potionDungeonResultInfo,proto3,oneof"`
}

type DungeonChallengeFinishNotify_CustomDungeonResultInfo struct {
	CustomDungeonResultInfo *CustomDungeonResultInfo `protobuf:"bytes,1664,opt,name=custom_dungeon_result_info,json=customDungeonResultInfo,proto3,oneof"`
}

func (*DungeonChallengeFinishNotify_ChannellerSlabLoopDungeonResultInfo) isDungeonChallengeFinishNotify_Detail() {
}

func (*DungeonChallengeFinishNotify_EffigyChallengeDungeonResultInfo) isDungeonChallengeFinishNotify_Detail() {
}

func (*DungeonChallengeFinishNotify_PotionDungeonResultInfo) isDungeonChallengeFinishNotify_Detail() {
}

func (*DungeonChallengeFinishNotify_CustomDungeonResultInfo) isDungeonChallengeFinishNotify_Detail() {
}

type ChallengeDataNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value          uint32 `protobuf:"varint,8,opt,name=value,proto3" json:"value,omitempty"`
	ChallengeIndex uint32 `protobuf:"varint,2,opt,name=challenge_index,json=challengeIndex,proto3" json:"challenge_index,omitempty"`
	ParamIndex     uint32 `protobuf:"varint,9,opt,name=param_index,json=paramIndex,proto3" json:"param_index,omitempty"`
}

func (x *ChallengeDataNotify) Reset() {
	*x = ChallengeDataNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeDataNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeDataNotify) ProtoMessage() {}

func (x *ChallengeDataNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeDataNotify.ProtoReflect.Descriptor instead.
func (*ChallengeDataNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{32}
}

func (x *ChallengeDataNotify) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ChallengeDataNotify) GetChallengeIndex() uint32 {
	if x != nil {
		return x.ChallengeIndex
	}
	return 0
}

func (x *ChallengeDataNotify) GetParamIndex() uint32 {
	if x != nil {
		return x.ParamIndex
	}
	return 0
}

type DungeonFollowNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetUid uint32 `protobuf:"varint,8,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
}

func (x *DungeonFollowNotify) Reset() {
	*x = DungeonFollowNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonFollowNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonFollowNotify) ProtoMessage() {}

func (x *DungeonFollowNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonFollowNotify.ProtoReflect.Descriptor instead.
func (*DungeonFollowNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{33}
}

func (x *DungeonFollowNotify) GetTargetUid() uint32 {
	if x != nil {
		return x.TargetUid
	}
	return 0
}

type DungeonGetStatueDropReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DungeonGetStatueDropReq) Reset() {
	*x = DungeonGetStatueDropReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonGetStatueDropReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonGetStatueDropReq) ProtoMessage() {}

func (x *DungeonGetStatueDropReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonGetStatueDropReq.ProtoReflect.Descriptor instead.
func (*DungeonGetStatueDropReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{34}
}

type DungeonGetStatueDropRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,12,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *DungeonGetStatueDropRsp) Reset() {
	*x = DungeonGetStatueDropRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonGetStatueDropRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonGetStatueDropRsp) ProtoMessage() {}

func (x *DungeonGetStatueDropRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonGetStatueDropRsp.ProtoReflect.Descriptor instead.
func (*DungeonGetStatueDropRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{35}
}

func (x *DungeonGetStatueDropRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type ChallengeRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeRecordType uint32 `protobuf:"varint,14,opt,name=challenge_record_type,json=challengeRecordType,proto3" json:"challenge_record_type,omitempty"`
	ChallengeIndex      uint32 `protobuf:"varint,15,opt,name=challenge_index,json=challengeIndex,proto3" json:"challenge_index,omitempty"`
	ChallengeId         uint32 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	BestValue           uint32 `protobuf:"varint,8,opt,name=best_value,json=bestValue,proto3" json:"best_value,omitempty"`
}

func (x *ChallengeRecord) Reset() {
	*x = ChallengeRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeRecord) ProtoMessage() {}

func (x *ChallengeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeRecord.ProtoReflect.Descriptor instead.
func (*ChallengeRecord) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{36}
}

func (x *ChallengeRecord) GetChallengeRecordType() uint32 {
	if x != nil {
		return x.ChallengeRecordType
	}
	return 0
}

func (x *ChallengeRecord) GetChallengeIndex() uint32 {
	if x != nil {
		return x.ChallengeIndex
	}
	return 0
}

func (x *ChallengeRecord) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

func (x *ChallengeRecord) GetBestValue() uint32 {
	if x != nil {
		return x.BestValue
	}
	return 0
}

type ChallengeRecordNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId             uint32             `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ChallengeRecordList []*ChallengeRecord `protobuf:"bytes,5,rep,name=challenge_record_list,json=challengeRecordList,proto3" json:"challenge_record_list,omitempty"`
}

func (x *ChallengeRecordNotify) Reset() {
	*x = ChallengeRecordNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeRecordNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeRecordNotify) ProtoMessage() {}

func (x *ChallengeRecordNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeRecordNotify.ProtoReflect.Descriptor instead.
func (*ChallengeRecordNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{37}
}

func (x *ChallengeRecordNotify) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ChallengeRecordNotify) GetChallengeRecordList() []*ChallengeRecord {
	if x != nil {
		return x.ChallengeRecordList
	}
	return nil
}

type DungeonCandidateTeamAvatar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUid  uint32      `protobuf:"varint,2,opt,name=player_uid,json=playerUid,proto3" json:"player_uid,omitempty"`
	AvatarInfo *AvatarInfo `protobuf:"bytes,6,opt,name=avatar_info,json=avatarInfo,proto3" json:"avatar_info,omitempty"`
}

func (x *DungeonCandidateTeamAvatar) Reset() {
	*x = DungeonCandidateTeamAvatar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonCandidateTeamAvatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonCandidateTeamAvatar) ProtoMessage() {}

func (x *DungeonCandidateTeamAvatar) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonCandidateTeamAvatar.ProtoReflect.Descriptor instead.
func (*DungeonCandidateTeamAvatar) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{38}
}

func (x *DungeonCandidateTeamAvatar) GetPlayerUid() uint32 {
	if x != nil {
		return x.PlayerUid
	}
	return 0
}

func (x *DungeonCandidateTeamAvatar) GetAvatarInfo() *AvatarInfo {
	if x != nil {
		return x.AvatarInfo
	}
	return nil
}

type DungeonCandidateTeamInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerStateMap map[uint32]DungeonCandidateTeamPlayerState `protobuf:"bytes,10,rep,name=player_state_map,json=playerStateMap,proto3" json:"player_state_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=proto.DungeonCandidateTeamPlayerState"`
	DungeonId      uint32                                     `protobuf:"varint,9,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	ReadyPlayerUid []uint32                                   `protobuf:"varint,13,rep,packed,name=ready_player_uid,json=readyPlayerUid,proto3" json:"ready_player_uid,omitempty"`
	MatchType      uint32                                     `protobuf:"varint,2,opt,name=match_type,json=matchType,proto3" json:"match_type,omitempty"`
	AvatarList     []*DungeonCandidateTeamAvatar              `protobuf:"bytes,4,rep,name=avatar_list,json=avatarList,proto3" json:"avatar_list,omitempty"`
}

func (x *DungeonCandidateTeamInfoNotify) Reset() {
	*x = DungeonCandidateTeamInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonCandidateTeamInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonCandidateTeamInfoNotify) ProtoMessage() {}

func (x *DungeonCandidateTeamInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonCandidateTeamInfoNotify.ProtoReflect.Descriptor instead.
func (*DungeonCandidateTeamInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{39}
}

func (x *DungeonCandidateTeamInfoNotify) GetPlayerStateMap() map[uint32]DungeonCandidateTeamPlayerState {
	if x != nil {
		return x.PlayerStateMap
	}
	return nil
}

func (x *DungeonCandidateTeamInfoNotify) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *DungeonCandidateTeamInfoNotify) GetReadyPlayerUid() []uint32 {
	if x != nil {
		return x.ReadyPlayerUid
	}
	return nil
}

func (x *DungeonCandidateTeamInfoNotify) GetMatchType() uint32 {
	if x != nil {
		return x.MatchType
	}
	return 0
}

func (x *DungeonCandidateTeamInfoNotify) GetAvatarList() []*DungeonCandidateTeamAvatar {
	if x != nil {
		return x.AvatarList
	}
	return nil
}

type DungeonCandidateTeamInviteNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUid            uint32 `protobuf:"varint,5,opt,name=player_uid,json=playerUid,proto3" json:"player_uid,omitempty"`
	VaildDeadlineTimeSec uint32 `protobuf:"varint,9,opt,name=vaild_deadline_time_sec,json=vaildDeadlineTimeSec,proto3" json:"vaild_deadline_time_sec,omitempty"`
	DungeonId            uint32 `protobuf:"varint,6,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
}

func (x *DungeonCandidateTeamInviteNotify) Reset() {
	*x = DungeonCandidateTeamInviteNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonCandidateTeamInviteNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonCandidateTeamInviteNotify) ProtoMessage() {}

func (x *DungeonCandidateTeamInviteNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonCandidateTeamInviteNotify.ProtoReflect.Descriptor instead.
func (*DungeonCandidateTeamInviteNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{40}
}

func (x *DungeonCandidateTeamInviteNotify) GetPlayerUid() uint32 {
	if x != nil {
		return x.PlayerUid
	}
	return 0
}

func (x *DungeonCandidateTeamInviteNotify) GetVaildDeadlineTimeSec() uint32 {
	if x != nil {
		return x.VaildDeadlineTimeSec
	}
	return 0
}

func (x *DungeonCandidateTeamInviteNotify) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

type DungeonCandidateTeamRefuseNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUid uint32 `protobuf:"varint,3,opt,name=player_uid,json=playerUid,proto3" json:"player_uid,omitempty"`
}

func (x *DungeonCandidateTeamRefuseNotify) Reset() {
	*x = DungeonCandidateTeamRefuseNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonCandidateTeamRefuseNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonCandidateTeamRefuseNotify) ProtoMessage() {}

func (x *DungeonCandidateTeamRefuseNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonCandidateTeamRefuseNotify.ProtoReflect.Descriptor instead.
func (*DungeonCandidateTeamRefuseNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{41}
}

func (x *DungeonCandidateTeamRefuseNotify) GetPlayerUid() uint32 {
	if x != nil {
		return x.PlayerUid
	}
	return 0
}

type DungeonCandidateTeamPlayerLeaveNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason    DungeonCandidateTeamPlayerLeaveReason `protobuf:"varint,3,opt,name=reason,proto3,enum=proto.DungeonCandidateTeamPlayerLeaveReason" json:"reason,omitempty"`
	PlayerUid uint32                                `protobuf:"varint,13,opt,name=player_uid,json=playerUid,proto3" json:"player_uid,omitempty"`
}

func (x *DungeonCandidateTeamPlayerLeaveNotify) Reset() {
	*x = DungeonCandidateTeamPlayerLeaveNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonCandidateTeamPlayerLeaveNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonCandidateTeamPlayerLeaveNotify) ProtoMessage() {}

func (x *DungeonCandidateTeamPlayerLeaveNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonCandidateTeamPlayerLeaveNotify.ProtoReflect.Descriptor instead.
func (*DungeonCandidateTeamPlayerLeaveNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{42}
}

func (x *DungeonCandidateTeamPlayerLeaveNotify) GetReason() DungeonCandidateTeamPlayerLeaveReason {
	if x != nil {
		return x.Reason
	}
	return DungeonCandidateTeamPlayerLeaveReason_DUNGEON_CANDIDATE_TPLR_NORMAL
}

func (x *DungeonCandidateTeamPlayerLeaveNotify) GetPlayerUid() uint32 {
	if x != nil {
		return x.PlayerUid
	}
	return 0
}

type DungeonCandidateTeamDismissNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason    DungeonCandidateTeamDismissReason `protobuf:"varint,9,opt,name=reason,proto3,enum=proto.DungeonCandidateTeamDismissReason" json:"reason,omitempty"`
	PlayerUid uint32                            `protobuf:"varint,12,opt,name=player_uid,json=playerUid,proto3" json:"player_uid,omitempty"`
}

func (x *DungeonCandidateTeamDismissNotify) Reset() {
	*x = DungeonCandidateTeamDismissNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonCandidateTeamDismissNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonCandidateTeamDismissNotify) ProtoMessage() {}

func (x *DungeonCandidateTeamDismissNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonCandidateTeamDismissNotify.ProtoReflect.Descriptor instead.
func (*DungeonCandidateTeamDismissNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{43}
}

func (x *DungeonCandidateTeamDismissNotify) GetReason() DungeonCandidateTeamDismissReason {
	if x != nil {
		return x.Reason
	}
	return DungeonCandidateTeamDismissReason_DUNGEON_CANDIDATE_TPDR_NORMAL
}

func (x *DungeonCandidateTeamDismissNotify) GetPlayerUid() uint32 {
	if x != nil {
		return x.PlayerUid
	}
	return 0
}

type DungeonCandidateTeamCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointId   uint32 `protobuf:"varint,7,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
	DungeonId uint32 `protobuf:"varint,6,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
}

func (x *DungeonCandidateTeamCreateReq) Reset() {
	*x = DungeonCandidateTeamCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonCandidateTeamCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonCandidateTeamCreateReq) ProtoMessage() {}

func (x *DungeonCandidateTeamCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonCandidateTeamCreateReq.ProtoReflect.Descriptor instead.
func (*DungeonCandidateTeamCreateReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{44}
}

func (x *DungeonCandidateTeamCreateReq) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

func (x *DungeonCandidateTeamCreateReq) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

type DungeonCandidateTeamCreateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *DungeonCandidateTeamCreateRsp) Reset() {
	*x = DungeonCandidateTeamCreateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonCandidateTeamCreateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonCandidateTeamCreateRsp) ProtoMessage() {}

func (x *DungeonCandidateTeamCreateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonCandidateTeamCreateRsp.ProtoReflect.Descriptor instead.
func (*DungeonCandidateTeamCreateRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{45}
}

func (x *DungeonCandidateTeamCreateRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type DungeonCandidateTeamInviteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUids []uint32 `protobuf:"varint,5,rep,packed,name=player_uids,json=playerUids,proto3" json:"player_uids,omitempty"`
}

func (x *DungeonCandidateTeamInviteReq) Reset() {
	*x = DungeonCandidateTeamInviteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonCandidateTeamInviteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonCandidateTeamInviteReq) ProtoMessage() {}

func (x *DungeonCandidateTeamInviteReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonCandidateTeamInviteReq.ProtoReflect.Descriptor instead.
func (*DungeonCandidateTeamInviteReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{46}
}

func (x *DungeonCandidateTeamInviteReq) GetPlayerUids() []uint32 {
	if x != nil {
		return x.PlayerUids
	}
	return nil
}

type DungeonCandidateTeamInviteRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode           int32    `protobuf:"varint,12,opt,name=retcode,proto3" json:"retcode,omitempty"`
	InvalidPlayerUids []uint32 `protobuf:"varint,7,rep,packed,name=invalid_player_uids,json=invalidPlayerUids,proto3" json:"invalid_player_uids,omitempty"`
}

func (x *DungeonCandidateTeamInviteRsp) Reset() {
	*x = DungeonCandidateTeamInviteRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonCandidateTeamInviteRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonCandidateTeamInviteRsp) ProtoMessage() {}

func (x *DungeonCandidateTeamInviteRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonCandidateTeamInviteRsp.ProtoReflect.Descriptor instead.
func (*DungeonCandidateTeamInviteRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{47}
}

func (x *DungeonCandidateTeamInviteRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *DungeonCandidateTeamInviteRsp) GetInvalidPlayerUids() []uint32 {
	if x != nil {
		return x.InvalidPlayerUids
	}
	return nil
}

type DungeonCandidateTeamKickReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUid uint32 `protobuf:"varint,9,opt,name=player_uid,json=playerUid,proto3" json:"player_uid,omitempty"`
}

func (x *DungeonCandidateTeamKickReq) Reset() {
	*x = DungeonCandidateTeamKickReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonCandidateTeamKickReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonCandidateTeamKickReq) ProtoMessage() {}

func (x *DungeonCandidateTeamKickReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonCandidateTeamKickReq.ProtoReflect.Descriptor instead.
func (*DungeonCandidateTeamKickReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{48}
}

func (x *DungeonCandidateTeamKickReq) GetPlayerUid() uint32 {
	if x != nil {
		return x.PlayerUid
	}
	return 0
}

type DungeonCandidateTeamKickRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *DungeonCandidateTeamKickRsp) Reset() {
	*x = DungeonCandidateTeamKickRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonCandidateTeamKickRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonCandidateTeamKickRsp) ProtoMessage() {}

func (x *DungeonCandidateTeamKickRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonCandidateTeamKickRsp.ProtoReflect.Descriptor instead.
func (*DungeonCandidateTeamKickRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{49}
}

func (x *DungeonCandidateTeamKickRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type DungeonCandidateTeamLeaveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DungeonCandidateTeamLeaveReq) Reset() {
	*x = DungeonCandidateTeamLeaveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonCandidateTeamLeaveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonCandidateTeamLeaveReq) ProtoMessage() {}

func (x *DungeonCandidateTeamLeaveReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonCandidateTeamLeaveReq.ProtoReflect.Descriptor instead.
func (*DungeonCandidateTeamLeaveReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{50}
}

type DungeonCandidateTeamLeaveRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,14,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *DungeonCandidateTeamLeaveRsp) Reset() {
	*x = DungeonCandidateTeamLeaveRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonCandidateTeamLeaveRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonCandidateTeamLeaveRsp) ProtoMessage() {}

func (x *DungeonCandidateTeamLeaveRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonCandidateTeamLeaveRsp.ProtoReflect.Descriptor instead.
func (*DungeonCandidateTeamLeaveRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{51}
}

func (x *DungeonCandidateTeamLeaveRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type DungeonCandidateTeamReplyInviteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAccept bool `protobuf:"varint,5,opt,name=is_accept,json=isAccept,proto3" json:"is_accept,omitempty"`
}

func (x *DungeonCandidateTeamReplyInviteReq) Reset() {
	*x = DungeonCandidateTeamReplyInviteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonCandidateTeamReplyInviteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonCandidateTeamReplyInviteReq) ProtoMessage() {}

func (x *DungeonCandidateTeamReplyInviteReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonCandidateTeamReplyInviteReq.ProtoReflect.Descriptor instead.
func (*DungeonCandidateTeamReplyInviteReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{52}
}

func (x *DungeonCandidateTeamReplyInviteReq) GetIsAccept() bool {
	if x != nil {
		return x.IsAccept
	}
	return false
}

type DungeonCandidateTeamReplyInviteRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsTransPoint bool  `protobuf:"varint,4,opt,name=is_trans_point,json=isTransPoint,proto3" json:"is_trans_point,omitempty"`
	Retcode      int32 `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *DungeonCandidateTeamReplyInviteRsp) Reset() {
	*x = DungeonCandidateTeamReplyInviteRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonCandidateTeamReplyInviteRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonCandidateTeamReplyInviteRsp) ProtoMessage() {}

func (x *DungeonCandidateTeamReplyInviteRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonCandidateTeamReplyInviteRsp.ProtoReflect.Descriptor instead.
func (*DungeonCandidateTeamReplyInviteRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{53}
}

func (x *DungeonCandidateTeamReplyInviteRsp) GetIsTransPoint() bool {
	if x != nil {
		return x.IsTransPoint
	}
	return false
}

func (x *DungeonCandidateTeamReplyInviteRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type DungeonCandidateTeamSetReadyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsReady bool `protobuf:"varint,15,opt,name=is_ready,json=isReady,proto3" json:"is_ready,omitempty"`
}

func (x *DungeonCandidateTeamSetReadyReq) Reset() {
	*x = DungeonCandidateTeamSetReadyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonCandidateTeamSetReadyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonCandidateTeamSetReadyReq) ProtoMessage() {}

func (x *DungeonCandidateTeamSetReadyReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonCandidateTeamSetReadyReq.ProtoReflect.Descriptor instead.
func (*DungeonCandidateTeamSetReadyReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{54}
}

func (x *DungeonCandidateTeamSetReadyReq) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

type DungeonCandidateTeamSetReadyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,12,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *DungeonCandidateTeamSetReadyRsp) Reset() {
	*x = DungeonCandidateTeamSetReadyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonCandidateTeamSetReadyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonCandidateTeamSetReadyRsp) ProtoMessage() {}

func (x *DungeonCandidateTeamSetReadyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonCandidateTeamSetReadyRsp.ProtoReflect.Descriptor instead.
func (*DungeonCandidateTeamSetReadyRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{55}
}

func (x *DungeonCandidateTeamSetReadyRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type DungeonCandidateTeamChangeAvatarReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarGuidList []uint64 `protobuf:"varint,5,rep,packed,name=avatar_guid_list,json=avatarGuidList,proto3" json:"avatar_guid_list,omitempty"`
}

func (x *DungeonCandidateTeamChangeAvatarReq) Reset() {
	*x = DungeonCandidateTeamChangeAvatarReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonCandidateTeamChangeAvatarReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonCandidateTeamChangeAvatarReq) ProtoMessage() {}

func (x *DungeonCandidateTeamChangeAvatarReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonCandidateTeamChangeAvatarReq.ProtoReflect.Descriptor instead.
func (*DungeonCandidateTeamChangeAvatarReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{56}
}

func (x *DungeonCandidateTeamChangeAvatarReq) GetAvatarGuidList() []uint64 {
	if x != nil {
		return x.AvatarGuidList
	}
	return nil
}

type DungeonCandidateTeamChangeAvatarRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,4,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *DungeonCandidateTeamChangeAvatarRsp) Reset() {
	*x = DungeonCandidateTeamChangeAvatarRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonCandidateTeamChangeAvatarRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonCandidateTeamChangeAvatarRsp) ProtoMessage() {}

func (x *DungeonCandidateTeamChangeAvatarRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonCandidateTeamChangeAvatarRsp.ProtoReflect.Descriptor instead.
func (*DungeonCandidateTeamChangeAvatarRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{57}
}

func (x *DungeonCandidateTeamChangeAvatarRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type DailyDungeonEntryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonEntryConfigId      uint32            `protobuf:"varint,12,opt,name=dungeon_entry_config_id,json=dungeonEntryConfigId,proto3" json:"dungeon_entry_config_id,omitempty"`
	DungeonEntryId            uint32            `protobuf:"varint,15,opt,name=dungeon_entry_id,json=dungeonEntryId,proto3" json:"dungeon_entry_id,omitempty"`
	RecommendDungeonEntryInfo *DungeonEntryInfo `protobuf:"bytes,1,opt,name=recommend_dungeon_entry_info,json=recommendDungeonEntryInfo,proto3" json:"recommend_dungeon_entry_info,omitempty"`
	RecommendDungeonId        uint32            `protobuf:"varint,4,opt,name=recommend_dungeon_id,json=recommendDungeonId,proto3" json:"recommend_dungeon_id,omitempty"`
}

func (x *DailyDungeonEntryInfo) Reset() {
	*x = DailyDungeonEntryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyDungeonEntryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyDungeonEntryInfo) ProtoMessage() {}

func (x *DailyDungeonEntryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyDungeonEntryInfo.ProtoReflect.Descriptor instead.
func (*DailyDungeonEntryInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{58}
}

func (x *DailyDungeonEntryInfo) GetDungeonEntryConfigId() uint32 {
	if x != nil {
		return x.DungeonEntryConfigId
	}
	return 0
}

func (x *DailyDungeonEntryInfo) GetDungeonEntryId() uint32 {
	if x != nil {
		return x.DungeonEntryId
	}
	return 0
}

func (x *DailyDungeonEntryInfo) GetRecommendDungeonEntryInfo() *DungeonEntryInfo {
	if x != nil {
		return x.RecommendDungeonEntryInfo
	}
	return nil
}

func (x *DailyDungeonEntryInfo) GetRecommendDungeonId() uint32 {
	if x != nil {
		return x.RecommendDungeonId
	}
	return 0
}

type GetDailyDungeonEntryInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId uint32 `protobuf:"varint,15,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
}

func (x *GetDailyDungeonEntryInfoReq) Reset() {
	*x = GetDailyDungeonEntryInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailyDungeonEntryInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyDungeonEntryInfoReq) ProtoMessage() {}

func (x *GetDailyDungeonEntryInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyDungeonEntryInfoReq.ProtoReflect.Descriptor instead.
func (*GetDailyDungeonEntryInfoReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{59}
}

func (x *GetDailyDungeonEntryInfoReq) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

type GetDailyDungeonEntryInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DailyDungeonInfoList []*DailyDungeonEntryInfo `protobuf:"bytes,2,rep,name=daily_dungeon_info_list,json=dailyDungeonInfoList,proto3" json:"daily_dungeon_info_list,omitempty"`
	Retcode              int32                    `protobuf:"varint,14,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GetDailyDungeonEntryInfoRsp) Reset() {
	*x = GetDailyDungeonEntryInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailyDungeonEntryInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyDungeonEntryInfoRsp) ProtoMessage() {}

func (x *GetDailyDungeonEntryInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyDungeonEntryInfoRsp.ProtoReflect.Descriptor instead.
func (*GetDailyDungeonEntryInfoRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{60}
}

func (x *GetDailyDungeonEntryInfoRsp) GetDailyDungeonInfoList() []*DailyDungeonEntryInfo {
	if x != nil {
		return x.DailyDungeonInfoList
	}
	return nil
}

func (x *GetDailyDungeonEntryInfoRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type DungeonSlipRevivePointActivateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlipRevivePointId uint32 `protobuf:"varint,9,opt,name=slip_revive_point_id,json=slipRevivePointId,proto3" json:"slip_revive_point_id,omitempty"`
}

func (x *DungeonSlipRevivePointActivateReq) Reset() {
	*x = DungeonSlipRevivePointActivateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonSlipRevivePointActivateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonSlipRevivePointActivateReq) ProtoMessage() {}

func (x *DungeonSlipRevivePointActivateReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonSlipRevivePointActivateReq.ProtoReflect.Descriptor instead.
func (*DungeonSlipRevivePointActivateReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{61}
}

func (x *DungeonSlipRevivePointActivateReq) GetSlipRevivePointId() uint32 {
	if x != nil {
		return x.SlipRevivePointId
	}
	return 0
}

type DungeonSlipRevivePointActivateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlipRevivePointId uint32 `protobuf:"varint,14,opt,name=slip_revive_point_id,json=slipRevivePointId,proto3" json:"slip_revive_point_id,omitempty"`
	Retcode           int32  `protobuf:"varint,4,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *DungeonSlipRevivePointActivateRsp) Reset() {
	*x = DungeonSlipRevivePointActivateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonSlipRevivePointActivateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonSlipRevivePointActivateRsp) ProtoMessage() {}

func (x *DungeonSlipRevivePointActivateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonSlipRevivePointActivateRsp.ProtoReflect.Descriptor instead.
func (*DungeonSlipRevivePointActivateRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{62}
}

func (x *DungeonSlipRevivePointActivateRsp) GetSlipRevivePointId() uint32 {
	if x != nil {
		return x.SlipRevivePointId
	}
	return 0
}

func (x *DungeonSlipRevivePointActivateRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type DungeonInterruptChallengeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeIndex uint32 `protobuf:"varint,14,opt,name=challenge_index,json=challengeIndex,proto3" json:"challenge_index,omitempty"`
	GroupId        uint32 `protobuf:"varint,13,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ChallengeId    uint32 `protobuf:"varint,11,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (x *DungeonInterruptChallengeReq) Reset() {
	*x = DungeonInterruptChallengeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonInterruptChallengeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonInterruptChallengeReq) ProtoMessage() {}

func (x *DungeonInterruptChallengeReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonInterruptChallengeReq.ProtoReflect.Descriptor instead.
func (*DungeonInterruptChallengeReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{63}
}

func (x *DungeonInterruptChallengeReq) GetChallengeIndex() uint32 {
	if x != nil {
		return x.ChallengeIndex
	}
	return 0
}

func (x *DungeonInterruptChallengeReq) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *DungeonInterruptChallengeReq) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

type DungeonInterruptChallengeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode        int32  `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ChallengeIndex uint32 `protobuf:"varint,2,opt,name=challenge_index,json=challengeIndex,proto3" json:"challenge_index,omitempty"`
	GroupId        uint32 `protobuf:"varint,15,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ChallengeId    uint32 `protobuf:"varint,11,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (x *DungeonInterruptChallengeRsp) Reset() {
	*x = DungeonInterruptChallengeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonInterruptChallengeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonInterruptChallengeRsp) ProtoMessage() {}

func (x *DungeonInterruptChallengeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonInterruptChallengeRsp.ProtoReflect.Descriptor instead.
func (*DungeonInterruptChallengeRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{64}
}

func (x *DungeonInterruptChallengeRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *DungeonInterruptChallengeRsp) GetChallengeIndex() uint32 {
	if x != nil {
		return x.ChallengeIndex
	}
	return 0
}

func (x *DungeonInterruptChallengeRsp) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *DungeonInterruptChallengeRsp) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

type InteractDailyDungeonInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InteractDailyDungeonInfoNotify) Reset() {
	*x = InteractDailyDungeonInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractDailyDungeonInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractDailyDungeonInfoNotify) ProtoMessage() {}

func (x *InteractDailyDungeonInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractDailyDungeonInfoNotify.ProtoReflect.Descriptor instead.
func (*InteractDailyDungeonInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{65}
}

type DungeonRestartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DungeonRestartReq) Reset() {
	*x = DungeonRestartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonRestartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonRestartReq) ProtoMessage() {}

func (x *DungeonRestartReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonRestartReq.ProtoReflect.Descriptor instead.
func (*DungeonRestartReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{66}
}

type DungeonRestartRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonId uint32 `protobuf:"varint,15,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	Retcode   int32  `protobuf:"varint,9,opt,name=retcode,proto3" json:"retcode,omitempty"`
	PointId   uint32 `protobuf:"varint,14,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
}

func (x *DungeonRestartRsp) Reset() {
	*x = DungeonRestartRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonRestartRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonRestartRsp) ProtoMessage() {}

func (x *DungeonRestartRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonRestartRsp.ProtoReflect.Descriptor instead.
func (*DungeonRestartRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{67}
}

func (x *DungeonRestartRsp) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *DungeonRestartRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *DungeonRestartRsp) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

type DungeonRestartInviteNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUid uint32 `protobuf:"varint,3,opt,name=player_uid,json=playerUid,proto3" json:"player_uid,omitempty"`
	Cd        uint32 `protobuf:"varint,15,opt,name=cd,proto3" json:"cd,omitempty"`
	PointId   uint32 `protobuf:"varint,13,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
	DungeonId uint32 `protobuf:"varint,10,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
}

func (x *DungeonRestartInviteNotify) Reset() {
	*x = DungeonRestartInviteNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonRestartInviteNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonRestartInviteNotify) ProtoMessage() {}

func (x *DungeonRestartInviteNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonRestartInviteNotify.ProtoReflect.Descriptor instead.
func (*DungeonRestartInviteNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{68}
}

func (x *DungeonRestartInviteNotify) GetPlayerUid() uint32 {
	if x != nil {
		return x.PlayerUid
	}
	return 0
}

func (x *DungeonRestartInviteNotify) GetCd() uint32 {
	if x != nil {
		return x.Cd
	}
	return 0
}

func (x *DungeonRestartInviteNotify) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

func (x *DungeonRestartInviteNotify) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

type DungeonRestartInviteReplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAccept bool `protobuf:"varint,11,opt,name=is_accept,json=isAccept,proto3" json:"is_accept,omitempty"`
}

func (x *DungeonRestartInviteReplyReq) Reset() {
	*x = DungeonRestartInviteReplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonRestartInviteReplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonRestartInviteReplyReq) ProtoMessage() {}

func (x *DungeonRestartInviteReplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonRestartInviteReplyReq.ProtoReflect.Descriptor instead.
func (*DungeonRestartInviteReplyReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{69}
}

func (x *DungeonRestartInviteReplyReq) GetIsAccept() bool {
	if x != nil {
		return x.IsAccept
	}
	return false
}

type DungeonRestartInviteReplyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAccept     bool  `protobuf:"varint,10,opt,name=is_accept,json=isAccept,proto3" json:"is_accept,omitempty"`
	IsTransPoint bool  `protobuf:"varint,1,opt,name=is_trans_point,json=isTransPoint,proto3" json:"is_trans_point,omitempty"`
	Retcode      int32 `protobuf:"varint,9,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *DungeonRestartInviteReplyRsp) Reset() {
	*x = DungeonRestartInviteReplyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonRestartInviteReplyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonRestartInviteReplyRsp) ProtoMessage() {}

func (x *DungeonRestartInviteReplyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonRestartInviteReplyRsp.ProtoReflect.Descriptor instead.
func (*DungeonRestartInviteReplyRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{70}
}

func (x *DungeonRestartInviteReplyRsp) GetIsAccept() bool {
	if x != nil {
		return x.IsAccept
	}
	return false
}

func (x *DungeonRestartInviteReplyRsp) GetIsTransPoint() bool {
	if x != nil {
		return x.IsTransPoint
	}
	return false
}

func (x *DungeonRestartInviteReplyRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type DungeonRestartInviteReplyNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAccept  bool   `protobuf:"varint,6,opt,name=is_accept,json=isAccept,proto3" json:"is_accept,omitempty"`
	PlayerUid uint32 `protobuf:"varint,9,opt,name=player_uid,json=playerUid,proto3" json:"player_uid,omitempty"`
}

func (x *DungeonRestartInviteReplyNotify) Reset() {
	*x = DungeonRestartInviteReplyNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonRestartInviteReplyNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonRestartInviteReplyNotify) ProtoMessage() {}

func (x *DungeonRestartInviteReplyNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonRestartInviteReplyNotify.ProtoReflect.Descriptor instead.
func (*DungeonRestartInviteReplyNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{71}
}

func (x *DungeonRestartInviteReplyNotify) GetIsAccept() bool {
	if x != nil {
		return x.IsAccept
	}
	return false
}

func (x *DungeonRestartInviteReplyNotify) GetPlayerUid() uint32 {
	if x != nil {
		return x.PlayerUid
	}
	return 0
}

type DungeonRestartResultNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAddAccpet bool `protobuf:"varint,9,opt,name=is_add_accpet,json=isAddAccpet,proto3" json:"is_add_accpet,omitempty"`
}

func (x *DungeonRestartResultNotify) Reset() {
	*x = DungeonRestartResultNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonRestartResultNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonRestartResultNotify) ProtoMessage() {}

func (x *DungeonRestartResultNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonRestartResultNotify.ProtoReflect.Descriptor instead.
func (*DungeonRestartResultNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{72}
}

func (x *DungeonRestartResultNotify) GetIsAddAccpet() bool {
	if x != nil {
		return x.IsAddAccpet
	}
	return false
}

type DungeonCandidateTeamSetChangingAvatarReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsChangingAvatar bool `protobuf:"varint,12,opt,name=is_changing_avatar,json=isChangingAvatar,proto3" json:"is_changing_avatar,omitempty"`
}

func (x *DungeonCandidateTeamSetChangingAvatarReq) Reset() {
	*x = DungeonCandidateTeamSetChangingAvatarReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonCandidateTeamSetChangingAvatarReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonCandidateTeamSetChangingAvatarReq) ProtoMessage() {}

func (x *DungeonCandidateTeamSetChangingAvatarReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonCandidateTeamSetChangingAvatarReq.ProtoReflect.Descriptor instead.
func (*DungeonCandidateTeamSetChangingAvatarReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{73}
}

func (x *DungeonCandidateTeamSetChangingAvatarReq) GetIsChangingAvatar() bool {
	if x != nil {
		return x.IsChangingAvatar
	}
	return false
}

type DungeonCandidateTeamSetChangingAvatarRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *DungeonCandidateTeamSetChangingAvatarRsp) Reset() {
	*x = DungeonCandidateTeamSetChangingAvatarRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonCandidateTeamSetChangingAvatarRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonCandidateTeamSetChangingAvatarRsp) ProtoMessage() {}

func (x *DungeonCandidateTeamSetChangingAvatarRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonCandidateTeamSetChangingAvatarRsp.ProtoReflect.Descriptor instead.
func (*DungeonCandidateTeamSetChangingAvatarRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{74}
}

func (x *DungeonCandidateTeamSetChangingAvatarRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type MistTrialFloorLevelNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FloorLevel     uint32 `protobuf:"varint,7,opt,name=floor_level,json=floorLevel,proto3" json:"floor_level,omitempty"`
	DungeonSceneId uint32 `protobuf:"varint,14,opt,name=dungeon_scene_id,json=dungeonSceneId,proto3" json:"dungeon_scene_id,omitempty"`
}

func (x *MistTrialFloorLevelNotify) Reset() {
	*x = MistTrialFloorLevelNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MistTrialFloorLevelNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MistTrialFloorLevelNotify) ProtoMessage() {}

func (x *MistTrialFloorLevelNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MistTrialFloorLevelNotify.ProtoReflect.Descriptor instead.
func (*MistTrialFloorLevelNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{75}
}

func (x *MistTrialFloorLevelNotify) GetFloorLevel() uint32 {
	if x != nil {
		return x.FloorLevel
	}
	return 0
}

func (x *MistTrialFloorLevelNotify) GetDungeonSceneId() uint32 {
	if x != nil {
		return x.DungeonSceneId
	}
	return 0
}

type DungeonReviseLevelNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneLevel  uint32 `protobuf:"varint,5,opt,name=scene_level,json=sceneLevel,proto3" json:"scene_level,omitempty"`
	ReviseLevel uint32 `protobuf:"varint,10,opt,name=revise_level,json=reviseLevel,proto3" json:"revise_level,omitempty"`
	DungeonId   uint32 `protobuf:"varint,3,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
}

func (x *DungeonReviseLevelNotify) Reset() {
	*x = DungeonReviseLevelNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_dungeon_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonReviseLevelNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonReviseLevelNotify) ProtoMessage() {}

func (x *DungeonReviseLevelNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_dungeon_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonReviseLevelNotify.ProtoReflect.Descriptor instead.
func (*DungeonReviseLevelNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_dungeon_proto_rawDescGZIP(), []int{76}
}

func (x *DungeonReviseLevelNotify) GetSceneLevel() uint32 {
	if x != nil {
		return x.SceneLevel
	}
	return 0
}

func (x *DungeonReviseLevelNotify) GetReviseLevel() uint32 {
	if x != nil {
		return x.ReviseLevel
	}
	return 0
}

func (x *DungeonReviseLevelNotify) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

var File_cmd_cmd_dungeon_proto protoreflect.FileDescriptor

var file_cmd_cmd_dungeon_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x6d, 0x64, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6d,
	0x64, 0x2f, 0x63, 0x6d, 0x64, 0x5f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x6d, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf1, 0x01, 0x0a, 0x13, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x13, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x50, 0x61, 0x69, 0x72, 0x52, 0x10, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64,
	0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06,
	0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xcc, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x90, 0x03,
	0x0a, 0x10, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x62, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x4e,
	0x75, 0x6d, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x6d, 0x61, 0x78, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x1f, 0x77,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x6e,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x65,
	0x6b, 0x6c, 0x79, 0x42, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x73, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1b, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79,
	0x42, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x73, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x61, 0x73, 0x73, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x22, 0xc6, 0x01, 0x0a, 0x15, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x45, 0x0a, 0x12, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xe9, 0x02, 0x0a, 0x13, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73,
	0x70, 0x12, 0x45, 0x0a, 0x12, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x18, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x15, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44,
	0x5f, 0x49, 0x44, 0x10, 0xe6, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x4b, 0x0a, 0x13, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x40, 0x0a, 0x0e,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49,
	0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43,
	0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x90, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xba, 0x01, 0x0a,
	0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d,
	0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xa7, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xc5, 0x01, 0x0a, 0x14, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x69, 0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x71, 0x75, 0x69, 0x74, 0x5f, 0x69, 0x6d,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x69, 0x73, 0x51, 0x75, 0x69, 0x74, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65,
	0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x62, 0x0a,
	0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x8b, 0x07, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45,
	0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10,
	0x01, 0x22, 0x9a, 0x01, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x69, 0x74,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x99, 0x07, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xb0,
	0x01, 0x0a, 0x15, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x57, 0x61, 0x79, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x61,
	0x64, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x64, 0x64, 0x12,
	0x31, 0x0a, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x57, 0x61, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10,
	0x87, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f,
	0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10,
	0x01, 0x22, 0xa2, 0x01, 0x0a, 0x1a, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x57, 0x61, 0x79,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x20, 0x0a, 0x0c, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x77, 0x61, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10,
	0xde, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f,
	0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xa7, 0x01, 0x0a, 0x1a, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x57, 0x61, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x77, 0x61, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xcd,
	0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01,
	0x22, 0x51, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x73,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x1b, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a,
	0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8f, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x79,
	0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x16, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6b, 0x69, 0x6c, 0x6c, 0x45,
	0x6c, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x73, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x4d, 0x6f, 0x73, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x22, 0xa5, 0x01, 0x0a, 0x1d, 0x53,
	0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x32, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74,
	0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x75, 0x72,
	0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x75, 0x72,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x1e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x70, 0x72, 0x61, 0x79, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x22, 0xc8, 0x01, 0x0a, 0x1a, 0x57, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x12, 0x61, 0x66, 0x74, 0x65, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x66, 0x61,
	0x69, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xea,
	0x02, 0x0a, 0x1b, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x56, 0x32, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45,
	0x0a, 0x1f, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x68,
	0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x69, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x69, 0x64,
	0x12, 0x3a, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x17, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x12,
	0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x19, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x22, 0xb4, 0x01, 0x0a, 0x13,
	0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x22, 0xc4, 0x0f, 0x0a, 0x13, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x71, 0x0a, 0x19, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x73, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x61, 0x70, 0x12, 0x54, 0x0a, 0x14, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c,
	0x66, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f,
	0x73, 0x68, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x68, 0x6f,
	0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x68,
	0x6f, 0x77, 0x12, 0x52, 0x0a, 0x16, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0xdf, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48,
	0x00, 0x52, 0x13, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x64,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x7e, 0x0a, 0x26, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x18, 0xfb, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x48, 0x00, 0x52, 0x21, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x84, 0x01, 0x0a, 0x28, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x61, 0x62, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x5f,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0xae, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61,
	0x62, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x23, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x7a, 0x0a,
	0x24, 0x65, 0x66, 0x66, 0x69, 0x67, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x20, 0x65, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x67, 0x0a, 0x1d, 0x72, 0x6f, 0x67,
	0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xca, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c,
	0x69, 0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b,
	0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x5e, 0x0a, 0x18, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x70,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x79,
	0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x63, 0x72, 0x79,
	0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x72, 0x0a, 0x22, 0x73, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x76, 0x32, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xda, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x56, 0x32, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x56, 0x32, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x65, 0x0a, 0x1a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x70, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61,
	0x79, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70,
	0x72, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x68, 0x0a,
	0x1e, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0xa1, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x69, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x77, 0x69, 0x6e,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6b, 0x0a, 0x1f, 0x65, 0x66, 0x66, 0x69, 0x67,
	0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x76, 0x32, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x8a, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x56, 0x32, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x65, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x56, 0x32, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x16, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xc4,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x13, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x65, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x4f, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xe7, 0x07,
	0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53,
	0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xcc, 0x04, 0x0a, 0x16, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x69, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x74, 0x0a, 0x19, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x69, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65,
	0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x16, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61,
	0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x77,
	0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x75, 0x72, 0x64, 0x65, 0x72,
	0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x6d, 0x75, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x64, 0x69, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x69, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x64, 0x69,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x76,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x67, 0x61, 0x64,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08,
	0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x1a, 0x65, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xa3, 0x07, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xe0, 0x01, 0x0a, 0x13, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x44, 0x69, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x35, 0x0a, 0x0a, 0x64, 0x69, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x69, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x71, 0x75,
	0x69, 0x74, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x51, 0x75, 0x69, 0x74, 0x49, 0x6d, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d,
	0x44, 0x5f, 0x49, 0x44, 0x10, 0xcf, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xd8, 0x01, 0x0a, 0x13,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x44, 0x69, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x35, 0x0a, 0x0a, 0x64, 0x69, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x69, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d,
	0x44, 0x5f, 0x49, 0x44, 0x10, 0xb4, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x8b, 0x01, 0x0a, 0x19, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x10, 0xe5, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x1a, 0x02, 0x10, 0x01, 0x22, 0xc9, 0x01, 0x0a, 0x13, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x69, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x08,
	0x64, 0x69, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x69, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x64, 0x69, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x05,
	0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xd5, 0x07, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c,
	0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01,
	0x22, 0x7e, 0x0a, 0x13, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x69, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x89,
	0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01,
	0x22, 0xfd, 0x01, 0x0a, 0x11, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x56, 0x0a, 0x10, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x1a, 0x41,
	0x0a, 0x13, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xd6,
	0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01,
	0x22, 0xb0, 0x02, 0x0a, 0x1b, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x69, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49,
	0x44, 0x10, 0xb3, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45,
	0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a,
	0x02, 0x10, 0x01, 0x22, 0x9e, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75,
	0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x49, 0x64, 0x22, 0xe7, 0x02, 0x0a, 0x17, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x67,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x67, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x47, 0x0a,
	0x14, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x72, 0x69,
	0x65, 0x66, 0x52, 0x12, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x61, 0x72,
	0x72, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x22, 0xbc,
	0x08, 0x0a, 0x1c, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x7a, 0x0a, 0x19, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x16, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x12, 0x3b, 0x0a, 0x0b, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e,
	0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x84, 0x01, 0x0a, 0x28, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x61, 0x62, 0x5f, 0x6c,
	0x6f, 0x6f, 0x70, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xf1, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x53, 0x6c, 0x61, 0x62, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x23, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x4c, 0x6f, 0x6f, 0x70,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x7a, 0x0a, 0x24, 0x65, 0x66, 0x66, 0x69, 0x67, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xdb, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x20, 0x65, 0x66, 0x66,
	0x69, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5e, 0x0a,
	0x1a, 0x70, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xa0, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x70, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5e, 0x0a,
	0x1a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x80, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x65, 0x0a,
	0x1b, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49,
	0x44, 0x10, 0xab, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45,
	0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a,
	0x02, 0x10, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xc4, 0x01,
	0x0a, 0x13, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x10, 0xb9, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x1a, 0x02, 0x10, 0x01, 0x22, 0x83, 0x01, 0x0a, 0x13, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43,
	0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x9a, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x7d, 0x0a, 0x17, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x65, 0x44, 0x72,
	0x6f, 0x70, 0x52, 0x65, 0x71, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x10, 0xc5, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x17, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x65, 0x44, 0x72,
	0x6f, 0x70, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x88, 0x07, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xb0,
	0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xcd, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x13, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10,
	0xe1, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f,
	0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10,
	0x01, 0x22, 0x6f, 0x0a, 0x1a, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x32,
	0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xeb, 0x03, 0x0a, 0x1e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x63, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x69, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x9f,
	0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01,
	0x22, 0xe6, 0x01, 0x0a, 0x20, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x55, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x76, 0x61, 0x69, 0x6c, 0x64, 0x5f, 0x64, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x76, 0x61, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d,
	0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xe2, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x90, 0x01, 0x0a, 0x20, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0x4d, 0x0a,
	0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xdc, 0x07, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45,
	0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xdb, 0x01, 0x0a,
	0x25, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43,
	0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x9e, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xd3, 0x01, 0x0a, 0x21, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x69,
	0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xc3,
	0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01,
	0x22, 0xbd, 0x01, 0x0a, 0x1d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x05,
	0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xe3, 0x07, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c,
	0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01,
	0x22, 0x88, 0x01, 0x0a, 0x1d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x05,
	0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x8a, 0x07, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c,
	0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xa4, 0x01, 0x0a, 0x1d,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x69, 0x64, 0x73, 0x22, 0x62,
	0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xa6, 0x07, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52,
	0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02,
	0x10, 0x01, 0x22, 0xb8, 0x01, 0x0a, 0x1d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x69, 0x64, 0x73, 0x22, 0x4d,
	0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xb6, 0x07, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52,
	0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xa0, 0x01,
	0x0a, 0x1b, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4b, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x05,
	0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xaf, 0x07, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c,
	0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01,
	0x22, 0x86, 0x01, 0x0a, 0x1b, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4b, 0x69, 0x63, 0x6b, 0x52, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d,
	0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xce, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x1c, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d,
	0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xd0, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x87,
	0x01, 0x0a, 0x1c, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64,
	0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06,
	0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xb2, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xa5, 0x01, 0x0a, 0x22, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x22, 0x62, 0x0a, 0x05,
	0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xad, 0x07, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c,
	0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01,
	0x22, 0xb3, 0x01, 0x0a, 0x22, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d,
	0x44, 0x5f, 0x49, 0x44, 0x10, 0xb5, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xa0, 0x01, 0x0a, 0x1f, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x10, 0xdf, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x8a, 0x01, 0x0a, 0x1f, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x53, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d,
	0x44, 0x5f, 0x49, 0x44, 0x10, 0x9c, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xb3, 0x01, 0x0a, 0x23, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x28,
	0x0a, 0x10, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x47, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49,
	0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43,
	0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xbc, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x8e, 0x01, 0x0a,
	0x23, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4d,
	0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xae, 0x07, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52,
	0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x84, 0x02,
	0x0a, 0x15, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x1c, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x19, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x22,
	0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xa2, 0x07, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53,
	0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a,
	0x02, 0x10, 0x01, 0x22, 0xdb, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x17, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x14, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10,
	0xc7, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f,
	0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10,
	0x01, 0x22, 0xb8, 0x01, 0x0a, 0x21, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x6c, 0x69,
	0x70, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6c, 0x69, 0x70, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x76, 0x69, 0x76,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49,
	0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43,
	0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xbe, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xbd, 0x01, 0x0a,
	0x21, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x76, 0x69,
	0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52,
	0x73, 0x70, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6c, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76,
	0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x73, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a,
	0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xca, 0x07, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45,
	0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xe9, 0x01, 0x0a,
	0x1c, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70,
	0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49,
	0x44, 0x10, 0x95, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45,
	0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xee, 0x01, 0x0a, 0x1c, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d,
	0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x86, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x84, 0x01, 0x0a, 0x1e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x22, 0x62, 0x0a, 0x05,
	0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x97, 0x07, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c,
	0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01,
	0x22, 0x77, 0x0a, 0x11, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x10, 0xc1, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xb6, 0x01, 0x0a, 0x11, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x73, 0x70, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44,
	0x10, 0xa1, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02,
	0x10, 0x01, 0x22, 0xe9, 0x01, 0x0a, 0x1a, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x69, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x63, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x63, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d,
	0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xbd, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x9f,
	0x01, 0x0a, 0x1c, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x22, 0x62, 0x0a, 0x05,
	0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xe8, 0x07, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c,
	0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01,
	0x22, 0xca, 0x01, 0x0a, 0x1c, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x73,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4d,
	0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x94, 0x07, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52,
	0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xc1, 0x01,
	0x0a, 0x1f, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0x62, 0x0a,
	0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xdb, 0x07, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45,
	0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10,
	0x01, 0x22, 0xa4, 0x01, 0x0a, 0x1a, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x70, 0x65,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x64, 0x64, 0x41, 0x63,
	0x63, 0x70, 0x65, 0x74, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49,
	0x44, 0x10, 0xac, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45,
	0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xbc, 0x01, 0x0a, 0x28, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x69, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44,
	0x10, 0x96, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54,
	0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x28, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4d,
	0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xc6, 0x07, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52,
	0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xca, 0x01,
	0x0a, 0x19, 0x4d, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x6f, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x10,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4d, 0x44,
	0x5f, 0x49, 0x44, 0x10, 0xc8, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xe1, 0x01, 0x0a, 0x18, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x05, 0x43, 0x6d,
	0x64, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x06, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xa5, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e,
	0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0xde,
	0x01, 0x0a, 0x1a, 0x57, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x1c, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44, 0x55, 0x4e, 0x47,
	0x45, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x1e, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44, 0x55,
	0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x57, 0x49, 0x4e, 0x44,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x44,
	0x49, 0x45, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f,
	0x4c, 0x55, 0x41, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x10, 0x04, 0x2a,
	0xe7, 0x01, 0x0a, 0x0f, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x55,
	0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x49,
	0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x55, 0x4e,
	0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x44,
	0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x4f, 0x57, 0x45,
	0x52, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x49, 0x44, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x44,
	0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x4f, 0x57, 0x45,
	0x52, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x49, 0x44, 0x10, 0x05, 0x2a, 0x96, 0x01, 0x0a, 0x13, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x46,
	0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x46,
	0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10,
	0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x46,
	0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x10,
	0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x46,
	0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45,
	0x10, 0x03, 0x2a, 0xb4, 0x01, 0x0a, 0x17, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x21, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e,
	0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x59, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x49,
	0x53, 0x48, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x59, 0x10, 0x02, 0x12, 0x2a, 0x0a,
	0x26, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f,
	0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x03, 0x2a, 0xb0, 0x01, 0x0a, 0x25, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x43,
	0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x50, 0x4c, 0x52, 0x5f, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f,
	0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x50, 0x4c, 0x52,
	0x5f, 0x44, 0x49, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f,
	0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x50, 0x4c, 0x52,
	0x5f, 0x42, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x55,
	0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x03, 0x2a, 0x8d, 0x01, 0x0a,
	0x21, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x43, 0x41,
	0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x50, 0x44, 0x52, 0x5f, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e,
	0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x50, 0x44, 0x52, 0x5f,
	0x44, 0x49, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e,
	0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x50, 0x44, 0x52, 0x5f,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x02, 0x2a, 0x87, 0x01, 0x0a,
	0x14, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01,
	0x12, 0x24, 0x0a, 0x20, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x45, 0x5f, 0x52,
	0x45, 0x54, 0x52, 0x59, 0x10, 0x02, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x79, 0x76, 0x61, 0x74, 0x2d, 0x68, 0x65, 0x6c, 0x70,
	0x65, 0x72, 0x2f, 0x68, 0x6b, 0x34, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cmd_cmd_dungeon_proto_rawDescOnce sync.Once
	file_cmd_cmd_dungeon_proto_rawDescData = file_cmd_cmd_dungeon_proto_rawDesc
)

func file_cmd_cmd_dungeon_proto_rawDescGZIP() []byte {
	file_cmd_cmd_dungeon_proto_rawDescOnce.Do(func() {
		file_cmd_cmd_dungeon_proto_rawDescData = protoimpl.X.CompressGZIP(file_cmd_cmd_dungeon_proto_rawDescData)
	})
	return file_cmd_cmd_dungeon_proto_rawDescData
}

var file_cmd_cmd_dungeon_proto_enumTypes = make([]protoimpl.EnumInfo, 68)
var file_cmd_cmd_dungeon_proto_msgTypes = make([]protoimpl.MessageInfo, 83)
var file_cmd_cmd_dungeon_proto_goTypes = []interface{}{
	(WindFieldDungeonFailReason)(0),                     // 0: proto.WindFieldDungeonFailReason
	(DungeonDataType)(0),                                // 1: proto.DungeonDataType
	(ChallengeFinishType)(0),                            // 2: proto.ChallengeFinishType
	(CustomDungeonFinishType)(0),                        // 3: proto.CustomDungeonFinishType
	(DungeonCandidateTeamPlayerLeaveReason)(0),          // 4: proto.DungeonCandidateTeamPlayerLeaveReason
	(DungeonCandidateTeamDismissReason)(0),              // 5: proto.DungeonCandidateTeamDismissReason
	(DungeonRestartReason)(0),                           // 6: proto.DungeonRestartReason
	(DungeonEntryInfoReq_CmdId)(0),                      // 7: proto.DungeonEntryInfoReq.CmdId
	(DungeonEntryInfoRsp_CmdId)(0),                      // 8: proto.DungeonEntryInfoRsp.CmdId
	(PlayerEnterDungeonReq_CmdId)(0),                    // 9: proto.PlayerEnterDungeonReq.CmdId
	(PlayerEnterDungeonRsp_CmdId)(0),                    // 10: proto.PlayerEnterDungeonRsp.CmdId
	(PlayerQuitDungeonReq_CmdId)(0),                     // 11: proto.PlayerQuitDungeonReq.CmdId
	(PlayerQuitDungeonRsp_CmdId)(0),                     // 12: proto.PlayerQuitDungeonRsp.CmdId
	(DungeonWayPointNotify_CmdId)(0),                    // 13: proto.DungeonWayPointNotify.CmdId
	(DungeonWayPointActivateReq_CmdId)(0),               // 14: proto.DungeonWayPointActivateReq.CmdId
	(DungeonWayPointActivateRsp_CmdId)(0),               // 15: proto.DungeonWayPointActivateRsp.CmdId
	(DungeonSettleNotify_CmdId)(0),                      // 16: proto.DungeonSettleNotify.CmdId
	(DungeonPlayerDieNotify_CmdId)(0),                   // 17: proto.DungeonPlayerDieNotify.CmdId
	(DungeonDieOptionReq_CmdId)(0),                      // 18: proto.DungeonDieOptionReq.CmdId
	(DungeonDieOptionRsp_CmdId)(0),                      // 19: proto.DungeonDieOptionRsp.CmdId
	(DungeonShowReminderNotify_CmdId)(0),                // 20: proto.DungeonShowReminderNotify.CmdId
	(DungeonPlayerDieReq_CmdId)(0),                      // 21: proto.DungeonPlayerDieReq.CmdId
	(DungeonPlayerDieRsp_CmdId)(0),                      // 22: proto.DungeonPlayerDieRsp.CmdId
	(DungeonDataNotify_CmdId)(0),                        // 23: proto.DungeonDataNotify.CmdId
	(DungeonChallengeBeginNotify_CmdId)(0),              // 24: proto.DungeonChallengeBeginNotify.CmdId
	(DungeonChallengeFinishNotify_CmdId)(0),             // 25: proto.DungeonChallengeFinishNotify.CmdId
	(ChallengeDataNotify_CmdId)(0),                      // 26: proto.ChallengeDataNotify.CmdId
	(DungeonFollowNotify_CmdId)(0),                      // 27: proto.DungeonFollowNotify.CmdId
	(DungeonGetStatueDropReq_CmdId)(0),                  // 28: proto.DungeonGetStatueDropReq.CmdId
	(DungeonGetStatueDropRsp_CmdId)(0),                  // 29: proto.DungeonGetStatueDropRsp.CmdId
	(ChallengeRecordNotify_CmdId)(0),                    // 30: proto.ChallengeRecordNotify.CmdId
	(DungeonCandidateTeamInfoNotify_CmdId)(0),           // 31: proto.DungeonCandidateTeamInfoNotify.CmdId
	(DungeonCandidateTeamInviteNotify_CmdId)(0),         // 32: proto.DungeonCandidateTeamInviteNotify.CmdId
	(DungeonCandidateTeamRefuseNotify_CmdId)(0),         // 33: proto.DungeonCandidateTeamRefuseNotify.CmdId
	(DungeonCandidateTeamPlayerLeaveNotify_CmdId)(0),    // 34: proto.DungeonCandidateTeamPlayerLeaveNotify.CmdId
	(DungeonCandidateTeamDismissNotify_CmdId)(0),        // 35: proto.DungeonCandidateTeamDismissNotify.CmdId
	(DungeonCandidateTeamCreateReq_CmdId)(0),            // 36: proto.DungeonCandidateTeamCreateReq.CmdId
	(DungeonCandidateTeamCreateRsp_CmdId)(0),            // 37: proto.DungeonCandidateTeamCreateRsp.CmdId
	(DungeonCandidateTeamInviteReq_CmdId)(0),            // 38: proto.DungeonCandidateTeamInviteReq.CmdId
	(DungeonCandidateTeamInviteRsp_CmdId)(0),            // 39: proto.DungeonCandidateTeamInviteRsp.CmdId
	(DungeonCandidateTeamKickReq_CmdId)(0),              // 40: proto.DungeonCandidateTeamKickReq.CmdId
	(DungeonCandidateTeamKickRsp_CmdId)(0),              // 41: proto.DungeonCandidateTeamKickRsp.CmdId
	(DungeonCandidateTeamLeaveReq_CmdId)(0),             // 42: proto.DungeonCandidateTeamLeaveReq.CmdId
	(DungeonCandidateTeamLeaveRsp_CmdId)(0),             // 43: proto.DungeonCandidateTeamLeaveRsp.CmdId
	(DungeonCandidateTeamReplyInviteReq_CmdId)(0),       // 44: proto.DungeonCandidateTeamReplyInviteReq.CmdId
	(DungeonCandidateTeamReplyInviteRsp_CmdId)(0),       // 45: proto.DungeonCandidateTeamReplyInviteRsp.CmdId
	(DungeonCandidateTeamSetReadyReq_CmdId)(0),          // 46: proto.DungeonCandidateTeamSetReadyReq.CmdId
	(DungeonCandidateTeamSetReadyRsp_CmdId)(0),          // 47: proto.DungeonCandidateTeamSetReadyRsp.CmdId
	(DungeonCandidateTeamChangeAvatarReq_CmdId)(0),      // 48: proto.DungeonCandidateTeamChangeAvatarReq.CmdId
	(DungeonCandidateTeamChangeAvatarRsp_CmdId)(0),      // 49: proto.DungeonCandidateTeamChangeAvatarRsp.CmdId
	(GetDailyDungeonEntryInfoReq_CmdId)(0),              // 50: proto.GetDailyDungeonEntryInfoReq.CmdId
	(GetDailyDungeonEntryInfoRsp_CmdId)(0),              // 51: proto.GetDailyDungeonEntryInfoRsp.CmdId
	(DungeonSlipRevivePointActivateReq_CmdId)(0),        // 52: proto.DungeonSlipRevivePointActivateReq.CmdId
	(DungeonSlipRevivePointActivateRsp_CmdId)(0),        // 53: proto.DungeonSlipRevivePointActivateRsp.CmdId
	(DungeonInterruptChallengeReq_CmdId)(0),             // 54: proto.DungeonInterruptChallengeReq.CmdId
	(DungeonInterruptChallengeRsp_CmdId)(0),             // 55: proto.DungeonInterruptChallengeRsp.CmdId
	(InteractDailyDungeonInfoNotify_CmdId)(0),           // 56: proto.InteractDailyDungeonInfoNotify.CmdId
	(DungeonRestartReq_CmdId)(0),                        // 57: proto.DungeonRestartReq.CmdId
	(DungeonRestartRsp_CmdId)(0),                        // 58: proto.DungeonRestartRsp.CmdId
	(DungeonRestartInviteNotify_CmdId)(0),               // 59: proto.DungeonRestartInviteNotify.CmdId
	(DungeonRestartInviteReplyReq_CmdId)(0),             // 60: proto.DungeonRestartInviteReplyReq.CmdId
	(DungeonRestartInviteReplyRsp_CmdId)(0),             // 61: proto.DungeonRestartInviteReplyRsp.CmdId
	(DungeonRestartInviteReplyNotify_CmdId)(0),          // 62: proto.DungeonRestartInviteReplyNotify.CmdId
	(DungeonRestartResultNotify_CmdId)(0),               // 63: proto.DungeonRestartResultNotify.CmdId
	(DungeonCandidateTeamSetChangingAvatarReq_CmdId)(0), // 64: proto.DungeonCandidateTeamSetChangingAvatarReq.CmdId
	(DungeonCandidateTeamSetChangingAvatarRsp_CmdId)(0), // 65: proto.DungeonCandidateTeamSetChangingAvatarRsp.CmdId
	(MistTrialFloorLevelNotify_CmdId)(0),                // 66: proto.MistTrialFloorLevelNotify.CmdId
	(DungeonReviseLevelNotify_CmdId)(0),                 // 67: proto.DungeonReviseLevelNotify.CmdId
	(*DungeonEntryInfoReq)(nil),                         // 68: proto.DungeonEntryInfoReq
	(*DungeonEntryInfo)(nil),                            // 69: proto.DungeonEntryInfo
	(*DungeonEntryPointInfo)(nil),                       // 70: proto.DungeonEntryPointInfo
	(*DungeonEntryInfoRsp)(nil),                         // 71: proto.DungeonEntryInfoRsp
	(*DungeonEnterPosInfo)(nil),                         // 72: proto.DungeonEnterPosInfo
	(*PlayerEnterDungeonReq)(nil),                       // 73: proto.PlayerEnterDungeonReq
	(*PlayerEnterDungeonRsp)(nil),                       // 74: proto.PlayerEnterDungeonRsp
	(*PlayerQuitDungeonReq)(nil),                        // 75: proto.PlayerQuitDungeonReq
	(*PlayerQuitDungeonRsp)(nil),                        // 76: proto.PlayerQuitDungeonRsp
	(*DungeonWayPointNotify)(nil),                       // 77: proto.DungeonWayPointNotify
	(*DungeonWayPointActivateReq)(nil),                  // 78: proto.DungeonWayPointActivateReq
	(*DungeonWayPointActivateRsp)(nil),                  // 79: proto.DungeonWayPointActivateRsp
	(*StrengthenPointData)(nil),                         // 80: proto.StrengthenPointData
	(*DungeonSettleExhibitionInfo)(nil),                 // 81: proto.DungeonSettleExhibitionInfo
	(*CrystalLinkDungeonSettleInfo)(nil),                // 82: proto.CrystalLinkDungeonSettleInfo
	(*SummerTimeV2DungeonSettleInfo)(nil),               // 83: proto.SummerTimeV2DungeonSettleInfo
	(*InstableSprayDungeonSettleInfo)(nil),              // 84: proto.InstableSprayDungeonSettleInfo
	(*WindFieldDungeonSettleInfo)(nil),                  // 85: proto.WindFieldDungeonSettleInfo
	(*EffigyChallengeV2SettleInfo)(nil),                 // 86: proto.EffigyChallengeV2SettleInfo
	(*TeamChainSettleInfo)(nil),                         // 87: proto.TeamChainSettleInfo
	(*DungeonSettleNotify)(nil),                         // 88: proto.DungeonSettleNotify
	(*DungeonPlayerDieNotify)(nil),                      // 89: proto.DungeonPlayerDieNotify
	(*DungeonDieOptionReq)(nil),                         // 90: proto.DungeonDieOptionReq
	(*DungeonDieOptionRsp)(nil),                         // 91: proto.DungeonDieOptionRsp
	(*DungeonShowReminderNotify)(nil),                   // 92: proto.DungeonShowReminderNotify
	(*DungeonPlayerDieReq)(nil),                         // 93: proto.DungeonPlayerDieReq
	(*DungeonPlayerDieRsp)(nil),                         // 94: proto.DungeonPlayerDieRsp
	(*DungeonDataNotify)(nil),                           // 95: proto.DungeonDataNotify
	(*DungeonChallengeBeginNotify)(nil),                 // 96: proto.DungeonChallengeBeginNotify
	(*ChallengeBrief)(nil),                              // 97: proto.ChallengeBrief
	(*CustomDungeonResultInfo)(nil),                     // 98: proto.CustomDungeonResultInfo
	(*DungeonChallengeFinishNotify)(nil),                // 99: proto.DungeonChallengeFinishNotify
	(*ChallengeDataNotify)(nil),                         // 100: proto.ChallengeDataNotify
	(*DungeonFollowNotify)(nil),                         // 101: proto.DungeonFollowNotify
	(*DungeonGetStatueDropReq)(nil),                     // 102: proto.DungeonGetStatueDropReq
	(*DungeonGetStatueDropRsp)(nil),                     // 103: proto.DungeonGetStatueDropRsp
	(*ChallengeRecord)(nil),                             // 104: proto.ChallengeRecord
	(*ChallengeRecordNotify)(nil),                       // 105: proto.ChallengeRecordNotify
	(*DungeonCandidateTeamAvatar)(nil),                  // 106: proto.DungeonCandidateTeamAvatar
	(*DungeonCandidateTeamInfoNotify)(nil),              // 107: proto.DungeonCandidateTeamInfoNotify
	(*DungeonCandidateTeamInviteNotify)(nil),            // 108: proto.DungeonCandidateTeamInviteNotify
	(*DungeonCandidateTeamRefuseNotify)(nil),            // 109: proto.DungeonCandidateTeamRefuseNotify
	(*DungeonCandidateTeamPlayerLeaveNotify)(nil),       // 110: proto.DungeonCandidateTeamPlayerLeaveNotify
	(*DungeonCandidateTeamDismissNotify)(nil),           // 111: proto.DungeonCandidateTeamDismissNotify
	(*DungeonCandidateTeamCreateReq)(nil),               // 112: proto.DungeonCandidateTeamCreateReq
	(*DungeonCandidateTeamCreateRsp)(nil),               // 113: proto.DungeonCandidateTeamCreateRsp
	(*DungeonCandidateTeamInviteReq)(nil),               // 114: proto.DungeonCandidateTeamInviteReq
	(*DungeonCandidateTeamInviteRsp)(nil),               // 115: proto.DungeonCandidateTeamInviteRsp
	(*DungeonCandidateTeamKickReq)(nil),                 // 116: proto.DungeonCandidateTeamKickReq
	(*DungeonCandidateTeamKickRsp)(nil),                 // 117: proto.DungeonCandidateTeamKickRsp
	(*DungeonCandidateTeamLeaveReq)(nil),                // 118: proto.DungeonCandidateTeamLeaveReq
	(*DungeonCandidateTeamLeaveRsp)(nil),                // 119: proto.DungeonCandidateTeamLeaveRsp
	(*DungeonCandidateTeamReplyInviteReq)(nil),          // 120: proto.DungeonCandidateTeamReplyInviteReq
	(*DungeonCandidateTeamReplyInviteRsp)(nil),          // 121: proto.DungeonCandidateTeamReplyInviteRsp
	(*DungeonCandidateTeamSetReadyReq)(nil),             // 122: proto.DungeonCandidateTeamSetReadyReq
	(*DungeonCandidateTeamSetReadyRsp)(nil),             // 123: proto.DungeonCandidateTeamSetReadyRsp
	(*DungeonCandidateTeamChangeAvatarReq)(nil),         // 124: proto.DungeonCandidateTeamChangeAvatarReq
	(*DungeonCandidateTeamChangeAvatarRsp)(nil),         // 125: proto.DungeonCandidateTeamChangeAvatarRsp
	(*DailyDungeonEntryInfo)(nil),                       // 126: proto.DailyDungeonEntryInfo
	(*GetDailyDungeonEntryInfoReq)(nil),                 // 127: proto.GetDailyDungeonEntryInfoReq
	(*GetDailyDungeonEntryInfoRsp)(nil),                 // 128: proto.GetDailyDungeonEntryInfoRsp
	(*DungeonSlipRevivePointActivateReq)(nil),           // 129: proto.DungeonSlipRevivePointActivateReq
	(*DungeonSlipRevivePointActivateRsp)(nil),           // 130: proto.DungeonSlipRevivePointActivateRsp
	(*DungeonInterruptChallengeReq)(nil),                // 131: proto.DungeonInterruptChallengeReq
	(*DungeonInterruptChallengeRsp)(nil),                // 132: proto.DungeonInterruptChallengeRsp
	(*InteractDailyDungeonInfoNotify)(nil),              // 133: proto.InteractDailyDungeonInfoNotify
	(*DungeonRestartReq)(nil),                           // 134: proto.DungeonRestartReq
	(*DungeonRestartRsp)(nil),                           // 135: proto.DungeonRestartRsp
	(*DungeonRestartInviteNotify)(nil),                  // 136: proto.DungeonRestartInviteNotify
	(*DungeonRestartInviteReplyReq)(nil),                // 137: proto.DungeonRestartInviteReplyReq
	(*DungeonRestartInviteReplyRsp)(nil),                // 138: proto.DungeonRestartInviteReplyRsp
	(*DungeonRestartInviteReplyNotify)(nil),             // 139: proto.DungeonRestartInviteReplyNotify
	(*DungeonRestartResultNotify)(nil),                  // 140: proto.DungeonRestartResultNotify
	(*DungeonCandidateTeamSetChangingAvatarReq)(nil),    // 141: proto.DungeonCandidateTeamSetChangingAvatarReq
	(*DungeonCandidateTeamSetChangingAvatarRsp)(nil),    // 142: proto.DungeonCandidateTeamSetChangingAvatarRsp
	(*MistTrialFloorLevelNotify)(nil),                   // 143: proto.MistTrialFloorLevelNotify
	(*DungeonReviseLevelNotify)(nil),                    // 144: proto.DungeonReviseLevelNotify
	nil,                                                 // 145: proto.DungeonSettleNotify.StrengthenPointDataMapEntry
	nil,                                                 // 146: proto.DungeonSettleNotify.SettleShowEntry
	nil,                                                 // 147: proto.DungeonPlayerDieNotify.StrengthenPointDataMapEntry
	nil,                                                 // 148: proto.DungeonDataNotify.DungeonDataMapEntry
	nil,                                                 // 149: proto.DungeonChallengeFinishNotify.StrengthenPointDataMapEntry
	nil,                                                 // 150: proto.DungeonCandidateTeamInfoNotify.PlayerStateMapEntry
	(*Uint32Pair)(nil),                                  // 151: proto.Uint32Pair
	(*WeeklyBossResinDiscountInfo)(nil),                 // 152: proto.WeeklyBossResinDiscountInfo
	(*OnlinePlayerInfo)(nil),                            // 153: proto.OnlinePlayerInfo
	(*ExhibitionDisplayInfo)(nil),                       // 154: proto.ExhibitionDisplayInfo
	(*TowerLevelEndNotify)(nil),                         // 155: proto.TowerLevelEndNotify
	(*TrialAvatarFirstPassDungeonNotify)(nil),           // 156: proto.TrialAvatarFirstPassDungeonNotify
	(*ChannellerSlabLoopDungeonResultInfo)(nil),         // 157: proto.ChannellerSlabLoopDungeonResultInfo
	(*EffigyChallengeDungeonResultInfo)(nil),            // 158: proto.EffigyChallengeDungeonResultInfo
	(*RoguelikeDungeonSettleInfo)(nil),                  // 159: proto.RoguelikeDungeonSettleInfo
	(PlayerDieType)(0),                                  // 160: proto.PlayerDieType
	(PlayerDieOption)(0),                                // 161: proto.PlayerDieOption
	(*PotionDungeonResultInfo)(nil),                     // 162: proto.PotionDungeonResultInfo
	(*AvatarInfo)(nil),                                  // 163: proto.AvatarInfo
	(*ParamList)(nil),                                   // 164: proto.ParamList
	(DungeonCandidateTeamPlayerState)(0),                // 165: proto.DungeonCandidateTeamPlayerState
}
var file_cmd_cmd_dungeon_proto_depIdxs = []int32{
	151, // 0: proto.DungeonEntryInfoReq.scene_point_id_list:type_name -> proto.Uint32Pair
	152, // 1: proto.DungeonEntryInfo.weekly_boss_resin_discount_info:type_name -> proto.WeeklyBossResinDiscountInfo
	69,  // 2: proto.DungeonEntryPointInfo.dungeon_entry_list:type_name -> proto.DungeonEntryInfo
	69,  // 3: proto.DungeonEntryInfoRsp.dungeon_entry_list:type_name -> proto.DungeonEntryInfo
	70,  // 4: proto.DungeonEntryInfoRsp.dungeon_entry_point_list:type_name -> proto.DungeonEntryPointInfo
	72,  // 5: proto.PlayerEnterDungeonReq.enter_pos_info:type_name -> proto.DungeonEnterPosInfo
	153, // 6: proto.DungeonSettleExhibitionInfo.player_info:type_name -> proto.OnlinePlayerInfo
	154, // 7: proto.DungeonSettleExhibitionInfo.card_list:type_name -> proto.ExhibitionDisplayInfo
	0,   // 8: proto.WindFieldDungeonSettleInfo.fail_reason:type_name -> proto.WindFieldDungeonFailReason
	145, // 9: proto.DungeonSettleNotify.strengthen_point_data_map:type_name -> proto.DungeonSettleNotify.StrengthenPointDataMapEntry
	81,  // 10: proto.DungeonSettleNotify.exhibition_info_list:type_name -> proto.DungeonSettleExhibitionInfo
	146, // 11: proto.DungeonSettleNotify.settle_show:type_name -> proto.DungeonSettleNotify.SettleShowEntry
	155, // 12: proto.DungeonSettleNotify.tower_level_end_notify:type_name -> proto.TowerLevelEndNotify
	156, // 13: proto.DungeonSettleNotify.trial_avatar_first_pass_dungeon_notify:type_name -> proto.TrialAvatarFirstPassDungeonNotify
	157, // 14: proto.DungeonSettleNotify.channeller_slab_loop_dungeon_result_info:type_name -> proto.ChannellerSlabLoopDungeonResultInfo
	158, // 15: proto.DungeonSettleNotify.effigy_challenge_dungeon_result_info:type_name -> proto.EffigyChallengeDungeonResultInfo
	159, // 16: proto.DungeonSettleNotify.roguelike_dungeon_settle_info:type_name -> proto.RoguelikeDungeonSettleInfo
	82,  // 17: proto.DungeonSettleNotify.crystal_link_settle_info:type_name -> proto.CrystalLinkDungeonSettleInfo
	83,  // 18: proto.DungeonSettleNotify.summer_time_v2_dungeon_settle_info:type_name -> proto.SummerTimeV2DungeonSettleInfo
	84,  // 19: proto.DungeonSettleNotify.instable_spray_settle_info:type_name -> proto.InstableSprayDungeonSettleInfo
	85,  // 20: proto.DungeonSettleNotify.wind_field_dungeon_settle_info:type_name -> proto.WindFieldDungeonSettleInfo
	86,  // 21: proto.DungeonSettleNotify.effigy_challenge_v2_settle_info:type_name -> proto.EffigyChallengeV2SettleInfo
	87,  // 22: proto.DungeonSettleNotify.team_chain_settle_info:type_name -> proto.TeamChainSettleInfo
	147, // 23: proto.DungeonPlayerDieNotify.strengthen_point_data_map:type_name -> proto.DungeonPlayerDieNotify.StrengthenPointDataMapEntry
	160, // 24: proto.DungeonPlayerDieNotify.die_type:type_name -> proto.PlayerDieType
	161, // 25: proto.DungeonDieOptionReq.die_option:type_name -> proto.PlayerDieOption
	161, // 26: proto.DungeonDieOptionRsp.die_option:type_name -> proto.PlayerDieOption
	160, // 27: proto.DungeonPlayerDieReq.die_type:type_name -> proto.PlayerDieType
	148, // 28: proto.DungeonDataNotify.dungeon_data_map:type_name -> proto.DungeonDataNotify.DungeonDataMapEntry
	97,  // 29: proto.CustomDungeonResultInfo.child_challenge_list:type_name -> proto.ChallengeBrief
	3,   // 30: proto.CustomDungeonResultInfo.finish_type:type_name -> proto.CustomDungeonFinishType
	149, // 31: proto.DungeonChallengeFinishNotify.strengthen_point_data_map:type_name -> proto.DungeonChallengeFinishNotify.StrengthenPointDataMapEntry
	2,   // 32: proto.DungeonChallengeFinishNotify.finish_type:type_name -> proto.ChallengeFinishType
	157, // 33: proto.DungeonChallengeFinishNotify.channeller_slab_loop_dungeon_result_info:type_name -> proto.ChannellerSlabLoopDungeonResultInfo
	158, // 34: proto.DungeonChallengeFinishNotify.effigy_challenge_dungeon_result_info:type_name -> proto.EffigyChallengeDungeonResultInfo
	162, // 35: proto.DungeonChallengeFinishNotify.potion_dungeon_result_info:type_name -> proto.PotionDungeonResultInfo
	98,  // 36: proto.DungeonChallengeFinishNotify.custom_dungeon_result_info:type_name -> proto.CustomDungeonResultInfo
	104, // 37: proto.ChallengeRecordNotify.challenge_record_list:type_name -> proto.ChallengeRecord
	163, // 38: proto.DungeonCandidateTeamAvatar.avatar_info:type_name -> proto.AvatarInfo
	150, // 39: proto.DungeonCandidateTeamInfoNotify.player_state_map:type_name -> proto.DungeonCandidateTeamInfoNotify.PlayerStateMapEntry
	106, // 40: proto.DungeonCandidateTeamInfoNotify.avatar_list:type_name -> proto.DungeonCandidateTeamAvatar
	4,   // 41: proto.DungeonCandidateTeamPlayerLeaveNotify.reason:type_name -> proto.DungeonCandidateTeamPlayerLeaveReason
	5,   // 42: proto.DungeonCandidateTeamDismissNotify.reason:type_name -> proto.DungeonCandidateTeamDismissReason
	69,  // 43: proto.DailyDungeonEntryInfo.recommend_dungeon_entry_info:type_name -> proto.DungeonEntryInfo
	126, // 44: proto.GetDailyDungeonEntryInfoRsp.daily_dungeon_info_list:type_name -> proto.DailyDungeonEntryInfo
	80,  // 45: proto.DungeonSettleNotify.StrengthenPointDataMapEntry.value:type_name -> proto.StrengthenPointData
	164, // 46: proto.DungeonSettleNotify.SettleShowEntry.value:type_name -> proto.ParamList
	80,  // 47: proto.DungeonPlayerDieNotify.StrengthenPointDataMapEntry.value:type_name -> proto.StrengthenPointData
	80,  // 48: proto.DungeonChallengeFinishNotify.StrengthenPointDataMapEntry.value:type_name -> proto.StrengthenPointData
	165, // 49: proto.DungeonCandidateTeamInfoNotify.PlayerStateMapEntry.value:type_name -> proto.DungeonCandidateTeamPlayerState
	50,  // [50:50] is the sub-list for method output_type
	50,  // [50:50] is the sub-list for method input_type
	50,  // [50:50] is the sub-list for extension type_name
	50,  // [50:50] is the sub-list for extension extendee
	0,   // [0:50] is the sub-list for field type_name
}

func init() { file_cmd_cmd_dungeon_proto_init() }
func file_cmd_cmd_dungeon_proto_init() {
	if File_cmd_cmd_dungeon_proto != nil {
		return
	}
	file_define_proto_init()
	file_cmd_cmd_tower_proto_init()
	file_cmd_cmd_activity_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cmd_cmd_dungeon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonEntryInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonEntryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonEntryPointInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonEntryInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonEnterPosInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerEnterDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerEnterDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQuitDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQuitDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonWayPointNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonWayPointActivateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonWayPointActivateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrengthenPointData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonSettleExhibitionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrystalLinkDungeonSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeV2DungeonSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstableSprayDungeonSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindFieldDungeonSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffigyChallengeV2SettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamChainSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonPlayerDieNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonDieOptionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonDieOptionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonShowReminderNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonPlayerDieReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonPlayerDieRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonDataNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonChallengeBeginNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeBrief); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDungeonResultInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonChallengeFinishNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeDataNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonFollowNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonGetStatueDropReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonGetStatueDropRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeRecordNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonCandidateTeamAvatar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonCandidateTeamInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonCandidateTeamInviteNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonCandidateTeamRefuseNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonCandidateTeamPlayerLeaveNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonCandidateTeamDismissNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonCandidateTeamCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonCandidateTeamCreateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonCandidateTeamInviteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonCandidateTeamInviteRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonCandidateTeamKickReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonCandidateTeamKickRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonCandidateTeamLeaveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonCandidateTeamLeaveRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonCandidateTeamReplyInviteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonCandidateTeamReplyInviteRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonCandidateTeamSetReadyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonCandidateTeamSetReadyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonCandidateTeamChangeAvatarReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonCandidateTeamChangeAvatarRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyDungeonEntryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDailyDungeonEntryInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDailyDungeonEntryInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonSlipRevivePointActivateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonSlipRevivePointActivateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonInterruptChallengeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonInterruptChallengeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractDailyDungeonInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonRestartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonRestartRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonRestartInviteNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonRestartInviteReplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonRestartInviteReplyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonRestartInviteReplyNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonRestartResultNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonCandidateTeamSetChangingAvatarReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonCandidateTeamSetChangingAvatarRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MistTrialFloorLevelNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_dungeon_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonReviseLevelNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cmd_cmd_dungeon_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*DungeonSettleNotify_TowerLevelEndNotify)(nil),
		(*DungeonSettleNotify_TrialAvatarFirstPassDungeonNotify)(nil),
		(*DungeonSettleNotify_ChannellerSlabLoopDungeonResultInfo)(nil),
		(*DungeonSettleNotify_EffigyChallengeDungeonResultInfo)(nil),
		(*DungeonSettleNotify_RoguelikeDungeonSettleInfo)(nil),
		(*DungeonSettleNotify_CrystalLinkSettleInfo)(nil),
		(*DungeonSettleNotify_SummerTimeV2DungeonSettleInfo)(nil),
		(*DungeonSettleNotify_InstableSpraySettleInfo)(nil),
		(*DungeonSettleNotify_WindFieldDungeonSettleInfo)(nil),
		(*DungeonSettleNotify_EffigyChallengeV2SettleInfo)(nil),
		(*DungeonSettleNotify_TeamChainSettleInfo)(nil),
	}
	file_cmd_cmd_dungeon_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*DungeonPlayerDieNotify_MonsterId)(nil),
		(*DungeonPlayerDieNotify_GadgetId)(nil),
	}
	file_cmd_cmd_dungeon_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*DungeonChallengeFinishNotify_ChannellerSlabLoopDungeonResultInfo)(nil),
		(*DungeonChallengeFinishNotify_EffigyChallengeDungeonResultInfo)(nil),
		(*DungeonChallengeFinishNotify_PotionDungeonResultInfo)(nil),
		(*DungeonChallengeFinishNotify_CustomDungeonResultInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cmd_cmd_dungeon_proto_rawDesc,
			NumEnums:      68,
			NumMessages:   83,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cmd_cmd_dungeon_proto_goTypes,
		DependencyIndexes: file_cmd_cmd_dungeon_proto_depIdxs,
		EnumInfos:         file_cmd_cmd_dungeon_proto_enumTypes,
		MessageInfos:      file_cmd_cmd_dungeon_proto_msgTypes,
	}.Build()
	File_cmd_cmd_dungeon_proto = out.File
	file_cmd_cmd_dungeon_proto_rawDesc = nil
	file_cmd_cmd_dungeon_proto_goTypes = nil
	file_cmd_cmd_dungeon_proto_depIdxs = nil
}
