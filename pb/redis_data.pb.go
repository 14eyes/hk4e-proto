// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: server_only/redis_data.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlayerStatusType int32

const (
	PlayerStatusType_PLAYER_STATUS_OFFLINE PlayerStatusType = 0
	PlayerStatusType_PLAYER_STATUS_ONLINE  PlayerStatusType = 1
)

// Enum value maps for PlayerStatusType.
var (
	PlayerStatusType_name = map[int32]string{
		0: "PLAYER_STATUS_OFFLINE",
		1: "PLAYER_STATUS_ONLINE",
	}
	PlayerStatusType_value = map[string]int32{
		"PLAYER_STATUS_OFFLINE": 0,
		"PLAYER_STATUS_ONLINE":  1,
	}
)

func (x PlayerStatusType) Enum() *PlayerStatusType {
	p := new(PlayerStatusType)
	*p = x
	return p
}

func (x PlayerStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_only_redis_data_proto_enumTypes[0].Descriptor()
}

func (PlayerStatusType) Type() protoreflect.EnumType {
	return &file_server_only_redis_data_proto_enumTypes[0]
}

func (x PlayerStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerStatusType.Descriptor instead.
func (PlayerStatusType) EnumDescriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{0}
}

type HomeStatusType int32

const (
	HomeStatusType_HOME_STATUS_OFFLINE HomeStatusType = 0
	HomeStatusType_HOME_STATUS_ONLINE  HomeStatusType = 1
)

// Enum value maps for HomeStatusType.
var (
	HomeStatusType_name = map[int32]string{
		0: "HOME_STATUS_OFFLINE",
		1: "HOME_STATUS_ONLINE",
	}
	HomeStatusType_value = map[string]int32{
		"HOME_STATUS_OFFLINE": 0,
		"HOME_STATUS_ONLINE":  1,
	}
)

func (x HomeStatusType) Enum() *HomeStatusType {
	p := new(HomeStatusType)
	*p = x
	return p
}

func (x HomeStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HomeStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_only_redis_data_proto_enumTypes[1].Descriptor()
}

func (HomeStatusType) Type() protoreflect.EnumType {
	return &file_server_only_redis_data_proto_enumTypes[1]
}

func (x HomeStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HomeStatusType.Descriptor instead.
func (HomeStatusType) EnumDescriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{1}
}

type CustomDungeonRecommendType int32

const (
	CustomDungeonRecommendType_CUSTOM_DUNGEON_RECOMMEND_NONE CustomDungeonRecommendType = 0
	CustomDungeonRecommendType_CUSTOM_DUNGEON_RECOMMEND_NEW  CustomDungeonRecommendType = 1
	CustomDungeonRecommendType_CUSTOM_DUNGEON_RECOMMEND_OLD  CustomDungeonRecommendType = 2
)

// Enum value maps for CustomDungeonRecommendType.
var (
	CustomDungeonRecommendType_name = map[int32]string{
		0: "CUSTOM_DUNGEON_RECOMMEND_NONE",
		1: "CUSTOM_DUNGEON_RECOMMEND_NEW",
		2: "CUSTOM_DUNGEON_RECOMMEND_OLD",
	}
	CustomDungeonRecommendType_value = map[string]int32{
		"CUSTOM_DUNGEON_RECOMMEND_NONE": 0,
		"CUSTOM_DUNGEON_RECOMMEND_NEW":  1,
		"CUSTOM_DUNGEON_RECOMMEND_OLD":  2,
	}
)

func (x CustomDungeonRecommendType) Enum() *CustomDungeonRecommendType {
	p := new(CustomDungeonRecommendType)
	*p = x
	return p
}

func (x CustomDungeonRecommendType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomDungeonRecommendType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_only_redis_data_proto_enumTypes[2].Descriptor()
}

func (CustomDungeonRecommendType) Type() protoreflect.EnumType {
	return &file_server_only_redis_data_proto_enumTypes[2]
}

func (x CustomDungeonRecommendType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomDungeonRecommendType.Descriptor instead.
func (CustomDungeonRecommendType) EnumDescriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{2}
}

type UgcRedisDataType int32

const (
	UgcRedisDataType_UGC_REDIS_DATA_TYPE_NONE    UgcRedisDataType = 0
	UgcRedisDataType_UGC_REDIS_DATA_TYPE_MINE    UgcRedisDataType = 1
	UgcRedisDataType_UGC_REDIS_DATA_TYPE_PUBLISH UgcRedisDataType = 2
)

// Enum value maps for UgcRedisDataType.
var (
	UgcRedisDataType_name = map[int32]string{
		0: "UGC_REDIS_DATA_TYPE_NONE",
		1: "UGC_REDIS_DATA_TYPE_MINE",
		2: "UGC_REDIS_DATA_TYPE_PUBLISH",
	}
	UgcRedisDataType_value = map[string]int32{
		"UGC_REDIS_DATA_TYPE_NONE":    0,
		"UGC_REDIS_DATA_TYPE_MINE":    1,
		"UGC_REDIS_DATA_TYPE_PUBLISH": 2,
	}
)

func (x UgcRedisDataType) Enum() *UgcRedisDataType {
	p := new(UgcRedisDataType)
	*p = x
	return p
}

func (x UgcRedisDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UgcRedisDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_only_redis_data_proto_enumTypes[3].Descriptor()
}

func (UgcRedisDataType) Type() protoreflect.EnumType {
	return &file_server_only_redis_data_proto_enumTypes[3]
}

func (x UgcRedisDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UgcRedisDataType.Descriptor instead.
func (UgcRedisDataType) EnumDescriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{3}
}

type ChatRedisData_SystemHintType int32

const (
	ChatRedisData_CHAT_NONE        ChatRedisData_SystemHintType = 0
	ChatRedisData_CHAT_ENTER_WORLD ChatRedisData_SystemHintType = 1
	ChatRedisData_CHAT_LEAVE_WORLD ChatRedisData_SystemHintType = 2
)

// Enum value maps for ChatRedisData_SystemHintType.
var (
	ChatRedisData_SystemHintType_name = map[int32]string{
		0: "CHAT_NONE",
		1: "CHAT_ENTER_WORLD",
		2: "CHAT_LEAVE_WORLD",
	}
	ChatRedisData_SystemHintType_value = map[string]int32{
		"CHAT_NONE":        0,
		"CHAT_ENTER_WORLD": 1,
		"CHAT_LEAVE_WORLD": 2,
	}
)

func (x ChatRedisData_SystemHintType) Enum() *ChatRedisData_SystemHintType {
	p := new(ChatRedisData_SystemHintType)
	*p = x
	return p
}

func (x ChatRedisData_SystemHintType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatRedisData_SystemHintType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_only_redis_data_proto_enumTypes[4].Descriptor()
}

func (ChatRedisData_SystemHintType) Type() protoreflect.EnumType {
	return &file_server_only_redis_data_proto_enumTypes[4]
}

func (x ChatRedisData_SystemHintType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatRedisData_SystemHintType.Descriptor instead.
func (ChatRedisData_SystemHintType) EnumDescriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{25, 0}
}

type ChatMixRedisData_SystemHintType int32

const (
	ChatMixRedisData_CHAT_NONE        ChatMixRedisData_SystemHintType = 0
	ChatMixRedisData_CHAT_ENTER_WORLD ChatMixRedisData_SystemHintType = 1
	ChatMixRedisData_CHAT_LEAVE_WORLD ChatMixRedisData_SystemHintType = 2
)

// Enum value maps for ChatMixRedisData_SystemHintType.
var (
	ChatMixRedisData_SystemHintType_name = map[int32]string{
		0: "CHAT_NONE",
		1: "CHAT_ENTER_WORLD",
		2: "CHAT_LEAVE_WORLD",
	}
	ChatMixRedisData_SystemHintType_value = map[string]int32{
		"CHAT_NONE":        0,
		"CHAT_ENTER_WORLD": 1,
		"CHAT_LEAVE_WORLD": 2,
	}
)

func (x ChatMixRedisData_SystemHintType) Enum() *ChatMixRedisData_SystemHintType {
	p := new(ChatMixRedisData_SystemHintType)
	*p = x
	return p
}

func (x ChatMixRedisData_SystemHintType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatMixRedisData_SystemHintType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_only_redis_data_proto_enumTypes[5].Descriptor()
}

func (ChatMixRedisData_SystemHintType) Type() protoreflect.EnumType {
	return &file_server_only_redis_data_proto_enumTypes[5]
}

func (x ChatMixRedisData_SystemHintType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatMixRedisData_SystemHintType.Descriptor instead.
func (ChatMixRedisData_SystemHintType) EnumDescriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{26, 0}
}

type PlayerStatusRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       PlayerStatusType `protobuf:"varint,1,opt,name=status,proto3,enum=proto.PlayerStatusType" json:"status,omitempty"`
	GameserverId uint32           `protobuf:"varint,2,opt,name=gameserver_id,json=gameserverId,proto3" json:"gameserver_id,omitempty"`
	LoginRand    uint64           `protobuf:"varint,3,opt,name=login_rand,json=loginRand,proto3" json:"login_rand,omitempty"`
	LoginTime    uint32           `protobuf:"varint,4,opt,name=login_time,json=loginTime,proto3" json:"login_time,omitempty"`
}

func (x *PlayerStatusRedisData) Reset() {
	*x = PlayerStatusRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStatusRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStatusRedisData) ProtoMessage() {}

func (x *PlayerStatusRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStatusRedisData.ProtoReflect.Descriptor instead.
func (*PlayerStatusRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerStatusRedisData) GetStatus() PlayerStatusType {
	if x != nil {
		return x.Status
	}
	return PlayerStatusType_PLAYER_STATUS_OFFLINE
}

func (x *PlayerStatusRedisData) GetGameserverId() uint32 {
	if x != nil {
		return x.GameserverId
	}
	return 0
}

func (x *PlayerStatusRedisData) GetLoginRand() uint64 {
	if x != nil {
		return x.LoginRand
	}
	return 0
}

func (x *PlayerStatusRedisData) GetLoginTime() uint32 {
	if x != nil {
		return x.LoginTime
	}
	return 0
}

type MailRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailBin         *MailBin `protobuf:"bytes,1,opt,name=mail_bin,json=mailBin,proto3" json:"mail_bin,omitempty"`
	Id              uint32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	IsRead          bool     `protobuf:"varint,3,opt,name=is_read,json=isRead,proto3" json:"is_read,omitempty"`
	IsAttachmentGot bool     `protobuf:"varint,4,opt,name=is_attachment_got,json=isAttachmentGot,proto3" json:"is_attachment_got,omitempty"`
}

func (x *MailRedisData) Reset() {
	*x = MailRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailRedisData) ProtoMessage() {}

func (x *MailRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailRedisData.ProtoReflect.Descriptor instead.
func (*MailRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{1}
}

func (x *MailRedisData) GetMailBin() *MailBin {
	if x != nil {
		return x.MailBin
	}
	return nil
}

func (x *MailRedisData) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MailRedisData) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *MailRedisData) GetIsAttachmentGot() bool {
	if x != nil {
		return x.IsAttachmentGot
	}
	return false
}

type MailMaxIdRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MailMaxIdRedisData) Reset() {
	*x = MailMaxIdRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailMaxIdRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailMaxIdRedisData) ProtoMessage() {}

func (x *MailMaxIdRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailMaxIdRedisData.ProtoReflect.Descriptor instead.
func (*MailMaxIdRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{2}
}

type MailIdSortedSetRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MailIdSortedSetRedisData) Reset() {
	*x = MailIdSortedSetRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailIdSortedSetRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailIdSortedSetRedisData) ProtoMessage() {}

func (x *MailIdSortedSetRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailIdSortedSetRedisData.ProtoReflect.Descriptor instead.
func (*MailIdSortedSetRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{3}
}

type MailTicketHashMapRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MailTicketHashMapRedisData) Reset() {
	*x = MailTicketHashMapRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailTicketHashMapRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailTicketHashMapRedisData) ProtoMessage() {}

func (x *MailTicketHashMapRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailTicketHashMapRedisData.ProtoReflect.Descriptor instead.
func (*MailTicketHashMapRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{4}
}

type MailTransactionIdHashMapRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MailTransactionIdHashMapRedisData) Reset() {
	*x = MailTransactionIdHashMapRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailTransactionIdHashMapRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailTransactionIdHashMapRedisData) ProtoMessage() {}

func (x *MailTransactionIdHashMapRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailTransactionIdHashMapRedisData.ProtoReflect.Descriptor instead.
func (*MailTransactionIdHashMapRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{5}
}

type MailTicketMailIdHashMapRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MailTicketMailIdHashMapRedisData) Reset() {
	*x = MailTicketMailIdHashMapRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailTicketMailIdHashMapRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailTicketMailIdHashMapRedisData) ProtoMessage() {}

func (x *MailTicketMailIdHashMapRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailTicketMailIdHashMapRedisData.ProtoReflect.Descriptor instead.
func (*MailTicketMailIdHashMapRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{6}
}

type TicketTimeBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnqueTime uint32 `protobuf:"varint,1,opt,name=enque_time,json=enqueTime,proto3" json:"enque_time,omitempty"`
	Ticket    string `protobuf:"bytes,2,opt,name=ticket,proto3" json:"ticket,omitempty"`
}

func (x *TicketTimeBin) Reset() {
	*x = TicketTimeBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketTimeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketTimeBin) ProtoMessage() {}

func (x *TicketTimeBin) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketTimeBin.ProtoReflect.Descriptor instead.
func (*TicketTimeBin) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{7}
}

func (x *TicketTimeBin) GetEnqueTime() uint32 {
	if x != nil {
		return x.EnqueTime
	}
	return 0
}

func (x *TicketTimeBin) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

type OfflineMsgRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastIndex        uint32           `protobuf:"varint,1,opt,name=last_index,json=lastIndex,proto3" json:"last_index,omitempty"`
	OfflineMsgList   []*OfflineMsgBin `protobuf:"bytes,2,rep,name=offline_msg_list,json=offlineMsgList,proto3" json:"offline_msg_list,omitempty"`
	RecentTicketList []*TicketTimeBin `protobuf:"bytes,3,rep,name=recent_ticket_list,json=recentTicketList,proto3" json:"recent_ticket_list,omitempty"`
}

func (x *OfflineMsgRedisData) Reset() {
	*x = OfflineMsgRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineMsgRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineMsgRedisData) ProtoMessage() {}

func (x *OfflineMsgRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineMsgRedisData.ProtoReflect.Descriptor instead.
func (*OfflineMsgRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{8}
}

func (x *OfflineMsgRedisData) GetLastIndex() uint32 {
	if x != nil {
		return x.LastIndex
	}
	return 0
}

func (x *OfflineMsgRedisData) GetOfflineMsgList() []*OfflineMsgBin {
	if x != nil {
		return x.OfflineMsgList
	}
	return nil
}

func (x *OfflineMsgRedisData) GetRecentTicketList() []*TicketTimeBin {
	if x != nil {
		return x.RecentTicketList
	}
	return nil
}

type HomeOfflineMsgRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastIndex        uint32               `protobuf:"varint,1,opt,name=last_index,json=lastIndex,proto3" json:"last_index,omitempty"`
	OfflineMsgList   []*HomeOfflineMsgBin `protobuf:"bytes,2,rep,name=offline_msg_list,json=offlineMsgList,proto3" json:"offline_msg_list,omitempty"`
	RecentTicketList []*TicketTimeBin     `protobuf:"bytes,3,rep,name=recent_ticket_list,json=recentTicketList,proto3" json:"recent_ticket_list,omitempty"`
}

func (x *HomeOfflineMsgRedisData) Reset() {
	*x = HomeOfflineMsgRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeOfflineMsgRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeOfflineMsgRedisData) ProtoMessage() {}

func (x *HomeOfflineMsgRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeOfflineMsgRedisData.ProtoReflect.Descriptor instead.
func (*HomeOfflineMsgRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{9}
}

func (x *HomeOfflineMsgRedisData) GetLastIndex() uint32 {
	if x != nil {
		return x.LastIndex
	}
	return 0
}

func (x *HomeOfflineMsgRedisData) GetOfflineMsgList() []*HomeOfflineMsgBin {
	if x != nil {
		return x.OfflineMsgList
	}
	return nil
}

func (x *HomeOfflineMsgRedisData) GetRecentTicketList() []*TicketTimeBin {
	if x != nil {
		return x.RecentTicketList
	}
	return nil
}

type PlayerFriendListRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlayerFriendListRedisData) Reset() {
	*x = PlayerFriendListRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerFriendListRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerFriendListRedisData) ProtoMessage() {}

func (x *PlayerFriendListRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerFriendListRedisData.ProtoReflect.Descriptor instead.
func (*PlayerFriendListRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{10}
}

type PlayerPSNFriendListRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlayerPSNFriendListRedisData) Reset() {
	*x = PlayerPSNFriendListRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerPSNFriendListRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerPSNFriendListRedisData) ProtoMessage() {}

func (x *PlayerPSNFriendListRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerPSNFriendListRedisData.ProtoReflect.Descriptor instead.
func (*PlayerPSNFriendListRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{11}
}

type PlayerAskFriendListRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlayerAskFriendListRedisData) Reset() {
	*x = PlayerAskFriendListRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerAskFriendListRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAskFriendListRedisData) ProtoMessage() {}

func (x *PlayerAskFriendListRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAskFriendListRedisData.ProtoReflect.Descriptor instead.
func (*PlayerAskFriendListRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{12}
}

type PlayerBlacklistRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlayerBlacklistRedisData) Reset() {
	*x = PlayerBlacklistRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerBlacklistRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBlacklistRedisData) ProtoMessage() {}

func (x *PlayerBlacklistRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBlacklistRedisData.ProtoReflect.Descriptor instead.
func (*PlayerBlacklistRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{13}
}

type PlayerPSNBlacklistRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlayerPSNBlacklistRedisData) Reset() {
	*x = PlayerPSNBlacklistRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerPSNBlacklistRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerPSNBlacklistRedisData) ProtoMessage() {}

func (x *PlayerPSNBlacklistRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerPSNBlacklistRedisData.ProtoReflect.Descriptor instead.
func (*PlayerPSNBlacklistRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{14}
}

type PlayerMpBriefData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsMpAvaliable        bool `protobuf:"varint,1,opt,name=is_mp_avaliable,json=isMpAvaliable,proto3" json:"is_mp_avaliable,omitempty"`
	IsOnlyMpWithPsPlayer bool `protobuf:"varint,2,opt,name=is_only_mp_with_ps_player,json=isOnlyMpWithPsPlayer,proto3" json:"is_only_mp_with_ps_player,omitempty"`
}

func (x *PlayerMpBriefData) Reset() {
	*x = PlayerMpBriefData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMpBriefData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMpBriefData) ProtoMessage() {}

func (x *PlayerMpBriefData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMpBriefData.ProtoReflect.Descriptor instead.
func (*PlayerMpBriefData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{15}
}

func (x *PlayerMpBriefData) GetIsMpAvaliable() bool {
	if x != nil {
		return x.IsMpAvaliable
	}
	return false
}

func (x *PlayerMpBriefData) GetIsOnlyMpWithPsPlayer() bool {
	if x != nil {
		return x.IsOnlyMpWithPsPlayer
	}
	return false
}

type PlayerSocialBriefData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Birthday             *Birthday               `protobuf:"bytes,1,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Signature            string                  `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	NameCardId           uint32                  `protobuf:"varint,3,opt,name=name_card_id,json=nameCardId,proto3" json:"name_card_id,omitempty"`
	FinishAchievementNum uint32                  `protobuf:"varint,4,opt,name=finish_achievement_num,json=finishAchievementNum,proto3" json:"finish_achievement_num,omitempty"`
	TowerFloorIndex      uint32                  `protobuf:"varint,5,opt,name=tower_floor_index,json=towerFloorIndex,proto3" json:"tower_floor_index,omitempty"`
	TowerLevelIndex      uint32                  `protobuf:"varint,6,opt,name=tower_level_index,json=towerLevelIndex,proto3" json:"tower_level_index,omitempty"`
	ShowAvatarInfoList   []*SocialShowAvatarInfo `protobuf:"bytes,7,rep,name=show_avatar_info_list,json=showAvatarInfoList,proto3" json:"show_avatar_info_list,omitempty"`
	IsShowAvatar         bool                    `protobuf:"varint,8,opt,name=is_show_avatar,json=isShowAvatar,proto3" json:"is_show_avatar,omitempty"`
	ShowNameCardIdList   []uint32                `protobuf:"varint,9,rep,packed,name=show_name_card_id_list,json=showNameCardIdList,proto3" json:"show_name_card_id_list,omitempty"`
	IpCode               string                  `protobuf:"bytes,10,opt,name=ip_code,json=ipCode,proto3" json:"ip_code,omitempty"`
}

func (x *PlayerSocialBriefData) Reset() {
	*x = PlayerSocialBriefData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSocialBriefData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSocialBriefData) ProtoMessage() {}

func (x *PlayerSocialBriefData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSocialBriefData.ProtoReflect.Descriptor instead.
func (*PlayerSocialBriefData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{16}
}

func (x *PlayerSocialBriefData) GetBirthday() *Birthday {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *PlayerSocialBriefData) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *PlayerSocialBriefData) GetNameCardId() uint32 {
	if x != nil {
		return x.NameCardId
	}
	return 0
}

func (x *PlayerSocialBriefData) GetFinishAchievementNum() uint32 {
	if x != nil {
		return x.FinishAchievementNum
	}
	return 0
}

func (x *PlayerSocialBriefData) GetTowerFloorIndex() uint32 {
	if x != nil {
		return x.TowerFloorIndex
	}
	return 0
}

func (x *PlayerSocialBriefData) GetTowerLevelIndex() uint32 {
	if x != nil {
		return x.TowerLevelIndex
	}
	return 0
}

func (x *PlayerSocialBriefData) GetShowAvatarInfoList() []*SocialShowAvatarInfo {
	if x != nil {
		return x.ShowAvatarInfoList
	}
	return nil
}

func (x *PlayerSocialBriefData) GetIsShowAvatar() bool {
	if x != nil {
		return x.IsShowAvatar
	}
	return false
}

func (x *PlayerSocialBriefData) GetShowNameCardIdList() []uint32 {
	if x != nil {
		return x.ShowNameCardIdList
	}
	return nil
}

func (x *PlayerSocialBriefData) GetIpCode() string {
	if x != nil {
		return x.IpCode
	}
	return ""
}

type PlayerBasicBriefData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname                string       `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Level                   uint32       `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	WorldLevel              uint32       `protobuf:"varint,3,opt,name=world_level,json=worldLevel,proto3" json:"world_level,omitempty"`
	LastLoginTime           uint32       `protobuf:"varint,4,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"`
	HeadImageAvatarId       uint32       `protobuf:"varint,5,opt,name=head_image_avatar_id,json=headImageAvatarId,proto3" json:"head_image_avatar_id,omitempty"`
	Exp                     uint32       `protobuf:"varint,6,opt,name=exp,proto3" json:"exp,omitempty"`
	Hcoin                   uint32       `protobuf:"varint,7,opt,name=hcoin,proto3" json:"hcoin,omitempty"`
	Scoin                   uint32       `protobuf:"varint,8,opt,name=scoin,proto3" json:"scoin,omitempty"`
	PlatformType            uint32       `protobuf:"varint,9,opt,name=platform_type,json=platformType,proto3" json:"platform_type,omitempty"`
	OnlineId                string       `protobuf:"bytes,10,opt,name=online_id,json=onlineId,proto3" json:"online_id,omitempty"`
	Mcoin                   uint32       `protobuf:"varint,11,opt,name=mcoin,proto3" json:"mcoin,omitempty"`
	PsnId                   string       `protobuf:"bytes,12,opt,name=psn_id,json=psnId,proto3" json:"psn_id,omitempty"`
	ProfilePictureCostumeId uint32       `protobuf:"varint,13,opt,name=profile_picture_costume_id,json=profilePictureCostumeId,proto3" json:"profile_picture_costume_id,omitempty"`
	ClientLanguageType      LanguageType `protobuf:"varint,14,opt,name=client_language_type,json=clientLanguageType,proto3,enum=proto.LanguageType" json:"client_language_type,omitempty"`
	RegisterTime            uint32       `protobuf:"fixed32,15,opt,name=register_time,json=registerTime,proto3" json:"register_time,omitempty"`
	GenderType              uint32       `protobuf:"varint,16,opt,name=gender_type,json=genderType,proto3" json:"gender_type,omitempty"`
}

func (x *PlayerBasicBriefData) Reset() {
	*x = PlayerBasicBriefData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerBasicBriefData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBasicBriefData) ProtoMessage() {}

func (x *PlayerBasicBriefData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBasicBriefData.ProtoReflect.Descriptor instead.
func (*PlayerBasicBriefData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{17}
}

func (x *PlayerBasicBriefData) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *PlayerBasicBriefData) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PlayerBasicBriefData) GetWorldLevel() uint32 {
	if x != nil {
		return x.WorldLevel
	}
	return 0
}

func (x *PlayerBasicBriefData) GetLastLoginTime() uint32 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *PlayerBasicBriefData) GetHeadImageAvatarId() uint32 {
	if x != nil {
		return x.HeadImageAvatarId
	}
	return 0
}

func (x *PlayerBasicBriefData) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *PlayerBasicBriefData) GetHcoin() uint32 {
	if x != nil {
		return x.Hcoin
	}
	return 0
}

func (x *PlayerBasicBriefData) GetScoin() uint32 {
	if x != nil {
		return x.Scoin
	}
	return 0
}

func (x *PlayerBasicBriefData) GetPlatformType() uint32 {
	if x != nil {
		return x.PlatformType
	}
	return 0
}

func (x *PlayerBasicBriefData) GetOnlineId() string {
	if x != nil {
		return x.OnlineId
	}
	return ""
}

func (x *PlayerBasicBriefData) GetMcoin() uint32 {
	if x != nil {
		return x.Mcoin
	}
	return 0
}

func (x *PlayerBasicBriefData) GetPsnId() string {
	if x != nil {
		return x.PsnId
	}
	return ""
}

func (x *PlayerBasicBriefData) GetProfilePictureCostumeId() uint32 {
	if x != nil {
		return x.ProfilePictureCostumeId
	}
	return 0
}

func (x *PlayerBasicBriefData) GetClientLanguageType() LanguageType {
	if x != nil {
		return x.ClientLanguageType
	}
	return LanguageType_LANGUAGE_NONE
}

func (x *PlayerBasicBriefData) GetRegisterTime() uint32 {
	if x != nil {
		return x.RegisterTime
	}
	return 0
}

func (x *PlayerBasicBriefData) GetGenderType() uint32 {
	if x != nil {
		return x.GenderType
	}
	return 0
}

type PlayerHomeAuditModuleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleId             uint32            `protobuf:"varint,1,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	AuditSceneVersionMap map[uint32]uint32 `protobuf:"bytes,2,rep,name=audit_scene_version_map,json=auditSceneVersionMap,proto3" json:"audit_scene_version_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PlayerHomeAuditModuleData) Reset() {
	*x = PlayerHomeAuditModuleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerHomeAuditModuleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerHomeAuditModuleData) ProtoMessage() {}

func (x *PlayerHomeAuditModuleData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerHomeAuditModuleData.ProtoReflect.Descriptor instead.
func (*PlayerHomeAuditModuleData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{18}
}

func (x *PlayerHomeAuditModuleData) GetModuleId() uint32 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

func (x *PlayerHomeAuditModuleData) GetAuditSceneVersionMap() map[uint32]uint32 {
	if x != nil {
		return x.AuditSceneVersionMap
	}
	return nil
}

type PlayerHomeBriefData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendEnterHomeOption FriendEnterHomeOption        `protobuf:"varint,1,opt,name=friend_enter_home_option,json=friendEnterHomeOption,proto3,enum=proto.FriendEnterHomeOption" json:"friend_enter_home_option,omitempty"`
	IsHomeAvailable       bool                         `protobuf:"varint,2,opt,name=is_home_available,json=isHomeAvailable,proto3" json:"is_home_available,omitempty"`
	LastSaveTime          uint32                       `protobuf:"fixed32,3,opt,name=last_save_time,json=lastSaveTime,proto3" json:"last_save_time,omitempty"`
	PriorCheckTime        uint32                       `protobuf:"varint,4,opt,name=prior_check_time,json=priorCheckTime,proto3" json:"prior_check_time,omitempty"`
	AuditModuleList       []*PlayerHomeAuditModuleData `protobuf:"bytes,5,rep,name=audit_module_list,json=auditModuleList,proto3" json:"audit_module_list,omitempty"`
}

func (x *PlayerHomeBriefData) Reset() {
	*x = PlayerHomeBriefData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerHomeBriefData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerHomeBriefData) ProtoMessage() {}

func (x *PlayerHomeBriefData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerHomeBriefData.ProtoReflect.Descriptor instead.
func (*PlayerHomeBriefData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{19}
}

func (x *PlayerHomeBriefData) GetFriendEnterHomeOption() FriendEnterHomeOption {
	if x != nil {
		return x.FriendEnterHomeOption
	}
	return FriendEnterHomeOption_FRIEND_ENTER_HOME_OPTION_NEED_CONFIRM
}

func (x *PlayerHomeBriefData) GetIsHomeAvailable() bool {
	if x != nil {
		return x.IsHomeAvailable
	}
	return false
}

func (x *PlayerHomeBriefData) GetLastSaveTime() uint32 {
	if x != nil {
		return x.LastSaveTime
	}
	return 0
}

func (x *PlayerHomeBriefData) GetPriorCheckTime() uint32 {
	if x != nil {
		return x.PriorCheckTime
	}
	return 0
}

func (x *PlayerHomeBriefData) GetAuditModuleList() []*PlayerHomeAuditModuleData {
	if x != nil {
		return x.AuditModuleList
	}
	return nil
}

type PlayerBriefDataRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocialBrief *PlayerSocialBriefData `protobuf:"bytes,1,opt,name=social_brief,json=socialBrief,proto3" json:"social_brief,omitempty"`
	BasicBrief  *PlayerBasicBriefData  `protobuf:"bytes,2,opt,name=basic_brief,json=basicBrief,proto3" json:"basic_brief,omitempty"`
	MpBrief     *PlayerMpBriefData     `protobuf:"bytes,3,opt,name=mp_brief,json=mpBrief,proto3" json:"mp_brief,omitempty"`
	HomeBrief   *PlayerHomeBriefData   `protobuf:"bytes,4,opt,name=home_brief,json=homeBrief,proto3" json:"home_brief,omitempty"`
}

func (x *PlayerBriefDataRedisData) Reset() {
	*x = PlayerBriefDataRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerBriefDataRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBriefDataRedisData) ProtoMessage() {}

func (x *PlayerBriefDataRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBriefDataRedisData.ProtoReflect.Descriptor instead.
func (*PlayerBriefDataRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{20}
}

func (x *PlayerBriefDataRedisData) GetSocialBrief() *PlayerSocialBriefData {
	if x != nil {
		return x.SocialBrief
	}
	return nil
}

func (x *PlayerBriefDataRedisData) GetBasicBrief() *PlayerBasicBriefData {
	if x != nil {
		return x.BasicBrief
	}
	return nil
}

func (x *PlayerBriefDataRedisData) GetMpBrief() *PlayerMpBriefData {
	if x != nil {
		return x.MpBrief
	}
	return nil
}

func (x *PlayerBriefDataRedisData) GetHomeBrief() *PlayerHomeBriefData {
	if x != nil {
		return x.HomeBrief
	}
	return nil
}

type PlayerShowAvatarRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowAvatarInfo *ShowAvatarInfo `protobuf:"bytes,1,opt,name=show_avatar_info,json=showAvatarInfo,proto3" json:"show_avatar_info,omitempty"`
}

func (x *PlayerShowAvatarRedisData) Reset() {
	*x = PlayerShowAvatarRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerShowAvatarRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerShowAvatarRedisData) ProtoMessage() {}

func (x *PlayerShowAvatarRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerShowAvatarRedisData.ProtoReflect.Descriptor instead.
func (*PlayerShowAvatarRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{21}
}

func (x *PlayerShowAvatarRedisData) GetShowAvatarInfo() *ShowAvatarInfo {
	if x != nil {
		return x.ShowAvatarInfo
	}
	return nil
}

type PlayerPrivateChatRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlayerPrivateChatRedisData) Reset() {
	*x = PlayerPrivateChatRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerPrivateChatRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerPrivateChatRedisData) ProtoMessage() {}

func (x *PlayerPrivateChatRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerPrivateChatRedisData.ProtoReflect.Descriptor instead.
func (*PlayerPrivateChatRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{22}
}

type PlayerRecentChatRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlayerRecentChatRedisData) Reset() {
	*x = PlayerRecentChatRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRecentChatRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRecentChatRedisData) ProtoMessage() {}

func (x *PlayerRecentChatRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRecentChatRedisData.ProtoReflect.Descriptor instead.
func (*PlayerRecentChatRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{23}
}

type PlayerPrivateChatUnreadRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlayerPrivateChatUnreadRedisData) Reset() {
	*x = PlayerPrivateChatUnreadRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerPrivateChatUnreadRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerPrivateChatUnreadRedisData) ProtoMessage() {}

func (x *PlayerPrivateChatUnreadRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerPrivateChatUnreadRedisData.ProtoReflect.Descriptor instead.
func (*PlayerPrivateChatUnreadRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{24}
}

type ChatRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time     uint32 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Uid      uint32 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Sequence uint32 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	ToUid    uint32 `protobuf:"varint,4,opt,name=to_uid,json=toUid,proto3" json:"to_uid,omitempty"`
	IsRead   bool   `protobuf:"varint,5,opt,name=is_read,json=isRead,proto3" json:"is_read,omitempty"`
	// Types that are assignable to Content:
	//
	//	*ChatRedisData_Text
	//	*ChatRedisData_Icon
	//	*ChatRedisData_SystemHint_
	Content isChatRedisData_Content `protobuf_oneof:"content"`
}

func (x *ChatRedisData) Reset() {
	*x = ChatRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRedisData) ProtoMessage() {}

func (x *ChatRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRedisData.ProtoReflect.Descriptor instead.
func (*ChatRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{25}
}

func (x *ChatRedisData) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ChatRedisData) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ChatRedisData) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *ChatRedisData) GetToUid() uint32 {
	if x != nil {
		return x.ToUid
	}
	return 0
}

func (x *ChatRedisData) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (m *ChatRedisData) GetContent() isChatRedisData_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *ChatRedisData) GetText() string {
	if x, ok := x.GetContent().(*ChatRedisData_Text); ok {
		return x.Text
	}
	return ""
}

func (x *ChatRedisData) GetIcon() uint32 {
	if x, ok := x.GetContent().(*ChatRedisData_Icon); ok {
		return x.Icon
	}
	return 0
}

func (x *ChatRedisData) GetSystemHint() *ChatRedisData_SystemHint {
	if x, ok := x.GetContent().(*ChatRedisData_SystemHint_); ok {
		return x.SystemHint
	}
	return nil
}

type isChatRedisData_Content interface {
	isChatRedisData_Content()
}

type ChatRedisData_Text struct {
	Text string `protobuf:"bytes,100,opt,name=text,proto3,oneof"`
}

type ChatRedisData_Icon struct {
	Icon uint32 `protobuf:"varint,101,opt,name=icon,proto3,oneof"`
}

type ChatRedisData_SystemHint_ struct {
	SystemHint *ChatRedisData_SystemHint `protobuf:"bytes,102,opt,name=system_hint,json=systemHint,proto3,oneof"`
}

func (*ChatRedisData_Text) isChatRedisData_Content() {}

func (*ChatRedisData_Icon) isChatRedisData_Content() {}

func (*ChatRedisData_SystemHint_) isChatRedisData_Content() {}

type ChatMixRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time     uint32 `protobuf:"varint,13,opt,name=time,proto3" json:"time,omitempty"`
	Sequence uint32 `protobuf:"varint,10,opt,name=sequence,proto3" json:"sequence,omitempty"`
	ToUid    uint32 `protobuf:"varint,7,opt,name=to_uid,json=toUid,proto3" json:"to_uid,omitempty"`
	Uid      uint32 `protobuf:"varint,15,opt,name=uid,proto3" json:"uid,omitempty"`
	IsRead   bool   `protobuf:"varint,5,opt,name=is_read,json=isRead,proto3" json:"is_read,omitempty"`
	// Types that are assignable to Content:
	//
	//	*ChatMixRedisData_Text
	//	*ChatMixRedisData_Icon
	//	*ChatMixRedisData_SystemHint_
	Content isChatMixRedisData_Content `protobuf_oneof:"content"`
}

func (x *ChatMixRedisData) Reset() {
	*x = ChatMixRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMixRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMixRedisData) ProtoMessage() {}

func (x *ChatMixRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMixRedisData.ProtoReflect.Descriptor instead.
func (*ChatMixRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{26}
}

func (x *ChatMixRedisData) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ChatMixRedisData) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *ChatMixRedisData) GetToUid() uint32 {
	if x != nil {
		return x.ToUid
	}
	return 0
}

func (x *ChatMixRedisData) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ChatMixRedisData) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (m *ChatMixRedisData) GetContent() isChatMixRedisData_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *ChatMixRedisData) GetText() string {
	if x, ok := x.GetContent().(*ChatMixRedisData_Text); ok {
		return x.Text
	}
	return ""
}

func (x *ChatMixRedisData) GetIcon() uint32 {
	if x, ok := x.GetContent().(*ChatMixRedisData_Icon); ok {
		return x.Icon
	}
	return 0
}

func (x *ChatMixRedisData) GetSystemHint() *ChatMixRedisData_SystemHint {
	if x, ok := x.GetContent().(*ChatMixRedisData_SystemHint_); ok {
		return x.SystemHint
	}
	return nil
}

type isChatMixRedisData_Content interface {
	isChatMixRedisData_Content()
}

type ChatMixRedisData_Text struct {
	Text string `protobuf:"bytes,1946,opt,name=text,proto3,oneof"`
}

type ChatMixRedisData_Icon struct {
	Icon uint32 `protobuf:"varint,914,opt,name=icon,proto3,oneof"`
}

type ChatMixRedisData_SystemHint_ struct {
	SystemHint *ChatMixRedisData_SystemHint `protobuf:"bytes,1753,opt,name=system_hint,json=systemHint,proto3,oneof"`
}

func (*ChatMixRedisData_Text) isChatMixRedisData_Content() {}

func (*ChatMixRedisData_Icon) isChatMixRedisData_Content() {}

func (*ChatMixRedisData_SystemHint_) isChatMixRedisData_Content() {}

type BlessingSocialData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PicNumMap map[uint32]uint32 `protobuf:"bytes,1,rep,name=pic_num_map,json=picNumMap,proto3" json:"pic_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *BlessingSocialData) Reset() {
	*x = BlessingSocialData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlessingSocialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlessingSocialData) ProtoMessage() {}

func (x *BlessingSocialData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlessingSocialData.ProtoReflect.Descriptor instead.
func (*BlessingSocialData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{27}
}

func (x *BlessingSocialData) GetPicNumMap() map[uint32]uint32 {
	if x != nil {
		return x.PicNumMap
	}
	return nil
}

type PlantFlowerSocialData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HaveFlowerNumMap map[uint32]uint32 `protobuf:"bytes,1,rep,name=have_flower_num_map,json=haveFlowerNumMap,proto3" json:"have_flower_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	WishFlowerNumMap map[uint32]uint32 `protobuf:"bytes,2,rep,name=wish_flower_num_map,json=wishFlowerNumMap,proto3" json:"wish_flower_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PlantFlowerSocialData) Reset() {
	*x = PlantFlowerSocialData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerSocialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerSocialData) ProtoMessage() {}

func (x *PlantFlowerSocialData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerSocialData.ProtoReflect.Descriptor instead.
func (*PlantFlowerSocialData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{28}
}

func (x *PlantFlowerSocialData) GetHaveFlowerNumMap() map[uint32]uint32 {
	if x != nil {
		return x.HaveFlowerNumMap
	}
	return nil
}

func (x *PlantFlowerSocialData) GetWishFlowerNumMap() map[uint32]uint32 {
	if x != nil {
		return x.WishFlowerNumMap
	}
	return nil
}

type WinterCampSocialData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HaveItemBinList []*ItemParamBin `protobuf:"bytes,1,rep,name=have_item_bin_list,json=haveItemBinList,proto3" json:"have_item_bin_list,omitempty"`
	WishItemIdList  []uint32        `protobuf:"varint,2,rep,packed,name=wish_item_id_list,json=wishItemIdList,proto3" json:"wish_item_id_list,omitempty"`
}

func (x *WinterCampSocialData) Reset() {
	*x = WinterCampSocialData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampSocialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampSocialData) ProtoMessage() {}

func (x *WinterCampSocialData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampSocialData.ProtoReflect.Descriptor instead.
func (*WinterCampSocialData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{29}
}

func (x *WinterCampSocialData) GetHaveItemBinList() []*ItemParamBin {
	if x != nil {
		return x.HaveItemBinList
	}
	return nil
}

func (x *WinterCampSocialData) GetWishItemIdList() []uint32 {
	if x != nil {
		return x.WishItemIdList
	}
	return nil
}

type ActivityGiveSocialData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HaveGiftNumMap map[uint32]uint32 `protobuf:"bytes,1,rep,name=have_gift_num_map,json=haveGiftNumMap,proto3" json:"have_gift_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	WishGiftNumMap map[uint32]uint32 `protobuf:"bytes,2,rep,name=wish_gift_num_map,json=wishGiftNumMap,proto3" json:"wish_gift_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ActivityGiveSocialData) Reset() {
	*x = ActivityGiveSocialData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityGiveSocialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityGiveSocialData) ProtoMessage() {}

func (x *ActivityGiveSocialData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityGiveSocialData.ProtoReflect.Descriptor instead.
func (*ActivityGiveSocialData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{30}
}

func (x *ActivityGiveSocialData) GetHaveGiftNumMap() map[uint32]uint32 {
	if x != nil {
		return x.HaveGiftNumMap
	}
	return nil
}

func (x *ActivityGiveSocialData) GetWishGiftNumMap() map[uint32]uint32 {
	if x != nil {
		return x.WishGiftNumMap
	}
	return nil
}

type ActivitySocialData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId             uint32                  `protobuf:"varint,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	ActivityGiveSocialData *ActivityGiveSocialData `protobuf:"bytes,5,opt,name=activity_give_social_data,json=activityGiveSocialData,proto3" json:"activity_give_social_data,omitempty"`
	// Types that are assignable to Data:
	//
	//	*ActivitySocialData_BlessingData
	//	*ActivitySocialData_PlantFlowerData
	//	*ActivitySocialData_WinterCampData
	Data isActivitySocialData_Data `protobuf_oneof:"data"`
}

func (x *ActivitySocialData) Reset() {
	*x = ActivitySocialData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivitySocialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivitySocialData) ProtoMessage() {}

func (x *ActivitySocialData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivitySocialData.ProtoReflect.Descriptor instead.
func (*ActivitySocialData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{31}
}

func (x *ActivitySocialData) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *ActivitySocialData) GetActivityGiveSocialData() *ActivityGiveSocialData {
	if x != nil {
		return x.ActivityGiveSocialData
	}
	return nil
}

func (m *ActivitySocialData) GetData() isActivitySocialData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *ActivitySocialData) GetBlessingData() *BlessingSocialData {
	if x, ok := x.GetData().(*ActivitySocialData_BlessingData); ok {
		return x.BlessingData
	}
	return nil
}

func (x *ActivitySocialData) GetPlantFlowerData() *PlantFlowerSocialData {
	if x, ok := x.GetData().(*ActivitySocialData_PlantFlowerData); ok {
		return x.PlantFlowerData
	}
	return nil
}

func (x *ActivitySocialData) GetWinterCampData() *WinterCampSocialData {
	if x, ok := x.GetData().(*ActivitySocialData_WinterCampData); ok {
		return x.WinterCampData
	}
	return nil
}

type isActivitySocialData_Data interface {
	isActivitySocialData_Data()
}

type ActivitySocialData_BlessingData struct {
	BlessingData *BlessingSocialData `protobuf:"bytes,2,opt,name=blessing_data,json=blessingData,proto3,oneof"`
}

type ActivitySocialData_PlantFlowerData struct {
	PlantFlowerData *PlantFlowerSocialData `protobuf:"bytes,3,opt,name=plant_flower_data,json=plantFlowerData,proto3,oneof"`
}

type ActivitySocialData_WinterCampData struct {
	WinterCampData *WinterCampSocialData `protobuf:"bytes,4,opt,name=winter_camp_data,json=winterCampData,proto3,oneof"`
}

func (*ActivitySocialData_BlessingData) isActivitySocialData_Data() {}

func (*ActivitySocialData_PlantFlowerData) isActivitySocialData_Data() {}

func (*ActivitySocialData_WinterCampData) isActivitySocialData_Data() {}

type PlayerActivitySocialRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivitySocialDataMap map[uint32]*ActivitySocialData `protobuf:"bytes,1,rep,name=activity_social_data_map,json=activitySocialDataMap,proto3" json:"activity_social_data_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlayerActivitySocialRedisData) Reset() {
	*x = PlayerActivitySocialRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerActivitySocialRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerActivitySocialRedisData) ProtoMessage() {}

func (x *PlayerActivitySocialRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerActivitySocialRedisData.ProtoReflect.Descriptor instead.
func (*PlayerActivitySocialRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{32}
}

func (x *PlayerActivitySocialRedisData) GetActivitySocialDataMap() map[uint32]*ActivitySocialData {
	if x != nil {
		return x.ActivitySocialDataMap
	}
	return nil
}

type HomeStatusRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       HomeStatusType `protobuf:"varint,1,opt,name=status,proto3,enum=proto.HomeStatusType" json:"status,omitempty"`
	GameserverId uint32         `protobuf:"varint,2,opt,name=gameserver_id,json=gameserverId,proto3" json:"gameserver_id,omitempty"`
	LoadRand     uint64         `protobuf:"varint,3,opt,name=load_rand,json=loadRand,proto3" json:"load_rand,omitempty"`
}

func (x *HomeStatusRedisData) Reset() {
	*x = HomeStatusRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeStatusRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeStatusRedisData) ProtoMessage() {}

func (x *HomeStatusRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeStatusRedisData.ProtoReflect.Descriptor instead.
func (*HomeStatusRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{33}
}

func (x *HomeStatusRedisData) GetStatus() HomeStatusType {
	if x != nil {
		return x.Status
	}
	return HomeStatusType_HOME_STATUS_OFFLINE
}

func (x *HomeStatusRedisData) GetGameserverId() uint32 {
	if x != nil {
		return x.GameserverId
	}
	return 0
}

func (x *HomeStatusRedisData) GetLoadRand() uint64 {
	if x != nil {
		return x.LoadRand
	}
	return 0
}

type HomeBriefDataRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FurnitureManufacturingMaxFinishTime int32 `protobuf:"varint,1,opt,name=furniture_manufacturing_max_finish_time,json=furnitureManufacturingMaxFinishTime,proto3" json:"furniture_manufacturing_max_finish_time,omitempty"`
}

func (x *HomeBriefDataRedisData) Reset() {
	*x = HomeBriefDataRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeBriefDataRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeBriefDataRedisData) ProtoMessage() {}

func (x *HomeBriefDataRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeBriefDataRedisData.ProtoReflect.Descriptor instead.
func (*HomeBriefDataRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{34}
}

func (x *HomeBriefDataRedisData) GetFurnitureManufacturingMaxFinishTime() int32 {
	if x != nil {
		return x.FurnitureManufacturingMaxFinishTime
	}
	return 0
}

type OfflineOpGIndexRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OfflineOpGIndexRedisData) Reset() {
	*x = OfflineOpGIndexRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineOpGIndexRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineOpGIndexRedisData) ProtoMessage() {}

func (x *OfflineOpGIndexRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineOpGIndexRedisData.ProtoReflect.Descriptor instead.
func (*OfflineOpGIndexRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{35}
}

type OfflineOpSortedSetRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OfflineOpSortedSetRedisData) Reset() {
	*x = OfflineOpSortedSetRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineOpSortedSetRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineOpSortedSetRedisData) ProtoMessage() {}

func (x *OfflineOpSortedSetRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineOpSortedSetRedisData.ProtoReflect.Descriptor instead.
func (*OfflineOpSortedSetRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{36}
}

type OfflineOpRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index  uint32        `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Time   uint32        `protobuf:"fixed32,2,opt,name=time,proto3" json:"time,omitempty"`
	OpType OfflineOpType `protobuf:"varint,3,opt,name=op_type,json=opType,proto3,enum=proto.OfflineOpType" json:"op_type,omitempty"`
	OpBin  *OfflineOpBin `protobuf:"bytes,4,opt,name=op_bin,json=opBin,proto3" json:"op_bin,omitempty"`
}

func (x *OfflineOpRedisData) Reset() {
	*x = OfflineOpRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineOpRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineOpRedisData) ProtoMessage() {}

func (x *OfflineOpRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineOpRedisData.ProtoReflect.Descriptor instead.
func (*OfflineOpRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{37}
}

func (x *OfflineOpRedisData) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *OfflineOpRedisData) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *OfflineOpRedisData) GetOpType() OfflineOpType {
	if x != nil {
		return x.OpType
	}
	return OfflineOpType_OFFLINE_OP_NONE
}

func (x *OfflineOpRedisData) GetOpBin() *OfflineOpBin {
	if x != nil {
		return x.OpBin
	}
	return nil
}

type CustomDungeonBlockRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid    uint32      `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	BlockId uint32      `protobuf:"varint,2,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Pos     *Vector3Int `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
	Rot     *Vector3Int `protobuf:"bytes,4,opt,name=rot,proto3" json:"rot,omitempty"`
}

func (x *CustomDungeonBlockRedisData) Reset() {
	*x = CustomDungeonBlockRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDungeonBlockRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDungeonBlockRedisData) ProtoMessage() {}

func (x *CustomDungeonBlockRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDungeonBlockRedisData.ProtoReflect.Descriptor instead.
func (*CustomDungeonBlockRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{38}
}

func (x *CustomDungeonBlockRedisData) GetGuid() uint32 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *CustomDungeonBlockRedisData) GetBlockId() uint32 {
	if x != nil {
		return x.BlockId
	}
	return 0
}

func (x *CustomDungeonBlockRedisData) GetPos() *Vector3Int {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *CustomDungeonBlockRedisData) GetRot() *Vector3Int {
	if x != nil {
		return x.Rot
	}
	return nil
}

type CustomDungeonRoomRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId    uint32                         `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	BlockList []*CustomDungeonBlockRedisData `protobuf:"bytes,2,rep,name=block_list,json=blockList,proto3" json:"block_list,omitempty"`
}

func (x *CustomDungeonRoomRedisData) Reset() {
	*x = CustomDungeonRoomRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDungeonRoomRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDungeonRoomRedisData) ProtoMessage() {}

func (x *CustomDungeonRoomRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDungeonRoomRedisData.ProtoReflect.Descriptor instead.
func (*CustomDungeonRoomRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{39}
}

func (x *CustomDungeonRoomRedisData) GetRoomId() uint32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *CustomDungeonRoomRedisData) GetBlockList() []*CustomDungeonBlockRedisData {
	if x != nil {
		return x.BlockList
	}
	return nil
}

type CustomDungeonContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomList []*CustomDungeonRoomRedisData `protobuf:"bytes,1,rep,name=room_list,json=roomList,proto3" json:"room_list,omitempty"`
	Setting  *CustomDungeonSettingBin      `protobuf:"bytes,2,opt,name=setting,proto3" json:"setting,omitempty"`
}

func (x *CustomDungeonContent) Reset() {
	*x = CustomDungeonContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDungeonContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDungeonContent) ProtoMessage() {}

func (x *CustomDungeonContent) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDungeonContent.ProtoReflect.Descriptor instead.
func (*CustomDungeonContent) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{40}
}

func (x *CustomDungeonContent) GetRoomList() []*CustomDungeonRoomRedisData {
	if x != nil {
		return x.RoomList
	}
	return nil
}

func (x *CustomDungeonContent) GetSetting() *CustomDungeonSettingBin {
	if x != nil {
		return x.Setting
	}
	return nil
}

type CustomDungeonRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonGuid            uint64                `protobuf:"varint,1,opt,name=dungeon_guid,json=dungeonGuid,proto3" json:"dungeon_guid,omitempty"`
	DungeonId              uint32                `protobuf:"varint,2,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	EditContent            *CustomDungeonContent `protobuf:"bytes,3,opt,name=edit_content,json=editContent,proto3" json:"edit_content,omitempty"`
	PublishContent         *CustomDungeonContent `protobuf:"bytes,4,opt,name=publish_content,json=publishContent,proto3" json:"publish_content,omitempty"`
	FirstPublishTime       uint32                `protobuf:"varint,5,opt,name=first_publish_time,json=firstPublishTime,proto3" json:"first_publish_time,omitempty"`
	IsNoChangeAfterPublish bool                  `protobuf:"varint,6,opt,name=is_no_change_after_publish,json=isNoChangeAfterPublish,proto3" json:"is_no_change_after_publish,omitempty"`
	Version                uint32                `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *CustomDungeonRedisData) Reset() {
	*x = CustomDungeonRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDungeonRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDungeonRedisData) ProtoMessage() {}

func (x *CustomDungeonRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDungeonRedisData.ProtoReflect.Descriptor instead.
func (*CustomDungeonRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{41}
}

func (x *CustomDungeonRedisData) GetDungeonGuid() uint64 {
	if x != nil {
		return x.DungeonGuid
	}
	return 0
}

func (x *CustomDungeonRedisData) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *CustomDungeonRedisData) GetEditContent() *CustomDungeonContent {
	if x != nil {
		return x.EditContent
	}
	return nil
}

func (x *CustomDungeonRedisData) GetPublishContent() *CustomDungeonContent {
	if x != nil {
		return x.PublishContent
	}
	return nil
}

func (x *CustomDungeonRedisData) GetFirstPublishTime() uint32 {
	if x != nil {
		return x.FirstPublishTime
	}
	return 0
}

func (x *CustomDungeonRedisData) GetIsNoChangeAfterPublish() bool {
	if x != nil {
		return x.IsNoChangeAfterPublish
	}
	return false
}

func (x *CustomDungeonRedisData) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type CustomDungeonSocialRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayNum  uint32 `protobuf:"varint,1,opt,name=play_num,json=playNum,proto3" json:"play_num,omitempty"`
	LikeNum  uint32 `protobuf:"varint,2,opt,name=like_num,json=likeNum,proto3" json:"like_num,omitempty"`
	StoreNum uint32 `protobuf:"varint,3,opt,name=store_num,json=storeNum,proto3" json:"store_num,omitempty"`
	WinNum   uint32 `protobuf:"varint,4,opt,name=win_num,json=winNum,proto3" json:"win_num,omitempty"`
}

func (x *CustomDungeonSocialRedisData) Reset() {
	*x = CustomDungeonSocialRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDungeonSocialRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDungeonSocialRedisData) ProtoMessage() {}

func (x *CustomDungeonSocialRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDungeonSocialRedisData.ProtoReflect.Descriptor instead.
func (*CustomDungeonSocialRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{42}
}

func (x *CustomDungeonSocialRedisData) GetPlayNum() uint32 {
	if x != nil {
		return x.PlayNum
	}
	return 0
}

func (x *CustomDungeonSocialRedisData) GetLikeNum() uint32 {
	if x != nil {
		return x.LikeNum
	}
	return 0
}

func (x *CustomDungeonSocialRedisData) GetStoreNum() uint32 {
	if x != nil {
		return x.StoreNum
	}
	return 0
}

func (x *CustomDungeonSocialRedisData) GetWinNum() uint32 {
	if x != nil {
		return x.WinNum
	}
	return 0
}

type CustomDungeonBriefRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonGuid     uint64                        `protobuf:"varint,1,opt,name=dungeon_guid,json=dungeonGuid,proto3" json:"dungeon_guid,omitempty"`
	DungeonId       uint32                        `protobuf:"varint,2,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	Setting         *CustomDungeonSettingBin      `protobuf:"bytes,3,opt,name=setting,proto3" json:"setting,omitempty"`
	Abstract        *CustomDungeonAbstractBin     `protobuf:"bytes,4,opt,name=abstract,proto3" json:"abstract,omitempty"`
	Social          *CustomDungeonSocialRedisData `protobuf:"bytes,5,opt,name=social,proto3" json:"social,omitempty"`
	IsNeedRecommend bool                          `protobuf:"varint,6,opt,name=is_need_recommend,json=isNeedRecommend,proto3" json:"is_need_recommend,omitempty"`
	CreatorNickname string                        `protobuf:"bytes,7,opt,name=creator_nickname,json=creatorNickname,proto3" json:"creator_nickname,omitempty"`
	RecommendType   uint32                        `protobuf:"varint,8,opt,name=recommend_type,json=recommendType,proto3" json:"recommend_type,omitempty"`
	TagList         []uint32                      `protobuf:"varint,9,rep,packed,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty"`
	RecommendScore  float32                       `protobuf:"fixed32,10,opt,name=recommend_score,json=recommendScore,proto3" json:"recommend_score,omitempty"`
	IsPsnPlatform   bool                          `protobuf:"varint,11,opt,name=is_psn_platform,json=isPsnPlatform,proto3" json:"is_psn_platform,omitempty"`
}

func (x *CustomDungeonBriefRedisData) Reset() {
	*x = CustomDungeonBriefRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDungeonBriefRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDungeonBriefRedisData) ProtoMessage() {}

func (x *CustomDungeonBriefRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDungeonBriefRedisData.ProtoReflect.Descriptor instead.
func (*CustomDungeonBriefRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{43}
}

func (x *CustomDungeonBriefRedisData) GetDungeonGuid() uint64 {
	if x != nil {
		return x.DungeonGuid
	}
	return 0
}

func (x *CustomDungeonBriefRedisData) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *CustomDungeonBriefRedisData) GetSetting() *CustomDungeonSettingBin {
	if x != nil {
		return x.Setting
	}
	return nil
}

func (x *CustomDungeonBriefRedisData) GetAbstract() *CustomDungeonAbstractBin {
	if x != nil {
		return x.Abstract
	}
	return nil
}

func (x *CustomDungeonBriefRedisData) GetSocial() *CustomDungeonSocialRedisData {
	if x != nil {
		return x.Social
	}
	return nil
}

func (x *CustomDungeonBriefRedisData) GetIsNeedRecommend() bool {
	if x != nil {
		return x.IsNeedRecommend
	}
	return false
}

func (x *CustomDungeonBriefRedisData) GetCreatorNickname() string {
	if x != nil {
		return x.CreatorNickname
	}
	return ""
}

func (x *CustomDungeonBriefRedisData) GetRecommendType() uint32 {
	if x != nil {
		return x.RecommendType
	}
	return 0
}

func (x *CustomDungeonBriefRedisData) GetTagList() []uint32 {
	if x != nil {
		return x.TagList
	}
	return nil
}

func (x *CustomDungeonBriefRedisData) GetRecommendScore() float32 {
	if x != nil {
		return x.RecommendScore
	}
	return 0
}

func (x *CustomDungeonBriefRedisData) GetIsPsnPlatform() bool {
	if x != nil {
		return x.IsPsnPlatform
	}
	return false
}

type CustomDungeonNewRecommendRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CustomDungeonNewRecommendRedisData) Reset() {
	*x = CustomDungeonNewRecommendRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDungeonNewRecommendRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDungeonNewRecommendRedisData) ProtoMessage() {}

func (x *CustomDungeonNewRecommendRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDungeonNewRecommendRedisData.ProtoReflect.Descriptor instead.
func (*CustomDungeonNewRecommendRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{44}
}

type CustomDungeonOldRecommendRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CustomDungeonOldRecommendRedisData) Reset() {
	*x = CustomDungeonOldRecommendRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDungeonOldRecommendRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDungeonOldRecommendRedisData) ProtoMessage() {}

func (x *CustomDungeonOldRecommendRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDungeonOldRecommendRedisData.ProtoReflect.Descriptor instead.
func (*CustomDungeonOldRecommendRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{45}
}

type CustomDungeonLikeRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CustomDungeonLikeRedisData) Reset() {
	*x = CustomDungeonLikeRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDungeonLikeRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDungeonLikeRedisData) ProtoMessage() {}

func (x *CustomDungeonLikeRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDungeonLikeRedisData.ProtoReflect.Descriptor instead.
func (*CustomDungeonLikeRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{46}
}

type UgcMusicNoteRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime uint32 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   uint32 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *UgcMusicNoteRedisData) Reset() {
	*x = UgcMusicNoteRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UgcMusicNoteRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UgcMusicNoteRedisData) ProtoMessage() {}

func (x *UgcMusicNoteRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UgcMusicNoteRedisData.ProtoReflect.Descriptor instead.
func (*UgcMusicNoteRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{47}
}

func (x *UgcMusicNoteRedisData) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *UgcMusicNoteRedisData) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type UgcMusicTrackRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MusicNoteList []*UgcMusicNoteRedisData `protobuf:"bytes,1,rep,name=music_note_list,json=musicNoteList,proto3" json:"music_note_list,omitempty"`
}

func (x *UgcMusicTrackRedisData) Reset() {
	*x = UgcMusicTrackRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UgcMusicTrackRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UgcMusicTrackRedisData) ProtoMessage() {}

func (x *UgcMusicTrackRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UgcMusicTrackRedisData.ProtoReflect.Descriptor instead.
func (*UgcMusicTrackRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{48}
}

func (x *UgcMusicTrackRedisData) GetMusicNoteList() []*UgcMusicNoteRedisData {
	if x != nil {
		return x.MusicNoteList
	}
	return nil
}

type UgcMusicContentRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MusicId        uint32                    `protobuf:"varint,1,opt,name=music_id,json=musicId,proto3" json:"music_id,omitempty"`
	MusicTrackList []*UgcMusicTrackRedisData `protobuf:"bytes,2,rep,name=music_track_list,json=musicTrackList,proto3" json:"music_track_list,omitempty"`
}

func (x *UgcMusicContentRedisData) Reset() {
	*x = UgcMusicContentRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UgcMusicContentRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UgcMusicContentRedisData) ProtoMessage() {}

func (x *UgcMusicContentRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UgcMusicContentRedisData.ProtoReflect.Descriptor instead.
func (*UgcMusicContentRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{49}
}

func (x *UgcMusicContentRedisData) GetMusicId() uint32 {
	if x != nil {
		return x.MusicId
	}
	return 0
}

func (x *UgcMusicContentRedisData) GetMusicTrackList() []*UgcMusicTrackRedisData {
	if x != nil {
		return x.MusicTrackList
	}
	return nil
}

type UgcRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UgcGuid  uint64 `protobuf:"varint,1,opt,name=ugc_guid,json=ugcGuid,proto3" json:"ugc_guid,omitempty"`
	SaveTime uint32 `protobuf:"varint,2,opt,name=save_time,json=saveTime,proto3" json:"save_time,omitempty"`
	// Types that are assignable to Content:
	//
	//	*UgcRedisData_MusicContent
	Content isUgcRedisData_Content `protobuf_oneof:"content"`
}

func (x *UgcRedisData) Reset() {
	*x = UgcRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UgcRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UgcRedisData) ProtoMessage() {}

func (x *UgcRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UgcRedisData.ProtoReflect.Descriptor instead.
func (*UgcRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{50}
}

func (x *UgcRedisData) GetUgcGuid() uint64 {
	if x != nil {
		return x.UgcGuid
	}
	return 0
}

func (x *UgcRedisData) GetSaveTime() uint32 {
	if x != nil {
		return x.SaveTime
	}
	return 0
}

func (m *UgcRedisData) GetContent() isUgcRedisData_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *UgcRedisData) GetMusicContent() *UgcMusicContentRedisData {
	if x, ok := x.GetContent().(*UgcRedisData_MusicContent); ok {
		return x.MusicContent
	}
	return nil
}

type isUgcRedisData_Content interface {
	isUgcRedisData_Content()
}

type UgcRedisData_MusicContent struct {
	MusicContent *UgcMusicContentRedisData `protobuf:"bytes,11,opt,name=music_content,json=musicContent,proto3,oneof"`
}

func (*UgcRedisData_MusicContent) isUgcRedisData_Content() {}

type UgcEditRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UgcEditRedisData) Reset() {
	*x = UgcEditRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UgcEditRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UgcEditRedisData) ProtoMessage() {}

func (x *UgcEditRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UgcEditRedisData.ProtoReflect.Descriptor instead.
func (*UgcEditRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{51}
}

type UgcPublishRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UgcPublishRedisData) Reset() {
	*x = UgcPublishRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UgcPublishRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UgcPublishRedisData) ProtoMessage() {}

func (x *UgcPublishRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UgcPublishRedisData.ProtoReflect.Descriptor instead.
func (*UgcPublishRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{52}
}

type UgcMusicBriedRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MusicId           uint32 `protobuf:"varint,1,opt,name=music_id,json=musicId,proto3" json:"music_id,omitempty"`
	NoteCount         uint32 `protobuf:"varint,2,opt,name=note_count,json=noteCount,proto3" json:"note_count,omitempty"`
	MaxScore          uint32 `protobuf:"varint,3,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	ImportFromUgcGuid uint64 `protobuf:"varint,4,opt,name=import_from_ugc_guid,json=importFromUgcGuid,proto3" json:"import_from_ugc_guid,omitempty"`
}

func (x *UgcMusicBriedRedisData) Reset() {
	*x = UgcMusicBriedRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UgcMusicBriedRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UgcMusicBriedRedisData) ProtoMessage() {}

func (x *UgcMusicBriedRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UgcMusicBriedRedisData.ProtoReflect.Descriptor instead.
func (*UgcMusicBriedRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{53}
}

func (x *UgcMusicBriedRedisData) GetMusicId() uint32 {
	if x != nil {
		return x.MusicId
	}
	return 0
}

func (x *UgcMusicBriedRedisData) GetNoteCount() uint32 {
	if x != nil {
		return x.NoteCount
	}
	return 0
}

func (x *UgcMusicBriedRedisData) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *UgcMusicBriedRedisData) GetImportFromUgcGuid() uint64 {
	if x != nil {
		return x.ImportFromUgcGuid
	}
	return 0
}

type UgcBriefRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UgcGuid         uint64 `protobuf:"varint,1,opt,name=ugc_guid,json=ugcGuid,proto3" json:"ugc_guid,omitempty"`
	CreatorNickname string `protobuf:"bytes,2,opt,name=creator_nickname,json=creatorNickname,proto3" json:"creator_nickname,omitempty"`
	PublishTime     uint32 `protobuf:"varint,3,opt,name=publish_time,json=publishTime,proto3" json:"publish_time,omitempty"`
	Version         uint32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	IsPsnPlatform   bool   `protobuf:"varint,5,opt,name=is_psn_platform,json=isPsnPlatform,proto3" json:"is_psn_platform,omitempty"`
	// Types that are assignable to Brief:
	//
	//	*UgcBriefRedisData_MusicBrief
	Brief isUgcBriefRedisData_Brief `protobuf_oneof:"brief"`
}

func (x *UgcBriefRedisData) Reset() {
	*x = UgcBriefRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UgcBriefRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UgcBriefRedisData) ProtoMessage() {}

func (x *UgcBriefRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UgcBriefRedisData.ProtoReflect.Descriptor instead.
func (*UgcBriefRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{54}
}

func (x *UgcBriefRedisData) GetUgcGuid() uint64 {
	if x != nil {
		return x.UgcGuid
	}
	return 0
}

func (x *UgcBriefRedisData) GetCreatorNickname() string {
	if x != nil {
		return x.CreatorNickname
	}
	return ""
}

func (x *UgcBriefRedisData) GetPublishTime() uint32 {
	if x != nil {
		return x.PublishTime
	}
	return 0
}

func (x *UgcBriefRedisData) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *UgcBriefRedisData) GetIsPsnPlatform() bool {
	if x != nil {
		return x.IsPsnPlatform
	}
	return false
}

func (m *UgcBriefRedisData) GetBrief() isUgcBriefRedisData_Brief {
	if m != nil {
		return m.Brief
	}
	return nil
}

func (x *UgcBriefRedisData) GetMusicBrief() *UgcMusicBriedRedisData {
	if x, ok := x.GetBrief().(*UgcBriefRedisData_MusicBrief); ok {
		return x.MusicBrief
	}
	return nil
}

type isUgcBriefRedisData_Brief interface {
	isUgcBriefRedisData_Brief()
}

type UgcBriefRedisData_MusicBrief struct {
	MusicBrief *UgcMusicBriedRedisData `protobuf:"bytes,11,opt,name=music_brief,json=musicBrief,proto3,oneof"`
}

func (*UgcBriefRedisData_MusicBrief) isUgcBriefRedisData_Brief() {}

type HomeBlueprintBriefRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareCode   string `protobuf:"bytes,1,opt,name=share_code,json=shareCode,proto3" json:"share_code,omitempty"`
	OwnerUid    uint32 `protobuf:"varint,2,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
	ModuleId    uint32 `protobuf:"varint,3,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	SceneId     uint32 `protobuf:"varint,4,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	BlockId     uint32 `protobuf:"varint,5,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	IsAllowCopy bool   `protobuf:"varint,6,opt,name=is_allow_copy,json=isAllowCopy,proto3" json:"is_allow_copy,omitempty"`
	CreateTime  uint32 `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *HomeBlueprintBriefRedisData) Reset() {
	*x = HomeBlueprintBriefRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeBlueprintBriefRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeBlueprintBriefRedisData) ProtoMessage() {}

func (x *HomeBlueprintBriefRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeBlueprintBriefRedisData.ProtoReflect.Descriptor instead.
func (*HomeBlueprintBriefRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{55}
}

func (x *HomeBlueprintBriefRedisData) GetShareCode() string {
	if x != nil {
		return x.ShareCode
	}
	return ""
}

func (x *HomeBlueprintBriefRedisData) GetOwnerUid() uint32 {
	if x != nil {
		return x.OwnerUid
	}
	return 0
}

func (x *HomeBlueprintBriefRedisData) GetModuleId() uint32 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

func (x *HomeBlueprintBriefRedisData) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *HomeBlueprintBriefRedisData) GetBlockId() uint32 {
	if x != nil {
		return x.BlockId
	}
	return 0
}

func (x *HomeBlueprintBriefRedisData) GetIsAllowCopy() bool {
	if x != nil {
		return x.IsAllowCopy
	}
	return false
}

func (x *HomeBlueprintBriefRedisData) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type HomeBlueprintDetailRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareCode string        `protobuf:"bytes,1,opt,name=share_code,json=shareCode,proto3" json:"share_code,omitempty"`
	SceneBin  *HomeSceneBin `protobuf:"bytes,2,opt,name=scene_bin,json=sceneBin,proto3" json:"scene_bin,omitempty"`
}

func (x *HomeBlueprintDetailRedisData) Reset() {
	*x = HomeBlueprintDetailRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeBlueprintDetailRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeBlueprintDetailRedisData) ProtoMessage() {}

func (x *HomeBlueprintDetailRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeBlueprintDetailRedisData.ProtoReflect.Descriptor instead.
func (*HomeBlueprintDetailRedisData) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{56}
}

func (x *HomeBlueprintDetailRedisData) GetShareCode() string {
	if x != nil {
		return x.ShareCode
	}
	return ""
}

func (x *HomeBlueprintDetailRedisData) GetSceneBin() *HomeSceneBin {
	if x != nil {
		return x.SceneBin
	}
	return nil
}

type ChatRedisData_SystemHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ChatRedisData_SystemHint) Reset() {
	*x = ChatRedisData_SystemHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatRedisData_SystemHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRedisData_SystemHint) ProtoMessage() {}

func (x *ChatRedisData_SystemHint) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRedisData_SystemHint.ProtoReflect.Descriptor instead.
func (*ChatRedisData_SystemHint) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{25, 0}
}

func (x *ChatRedisData_SystemHint) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type ChatMixRedisData_SystemHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type uint32 `protobuf:"varint,14,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ChatMixRedisData_SystemHint) Reset() {
	*x = ChatMixRedisData_SystemHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_redis_data_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMixRedisData_SystemHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMixRedisData_SystemHint) ProtoMessage() {}

func (x *ChatMixRedisData_SystemHint) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_redis_data_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMixRedisData_SystemHint.ProtoReflect.Descriptor instead.
func (*ChatMixRedisData_SystemHint) Descriptor() ([]byte, []int) {
	return file_server_only_redis_data_proto_rawDescGZIP(), []int{26, 0}
}

func (x *ChatMixRedisData_SystemHint) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

var File_server_only_redis_data_proto protoreflect.FileDescriptor

var file_server_only_redis_data_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x2f, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x2f, 0x62, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x2f, 0x62, 0x69, 0x6e, 0x2e, 0x68, 0x6f, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x6d, 0x64, 0x5f,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x01, 0x0a, 0x15, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x08, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x42, 0x69, 0x6e, 0x52, 0x07, 0x6d, 0x61,
	0x69, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x69, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x4d, 0x61,
	0x69, 0x6c, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x1a, 0x0a, 0x18, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x1c, 0x0a, 0x1a,
	0x4d, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x61,
	0x70, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x23, 0x0a, 0x21, 0x4d, 0x61,
	0x69, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x48,
	0x61, 0x73, 0x68, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x22, 0x0a, 0x20, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x69,
	0x6c, 0x49, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x46, 0x0a, 0x0d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x13,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x3e, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x42,
	0x69, 0x6e, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x42, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x69, 0x6e, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x17, 0x48, 0x6f, 0x6d, 0x65, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x42, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d,
	0x73, 0x67, 0x42, 0x69, 0x6e, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x1e, 0x0a, 0x1c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x50, 0x53, 0x4e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x1e, 0x0a, 0x1c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x41, 0x73, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x1a, 0x0a, 0x18, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x1d, 0x0a, 0x1b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x53, 0x4e, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x74, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x70, 0x42, 0x72, 0x69,
	0x65, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x70, 0x5f,
	0x61, 0x76, 0x61, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x4d, 0x70, 0x41, 0x76, 0x61, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37,
	0x0a, 0x19, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6d, 0x70, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x70, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x4d, 0x70, 0x57, 0x69, 0x74, 0x68, 0x50,
	0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0xd5, 0x03, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x65, 0x66, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2b, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x16, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x77,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4e, 0x0a, 0x15,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x12, 0x32, 0x0a, 0x16, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x12, 0x73, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xb9, 0x04, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x42,
	0x72, 0x69, 0x65, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x63, 0x6f, 0x69, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x68, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x73,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x73, 0x6e, 0x49,
	0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x45,
	0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x19,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x71, 0x0a, 0x17, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x14, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xb6, 0x02, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x6f, 0x6d,
	0x65, 0x42, 0x72, 0x69, 0x65, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x18, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x48, 0x6f, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73,
	0x48, 0x6f, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a,
	0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x89, 0x02, 0x0a, 0x18,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x65, 0x66, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x3c, 0x0a, 0x0b, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x42, 0x72, 0x69, 0x65, 0x66, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x70, 0x5f, 0x62, 0x72,
	0x69, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x70, 0x42, 0x72, 0x69, 0x65, 0x66, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x07, 0x6d, 0x70, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x39, 0x0a, 0x0a,
	0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48,
	0x6f, 0x6d, 0x65, 0x42, 0x72, 0x69, 0x65, 0x66, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x68, 0x6f,
	0x6d, 0x65, 0x42, 0x72, 0x69, 0x65, 0x66, 0x22, 0x5c, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1c, 0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x1b, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x22, 0x0a, 0x20, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xeb, 0x02, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x6f, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x68,
	0x69, 0x6e, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x48, 0x69, 0x6e, 0x74, 0x1a, 0x20, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x0e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x48, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x48, 0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x48, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f,
	0x57, 0x4f, 0x52, 0x4c, 0x44, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0xf4, 0x02, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x69, 0x78, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x6f, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x9a, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x15, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x92, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0xd9, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x69, 0x78, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x69, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x69, 0x6e, 0x74, 0x1a,
	0x20, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x4b, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x69, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x54,
	0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x10, 0x02, 0x42, 0x09,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x12, 0x42, 0x6c,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x48, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x50, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x70, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x1a, 0x3c, 0x0a, 0x0e, 0x50, 0x69,
	0x63, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe7, 0x02, 0x0a, 0x15, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x61, 0x0a, 0x13, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x48, 0x61,
	0x76, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x68, 0x61, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x61, 0x0a, 0x13, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x57, 0x69, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x77, 0x69, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x1a, 0x43, 0x0a, 0x15, 0x48, 0x61, 0x76, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a,
	0x15, 0x57, 0x69, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x83, 0x01, 0x0a, 0x14, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d,
	0x70, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x12, 0x68,
	0x61, 0x76, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x52, 0x0f, 0x68, 0x61,
	0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x11, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x77, 0x69, 0x73, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xda, 0x02, 0x0a, 0x16, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x5c, 0x0a, 0x11, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47,
	0x69, 0x76, 0x65, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x48, 0x61,
	0x76, 0x65, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x68, 0x61, 0x76, 0x65, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61,
	0x70, 0x12, 0x5c, 0x0a, 0x11, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x69, 0x76,
	0x65, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x57, 0x69, 0x73, 0x68,
	0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x77, 0x69, 0x73, 0x68, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x1a,
	0x41, 0x0a, 0x13, 0x48, 0x61, 0x76, 0x65, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x57, 0x69, 0x73, 0x68, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75,
	0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xee, 0x02, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x58, 0x0a,
	0x19, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x47, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0d, 0x62, 0x6c, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6c, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x11, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x10, 0x77, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x61, 0x6d, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61,
	0x6d, 0x70, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e,
	0x77, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfe, 0x01, 0x0a, 0x1d, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x78, 0x0a, 0x18, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x61, 0x70, 0x1a, 0x63, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x48, 0x6f, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x6e, 0x64,
	0x22, 0x6e, 0x0a, 0x16, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x72, 0x69, 0x65, 0x66, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x27, 0x66, 0x75,
	0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x66, 0x75, 0x72,
	0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x78, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x1a, 0x0a, 0x18, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x47, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x1d, 0x0a, 0x1b,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x99, 0x01, 0x0a, 0x12,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x07,
	0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x6f,
	0x70, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x42, 0x69, 0x6e,
	0x52, 0x05, 0x6f, 0x70, 0x42, 0x69, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x1b, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x33, 0x49, 0x6e, 0x74, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x23, 0x0a, 0x03, 0x72,
	0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x49, 0x6e, 0x74, 0x52, 0x03, 0x72, 0x6f, 0x74,
	0x22, 0x78, 0x0a, 0x1a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x14, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x6d,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x42, 0x69, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xe4, 0x02,
	0x0a, 0x16, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x65, 0x64,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65,
	0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a,
	0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x4e, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x1c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x75, 0x6d,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6c, 0x69, 0x6b, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x4e, 0x75,
	0x6d, 0x22, 0xfd, 0x03, 0x0a, 0x1b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x42, 0x72, 0x69, 0x65, 0x66, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x47, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x42, 0x69, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a,
	0x08, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x69, 0x6e,
	0x52, 0x08, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x06, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x6e, 0x65,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f,
	0x70, 0x73, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x50, 0x73, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4f, 0x6c, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x1c, 0x0a,
	0x1a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4c, 0x69,
	0x6b, 0x65, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x51, 0x0a, 0x15, 0x55,
	0x67, 0x63, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5e,
	0x0a, 0x16, 0x55, 0x67, 0x63, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x75, 0x73, 0x69,
	0x63, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x67, 0x63, 0x4d, 0x75, 0x73,
	0x69, 0x63, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0d, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x7e,
	0x0a, 0x18, 0x55, 0x67, 0x63, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x75,
	0x73, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x75,
	0x73, 0x69, 0x63, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x10, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x67, 0x63, 0x4d, 0x75, 0x73, 0x69, 0x63,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e,
	0x6d, 0x75, 0x73, 0x69, 0x63, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x99,
	0x01, 0x0a, 0x0c, 0x55, 0x67, 0x63, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x19, 0x0a, 0x08, 0x75, 0x67, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x75, 0x67, 0x63, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61,
	0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73,
	0x61, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x6d, 0x75, 0x73, 0x69, 0x63,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x67, 0x63, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0c, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x55, 0x67,
	0x63, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x15,
	0x0a, 0x13, 0x55, 0x67, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa0, 0x01, 0x0a, 0x16, 0x55, 0x67, 0x63, 0x4d, 0x75, 0x73,
	0x69, 0x63, 0x42, 0x72, 0x69, 0x65, 0x64, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e,
	0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x67, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x55, 0x67, 0x63, 0x47, 0x75, 0x69, 0x64, 0x22, 0x89, 0x02, 0x0a, 0x11, 0x55, 0x67, 0x63,
	0x42, 0x72, 0x69, 0x65, 0x66, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19,
	0x0a, 0x08, 0x75, 0x67, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x75, 0x67, 0x63, 0x47, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x70, 0x73, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x50, 0x73,
	0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x40, 0x0a, 0x0b, 0x6d, 0x75, 0x73,
	0x69, 0x63, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x67, 0x63, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x42,
	0x72, 0x69, 0x65, 0x64, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0a, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x42, 0x72, 0x69, 0x65, 0x66, 0x42, 0x07, 0x0a, 0x05, 0x62,
	0x72, 0x69, 0x65, 0x66, 0x22, 0xf1, 0x01, 0x0a, 0x1b, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x6c, 0x75,
	0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x42, 0x72, 0x69, 0x65, 0x66, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x63, 0x6f, 0x70, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x1c, 0x48, 0x6f, 0x6d, 0x65,
	0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x5f, 0x62, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x52,
	0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x2a, 0x47, 0x0a, 0x10, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f,
	0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45,
	0x10, 0x01, 0x2a, 0x41, 0x0a, 0x0e, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x4c,
	0x49, 0x4e, 0x45, 0x10, 0x01, 0x2a, 0x83, 0x01, 0x0a, 0x1a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44,
	0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d,
	0x45, 0x4e, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x2a, 0x6f, 0x0a, 0x10, 0x55,
	0x67, 0x63, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x18, 0x55, 0x47, 0x43, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x55, 0x47, 0x43, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x55,
	0x47, 0x43, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x10, 0x02, 0x42, 0x28, 0x5a, 0x26,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x79, 0x76, 0x61,
	0x74, 0x2d, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2f, 0x68, 0x6b, 0x34, 0x65, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_only_redis_data_proto_rawDescOnce sync.Once
	file_server_only_redis_data_proto_rawDescData = file_server_only_redis_data_proto_rawDesc
)

func file_server_only_redis_data_proto_rawDescGZIP() []byte {
	file_server_only_redis_data_proto_rawDescOnce.Do(func() {
		file_server_only_redis_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_only_redis_data_proto_rawDescData)
	})
	return file_server_only_redis_data_proto_rawDescData
}

var file_server_only_redis_data_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_server_only_redis_data_proto_msgTypes = make([]protoimpl.MessageInfo, 66)
var file_server_only_redis_data_proto_goTypes = []interface{}{
	(PlayerStatusType)(0),                      // 0: proto.PlayerStatusType
	(HomeStatusType)(0),                        // 1: proto.HomeStatusType
	(CustomDungeonRecommendType)(0),            // 2: proto.CustomDungeonRecommendType
	(UgcRedisDataType)(0),                      // 3: proto.UgcRedisDataType
	(ChatRedisData_SystemHintType)(0),          // 4: proto.ChatRedisData.SystemHintType
	(ChatMixRedisData_SystemHintType)(0),       // 5: proto.ChatMixRedisData.SystemHintType
	(*PlayerStatusRedisData)(nil),              // 6: proto.PlayerStatusRedisData
	(*MailRedisData)(nil),                      // 7: proto.MailRedisData
	(*MailMaxIdRedisData)(nil),                 // 8: proto.MailMaxIdRedisData
	(*MailIdSortedSetRedisData)(nil),           // 9: proto.MailIdSortedSetRedisData
	(*MailTicketHashMapRedisData)(nil),         // 10: proto.MailTicketHashMapRedisData
	(*MailTransactionIdHashMapRedisData)(nil),  // 11: proto.MailTransactionIdHashMapRedisData
	(*MailTicketMailIdHashMapRedisData)(nil),   // 12: proto.MailTicketMailIdHashMapRedisData
	(*TicketTimeBin)(nil),                      // 13: proto.TicketTimeBin
	(*OfflineMsgRedisData)(nil),                // 14: proto.OfflineMsgRedisData
	(*HomeOfflineMsgRedisData)(nil),            // 15: proto.HomeOfflineMsgRedisData
	(*PlayerFriendListRedisData)(nil),          // 16: proto.PlayerFriendListRedisData
	(*PlayerPSNFriendListRedisData)(nil),       // 17: proto.PlayerPSNFriendListRedisData
	(*PlayerAskFriendListRedisData)(nil),       // 18: proto.PlayerAskFriendListRedisData
	(*PlayerBlacklistRedisData)(nil),           // 19: proto.PlayerBlacklistRedisData
	(*PlayerPSNBlacklistRedisData)(nil),        // 20: proto.PlayerPSNBlacklistRedisData
	(*PlayerMpBriefData)(nil),                  // 21: proto.PlayerMpBriefData
	(*PlayerSocialBriefData)(nil),              // 22: proto.PlayerSocialBriefData
	(*PlayerBasicBriefData)(nil),               // 23: proto.PlayerBasicBriefData
	(*PlayerHomeAuditModuleData)(nil),          // 24: proto.PlayerHomeAuditModuleData
	(*PlayerHomeBriefData)(nil),                // 25: proto.PlayerHomeBriefData
	(*PlayerBriefDataRedisData)(nil),           // 26: proto.PlayerBriefDataRedisData
	(*PlayerShowAvatarRedisData)(nil),          // 27: proto.PlayerShowAvatarRedisData
	(*PlayerPrivateChatRedisData)(nil),         // 28: proto.PlayerPrivateChatRedisData
	(*PlayerRecentChatRedisData)(nil),          // 29: proto.PlayerRecentChatRedisData
	(*PlayerPrivateChatUnreadRedisData)(nil),   // 30: proto.PlayerPrivateChatUnreadRedisData
	(*ChatRedisData)(nil),                      // 31: proto.ChatRedisData
	(*ChatMixRedisData)(nil),                   // 32: proto.ChatMixRedisData
	(*BlessingSocialData)(nil),                 // 33: proto.BlessingSocialData
	(*PlantFlowerSocialData)(nil),              // 34: proto.PlantFlowerSocialData
	(*WinterCampSocialData)(nil),               // 35: proto.WinterCampSocialData
	(*ActivityGiveSocialData)(nil),             // 36: proto.ActivityGiveSocialData
	(*ActivitySocialData)(nil),                 // 37: proto.ActivitySocialData
	(*PlayerActivitySocialRedisData)(nil),      // 38: proto.PlayerActivitySocialRedisData
	(*HomeStatusRedisData)(nil),                // 39: proto.HomeStatusRedisData
	(*HomeBriefDataRedisData)(nil),             // 40: proto.HomeBriefDataRedisData
	(*OfflineOpGIndexRedisData)(nil),           // 41: proto.OfflineOpGIndexRedisData
	(*OfflineOpSortedSetRedisData)(nil),        // 42: proto.OfflineOpSortedSetRedisData
	(*OfflineOpRedisData)(nil),                 // 43: proto.OfflineOpRedisData
	(*CustomDungeonBlockRedisData)(nil),        // 44: proto.CustomDungeonBlockRedisData
	(*CustomDungeonRoomRedisData)(nil),         // 45: proto.CustomDungeonRoomRedisData
	(*CustomDungeonContent)(nil),               // 46: proto.CustomDungeonContent
	(*CustomDungeonRedisData)(nil),             // 47: proto.CustomDungeonRedisData
	(*CustomDungeonSocialRedisData)(nil),       // 48: proto.CustomDungeonSocialRedisData
	(*CustomDungeonBriefRedisData)(nil),        // 49: proto.CustomDungeonBriefRedisData
	(*CustomDungeonNewRecommendRedisData)(nil), // 50: proto.CustomDungeonNewRecommendRedisData
	(*CustomDungeonOldRecommendRedisData)(nil), // 51: proto.CustomDungeonOldRecommendRedisData
	(*CustomDungeonLikeRedisData)(nil),         // 52: proto.CustomDungeonLikeRedisData
	(*UgcMusicNoteRedisData)(nil),              // 53: proto.UgcMusicNoteRedisData
	(*UgcMusicTrackRedisData)(nil),             // 54: proto.UgcMusicTrackRedisData
	(*UgcMusicContentRedisData)(nil),           // 55: proto.UgcMusicContentRedisData
	(*UgcRedisData)(nil),                       // 56: proto.UgcRedisData
	(*UgcEditRedisData)(nil),                   // 57: proto.UgcEditRedisData
	(*UgcPublishRedisData)(nil),                // 58: proto.UgcPublishRedisData
	(*UgcMusicBriedRedisData)(nil),             // 59: proto.UgcMusicBriedRedisData
	(*UgcBriefRedisData)(nil),                  // 60: proto.UgcBriefRedisData
	(*HomeBlueprintBriefRedisData)(nil),        // 61: proto.HomeBlueprintBriefRedisData
	(*HomeBlueprintDetailRedisData)(nil),       // 62: proto.HomeBlueprintDetailRedisData
	nil,                                        // 63: proto.PlayerHomeAuditModuleData.AuditSceneVersionMapEntry
	(*ChatRedisData_SystemHint)(nil),           // 64: proto.ChatRedisData.SystemHint
	(*ChatMixRedisData_SystemHint)(nil),        // 65: proto.ChatMixRedisData.SystemHint
	nil,                                        // 66: proto.BlessingSocialData.PicNumMapEntry
	nil,                                        // 67: proto.PlantFlowerSocialData.HaveFlowerNumMapEntry
	nil,                                        // 68: proto.PlantFlowerSocialData.WishFlowerNumMapEntry
	nil,                                        // 69: proto.ActivityGiveSocialData.HaveGiftNumMapEntry
	nil,                                        // 70: proto.ActivityGiveSocialData.WishGiftNumMapEntry
	nil,                                        // 71: proto.PlayerActivitySocialRedisData.ActivitySocialDataMapEntry
	(*MailBin)(nil),                            // 72: proto.MailBin
	(*OfflineMsgBin)(nil),                      // 73: proto.OfflineMsgBin
	(*HomeOfflineMsgBin)(nil),                  // 74: proto.HomeOfflineMsgBin
	(*Birthday)(nil),                           // 75: proto.Birthday
	(*SocialShowAvatarInfo)(nil),               // 76: proto.SocialShowAvatarInfo
	(LanguageType)(0),                          // 77: proto.LanguageType
	(FriendEnterHomeOption)(0),                 // 78: proto.FriendEnterHomeOption
	(*ShowAvatarInfo)(nil),                     // 79: proto.ShowAvatarInfo
	(*ItemParamBin)(nil),                       // 80: proto.ItemParamBin
	(OfflineOpType)(0),                         // 81: proto.OfflineOpType
	(*OfflineOpBin)(nil),                       // 82: proto.OfflineOpBin
	(*Vector3Int)(nil),                         // 83: proto.Vector3Int
	(*CustomDungeonSettingBin)(nil),            // 84: proto.CustomDungeonSettingBin
	(*CustomDungeonAbstractBin)(nil),           // 85: proto.CustomDungeonAbstractBin
	(*HomeSceneBin)(nil),                       // 86: proto.HomeSceneBin
}
var file_server_only_redis_data_proto_depIdxs = []int32{
	0,  // 0: proto.PlayerStatusRedisData.status:type_name -> proto.PlayerStatusType
	72, // 1: proto.MailRedisData.mail_bin:type_name -> proto.MailBin
	73, // 2: proto.OfflineMsgRedisData.offline_msg_list:type_name -> proto.OfflineMsgBin
	13, // 3: proto.OfflineMsgRedisData.recent_ticket_list:type_name -> proto.TicketTimeBin
	74, // 4: proto.HomeOfflineMsgRedisData.offline_msg_list:type_name -> proto.HomeOfflineMsgBin
	13, // 5: proto.HomeOfflineMsgRedisData.recent_ticket_list:type_name -> proto.TicketTimeBin
	75, // 6: proto.PlayerSocialBriefData.birthday:type_name -> proto.Birthday
	76, // 7: proto.PlayerSocialBriefData.show_avatar_info_list:type_name -> proto.SocialShowAvatarInfo
	77, // 8: proto.PlayerBasicBriefData.client_language_type:type_name -> proto.LanguageType
	63, // 9: proto.PlayerHomeAuditModuleData.audit_scene_version_map:type_name -> proto.PlayerHomeAuditModuleData.AuditSceneVersionMapEntry
	78, // 10: proto.PlayerHomeBriefData.friend_enter_home_option:type_name -> proto.FriendEnterHomeOption
	24, // 11: proto.PlayerHomeBriefData.audit_module_list:type_name -> proto.PlayerHomeAuditModuleData
	22, // 12: proto.PlayerBriefDataRedisData.social_brief:type_name -> proto.PlayerSocialBriefData
	23, // 13: proto.PlayerBriefDataRedisData.basic_brief:type_name -> proto.PlayerBasicBriefData
	21, // 14: proto.PlayerBriefDataRedisData.mp_brief:type_name -> proto.PlayerMpBriefData
	25, // 15: proto.PlayerBriefDataRedisData.home_brief:type_name -> proto.PlayerHomeBriefData
	79, // 16: proto.PlayerShowAvatarRedisData.show_avatar_info:type_name -> proto.ShowAvatarInfo
	64, // 17: proto.ChatRedisData.system_hint:type_name -> proto.ChatRedisData.SystemHint
	65, // 18: proto.ChatMixRedisData.system_hint:type_name -> proto.ChatMixRedisData.SystemHint
	66, // 19: proto.BlessingSocialData.pic_num_map:type_name -> proto.BlessingSocialData.PicNumMapEntry
	67, // 20: proto.PlantFlowerSocialData.have_flower_num_map:type_name -> proto.PlantFlowerSocialData.HaveFlowerNumMapEntry
	68, // 21: proto.PlantFlowerSocialData.wish_flower_num_map:type_name -> proto.PlantFlowerSocialData.WishFlowerNumMapEntry
	80, // 22: proto.WinterCampSocialData.have_item_bin_list:type_name -> proto.ItemParamBin
	69, // 23: proto.ActivityGiveSocialData.have_gift_num_map:type_name -> proto.ActivityGiveSocialData.HaveGiftNumMapEntry
	70, // 24: proto.ActivityGiveSocialData.wish_gift_num_map:type_name -> proto.ActivityGiveSocialData.WishGiftNumMapEntry
	36, // 25: proto.ActivitySocialData.activity_give_social_data:type_name -> proto.ActivityGiveSocialData
	33, // 26: proto.ActivitySocialData.blessing_data:type_name -> proto.BlessingSocialData
	34, // 27: proto.ActivitySocialData.plant_flower_data:type_name -> proto.PlantFlowerSocialData
	35, // 28: proto.ActivitySocialData.winter_camp_data:type_name -> proto.WinterCampSocialData
	71, // 29: proto.PlayerActivitySocialRedisData.activity_social_data_map:type_name -> proto.PlayerActivitySocialRedisData.ActivitySocialDataMapEntry
	1,  // 30: proto.HomeStatusRedisData.status:type_name -> proto.HomeStatusType
	81, // 31: proto.OfflineOpRedisData.op_type:type_name -> proto.OfflineOpType
	82, // 32: proto.OfflineOpRedisData.op_bin:type_name -> proto.OfflineOpBin
	83, // 33: proto.CustomDungeonBlockRedisData.pos:type_name -> proto.Vector3Int
	83, // 34: proto.CustomDungeonBlockRedisData.rot:type_name -> proto.Vector3Int
	44, // 35: proto.CustomDungeonRoomRedisData.block_list:type_name -> proto.CustomDungeonBlockRedisData
	45, // 36: proto.CustomDungeonContent.room_list:type_name -> proto.CustomDungeonRoomRedisData
	84, // 37: proto.CustomDungeonContent.setting:type_name -> proto.CustomDungeonSettingBin
	46, // 38: proto.CustomDungeonRedisData.edit_content:type_name -> proto.CustomDungeonContent
	46, // 39: proto.CustomDungeonRedisData.publish_content:type_name -> proto.CustomDungeonContent
	84, // 40: proto.CustomDungeonBriefRedisData.setting:type_name -> proto.CustomDungeonSettingBin
	85, // 41: proto.CustomDungeonBriefRedisData.abstract:type_name -> proto.CustomDungeonAbstractBin
	48, // 42: proto.CustomDungeonBriefRedisData.social:type_name -> proto.CustomDungeonSocialRedisData
	53, // 43: proto.UgcMusicTrackRedisData.music_note_list:type_name -> proto.UgcMusicNoteRedisData
	54, // 44: proto.UgcMusicContentRedisData.music_track_list:type_name -> proto.UgcMusicTrackRedisData
	55, // 45: proto.UgcRedisData.music_content:type_name -> proto.UgcMusicContentRedisData
	59, // 46: proto.UgcBriefRedisData.music_brief:type_name -> proto.UgcMusicBriedRedisData
	86, // 47: proto.HomeBlueprintDetailRedisData.scene_bin:type_name -> proto.HomeSceneBin
	37, // 48: proto.PlayerActivitySocialRedisData.ActivitySocialDataMapEntry.value:type_name -> proto.ActivitySocialData
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_server_only_redis_data_proto_init() }
func file_server_only_redis_data_proto_init() {
	if File_server_only_redis_data_proto != nil {
		return
	}
	file_server_only_bin_common_server_proto_init()
	file_server_only_bin_home_proto_init()
	file_cmd_cmd_social_proto_init()
	file_define_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_server_only_redis_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerStatusRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailMaxIdRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailIdSortedSetRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailTicketHashMapRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailTransactionIdHashMapRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailTicketMailIdHashMapRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketTimeBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineMsgRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeOfflineMsgRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerFriendListRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerPSNFriendListRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerAskFriendListRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerBlacklistRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerPSNBlacklistRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerMpBriefData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSocialBriefData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerBasicBriefData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerHomeAuditModuleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerHomeBriefData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerBriefDataRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerShowAvatarRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerPrivateChatRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerRecentChatRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerPrivateChatUnreadRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMixRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlessingSocialData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerSocialData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampSocialData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityGiveSocialData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivitySocialData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerActivitySocialRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeStatusRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeBriefDataRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineOpGIndexRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineOpSortedSetRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineOpRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDungeonBlockRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDungeonRoomRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDungeonContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDungeonRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDungeonSocialRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDungeonBriefRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDungeonNewRecommendRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDungeonOldRecommendRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDungeonLikeRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UgcMusicNoteRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UgcMusicTrackRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UgcMusicContentRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UgcRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UgcEditRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UgcPublishRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UgcMusicBriedRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UgcBriefRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeBlueprintBriefRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeBlueprintDetailRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatRedisData_SystemHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_redis_data_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMixRedisData_SystemHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_server_only_redis_data_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*ChatRedisData_Text)(nil),
		(*ChatRedisData_Icon)(nil),
		(*ChatRedisData_SystemHint_)(nil),
	}
	file_server_only_redis_data_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*ChatMixRedisData_Text)(nil),
		(*ChatMixRedisData_Icon)(nil),
		(*ChatMixRedisData_SystemHint_)(nil),
	}
	file_server_only_redis_data_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*ActivitySocialData_BlessingData)(nil),
		(*ActivitySocialData_PlantFlowerData)(nil),
		(*ActivitySocialData_WinterCampData)(nil),
	}
	file_server_only_redis_data_proto_msgTypes[50].OneofWrappers = []interface{}{
		(*UgcRedisData_MusicContent)(nil),
	}
	file_server_only_redis_data_proto_msgTypes[54].OneofWrappers = []interface{}{
		(*UgcBriefRedisData_MusicBrief)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_only_redis_data_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   66,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_server_only_redis_data_proto_goTypes,
		DependencyIndexes: file_server_only_redis_data_proto_depIdxs,
		EnumInfos:         file_server_only_redis_data_proto_enumTypes,
		MessageInfos:      file_server_only_redis_data_proto_msgTypes,
	}.Build()
	File_server_only_redis_data_proto = out.File
	file_server_only_redis_data_proto_rawDesc = nil
	file_server_only_redis_data_proto_goTypes = nil
	file_server_only_redis_data_proto_depIdxs = nil
}
