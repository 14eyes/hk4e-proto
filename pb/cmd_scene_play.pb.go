// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: cmd/cmd_scene_play.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ScenePlayBattleState int32

const (
	ScenePlayBattleState_SCENE_PLAY_BATTLE_NONE     ScenePlayBattleState = 0
	ScenePlayBattleState_SCENE_PLAY_BATTLE_INIT     ScenePlayBattleState = 1
	ScenePlayBattleState_SCENE_PLAY_BATTLE_PREPARE  ScenePlayBattleState = 2
	ScenePlayBattleState_SCENE_PLAY_BATTLE_READY    ScenePlayBattleState = 3
	ScenePlayBattleState_SCENE_PLAY_BATTLE_PRESTART ScenePlayBattleState = 4
	ScenePlayBattleState_SCENE_PLAY_BATTLE_START    ScenePlayBattleState = 5
	ScenePlayBattleState_SCENE_PLAY_BATTLE_STOP     ScenePlayBattleState = 6
)

// Enum value maps for ScenePlayBattleState.
var (
	ScenePlayBattleState_name = map[int32]string{
		0: "SCENE_PLAY_BATTLE_NONE",
		1: "SCENE_PLAY_BATTLE_INIT",
		2: "SCENE_PLAY_BATTLE_PREPARE",
		3: "SCENE_PLAY_BATTLE_READY",
		4: "SCENE_PLAY_BATTLE_PRESTART",
		5: "SCENE_PLAY_BATTLE_START",
		6: "SCENE_PLAY_BATTLE_STOP",
	}
	ScenePlayBattleState_value = map[string]int32{
		"SCENE_PLAY_BATTLE_NONE":     0,
		"SCENE_PLAY_BATTLE_INIT":     1,
		"SCENE_PLAY_BATTLE_PREPARE":  2,
		"SCENE_PLAY_BATTLE_READY":    3,
		"SCENE_PLAY_BATTLE_PRESTART": 4,
		"SCENE_PLAY_BATTLE_START":    5,
		"SCENE_PLAY_BATTLE_STOP":     6,
	}
)

func (x ScenePlayBattleState) Enum() *ScenePlayBattleState {
	p := new(ScenePlayBattleState)
	*p = x
	return p
}

func (x ScenePlayBattleState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScenePlayBattleState) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_scene_play_proto_enumTypes[0].Descriptor()
}

func (ScenePlayBattleState) Type() protoreflect.EnumType {
	return &file_cmd_cmd_scene_play_proto_enumTypes[0]
}

func (x ScenePlayBattleState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScenePlayBattleState.Descriptor instead.
func (ScenePlayBattleState) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_scene_play_proto_rawDescGZIP(), []int{0}
}

type ScenePlayBattleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode              uint32   `protobuf:"varint,4,opt,name=mode,proto3" json:"mode,omitempty"`
	ProgressStageList []uint32 `protobuf:"varint,3,rep,packed,name=progress_stage_list,json=progressStageList,proto3" json:"progress_stage_list,omitempty"`
	StartTime         uint32   `protobuf:"varint,10,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Duration          uint32   `protobuf:"varint,14,opt,name=duration,proto3" json:"duration,omitempty"`
	PlayType          uint32   `protobuf:"varint,12,opt,name=play_type,json=playType,proto3" json:"play_type,omitempty"`
	PlayId            uint32   `protobuf:"varint,1,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
	PrepareEndTime    uint32   `protobuf:"varint,7,opt,name=prepare_end_time,json=prepareEndTime,proto3" json:"prepare_end_time,omitempty"`
	Progress          uint32   `protobuf:"varint,11,opt,name=progress,proto3" json:"progress,omitempty"`
	State             uint32   `protobuf:"varint,8,opt,name=state,proto3" json:"state,omitempty"`
	Type              uint32   `protobuf:"varint,9,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ScenePlayBattleInfo) Reset() {
	*x = ScenePlayBattleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_scene_play_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlayBattleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlayBattleInfo) ProtoMessage() {}

func (x *ScenePlayBattleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_scene_play_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlayBattleInfo.ProtoReflect.Descriptor instead.
func (*ScenePlayBattleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_scene_play_proto_rawDescGZIP(), []int{0}
}

func (x *ScenePlayBattleInfo) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *ScenePlayBattleInfo) GetProgressStageList() []uint32 {
	if x != nil {
		return x.ProgressStageList
	}
	return nil
}

func (x *ScenePlayBattleInfo) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ScenePlayBattleInfo) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ScenePlayBattleInfo) GetPlayType() uint32 {
	if x != nil {
		return x.PlayType
	}
	return 0
}

func (x *ScenePlayBattleInfo) GetPlayId() uint32 {
	if x != nil {
		return x.PlayId
	}
	return 0
}

func (x *ScenePlayBattleInfo) GetPrepareEndTime() uint32 {
	if x != nil {
		return x.PrepareEndTime
	}
	return 0
}

func (x *ScenePlayBattleInfo) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *ScenePlayBattleInfo) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *ScenePlayBattleInfo) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type ScenePlayBattleInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleInfo *ScenePlayBattleInfo `protobuf:"bytes,11,opt,name=battle_info,json=battleInfo,proto3" json:"battle_info,omitempty"`
}

func (x *ScenePlayBattleInfoNotify) Reset() {
	*x = ScenePlayBattleInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_scene_play_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlayBattleInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlayBattleInfoNotify) ProtoMessage() {}

func (x *ScenePlayBattleInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_scene_play_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlayBattleInfoNotify.ProtoReflect.Descriptor instead.
func (*ScenePlayBattleInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_scene_play_proto_rawDescGZIP(), []int{1}
}

func (x *ScenePlayBattleInfoNotify) GetBattleInfo() *ScenePlayBattleInfo {
	if x != nil {
		return x.BattleInfo
	}
	return nil
}

type ScenePlayOwnerCheckReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayId      uint32 `protobuf:"varint,9,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
	IsSkipMatch bool   `protobuf:"varint,6,opt,name=is_skip_match,json=isSkipMatch,proto3" json:"is_skip_match,omitempty"`
}

func (x *ScenePlayOwnerCheckReq) Reset() {
	*x = ScenePlayOwnerCheckReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_scene_play_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlayOwnerCheckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlayOwnerCheckReq) ProtoMessage() {}

func (x *ScenePlayOwnerCheckReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_scene_play_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlayOwnerCheckReq.ProtoReflect.Descriptor instead.
func (*ScenePlayOwnerCheckReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_scene_play_proto_rawDescGZIP(), []int{2}
}

func (x *ScenePlayOwnerCheckReq) GetPlayId() uint32 {
	if x != nil {
		return x.PlayId
	}
	return 0
}

func (x *ScenePlayOwnerCheckReq) GetIsSkipMatch() bool {
	if x != nil {
		return x.IsSkipMatch
	}
	return false
}

type ScenePlayOwnerCheckRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParamList   []uint32 `protobuf:"varint,8,rep,packed,name=param_list,json=paramList,proto3" json:"param_list,omitempty"`
	IsSkipMatch bool     `protobuf:"varint,1,opt,name=is_skip_match,json=isSkipMatch,proto3" json:"is_skip_match,omitempty"`
	PlayId      uint32   `protobuf:"varint,9,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
	WrongUid    uint32   `protobuf:"varint,5,opt,name=wrong_uid,json=wrongUid,proto3" json:"wrong_uid,omitempty"`
	Retcode     int32    `protobuf:"varint,3,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *ScenePlayOwnerCheckRsp) Reset() {
	*x = ScenePlayOwnerCheckRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_scene_play_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlayOwnerCheckRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlayOwnerCheckRsp) ProtoMessage() {}

func (x *ScenePlayOwnerCheckRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_scene_play_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlayOwnerCheckRsp.ProtoReflect.Descriptor instead.
func (*ScenePlayOwnerCheckRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_scene_play_proto_rawDescGZIP(), []int{3}
}

func (x *ScenePlayOwnerCheckRsp) GetParamList() []uint32 {
	if x != nil {
		return x.ParamList
	}
	return nil
}

func (x *ScenePlayOwnerCheckRsp) GetIsSkipMatch() bool {
	if x != nil {
		return x.IsSkipMatch
	}
	return false
}

func (x *ScenePlayOwnerCheckRsp) GetPlayId() uint32 {
	if x != nil {
		return x.PlayId
	}
	return 0
}

func (x *ScenePlayOwnerCheckRsp) GetWrongUid() uint32 {
	if x != nil {
		return x.WrongUid
	}
	return 0
}

func (x *ScenePlayOwnerCheckRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type ScenePlayOwnerStartInviteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSkipMatch bool   `protobuf:"varint,8,opt,name=is_skip_match,json=isSkipMatch,proto3" json:"is_skip_match,omitempty"`
	PlayId      uint32 `protobuf:"varint,13,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
}

func (x *ScenePlayOwnerStartInviteReq) Reset() {
	*x = ScenePlayOwnerStartInviteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_scene_play_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlayOwnerStartInviteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlayOwnerStartInviteReq) ProtoMessage() {}

func (x *ScenePlayOwnerStartInviteReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_scene_play_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlayOwnerStartInviteReq.ProtoReflect.Descriptor instead.
func (*ScenePlayOwnerStartInviteReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_scene_play_proto_rawDescGZIP(), []int{4}
}

func (x *ScenePlayOwnerStartInviteReq) GetIsSkipMatch() bool {
	if x != nil {
		return x.IsSkipMatch
	}
	return false
}

func (x *ScenePlayOwnerStartInviteReq) GetPlayId() uint32 {
	if x != nil {
		return x.PlayId
	}
	return 0
}

type ScenePlayOwnerStartInviteRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSkipMatch bool   `protobuf:"varint,7,opt,name=is_skip_match,json=isSkipMatch,proto3" json:"is_skip_match,omitempty"`
	Retcode     int32  `protobuf:"varint,15,opt,name=retcode,proto3" json:"retcode,omitempty"`
	PlayId      uint32 `protobuf:"varint,11,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
}

func (x *ScenePlayOwnerStartInviteRsp) Reset() {
	*x = ScenePlayOwnerStartInviteRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_scene_play_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlayOwnerStartInviteRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlayOwnerStartInviteRsp) ProtoMessage() {}

func (x *ScenePlayOwnerStartInviteRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_scene_play_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlayOwnerStartInviteRsp.ProtoReflect.Descriptor instead.
func (*ScenePlayOwnerStartInviteRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_scene_play_proto_rawDescGZIP(), []int{5}
}

func (x *ScenePlayOwnerStartInviteRsp) GetIsSkipMatch() bool {
	if x != nil {
		return x.IsSkipMatch
	}
	return false
}

func (x *ScenePlayOwnerStartInviteRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ScenePlayOwnerStartInviteRsp) GetPlayId() uint32 {
	if x != nil {
		return x.PlayId
	}
	return 0
}

type ScenePlayOwnerInviteNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteCd       uint32 `protobuf:"varint,14,opt,name=invite_cd,json=inviteCd,proto3" json:"invite_cd,omitempty"`
	PlayId         uint32 `protobuf:"varint,5,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
	IsRemainReward bool   `protobuf:"varint,15,opt,name=is_remain_reward,json=isRemainReward,proto3" json:"is_remain_reward,omitempty"`
}

func (x *ScenePlayOwnerInviteNotify) Reset() {
	*x = ScenePlayOwnerInviteNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_scene_play_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlayOwnerInviteNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlayOwnerInviteNotify) ProtoMessage() {}

func (x *ScenePlayOwnerInviteNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_scene_play_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlayOwnerInviteNotify.ProtoReflect.Descriptor instead.
func (*ScenePlayOwnerInviteNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_scene_play_proto_rawDescGZIP(), []int{6}
}

func (x *ScenePlayOwnerInviteNotify) GetInviteCd() uint32 {
	if x != nil {
		return x.InviteCd
	}
	return 0
}

func (x *ScenePlayOwnerInviteNotify) GetPlayId() uint32 {
	if x != nil {
		return x.PlayId
	}
	return 0
}

func (x *ScenePlayOwnerInviteNotify) GetIsRemainReward() bool {
	if x != nil {
		return x.IsRemainReward
	}
	return false
}

type ScenePlayGuestReplyInviteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAgree bool   `protobuf:"varint,15,opt,name=is_agree,json=isAgree,proto3" json:"is_agree,omitempty"`
	PlayId  uint32 `protobuf:"varint,6,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
}

func (x *ScenePlayGuestReplyInviteReq) Reset() {
	*x = ScenePlayGuestReplyInviteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_scene_play_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlayGuestReplyInviteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlayGuestReplyInviteReq) ProtoMessage() {}

func (x *ScenePlayGuestReplyInviteReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_scene_play_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlayGuestReplyInviteReq.ProtoReflect.Descriptor instead.
func (*ScenePlayGuestReplyInviteReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_scene_play_proto_rawDescGZIP(), []int{7}
}

func (x *ScenePlayGuestReplyInviteReq) GetIsAgree() bool {
	if x != nil {
		return x.IsAgree
	}
	return false
}

func (x *ScenePlayGuestReplyInviteReq) GetPlayId() uint32 {
	if x != nil {
		return x.PlayId
	}
	return 0
}

type ScenePlayGuestReplyInviteRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32  `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
	IsAgree bool   `protobuf:"varint,2,opt,name=is_agree,json=isAgree,proto3" json:"is_agree,omitempty"`
	PlayId  uint32 `protobuf:"varint,8,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
}

func (x *ScenePlayGuestReplyInviteRsp) Reset() {
	*x = ScenePlayGuestReplyInviteRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_scene_play_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlayGuestReplyInviteRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlayGuestReplyInviteRsp) ProtoMessage() {}

func (x *ScenePlayGuestReplyInviteRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_scene_play_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlayGuestReplyInviteRsp.ProtoReflect.Descriptor instead.
func (*ScenePlayGuestReplyInviteRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_scene_play_proto_rawDescGZIP(), []int{8}
}

func (x *ScenePlayGuestReplyInviteRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ScenePlayGuestReplyInviteRsp) GetIsAgree() bool {
	if x != nil {
		return x.IsAgree
	}
	return false
}

func (x *ScenePlayGuestReplyInviteRsp) GetPlayId() uint32 {
	if x != nil {
		return x.PlayId
	}
	return 0
}

type ScenePlayGuestReplyNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayId   uint32 `protobuf:"varint,13,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
	GuestUid uint32 `protobuf:"varint,12,opt,name=guest_uid,json=guestUid,proto3" json:"guest_uid,omitempty"`
	IsAgree  bool   `protobuf:"varint,3,opt,name=is_agree,json=isAgree,proto3" json:"is_agree,omitempty"`
}

func (x *ScenePlayGuestReplyNotify) Reset() {
	*x = ScenePlayGuestReplyNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_scene_play_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlayGuestReplyNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlayGuestReplyNotify) ProtoMessage() {}

func (x *ScenePlayGuestReplyNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_scene_play_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlayGuestReplyNotify.ProtoReflect.Descriptor instead.
func (*ScenePlayGuestReplyNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_scene_play_proto_rawDescGZIP(), []int{9}
}

func (x *ScenePlayGuestReplyNotify) GetPlayId() uint32 {
	if x != nil {
		return x.PlayId
	}
	return 0
}

func (x *ScenePlayGuestReplyNotify) GetGuestUid() uint32 {
	if x != nil {
		return x.GuestUid
	}
	return 0
}

func (x *ScenePlayGuestReplyNotify) GetIsAgree() bool {
	if x != nil {
		return x.IsAgree
	}
	return false
}

type ScenePlayInviteResultNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAllArgee bool   `protobuf:"varint,11,opt,name=is_all_argee,json=isAllArgee,proto3" json:"is_all_argee,omitempty"`
	PlayId     uint32 `protobuf:"varint,15,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
}

func (x *ScenePlayInviteResultNotify) Reset() {
	*x = ScenePlayInviteResultNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_scene_play_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlayInviteResultNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlayInviteResultNotify) ProtoMessage() {}

func (x *ScenePlayInviteResultNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_scene_play_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlayInviteResultNotify.ProtoReflect.Descriptor instead.
func (*ScenePlayInviteResultNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_scene_play_proto_rawDescGZIP(), []int{10}
}

func (x *ScenePlayInviteResultNotify) GetIsAllArgee() bool {
	if x != nil {
		return x.IsAllArgee
	}
	return false
}

func (x *ScenePlayInviteResultNotify) GetPlayId() uint32 {
	if x != nil {
		return x.PlayId
	}
	return 0
}

type ScenePlayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryId  uint32 `protobuf:"varint,15,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	PlayId   uint32 `protobuf:"varint,11,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
	PlayType uint32 `protobuf:"varint,3,opt,name=play_type,json=playType,proto3" json:"play_type,omitempty"`
	IsOpen   bool   `protobuf:"varint,9,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *ScenePlayInfo) Reset() {
	*x = ScenePlayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_scene_play_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlayInfo) ProtoMessage() {}

func (x *ScenePlayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_scene_play_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlayInfo.ProtoReflect.Descriptor instead.
func (*ScenePlayInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_scene_play_proto_rawDescGZIP(), []int{11}
}

func (x *ScenePlayInfo) GetEntryId() uint32 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

func (x *ScenePlayInfo) GetPlayId() uint32 {
	if x != nil {
		return x.PlayId
	}
	return 0
}

func (x *ScenePlayInfo) GetPlayType() uint32 {
	if x != nil {
		return x.PlayType
	}
	return 0
}

func (x *ScenePlayInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type ScenePlayInfoListNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayInfoList []*ScenePlayInfo `protobuf:"bytes,6,rep,name=play_info_list,json=playInfoList,proto3" json:"play_info_list,omitempty"`
}

func (x *ScenePlayInfoListNotify) Reset() {
	*x = ScenePlayInfoListNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_scene_play_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlayInfoListNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlayInfoListNotify) ProtoMessage() {}

func (x *ScenePlayInfoListNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_scene_play_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlayInfoListNotify.ProtoReflect.Descriptor instead.
func (*ScenePlayInfoListNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_scene_play_proto_rawDescGZIP(), []int{12}
}

func (x *ScenePlayInfoListNotify) GetPlayInfoList() []*ScenePlayInfo {
	if x != nil {
		return x.PlayInfoList
	}
	return nil
}

type ScenePlayBattleInterruptNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterruptState uint32 `protobuf:"varint,6,opt,name=interrupt_state,json=interruptState,proto3" json:"interrupt_state,omitempty"`
	PlayId         uint32 `protobuf:"varint,5,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
	PlayType       uint32 `protobuf:"varint,1,opt,name=play_type,json=playType,proto3" json:"play_type,omitempty"`
}

func (x *ScenePlayBattleInterruptNotify) Reset() {
	*x = ScenePlayBattleInterruptNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_scene_play_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlayBattleInterruptNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlayBattleInterruptNotify) ProtoMessage() {}

func (x *ScenePlayBattleInterruptNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_scene_play_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlayBattleInterruptNotify.ProtoReflect.Descriptor instead.
func (*ScenePlayBattleInterruptNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_scene_play_proto_rawDescGZIP(), []int{13}
}

func (x *ScenePlayBattleInterruptNotify) GetInterruptState() uint32 {
	if x != nil {
		return x.InterruptState
	}
	return 0
}

func (x *ScenePlayBattleInterruptNotify) GetPlayId() uint32 {
	if x != nil {
		return x.PlayId
	}
	return 0
}

func (x *ScenePlayBattleInterruptNotify) GetPlayType() uint32 {
	if x != nil {
		return x.PlayType
	}
	return 0
}

type ScenePlayBattleSettlePlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardList       []*ExhibitionDisplayInfo `protobuf:"bytes,14,rep,name=card_list,json=cardList,proto3" json:"card_list,omitempty"`
	ProfilePicture *ProfilePicture          `protobuf:"bytes,10,opt,name=profile_picture,json=profilePicture,proto3" json:"profile_picture,omitempty"`
	HeadImage      uint32                   `protobuf:"varint,11,opt,name=head_image,json=headImage,proto3" json:"head_image,omitempty"`
	StatisticId    uint32                   `protobuf:"varint,4,opt,name=statistic_id,json=statisticId,proto3" json:"statistic_id,omitempty"`
	Uid            uint32                   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Param          int64                    `protobuf:"varint,5,opt,name=param,proto3" json:"param,omitempty"`
	OnlineId       string                   `protobuf:"bytes,12,opt,name=online_id,json=onlineId,proto3" json:"online_id,omitempty"`
	Nickname       string                   `protobuf:"bytes,15,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (x *ScenePlayBattleSettlePlayerInfo) Reset() {
	*x = ScenePlayBattleSettlePlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_scene_play_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlayBattleSettlePlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlayBattleSettlePlayerInfo) ProtoMessage() {}

func (x *ScenePlayBattleSettlePlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_scene_play_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlayBattleSettlePlayerInfo.ProtoReflect.Descriptor instead.
func (*ScenePlayBattleSettlePlayerInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_scene_play_proto_rawDescGZIP(), []int{14}
}

func (x *ScenePlayBattleSettlePlayerInfo) GetCardList() []*ExhibitionDisplayInfo {
	if x != nil {
		return x.CardList
	}
	return nil
}

func (x *ScenePlayBattleSettlePlayerInfo) GetProfilePicture() *ProfilePicture {
	if x != nil {
		return x.ProfilePicture
	}
	return nil
}

func (x *ScenePlayBattleSettlePlayerInfo) GetHeadImage() uint32 {
	if x != nil {
		return x.HeadImage
	}
	return 0
}

func (x *ScenePlayBattleSettlePlayerInfo) GetStatisticId() uint32 {
	if x != nil {
		return x.StatisticId
	}
	return 0
}

func (x *ScenePlayBattleSettlePlayerInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ScenePlayBattleSettlePlayerInfo) GetParam() int64 {
	if x != nil {
		return x.Param
	}
	return 0
}

func (x *ScenePlayBattleSettlePlayerInfo) GetOnlineId() string {
	if x != nil {
		return x.OnlineId
	}
	return ""
}

func (x *ScenePlayBattleSettlePlayerInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type ScenePlayBattleSettleRewardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardItemList []*ItemParam `protobuf:"bytes,4,rep,name=reward_item_list,json=rewardItemList,proto3" json:"reward_item_list,omitempty"`
	Uid            uint32       `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *ScenePlayBattleSettleRewardInfo) Reset() {
	*x = ScenePlayBattleSettleRewardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_scene_play_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlayBattleSettleRewardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlayBattleSettleRewardInfo) ProtoMessage() {}

func (x *ScenePlayBattleSettleRewardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_scene_play_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlayBattleSettleRewardInfo.ProtoReflect.Descriptor instead.
func (*ScenePlayBattleSettleRewardInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_scene_play_proto_rawDescGZIP(), []int{15}
}

func (x *ScenePlayBattleSettleRewardInfo) GetRewardItemList() []*ItemParam {
	if x != nil {
		return x.RewardItemList
	}
	return nil
}

func (x *ScenePlayBattleSettleRewardInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type ScenePlayBattleResultNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsWin                bool                               `protobuf:"varint,1,opt,name=is_win,json=isWin,proto3" json:"is_win,omitempty"`
	CostTime             uint32                             `protobuf:"varint,7,opt,name=cost_time,json=costTime,proto3" json:"cost_time,omitempty"`
	PlayType             uint32                             `protobuf:"varint,15,opt,name=play_type,json=playType,proto3" json:"play_type,omitempty"`
	PlayId               uint32                             `protobuf:"varint,11,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
	SettlePlayerInfoList []*ScenePlayBattleSettlePlayerInfo `protobuf:"bytes,4,rep,name=settle_player_info_list,json=settlePlayerInfoList,proto3" json:"settle_player_info_list,omitempty"`
	SettleRewardInfoList []*ScenePlayBattleSettleRewardInfo `protobuf:"bytes,14,rep,name=settle_reward_info_list,json=settleRewardInfoList,proto3" json:"settle_reward_info_list,omitempty"`
}

func (x *ScenePlayBattleResultNotify) Reset() {
	*x = ScenePlayBattleResultNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_scene_play_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlayBattleResultNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlayBattleResultNotify) ProtoMessage() {}

func (x *ScenePlayBattleResultNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_scene_play_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlayBattleResultNotify.ProtoReflect.Descriptor instead.
func (*ScenePlayBattleResultNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_scene_play_proto_rawDescGZIP(), []int{16}
}

func (x *ScenePlayBattleResultNotify) GetIsWin() bool {
	if x != nil {
		return x.IsWin
	}
	return false
}

func (x *ScenePlayBattleResultNotify) GetCostTime() uint32 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

func (x *ScenePlayBattleResultNotify) GetPlayType() uint32 {
	if x != nil {
		return x.PlayType
	}
	return 0
}

func (x *ScenePlayBattleResultNotify) GetPlayId() uint32 {
	if x != nil {
		return x.PlayId
	}
	return 0
}

func (x *ScenePlayBattleResultNotify) GetSettlePlayerInfoList() []*ScenePlayBattleSettlePlayerInfo {
	if x != nil {
		return x.SettlePlayerInfoList
	}
	return nil
}

func (x *ScenePlayBattleResultNotify) GetSettleRewardInfoList() []*ScenePlayBattleSettleRewardInfo {
	if x != nil {
		return x.SettleRewardInfoList
	}
	return nil
}

type ScenePlayBattleUidOpNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op              uint32   `protobuf:"varint,7,opt,name=op,proto3" json:"op,omitempty"`
	ParamTargetList []uint32 `protobuf:"varint,9,rep,packed,name=param_target_list,json=paramTargetList,proto3" json:"param_target_list,omitempty"`
	EntityId        uint32   `protobuf:"varint,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	ParamStr        string   `protobuf:"bytes,3,opt,name=param_str,json=paramStr,proto3" json:"param_str,omitempty"`
	UidList         []uint32 `protobuf:"varint,6,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"`
	ParamIndex      uint32   `protobuf:"varint,11,opt,name=param_index,json=paramIndex,proto3" json:"param_index,omitempty"`
	PlayType        uint32   `protobuf:"varint,8,opt,name=play_type,json=playType,proto3" json:"play_type,omitempty"`
	ParamDuration   uint32   `protobuf:"varint,12,opt,name=param_duration,json=paramDuration,proto3" json:"param_duration,omitempty"`
	ParamList       []uint32 `protobuf:"varint,15,rep,packed,name=param_list,json=paramList,proto3" json:"param_list,omitempty"`
	PlayId          uint32   `protobuf:"varint,5,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
}

func (x *ScenePlayBattleUidOpNotify) Reset() {
	*x = ScenePlayBattleUidOpNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_scene_play_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlayBattleUidOpNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlayBattleUidOpNotify) ProtoMessage() {}

func (x *ScenePlayBattleUidOpNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_scene_play_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlayBattleUidOpNotify.ProtoReflect.Descriptor instead.
func (*ScenePlayBattleUidOpNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_scene_play_proto_rawDescGZIP(), []int{17}
}

func (x *ScenePlayBattleUidOpNotify) GetOp() uint32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *ScenePlayBattleUidOpNotify) GetParamTargetList() []uint32 {
	if x != nil {
		return x.ParamTargetList
	}
	return nil
}

func (x *ScenePlayBattleUidOpNotify) GetEntityId() uint32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *ScenePlayBattleUidOpNotify) GetParamStr() string {
	if x != nil {
		return x.ParamStr
	}
	return ""
}

func (x *ScenePlayBattleUidOpNotify) GetUidList() []uint32 {
	if x != nil {
		return x.UidList
	}
	return nil
}

func (x *ScenePlayBattleUidOpNotify) GetParamIndex() uint32 {
	if x != nil {
		return x.ParamIndex
	}
	return 0
}

func (x *ScenePlayBattleUidOpNotify) GetPlayType() uint32 {
	if x != nil {
		return x.PlayType
	}
	return 0
}

func (x *ScenePlayBattleUidOpNotify) GetParamDuration() uint32 {
	if x != nil {
		return x.ParamDuration
	}
	return 0
}

func (x *ScenePlayBattleUidOpNotify) GetParamList() []uint32 {
	if x != nil {
		return x.ParamList
	}
	return nil
}

func (x *ScenePlayBattleUidOpNotify) GetPlayId() uint32 {
	if x != nil {
		return x.PlayId
	}
	return 0
}

type ScenePlayBattleInfoListNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleInfoList []*ScenePlayBattleInfo `protobuf:"bytes,12,rep,name=battle_info_list,json=battleInfoList,proto3" json:"battle_info_list,omitempty"`
}

func (x *ScenePlayBattleInfoListNotify) Reset() {
	*x = ScenePlayBattleInfoListNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_scene_play_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlayBattleInfoListNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlayBattleInfoListNotify) ProtoMessage() {}

func (x *ScenePlayBattleInfoListNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_scene_play_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlayBattleInfoListNotify.ProtoReflect.Descriptor instead.
func (*ScenePlayBattleInfoListNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_scene_play_proto_rawDescGZIP(), []int{18}
}

func (x *ScenePlayBattleInfoListNotify) GetBattleInfoList() []*ScenePlayBattleInfo {
	if x != nil {
		return x.BattleInfoList
	}
	return nil
}

type ScenePlayOutofRegionNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayId uint32 `protobuf:"varint,13,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
}

func (x *ScenePlayOutofRegionNotify) Reset() {
	*x = ScenePlayOutofRegionNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_scene_play_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlayOutofRegionNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlayOutofRegionNotify) ProtoMessage() {}

func (x *ScenePlayOutofRegionNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_scene_play_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlayOutofRegionNotify.ProtoReflect.Descriptor instead.
func (*ScenePlayOutofRegionNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_scene_play_proto_rawDescGZIP(), []int{19}
}

func (x *ScenePlayOutofRegionNotify) GetPlayId() uint32 {
	if x != nil {
		return x.PlayId
	}
	return 0
}

var File_cmd_cmd_scene_play_proto protoreflect.FileDescriptor

var file_cmd_cmd_scene_play_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x6d, 0x64, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xba, 0x02, 0x0a, 0x13, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x58, 0x0a, 0x19,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x55, 0x0a, 0x16, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0xab, 0x01,
	0x0a, 0x16, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x6b,
	0x69, 0x70, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6c,
	0x61, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x55, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x5b, 0x0a, 0x1c, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x1c, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x22,
	0x7c, 0x0a, 0x1a, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69,
	0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x52, 0x0a,
	0x1c, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x47, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x41, 0x67, 0x72, 0x65, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x49,
	0x64, 0x22, 0x6c, 0x0a, 0x1c, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x47, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x41, 0x67, 0x72, 0x65, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x22,
	0x6c, 0x0a, 0x19, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x75, 0x65, 0x73, 0x74, 0x55,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x67, 0x72, 0x65, 0x65, 0x22, 0x58, 0x0a,
	0x1b, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x20, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x72, 0x67, 0x65, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x65, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x0d, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70,
	0x65, 0x6e, 0x22, 0x55, 0x0a, 0x17, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x3a, 0x0a,
	0x0e, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x7f, 0x0a, 0x1e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x1f, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39,
	0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61,
	0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68,
	0x65, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x1f,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3a, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0e, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xc5, 0x02,
	0x0a, 0x1b, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x15, 0x0a,
	0x06, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69,
	0x73, 0x57, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x17, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x14, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x17, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x14, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xca, 0x02, 0x0a, 0x1a, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x4f, 0x70, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x6f, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x64, 0x22, 0x65, 0x0a, 0x1d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x1a, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x4f, 0x75, 0x74, 0x6f, 0x66, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64,
	0x2a, 0xe3, 0x01, 0x0a, 0x14, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10,
	0x01, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x02,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x03, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x04, 0x12, 0x1b, 0x0a,
	0x17, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f,
	0x53, 0x54, 0x4f, 0x50, 0x10, 0x06, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x79, 0x76, 0x61, 0x74, 0x2d, 0x68, 0x65, 0x6c, 0x70,
	0x65, 0x72, 0x2f, 0x68, 0x6b, 0x34, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cmd_cmd_scene_play_proto_rawDescOnce sync.Once
	file_cmd_cmd_scene_play_proto_rawDescData = file_cmd_cmd_scene_play_proto_rawDesc
)

func file_cmd_cmd_scene_play_proto_rawDescGZIP() []byte {
	file_cmd_cmd_scene_play_proto_rawDescOnce.Do(func() {
		file_cmd_cmd_scene_play_proto_rawDescData = protoimpl.X.CompressGZIP(file_cmd_cmd_scene_play_proto_rawDescData)
	})
	return file_cmd_cmd_scene_play_proto_rawDescData
}

var file_cmd_cmd_scene_play_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cmd_cmd_scene_play_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_cmd_cmd_scene_play_proto_goTypes = []interface{}{
	(ScenePlayBattleState)(0),               // 0: proto.ScenePlayBattleState
	(*ScenePlayBattleInfo)(nil),             // 1: proto.ScenePlayBattleInfo
	(*ScenePlayBattleInfoNotify)(nil),       // 2: proto.ScenePlayBattleInfoNotify
	(*ScenePlayOwnerCheckReq)(nil),          // 3: proto.ScenePlayOwnerCheckReq
	(*ScenePlayOwnerCheckRsp)(nil),          // 4: proto.ScenePlayOwnerCheckRsp
	(*ScenePlayOwnerStartInviteReq)(nil),    // 5: proto.ScenePlayOwnerStartInviteReq
	(*ScenePlayOwnerStartInviteRsp)(nil),    // 6: proto.ScenePlayOwnerStartInviteRsp
	(*ScenePlayOwnerInviteNotify)(nil),      // 7: proto.ScenePlayOwnerInviteNotify
	(*ScenePlayGuestReplyInviteReq)(nil),    // 8: proto.ScenePlayGuestReplyInviteReq
	(*ScenePlayGuestReplyInviteRsp)(nil),    // 9: proto.ScenePlayGuestReplyInviteRsp
	(*ScenePlayGuestReplyNotify)(nil),       // 10: proto.ScenePlayGuestReplyNotify
	(*ScenePlayInviteResultNotify)(nil),     // 11: proto.ScenePlayInviteResultNotify
	(*ScenePlayInfo)(nil),                   // 12: proto.ScenePlayInfo
	(*ScenePlayInfoListNotify)(nil),         // 13: proto.ScenePlayInfoListNotify
	(*ScenePlayBattleInterruptNotify)(nil),  // 14: proto.ScenePlayBattleInterruptNotify
	(*ScenePlayBattleSettlePlayerInfo)(nil), // 15: proto.ScenePlayBattleSettlePlayerInfo
	(*ScenePlayBattleSettleRewardInfo)(nil), // 16: proto.ScenePlayBattleSettleRewardInfo
	(*ScenePlayBattleResultNotify)(nil),     // 17: proto.ScenePlayBattleResultNotify
	(*ScenePlayBattleUidOpNotify)(nil),      // 18: proto.ScenePlayBattleUidOpNotify
	(*ScenePlayBattleInfoListNotify)(nil),   // 19: proto.ScenePlayBattleInfoListNotify
	(*ScenePlayOutofRegionNotify)(nil),      // 20: proto.ScenePlayOutofRegionNotify
	(*ExhibitionDisplayInfo)(nil),           // 21: proto.ExhibitionDisplayInfo
	(*ProfilePicture)(nil),                  // 22: proto.ProfilePicture
	(*ItemParam)(nil),                       // 23: proto.ItemParam
}
var file_cmd_cmd_scene_play_proto_depIdxs = []int32{
	1,  // 0: proto.ScenePlayBattleInfoNotify.battle_info:type_name -> proto.ScenePlayBattleInfo
	12, // 1: proto.ScenePlayInfoListNotify.play_info_list:type_name -> proto.ScenePlayInfo
	21, // 2: proto.ScenePlayBattleSettlePlayerInfo.card_list:type_name -> proto.ExhibitionDisplayInfo
	22, // 3: proto.ScenePlayBattleSettlePlayerInfo.profile_picture:type_name -> proto.ProfilePicture
	23, // 4: proto.ScenePlayBattleSettleRewardInfo.reward_item_list:type_name -> proto.ItemParam
	15, // 5: proto.ScenePlayBattleResultNotify.settle_player_info_list:type_name -> proto.ScenePlayBattleSettlePlayerInfo
	16, // 6: proto.ScenePlayBattleResultNotify.settle_reward_info_list:type_name -> proto.ScenePlayBattleSettleRewardInfo
	1,  // 7: proto.ScenePlayBattleInfoListNotify.battle_info_list:type_name -> proto.ScenePlayBattleInfo
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_cmd_cmd_scene_play_proto_init() }
func file_cmd_cmd_scene_play_proto_init() {
	if File_cmd_cmd_scene_play_proto != nil {
		return
	}
	file_define_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cmd_cmd_scene_play_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlayBattleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_scene_play_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlayBattleInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_scene_play_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlayOwnerCheckReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_scene_play_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlayOwnerCheckRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_scene_play_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlayOwnerStartInviteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_scene_play_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlayOwnerStartInviteRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_scene_play_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlayOwnerInviteNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_scene_play_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlayGuestReplyInviteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_scene_play_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlayGuestReplyInviteRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_scene_play_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlayGuestReplyNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_scene_play_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlayInviteResultNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_scene_play_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_scene_play_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlayInfoListNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_scene_play_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlayBattleInterruptNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_scene_play_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlayBattleSettlePlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_scene_play_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlayBattleSettleRewardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_scene_play_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlayBattleResultNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_scene_play_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlayBattleUidOpNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_scene_play_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlayBattleInfoListNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_scene_play_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlayOutofRegionNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cmd_cmd_scene_play_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cmd_cmd_scene_play_proto_goTypes,
		DependencyIndexes: file_cmd_cmd_scene_play_proto_depIdxs,
		EnumInfos:         file_cmd_cmd_scene_play_proto_enumTypes,
		MessageInfos:      file_cmd_cmd_scene_play_proto_msgTypes,
	}.Build()
	File_cmd_cmd_scene_play_proto = out.File
	file_cmd_cmd_scene_play_proto_rawDesc = nil
	file_cmd_cmd_scene_play_proto_goTypes = nil
	file_cmd_cmd_scene_play_proto_depIdxs = nil
}
