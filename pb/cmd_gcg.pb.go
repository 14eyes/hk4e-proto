// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: cmd/cmd_gcg.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GCGSkillHpChangeType int32

const (
	GCGSkillHpChangeType_GCG_SKILL_HP_CHANGE_NONE   GCGSkillHpChangeType = 0
	GCGSkillHpChangeType_GCG_SKILL_HP_CHANGE_DAMAGE GCGSkillHpChangeType = 1
	GCGSkillHpChangeType_GCG_SKILL_HP_CHANGE_HEAL   GCGSkillHpChangeType = 2
)

// Enum value maps for GCGSkillHpChangeType.
var (
	GCGSkillHpChangeType_name = map[int32]string{
		0: "GCG_SKILL_HP_CHANGE_NONE",
		1: "GCG_SKILL_HP_CHANGE_DAMAGE",
		2: "GCG_SKILL_HP_CHANGE_HEAL",
	}
	GCGSkillHpChangeType_value = map[string]int32{
		"GCG_SKILL_HP_CHANGE_NONE":   0,
		"GCG_SKILL_HP_CHANGE_DAMAGE": 1,
		"GCG_SKILL_HP_CHANGE_HEAL":   2,
	}
)

func (x GCGSkillHpChangeType) Enum() *GCGSkillHpChangeType {
	p := new(GCGSkillHpChangeType)
	*p = x
	return p
}

func (x GCGSkillHpChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCGSkillHpChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gcg_proto_enumTypes[0].Descriptor()
}

func (GCGSkillHpChangeType) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gcg_proto_enumTypes[0]
}

func (x GCGSkillHpChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GCGSkillHpChangeType.Descriptor instead.
func (GCGSkillHpChangeType) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{0}
}

type GCGSettleOption int32

const (
	GCGSettleOption_GCG_SETTLE_OPT_NONE     GCGSettleOption = 0
	GCGSettleOption_GCG_SETTLE_OPT_EXIT     GCGSettleOption = 1
	GCGSettleOption_GCG_SETTLE_OPT_CONTINUE GCGSettleOption = 2
	GCGSettleOption_GCG_SETTLE_OPT_RESTART  GCGSettleOption = 3
)

// Enum value maps for GCGSettleOption.
var (
	GCGSettleOption_name = map[int32]string{
		0: "GCG_SETTLE_OPT_NONE",
		1: "GCG_SETTLE_OPT_EXIT",
		2: "GCG_SETTLE_OPT_CONTINUE",
		3: "GCG_SETTLE_OPT_RESTART",
	}
	GCGSettleOption_value = map[string]int32{
		"GCG_SETTLE_OPT_NONE":     0,
		"GCG_SETTLE_OPT_EXIT":     1,
		"GCG_SETTLE_OPT_CONTINUE": 2,
		"GCG_SETTLE_OPT_RESTART":  3,
	}
)

func (x GCGSettleOption) Enum() *GCGSettleOption {
	p := new(GCGSettleOption)
	*p = x
	return p
}

func (x GCGSettleOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCGSettleOption) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gcg_proto_enumTypes[1].Descriptor()
}

func (GCGSettleOption) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gcg_proto_enumTypes[1]
}

func (x GCGSettleOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GCGSettleOption.Descriptor instead.
func (GCGSettleOption) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{1}
}

type GCGGameCreateFailReasonNotify_GCGGameCreateReason int32

const (
	GCGGameCreateFailReasonNotify_REASON_NONE                       GCGGameCreateFailReasonNotify_GCGGameCreateReason = 0
	GCGGameCreateFailReasonNotify_REASON_GAME_MAX                   GCGGameCreateFailReasonNotify_GCGGameCreateReason = 1
	GCGGameCreateFailReasonNotify_REASON_CLIENT_VERSION_NOT_LASTEST GCGGameCreateFailReasonNotify_GCGGameCreateReason = 2
	GCGGameCreateFailReasonNotify_REASON_RESOURCE_NOT_COMPLETE      GCGGameCreateFailReasonNotify_GCGGameCreateReason = 3
	GCGGameCreateFailReasonNotify_REASON_TIMEOUT                    GCGGameCreateFailReasonNotify_GCGGameCreateReason = 4
)

// Enum value maps for GCGGameCreateFailReasonNotify_GCGGameCreateReason.
var (
	GCGGameCreateFailReasonNotify_GCGGameCreateReason_name = map[int32]string{
		0: "REASON_NONE",
		1: "REASON_GAME_MAX",
		2: "REASON_CLIENT_VERSION_NOT_LASTEST",
		3: "REASON_RESOURCE_NOT_COMPLETE",
		4: "REASON_TIMEOUT",
	}
	GCGGameCreateFailReasonNotify_GCGGameCreateReason_value = map[string]int32{
		"REASON_NONE":                       0,
		"REASON_GAME_MAX":                   1,
		"REASON_CLIENT_VERSION_NOT_LASTEST": 2,
		"REASON_RESOURCE_NOT_COMPLETE":      3,
		"REASON_TIMEOUT":                    4,
	}
)

func (x GCGGameCreateFailReasonNotify_GCGGameCreateReason) Enum() *GCGGameCreateFailReasonNotify_GCGGameCreateReason {
	p := new(GCGGameCreateFailReasonNotify_GCGGameCreateReason)
	*p = x
	return p
}

func (x GCGGameCreateFailReasonNotify_GCGGameCreateReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCGGameCreateFailReasonNotify_GCGGameCreateReason) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gcg_proto_enumTypes[2].Descriptor()
}

func (GCGGameCreateFailReasonNotify_GCGGameCreateReason) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gcg_proto_enumTypes[2]
}

func (x GCGGameCreateFailReasonNotify_GCGGameCreateReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GCGGameCreateFailReasonNotify_GCGGameCreateReason.Descriptor instead.
func (GCGGameCreateFailReasonNotify_GCGGameCreateReason) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{97, 0}
}

type GCGAttackCostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId uint32            `protobuf:"varint,8,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	CostMap map[uint32]uint32 `protobuf:"bytes,3,rep,name=cost_map,json=costMap,proto3" json:"cost_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GCGAttackCostInfo) Reset() {
	*x = GCGAttackCostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGAttackCostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGAttackCostInfo) ProtoMessage() {}

func (x *GCGAttackCostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGAttackCostInfo.ProtoReflect.Descriptor instead.
func (*GCGAttackCostInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{0}
}

func (x *GCGAttackCostInfo) GetSkillId() uint32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *GCGAttackCostInfo) GetCostMap() map[uint32]uint32 {
	if x != nil {
		return x.CostMap
	}
	return nil
}

type GCGPlayCardCostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostMap map[uint32]uint32 `protobuf:"bytes,14,rep,name=cost_map,json=costMap,proto3" json:"cost_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CardId  uint32            `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
}

func (x *GCGPlayCardCostInfo) Reset() {
	*x = GCGPlayCardCostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGPlayCardCostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGPlayCardCostInfo) ProtoMessage() {}

func (x *GCGPlayCardCostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGPlayCardCostInfo.ProtoReflect.Descriptor instead.
func (*GCGPlayCardCostInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{1}
}

func (x *GCGPlayCardCostInfo) GetCostMap() map[uint32]uint32 {
	if x != nil {
		return x.CostMap
	}
	return nil
}

func (x *GCGPlayCardCostInfo) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

type GCGSelectOnStageCostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostMap  map[uint32]uint32 `protobuf:"bytes,8,rep,name=cost_map,json=costMap,proto3" json:"cost_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CardGuid uint32            `protobuf:"varint,9,opt,name=card_guid,json=cardGuid,proto3" json:"card_guid,omitempty"`
}

func (x *GCGSelectOnStageCostInfo) Reset() {
	*x = GCGSelectOnStageCostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGSelectOnStageCostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGSelectOnStageCostInfo) ProtoMessage() {}

func (x *GCGSelectOnStageCostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGSelectOnStageCostInfo.ProtoReflect.Descriptor instead.
func (*GCGSelectOnStageCostInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{2}
}

func (x *GCGSelectOnStageCostInfo) GetCostMap() map[uint32]uint32 {
	if x != nil {
		return x.CostMap
	}
	return nil
}

func (x *GCGSelectOnStageCostInfo) GetCardGuid() uint32 {
	if x != nil {
		return x.CardGuid
	}
	return 0
}

type GCGCostReviseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCanAttack           bool                        `protobuf:"varint,4,opt,name=is_can_attack,json=isCanAttack,proto3" json:"is_can_attack,omitempty"`
	CanUseHandCardIdList  []uint32                    `protobuf:"varint,11,rep,packed,name=can_use_hand_card_id_list,json=canUseHandCardIdList,proto3" json:"can_use_hand_card_id_list,omitempty"`
	PlayCardCostList      []*GCGPlayCardCostInfo      `protobuf:"bytes,5,rep,name=play_card_cost_list,json=playCardCostList,proto3" json:"play_card_cost_list,omitempty"`
	SelectOnStageCostList []*GCGSelectOnStageCostInfo `protobuf:"bytes,10,rep,name=select_on_stage_cost_list,json=selectOnStageCostList,proto3" json:"select_on_stage_cost_list,omitempty"`
	AttackCostList        []*GCGAttackCostInfo        `protobuf:"bytes,2,rep,name=attack_cost_list,json=attackCostList,proto3" json:"attack_cost_list,omitempty"`
}

func (x *GCGCostReviseInfo) Reset() {
	*x = GCGCostReviseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGCostReviseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGCostReviseInfo) ProtoMessage() {}

func (x *GCGCostReviseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGCostReviseInfo.ProtoReflect.Descriptor instead.
func (*GCGCostReviseInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{3}
}

func (x *GCGCostReviseInfo) GetIsCanAttack() bool {
	if x != nil {
		return x.IsCanAttack
	}
	return false
}

func (x *GCGCostReviseInfo) GetCanUseHandCardIdList() []uint32 {
	if x != nil {
		return x.CanUseHandCardIdList
	}
	return nil
}

func (x *GCGCostReviseInfo) GetPlayCardCostList() []*GCGPlayCardCostInfo {
	if x != nil {
		return x.PlayCardCostList
	}
	return nil
}

func (x *GCGCostReviseInfo) GetSelectOnStageCostList() []*GCGSelectOnStageCostInfo {
	if x != nil {
		return x.SelectOnStageCostList
	}
	return nil
}

func (x *GCGCostReviseInfo) GetAttackCostList() []*GCGAttackCostInfo {
	if x != nil {
		return x.AttackCostList
	}
	return nil
}

type GCGMsgTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Before    uint32    `protobuf:"varint,13,opt,name=before,proto3" json:"before,omitempty"`
	TokenType uint32    `protobuf:"varint,4,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	CardGuid  uint32    `protobuf:"varint,2,opt,name=card_guid,json=cardGuid,proto3" json:"card_guid,omitempty"`
	After     uint32    `protobuf:"varint,11,opt,name=after,proto3" json:"after,omitempty"`
	Reason    GCGReason `protobuf:"varint,7,opt,name=reason,proto3,enum=proto.GCGReason" json:"reason,omitempty"`
}

func (x *GCGMsgTokenChange) Reset() {
	*x = GCGMsgTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgTokenChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgTokenChange) ProtoMessage() {}

func (x *GCGMsgTokenChange) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgTokenChange.ProtoReflect.Descriptor instead.
func (*GCGMsgTokenChange) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{4}
}

func (x *GCGMsgTokenChange) GetBefore() uint32 {
	if x != nil {
		return x.Before
	}
	return 0
}

func (x *GCGMsgTokenChange) GetTokenType() uint32 {
	if x != nil {
		return x.TokenType
	}
	return 0
}

func (x *GCGMsgTokenChange) GetCardGuid() uint32 {
	if x != nil {
		return x.CardGuid
	}
	return 0
}

func (x *GCGMsgTokenChange) GetAfter() uint32 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *GCGMsgTokenChange) GetReason() GCGReason {
	if x != nil {
		return x.Reason
	}
	return GCGReason_GCG_REASON_DEFAULT
}

type GCGMsgPhaseChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowControllerMap map[uint32]uint32 `protobuf:"bytes,15,rep,name=allow_controller_map,json=allowControllerMap,proto3" json:"allow_controller_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	BeforePhase        GCGPhaseType      `protobuf:"varint,12,opt,name=before_phase,json=beforePhase,proto3,enum=proto.GCGPhaseType" json:"before_phase,omitempty"`
	AfterPhase         GCGPhaseType      `protobuf:"varint,5,opt,name=after_phase,json=afterPhase,proto3,enum=proto.GCGPhaseType" json:"after_phase,omitempty"`
}

func (x *GCGMsgPhaseChange) Reset() {
	*x = GCGMsgPhaseChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgPhaseChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgPhaseChange) ProtoMessage() {}

func (x *GCGMsgPhaseChange) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgPhaseChange.ProtoReflect.Descriptor instead.
func (*GCGMsgPhaseChange) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{5}
}

func (x *GCGMsgPhaseChange) GetAllowControllerMap() map[uint32]uint32 {
	if x != nil {
		return x.AllowControllerMap
	}
	return nil
}

func (x *GCGMsgPhaseChange) GetBeforePhase() GCGPhaseType {
	if x != nil {
		return x.BeforePhase
	}
	return GCGPhaseType_GCG_PHASE_INVALID
}

func (x *GCGMsgPhaseChange) GetAfterPhase() GCGPhaseType {
	if x != nil {
		return x.AfterPhase
	}
	return GCGPhaseType_GCG_PHASE_INVALID
}

type GCGMsgAddCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos          uint32      `protobuf:"varint,11,opt,name=pos,proto3" json:"pos,omitempty"`
	Zone         GCGZoneType `protobuf:"varint,2,opt,name=zone,proto3,enum=proto.GCGZoneType" json:"zone,omitempty"`
	Reason       GCGReason   `protobuf:"varint,15,opt,name=reason,proto3,enum=proto.GCGReason" json:"reason,omitempty"`
	ControllerId uint32      `protobuf:"varint,13,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	CardGuidList []uint32    `protobuf:"varint,14,rep,packed,name=card_guid_list,json=cardGuidList,proto3" json:"card_guid_list,omitempty"`
}

func (x *GCGMsgAddCards) Reset() {
	*x = GCGMsgAddCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgAddCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgAddCards) ProtoMessage() {}

func (x *GCGMsgAddCards) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgAddCards.ProtoReflect.Descriptor instead.
func (*GCGMsgAddCards) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{6}
}

func (x *GCGMsgAddCards) GetPos() uint32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *GCGMsgAddCards) GetZone() GCGZoneType {
	if x != nil {
		return x.Zone
	}
	return GCGZoneType_GCG_ZONE_INVALID
}

func (x *GCGMsgAddCards) GetReason() GCGReason {
	if x != nil {
		return x.Reason
	}
	return GCGReason_GCG_REASON_DEFAULT
}

func (x *GCGMsgAddCards) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *GCGMsgAddCards) GetCardGuidList() []uint32 {
	if x != nil {
		return x.CardGuidList
	}
	return nil
}

type GCGMsgRemoveCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId uint32      `protobuf:"varint,15,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	Zone         GCGZoneType `protobuf:"varint,10,opt,name=zone,proto3,enum=proto.GCGZoneType" json:"zone,omitempty"`
	Reason       GCGReason   `protobuf:"varint,5,opt,name=reason,proto3,enum=proto.GCGReason" json:"reason,omitempty"`
	CardGuidList []uint32    `protobuf:"varint,1,rep,packed,name=card_guid_list,json=cardGuidList,proto3" json:"card_guid_list,omitempty"`
}

func (x *GCGMsgRemoveCards) Reset() {
	*x = GCGMsgRemoveCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgRemoveCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgRemoveCards) ProtoMessage() {}

func (x *GCGMsgRemoveCards) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgRemoveCards.ProtoReflect.Descriptor instead.
func (*GCGMsgRemoveCards) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{7}
}

func (x *GCGMsgRemoveCards) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *GCGMsgRemoveCards) GetZone() GCGZoneType {
	if x != nil {
		return x.Zone
	}
	return GCGZoneType_GCG_ZONE_INVALID
}

func (x *GCGMsgRemoveCards) GetReason() GCGReason {
	if x != nil {
		return x.Reason
	}
	return GCGReason_GCG_REASON_DEFAULT
}

func (x *GCGMsgRemoveCards) GetCardGuidList() []uint32 {
	if x != nil {
		return x.CardGuidList
	}
	return nil
}

type GCGMsgMoveCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId uint32      `protobuf:"varint,14,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	To           GCGZoneType `protobuf:"varint,5,opt,name=to,proto3,enum=proto.GCGZoneType" json:"to,omitempty"`
	From         GCGZoneType `protobuf:"varint,12,opt,name=from,proto3,enum=proto.GCGZoneType" json:"from,omitempty"`
	CardGuidList []uint32    `protobuf:"varint,8,rep,packed,name=card_guid_list,json=cardGuidList,proto3" json:"card_guid_list,omitempty"`
	Reason       GCGReason   `protobuf:"varint,6,opt,name=reason,proto3,enum=proto.GCGReason" json:"reason,omitempty"`
	FailGuidList []uint32    `protobuf:"varint,11,rep,packed,name=fail_guid_list,json=failGuidList,proto3" json:"fail_guid_list,omitempty"`
}

func (x *GCGMsgMoveCard) Reset() {
	*x = GCGMsgMoveCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgMoveCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgMoveCard) ProtoMessage() {}

func (x *GCGMsgMoveCard) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgMoveCard.ProtoReflect.Descriptor instead.
func (*GCGMsgMoveCard) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{8}
}

func (x *GCGMsgMoveCard) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *GCGMsgMoveCard) GetTo() GCGZoneType {
	if x != nil {
		return x.To
	}
	return GCGZoneType_GCG_ZONE_INVALID
}

func (x *GCGMsgMoveCard) GetFrom() GCGZoneType {
	if x != nil {
		return x.From
	}
	return GCGZoneType_GCG_ZONE_INVALID
}

func (x *GCGMsgMoveCard) GetCardGuidList() []uint32 {
	if x != nil {
		return x.CardGuidList
	}
	return nil
}

func (x *GCGMsgMoveCard) GetReason() GCGReason {
	if x != nil {
		return x.Reason
	}
	return GCGReason_GCG_REASON_DEFAULT
}

func (x *GCGMsgMoveCard) GetFailGuidList() []uint32 {
	if x != nil {
		return x.FailGuidList
	}
	return nil
}

type GCGMsgSelectOnStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId uint32    `protobuf:"varint,6,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	Reason       GCGReason `protobuf:"varint,10,opt,name=reason,proto3,enum=proto.GCGReason" json:"reason,omitempty"`
	CardGuid     uint32    `protobuf:"varint,4,opt,name=card_guid,json=cardGuid,proto3" json:"card_guid,omitempty"`
}

func (x *GCGMsgSelectOnStage) Reset() {
	*x = GCGMsgSelectOnStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgSelectOnStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgSelectOnStage) ProtoMessage() {}

func (x *GCGMsgSelectOnStage) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgSelectOnStage.ProtoReflect.Descriptor instead.
func (*GCGMsgSelectOnStage) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{9}
}

func (x *GCGMsgSelectOnStage) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *GCGMsgSelectOnStage) GetReason() GCGReason {
	if x != nil {
		return x.Reason
	}
	return GCGReason_GCG_REASON_DEFAULT
}

func (x *GCGMsgSelectOnStage) GetCardGuid() uint32 {
	if x != nil {
		return x.CardGuid
	}
	return 0
}

type GCGMsgSelectOnStageByEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId      uint32 `protobuf:"varint,12,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	ControllerId uint32 `protobuf:"varint,15,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	CardGuid     uint32 `protobuf:"varint,1,opt,name=card_guid,json=cardGuid,proto3" json:"card_guid,omitempty"`
}

func (x *GCGMsgSelectOnStageByEffect) Reset() {
	*x = GCGMsgSelectOnStageByEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgSelectOnStageByEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgSelectOnStageByEffect) ProtoMessage() {}

func (x *GCGMsgSelectOnStageByEffect) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgSelectOnStageByEffect.ProtoReflect.Descriptor instead.
func (*GCGMsgSelectOnStageByEffect) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{10}
}

func (x *GCGMsgSelectOnStageByEffect) GetSkillId() uint32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *GCGMsgSelectOnStageByEffect) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *GCGMsgSelectOnStageByEffect) GetCardGuid() uint32 {
	if x != nil {
		return x.CardGuid
	}
	return 0
}

type GCGMsgDiceRoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiceSideList []GCGDiceSideType `protobuf:"varint,10,rep,packed,name=dice_side_list,json=diceSideList,proto3,enum=proto.GCGDiceSideType" json:"dice_side_list,omitempty"`
	DiceNum      uint32            `protobuf:"varint,15,opt,name=dice_num,json=diceNum,proto3" json:"dice_num,omitempty"`
	ControllerId uint32            `protobuf:"varint,5,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
}

func (x *GCGMsgDiceRoll) Reset() {
	*x = GCGMsgDiceRoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgDiceRoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgDiceRoll) ProtoMessage() {}

func (x *GCGMsgDiceRoll) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgDiceRoll.ProtoReflect.Descriptor instead.
func (*GCGMsgDiceRoll) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{11}
}

func (x *GCGMsgDiceRoll) GetDiceSideList() []GCGDiceSideType {
	if x != nil {
		return x.DiceSideList
	}
	return nil
}

func (x *GCGMsgDiceRoll) GetDiceNum() uint32 {
	if x != nil {
		return x.DiceNum
	}
	return 0
}

func (x *GCGMsgDiceRoll) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

type GCGMsgDiceReroll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId        uint32            `protobuf:"varint,2,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	SelectDiceIndexList []uint32          `protobuf:"varint,1,rep,packed,name=select_dice_index_list,json=selectDiceIndexList,proto3" json:"select_dice_index_list,omitempty"`
	DiceSideList        []GCGDiceSideType `protobuf:"varint,6,rep,packed,name=dice_side_list,json=diceSideList,proto3,enum=proto.GCGDiceSideType" json:"dice_side_list,omitempty"`
}

func (x *GCGMsgDiceReroll) Reset() {
	*x = GCGMsgDiceReroll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgDiceReroll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgDiceReroll) ProtoMessage() {}

func (x *GCGMsgDiceReroll) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgDiceReroll.ProtoReflect.Descriptor instead.
func (*GCGMsgDiceReroll) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{12}
}

func (x *GCGMsgDiceReroll) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *GCGMsgDiceReroll) GetSelectDiceIndexList() []uint32 {
	if x != nil {
		return x.SelectDiceIndexList
	}
	return nil
}

func (x *GCGMsgDiceReroll) GetDiceSideList() []GCGDiceSideType {
	if x != nil {
		return x.DiceSideList
	}
	return nil
}

type GCGMsgPass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId uint32 `protobuf:"varint,14,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
}

func (x *GCGMsgPass) Reset() {
	*x = GCGMsgPass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgPass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgPass) ProtoMessage() {}

func (x *GCGMsgPass) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgPass.ProtoReflect.Descriptor instead.
func (*GCGMsgPass) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{13}
}

func (x *GCGMsgPass) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

type GCGMsgCharDie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId uint32 `protobuf:"varint,5,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	CardGuid     uint32 `protobuf:"varint,11,opt,name=card_guid,json=cardGuid,proto3" json:"card_guid,omitempty"`
}

func (x *GCGMsgCharDie) Reset() {
	*x = GCGMsgCharDie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgCharDie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgCharDie) ProtoMessage() {}

func (x *GCGMsgCharDie) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgCharDie.ProtoReflect.Descriptor instead.
func (*GCGMsgCharDie) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{14}
}

func (x *GCGMsgCharDie) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *GCGMsgCharDie) GetCardGuid() uint32 {
	if x != nil {
		return x.CardGuid
	}
	return 0
}

type GCGMsgUseSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId  uint32 `protobuf:"varint,9,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	CardGuid uint32 `protobuf:"varint,6,opt,name=card_guid,json=cardGuid,proto3" json:"card_guid,omitempty"`
}

func (x *GCGMsgUseSkill) Reset() {
	*x = GCGMsgUseSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgUseSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgUseSkill) ProtoMessage() {}

func (x *GCGMsgUseSkill) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgUseSkill.ProtoReflect.Descriptor instead.
func (*GCGMsgUseSkill) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{15}
}

func (x *GCGMsgUseSkill) GetSkillId() uint32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *GCGMsgUseSkill) GetCardGuid() uint32 {
	if x != nil {
		return x.CardGuid
	}
	return 0
}

type GCGMsgUseSkillEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardGuid uint32 `protobuf:"varint,11,opt,name=card_guid,json=cardGuid,proto3" json:"card_guid,omitempty"`
	SkillId  uint32 `protobuf:"varint,12,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
}

func (x *GCGMsgUseSkillEnd) Reset() {
	*x = GCGMsgUseSkillEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgUseSkillEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgUseSkillEnd) ProtoMessage() {}

func (x *GCGMsgUseSkillEnd) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgUseSkillEnd.ProtoReflect.Descriptor instead.
func (*GCGMsgUseSkillEnd) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{16}
}

func (x *GCGMsgUseSkillEnd) GetCardGuid() uint32 {
	if x != nil {
		return x.CardGuid
	}
	return 0
}

func (x *GCGMsgUseSkillEnd) GetSkillId() uint32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

type GCGDamageDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId  uint32 `protobuf:"varint,10,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	CardGuid uint32 `protobuf:"varint,7,opt,name=card_guid,json=cardGuid,proto3" json:"card_guid,omitempty"`
}

func (x *GCGDamageDetail) Reset() {
	*x = GCGDamageDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDamageDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDamageDetail) ProtoMessage() {}

func (x *GCGDamageDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDamageDetail.ProtoReflect.Descriptor instead.
func (*GCGDamageDetail) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{17}
}

func (x *GCGDamageDetail) GetSkillId() uint32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *GCGDamageDetail) GetCardGuid() uint32 {
	if x != nil {
		return x.CardGuid
	}
	return 0
}

type GCGMsgSkillResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId        uint32             `protobuf:"varint,12,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	LastHp         uint32             `protobuf:"varint,14,opt,name=last_hp,json=lastHp,proto3" json:"last_hp,omitempty"`
	DetailList     []*GCGDamageDetail `protobuf:"bytes,2,rep,name=detail_list,json=detailList,proto3" json:"detail_list,omitempty"`
	TargetCardGuid uint32             `protobuf:"varint,7,opt,name=target_card_guid,json=targetCardGuid,proto3" json:"target_card_guid,omitempty"`
	EffectElement  uint32             `protobuf:"varint,5,opt,name=effect_element,json=effectElement,proto3" json:"effect_element,omitempty"`
	FromResultSeq  uint32             `protobuf:"varint,15,opt,name=from_result_seq,json=fromResultSeq,proto3" json:"from_result_seq,omitempty"`
	Damage         uint32             `protobuf:"varint,6,opt,name=damage,proto3" json:"damage,omitempty"`
	ResultSeq      uint32             `protobuf:"varint,4,opt,name=result_seq,json=resultSeq,proto3" json:"result_seq,omitempty"`
	SrcCardGuid    uint32             `protobuf:"varint,8,opt,name=src_card_guid,json=srcCardGuid,proto3" json:"src_card_guid,omitempty"`
}

func (x *GCGMsgSkillResult) Reset() {
	*x = GCGMsgSkillResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgSkillResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgSkillResult) ProtoMessage() {}

func (x *GCGMsgSkillResult) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgSkillResult.ProtoReflect.Descriptor instead.
func (*GCGMsgSkillResult) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{18}
}

func (x *GCGMsgSkillResult) GetSkillId() uint32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *GCGMsgSkillResult) GetLastHp() uint32 {
	if x != nil {
		return x.LastHp
	}
	return 0
}

func (x *GCGMsgSkillResult) GetDetailList() []*GCGDamageDetail {
	if x != nil {
		return x.DetailList
	}
	return nil
}

func (x *GCGMsgSkillResult) GetTargetCardGuid() uint32 {
	if x != nil {
		return x.TargetCardGuid
	}
	return 0
}

func (x *GCGMsgSkillResult) GetEffectElement() uint32 {
	if x != nil {
		return x.EffectElement
	}
	return 0
}

func (x *GCGMsgSkillResult) GetFromResultSeq() uint32 {
	if x != nil {
		return x.FromResultSeq
	}
	return 0
}

func (x *GCGMsgSkillResult) GetDamage() uint32 {
	if x != nil {
		return x.Damage
	}
	return 0
}

func (x *GCGMsgSkillResult) GetResultSeq() uint32 {
	if x != nil {
		return x.ResultSeq
	}
	return 0
}

func (x *GCGMsgSkillResult) GetSrcCardGuid() uint32 {
	if x != nil {
		return x.SrcCardGuid
	}
	return 0
}

type GCGLimitsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitType  uint32 `protobuf:"varint,7,opt,name=limit_type,json=limitType,proto3" json:"limit_type,omitempty"`
	LimitValue uint32 `protobuf:"varint,1,opt,name=limit_value,json=limitValue,proto3" json:"limit_value,omitempty"`
}

func (x *GCGLimitsInfo) Reset() {
	*x = GCGLimitsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGLimitsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGLimitsInfo) ProtoMessage() {}

func (x *GCGLimitsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGLimitsInfo.ProtoReflect.Descriptor instead.
func (*GCGLimitsInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{19}
}

func (x *GCGLimitsInfo) GetLimitType() uint32 {
	if x != nil {
		return x.LimitType
	}
	return 0
}

func (x *GCGLimitsInfo) GetLimitValue() uint32 {
	if x != nil {
		return x.LimitValue
	}
	return 0
}

type GCGSkillLimitsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId    uint32           `protobuf:"varint,5,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	LimitsList []*GCGLimitsInfo `protobuf:"bytes,15,rep,name=limits_list,json=limitsList,proto3" json:"limits_list,omitempty"`
}

func (x *GCGSkillLimitsInfo) Reset() {
	*x = GCGSkillLimitsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGSkillLimitsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGSkillLimitsInfo) ProtoMessage() {}

func (x *GCGSkillLimitsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGSkillLimitsInfo.ProtoReflect.Descriptor instead.
func (*GCGSkillLimitsInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{20}
}

func (x *GCGSkillLimitsInfo) GetSkillId() uint32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *GCGSkillLimitsInfo) GetLimitsList() []*GCGLimitsInfo {
	if x != nil {
		return x.LimitsList
	}
	return nil
}

type GCGCardSkillLimitsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillLimitsList []*GCGSkillLimitsInfo `protobuf:"bytes,12,rep,name=skill_limits_list,json=skillLimitsList,proto3" json:"skill_limits_list,omitempty"`
}

func (x *GCGCardSkillLimitsInfo) Reset() {
	*x = GCGCardSkillLimitsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGCardSkillLimitsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGCardSkillLimitsInfo) ProtoMessage() {}

func (x *GCGCardSkillLimitsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGCardSkillLimitsInfo.ProtoReflect.Descriptor instead.
func (*GCGCardSkillLimitsInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{21}
}

func (x *GCGCardSkillLimitsInfo) GetSkillLimitsList() []*GCGSkillLimitsInfo {
	if x != nil {
		return x.SkillLimitsList
	}
	return nil
}

type GCGMsgSkillLimitsChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardLimitsChangeMap map[uint32]*GCGCardSkillLimitsInfo `protobuf:"bytes,15,rep,name=card_limits_change_map,json=cardLimitsChangeMap,proto3" json:"card_limits_change_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GCGMsgSkillLimitsChange) Reset() {
	*x = GCGMsgSkillLimitsChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgSkillLimitsChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgSkillLimitsChange) ProtoMessage() {}

func (x *GCGMsgSkillLimitsChange) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgSkillLimitsChange.ProtoReflect.Descriptor instead.
func (*GCGMsgSkillLimitsChange) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{22}
}

func (x *GCGMsgSkillLimitsChange) GetCardLimitsChangeMap() map[uint32]*GCGCardSkillLimitsInfo {
	if x != nil {
		return x.CardLimitsChangeMap
	}
	return nil
}

type GCGMsgCostDice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId        uint32    `protobuf:"varint,6,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	SelectDiceIndexList []uint32  `protobuf:"varint,13,rep,packed,name=select_dice_index_list,json=selectDiceIndexList,proto3" json:"select_dice_index_list,omitempty"`
	Reason              GCGReason `protobuf:"varint,9,opt,name=reason,proto3,enum=proto.GCGReason" json:"reason,omitempty"`
}

func (x *GCGMsgCostDice) Reset() {
	*x = GCGMsgCostDice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgCostDice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgCostDice) ProtoMessage() {}

func (x *GCGMsgCostDice) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgCostDice.ProtoReflect.Descriptor instead.
func (*GCGMsgCostDice) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{23}
}

func (x *GCGMsgCostDice) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *GCGMsgCostDice) GetSelectDiceIndexList() []uint32 {
	if x != nil {
		return x.SelectDiceIndexList
	}
	return nil
}

func (x *GCGMsgCostDice) GetReason() GCGReason {
	if x != nil {
		return x.Reason
	}
	return GCGReason_GCG_REASON_DEFAULT
}

type GCGMsgAddDice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeforeDiceMap map[uint32]GCGDiceSideType `protobuf:"bytes,12,rep,name=before_dice_map,json=beforeDiceMap,proto3" json:"before_dice_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=proto.GCGDiceSideType"`
	ChangeCount   int32                      `protobuf:"varint,1,opt,name=change_count,json=changeCount,proto3" json:"change_count,omitempty"`
	DiceMap       map[uint32]GCGDiceSideType `protobuf:"bytes,8,rep,name=dice_map,json=diceMap,proto3" json:"dice_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=proto.GCGDiceSideType"`
	Reason        GCGReason                  `protobuf:"varint,4,opt,name=reason,proto3,enum=proto.GCGReason" json:"reason,omitempty"`
	ControllerId  uint32                     `protobuf:"varint,10,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
}

func (x *GCGMsgAddDice) Reset() {
	*x = GCGMsgAddDice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgAddDice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgAddDice) ProtoMessage() {}

func (x *GCGMsgAddDice) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgAddDice.ProtoReflect.Descriptor instead.
func (*GCGMsgAddDice) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{24}
}

func (x *GCGMsgAddDice) GetBeforeDiceMap() map[uint32]GCGDiceSideType {
	if x != nil {
		return x.BeforeDiceMap
	}
	return nil
}

func (x *GCGMsgAddDice) GetChangeCount() int32 {
	if x != nil {
		return x.ChangeCount
	}
	return 0
}

func (x *GCGMsgAddDice) GetDiceMap() map[uint32]GCGDiceSideType {
	if x != nil {
		return x.DiceMap
	}
	return nil
}

func (x *GCGMsgAddDice) GetReason() GCGReason {
	if x != nil {
		return x.Reason
	}
	return GCGReason_GCG_REASON_DEFAULT
}

func (x *GCGMsgAddDice) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

type GCGMsgNewCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card *GCGCard `protobuf:"bytes,15,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *GCGMsgNewCard) Reset() {
	*x = GCGMsgNewCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgNewCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgNewCard) ProtoMessage() {}

func (x *GCGMsgNewCard) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgNewCard.ProtoReflect.Descriptor instead.
func (*GCGMsgNewCard) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{25}
}

func (x *GCGMsgNewCard) GetCard() *GCGCard {
	if x != nil {
		return x.Card
	}
	return nil
}

type GCGMsgUpdateController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowControllerMap map[uint32]uint32 `protobuf:"bytes,7,rep,name=allow_controller_map,json=allowControllerMap,proto3" json:"allow_controller_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GCGMsgUpdateController) Reset() {
	*x = GCGMsgUpdateController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgUpdateController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgUpdateController) ProtoMessage() {}

func (x *GCGMsgUpdateController) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgUpdateController.ProtoReflect.Descriptor instead.
func (*GCGMsgUpdateController) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{26}
}

func (x *GCGMsgUpdateController) GetAllowControllerMap() map[uint32]uint32 {
	if x != nil {
		return x.AllowControllerMap
	}
	return nil
}

type GCGMsgModifyAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos           uint32    `protobuf:"varint,9,opt,name=pos,proto3" json:"pos,omitempty"`
	OwnerCardGuid uint32    `protobuf:"varint,10,opt,name=owner_card_guid,json=ownerCardGuid,proto3" json:"owner_card_guid,omitempty"`
	CardGuidList  []uint32  `protobuf:"varint,15,rep,packed,name=card_guid_list,json=cardGuidList,proto3" json:"card_guid_list,omitempty"`
	ControllerId  uint32    `protobuf:"varint,14,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	Reason        GCGReason `protobuf:"varint,11,opt,name=reason,proto3,enum=proto.GCGReason" json:"reason,omitempty"`
}

func (x *GCGMsgModifyAdd) Reset() {
	*x = GCGMsgModifyAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgModifyAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgModifyAdd) ProtoMessage() {}

func (x *GCGMsgModifyAdd) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgModifyAdd.ProtoReflect.Descriptor instead.
func (*GCGMsgModifyAdd) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{27}
}

func (x *GCGMsgModifyAdd) GetPos() uint32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *GCGMsgModifyAdd) GetOwnerCardGuid() uint32 {
	if x != nil {
		return x.OwnerCardGuid
	}
	return 0
}

func (x *GCGMsgModifyAdd) GetCardGuidList() []uint32 {
	if x != nil {
		return x.CardGuidList
	}
	return nil
}

func (x *GCGMsgModifyAdd) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *GCGMsgModifyAdd) GetReason() GCGReason {
	if x != nil {
		return x.Reason
	}
	return GCGReason_GCG_REASON_DEFAULT
}

type GCGMsgModifyRemove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId  uint32    `protobuf:"varint,14,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	Reason        GCGReason `protobuf:"varint,12,opt,name=reason,proto3,enum=proto.GCGReason" json:"reason,omitempty"`
	OwnerCardGuid uint32    `protobuf:"varint,5,opt,name=owner_card_guid,json=ownerCardGuid,proto3" json:"owner_card_guid,omitempty"`
	CardGuidList  []uint32  `protobuf:"varint,4,rep,packed,name=card_guid_list,json=cardGuidList,proto3" json:"card_guid_list,omitempty"`
}

func (x *GCGMsgModifyRemove) Reset() {
	*x = GCGMsgModifyRemove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgModifyRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgModifyRemove) ProtoMessage() {}

func (x *GCGMsgModifyRemove) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgModifyRemove.ProtoReflect.Descriptor instead.
func (*GCGMsgModifyRemove) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{28}
}

func (x *GCGMsgModifyRemove) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *GCGMsgModifyRemove) GetReason() GCGReason {
	if x != nil {
		return x.Reason
	}
	return GCGReason_GCG_REASON_DEFAULT
}

func (x *GCGMsgModifyRemove) GetOwnerCardGuid() uint32 {
	if x != nil {
		return x.OwnerCardGuid
	}
	return 0
}

func (x *GCGMsgModifyRemove) GetCardGuidList() []uint32 {
	if x != nil {
		return x.CardGuidList
	}
	return nil
}

type GCGMsgPVEIntention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillIdList []uint32 `protobuf:"varint,8,rep,packed,name=skill_id_list,json=skillIdList,proto3" json:"skill_id_list,omitempty"`
	CardGuid    uint32   `protobuf:"varint,13,opt,name=card_guid,json=cardGuid,proto3" json:"card_guid,omitempty"`
}

func (x *GCGMsgPVEIntention) Reset() {
	*x = GCGMsgPVEIntention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgPVEIntention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgPVEIntention) ProtoMessage() {}

func (x *GCGMsgPVEIntention) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgPVEIntention.ProtoReflect.Descriptor instead.
func (*GCGMsgPVEIntention) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{29}
}

func (x *GCGMsgPVEIntention) GetSkillIdList() []uint32 {
	if x != nil {
		return x.SkillIdList
	}
	return nil
}

func (x *GCGMsgPVEIntention) GetCardGuid() uint32 {
	if x != nil {
		return x.CardGuid
	}
	return 0
}

type GCGMsgPVEIntentionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntentionMap map[uint32]*GCGMsgPVEIntention `protobuf:"bytes,2,rep,name=intention_map,json=intentionMap,proto3" json:"intention_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GCGMsgPVEIntentionInfo) Reset() {
	*x = GCGMsgPVEIntentionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgPVEIntentionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgPVEIntentionInfo) ProtoMessage() {}

func (x *GCGMsgPVEIntentionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgPVEIntentionInfo.ProtoReflect.Descriptor instead.
func (*GCGMsgPVEIntentionInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{30}
}

func (x *GCGMsgPVEIntentionInfo) GetIntentionMap() map[uint32]*GCGMsgPVEIntention {
	if x != nil {
		return x.IntentionMap
	}
	return nil
}

type GCGMsgPVEIntentionChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeIntentionList []*GCGMsgPVEIntention  `protobuf:"bytes,4,rep,name=change_intention_list,json=changeIntentionList,proto3" json:"change_intention_list,omitempty"`
	ChangeType          GCGIntentionChangeType `protobuf:"varint,1,opt,name=change_type,json=changeType,proto3,enum=proto.GCGIntentionChangeType" json:"change_type,omitempty"`
}

func (x *GCGMsgPVEIntentionChange) Reset() {
	*x = GCGMsgPVEIntentionChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgPVEIntentionChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgPVEIntentionChange) ProtoMessage() {}

func (x *GCGMsgPVEIntentionChange) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgPVEIntentionChange.ProtoReflect.Descriptor instead.
func (*GCGMsgPVEIntentionChange) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{31}
}

func (x *GCGMsgPVEIntentionChange) GetChangeIntentionList() []*GCGMsgPVEIntention {
	if x != nil {
		return x.ChangeIntentionList
	}
	return nil
}

func (x *GCGMsgPVEIntentionChange) GetChangeType() GCGIntentionChangeType {
	if x != nil {
		return x.ChangeType
	}
	return GCGIntentionChangeType_GCG_INTENTION_CHANGE_NONE
}

type GCGMsgDuelDataChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round uint32 `protobuf:"varint,14,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *GCGMsgDuelDataChange) Reset() {
	*x = GCGMsgDuelDataChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgDuelDataChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgDuelDataChange) ProtoMessage() {}

func (x *GCGMsgDuelDataChange) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgDuelDataChange.ProtoReflect.Descriptor instead.
func (*GCGMsgDuelDataChange) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{32}
}

func (x *GCGMsgDuelDataChange) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

type GCGMsgClientPerform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParamList   []uint32             `protobuf:"varint,2,rep,packed,name=param_list,json=paramList,proto3" json:"param_list,omitempty"`
	PerformType GCGClientPerformType `protobuf:"varint,5,opt,name=perform_type,json=performType,proto3,enum=proto.GCGClientPerformType" json:"perform_type,omitempty"`
}

func (x *GCGMsgClientPerform) Reset() {
	*x = GCGMsgClientPerform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgClientPerform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgClientPerform) ProtoMessage() {}

func (x *GCGMsgClientPerform) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgClientPerform.ProtoReflect.Descriptor instead.
func (*GCGMsgClientPerform) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{33}
}

func (x *GCGMsgClientPerform) GetParamList() []uint32 {
	if x != nil {
		return x.ParamList
	}
	return nil
}

func (x *GCGMsgClientPerform) GetPerformType() GCGClientPerformType {
	if x != nil {
		return x.PerformType
	}
	return GCGClientPerformType_GCG_PERFORM_INVALID
}

type GCGMsgGameOver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndReason       GCGEndReason `protobuf:"varint,13,opt,name=end_reason,json=endReason,proto3,enum=proto.GCGEndReason" json:"end_reason,omitempty"`
	WinControllerId uint32       `protobuf:"varint,6,opt,name=win_controller_id,json=winControllerId,proto3" json:"win_controller_id,omitempty"`
}

func (x *GCGMsgGameOver) Reset() {
	*x = GCGMsgGameOver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgGameOver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgGameOver) ProtoMessage() {}

func (x *GCGMsgGameOver) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgGameOver.ProtoReflect.Descriptor instead.
func (*GCGMsgGameOver) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{34}
}

func (x *GCGMsgGameOver) GetEndReason() GCGEndReason {
	if x != nil {
		return x.EndReason
	}
	return GCGEndReason_GCG_END_REASON_DEFAULT
}

func (x *GCGMsgGameOver) GetWinControllerId() uint32 {
	if x != nil {
		return x.WinControllerId
	}
	return 0
}

type GCGMsgOpTimer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginTime    uint64       `protobuf:"fixed64,9,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	Phase        GCGPhaseType `protobuf:"varint,3,opt,name=phase,proto3,enum=proto.GCGPhaseType" json:"phase,omitempty"`
	TimeStamp    uint64       `protobuf:"fixed64,13,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
	ControllerId uint32       `protobuf:"varint,8,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
}

func (x *GCGMsgOpTimer) Reset() {
	*x = GCGMsgOpTimer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgOpTimer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgOpTimer) ProtoMessage() {}

func (x *GCGMsgOpTimer) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgOpTimer.ProtoReflect.Descriptor instead.
func (*GCGMsgOpTimer) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{35}
}

func (x *GCGMsgOpTimer) GetBeginTime() uint64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *GCGMsgOpTimer) GetPhase() GCGPhaseType {
	if x != nil {
		return x.Phase
	}
	return GCGPhaseType_GCG_PHASE_INVALID
}

func (x *GCGMsgOpTimer) GetTimeStamp() uint64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *GCGMsgOpTimer) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

type GCGMsgWaitingListChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurIndex     uint32 `protobuf:"varint,6,opt,name=cur_index,json=curIndex,proto3" json:"cur_index,omitempty"`
	ControllerId uint32 `protobuf:"varint,4,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
}

func (x *GCGMsgWaitingListChange) Reset() {
	*x = GCGMsgWaitingListChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgWaitingListChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgWaitingListChange) ProtoMessage() {}

func (x *GCGMsgWaitingListChange) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgWaitingListChange.ProtoReflect.Descriptor instead.
func (*GCGMsgWaitingListChange) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{36}
}

func (x *GCGMsgWaitingListChange) GetCurIndex() uint32 {
	if x != nil {
		return x.CurIndex
	}
	return 0
}

func (x *GCGMsgWaitingListChange) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

type GCGMsgCardUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card *GCGCard `protobuf:"bytes,7,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *GCGMsgCardUpdate) Reset() {
	*x = GCGMsgCardUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgCardUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgCardUpdate) ProtoMessage() {}

func (x *GCGMsgCardUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgCardUpdate.ProtoReflect.Descriptor instead.
func (*GCGMsgCardUpdate) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{37}
}

func (x *GCGMsgCardUpdate) GetCard() *GCGCard {
	if x != nil {
		return x.Card
	}
	return nil
}

type GCGMsgCostRevise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId uint32             `protobuf:"varint,5,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	CostRevise   *GCGCostReviseInfo `protobuf:"bytes,13,opt,name=cost_revise,json=costRevise,proto3" json:"cost_revise,omitempty"`
}

func (x *GCGMsgCostRevise) Reset() {
	*x = GCGMsgCostRevise{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgCostRevise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgCostRevise) ProtoMessage() {}

func (x *GCGMsgCostRevise) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgCostRevise.ProtoReflect.Descriptor instead.
func (*GCGMsgCostRevise) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{38}
}

func (x *GCGMsgCostRevise) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *GCGMsgCostRevise) GetCostRevise() *GCGCostReviseInfo {
	if x != nil {
		return x.CostRevise
	}
	return nil
}

type GCGMsgPhaseContinue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GCGMsgPhaseContinue) Reset() {
	*x = GCGMsgPhaseContinue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgPhaseContinue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgPhaseContinue) ProtoMessage() {}

func (x *GCGMsgPhaseContinue) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgPhaseContinue.ProtoReflect.Descriptor instead.
func (*GCGMsgPhaseContinue) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{39}
}

type GCGMsgNoDamageSkillResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultSeq      uint32             `protobuf:"varint,8,opt,name=result_seq,json=resultSeq,proto3" json:"result_seq,omitempty"`
	FromResultSeq  uint32             `protobuf:"varint,4,opt,name=from_result_seq,json=fromResultSeq,proto3" json:"from_result_seq,omitempty"`
	EffectElement  uint32             `protobuf:"varint,9,opt,name=effect_element,json=effectElement,proto3" json:"effect_element,omitempty"`
	TargetCardGuid uint32             `protobuf:"varint,5,opt,name=target_card_guid,json=targetCardGuid,proto3" json:"target_card_guid,omitempty"`
	DetailList     []*GCGDamageDetail `protobuf:"bytes,13,rep,name=detail_list,json=detailList,proto3" json:"detail_list,omitempty"`
	SkillId        uint32             `protobuf:"varint,10,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	SrcCardGuid    uint32             `protobuf:"varint,12,opt,name=src_card_guid,json=srcCardGuid,proto3" json:"src_card_guid,omitempty"`
}

func (x *GCGMsgNoDamageSkillResult) Reset() {
	*x = GCGMsgNoDamageSkillResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgNoDamageSkillResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgNoDamageSkillResult) ProtoMessage() {}

func (x *GCGMsgNoDamageSkillResult) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgNoDamageSkillResult.ProtoReflect.Descriptor instead.
func (*GCGMsgNoDamageSkillResult) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{40}
}

func (x *GCGMsgNoDamageSkillResult) GetResultSeq() uint32 {
	if x != nil {
		return x.ResultSeq
	}
	return 0
}

func (x *GCGMsgNoDamageSkillResult) GetFromResultSeq() uint32 {
	if x != nil {
		return x.FromResultSeq
	}
	return 0
}

func (x *GCGMsgNoDamageSkillResult) GetEffectElement() uint32 {
	if x != nil {
		return x.EffectElement
	}
	return 0
}

func (x *GCGMsgNoDamageSkillResult) GetTargetCardGuid() uint32 {
	if x != nil {
		return x.TargetCardGuid
	}
	return 0
}

func (x *GCGMsgNoDamageSkillResult) GetDetailList() []*GCGDamageDetail {
	if x != nil {
		return x.DetailList
	}
	return nil
}

func (x *GCGMsgNoDamageSkillResult) GetSkillId() uint32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *GCGMsgNoDamageSkillResult) GetSrcCardGuid() uint32 {
	if x != nil {
		return x.SrcCardGuid
	}
	return 0
}

type GCGMsgReactionBegin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardGuid uint32 `protobuf:"varint,13,opt,name=card_guid,json=cardGuid,proto3" json:"card_guid,omitempty"`
	SkillId  uint32 `protobuf:"varint,3,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
}

func (x *GCGMsgReactionBegin) Reset() {
	*x = GCGMsgReactionBegin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgReactionBegin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgReactionBegin) ProtoMessage() {}

func (x *GCGMsgReactionBegin) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgReactionBegin.ProtoReflect.Descriptor instead.
func (*GCGMsgReactionBegin) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{41}
}

func (x *GCGMsgReactionBegin) GetCardGuid() uint32 {
	if x != nil {
		return x.CardGuid
	}
	return 0
}

func (x *GCGMsgReactionBegin) GetSkillId() uint32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

type GCGMsgReactionEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId uint32 `protobuf:"varint,4,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
}

func (x *GCGMsgReactionEnd) Reset() {
	*x = GCGMsgReactionEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMsgReactionEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMsgReactionEnd) ProtoMessage() {}

func (x *GCGMsgReactionEnd) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMsgReactionEnd.ProtoReflect.Descriptor instead.
func (*GCGMsgReactionEnd) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{42}
}

func (x *GCGMsgReactionEnd) GetSkillId() uint32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

type GCGMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*GCGMessage_TokenChange
	//	*GCGMessage_PhaseChange
	//	*GCGMessage_AddCards
	//	*GCGMessage_RemoveCards
	//	*GCGMessage_SelectOnStage
	//	*GCGMessage_DiceRoll
	//	*GCGMessage_DiceReroll
	//	*GCGMessage_Pass
	//	*GCGMessage_CharDie
	//	*GCGMessage_SkillResult
	//	*GCGMessage_CostDice
	//	*GCGMessage_AddDice
	//	*GCGMessage_MoveCard
	//	*GCGMessage_UseSkill
	//	*GCGMessage_NewCard
	//	*GCGMessage_UpdateController
	//	*GCGMessage_ModifyAdd
	//	*GCGMessage_ModifyRemove
	//	*GCGMessage_UseSkillEnd
	//	*GCGMessage_DuelDataChange
	//	*GCGMessage_ClientPerform
	//	*GCGMessage_GameOver
	//	*GCGMessage_OpTimer
	//	*GCGMessage_WaitingListChange
	//	*GCGMessage_CardUpdate
	//	*GCGMessage_SelectOnStageByEffect
	//	*GCGMessage_CostRevise
	//	*GCGMessage_PhaseContinue
	//	*GCGMessage_PveIntentionInfo
	//	*GCGMessage_PveIntentionChange
	//	*GCGMessage_SkillLimitsChange
	//	*GCGMessage_NoDamageSkillResult
	//	*GCGMessage_ReactionBegin
	//	*GCGMessage_ReactionEnd
	Message isGCGMessage_Message `protobuf_oneof:"message"`
}

func (x *GCGMessage) Reset() {
	*x = GCGMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMessage) ProtoMessage() {}

func (x *GCGMessage) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMessage.ProtoReflect.Descriptor instead.
func (*GCGMessage) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{43}
}

func (m *GCGMessage) GetMessage() isGCGMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *GCGMessage) GetTokenChange() *GCGMsgTokenChange {
	if x, ok := x.GetMessage().(*GCGMessage_TokenChange); ok {
		return x.TokenChange
	}
	return nil
}

func (x *GCGMessage) GetPhaseChange() *GCGMsgPhaseChange {
	if x, ok := x.GetMessage().(*GCGMessage_PhaseChange); ok {
		return x.PhaseChange
	}
	return nil
}

func (x *GCGMessage) GetAddCards() *GCGMsgAddCards {
	if x, ok := x.GetMessage().(*GCGMessage_AddCards); ok {
		return x.AddCards
	}
	return nil
}

func (x *GCGMessage) GetRemoveCards() *GCGMsgRemoveCards {
	if x, ok := x.GetMessage().(*GCGMessage_RemoveCards); ok {
		return x.RemoveCards
	}
	return nil
}

func (x *GCGMessage) GetSelectOnStage() *GCGMsgSelectOnStage {
	if x, ok := x.GetMessage().(*GCGMessage_SelectOnStage); ok {
		return x.SelectOnStage
	}
	return nil
}

func (x *GCGMessage) GetDiceRoll() *GCGMsgDiceRoll {
	if x, ok := x.GetMessage().(*GCGMessage_DiceRoll); ok {
		return x.DiceRoll
	}
	return nil
}

func (x *GCGMessage) GetDiceReroll() *GCGMsgDiceReroll {
	if x, ok := x.GetMessage().(*GCGMessage_DiceReroll); ok {
		return x.DiceReroll
	}
	return nil
}

func (x *GCGMessage) GetPass() *GCGMsgPass {
	if x, ok := x.GetMessage().(*GCGMessage_Pass); ok {
		return x.Pass
	}
	return nil
}

func (x *GCGMessage) GetCharDie() *GCGMsgCharDie {
	if x, ok := x.GetMessage().(*GCGMessage_CharDie); ok {
		return x.CharDie
	}
	return nil
}

func (x *GCGMessage) GetSkillResult() *GCGMsgSkillResult {
	if x, ok := x.GetMessage().(*GCGMessage_SkillResult); ok {
		return x.SkillResult
	}
	return nil
}

func (x *GCGMessage) GetCostDice() *GCGMsgCostDice {
	if x, ok := x.GetMessage().(*GCGMessage_CostDice); ok {
		return x.CostDice
	}
	return nil
}

func (x *GCGMessage) GetAddDice() *GCGMsgAddDice {
	if x, ok := x.GetMessage().(*GCGMessage_AddDice); ok {
		return x.AddDice
	}
	return nil
}

func (x *GCGMessage) GetMoveCard() *GCGMsgMoveCard {
	if x, ok := x.GetMessage().(*GCGMessage_MoveCard); ok {
		return x.MoveCard
	}
	return nil
}

func (x *GCGMessage) GetUseSkill() *GCGMsgUseSkill {
	if x, ok := x.GetMessage().(*GCGMessage_UseSkill); ok {
		return x.UseSkill
	}
	return nil
}

func (x *GCGMessage) GetNewCard() *GCGMsgNewCard {
	if x, ok := x.GetMessage().(*GCGMessage_NewCard); ok {
		return x.NewCard
	}
	return nil
}

func (x *GCGMessage) GetUpdateController() *GCGMsgUpdateController {
	if x, ok := x.GetMessage().(*GCGMessage_UpdateController); ok {
		return x.UpdateController
	}
	return nil
}

func (x *GCGMessage) GetModifyAdd() *GCGMsgModifyAdd {
	if x, ok := x.GetMessage().(*GCGMessage_ModifyAdd); ok {
		return x.ModifyAdd
	}
	return nil
}

func (x *GCGMessage) GetModifyRemove() *GCGMsgModifyRemove {
	if x, ok := x.GetMessage().(*GCGMessage_ModifyRemove); ok {
		return x.ModifyRemove
	}
	return nil
}

func (x *GCGMessage) GetUseSkillEnd() *GCGMsgUseSkillEnd {
	if x, ok := x.GetMessage().(*GCGMessage_UseSkillEnd); ok {
		return x.UseSkillEnd
	}
	return nil
}

func (x *GCGMessage) GetDuelDataChange() *GCGMsgDuelDataChange {
	if x, ok := x.GetMessage().(*GCGMessage_DuelDataChange); ok {
		return x.DuelDataChange
	}
	return nil
}

func (x *GCGMessage) GetClientPerform() *GCGMsgClientPerform {
	if x, ok := x.GetMessage().(*GCGMessage_ClientPerform); ok {
		return x.ClientPerform
	}
	return nil
}

func (x *GCGMessage) GetGameOver() *GCGMsgGameOver {
	if x, ok := x.GetMessage().(*GCGMessage_GameOver); ok {
		return x.GameOver
	}
	return nil
}

func (x *GCGMessage) GetOpTimer() *GCGMsgOpTimer {
	if x, ok := x.GetMessage().(*GCGMessage_OpTimer); ok {
		return x.OpTimer
	}
	return nil
}

func (x *GCGMessage) GetWaitingListChange() *GCGMsgWaitingListChange {
	if x, ok := x.GetMessage().(*GCGMessage_WaitingListChange); ok {
		return x.WaitingListChange
	}
	return nil
}

func (x *GCGMessage) GetCardUpdate() *GCGMsgCardUpdate {
	if x, ok := x.GetMessage().(*GCGMessage_CardUpdate); ok {
		return x.CardUpdate
	}
	return nil
}

func (x *GCGMessage) GetSelectOnStageByEffect() *GCGMsgSelectOnStageByEffect {
	if x, ok := x.GetMessage().(*GCGMessage_SelectOnStageByEffect); ok {
		return x.SelectOnStageByEffect
	}
	return nil
}

func (x *GCGMessage) GetCostRevise() *GCGMsgCostRevise {
	if x, ok := x.GetMessage().(*GCGMessage_CostRevise); ok {
		return x.CostRevise
	}
	return nil
}

func (x *GCGMessage) GetPhaseContinue() *GCGMsgPhaseContinue {
	if x, ok := x.GetMessage().(*GCGMessage_PhaseContinue); ok {
		return x.PhaseContinue
	}
	return nil
}

func (x *GCGMessage) GetPveIntentionInfo() *GCGMsgPVEIntentionInfo {
	if x, ok := x.GetMessage().(*GCGMessage_PveIntentionInfo); ok {
		return x.PveIntentionInfo
	}
	return nil
}

func (x *GCGMessage) GetPveIntentionChange() *GCGMsgPVEIntentionChange {
	if x, ok := x.GetMessage().(*GCGMessage_PveIntentionChange); ok {
		return x.PveIntentionChange
	}
	return nil
}

func (x *GCGMessage) GetSkillLimitsChange() *GCGMsgSkillLimitsChange {
	if x, ok := x.GetMessage().(*GCGMessage_SkillLimitsChange); ok {
		return x.SkillLimitsChange
	}
	return nil
}

func (x *GCGMessage) GetNoDamageSkillResult() *GCGMsgNoDamageSkillResult {
	if x, ok := x.GetMessage().(*GCGMessage_NoDamageSkillResult); ok {
		return x.NoDamageSkillResult
	}
	return nil
}

func (x *GCGMessage) GetReactionBegin() *GCGMsgReactionBegin {
	if x, ok := x.GetMessage().(*GCGMessage_ReactionBegin); ok {
		return x.ReactionBegin
	}
	return nil
}

func (x *GCGMessage) GetReactionEnd() *GCGMsgReactionEnd {
	if x, ok := x.GetMessage().(*GCGMessage_ReactionEnd); ok {
		return x.ReactionEnd
	}
	return nil
}

type isGCGMessage_Message interface {
	isGCGMessage_Message()
}

type GCGMessage_TokenChange struct {
	TokenChange *GCGMsgTokenChange `protobuf:"bytes,12,opt,name=token_change,json=tokenChange,proto3,oneof"`
}

type GCGMessage_PhaseChange struct {
	PhaseChange *GCGMsgPhaseChange `protobuf:"bytes,13,opt,name=phase_change,json=phaseChange,proto3,oneof"`
}

type GCGMessage_AddCards struct {
	AddCards *GCGMsgAddCards `protobuf:"bytes,10,opt,name=add_cards,json=addCards,proto3,oneof"`
}

type GCGMessage_RemoveCards struct {
	RemoveCards *GCGMsgRemoveCards `protobuf:"bytes,14,opt,name=remove_cards,json=removeCards,proto3,oneof"`
}

type GCGMessage_SelectOnStage struct {
	SelectOnStage *GCGMsgSelectOnStage `protobuf:"bytes,6,opt,name=select_on_stage,json=selectOnStage,proto3,oneof"`
}

type GCGMessage_DiceRoll struct {
	DiceRoll *GCGMsgDiceRoll `protobuf:"bytes,9,opt,name=dice_roll,json=diceRoll,proto3,oneof"`
}

type GCGMessage_DiceReroll struct {
	DiceReroll *GCGMsgDiceReroll `protobuf:"bytes,11,opt,name=dice_reroll,json=diceReroll,proto3,oneof"`
}

type GCGMessage_Pass struct {
	Pass *GCGMsgPass `protobuf:"bytes,5,opt,name=pass,proto3,oneof"`
}

type GCGMessage_CharDie struct {
	CharDie *GCGMsgCharDie `protobuf:"bytes,2,opt,name=char_die,json=charDie,proto3,oneof"`
}

type GCGMessage_SkillResult struct {
	SkillResult *GCGMsgSkillResult `protobuf:"bytes,1,opt,name=skill_result,json=skillResult,proto3,oneof"`
}

type GCGMessage_CostDice struct {
	CostDice *GCGMsgCostDice `protobuf:"bytes,7,opt,name=cost_dice,json=costDice,proto3,oneof"`
}

type GCGMessage_AddDice struct {
	AddDice *GCGMsgAddDice `protobuf:"bytes,3,opt,name=add_dice,json=addDice,proto3,oneof"`
}

type GCGMessage_MoveCard struct {
	MoveCard *GCGMsgMoveCard `protobuf:"bytes,15,opt,name=move_card,json=moveCard,proto3,oneof"`
}

type GCGMessage_UseSkill struct {
	UseSkill *GCGMsgUseSkill `protobuf:"bytes,4,opt,name=use_skill,json=useSkill,proto3,oneof"`
}

type GCGMessage_NewCard struct {
	NewCard *GCGMsgNewCard `protobuf:"bytes,1848,opt,name=new_card,json=newCard,proto3,oneof"`
}

type GCGMessage_UpdateController struct {
	UpdateController *GCGMsgUpdateController `protobuf:"bytes,429,opt,name=update_controller,json=updateController,proto3,oneof"`
}

type GCGMessage_ModifyAdd struct {
	ModifyAdd *GCGMsgModifyAdd `protobuf:"bytes,1851,opt,name=modify_add,json=modifyAdd,proto3,oneof"`
}

type GCGMessage_ModifyRemove struct {
	ModifyRemove *GCGMsgModifyRemove `protobuf:"bytes,471,opt,name=modify_remove,json=modifyRemove,proto3,oneof"`
}

type GCGMessage_UseSkillEnd struct {
	UseSkillEnd *GCGMsgUseSkillEnd `protobuf:"bytes,1411,opt,name=use_skill_end,json=useSkillEnd,proto3,oneof"`
}

type GCGMessage_DuelDataChange struct {
	DuelDataChange *GCGMsgDuelDataChange `protobuf:"bytes,1008,opt,name=duel_data_change,json=duelDataChange,proto3,oneof"`
}

type GCGMessage_ClientPerform struct {
	ClientPerform *GCGMsgClientPerform `protobuf:"bytes,1035,opt,name=client_perform,json=clientPerform,proto3,oneof"`
}

type GCGMessage_GameOver struct {
	GameOver *GCGMsgGameOver `protobuf:"bytes,714,opt,name=game_over,json=gameOver,proto3,oneof"`
}

type GCGMessage_OpTimer struct {
	OpTimer *GCGMsgOpTimer `protobuf:"bytes,1862,opt,name=op_timer,json=opTimer,proto3,oneof"`
}

type GCGMessage_WaitingListChange struct {
	WaitingListChange *GCGMsgWaitingListChange `protobuf:"bytes,1678,opt,name=waiting_list_change,json=waitingListChange,proto3,oneof"`
}

type GCGMessage_CardUpdate struct {
	CardUpdate *GCGMsgCardUpdate `protobuf:"bytes,1879,opt,name=card_update,json=cardUpdate,proto3,oneof"`
}

type GCGMessage_SelectOnStageByEffect struct {
	SelectOnStageByEffect *GCGMsgSelectOnStageByEffect `protobuf:"bytes,2042,opt,name=select_on_stage_by_effect,json=selectOnStageByEffect,proto3,oneof"`
}

type GCGMessage_CostRevise struct {
	CostRevise *GCGMsgCostRevise `protobuf:"bytes,1350,opt,name=cost_revise,json=costRevise,proto3,oneof"`
}

type GCGMessage_PhaseContinue struct {
	PhaseContinue *GCGMsgPhaseContinue `protobuf:"bytes,1474,opt,name=phase_continue,json=phaseContinue,proto3,oneof"`
}

type GCGMessage_PveIntentionInfo struct {
	PveIntentionInfo *GCGMsgPVEIntentionInfo `protobuf:"bytes,1252,opt,name=pve_intention_info,json=pveIntentionInfo,proto3,oneof"`
}

type GCGMessage_PveIntentionChange struct {
	PveIntentionChange *GCGMsgPVEIntentionChange `protobuf:"bytes,893,opt,name=pve_intention_change,json=pveIntentionChange,proto3,oneof"`
}

type GCGMessage_SkillLimitsChange struct {
	SkillLimitsChange *GCGMsgSkillLimitsChange `protobuf:"bytes,259,opt,name=skill_limits_change,json=skillLimitsChange,proto3,oneof"`
}

type GCGMessage_NoDamageSkillResult struct {
	NoDamageSkillResult *GCGMsgNoDamageSkillResult `protobuf:"bytes,24,opt,name=no_damage_skill_result,json=noDamageSkillResult,proto3,oneof"`
}

type GCGMessage_ReactionBegin struct {
	ReactionBegin *GCGMsgReactionBegin `protobuf:"bytes,859,opt,name=reaction_begin,json=reactionBegin,proto3,oneof"`
}

type GCGMessage_ReactionEnd struct {
	ReactionEnd *GCGMsgReactionEnd `protobuf:"bytes,1395,opt,name=reaction_end,json=reactionEnd,proto3,oneof"`
}

func (*GCGMessage_TokenChange) isGCGMessage_Message() {}

func (*GCGMessage_PhaseChange) isGCGMessage_Message() {}

func (*GCGMessage_AddCards) isGCGMessage_Message() {}

func (*GCGMessage_RemoveCards) isGCGMessage_Message() {}

func (*GCGMessage_SelectOnStage) isGCGMessage_Message() {}

func (*GCGMessage_DiceRoll) isGCGMessage_Message() {}

func (*GCGMessage_DiceReroll) isGCGMessage_Message() {}

func (*GCGMessage_Pass) isGCGMessage_Message() {}

func (*GCGMessage_CharDie) isGCGMessage_Message() {}

func (*GCGMessage_SkillResult) isGCGMessage_Message() {}

func (*GCGMessage_CostDice) isGCGMessage_Message() {}

func (*GCGMessage_AddDice) isGCGMessage_Message() {}

func (*GCGMessage_MoveCard) isGCGMessage_Message() {}

func (*GCGMessage_UseSkill) isGCGMessage_Message() {}

func (*GCGMessage_NewCard) isGCGMessage_Message() {}

func (*GCGMessage_UpdateController) isGCGMessage_Message() {}

func (*GCGMessage_ModifyAdd) isGCGMessage_Message() {}

func (*GCGMessage_ModifyRemove) isGCGMessage_Message() {}

func (*GCGMessage_UseSkillEnd) isGCGMessage_Message() {}

func (*GCGMessage_DuelDataChange) isGCGMessage_Message() {}

func (*GCGMessage_ClientPerform) isGCGMessage_Message() {}

func (*GCGMessage_GameOver) isGCGMessage_Message() {}

func (*GCGMessage_OpTimer) isGCGMessage_Message() {}

func (*GCGMessage_WaitingListChange) isGCGMessage_Message() {}

func (*GCGMessage_CardUpdate) isGCGMessage_Message() {}

func (*GCGMessage_SelectOnStageByEffect) isGCGMessage_Message() {}

func (*GCGMessage_CostRevise) isGCGMessage_Message() {}

func (*GCGMessage_PhaseContinue) isGCGMessage_Message() {}

func (*GCGMessage_PveIntentionInfo) isGCGMessage_Message() {}

func (*GCGMessage_PveIntentionChange) isGCGMessage_Message() {}

func (*GCGMessage_SkillLimitsChange) isGCGMessage_Message() {}

func (*GCGMessage_NoDamageSkillResult) isGCGMessage_Message() {}

func (*GCGMessage_ReactionBegin) isGCGMessage_Message() {}

func (*GCGMessage_ReactionEnd) isGCGMessage_Message() {}

type GCGMessagePack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType   GCGActionType `protobuf:"varint,3,opt,name=action_type,json=actionType,proto3,enum=proto.GCGActionType" json:"action_type,omitempty"`
	ControllerId uint32        `protobuf:"varint,6,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	MsgList      []*GCGMessage `protobuf:"bytes,13,rep,name=msg_list,json=msgList,proto3" json:"msg_list,omitempty"`
}

func (x *GCGMessagePack) Reset() {
	*x = GCGMessagePack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMessagePack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMessagePack) ProtoMessage() {}

func (x *GCGMessagePack) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMessagePack.ProtoReflect.Descriptor instead.
func (*GCGMessagePack) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{44}
}

func (x *GCGMessagePack) GetActionType() GCGActionType {
	if x != nil {
		return x.ActionType
	}
	return GCGActionType_GCG_ACTION_NONE
}

func (x *GCGMessagePack) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *GCGMessagePack) GetMsgList() []*GCGMessage {
	if x != nil {
		return x.MsgList
	}
	return nil
}

type GCGOperationRedraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardList []uint32 `protobuf:"varint,2,rep,packed,name=card_list,json=cardList,proto3" json:"card_list,omitempty"`
}

func (x *GCGOperationRedraw) Reset() {
	*x = GCGOperationRedraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGOperationRedraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGOperationRedraw) ProtoMessage() {}

func (x *GCGOperationRedraw) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGOperationRedraw.ProtoReflect.Descriptor instead.
func (*GCGOperationRedraw) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{45}
}

func (x *GCGOperationRedraw) GetCardList() []uint32 {
	if x != nil {
		return x.CardList
	}
	return nil
}

type GCGOperationOnStageSelect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardGuid          uint32   `protobuf:"varint,5,opt,name=card_guid,json=cardGuid,proto3" json:"card_guid,omitempty"`
	CostDiceIndexList []uint32 `protobuf:"varint,4,rep,packed,name=cost_dice_index_list,json=costDiceIndexList,proto3" json:"cost_dice_index_list,omitempty"`
}

func (x *GCGOperationOnStageSelect) Reset() {
	*x = GCGOperationOnStageSelect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGOperationOnStageSelect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGOperationOnStageSelect) ProtoMessage() {}

func (x *GCGOperationOnStageSelect) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGOperationOnStageSelect.ProtoReflect.Descriptor instead.
func (*GCGOperationOnStageSelect) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{46}
}

func (x *GCGOperationOnStageSelect) GetCardGuid() uint32 {
	if x != nil {
		return x.CardGuid
	}
	return 0
}

func (x *GCGOperationOnStageSelect) GetCostDiceIndexList() []uint32 {
	if x != nil {
		return x.CostDiceIndexList
	}
	return nil
}

type GCGOperationReroll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiceIndexList []uint32 `protobuf:"varint,12,rep,packed,name=dice_index_list,json=diceIndexList,proto3" json:"dice_index_list,omitempty"`
}

func (x *GCGOperationReroll) Reset() {
	*x = GCGOperationReroll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGOperationReroll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGOperationReroll) ProtoMessage() {}

func (x *GCGOperationReroll) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGOperationReroll.ProtoReflect.Descriptor instead.
func (*GCGOperationReroll) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{47}
}

func (x *GCGOperationReroll) GetDiceIndexList() []uint32 {
	if x != nil {
		return x.DiceIndexList
	}
	return nil
}

type GCGOperationAttack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostDiceIndexList []uint32 `protobuf:"varint,8,rep,packed,name=cost_dice_index_list,json=costDiceIndexList,proto3" json:"cost_dice_index_list,omitempty"`
	SkillId           uint32   `protobuf:"varint,2,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
}

func (x *GCGOperationAttack) Reset() {
	*x = GCGOperationAttack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGOperationAttack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGOperationAttack) ProtoMessage() {}

func (x *GCGOperationAttack) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGOperationAttack.ProtoReflect.Descriptor instead.
func (*GCGOperationAttack) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{48}
}

func (x *GCGOperationAttack) GetCostDiceIndexList() []uint32 {
	if x != nil {
		return x.CostDiceIndexList
	}
	return nil
}

func (x *GCGOperationAttack) GetSkillId() uint32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

type GCGOperationPass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GCGOperationPass) Reset() {
	*x = GCGOperationPass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGOperationPass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGOperationPass) ProtoMessage() {}

func (x *GCGOperationPass) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGOperationPass.ProtoReflect.Descriptor instead.
func (*GCGOperationPass) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{49}
}

type GCGOperationPlayCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardGuid           uint32   `protobuf:"varint,12,opt,name=card_guid,json=cardGuid,proto3" json:"card_guid,omitempty"`
	CostDiceIndexList  []uint32 `protobuf:"varint,4,rep,packed,name=cost_dice_index_list,json=costDiceIndexList,proto3" json:"cost_dice_index_list,omitempty"`
	TargetCardGuidList []uint32 `protobuf:"varint,10,rep,packed,name=target_card_guid_list,json=targetCardGuidList,proto3" json:"target_card_guid_list,omitempty"`
	ReplaceCardGuid    uint32   `protobuf:"varint,8,opt,name=replace_card_guid,json=replaceCardGuid,proto3" json:"replace_card_guid,omitempty"`
}

func (x *GCGOperationPlayCard) Reset() {
	*x = GCGOperationPlayCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGOperationPlayCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGOperationPlayCard) ProtoMessage() {}

func (x *GCGOperationPlayCard) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGOperationPlayCard.ProtoReflect.Descriptor instead.
func (*GCGOperationPlayCard) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{50}
}

func (x *GCGOperationPlayCard) GetCardGuid() uint32 {
	if x != nil {
		return x.CardGuid
	}
	return 0
}

func (x *GCGOperationPlayCard) GetCostDiceIndexList() []uint32 {
	if x != nil {
		return x.CostDiceIndexList
	}
	return nil
}

func (x *GCGOperationPlayCard) GetTargetCardGuidList() []uint32 {
	if x != nil {
		return x.TargetCardGuidList
	}
	return nil
}

func (x *GCGOperationPlayCard) GetReplaceCardGuid() uint32 {
	if x != nil {
		return x.ReplaceCardGuid
	}
	return 0
}

type GCGOperationReboot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostCardGuidList []uint32 `protobuf:"varint,7,rep,packed,name=cost_card_guid_list,json=costCardGuidList,proto3" json:"cost_card_guid_list,omitempty"`
	DiceIndexList    []uint32 `protobuf:"varint,6,rep,packed,name=dice_index_list,json=diceIndexList,proto3" json:"dice_index_list,omitempty"`
}

func (x *GCGOperationReboot) Reset() {
	*x = GCGOperationReboot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGOperationReboot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGOperationReboot) ProtoMessage() {}

func (x *GCGOperationReboot) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGOperationReboot.ProtoReflect.Descriptor instead.
func (*GCGOperationReboot) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{51}
}

func (x *GCGOperationReboot) GetCostCardGuidList() []uint32 {
	if x != nil {
		return x.CostCardGuidList
	}
	return nil
}

func (x *GCGOperationReboot) GetDiceIndexList() []uint32 {
	if x != nil {
		return x.DiceIndexList
	}
	return nil
}

type GCGOperationSurrender struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GCGOperationSurrender) Reset() {
	*x = GCGOperationSurrender{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGOperationSurrender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGOperationSurrender) ProtoMessage() {}

func (x *GCGOperationSurrender) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGOperationSurrender.ProtoReflect.Descriptor instead.
func (*GCGOperationSurrender) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{52}
}

type GCGOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Op:
	//
	//	*GCGOperation_OpRedraw
	//	*GCGOperation_OpSelectOnStage
	//	*GCGOperation_OpReroll
	//	*GCGOperation_OpAttack
	//	*GCGOperation_OpPass
	//	*GCGOperation_OpPlayCard
	//	*GCGOperation_OpReboot
	//	*GCGOperation_OpSurrender
	Op isGCGOperation_Op `protobuf_oneof:"op"`
}

func (x *GCGOperation) Reset() {
	*x = GCGOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGOperation) ProtoMessage() {}

func (x *GCGOperation) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGOperation.ProtoReflect.Descriptor instead.
func (*GCGOperation) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{53}
}

func (m *GCGOperation) GetOp() isGCGOperation_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (x *GCGOperation) GetOpRedraw() *GCGOperationRedraw {
	if x, ok := x.GetOp().(*GCGOperation_OpRedraw); ok {
		return x.OpRedraw
	}
	return nil
}

func (x *GCGOperation) GetOpSelectOnStage() *GCGOperationOnStageSelect {
	if x, ok := x.GetOp().(*GCGOperation_OpSelectOnStage); ok {
		return x.OpSelectOnStage
	}
	return nil
}

func (x *GCGOperation) GetOpReroll() *GCGOperationReroll {
	if x, ok := x.GetOp().(*GCGOperation_OpReroll); ok {
		return x.OpReroll
	}
	return nil
}

func (x *GCGOperation) GetOpAttack() *GCGOperationAttack {
	if x, ok := x.GetOp().(*GCGOperation_OpAttack); ok {
		return x.OpAttack
	}
	return nil
}

func (x *GCGOperation) GetOpPass() *GCGOperationPass {
	if x, ok := x.GetOp().(*GCGOperation_OpPass); ok {
		return x.OpPass
	}
	return nil
}

func (x *GCGOperation) GetOpPlayCard() *GCGOperationPlayCard {
	if x, ok := x.GetOp().(*GCGOperation_OpPlayCard); ok {
		return x.OpPlayCard
	}
	return nil
}

func (x *GCGOperation) GetOpReboot() *GCGOperationReboot {
	if x, ok := x.GetOp().(*GCGOperation_OpReboot); ok {
		return x.OpReboot
	}
	return nil
}

func (x *GCGOperation) GetOpSurrender() *GCGOperationSurrender {
	if x, ok := x.GetOp().(*GCGOperation_OpSurrender); ok {
		return x.OpSurrender
	}
	return nil
}

type isGCGOperation_Op interface {
	isGCGOperation_Op()
}

type GCGOperation_OpRedraw struct {
	OpRedraw *GCGOperationRedraw `protobuf:"bytes,10,opt,name=op_redraw,json=opRedraw,proto3,oneof"`
}

type GCGOperation_OpSelectOnStage struct {
	OpSelectOnStage *GCGOperationOnStageSelect `protobuf:"bytes,4,opt,name=op_select_on_stage,json=opSelectOnStage,proto3,oneof"`
}

type GCGOperation_OpReroll struct {
	OpReroll *GCGOperationReroll `protobuf:"bytes,9,opt,name=op_reroll,json=opReroll,proto3,oneof"`
}

type GCGOperation_OpAttack struct {
	OpAttack *GCGOperationAttack `protobuf:"bytes,11,opt,name=op_attack,json=opAttack,proto3,oneof"`
}

type GCGOperation_OpPass struct {
	OpPass *GCGOperationPass `protobuf:"bytes,15,opt,name=op_pass,json=opPass,proto3,oneof"`
}

type GCGOperation_OpPlayCard struct {
	OpPlayCard *GCGOperationPlayCard `protobuf:"bytes,2,opt,name=op_play_card,json=opPlayCard,proto3,oneof"`
}

type GCGOperation_OpReboot struct {
	OpReboot *GCGOperationReboot `protobuf:"bytes,5,opt,name=op_reboot,json=opReboot,proto3,oneof"`
}

type GCGOperation_OpSurrender struct {
	OpSurrender *GCGOperationSurrender `protobuf:"bytes,1,opt,name=op_surrender,json=opSurrender,proto3,oneof"`
}

func (*GCGOperation_OpRedraw) isGCGOperation_Op() {}

func (*GCGOperation_OpSelectOnStage) isGCGOperation_Op() {}

func (*GCGOperation_OpReroll) isGCGOperation_Op() {}

func (*GCGOperation_OpAttack) isGCGOperation_Op() {}

func (*GCGOperation_OpPass) isGCGOperation_Op() {}

func (*GCGOperation_OpPlayCard) isGCGOperation_Op() {}

func (*GCGOperation_OpReboot) isGCGOperation_Op() {}

func (*GCGOperation_OpSurrender) isGCGOperation_Op() {}

type GCGReplayOperationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId uint32        `protobuf:"varint,8,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	Op           *GCGOperation `protobuf:"bytes,5,opt,name=op,proto3" json:"op,omitempty"`
}

func (x *GCGReplayOperationData) Reset() {
	*x = GCGReplayOperationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGReplayOperationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGReplayOperationData) ProtoMessage() {}

func (x *GCGReplayOperationData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGReplayOperationData.ProtoReflect.Descriptor instead.
func (*GCGReplayOperationData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{54}
}

func (x *GCGReplayOperationData) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *GCGReplayOperationData) GetOp() *GCGOperation {
	if x != nil {
		return x.Op
	}
	return nil
}

type GCGReplayControllerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId uint32   `protobuf:"varint,13,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	CardIdList   []uint32 `protobuf:"varint,5,rep,packed,name=card_id_list,json=cardIdList,proto3" json:"card_id_list,omitempty"`
}

func (x *GCGReplayControllerData) Reset() {
	*x = GCGReplayControllerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGReplayControllerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGReplayControllerData) ProtoMessage() {}

func (x *GCGReplayControllerData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGReplayControllerData.ProtoReflect.Descriptor instead.
func (*GCGReplayControllerData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{55}
}

func (x *GCGReplayControllerData) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *GCGReplayControllerData) GetCardIdList() []uint32 {
	if x != nil {
		return x.CardIdList
	}
	return nil
}

type GCGOperationReplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seed               uint32                     `protobuf:"varint,11,opt,name=seed,proto3" json:"seed,omitempty"`
	OperationDataList  []*GCGReplayOperationData  `protobuf:"bytes,9,rep,name=operation_data_list,json=operationDataList,proto3" json:"operation_data_list,omitempty"`
	ControllerDataList []*GCGReplayControllerData `protobuf:"bytes,13,rep,name=controller_data_list,json=controllerDataList,proto3" json:"controller_data_list,omitempty"`
	GameId             uint32                     `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (x *GCGOperationReplay) Reset() {
	*x = GCGOperationReplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGOperationReplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGOperationReplay) ProtoMessage() {}

func (x *GCGOperationReplay) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGOperationReplay.ProtoReflect.Descriptor instead.
func (*GCGOperationReplay) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{56}
}

func (x *GCGOperationReplay) GetSeed() uint32 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *GCGOperationReplay) GetOperationDataList() []*GCGReplayOperationData {
	if x != nil {
		return x.OperationDataList
	}
	return nil
}

func (x *GCGOperationReplay) GetControllerDataList() []*GCGReplayControllerData {
	if x != nil {
		return x.ControllerDataList
	}
	return nil
}

func (x *GCGOperationReplay) GetGameId() uint32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

type GCGToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,11,opt,name=value,proto3" json:"value,omitempty"`
	Key   uint32 `protobuf:"varint,4,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GCGToken) Reset() {
	*x = GCGToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGToken) ProtoMessage() {}

func (x *GCGToken) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGToken.ProtoReflect.Descriptor instead.
func (*GCGToken) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{57}
}

func (x *GCGToken) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *GCGToken) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

type GCGCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsShow          bool                  `protobuf:"varint,14,opt,name=is_show,json=isShow,proto3" json:"is_show,omitempty"`
	FaceType        uint32                `protobuf:"varint,5,opt,name=face_type,json=faceType,proto3" json:"face_type,omitempty"`
	Id              uint32                `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	TokenList       []*GCGToken           `protobuf:"bytes,2,rep,name=token_list,json=tokenList,proto3" json:"token_list,omitempty"`
	SkillIdList     []uint32              `protobuf:"varint,11,rep,packed,name=skill_id_list,json=skillIdList,proto3" json:"skill_id_list,omitempty"`
	SkillLimitsList []*GCGSkillLimitsInfo `protobuf:"bytes,8,rep,name=skill_limits_list,json=skillLimitsList,proto3" json:"skill_limits_list,omitempty"`
	Guid            uint32                `protobuf:"varint,15,opt,name=guid,proto3" json:"guid,omitempty"`
	TagList         []uint32              `protobuf:"varint,3,rep,packed,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty"`
	ControllerId    uint32                `protobuf:"varint,7,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
}

func (x *GCGCard) Reset() {
	*x = GCGCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGCard) ProtoMessage() {}

func (x *GCGCard) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGCard.ProtoReflect.Descriptor instead.
func (*GCGCard) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{58}
}

func (x *GCGCard) GetIsShow() bool {
	if x != nil {
		return x.IsShow
	}
	return false
}

func (x *GCGCard) GetFaceType() uint32 {
	if x != nil {
		return x.FaceType
	}
	return 0
}

func (x *GCGCard) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GCGCard) GetTokenList() []*GCGToken {
	if x != nil {
		return x.TokenList
	}
	return nil
}

func (x *GCGCard) GetSkillIdList() []uint32 {
	if x != nil {
		return x.SkillIdList
	}
	return nil
}

func (x *GCGCard) GetSkillLimitsList() []*GCGSkillLimitsInfo {
	if x != nil {
		return x.SkillLimitsList
	}
	return nil
}

func (x *GCGCard) GetGuid() uint32 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *GCGCard) GetTagList() []uint32 {
	if x != nil {
		return x.TagList
	}
	return nil
}

func (x *GCGCard) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

type GCGZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardList []uint32 `protobuf:"varint,4,rep,packed,name=card_list,json=cardList,proto3" json:"card_list,omitempty"`
}

func (x *GCGZone) Reset() {
	*x = GCGZone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGZone) ProtoMessage() {}

func (x *GCGZone) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGZone.ProtoReflect.Descriptor instead.
func (*GCGZone) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{59}
}

func (x *GCGZone) GetCardList() []uint32 {
	if x != nil {
		return x.CardList
	}
	return nil
}

type GCGWaitingCharacter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId    uint32 `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	CondCount uint32 `protobuf:"varint,14,opt,name=cond_count,json=condCount,proto3" json:"cond_count,omitempty"`
}

func (x *GCGWaitingCharacter) Reset() {
	*x = GCGWaitingCharacter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGWaitingCharacter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGWaitingCharacter) ProtoMessage() {}

func (x *GCGWaitingCharacter) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGWaitingCharacter.ProtoReflect.Descriptor instead.
func (*GCGWaitingCharacter) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{60}
}

func (x *GCGWaitingCharacter) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *GCGWaitingCharacter) GetCondCount() uint32 {
	if x != nil {
		return x.CondCount
	}
	return 0
}

type GCGPlayerField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModifyZoneMap        map[uint32]*GCGZone    `protobuf:"bytes,2,rep,name=modify_zone_map,json=modifyZoneMap,proto3" json:"modify_zone_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CurWaitingIndex      uint32                 `protobuf:"varint,383,opt,name=cur_waiting_index,json=curWaitingIndex,proto3" json:"cur_waiting_index,omitempty"`
	SummonZone           *GCGZone               `protobuf:"bytes,1,opt,name=summon_zone,json=summonZone,proto3" json:"summon_zone,omitempty"`
	FieldShowId          uint32                 `protobuf:"varint,8,opt,name=field_show_id,json=fieldShowId,proto3" json:"field_show_id,omitempty"`
	CardBackShowId       uint32                 `protobuf:"varint,12,opt,name=card_back_show_id,json=cardBackShowId,proto3" json:"card_back_show_id,omitempty"`
	DiceCount            uint32                 `protobuf:"varint,3,opt,name=dice_count,json=diceCount,proto3" json:"dice_count,omitempty"`
	ControllerId         uint32                 `protobuf:"varint,10,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	OnStageZone          *GCGZone               `protobuf:"bytes,14,opt,name=on_stage_zone,json=onStageZone,proto3" json:"on_stage_zone,omitempty"`
	IsPassed             bool                   `protobuf:"varint,7,opt,name=is_passed,json=isPassed,proto3" json:"is_passed,omitempty"`
	CharacterZone        *GCGZone               `protobuf:"bytes,5,opt,name=character_zone,json=characterZone,proto3" json:"character_zone,omitempty"`
	OnStageCharacterGuid uint32                 `protobuf:"varint,6,opt,name=on_stage_character_guid,json=onStageCharacterGuid,proto3" json:"on_stage_character_guid,omitempty"`
	AssistZone           *GCGZone               `protobuf:"bytes,15,opt,name=assist_zone,json=assistZone,proto3" json:"assist_zone,omitempty"`
	DeckCardNum          uint32                 `protobuf:"varint,13,opt,name=deck_card_num,json=deckCardNum,proto3" json:"deck_card_num,omitempty"`
	DiceSideList         []GCGDiceSideType      `protobuf:"varint,11,rep,packed,name=dice_side_list,json=diceSideList,proto3,enum=proto.GCGDiceSideType" json:"dice_side_list,omitempty"`
	HandZone             *GCGZone               `protobuf:"bytes,9,opt,name=hand_zone,json=handZone,proto3" json:"hand_zone,omitempty"`
	IntentionList        []*GCGPVEIntention     `protobuf:"bytes,1192,rep,name=intention_list,json=intentionList,proto3" json:"intention_list,omitempty"`
	WaitingList          []*GCGWaitingCharacter `protobuf:"bytes,4,rep,name=waiting_list,json=waitingList,proto3" json:"waiting_list,omitempty"`
}

func (x *GCGPlayerField) Reset() {
	*x = GCGPlayerField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGPlayerField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGPlayerField) ProtoMessage() {}

func (x *GCGPlayerField) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGPlayerField.ProtoReflect.Descriptor instead.
func (*GCGPlayerField) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{61}
}

func (x *GCGPlayerField) GetModifyZoneMap() map[uint32]*GCGZone {
	if x != nil {
		return x.ModifyZoneMap
	}
	return nil
}

func (x *GCGPlayerField) GetCurWaitingIndex() uint32 {
	if x != nil {
		return x.CurWaitingIndex
	}
	return 0
}

func (x *GCGPlayerField) GetSummonZone() *GCGZone {
	if x != nil {
		return x.SummonZone
	}
	return nil
}

func (x *GCGPlayerField) GetFieldShowId() uint32 {
	if x != nil {
		return x.FieldShowId
	}
	return 0
}

func (x *GCGPlayerField) GetCardBackShowId() uint32 {
	if x != nil {
		return x.CardBackShowId
	}
	return 0
}

func (x *GCGPlayerField) GetDiceCount() uint32 {
	if x != nil {
		return x.DiceCount
	}
	return 0
}

func (x *GCGPlayerField) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *GCGPlayerField) GetOnStageZone() *GCGZone {
	if x != nil {
		return x.OnStageZone
	}
	return nil
}

func (x *GCGPlayerField) GetIsPassed() bool {
	if x != nil {
		return x.IsPassed
	}
	return false
}

func (x *GCGPlayerField) GetCharacterZone() *GCGZone {
	if x != nil {
		return x.CharacterZone
	}
	return nil
}

func (x *GCGPlayerField) GetOnStageCharacterGuid() uint32 {
	if x != nil {
		return x.OnStageCharacterGuid
	}
	return 0
}

func (x *GCGPlayerField) GetAssistZone() *GCGZone {
	if x != nil {
		return x.AssistZone
	}
	return nil
}

func (x *GCGPlayerField) GetDeckCardNum() uint32 {
	if x != nil {
		return x.DeckCardNum
	}
	return 0
}

func (x *GCGPlayerField) GetDiceSideList() []GCGDiceSideType {
	if x != nil {
		return x.DiceSideList
	}
	return nil
}

func (x *GCGPlayerField) GetHandZone() *GCGZone {
	if x != nil {
		return x.HandZone
	}
	return nil
}

func (x *GCGPlayerField) GetIntentionList() []*GCGPVEIntention {
	if x != nil {
		return x.IntentionList
	}
	return nil
}

func (x *GCGPlayerField) GetWaitingList() []*GCGWaitingCharacter {
	if x != nil {
		return x.WaitingList
	}
	return nil
}

type GCGPhase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhaseType          GCGPhaseType      `protobuf:"varint,5,opt,name=phase_type,json=phaseType,proto3,enum=proto.GCGPhaseType" json:"phase_type,omitempty"`
	AllowControllerMap map[uint32]uint32 `protobuf:"bytes,6,rep,name=allow_controller_map,json=allowControllerMap,proto3" json:"allow_controller_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GCGPhase) Reset() {
	*x = GCGPhase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGPhase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGPhase) ProtoMessage() {}

func (x *GCGPhase) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGPhase.ProtoReflect.Descriptor instead.
func (*GCGPhase) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{62}
}

func (x *GCGPhase) GetPhaseType() GCGPhaseType {
	if x != nil {
		return x.PhaseType
	}
	return GCGPhaseType_GCG_PHASE_INVALID
}

func (x *GCGPhase) GetAllowControllerMap() map[uint32]uint32 {
	if x != nil {
		return x.AllowControllerMap
	}
	return nil
}

type GCGControllerShowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfilePicture *ProfilePicture `protobuf:"bytes,11,opt,name=profile_picture,json=profilePicture,proto3" json:"profile_picture,omitempty"`
	NickName       string          `protobuf:"bytes,14,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	ControllerId   uint32          `protobuf:"varint,9,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
}

func (x *GCGControllerShowInfo) Reset() {
	*x = GCGControllerShowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGControllerShowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGControllerShowInfo) ProtoMessage() {}

func (x *GCGControllerShowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGControllerShowInfo.ProtoReflect.Descriptor instead.
func (*GCGControllerShowInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{63}
}

func (x *GCGControllerShowInfo) GetProfilePicture() *ProfilePicture {
	if x != nil {
		return x.ProfilePicture
	}
	return nil
}

func (x *GCGControllerShowInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *GCGControllerShowInfo) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

type GCGPVEIntention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardGuid    uint32   `protobuf:"varint,9,opt,name=card_guid,json=cardGuid,proto3" json:"card_guid,omitempty"`
	SkillIdList []uint32 `protobuf:"varint,7,rep,packed,name=skill_id_list,json=skillIdList,proto3" json:"skill_id_list,omitempty"`
}

func (x *GCGPVEIntention) Reset() {
	*x = GCGPVEIntention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGPVEIntention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGPVEIntention) ProtoMessage() {}

func (x *GCGPVEIntention) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGPVEIntention.ProtoReflect.Descriptor instead.
func (*GCGPVEIntention) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{64}
}

func (x *GCGPVEIntention) GetCardGuid() uint32 {
	if x != nil {
		return x.CardGuid
	}
	return 0
}

func (x *GCGPVEIntention) GetSkillIdList() []uint32 {
	if x != nil {
		return x.SkillIdList
	}
	return nil
}

type GCGDuelChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalProgress uint32 `protobuf:"varint,7,opt,name=total_progress,json=totalProgress,proto3" json:"total_progress,omitempty"`
	ChallengeId   uint32 `protobuf:"varint,10,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	CurProgress   uint32 `protobuf:"varint,12,opt,name=cur_progress,json=curProgress,proto3" json:"cur_progress,omitempty"`
}

func (x *GCGDuelChallenge) Reset() {
	*x = GCGDuelChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDuelChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDuelChallenge) ProtoMessage() {}

func (x *GCGDuelChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDuelChallenge.ProtoReflect.Descriptor instead.
func (*GCGDuelChallenge) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{65}
}

func (x *GCGDuelChallenge) GetTotalProgress() uint32 {
	if x != nil {
		return x.TotalProgress
	}
	return 0
}

func (x *GCGDuelChallenge) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

func (x *GCGDuelChallenge) GetCurProgress() uint32 {
	if x != nil {
		return x.CurProgress
	}
	return 0
}

type GCGDuel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostRevise                *GCGCostReviseInfo       `protobuf:"bytes,10,opt,name=cost_revise,json=costRevise,proto3" json:"cost_revise,omitempty"`
	BusinessType              GCGGameBusinessType      `protobuf:"varint,14,opt,name=business_type,json=businessType,proto3,enum=proto.GCGGameBusinessType" json:"business_type,omitempty"`
	HistoryCardList           []*GCGCard               `protobuf:"bytes,121,rep,name=history_card_list,json=historyCardList,proto3" json:"history_card_list,omitempty"`
	OperationSeq              uint32                   `protobuf:"varint,1210,opt,name=operation_seq,json=operationSeq,proto3" json:"operation_seq,omitempty"`
	GameId                    uint32                   `protobuf:"varint,11,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	GameType                  uint32                   `protobuf:"varint,2,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`
	CardList                  []*GCGCard               `protobuf:"bytes,9,rep,name=card_list,json=cardList,proto3" json:"card_list,omitempty"`
	ServerSeq                 uint32                   `protobuf:"varint,3,opt,name=server_seq,json=serverSeq,proto3" json:"server_seq,omitempty"`
	HistoryMsgPackList        []*GCGMessagePack        `protobuf:"bytes,796,rep,name=history_msg_pack_list,json=historyMsgPackList,proto3" json:"history_msg_pack_list,omitempty"`
	Round                     uint32                   `protobuf:"varint,15,opt,name=round,proto3" json:"round,omitempty"`
	FieldList                 []*GCGPlayerField        `protobuf:"bytes,7,rep,name=field_list,json=fieldList,proto3" json:"field_list,omitempty"`
	ControllerId              uint32                   `protobuf:"varint,13,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	Phase                     *GCGPhase                `protobuf:"bytes,8,opt,name=phase,proto3" json:"phase,omitempty"`
	CardIdList                []uint32                 `protobuf:"varint,4,rep,packed,name=card_id_list,json=cardIdList,proto3" json:"card_id_list,omitempty"`
	IntetionList              []*GCGPVEIntention       `protobuf:"bytes,1,rep,name=intetion_list,json=intetionList,proto3" json:"intetion_list,omitempty"`
	ForbidFinishChallengeList []uint32                 `protobuf:"varint,647,rep,packed,name=forbid_finish_challenge_list,json=forbidFinishChallengeList,proto3" json:"forbid_finish_challenge_list,omitempty"`
	ChallengeList             []*GCGDuelChallenge      `protobuf:"bytes,5,rep,name=challenge_list,json=challengeList,proto3" json:"challenge_list,omitempty"`
	CurControllerId           uint32                   `protobuf:"varint,12,opt,name=cur_controller_id,json=curControllerId,proto3" json:"cur_controller_id,omitempty"`
	ShowInfoList              []*GCGControllerShowInfo `protobuf:"bytes,6,rep,name=show_info_list,json=showInfoList,proto3" json:"show_info_list,omitempty"`
}

func (x *GCGDuel) Reset() {
	*x = GCGDuel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDuel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDuel) ProtoMessage() {}

func (x *GCGDuel) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDuel.ProtoReflect.Descriptor instead.
func (*GCGDuel) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{66}
}

func (x *GCGDuel) GetCostRevise() *GCGCostReviseInfo {
	if x != nil {
		return x.CostRevise
	}
	return nil
}

func (x *GCGDuel) GetBusinessType() GCGGameBusinessType {
	if x != nil {
		return x.BusinessType
	}
	return GCGGameBusinessType_GCG_GAME_NONE
}

func (x *GCGDuel) GetHistoryCardList() []*GCGCard {
	if x != nil {
		return x.HistoryCardList
	}
	return nil
}

func (x *GCGDuel) GetOperationSeq() uint32 {
	if x != nil {
		return x.OperationSeq
	}
	return 0
}

func (x *GCGDuel) GetGameId() uint32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *GCGDuel) GetGameType() uint32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *GCGDuel) GetCardList() []*GCGCard {
	if x != nil {
		return x.CardList
	}
	return nil
}

func (x *GCGDuel) GetServerSeq() uint32 {
	if x != nil {
		return x.ServerSeq
	}
	return 0
}

func (x *GCGDuel) GetHistoryMsgPackList() []*GCGMessagePack {
	if x != nil {
		return x.HistoryMsgPackList
	}
	return nil
}

func (x *GCGDuel) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *GCGDuel) GetFieldList() []*GCGPlayerField {
	if x != nil {
		return x.FieldList
	}
	return nil
}

func (x *GCGDuel) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *GCGDuel) GetPhase() *GCGPhase {
	if x != nil {
		return x.Phase
	}
	return nil
}

func (x *GCGDuel) GetCardIdList() []uint32 {
	if x != nil {
		return x.CardIdList
	}
	return nil
}

func (x *GCGDuel) GetIntetionList() []*GCGPVEIntention {
	if x != nil {
		return x.IntetionList
	}
	return nil
}

func (x *GCGDuel) GetForbidFinishChallengeList() []uint32 {
	if x != nil {
		return x.ForbidFinishChallengeList
	}
	return nil
}

func (x *GCGDuel) GetChallengeList() []*GCGDuelChallenge {
	if x != nil {
		return x.ChallengeList
	}
	return nil
}

func (x *GCGDuel) GetCurControllerId() uint32 {
	if x != nil {
		return x.CurControllerId
	}
	return 0
}

func (x *GCGDuel) GetShowInfoList() []*GCGControllerShowInfo {
	if x != nil {
		return x.ShowInfoList
	}
	return nil
}

type GCGOperationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpSeq       uint32        `protobuf:"varint,2,opt,name=op_seq,json=opSeq,proto3" json:"op_seq,omitempty"`
	RedirectUid uint32        `protobuf:"varint,7,opt,name=redirect_uid,json=redirectUid,proto3" json:"redirect_uid,omitempty"`
	Op          *GCGOperation `protobuf:"bytes,15,opt,name=op,proto3" json:"op,omitempty"`
}

func (x *GCGOperationReq) Reset() {
	*x = GCGOperationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGOperationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGOperationReq) ProtoMessage() {}

func (x *GCGOperationReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGOperationReq.ProtoReflect.Descriptor instead.
func (*GCGOperationReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{67}
}

func (x *GCGOperationReq) GetOpSeq() uint32 {
	if x != nil {
		return x.OpSeq
	}
	return 0
}

func (x *GCGOperationReq) GetRedirectUid() uint32 {
	if x != nil {
		return x.RedirectUid
	}
	return 0
}

func (x *GCGOperationReq) GetOp() *GCGOperation {
	if x != nil {
		return x.Op
	}
	return nil
}

type GCGOperationRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32  `protobuf:"varint,8,opt,name=retcode,proto3" json:"retcode,omitempty"`
	OpSeq   uint32 `protobuf:"varint,4,opt,name=op_seq,json=opSeq,proto3" json:"op_seq,omitempty"`
}

func (x *GCGOperationRsp) Reset() {
	*x = GCGOperationRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGOperationRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGOperationRsp) ProtoMessage() {}

func (x *GCGOperationRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGOperationRsp.ProtoReflect.Descriptor instead.
func (*GCGOperationRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{68}
}

func (x *GCGOperationRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GCGOperationRsp) GetOpSeq() uint32 {
	if x != nil {
		return x.OpSeq
	}
	return 0
}

type GCGMessagePackNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgPackList []*GCGMessagePack `protobuf:"bytes,11,rep,name=msg_pack_list,json=msgPackList,proto3" json:"msg_pack_list,omitempty"`
	ServerSeq   uint32            `protobuf:"varint,5,opt,name=server_seq,json=serverSeq,proto3" json:"server_seq,omitempty"`
}

func (x *GCGMessagePackNotify) Reset() {
	*x = GCGMessagePackNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMessagePackNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMessagePackNotify) ProtoMessage() {}

func (x *GCGMessagePackNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMessagePackNotify.ProtoReflect.Descriptor instead.
func (*GCGMessagePackNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{69}
}

func (x *GCGMessagePackNotify) GetMsgPackList() []*GCGMessagePack {
	if x != nil {
		return x.MsgPackList
	}
	return nil
}

func (x *GCGMessagePackNotify) GetServerSeq() uint32 {
	if x != nil {
		return x.ServerSeq
	}
	return 0
}

type GCGAskDuelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GCGAskDuelReq) Reset() {
	*x = GCGAskDuelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGAskDuelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGAskDuelReq) ProtoMessage() {}

func (x *GCGAskDuelReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGAskDuelReq.ProtoReflect.Descriptor instead.
func (*GCGAskDuelReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{70}
}

type GCGAskDuelRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32    `protobuf:"varint,3,opt,name=retcode,proto3" json:"retcode,omitempty"`
	Duel    *GCGDuel `protobuf:"bytes,13,opt,name=duel,proto3" json:"duel,omitempty"`
}

func (x *GCGAskDuelRsp) Reset() {
	*x = GCGAskDuelRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGAskDuelRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGAskDuelRsp) ProtoMessage() {}

func (x *GCGAskDuelRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGAskDuelRsp.ProtoReflect.Descriptor instead.
func (*GCGAskDuelRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{71}
}

func (x *GCGAskDuelRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GCGAskDuelRsp) GetDuel() *GCGDuel {
	if x != nil {
		return x.Duel
	}
	return nil
}

type GCGPlayerBriefData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardFaceMap    map[uint32]uint32 `protobuf:"bytes,8,rep,name=card_face_map,json=cardFaceMap,proto3" json:"card_face_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NickName       string            `protobuf:"bytes,9,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	ProfilePicture *ProfilePicture   `protobuf:"bytes,12,opt,name=profile_picture,json=profilePicture,proto3" json:"profile_picture,omitempty"`
	CardIdList     []uint32          `protobuf:"varint,3,rep,packed,name=card_id_list,json=cardIdList,proto3" json:"card_id_list,omitempty"`
	ControllerId   uint32            `protobuf:"varint,5,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	Uid            uint32            `protobuf:"varint,10,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GCGPlayerBriefData) Reset() {
	*x = GCGPlayerBriefData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGPlayerBriefData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGPlayerBriefData) ProtoMessage() {}

func (x *GCGPlayerBriefData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGPlayerBriefData.ProtoReflect.Descriptor instead.
func (*GCGPlayerBriefData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{72}
}

func (x *GCGPlayerBriefData) GetCardFaceMap() map[uint32]uint32 {
	if x != nil {
		return x.CardFaceMap
	}
	return nil
}

func (x *GCGPlayerBriefData) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *GCGPlayerBriefData) GetProfilePicture() *ProfilePicture {
	if x != nil {
		return x.ProfilePicture
	}
	return nil
}

func (x *GCGPlayerBriefData) GetCardIdList() []uint32 {
	if x != nil {
		return x.CardIdList
	}
	return nil
}

func (x *GCGPlayerBriefData) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *GCGPlayerBriefData) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type GCGGameBriefData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId          uint32                `protobuf:"varint,14,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	GameUid         uint32                `protobuf:"varint,9,opt,name=game_uid,json=gameUid,proto3" json:"game_uid,omitempty"`
	BusinessType    GCGGameBusinessType   `protobuf:"varint,13,opt,name=business_type,json=businessType,proto3,enum=proto.GCGGameBusinessType" json:"business_type,omitempty"`
	VerifyCode      uint32                `protobuf:"varint,5,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`
	PlayerBriefList []*GCGPlayerBriefData `protobuf:"bytes,12,rep,name=player_brief_list,json=playerBriefList,proto3" json:"player_brief_list,omitempty"`
}

func (x *GCGGameBriefData) Reset() {
	*x = GCGGameBriefData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGGameBriefData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGGameBriefData) ProtoMessage() {}

func (x *GCGGameBriefData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGGameBriefData.ProtoReflect.Descriptor instead.
func (*GCGGameBriefData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{73}
}

func (x *GCGGameBriefData) GetGameId() uint32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *GCGGameBriefData) GetGameUid() uint32 {
	if x != nil {
		return x.GameUid
	}
	return 0
}

func (x *GCGGameBriefData) GetBusinessType() GCGGameBusinessType {
	if x != nil {
		return x.BusinessType
	}
	return GCGGameBusinessType_GCG_GAME_NONE
}

func (x *GCGGameBriefData) GetVerifyCode() uint32 {
	if x != nil {
		return x.VerifyCode
	}
	return 0
}

func (x *GCGGameBriefData) GetPlayerBriefList() []*GCGPlayerBriefData {
	if x != nil {
		return x.PlayerBriefList
	}
	return nil
}

type GCGGameBriefDataNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNewGame    bool              `protobuf:"varint,11,opt,name=is_new_game,json=isNewGame,proto3" json:"is_new_game,omitempty"`
	GcgBriefData *GCGGameBriefData `protobuf:"bytes,10,opt,name=gcg_brief_data,json=gcgBriefData,proto3" json:"gcg_brief_data,omitempty"`
}

func (x *GCGGameBriefDataNotify) Reset() {
	*x = GCGGameBriefDataNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGGameBriefDataNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGGameBriefDataNotify) ProtoMessage() {}

func (x *GCGGameBriefDataNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGGameBriefDataNotify.ProtoReflect.Descriptor instead.
func (*GCGGameBriefDataNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{74}
}

func (x *GCGGameBriefDataNotify) GetIsNewGame() bool {
	if x != nil {
		return x.IsNewGame
	}
	return false
}

func (x *GCGGameBriefDataNotify) GetGcgBriefData() *GCGGameBriefData {
	if x != nil {
		return x.GcgBriefData
	}
	return nil
}

type GCGInitFinishReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GCGInitFinishReq) Reset() {
	*x = GCGInitFinishReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGInitFinishReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGInitFinishReq) ProtoMessage() {}

func (x *GCGInitFinishReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGInitFinishReq.ProtoReflect.Descriptor instead.
func (*GCGInitFinishReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{75}
}

type GCGInitFinishRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GCGInitFinishRsp) Reset() {
	*x = GCGInitFinishRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGInitFinishRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGInitFinishRsp) ProtoMessage() {}

func (x *GCGInitFinishRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGInitFinishRsp.ProtoReflect.Descriptor instead.
func (*GCGInitFinishRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{76}
}

func (x *GCGInitFinishRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type GCGHeartBeatNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSeq uint32 `protobuf:"varint,6,opt,name=server_seq,json=serverSeq,proto3" json:"server_seq,omitempty"`
}

func (x *GCGHeartBeatNotify) Reset() {
	*x = GCGHeartBeatNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGHeartBeatNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGHeartBeatNotify) ProtoMessage() {}

func (x *GCGHeartBeatNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGHeartBeatNotify.ProtoReflect.Descriptor instead.
func (*GCGHeartBeatNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{77}
}

func (x *GCGHeartBeatNotify) GetServerSeq() uint32 {
	if x != nil {
		return x.ServerSeq
	}
	return 0
}

type GCGSkillPreviewHpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeType    GCGSkillHpChangeType `protobuf:"varint,4,opt,name=change_type,json=changeType,proto3,enum=proto.GCGSkillHpChangeType" json:"change_type,omitempty"`
	HpChangeValue uint32               `protobuf:"varint,13,opt,name=hp_change_value,json=hpChangeValue,proto3" json:"hp_change_value,omitempty"`
}

func (x *GCGSkillPreviewHpInfo) Reset() {
	*x = GCGSkillPreviewHpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGSkillPreviewHpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGSkillPreviewHpInfo) ProtoMessage() {}

func (x *GCGSkillPreviewHpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGSkillPreviewHpInfo.ProtoReflect.Descriptor instead.
func (*GCGSkillPreviewHpInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{78}
}

func (x *GCGSkillPreviewHpInfo) GetChangeType() GCGSkillHpChangeType {
	if x != nil {
		return x.ChangeType
	}
	return GCGSkillHpChangeType_GCG_SKILL_HP_CHANGE_NONE
}

func (x *GCGSkillPreviewHpInfo) GetHpChangeValue() uint32 {
	if x != nil {
		return x.HpChangeValue
	}
	return 0
}

type GCGSkillPreviewReactionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceElement uint32 `protobuf:"varint,13,opt,name=source_element,json=sourceElement,proto3" json:"source_element,omitempty"`
	TargetElement uint32 `protobuf:"varint,1,opt,name=target_element,json=targetElement,proto3" json:"target_element,omitempty"`
}

func (x *GCGSkillPreviewReactionInfo) Reset() {
	*x = GCGSkillPreviewReactionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGSkillPreviewReactionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGSkillPreviewReactionInfo) ProtoMessage() {}

func (x *GCGSkillPreviewReactionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGSkillPreviewReactionInfo.ProtoReflect.Descriptor instead.
func (*GCGSkillPreviewReactionInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{79}
}

func (x *GCGSkillPreviewReactionInfo) GetSourceElement() uint32 {
	if x != nil {
		return x.SourceElement
	}
	return 0
}

func (x *GCGSkillPreviewReactionInfo) GetTargetElement() uint32 {
	if x != nil {
		return x.TargetElement
	}
	return 0
}

type GCGSkillPreviewElementReactionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreshList    []uint32                       `protobuf:"varint,8,rep,packed,name=fresh_list,json=freshList,proto3" json:"fresh_list,omitempty"`
	SourceList   []uint32                       `protobuf:"varint,2,rep,packed,name=source_list,json=sourceList,proto3" json:"source_list,omitempty"`
	ReactionList []*GCGSkillPreviewReactionInfo `protobuf:"bytes,14,rep,name=reaction_list,json=reactionList,proto3" json:"reaction_list,omitempty"`
}

func (x *GCGSkillPreviewElementReactionInfo) Reset() {
	*x = GCGSkillPreviewElementReactionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGSkillPreviewElementReactionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGSkillPreviewElementReactionInfo) ProtoMessage() {}

func (x *GCGSkillPreviewElementReactionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGSkillPreviewElementReactionInfo.ProtoReflect.Descriptor instead.
func (*GCGSkillPreviewElementReactionInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{80}
}

func (x *GCGSkillPreviewElementReactionInfo) GetFreshList() []uint32 {
	if x != nil {
		return x.FreshList
	}
	return nil
}

func (x *GCGSkillPreviewElementReactionInfo) GetSourceList() []uint32 {
	if x != nil {
		return x.SourceList
	}
	return nil
}

func (x *GCGSkillPreviewElementReactionInfo) GetReactionList() []*GCGSkillPreviewReactionInfo {
	if x != nil {
		return x.ReactionList
	}
	return nil
}

type GCGSkillPreviewCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId  uint32      `protobuf:"varint,3,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	OwnerCardGuid uint32      `protobuf:"varint,11,opt,name=owner_card_guid,json=ownerCardGuid,proto3" json:"owner_card_guid,omitempty"`
	ZoneType      GCGZoneType `protobuf:"varint,14,opt,name=zone_type,json=zoneType,proto3,enum=proto.GCGZoneType" json:"zone_type,omitempty"`
	CardId        uint32      `protobuf:"varint,13,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	CardGuid      uint32      `protobuf:"varint,6,opt,name=card_guid,json=cardGuid,proto3" json:"card_guid,omitempty"`
}

func (x *GCGSkillPreviewCardInfo) Reset() {
	*x = GCGSkillPreviewCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGSkillPreviewCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGSkillPreviewCardInfo) ProtoMessage() {}

func (x *GCGSkillPreviewCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGSkillPreviewCardInfo.ProtoReflect.Descriptor instead.
func (*GCGSkillPreviewCardInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{81}
}

func (x *GCGSkillPreviewCardInfo) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *GCGSkillPreviewCardInfo) GetOwnerCardGuid() uint32 {
	if x != nil {
		return x.OwnerCardGuid
	}
	return 0
}

func (x *GCGSkillPreviewCardInfo) GetZoneType() GCGZoneType {
	if x != nil {
		return x.ZoneType
	}
	return GCGZoneType_GCG_ZONE_INVALID
}

func (x *GCGSkillPreviewCardInfo) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *GCGSkillPreviewCardInfo) GetCardGuid() uint32 {
	if x != nil {
		return x.CardGuid
	}
	return 0
}

type GCGSkillPreviewOnstageChangeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetOnstageCardGuid uint32 `protobuf:"varint,6,opt,name=target_onstage_card_guid,json=targetOnstageCardGuid,proto3" json:"target_onstage_card_guid,omitempty"`
	SourceOnstageCardGuid uint32 `protobuf:"varint,15,opt,name=source_onstage_card_guid,json=sourceOnstageCardGuid,proto3" json:"source_onstage_card_guid,omitempty"`
}

func (x *GCGSkillPreviewOnstageChangeInfo) Reset() {
	*x = GCGSkillPreviewOnstageChangeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGSkillPreviewOnstageChangeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGSkillPreviewOnstageChangeInfo) ProtoMessage() {}

func (x *GCGSkillPreviewOnstageChangeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGSkillPreviewOnstageChangeInfo.ProtoReflect.Descriptor instead.
func (*GCGSkillPreviewOnstageChangeInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{82}
}

func (x *GCGSkillPreviewOnstageChangeInfo) GetTargetOnstageCardGuid() uint32 {
	if x != nil {
		return x.TargetOnstageCardGuid
	}
	return 0
}

func (x *GCGSkillPreviewOnstageChangeInfo) GetSourceOnstageCardGuid() uint32 {
	if x != nil {
		return x.SourceOnstageCardGuid
	}
	return 0
}

type GCGSkillPreviewTokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenType   uint32 `protobuf:"varint,3,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	AfterValue  uint32 `protobuf:"varint,12,opt,name=after_value,json=afterValue,proto3" json:"after_value,omitempty"`
	BeforeValue uint32 `protobuf:"varint,15,opt,name=before_value,json=beforeValue,proto3" json:"before_value,omitempty"`
}

func (x *GCGSkillPreviewTokenInfo) Reset() {
	*x = GCGSkillPreviewTokenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGSkillPreviewTokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGSkillPreviewTokenInfo) ProtoMessage() {}

func (x *GCGSkillPreviewTokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGSkillPreviewTokenInfo.ProtoReflect.Descriptor instead.
func (*GCGSkillPreviewTokenInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{83}
}

func (x *GCGSkillPreviewTokenInfo) GetTokenType() uint32 {
	if x != nil {
		return x.TokenType
	}
	return 0
}

func (x *GCGSkillPreviewTokenInfo) GetAfterValue() uint32 {
	if x != nil {
		return x.AfterValue
	}
	return 0
}

func (x *GCGSkillPreviewTokenInfo) GetBeforeValue() uint32 {
	if x != nil {
		return x.BeforeValue
	}
	return 0
}

type GCGSkillPreviewTokenChangeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenChangeList []*GCGSkillPreviewTokenInfo `protobuf:"bytes,14,rep,name=token_change_list,json=tokenChangeList,proto3" json:"token_change_list,omitempty"`
}

func (x *GCGSkillPreviewTokenChangeInfo) Reset() {
	*x = GCGSkillPreviewTokenChangeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGSkillPreviewTokenChangeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGSkillPreviewTokenChangeInfo) ProtoMessage() {}

func (x *GCGSkillPreviewTokenChangeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGSkillPreviewTokenChangeInfo.ProtoReflect.Descriptor instead.
func (*GCGSkillPreviewTokenChangeInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{84}
}

func (x *GCGSkillPreviewTokenChangeInfo) GetTokenChangeList() []*GCGSkillPreviewTokenInfo {
	if x != nil {
		return x.TokenChangeList
	}
	return nil
}

type GCGSkillPreviewExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailAddedWhenFullList    []*GCGSkillPreviewCardInfo `protobuf:"bytes,14,rep,name=fail_added_when_full_list,json=failAddedWhenFullList,proto3" json:"fail_added_when_full_list,omitempty"`
	RefreshCardWhenExistList []*GCGSkillPreviewCardInfo `protobuf:"bytes,6,rep,name=refresh_card_when_exist_list,json=refreshCardWhenExistList,proto3" json:"refresh_card_when_exist_list,omitempty"`
}

func (x *GCGSkillPreviewExtraInfo) Reset() {
	*x = GCGSkillPreviewExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGSkillPreviewExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGSkillPreviewExtraInfo) ProtoMessage() {}

func (x *GCGSkillPreviewExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGSkillPreviewExtraInfo.ProtoReflect.Descriptor instead.
func (*GCGSkillPreviewExtraInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{85}
}

func (x *GCGSkillPreviewExtraInfo) GetFailAddedWhenFullList() []*GCGSkillPreviewCardInfo {
	if x != nil {
		return x.FailAddedWhenFullList
	}
	return nil
}

func (x *GCGSkillPreviewExtraInfo) GetRefreshCardWhenExistList() []*GCGSkillPreviewCardInfo {
	if x != nil {
		return x.RefreshCardWhenExistList
	}
	return nil
}

type GCGSkillPreviewInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardTokenChangeMap         map[uint32]*GCGSkillPreviewTokenChangeInfo     `protobuf:"bytes,3,rep,name=card_token_change_map,json=cardTokenChangeMap,proto3" json:"card_token_change_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ReactionInfoMap            map[uint32]*GCGSkillPreviewElementReactionInfo `protobuf:"bytes,5,rep,name=reaction_info_map,json=reactionInfoMap,proto3" json:"reaction_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HpInfoMap                  map[uint32]*GCGSkillPreviewHpInfo              `protobuf:"bytes,8,rep,name=hp_info_map,json=hpInfoMap,proto3" json:"hp_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AddCardList                []*GCGSkillPreviewCardInfo                     `protobuf:"bytes,11,rep,name=add_card_list,json=addCardList,proto3" json:"add_card_list,omitempty"`
	ExtraInfo                  *GCGSkillPreviewExtraInfo                      `protobuf:"bytes,10,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	SkillId                    uint32                                         `protobuf:"varint,6,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	ChangeOnstageCharacterList []*GCGSkillPreviewOnstageChangeInfo            `protobuf:"bytes,9,rep,name=change_onstage_character_list,json=changeOnstageCharacterList,proto3" json:"change_onstage_character_list,omitempty"`
	RmCardList                 []*GCGSkillPreviewCardInfo                     `protobuf:"bytes,12,rep,name=rm_card_list,json=rmCardList,proto3" json:"rm_card_list,omitempty"`
}

func (x *GCGSkillPreviewInfo) Reset() {
	*x = GCGSkillPreviewInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGSkillPreviewInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGSkillPreviewInfo) ProtoMessage() {}

func (x *GCGSkillPreviewInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGSkillPreviewInfo.ProtoReflect.Descriptor instead.
func (*GCGSkillPreviewInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{86}
}

func (x *GCGSkillPreviewInfo) GetCardTokenChangeMap() map[uint32]*GCGSkillPreviewTokenChangeInfo {
	if x != nil {
		return x.CardTokenChangeMap
	}
	return nil
}

func (x *GCGSkillPreviewInfo) GetReactionInfoMap() map[uint32]*GCGSkillPreviewElementReactionInfo {
	if x != nil {
		return x.ReactionInfoMap
	}
	return nil
}

func (x *GCGSkillPreviewInfo) GetHpInfoMap() map[uint32]*GCGSkillPreviewHpInfo {
	if x != nil {
		return x.HpInfoMap
	}
	return nil
}

func (x *GCGSkillPreviewInfo) GetAddCardList() []*GCGSkillPreviewCardInfo {
	if x != nil {
		return x.AddCardList
	}
	return nil
}

func (x *GCGSkillPreviewInfo) GetExtraInfo() *GCGSkillPreviewExtraInfo {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

func (x *GCGSkillPreviewInfo) GetSkillId() uint32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *GCGSkillPreviewInfo) GetChangeOnstageCharacterList() []*GCGSkillPreviewOnstageChangeInfo {
	if x != nil {
		return x.ChangeOnstageCharacterList
	}
	return nil
}

func (x *GCGSkillPreviewInfo) GetRmCardList() []*GCGSkillPreviewCardInfo {
	if x != nil {
		return x.RmCardList
	}
	return nil
}

type GCGChangeOnstageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardGuid                 uint32               `protobuf:"varint,6,opt,name=card_guid,json=cardGuid,proto3" json:"card_guid,omitempty"`
	IsQuick                  bool                 `protobuf:"varint,7,opt,name=is_quick,json=isQuick,proto3" json:"is_quick,omitempty"`
	ChangeOnstagePreviewInfo *GCGSkillPreviewInfo `protobuf:"bytes,12,opt,name=change_onstage_preview_info,json=changeOnstagePreviewInfo,proto3" json:"change_onstage_preview_info,omitempty"`
}

func (x *GCGChangeOnstageInfo) Reset() {
	*x = GCGChangeOnstageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGChangeOnstageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGChangeOnstageInfo) ProtoMessage() {}

func (x *GCGChangeOnstageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGChangeOnstageInfo.ProtoReflect.Descriptor instead.
func (*GCGChangeOnstageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{87}
}

func (x *GCGChangeOnstageInfo) GetCardGuid() uint32 {
	if x != nil {
		return x.CardGuid
	}
	return 0
}

func (x *GCGChangeOnstageInfo) GetIsQuick() bool {
	if x != nil {
		return x.IsQuick
	}
	return false
}

func (x *GCGChangeOnstageInfo) GetChangeOnstagePreviewInfo() *GCGSkillPreviewInfo {
	if x != nil {
		return x.ChangeOnstagePreviewInfo
	}
	return nil
}

type GCGSkillPreviewPlayCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetCardGuid uint32               `protobuf:"varint,9,opt,name=target_card_guid,json=targetCardGuid,proto3" json:"target_card_guid,omitempty"`
	HandCardGuid   uint32               `protobuf:"varint,15,opt,name=hand_card_guid,json=handCardGuid,proto3" json:"hand_card_guid,omitempty"`
	PlayCardInfo   *GCGSkillPreviewInfo `protobuf:"bytes,6,opt,name=play_card_info,json=playCardInfo,proto3" json:"play_card_info,omitempty"`
}

func (x *GCGSkillPreviewPlayCardInfo) Reset() {
	*x = GCGSkillPreviewPlayCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGSkillPreviewPlayCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGSkillPreviewPlayCardInfo) ProtoMessage() {}

func (x *GCGSkillPreviewPlayCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGSkillPreviewPlayCardInfo.ProtoReflect.Descriptor instead.
func (*GCGSkillPreviewPlayCardInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{88}
}

func (x *GCGSkillPreviewPlayCardInfo) GetTargetCardGuid() uint32 {
	if x != nil {
		return x.TargetCardGuid
	}
	return 0
}

func (x *GCGSkillPreviewPlayCardInfo) GetHandCardGuid() uint32 {
	if x != nil {
		return x.HandCardGuid
	}
	return 0
}

func (x *GCGSkillPreviewPlayCardInfo) GetPlayCardInfo() *GCGSkillPreviewInfo {
	if x != nil {
		return x.PlayCardInfo
	}
	return nil
}

type GCGSkillPreviewNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId             uint32                         `protobuf:"varint,15,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	PlayCardList             []*GCGSkillPreviewPlayCardInfo `protobuf:"bytes,11,rep,name=play_card_list,json=playCardList,proto3" json:"play_card_list,omitempty"`
	SkillPreviewList         []*GCGSkillPreviewInfo         `protobuf:"bytes,9,rep,name=skill_preview_list,json=skillPreviewList,proto3" json:"skill_preview_list,omitempty"`
	ChangeOnstagePreviewList []*GCGChangeOnstageInfo        `protobuf:"bytes,1,rep,name=change_onstage_preview_list,json=changeOnstagePreviewList,proto3" json:"change_onstage_preview_list,omitempty"`
	OnstageCardGuid          uint32                         `protobuf:"varint,5,opt,name=onstage_card_guid,json=onstageCardGuid,proto3" json:"onstage_card_guid,omitempty"`
}

func (x *GCGSkillPreviewNotify) Reset() {
	*x = GCGSkillPreviewNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGSkillPreviewNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGSkillPreviewNotify) ProtoMessage() {}

func (x *GCGSkillPreviewNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGSkillPreviewNotify.ProtoReflect.Descriptor instead.
func (*GCGSkillPreviewNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{89}
}

func (x *GCGSkillPreviewNotify) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *GCGSkillPreviewNotify) GetPlayCardList() []*GCGSkillPreviewPlayCardInfo {
	if x != nil {
		return x.PlayCardList
	}
	return nil
}

func (x *GCGSkillPreviewNotify) GetSkillPreviewList() []*GCGSkillPreviewInfo {
	if x != nil {
		return x.SkillPreviewList
	}
	return nil
}

func (x *GCGSkillPreviewNotify) GetChangeOnstagePreviewList() []*GCGChangeOnstageInfo {
	if x != nil {
		return x.ChangeOnstagePreviewList
	}
	return nil
}

func (x *GCGSkillPreviewNotify) GetOnstageCardGuid() uint32 {
	if x != nil {
		return x.OnstageCardGuid
	}
	return 0
}

type GCGSkillPreviewAskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GCGSkillPreviewAskReq) Reset() {
	*x = GCGSkillPreviewAskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGSkillPreviewAskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGSkillPreviewAskReq) ProtoMessage() {}

func (x *GCGSkillPreviewAskReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGSkillPreviewAskReq.ProtoReflect.Descriptor instead.
func (*GCGSkillPreviewAskReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{90}
}

type GCGSkillPreviewAskRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GCGSkillPreviewAskRsp) Reset() {
	*x = GCGSkillPreviewAskRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGSkillPreviewAskRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGSkillPreviewAskRsp) ProtoMessage() {}

func (x *GCGSkillPreviewAskRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGSkillPreviewAskRsp.ProtoReflect.Descriptor instead.
func (*GCGSkillPreviewAskRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{91}
}

func (x *GCGSkillPreviewAskRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type GCGChallengeUpdateNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSeq uint32            `protobuf:"varint,12,opt,name=server_seq,json=serverSeq,proto3" json:"server_seq,omitempty"`
	Challenge *GCGDuelChallenge `protobuf:"bytes,13,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (x *GCGChallengeUpdateNotify) Reset() {
	*x = GCGChallengeUpdateNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGChallengeUpdateNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGChallengeUpdateNotify) ProtoMessage() {}

func (x *GCGChallengeUpdateNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGChallengeUpdateNotify.ProtoReflect.Descriptor instead.
func (*GCGChallengeUpdateNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{92}
}

func (x *GCGChallengeUpdateNotify) GetServerSeq() uint32 {
	if x != nil {
		return x.ServerSeq
	}
	return 0
}

func (x *GCGChallengeUpdateNotify) GetChallenge() *GCGDuelChallenge {
	if x != nil {
		return x.Challenge
	}
	return nil
}

type GCGBackToDuelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsBack bool `protobuf:"varint,14,opt,name=is_back,json=isBack,proto3" json:"is_back,omitempty"`
}

func (x *GCGBackToDuelReq) Reset() {
	*x = GCGBackToDuelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGBackToDuelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGBackToDuelReq) ProtoMessage() {}

func (x *GCGBackToDuelReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGBackToDuelReq.ProtoReflect.Descriptor instead.
func (*GCGBackToDuelReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{93}
}

func (x *GCGBackToDuelReq) GetIsBack() bool {
	if x != nil {
		return x.IsBack
	}
	return false
}

type GCGBackToDuelRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GCGBackToDuelRsp) Reset() {
	*x = GCGBackToDuelRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGBackToDuelRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGBackToDuelRsp) ProtoMessage() {}

func (x *GCGBackToDuelRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGBackToDuelRsp.ProtoReflect.Descriptor instead.
func (*GCGBackToDuelRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{94}
}

func (x *GCGBackToDuelRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type GCGDebugReplayNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonStr string `protobuf:"bytes,9,opt,name=json_str,json=jsonStr,proto3" json:"json_str,omitempty"`
}

func (x *GCGDebugReplayNotify) Reset() {
	*x = GCGDebugReplayNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDebugReplayNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDebugReplayNotify) ProtoMessage() {}

func (x *GCGDebugReplayNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDebugReplayNotify.ProtoReflect.Descriptor instead.
func (*GCGDebugReplayNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{95}
}

func (x *GCGDebugReplayNotify) GetJsonStr() string {
	if x != nil {
		return x.JsonStr
	}
	return ""
}

type GCGGameMaxNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GCGGameMaxNotify) Reset() {
	*x = GCGGameMaxNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGGameMaxNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGGameMaxNotify) ProtoMessage() {}

func (x *GCGGameMaxNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGGameMaxNotify.ProtoReflect.Descriptor instead.
func (*GCGGameMaxNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{96}
}

type GCGGameCreateFailReasonNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason GCGGameCreateFailReasonNotify_GCGGameCreateReason `protobuf:"varint,15,opt,name=reason,proto3,enum=proto.GCGGameCreateFailReasonNotify_GCGGameCreateReason" json:"reason,omitempty"`
}

func (x *GCGGameCreateFailReasonNotify) Reset() {
	*x = GCGGameCreateFailReasonNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGGameCreateFailReasonNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGGameCreateFailReasonNotify) ProtoMessage() {}

func (x *GCGGameCreateFailReasonNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGGameCreateFailReasonNotify.ProtoReflect.Descriptor instead.
func (*GCGGameCreateFailReasonNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{97}
}

func (x *GCGGameCreateFailReasonNotify) GetReason() GCGGameCreateFailReasonNotify_GCGGameCreateReason {
	if x != nil {
		return x.Reason
	}
	return GCGGameCreateFailReasonNotify_REASON_NONE
}

type GCGDSDeckData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardList          []uint32 `protobuf:"varint,1,rep,packed,name=card_list,json=cardList,proto3" json:"card_list,omitempty"`
	CardBackId        uint32   `protobuf:"varint,15,opt,name=card_back_id,json=cardBackId,proto3" json:"card_back_id,omitempty"`
	CharacterCardList []uint32 `protobuf:"varint,10,rep,packed,name=character_card_list,json=characterCardList,proto3" json:"character_card_list,omitempty"`
	Name              string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Id                uint32   `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime        uint32   `protobuf:"fixed32,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	IsValid           bool     `protobuf:"varint,4,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	FieldId           uint32   `protobuf:"varint,7,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
}

func (x *GCGDSDeckData) Reset() {
	*x = GCGDSDeckData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSDeckData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSDeckData) ProtoMessage() {}

func (x *GCGDSDeckData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSDeckData.ProtoReflect.Descriptor instead.
func (*GCGDSDeckData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{98}
}

func (x *GCGDSDeckData) GetCardList() []uint32 {
	if x != nil {
		return x.CardList
	}
	return nil
}

func (x *GCGDSDeckData) GetCardBackId() uint32 {
	if x != nil {
		return x.CardBackId
	}
	return 0
}

func (x *GCGDSDeckData) GetCharacterCardList() []uint32 {
	if x != nil {
		return x.CharacterCardList
	}
	return nil
}

func (x *GCGDSDeckData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GCGDSDeckData) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GCGDSDeckData) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GCGDSDeckData) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *GCGDSDeckData) GetFieldId() uint32 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

type GCGDSCardData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId                        uint32   `protobuf:"varint,14,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	FaceType                      uint32   `protobuf:"varint,6,opt,name=face_type,json=faceType,proto3" json:"face_type,omitempty"`
	Num                           uint32   `protobuf:"varint,12,opt,name=num,proto3" json:"num,omitempty"`
	UnlockFaceTypeList            []uint32 `protobuf:"varint,9,rep,packed,name=unlock_face_type_list,json=unlockFaceTypeList,proto3" json:"unlock_face_type_list,omitempty"`
	ProficiencyRewardTakenIdxList []uint32 `protobuf:"varint,7,rep,packed,name=proficiency_reward_taken_idx_list,json=proficiencyRewardTakenIdxList,proto3" json:"proficiency_reward_taken_idx_list,omitempty"`
	Proficiency                   uint32   `protobuf:"varint,8,opt,name=proficiency,proto3" json:"proficiency,omitempty"`
}

func (x *GCGDSCardData) Reset() {
	*x = GCGDSCardData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSCardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSCardData) ProtoMessage() {}

func (x *GCGDSCardData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSCardData.ProtoReflect.Descriptor instead.
func (*GCGDSCardData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{99}
}

func (x *GCGDSCardData) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *GCGDSCardData) GetFaceType() uint32 {
	if x != nil {
		return x.FaceType
	}
	return 0
}

func (x *GCGDSCardData) GetNum() uint32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *GCGDSCardData) GetUnlockFaceTypeList() []uint32 {
	if x != nil {
		return x.UnlockFaceTypeList
	}
	return nil
}

func (x *GCGDSCardData) GetProficiencyRewardTakenIdxList() []uint32 {
	if x != nil {
		return x.ProficiencyRewardTakenIdxList
	}
	return nil
}

func (x *GCGDSCardData) GetProficiency() uint32 {
	if x != nil {
		return x.Proficiency
	}
	return 0
}

type GCGDSDataNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckList             []*GCGDSDeckData `protobuf:"bytes,4,rep,name=deck_list,json=deckList,proto3" json:"deck_list,omitempty"`
	UnlockCardBackIdList []uint32         `protobuf:"varint,5,rep,packed,name=unlock_card_back_id_list,json=unlockCardBackIdList,proto3" json:"unlock_card_back_id_list,omitempty"`
	UnlockFieldIdList    []uint32         `protobuf:"varint,6,rep,packed,name=unlock_field_id_list,json=unlockFieldIdList,proto3" json:"unlock_field_id_list,omitempty"`
	CurDeckId            uint32           `protobuf:"varint,10,opt,name=cur_deck_id,json=curDeckId,proto3" json:"cur_deck_id,omitempty"`
	CardList             []*GCGDSCardData `protobuf:"bytes,3,rep,name=card_list,json=cardList,proto3" json:"card_list,omitempty"`
	UnlockDeckIdList     []uint32         `protobuf:"varint,1,rep,packed,name=unlock_deck_id_list,json=unlockDeckIdList,proto3" json:"unlock_deck_id_list,omitempty"`
}

func (x *GCGDSDataNotify) Reset() {
	*x = GCGDSDataNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSDataNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSDataNotify) ProtoMessage() {}

func (x *GCGDSDataNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSDataNotify.ProtoReflect.Descriptor instead.
func (*GCGDSDataNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{100}
}

func (x *GCGDSDataNotify) GetDeckList() []*GCGDSDeckData {
	if x != nil {
		return x.DeckList
	}
	return nil
}

func (x *GCGDSDataNotify) GetUnlockCardBackIdList() []uint32 {
	if x != nil {
		return x.UnlockCardBackIdList
	}
	return nil
}

func (x *GCGDSDataNotify) GetUnlockFieldIdList() []uint32 {
	if x != nil {
		return x.UnlockFieldIdList
	}
	return nil
}

func (x *GCGDSDataNotify) GetCurDeckId() uint32 {
	if x != nil {
		return x.CurDeckId
	}
	return 0
}

func (x *GCGDSDataNotify) GetCardList() []*GCGDSCardData {
	if x != nil {
		return x.CardList
	}
	return nil
}

func (x *GCGDSDataNotify) GetUnlockDeckIdList() []uint32 {
	if x != nil {
		return x.UnlockDeckIdList
	}
	return nil
}

type GCGDSCardBackUnlockNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardBackId uint32 `protobuf:"varint,6,opt,name=card_back_id,json=cardBackId,proto3" json:"card_back_id,omitempty"`
}

func (x *GCGDSCardBackUnlockNotify) Reset() {
	*x = GCGDSCardBackUnlockNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSCardBackUnlockNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSCardBackUnlockNotify) ProtoMessage() {}

func (x *GCGDSCardBackUnlockNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSCardBackUnlockNotify.ProtoReflect.Descriptor instead.
func (*GCGDSCardBackUnlockNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{101}
}

func (x *GCGDSCardBackUnlockNotify) GetCardBackId() uint32 {
	if x != nil {
		return x.CardBackId
	}
	return 0
}

type GCGDSFieldUnlockNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldId uint32 `protobuf:"varint,1,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
}

func (x *GCGDSFieldUnlockNotify) Reset() {
	*x = GCGDSFieldUnlockNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSFieldUnlockNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSFieldUnlockNotify) ProtoMessage() {}

func (x *GCGDSFieldUnlockNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSFieldUnlockNotify.ProtoReflect.Descriptor instead.
func (*GCGDSFieldUnlockNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{102}
}

func (x *GCGDSFieldUnlockNotify) GetFieldId() uint32 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

type GCGDSCardFaceUnlockNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId   uint32 `protobuf:"varint,13,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	FaceType uint32 `protobuf:"varint,1,opt,name=face_type,json=faceType,proto3" json:"face_type,omitempty"`
}

func (x *GCGDSCardFaceUnlockNotify) Reset() {
	*x = GCGDSCardFaceUnlockNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSCardFaceUnlockNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSCardFaceUnlockNotify) ProtoMessage() {}

func (x *GCGDSCardFaceUnlockNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSCardFaceUnlockNotify.ProtoReflect.Descriptor instead.
func (*GCGDSCardFaceUnlockNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{103}
}

func (x *GCGDSCardFaceUnlockNotify) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *GCGDSCardFaceUnlockNotify) GetFaceType() uint32 {
	if x != nil {
		return x.FaceType
	}
	return 0
}

type GCGDSCardNumChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId uint32 `protobuf:"varint,4,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	Num    uint32 `protobuf:"varint,10,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *GCGDSCardNumChangeNotify) Reset() {
	*x = GCGDSCardNumChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSCardNumChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSCardNumChangeNotify) ProtoMessage() {}

func (x *GCGDSCardNumChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSCardNumChangeNotify.ProtoReflect.Descriptor instead.
func (*GCGDSCardNumChangeNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{104}
}

func (x *GCGDSCardNumChangeNotify) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *GCGDSCardNumChangeNotify) GetNum() uint32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type GCGDSChangeCardFaceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaceType uint32 `protobuf:"varint,6,opt,name=face_type,json=faceType,proto3" json:"face_type,omitempty"`
	CardId   uint32 `protobuf:"varint,3,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
}

func (x *GCGDSChangeCardFaceReq) Reset() {
	*x = GCGDSChangeCardFaceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSChangeCardFaceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSChangeCardFaceReq) ProtoMessage() {}

func (x *GCGDSChangeCardFaceReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSChangeCardFaceReq.ProtoReflect.Descriptor instead.
func (*GCGDSChangeCardFaceReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{105}
}

func (x *GCGDSChangeCardFaceReq) GetFaceType() uint32 {
	if x != nil {
		return x.FaceType
	}
	return 0
}

func (x *GCGDSChangeCardFaceReq) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

type GCGDSChangeCardFaceRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaceType uint32 `protobuf:"varint,8,opt,name=face_type,json=faceType,proto3" json:"face_type,omitempty"`
	CardId   uint32 `protobuf:"varint,4,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	Retcode  int32  `protobuf:"varint,9,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GCGDSChangeCardFaceRsp) Reset() {
	*x = GCGDSChangeCardFaceRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSChangeCardFaceRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSChangeCardFaceRsp) ProtoMessage() {}

func (x *GCGDSChangeCardFaceRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSChangeCardFaceRsp.ProtoReflect.Descriptor instead.
func (*GCGDSChangeCardFaceRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{106}
}

func (x *GCGDSChangeCardFaceRsp) GetFaceType() uint32 {
	if x != nil {
		return x.FaceType
	}
	return 0
}

func (x *GCGDSChangeCardFaceRsp) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *GCGDSChangeCardFaceRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type GCGDSChangeCardBackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckId     uint32 `protobuf:"varint,10,opt,name=deck_id,json=deckId,proto3" json:"deck_id,omitempty"`
	CardBackId uint32 `protobuf:"varint,12,opt,name=card_back_id,json=cardBackId,proto3" json:"card_back_id,omitempty"`
}

func (x *GCGDSChangeCardBackReq) Reset() {
	*x = GCGDSChangeCardBackReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSChangeCardBackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSChangeCardBackReq) ProtoMessage() {}

func (x *GCGDSChangeCardBackReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSChangeCardBackReq.ProtoReflect.Descriptor instead.
func (*GCGDSChangeCardBackReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{107}
}

func (x *GCGDSChangeCardBackReq) GetDeckId() uint32 {
	if x != nil {
		return x.DeckId
	}
	return 0
}

func (x *GCGDSChangeCardBackReq) GetCardBackId() uint32 {
	if x != nil {
		return x.CardBackId
	}
	return 0
}

type GCGDSChangeCardBackRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode    int32  `protobuf:"varint,15,opt,name=retcode,proto3" json:"retcode,omitempty"`
	CardBackId uint32 `protobuf:"varint,6,opt,name=card_back_id,json=cardBackId,proto3" json:"card_back_id,omitempty"`
	DeckId     uint32 `protobuf:"varint,5,opt,name=deck_id,json=deckId,proto3" json:"deck_id,omitempty"`
}

func (x *GCGDSChangeCardBackRsp) Reset() {
	*x = GCGDSChangeCardBackRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSChangeCardBackRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSChangeCardBackRsp) ProtoMessage() {}

func (x *GCGDSChangeCardBackRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSChangeCardBackRsp.ProtoReflect.Descriptor instead.
func (*GCGDSChangeCardBackRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{108}
}

func (x *GCGDSChangeCardBackRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GCGDSChangeCardBackRsp) GetCardBackId() uint32 {
	if x != nil {
		return x.CardBackId
	}
	return 0
}

func (x *GCGDSChangeCardBackRsp) GetDeckId() uint32 {
	if x != nil {
		return x.DeckId
	}
	return 0
}

type GCGDSChangeFieldReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldId uint32 `protobuf:"varint,6,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	DeckId  uint32 `protobuf:"varint,11,opt,name=deck_id,json=deckId,proto3" json:"deck_id,omitempty"`
}

func (x *GCGDSChangeFieldReq) Reset() {
	*x = GCGDSChangeFieldReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSChangeFieldReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSChangeFieldReq) ProtoMessage() {}

func (x *GCGDSChangeFieldReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSChangeFieldReq.ProtoReflect.Descriptor instead.
func (*GCGDSChangeFieldReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{109}
}

func (x *GCGDSChangeFieldReq) GetFieldId() uint32 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (x *GCGDSChangeFieldReq) GetDeckId() uint32 {
	if x != nil {
		return x.DeckId
	}
	return 0
}

type GCGDSChangeFieldRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32  `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	FieldId uint32 `protobuf:"varint,3,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	DeckId  uint32 `protobuf:"varint,2,opt,name=deck_id,json=deckId,proto3" json:"deck_id,omitempty"`
}

func (x *GCGDSChangeFieldRsp) Reset() {
	*x = GCGDSChangeFieldRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSChangeFieldRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSChangeFieldRsp) ProtoMessage() {}

func (x *GCGDSChangeFieldRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSChangeFieldRsp.ProtoReflect.Descriptor instead.
func (*GCGDSChangeFieldRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{110}
}

func (x *GCGDSChangeFieldRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GCGDSChangeFieldRsp) GetFieldId() uint32 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (x *GCGDSChangeFieldRsp) GetDeckId() uint32 {
	if x != nil {
		return x.DeckId
	}
	return 0
}

type GCGDSChangeDeckNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckId uint32 `protobuf:"varint,13,opt,name=deck_id,json=deckId,proto3" json:"deck_id,omitempty"`
	Name   string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GCGDSChangeDeckNameReq) Reset() {
	*x = GCGDSChangeDeckNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSChangeDeckNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSChangeDeckNameReq) ProtoMessage() {}

func (x *GCGDSChangeDeckNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSChangeDeckNameReq.ProtoReflect.Descriptor instead.
func (*GCGDSChangeDeckNameReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{111}
}

func (x *GCGDSChangeDeckNameReq) GetDeckId() uint32 {
	if x != nil {
		return x.DeckId
	}
	return 0
}

func (x *GCGDSChangeDeckNameReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GCGDSChangeDeckNameRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckId  uint32 `protobuf:"varint,13,opt,name=deck_id,json=deckId,proto3" json:"deck_id,omitempty"`
	Retcode int32  `protobuf:"varint,14,opt,name=retcode,proto3" json:"retcode,omitempty"`
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GCGDSChangeDeckNameRsp) Reset() {
	*x = GCGDSChangeDeckNameRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSChangeDeckNameRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSChangeDeckNameRsp) ProtoMessage() {}

func (x *GCGDSChangeDeckNameRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSChangeDeckNameRsp.ProtoReflect.Descriptor instead.
func (*GCGDSChangeDeckNameRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{112}
}

func (x *GCGDSChangeDeckNameRsp) GetDeckId() uint32 {
	if x != nil {
		return x.DeckId
	}
	return 0
}

func (x *GCGDSChangeDeckNameRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GCGDSChangeDeckNameRsp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GCGDSDeckSaveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckId            uint32   `protobuf:"varint,1,opt,name=deck_id,json=deckId,proto3" json:"deck_id,omitempty"`
	CardList          []uint32 `protobuf:"varint,4,rep,packed,name=card_list,json=cardList,proto3" json:"card_list,omitempty"`
	CharacterCardList []uint32 `protobuf:"varint,9,rep,packed,name=character_card_list,json=characterCardList,proto3" json:"character_card_list,omitempty"`
	Name              string   `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GCGDSDeckSaveReq) Reset() {
	*x = GCGDSDeckSaveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSDeckSaveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSDeckSaveReq) ProtoMessage() {}

func (x *GCGDSDeckSaveReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSDeckSaveReq.ProtoReflect.Descriptor instead.
func (*GCGDSDeckSaveReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{113}
}

func (x *GCGDSDeckSaveReq) GetDeckId() uint32 {
	if x != nil {
		return x.DeckId
	}
	return 0
}

func (x *GCGDSDeckSaveReq) GetCardList() []uint32 {
	if x != nil {
		return x.CardList
	}
	return nil
}

func (x *GCGDSDeckSaveReq) GetCharacterCardList() []uint32 {
	if x != nil {
		return x.CharacterCardList
	}
	return nil
}

func (x *GCGDSDeckSaveReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GCGDSDeckSaveRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime uint32 `protobuf:"fixed32,14,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	DeckId     uint32 `protobuf:"varint,11,opt,name=deck_id,json=deckId,proto3" json:"deck_id,omitempty"`
	Retcode    int32  `protobuf:"varint,8,opt,name=retcode,proto3" json:"retcode,omitempty"`
	IsValid    bool   `protobuf:"varint,4,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
}

func (x *GCGDSDeckSaveRsp) Reset() {
	*x = GCGDSDeckSaveRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSDeckSaveRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSDeckSaveRsp) ProtoMessage() {}

func (x *GCGDSDeckSaveRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSDeckSaveRsp.ProtoReflect.Descriptor instead.
func (*GCGDSDeckSaveRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{114}
}

func (x *GCGDSDeckSaveRsp) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GCGDSDeckSaveRsp) GetDeckId() uint32 {
	if x != nil {
		return x.DeckId
	}
	return 0
}

func (x *GCGDSDeckSaveRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GCGDSDeckSaveRsp) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

type GCGDSChangeCurDeckReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckId uint32 `protobuf:"varint,3,opt,name=deck_id,json=deckId,proto3" json:"deck_id,omitempty"`
}

func (x *GCGDSChangeCurDeckReq) Reset() {
	*x = GCGDSChangeCurDeckReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSChangeCurDeckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSChangeCurDeckReq) ProtoMessage() {}

func (x *GCGDSChangeCurDeckReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSChangeCurDeckReq.ProtoReflect.Descriptor instead.
func (*GCGDSChangeCurDeckReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{115}
}

func (x *GCGDSChangeCurDeckReq) GetDeckId() uint32 {
	if x != nil {
		return x.DeckId
	}
	return 0
}

type GCGDSChangeCurDeckRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32  `protobuf:"varint,8,opt,name=retcode,proto3" json:"retcode,omitempty"`
	DeckId  uint32 `protobuf:"varint,14,opt,name=deck_id,json=deckId,proto3" json:"deck_id,omitempty"`
}

func (x *GCGDSChangeCurDeckRsp) Reset() {
	*x = GCGDSChangeCurDeckRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSChangeCurDeckRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSChangeCurDeckRsp) ProtoMessage() {}

func (x *GCGDSChangeCurDeckRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSChangeCurDeckRsp.ProtoReflect.Descriptor instead.
func (*GCGDSChangeCurDeckRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{116}
}

func (x *GCGDSChangeCurDeckRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GCGDSChangeCurDeckRsp) GetDeckId() uint32 {
	if x != nil {
		return x.DeckId
	}
	return 0
}

type GCGDSCurDeckChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckId uint32 `protobuf:"varint,6,opt,name=deck_id,json=deckId,proto3" json:"deck_id,omitempty"`
}

func (x *GCGDSCurDeckChangeNotify) Reset() {
	*x = GCGDSCurDeckChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSCurDeckChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSCurDeckChangeNotify) ProtoMessage() {}

func (x *GCGDSCurDeckChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSCurDeckChangeNotify.ProtoReflect.Descriptor instead.
func (*GCGDSCurDeckChangeNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{117}
}

func (x *GCGDSCurDeckChangeNotify) GetDeckId() uint32 {
	if x != nil {
		return x.DeckId
	}
	return 0
}

type GCGDSDeleteDeckReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckId uint32 `protobuf:"varint,15,opt,name=deck_id,json=deckId,proto3" json:"deck_id,omitempty"`
}

func (x *GCGDSDeleteDeckReq) Reset() {
	*x = GCGDSDeleteDeckReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSDeleteDeckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSDeleteDeckReq) ProtoMessage() {}

func (x *GCGDSDeleteDeckReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSDeleteDeckReq.ProtoReflect.Descriptor instead.
func (*GCGDSDeleteDeckReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{118}
}

func (x *GCGDSDeleteDeckReq) GetDeckId() uint32 {
	if x != nil {
		return x.DeckId
	}
	return 0
}

type GCGDSDeleteDeckRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32  `protobuf:"varint,14,opt,name=retcode,proto3" json:"retcode,omitempty"`
	DeckId  uint32 `protobuf:"varint,7,opt,name=deck_id,json=deckId,proto3" json:"deck_id,omitempty"`
}

func (x *GCGDSDeleteDeckRsp) Reset() {
	*x = GCGDSDeleteDeckRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSDeleteDeckRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSDeleteDeckRsp) ProtoMessage() {}

func (x *GCGDSDeleteDeckRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSDeleteDeckRsp.ProtoReflect.Descriptor instead.
func (*GCGDSDeleteDeckRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{119}
}

func (x *GCGDSDeleteDeckRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GCGDSDeleteDeckRsp) GetDeckId() uint32 {
	if x != nil {
		return x.DeckId
	}
	return 0
}

type GCGDSDeckUnlockNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckId uint32 `protobuf:"varint,15,opt,name=deck_id,json=deckId,proto3" json:"deck_id,omitempty"`
}

func (x *GCGDSDeckUnlockNotify) Reset() {
	*x = GCGDSDeckUnlockNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSDeckUnlockNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSDeckUnlockNotify) ProtoMessage() {}

func (x *GCGDSDeckUnlockNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSDeckUnlockNotify.ProtoReflect.Descriptor instead.
func (*GCGDSDeckUnlockNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{120}
}

func (x *GCGDSDeckUnlockNotify) GetDeckId() uint32 {
	if x != nil {
		return x.DeckId
	}
	return 0
}

type GCGDSCardProficiencyNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proficiency uint32 `protobuf:"varint,2,opt,name=proficiency,proto3" json:"proficiency,omitempty"`
	CardId      uint32 `protobuf:"varint,12,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
}

func (x *GCGDSCardProficiencyNotify) Reset() {
	*x = GCGDSCardProficiencyNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSCardProficiencyNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSCardProficiencyNotify) ProtoMessage() {}

func (x *GCGDSCardProficiencyNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSCardProficiencyNotify.ProtoReflect.Descriptor instead.
func (*GCGDSCardProficiencyNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{121}
}

func (x *GCGDSCardProficiencyNotify) GetProficiency() uint32 {
	if x != nil {
		return x.Proficiency
	}
	return 0
}

func (x *GCGDSCardProficiencyNotify) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

type GCGDSDeckUpdateNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckId  uint32 `protobuf:"varint,6,opt,name=deck_id,json=deckId,proto3" json:"deck_id,omitempty"`
	IsValid bool   `protobuf:"varint,12,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
}

func (x *GCGDSDeckUpdateNotify) Reset() {
	*x = GCGDSDeckUpdateNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSDeckUpdateNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSDeckUpdateNotify) ProtoMessage() {}

func (x *GCGDSDeckUpdateNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSDeckUpdateNotify.ProtoReflect.Descriptor instead.
func (*GCGDSDeckUpdateNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{122}
}

func (x *GCGDSDeckUpdateNotify) GetDeckId() uint32 {
	if x != nil {
		return x.DeckId
	}
	return 0
}

func (x *GCGDSDeckUpdateNotify) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

type GCGDSCardFaceUpdateNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId   uint32 `protobuf:"varint,14,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	FaceType uint32 `protobuf:"varint,15,opt,name=face_type,json=faceType,proto3" json:"face_type,omitempty"`
}

func (x *GCGDSCardFaceUpdateNotify) Reset() {
	*x = GCGDSCardFaceUpdateNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSCardFaceUpdateNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSCardFaceUpdateNotify) ProtoMessage() {}

func (x *GCGDSCardFaceUpdateNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSCardFaceUpdateNotify.ProtoReflect.Descriptor instead.
func (*GCGDSCardFaceUpdateNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{123}
}

func (x *GCGDSCardFaceUpdateNotify) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *GCGDSCardFaceUpdateNotify) GetFaceType() uint32 {
	if x != nil {
		return x.FaceType
	}
	return 0
}

type GCGDSTakeCardProficiencyRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardIndex uint32 `protobuf:"varint,7,opt,name=reward_index,json=rewardIndex,proto3" json:"reward_index,omitempty"`
	CardId      uint32 `protobuf:"varint,14,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
}

func (x *GCGDSTakeCardProficiencyRewardReq) Reset() {
	*x = GCGDSTakeCardProficiencyRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSTakeCardProficiencyRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSTakeCardProficiencyRewardReq) ProtoMessage() {}

func (x *GCGDSTakeCardProficiencyRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSTakeCardProficiencyRewardReq.ProtoReflect.Descriptor instead.
func (*GCGDSTakeCardProficiencyRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{124}
}

func (x *GCGDSTakeCardProficiencyRewardReq) GetRewardIndex() uint32 {
	if x != nil {
		return x.RewardIndex
	}
	return 0
}

func (x *GCGDSTakeCardProficiencyRewardReq) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

type GCGDSTakeCardProficiencyRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode     int32  `protobuf:"varint,8,opt,name=retcode,proto3" json:"retcode,omitempty"`
	RewardIndex uint32 `protobuf:"varint,10,opt,name=reward_index,json=rewardIndex,proto3" json:"reward_index,omitempty"`
	CardId      uint32 `protobuf:"varint,7,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
}

func (x *GCGDSTakeCardProficiencyRewardRsp) Reset() {
	*x = GCGDSTakeCardProficiencyRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSTakeCardProficiencyRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSTakeCardProficiencyRewardRsp) ProtoMessage() {}

func (x *GCGDSTakeCardProficiencyRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSTakeCardProficiencyRewardRsp.ProtoReflect.Descriptor instead.
func (*GCGDSTakeCardProficiencyRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{125}
}

func (x *GCGDSTakeCardProficiencyRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GCGDSTakeCardProficiencyRewardRsp) GetRewardIndex() uint32 {
	if x != nil {
		return x.RewardIndex
	}
	return 0
}

func (x *GCGDSTakeCardProficiencyRewardRsp) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

type GCGDSBanCardNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardList []uint32 `protobuf:"varint,4,rep,packed,name=card_list,json=cardList,proto3" json:"card_list,omitempty"`
}

func (x *GCGDSBanCardNotify) Reset() {
	*x = GCGDSBanCardNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDSBanCardNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDSBanCardNotify) ProtoMessage() {}

func (x *GCGDSBanCardNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDSBanCardNotify.ProtoReflect.Descriptor instead.
func (*GCGDSBanCardNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{126}
}

func (x *GCGDSBanCardNotify) GetCardList() []uint32 {
	if x != nil {
		return x.CardList
	}
	return nil
}

type GCGTCTavernInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLastDuelWin bool   `protobuf:"varint,14,opt,name=is_last_duel_win,json=isLastDuelWin,proto3" json:"is_last_duel_win,omitempty"`
	LevelId       uint32 `protobuf:"varint,11,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsOwnerInDuel bool   `protobuf:"varint,5,opt,name=is_owner_in_duel,json=isOwnerInDuel,proto3" json:"is_owner_in_duel,omitempty"`
	PointId       uint32 `protobuf:"varint,3,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
	AvatarId      uint32 `protobuf:"varint,12,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	CharacterId   uint32 `protobuf:"varint,7,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
	ElementType   uint32 `protobuf:"varint,10,opt,name=element_type,json=elementType,proto3" json:"element_type,omitempty"`
}

func (x *GCGTCTavernInfoNotify) Reset() {
	*x = GCGTCTavernInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGTCTavernInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGTCTavernInfoNotify) ProtoMessage() {}

func (x *GCGTCTavernInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGTCTavernInfoNotify.ProtoReflect.Descriptor instead.
func (*GCGTCTavernInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{127}
}

func (x *GCGTCTavernInfoNotify) GetIsLastDuelWin() bool {
	if x != nil {
		return x.IsLastDuelWin
	}
	return false
}

func (x *GCGTCTavernInfoNotify) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *GCGTCTavernInfoNotify) GetIsOwnerInDuel() bool {
	if x != nil {
		return x.IsOwnerInDuel
	}
	return false
}

func (x *GCGTCTavernInfoNotify) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

func (x *GCGTCTavernInfoNotify) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *GCGTCTavernInfoNotify) GetCharacterId() uint32 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *GCGTCTavernInfoNotify) GetElementType() uint32 {
	if x != nil {
		return x.ElementType
	}
	return 0
}

type GCGTCInviteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId     uint32 `protobuf:"varint,3,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	CharacterId uint32 `protobuf:"varint,6,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
}

func (x *GCGTCInviteReq) Reset() {
	*x = GCGTCInviteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGTCInviteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGTCInviteReq) ProtoMessage() {}

func (x *GCGTCInviteReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGTCInviteReq.ProtoReflect.Descriptor instead.
func (*GCGTCInviteReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{128}
}

func (x *GCGTCInviteReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *GCGTCInviteReq) GetCharacterId() uint32 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

type GCGTCInviteRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId uint32 `protobuf:"varint,12,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
	Retcode     int32  `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GCGTCInviteRsp) Reset() {
	*x = GCGTCInviteRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGTCInviteRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGTCInviteRsp) ProtoMessage() {}

func (x *GCGTCInviteRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGTCInviteRsp.ProtoReflect.Descriptor instead.
func (*GCGTCInviteRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{129}
}

func (x *GCGTCInviteRsp) GetCharacterId() uint32 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *GCGTCInviteRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type GCGTCTavernChallengeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnlockLevelIdList []uint32 `protobuf:"varint,1,rep,packed,name=unlock_level_id_list,json=unlockLevelIdList,proto3" json:"unlock_level_id_list,omitempty"`
	CharacterId       uint32   `protobuf:"varint,8,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
}

func (x *GCGTCTavernChallengeData) Reset() {
	*x = GCGTCTavernChallengeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGTCTavernChallengeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGTCTavernChallengeData) ProtoMessage() {}

func (x *GCGTCTavernChallengeData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGTCTavernChallengeData.ProtoReflect.Descriptor instead.
func (*GCGTCTavernChallengeData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{130}
}

func (x *GCGTCTavernChallengeData) GetUnlockLevelIdList() []uint32 {
	if x != nil {
		return x.UnlockLevelIdList
	}
	return nil
}

func (x *GCGTCTavernChallengeData) GetCharacterId() uint32 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

type GCGTCTavernChallengeDataNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TavernChallengeList []*GCGTCTavernChallengeData `protobuf:"bytes,13,rep,name=tavern_challenge_list,json=tavernChallengeList,proto3" json:"tavern_challenge_list,omitempty"`
}

func (x *GCGTCTavernChallengeDataNotify) Reset() {
	*x = GCGTCTavernChallengeDataNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGTCTavernChallengeDataNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGTCTavernChallengeDataNotify) ProtoMessage() {}

func (x *GCGTCTavernChallengeDataNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGTCTavernChallengeDataNotify.ProtoReflect.Descriptor instead.
func (*GCGTCTavernChallengeDataNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{131}
}

func (x *GCGTCTavernChallengeDataNotify) GetTavernChallengeList() []*GCGTCTavernChallengeData {
	if x != nil {
		return x.TavernChallengeList
	}
	return nil
}

type GCGTCTavernChallengeUpdateNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TavernChallenge *GCGTCTavernChallengeData `protobuf:"bytes,5,opt,name=tavern_challenge,json=tavernChallenge,proto3" json:"tavern_challenge,omitempty"`
}

func (x *GCGTCTavernChallengeUpdateNotify) Reset() {
	*x = GCGTCTavernChallengeUpdateNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGTCTavernChallengeUpdateNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGTCTavernChallengeUpdateNotify) ProtoMessage() {}

func (x *GCGTCTavernChallengeUpdateNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGTCTavernChallengeUpdateNotify.ProtoReflect.Descriptor instead.
func (*GCGTCTavernChallengeUpdateNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{132}
}

func (x *GCGTCTavernChallengeUpdateNotify) GetTavernChallenge() *GCGTCTavernChallengeData {
	if x != nil {
		return x.TavernChallenge
	}
	return nil
}

type GCGGrowthLevelNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exp   uint32 `protobuf:"varint,7,opt,name=exp,proto3" json:"exp,omitempty"`
	Level uint32 `protobuf:"varint,11,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *GCGGrowthLevelNotify) Reset() {
	*x = GCGGrowthLevelNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGGrowthLevelNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGGrowthLevelNotify) ProtoMessage() {}

func (x *GCGGrowthLevelNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGGrowthLevelNotify.ProtoReflect.Descriptor instead.
func (*GCGGrowthLevelNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{133}
}

func (x *GCGGrowthLevelNotify) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *GCGGrowthLevelNotify) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type GCGGrowthLevelRewardNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelRewardTakenList []uint32 `protobuf:"varint,8,rep,packed,name=level_reward_taken_list,json=levelRewardTakenList,proto3" json:"level_reward_taken_list,omitempty"`
}

func (x *GCGGrowthLevelRewardNotify) Reset() {
	*x = GCGGrowthLevelRewardNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGGrowthLevelRewardNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGGrowthLevelRewardNotify) ProtoMessage() {}

func (x *GCGGrowthLevelRewardNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGGrowthLevelRewardNotify.ProtoReflect.Descriptor instead.
func (*GCGGrowthLevelRewardNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{134}
}

func (x *GCGGrowthLevelRewardNotify) GetLevelRewardTakenList() []uint32 {
	if x != nil {
		return x.LevelRewardTakenList
	}
	return nil
}

type GCGGrowthLevelTakeRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level uint32 `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *GCGGrowthLevelTakeRewardReq) Reset() {
	*x = GCGGrowthLevelTakeRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGGrowthLevelTakeRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGGrowthLevelTakeRewardReq) ProtoMessage() {}

func (x *GCGGrowthLevelTakeRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGGrowthLevelTakeRewardReq.ProtoReflect.Descriptor instead.
func (*GCGGrowthLevelTakeRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{135}
}

func (x *GCGGrowthLevelTakeRewardReq) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type GCGGrowthLevelTakeRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level   uint32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Retcode int32  `protobuf:"varint,13,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GCGGrowthLevelTakeRewardRsp) Reset() {
	*x = GCGGrowthLevelTakeRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGGrowthLevelTakeRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGGrowthLevelTakeRewardRsp) ProtoMessage() {}

func (x *GCGGrowthLevelTakeRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGGrowthLevelTakeRewardRsp.ProtoReflect.Descriptor instead.
func (*GCGGrowthLevelTakeRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{136}
}

func (x *GCGGrowthLevelTakeRewardRsp) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GCGGrowthLevelTakeRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type GCGInviteGuestBattleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid uint32 `protobuf:"varint,11,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GCGInviteGuestBattleReq) Reset() {
	*x = GCGInviteGuestBattleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGInviteGuestBattleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGInviteGuestBattleReq) ProtoMessage() {}

func (x *GCGInviteGuestBattleReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGInviteGuestBattleReq.ProtoReflect.Descriptor instead.
func (*GCGInviteGuestBattleReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{137}
}

func (x *GCGInviteGuestBattleReq) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type GCGInviteGuestBattleRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode        int32  `protobuf:"varint,3,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ConfirmEndTime uint32 `protobuf:"varint,2,opt,name=confirm_end_time,json=confirmEndTime,proto3" json:"confirm_end_time,omitempty"`
	PunishEndTime  uint32 `protobuf:"varint,9,opt,name=punish_end_time,json=punishEndTime,proto3" json:"punish_end_time,omitempty"`
	Uid            uint32 `protobuf:"varint,11,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GCGInviteGuestBattleRsp) Reset() {
	*x = GCGInviteGuestBattleRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGInviteGuestBattleRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGInviteGuestBattleRsp) ProtoMessage() {}

func (x *GCGInviteGuestBattleRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGInviteGuestBattleRsp.ProtoReflect.Descriptor instead.
func (*GCGInviteGuestBattleRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{138}
}

func (x *GCGInviteGuestBattleRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GCGInviteGuestBattleRsp) GetConfirmEndTime() uint32 {
	if x != nil {
		return x.ConfirmEndTime
	}
	return 0
}

func (x *GCGInviteGuestBattleRsp) GetPunishEndTime() uint32 {
	if x != nil {
		return x.PunishEndTime
	}
	return 0
}

func (x *GCGInviteGuestBattleRsp) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type GCGInviteBattleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfirmEndTime uint32 `protobuf:"varint,10,opt,name=confirm_end_time,json=confirmEndTime,proto3" json:"confirm_end_time,omitempty"`
}

func (x *GCGInviteBattleNotify) Reset() {
	*x = GCGInviteBattleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGInviteBattleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGInviteBattleNotify) ProtoMessage() {}

func (x *GCGInviteBattleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGInviteBattleNotify.ProtoReflect.Descriptor instead.
func (*GCGInviteBattleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{139}
}

func (x *GCGInviteBattleNotify) GetConfirmEndTime() uint32 {
	if x != nil {
		return x.ConfirmEndTime
	}
	return 0
}

type GCGApplyInviteBattleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAgree bool `protobuf:"varint,9,opt,name=is_agree,json=isAgree,proto3" json:"is_agree,omitempty"`
}

func (x *GCGApplyInviteBattleReq) Reset() {
	*x = GCGApplyInviteBattleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGApplyInviteBattleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGApplyInviteBattleReq) ProtoMessage() {}

func (x *GCGApplyInviteBattleReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGApplyInviteBattleReq.ProtoReflect.Descriptor instead.
func (*GCGApplyInviteBattleReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{140}
}

func (x *GCGApplyInviteBattleReq) GetIsAgree() bool {
	if x != nil {
		return x.IsAgree
	}
	return false
}

type GCGApplyInviteBattleRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PunishEndTime uint32 `protobuf:"varint,7,opt,name=punish_end_time,json=punishEndTime,proto3" json:"punish_end_time,omitempty"`
	Retcode       int32  `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GCGApplyInviteBattleRsp) Reset() {
	*x = GCGApplyInviteBattleRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGApplyInviteBattleRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGApplyInviteBattleRsp) ProtoMessage() {}

func (x *GCGApplyInviteBattleRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGApplyInviteBattleRsp.ProtoReflect.Descriptor instead.
func (*GCGApplyInviteBattleRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{141}
}

func (x *GCGApplyInviteBattleRsp) GetPunishEndTime() uint32 {
	if x != nil {
		return x.PunishEndTime
	}
	return 0
}

func (x *GCGApplyInviteBattleRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type GCGApplyInviteBattleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAgree bool  `protobuf:"varint,14,opt,name=is_agree,json=isAgree,proto3" json:"is_agree,omitempty"`
	Retcode int32 `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GCGApplyInviteBattleNotify) Reset() {
	*x = GCGApplyInviteBattleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGApplyInviteBattleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGApplyInviteBattleNotify) ProtoMessage() {}

func (x *GCGApplyInviteBattleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGApplyInviteBattleNotify.ProtoReflect.Descriptor instead.
func (*GCGApplyInviteBattleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{142}
}

func (x *GCGApplyInviteBattleNotify) GetIsAgree() bool {
	if x != nil {
		return x.IsAgree
	}
	return false
}

func (x *GCGApplyInviteBattleNotify) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type GCGWorldPlayerGCGStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GCGWorldPlayerGCGStateReq) Reset() {
	*x = GCGWorldPlayerGCGStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGWorldPlayerGCGStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGWorldPlayerGCGStateReq) ProtoMessage() {}

func (x *GCGWorldPlayerGCGStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGWorldPlayerGCGStateReq.ProtoReflect.Descriptor instead.
func (*GCGWorldPlayerGCGStateReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{143}
}

type GCGPlayerGCGState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsReasouceComplete bool   `protobuf:"varint,7,opt,name=is_reasouce_complete,json=isReasouceComplete,proto3" json:"is_reasouce_complete,omitempty"`
	IsGcgStateOpen     bool   `protobuf:"varint,5,opt,name=is_gcg_state_open,json=isGcgStateOpen,proto3" json:"is_gcg_state_open,omitempty"`
	Uid                uint32 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GCGPlayerGCGState) Reset() {
	*x = GCGPlayerGCGState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGPlayerGCGState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGPlayerGCGState) ProtoMessage() {}

func (x *GCGPlayerGCGState) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGPlayerGCGState.ProtoReflect.Descriptor instead.
func (*GCGPlayerGCGState) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{144}
}

func (x *GCGPlayerGCGState) GetIsReasouceComplete() bool {
	if x != nil {
		return x.IsReasouceComplete
	}
	return false
}

func (x *GCGPlayerGCGState) GetIsGcgStateOpen() bool {
	if x != nil {
		return x.IsGcgStateOpen
	}
	return false
}

func (x *GCGPlayerGCGState) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type GCGWorldPlayerGCGStateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerState []*GCGPlayerGCGState `protobuf:"bytes,12,rep,name=player_state,json=playerState,proto3" json:"player_state,omitempty"`
	Retcode     int32                `protobuf:"varint,10,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GCGWorldPlayerGCGStateRsp) Reset() {
	*x = GCGWorldPlayerGCGStateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGWorldPlayerGCGStateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGWorldPlayerGCGStateRsp) ProtoMessage() {}

func (x *GCGWorldPlayerGCGStateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGWorldPlayerGCGStateRsp.ProtoReflect.Descriptor instead.
func (*GCGWorldPlayerGCGStateRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{145}
}

func (x *GCGWorldPlayerGCGStateRsp) GetPlayerState() []*GCGPlayerGCGState {
	if x != nil {
		return x.PlayerState
	}
	return nil
}

func (x *GCGWorldPlayerGCGStateRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type GCGSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsWin                     bool                `protobuf:"varint,13,opt,name=is_win,json=isWin,proto3" json:"is_win,omitempty"`
	GameId                    uint32              `protobuf:"varint,7,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Reason                    GCGEndReason        `protobuf:"varint,3,opt,name=reason,proto3,enum=proto.GCGEndReason" json:"reason,omitempty"`
	BusinessType              GCGGameBusinessType `protobuf:"varint,2,opt,name=business_type,json=businessType,proto3,enum=proto.GCGGameBusinessType" json:"business_type,omitempty"`
	FinishedChallengeIdList   []uint32            `protobuf:"varint,6,rep,packed,name=finished_challenge_id_list,json=finishedChallengeIdList,proto3" json:"finished_challenge_id_list,omitempty"`
	WinControllerId           uint32              `protobuf:"varint,15,opt,name=win_controller_id,json=winControllerId,proto3" json:"win_controller_id,omitempty"`
	ForbidFinishChallengeList []uint32            `protobuf:"varint,12,rep,packed,name=forbid_finish_challenge_list,json=forbidFinishChallengeList,proto3" json:"forbid_finish_challenge_list,omitempty"`
	RewardItemList            []*ItemParam        `protobuf:"bytes,9,rep,name=reward_item_list,json=rewardItemList,proto3" json:"reward_item_list,omitempty"`
}

func (x *GCGSettleNotify) Reset() {
	*x = GCGSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGSettleNotify) ProtoMessage() {}

func (x *GCGSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGSettleNotify.ProtoReflect.Descriptor instead.
func (*GCGSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{146}
}

func (x *GCGSettleNotify) GetIsWin() bool {
	if x != nil {
		return x.IsWin
	}
	return false
}

func (x *GCGSettleNotify) GetGameId() uint32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *GCGSettleNotify) GetReason() GCGEndReason {
	if x != nil {
		return x.Reason
	}
	return GCGEndReason_GCG_END_REASON_DEFAULT
}

func (x *GCGSettleNotify) GetBusinessType() GCGGameBusinessType {
	if x != nil {
		return x.BusinessType
	}
	return GCGGameBusinessType_GCG_GAME_NONE
}

func (x *GCGSettleNotify) GetFinishedChallengeIdList() []uint32 {
	if x != nil {
		return x.FinishedChallengeIdList
	}
	return nil
}

func (x *GCGSettleNotify) GetWinControllerId() uint32 {
	if x != nil {
		return x.WinControllerId
	}
	return 0
}

func (x *GCGSettleNotify) GetForbidFinishChallengeList() []uint32 {
	if x != nil {
		return x.ForbidFinishChallengeList
	}
	return nil
}

func (x *GCGSettleNotify) GetRewardItemList() []*ItemParam {
	if x != nil {
		return x.RewardItemList
	}
	return nil
}

type GCGResourceStateNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsComplete bool `protobuf:"varint,5,opt,name=is_complete,json=isComplete,proto3" json:"is_complete,omitempty"`
}

func (x *GCGResourceStateNotify) Reset() {
	*x = GCGResourceStateNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGResourceStateNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGResourceStateNotify) ProtoMessage() {}

func (x *GCGResourceStateNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGResourceStateNotify.ProtoReflect.Descriptor instead.
func (*GCGResourceStateNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{147}
}

func (x *GCGResourceStateNotify) GetIsComplete() bool {
	if x != nil {
		return x.IsComplete
	}
	return false
}

type GCGClientSettleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GCGClientSettleReq) Reset() {
	*x = GCGClientSettleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGClientSettleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGClientSettleReq) ProtoMessage() {}

func (x *GCGClientSettleReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGClientSettleReq.ProtoReflect.Descriptor instead.
func (*GCGClientSettleReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{148}
}

type GCGClientSettleRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloseTime uint32 `protobuf:"varint,4,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
	Retcode   int32  `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GCGClientSettleRsp) Reset() {
	*x = GCGClientSettleRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGClientSettleRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGClientSettleRsp) ProtoMessage() {}

func (x *GCGClientSettleRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGClientSettleRsp.ProtoReflect.Descriptor instead.
func (*GCGClientSettleRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{149}
}

func (x *GCGClientSettleRsp) GetCloseTime() uint32 {
	if x != nil {
		return x.CloseTime
	}
	return 0
}

func (x *GCGClientSettleRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type GCGSettleOptionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option GCGSettleOption `protobuf:"varint,5,opt,name=option,proto3,enum=proto.GCGSettleOption" json:"option,omitempty"`
}

func (x *GCGSettleOptionReq) Reset() {
	*x = GCGSettleOptionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGSettleOptionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGSettleOptionReq) ProtoMessage() {}

func (x *GCGSettleOptionReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGSettleOptionReq.ProtoReflect.Descriptor instead.
func (*GCGSettleOptionReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{150}
}

func (x *GCGSettleOptionReq) GetOption() GCGSettleOption {
	if x != nil {
		return x.Option
	}
	return GCGSettleOption_GCG_SETTLE_OPT_NONE
}

type GCGSettleOptionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option  GCGSettleOption `protobuf:"varint,13,opt,name=option,proto3,enum=proto.GCGSettleOption" json:"option,omitempty"`
	Retcode int32           `protobuf:"varint,14,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GCGSettleOptionRsp) Reset() {
	*x = GCGSettleOptionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGSettleOptionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGSettleOptionRsp) ProtoMessage() {}

func (x *GCGSettleOptionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGSettleOptionRsp.ProtoReflect.Descriptor instead.
func (*GCGSettleOptionRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{151}
}

func (x *GCGSettleOptionRsp) GetOption() GCGSettleOption {
	if x != nil {
		return x.Option
	}
	return GCGSettleOption_GCG_SETTLE_OPT_NONE
}

func (x *GCGSettleOptionRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type GCGBasicDataNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level                uint32   `protobuf:"varint,9,opt,name=level,proto3" json:"level,omitempty"`
	Exp                  uint32   `protobuf:"varint,4,opt,name=exp,proto3" json:"exp,omitempty"`
	LevelRewardTakenList []uint32 `protobuf:"varint,12,rep,packed,name=level_reward_taken_list,json=levelRewardTakenList,proto3" json:"level_reward_taken_list,omitempty"`
}

func (x *GCGBasicDataNotify) Reset() {
	*x = GCGBasicDataNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGBasicDataNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGBasicDataNotify) ProtoMessage() {}

func (x *GCGBasicDataNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGBasicDataNotify.ProtoReflect.Descriptor instead.
func (*GCGBasicDataNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{152}
}

func (x *GCGBasicDataNotify) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GCGBasicDataNotify) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *GCGBasicDataNotify) GetLevelRewardTakenList() []uint32 {
	if x != nil {
		return x.LevelRewardTakenList
	}
	return nil
}

type GCGTavernNpcInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint32 `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	LevelId      uint32 `protobuf:"varint,10,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	ScenePointId uint32 `protobuf:"varint,3,opt,name=scene_point_id,json=scenePointId,proto3" json:"scene_point_id,omitempty"`
}

func (x *GCGTavernNpcInfo) Reset() {
	*x = GCGTavernNpcInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGTavernNpcInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGTavernNpcInfo) ProtoMessage() {}

func (x *GCGTavernNpcInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGTavernNpcInfo.ProtoReflect.Descriptor instead.
func (*GCGTavernNpcInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{153}
}

func (x *GCGTavernNpcInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GCGTavernNpcInfo) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *GCGTavernNpcInfo) GetScenePointId() uint32 {
	if x != nil {
		return x.ScenePointId
	}
	return 0
}

type GCGTavernNpcInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WeekNpcList  []*GCGTavernNpcInfo `protobuf:"bytes,1,rep,name=week_npc_list,json=weekNpcList,proto3" json:"week_npc_list,omitempty"`
	CharacterNpc *GCGTavernNpcInfo   `protobuf:"bytes,5,opt,name=character_npc,json=characterNpc,proto3" json:"character_npc,omitempty"`
	ConstNpcList []*GCGTavernNpcInfo `protobuf:"bytes,15,rep,name=const_npc_list,json=constNpcList,proto3" json:"const_npc_list,omitempty"`
}

func (x *GCGTavernNpcInfoNotify) Reset() {
	*x = GCGTavernNpcInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGTavernNpcInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGTavernNpcInfoNotify) ProtoMessage() {}

func (x *GCGTavernNpcInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGTavernNpcInfoNotify.ProtoReflect.Descriptor instead.
func (*GCGTavernNpcInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{154}
}

func (x *GCGTavernNpcInfoNotify) GetWeekNpcList() []*GCGTavernNpcInfo {
	if x != nil {
		return x.WeekNpcList
	}
	return nil
}

func (x *GCGTavernNpcInfoNotify) GetCharacterNpc() *GCGTavernNpcInfo {
	if x != nil {
		return x.CharacterNpc
	}
	return nil
}

func (x *GCGTavernNpcInfoNotify) GetConstNpcList() []*GCGTavernNpcInfo {
	if x != nil {
		return x.ConstNpcList
	}
	return nil
}

type GCGStartChallengeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelType GCGLevelType `protobuf:"varint,5,opt,name=level_type,json=levelType,proto3,enum=proto.GCGLevelType" json:"level_type,omitempty"`
	ConfigId  uint32       `protobuf:"varint,13,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	LevelId   uint32       `protobuf:"varint,12,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *GCGStartChallengeReq) Reset() {
	*x = GCGStartChallengeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGStartChallengeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGStartChallengeReq) ProtoMessage() {}

func (x *GCGStartChallengeReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGStartChallengeReq.ProtoReflect.Descriptor instead.
func (*GCGStartChallengeReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{155}
}

func (x *GCGStartChallengeReq) GetLevelType() GCGLevelType {
	if x != nil {
		return x.LevelType
	}
	return GCGLevelType_GCG_LEVEL_NONE
}

func (x *GCGStartChallengeReq) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *GCGStartChallengeReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type GCGStartChallengeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelType GCGLevelType `protobuf:"varint,12,opt,name=level_type,json=levelType,proto3,enum=proto.GCGLevelType" json:"level_type,omitempty"`
	Retcode   int32        `protobuf:"varint,15,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ConfigId  uint32       `protobuf:"varint,6,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	LevelId   uint32       `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *GCGStartChallengeRsp) Reset() {
	*x = GCGStartChallengeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGStartChallengeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGStartChallengeRsp) ProtoMessage() {}

func (x *GCGStartChallengeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGStartChallengeRsp.ProtoReflect.Descriptor instead.
func (*GCGStartChallengeRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{156}
}

func (x *GCGStartChallengeRsp) GetLevelType() GCGLevelType {
	if x != nil {
		return x.LevelType
	}
	return GCGLevelType_GCG_LEVEL_NONE
}

func (x *GCGStartChallengeRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GCGStartChallengeRsp) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *GCGStartChallengeRsp) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type GCGWeekChallengeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NpcId      uint32 `protobuf:"varint,4,opt,name=npc_id,json=npcId,proto3" json:"npc_id,omitempty"`
	IsFinished bool   `protobuf:"varint,7,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	UnlockTime uint32 `protobuf:"varint,1,opt,name=unlock_time,json=unlockTime,proto3" json:"unlock_time,omitempty"`
}

func (x *GCGWeekChallengeInfo) Reset() {
	*x = GCGWeekChallengeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGWeekChallengeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGWeekChallengeInfo) ProtoMessage() {}

func (x *GCGWeekChallengeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGWeekChallengeInfo.ProtoReflect.Descriptor instead.
func (*GCGWeekChallengeInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{157}
}

func (x *GCGWeekChallengeInfo) GetNpcId() uint32 {
	if x != nil {
		return x.NpcId
	}
	return 0
}

func (x *GCGWeekChallengeInfo) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *GCGWeekChallengeInfo) GetUnlockTime() uint32 {
	if x != nil {
		return x.UnlockTime
	}
	return 0
}

type GCGWeekChallengeInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeInfoList []*GCGWeekChallengeInfo `protobuf:"bytes,15,rep,name=challenge_info_list,json=challengeInfoList,proto3" json:"challenge_info_list,omitempty"`
	NextRefreshTime   uint32                  `protobuf:"varint,7,opt,name=next_refresh_time,json=nextRefreshTime,proto3" json:"next_refresh_time,omitempty"`
	IsNotifyNpcChange bool                    `protobuf:"varint,9,opt,name=is_notify_npc_change,json=isNotifyNpcChange,proto3" json:"is_notify_npc_change,omitempty"`
}

func (x *GCGWeekChallengeInfoNotify) Reset() {
	*x = GCGWeekChallengeInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGWeekChallengeInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGWeekChallengeInfoNotify) ProtoMessage() {}

func (x *GCGWeekChallengeInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGWeekChallengeInfoNotify.ProtoReflect.Descriptor instead.
func (*GCGWeekChallengeInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{158}
}

func (x *GCGWeekChallengeInfoNotify) GetChallengeInfoList() []*GCGWeekChallengeInfo {
	if x != nil {
		return x.ChallengeInfoList
	}
	return nil
}

func (x *GCGWeekChallengeInfoNotify) GetNextRefreshTime() uint32 {
	if x != nil {
		return x.NextRefreshTime
	}
	return 0
}

func (x *GCGWeekChallengeInfoNotify) GetIsNotifyNpcChange() bool {
	if x != nil {
		return x.IsNotifyNpcChange
	}
	return false
}

type GCGStartChallengeByCheckRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId   uint32       `protobuf:"varint,9,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	ConfigId  uint32       `protobuf:"varint,13,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	LevelType GCGLevelType `protobuf:"varint,5,opt,name=level_type,json=levelType,proto3,enum=proto.GCGLevelType" json:"level_type,omitempty"`
}

func (x *GCGStartChallengeByCheckRewardReq) Reset() {
	*x = GCGStartChallengeByCheckRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGStartChallengeByCheckRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGStartChallengeByCheckRewardReq) ProtoMessage() {}

func (x *GCGStartChallengeByCheckRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGStartChallengeByCheckRewardReq.ProtoReflect.Descriptor instead.
func (*GCGStartChallengeByCheckRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{159}
}

func (x *GCGStartChallengeByCheckRewardReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *GCGStartChallengeByCheckRewardReq) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *GCGStartChallengeByCheckRewardReq) GetLevelType() GCGLevelType {
	if x != nil {
		return x.LevelType
	}
	return GCGLevelType_GCG_LEVEL_NONE
}

type GCGStartChallengeByCheckRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelType            GCGLevelType `protobuf:"varint,11,opt,name=level_type,json=levelType,proto3,enum=proto.GCGLevelType" json:"level_type,omitempty"`
	LevelId              uint32       `protobuf:"varint,2,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	Retcode              int32        `protobuf:"varint,4,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ExceededItemList     []uint32     `protobuf:"varint,1,rep,packed,name=exceeded_item_list,json=exceededItemList,proto3" json:"exceeded_item_list,omitempty"`
	ConfigId             uint32       `protobuf:"varint,10,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	ExceededItemTypeList []uint32     `protobuf:"varint,14,rep,packed,name=exceeded_item_type_list,json=exceededItemTypeList,proto3" json:"exceeded_item_type_list,omitempty"`
}

func (x *GCGStartChallengeByCheckRewardRsp) Reset() {
	*x = GCGStartChallengeByCheckRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGStartChallengeByCheckRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGStartChallengeByCheckRewardRsp) ProtoMessage() {}

func (x *GCGStartChallengeByCheckRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGStartChallengeByCheckRewardRsp.ProtoReflect.Descriptor instead.
func (*GCGStartChallengeByCheckRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{160}
}

func (x *GCGStartChallengeByCheckRewardRsp) GetLevelType() GCGLevelType {
	if x != nil {
		return x.LevelType
	}
	return GCGLevelType_GCG_LEVEL_NONE
}

func (x *GCGStartChallengeByCheckRewardRsp) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *GCGStartChallengeByCheckRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GCGStartChallengeByCheckRewardRsp) GetExceededItemList() []uint32 {
	if x != nil {
		return x.ExceededItemList
	}
	return nil
}

func (x *GCGStartChallengeByCheckRewardRsp) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *GCGStartChallengeByCheckRewardRsp) GetExceededItemTypeList() []uint32 {
	if x != nil {
		return x.ExceededItemTypeList
	}
	return nil
}

type GCGLevelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinishedChallengeIdList []uint32 `protobuf:"varint,10,rep,packed,name=finished_challenge_id_list,json=finishedChallengeIdList,proto3" json:"finished_challenge_id_list,omitempty"`
	LevelId                 uint32   `protobuf:"varint,9,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *GCGLevelData) Reset() {
	*x = GCGLevelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGLevelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGLevelData) ProtoMessage() {}

func (x *GCGLevelData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGLevelData.ProtoReflect.Descriptor instead.
func (*GCGLevelData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{161}
}

func (x *GCGLevelData) GetFinishedChallengeIdList() []uint32 {
	if x != nil {
		return x.FinishedChallengeIdList
	}
	return nil
}

func (x *GCGLevelData) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type GCGBossChallengeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                uint32   `protobuf:"varint,9,opt,name=id,proto3" json:"id,omitempty"`
	UnlockLevelIdList []uint32 `protobuf:"varint,14,rep,packed,name=unlock_level_id_list,json=unlockLevelIdList,proto3" json:"unlock_level_id_list,omitempty"`
}

func (x *GCGBossChallengeData) Reset() {
	*x = GCGBossChallengeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGBossChallengeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGBossChallengeData) ProtoMessage() {}

func (x *GCGBossChallengeData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGBossChallengeData.ProtoReflect.Descriptor instead.
func (*GCGBossChallengeData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{162}
}

func (x *GCGBossChallengeData) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GCGBossChallengeData) GetUnlockLevelIdList() []uint32 {
	if x != nil {
		return x.UnlockLevelIdList
	}
	return nil
}

type GCGLevelChallengeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnlockBossChallengeList  []*GCGBossChallengeData `protobuf:"bytes,3,rep,name=unlock_boss_challenge_list,json=unlockBossChallengeList,proto3" json:"unlock_boss_challenge_list,omitempty"`
	UnlockWorldChallengeList []uint32                `protobuf:"varint,8,rep,packed,name=unlock_world_challenge_list,json=unlockWorldChallengeList,proto3" json:"unlock_world_challenge_list,omitempty"`
	LevelList                []*GCGLevelData         `protobuf:"bytes,10,rep,name=level_list,json=levelList,proto3" json:"level_list,omitempty"`
}

func (x *GCGLevelChallengeNotify) Reset() {
	*x = GCGLevelChallengeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGLevelChallengeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGLevelChallengeNotify) ProtoMessage() {}

func (x *GCGLevelChallengeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGLevelChallengeNotify.ProtoReflect.Descriptor instead.
func (*GCGLevelChallengeNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{163}
}

func (x *GCGLevelChallengeNotify) GetUnlockBossChallengeList() []*GCGBossChallengeData {
	if x != nil {
		return x.UnlockBossChallengeList
	}
	return nil
}

func (x *GCGLevelChallengeNotify) GetUnlockWorldChallengeList() []uint32 {
	if x != nil {
		return x.UnlockWorldChallengeList
	}
	return nil
}

func (x *GCGLevelChallengeNotify) GetLevelList() []*GCGLevelData {
	if x != nil {
		return x.LevelList
	}
	return nil
}

type GCGLevelChallengeFinishNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinishedChallengeIdList []uint32 `protobuf:"varint,10,rep,packed,name=finished_challenge_id_list,json=finishedChallengeIdList,proto3" json:"finished_challenge_id_list,omitempty"`
	LevelId                 uint32   `protobuf:"varint,15,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *GCGLevelChallengeFinishNotify) Reset() {
	*x = GCGLevelChallengeFinishNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGLevelChallengeFinishNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGLevelChallengeFinishNotify) ProtoMessage() {}

func (x *GCGLevelChallengeFinishNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGLevelChallengeFinishNotify.ProtoReflect.Descriptor instead.
func (*GCGLevelChallengeFinishNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{164}
}

func (x *GCGLevelChallengeFinishNotify) GetFinishedChallengeIdList() []uint32 {
	if x != nil {
		return x.FinishedChallengeIdList
	}
	return nil
}

func (x *GCGLevelChallengeFinishNotify) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type GCGWorldChallengeUnlockNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnlockIdList []uint32 `protobuf:"varint,8,rep,packed,name=unlock_id_list,json=unlockIdList,proto3" json:"unlock_id_list,omitempty"`
}

func (x *GCGWorldChallengeUnlockNotify) Reset() {
	*x = GCGWorldChallengeUnlockNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGWorldChallengeUnlockNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGWorldChallengeUnlockNotify) ProtoMessage() {}

func (x *GCGWorldChallengeUnlockNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGWorldChallengeUnlockNotify.ProtoReflect.Descriptor instead.
func (*GCGWorldChallengeUnlockNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{165}
}

func (x *GCGWorldChallengeUnlockNotify) GetUnlockIdList() []uint32 {
	if x != nil {
		return x.UnlockIdList
	}
	return nil
}

type GCGBossChallengeUpdateNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossChallenge *GCGBossChallengeData `protobuf:"bytes,11,opt,name=boss_challenge,json=bossChallenge,proto3" json:"boss_challenge,omitempty"`
}

func (x *GCGBossChallengeUpdateNotify) Reset() {
	*x = GCGBossChallengeUpdateNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGBossChallengeUpdateNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGBossChallengeUpdateNotify) ProtoMessage() {}

func (x *GCGBossChallengeUpdateNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGBossChallengeUpdateNotify.ProtoReflect.Descriptor instead.
func (*GCGBossChallengeUpdateNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{166}
}

func (x *GCGBossChallengeUpdateNotify) GetBossChallenge() *GCGBossChallengeData {
	if x != nil {
		return x.BossChallenge
	}
	return nil
}

type GCGLevelChallengeDeleteNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelIdList []uint32 `protobuf:"varint,13,rep,packed,name=level_id_list,json=levelIdList,proto3" json:"level_id_list,omitempty"`
}

func (x *GCGLevelChallengeDeleteNotify) Reset() {
	*x = GCGLevelChallengeDeleteNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_gcg_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGLevelChallengeDeleteNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGLevelChallengeDeleteNotify) ProtoMessage() {}

func (x *GCGLevelChallengeDeleteNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_gcg_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGLevelChallengeDeleteNotify.ProtoReflect.Descriptor instead.
func (*GCGLevelChallengeDeleteNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_proto_rawDescGZIP(), []int{167}
}

func (x *GCGLevelChallengeDeleteNotify) GetLevelIdList() []uint32 {
	if x != nil {
		return x.LevelIdList
	}
	return nil
}

var File_cmd_cmd_gcg_proto protoreflect.FileDescriptor

var file_cmd_cmd_gcg_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x6d, 0x64, 0x5f, 0x67, 0x63, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x6d,
	0x64, 0x5f, 0x67, 0x63, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xac, 0x01, 0x0a, 0x11, 0x47, 0x43, 0x47, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x43, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43,
	0x47, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x43, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f,
	0x73, 0x74, 0x4d, 0x61, 0x70, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xae, 0x01, 0x0a, 0x13, 0x47, 0x43, 0x47, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x08, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xbc, 0x01, 0x0a, 0x18, 0x47, 0x43, 0x47, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x4f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x47, 0x0a, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x4f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x63, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x72,
	0x64, 0x47, 0x75, 0x69, 0x64, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xda, 0x02, 0x0a, 0x11, 0x47, 0x43, 0x47, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x61,
	0x6e, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x43, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x19, 0x63,
	0x61, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14,
	0x63, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x50, 0x6c, 0x61,
	0x79, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x70,
	0x6c, 0x61, 0x79, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x59, 0x0a, 0x19, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x4f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x15, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x6e, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x10, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa7,
	0x01, 0x0a, 0x11, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xac, 0x02, 0x0a, 0x11, 0x47, 0x43, 0x47,
	0x4d, 0x73, 0x67, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x62,
	0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4d,
	0x61, 0x70, 0x12, 0x36, 0x0a, 0x0c, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x43, 0x47, 0x50, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x66, 0x74, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x1a, 0x45, 0x0a, 0x17, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbf, 0x01, 0x0a, 0x0e, 0x47, 0x43, 0x47, 0x4d,
	0x73, 0x67, 0x41, 0x64, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x26, 0x0a, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x5a, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x61, 0x72,
	0x64, 0x47, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x11, 0x47, 0x43,
	0x47, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x5a, 0x6f,
	0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c,
	0x63, 0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xf7, 0x01, 0x0a,
	0x0e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x5a, 0x6f, 0x6e, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x43, 0x47, 0x5a, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x47, 0x75,
	0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x43, 0x47, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x47, 0x75,
	0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x13, 0x47, 0x43, 0x47, 0x4d, 0x73,
	0x67, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x22, 0x7a, 0x0a, 0x1b, 0x47, 0x43,
	0x47, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x6e, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x42, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61,
	0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x47, 0x43, 0x47, 0x4d, 0x73,
	0x67, 0x44, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x12, 0x3c, 0x0a, 0x0e, 0x64, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x44, 0x69, 0x63,
	0x65, 0x53, 0x69, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x64, 0x69, 0x63, 0x65, 0x53,
	0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x69, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x10, 0x47, 0x43, 0x47, 0x4d,
	0x73, 0x67, 0x44, 0x69, 0x63, 0x65, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x13, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0e, 0x64, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x69, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x44, 0x69, 0x63, 0x65, 0x53, 0x69,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x64, 0x69, 0x63, 0x65, 0x53, 0x69, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x31, 0x0a, 0x0a, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x50, 0x61,
	0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x0d, 0x47, 0x43, 0x47, 0x4d, 0x73,
	0x67, 0x43, 0x68, 0x61, 0x72, 0x44, 0x69, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x0e, 0x47, 0x43,
	0x47, 0x4d, 0x73, 0x67, 0x55, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64,
	0x47, 0x75, 0x69, 0x64, 0x22, 0x4b, 0x0a, 0x11, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x55, 0x73,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61,
	0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49,
	0x64, 0x22, 0x49, 0x0a, 0x0f, 0x47, 0x43, 0x47, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x22, 0xd4, 0x02, 0x0a,
	0x11, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6c, 0x61, 0x73, 0x74, 0x48, 0x70, 0x12, 0x37, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x73, 0x65, 0x71, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x71, 0x12,
	0x22, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x43, 0x61, 0x72, 0x64, 0x47,
	0x75, 0x69, 0x64, 0x22, 0x4f, 0x0a, 0x0d, 0x47, 0x43, 0x47, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x66, 0x0a, 0x12, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5f, 0x0a, 0x16,
	0x47, 0x43, 0x47, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xee, 0x01,
	0x0a, 0x17, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x6c, 0x0a, 0x16, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x13, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x65, 0x0a, 0x18, 0x43, 0x61, 0x72, 0x64, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x94,
	0x01, 0x0a, 0x0e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x63,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x64, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xbe, 0x03, 0x0a, 0x0d, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67,
	0x41, 0x64, 0x64, 0x44, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x5f, 0x64, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x41,
	0x64, 0x64, 0x44, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x63,
	0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x44, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x64,
	0x69, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x41, 0x64, 0x64, 0x44,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x64, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x28, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x43, 0x47, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x58, 0x0a, 0x12, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x44, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x44, 0x69, 0x63, 0x65, 0x53,
	0x69, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x52, 0x0a, 0x0c, 0x44, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x44,
	0x69, 0x63, 0x65, 0x53, 0x69, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a, 0x0d, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67,
	0x4e, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43,
	0x47, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x16,
	0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x1a,
	0x45, 0x0a, 0x17, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0, 0x01, 0x0a, 0x0f, 0x47, 0x43, 0x47, 0x4d, 0x73,
	0x67, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x64, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x47, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x75, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x61,
	0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xb1, 0x01, 0x0a, 0x12, 0x47, 0x43,
	0x47, 0x4d, 0x73, 0x67, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43,
	0x47, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x43,
	0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0c, 0x63, 0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x55, 0x0a,
	0x12, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x50, 0x56, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64,
	0x47, 0x75, 0x69, 0x64, 0x22, 0xca, 0x01, 0x0a, 0x16, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x50,
	0x56, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x54, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x43, 0x47, 0x4d, 0x73, 0x67, 0x50, 0x56, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x1a, 0x5a, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x50, 0x56, 0x45, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xa9, 0x01, 0x0a, 0x18, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x50, 0x56, 0x45, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4d,
	0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x50, 0x56, 0x45, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2c, 0x0a,
	0x14, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x44, 0x75, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x74, 0x0a, 0x13, 0x47,
	0x43, 0x47, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x43, 0x47, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x70, 0x0a, 0x0e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x43, 0x47, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x77, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x0d, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x4f, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x17, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x57, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x36, 0x0a, 0x10, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x43, 0x61, 0x72, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0x72, 0x0a, 0x10, 0x47, 0x43, 0x47, 0x4d,
	0x73, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x43, 0x47, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x22, 0x15, 0x0a, 0x13,
	0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x19, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x4e, 0x6f,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x71,
	0x12, 0x26, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x73, 0x72, 0x63, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x43, 0x61, 0x72, 0x64, 0x47, 0x75, 0x69,
	0x64, 0x22, 0x4d, 0x0a, 0x13, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x72,
	0x64, 0x47, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64,
	0x22, 0x2e, 0x0a, 0x11, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64,
	0x22, 0xba, 0x11, 0x0a, 0x0a, 0x47, 0x43, 0x47, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3d, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43,
	0x47, 0x4d, 0x73, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3d,
	0x0a, 0x0c, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47,
	0x4d, 0x73, 0x67, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0b, 0x70, 0x68, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x34, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x41,
	0x64, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x48, 0x00, 0x52, 0x08, 0x61, 0x64, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x4f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x4f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x64, 0x69, 0x63, 0x65,
	0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x44, 0x69, 0x63, 0x65, 0x52, 0x6f,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x64, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x12, 0x3a,
	0x0a, 0x0b, 0x64, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d,
	0x73, 0x67, 0x44, 0x69, 0x63, 0x65, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a,
	0x64, 0x69, 0x63, 0x65, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x73, 0x73, 0x48, 0x00, 0x52, 0x04, 0x70,
	0x61, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x64, 0x69, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43,
	0x47, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x72, 0x44, 0x69, 0x65, 0x48, 0x00, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x72, 0x44, 0x69, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x69,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x61,
	0x64, 0x64, 0x5f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x41, 0x64, 0x64, 0x44,
	0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x44, 0x69, 0x63, 0x65, 0x12, 0x34,
	0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67,
	0x4d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x6f, 0x76, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x55, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0xb8, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x77, 0x43,
	0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64, 0x12, 0x4d,
	0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x18, 0xad, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x18, 0xbb, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73,
	0x67, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x64, 0x64, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x41, 0x64, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0xd7, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x75, 0x73,
	0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x83, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73,
	0x67, 0x55, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x12, 0x48, 0x0a, 0x10, 0x64,
	0x75, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0xf0, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x43, 0x47, 0x4d, 0x73, 0x67, 0x44, 0x75, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x75, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x8b, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x35, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x18, 0xca, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x47, 0x61,
	0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xc6,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43,
	0x47, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x6f,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x13, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x8e, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47,
	0x4d, 0x73, 0x67, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x11, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0xd7, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x43, 0x61,
	0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5f, 0x0a, 0x19, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x18, 0xfa, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f,
	0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x15, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42,
	0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x65, 0x18, 0xc6, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x18, 0xc2, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x70, 0x76,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0xe4, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x50, 0x56, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x70, 0x76, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x14, 0x70, 0x76,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0xfd, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x50, 0x56, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x12, 0x70, 0x76,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x51, 0x0a, 0x13, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x83, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x16, 0x6e, 0x6f, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d,
	0x73, 0x67, 0x4e, 0x6f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x13, 0x6e, 0x6f, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44, 0x0a, 0x0e,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0xdb,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43,
	0x47, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0xf3, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9a, 0x01,
	0x0a, 0x0e, 0x47, 0x43, 0x47, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x63, 0x6b,
	0x12, 0x35, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43,
	0x47, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08,
	0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x31, 0x0a, 0x12, 0x47, 0x43,
	0x47, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x69, 0x0a,
	0x19, 0x47, 0x43, 0x47, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63,
	0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x64, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3c, 0x0a, 0x12, 0x47, 0x43, 0x47, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x26,
	0x0a, 0x0f, 0x64, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x12, 0x47, 0x43, 0x47, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x14,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x73, 0x74,
	0x44, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x43, 0x47, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x22, 0xc3, 0x01, 0x0a,
	0x14, 0x47, 0x43, 0x47, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61,
	0x79, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x47, 0x75,
	0x69, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x11, 0x63, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x47, 0x75,
	0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x47, 0x75,
	0x69, 0x64, 0x22, 0x6b, 0x0a, 0x12, 0x47, 0x43, 0x47, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x47,
	0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0d, 0x64, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x17, 0x0a, 0x15, 0x47, 0x43, 0x47, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x85, 0x04, 0x0a, 0x0c, 0x47, 0x43, 0x47,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x70, 0x5f,
	0x72, 0x65, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x52, 0x65, 0x64,
	0x72, 0x61, 0x77, 0x12, 0x4f, 0x0a, 0x12, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x70, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x6e, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x72, 0x6f, 0x6c,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x43, 0x47, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x72, 0x6f,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x38,
	0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x08,
	0x6f, 0x70, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x73, 0x73, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x50, 0x61, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x0c,
	0x6f, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x72, 0x64, 0x48,
	0x00, 0x52, 0x0a, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x72, 0x64, 0x12, 0x38, 0x0a,
	0x09, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6f,
	0x70, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x6f, 0x70, 0x5f, 0x73, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x6f,
	0x70, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x04, 0x0a, 0x02, 0x6f, 0x70,
	0x22, 0x62, 0x0a, 0x16, 0x47, 0x43, 0x47, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x02, 0x6f, 0x70, 0x22, 0x60, 0x0a, 0x17, 0x47, 0x43, 0x47, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x12, 0x47, 0x43, 0x47, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x65, 0x65,
	0x64, 0x12, 0x4d, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x50, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x08, 0x47,
	0x43, 0x47, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0xbe, 0x02, 0x0a, 0x07, 0x47, 0x43, 0x47, 0x43, 0x61, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x53, 0x68, 0x6f, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43,
	0x47, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x26, 0x0a, 0x07, 0x47, 0x43, 0x47, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x13, 0x47, 0x43, 0x47, 0x57,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa3, 0x07, 0x0a, 0x0e, 0x47, 0x43, 0x47, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x50, 0x0a, 0x0f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x75, 0x72, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0xff, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x57, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2f, 0x0a, 0x0b, 0x73, 0x75, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x0a,
	0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x11, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x42,
	0x61, 0x63, 0x6b, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x0d, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47,
	0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x0b, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5a, 0x6f, 0x6e,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35,
	0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x43, 0x47, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0b,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x5a, 0x6f, 0x6e,
	0x65, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75,
	0x6d, 0x12, 0x3c, 0x0a, 0x0e, 0x64, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x43, 0x47, 0x44, 0x69, 0x63, 0x65, 0x53, 0x69, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x64, 0x69, 0x63, 0x65, 0x53, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x5a, 0x6f,
	0x6e, 0x65, 0x52, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x3e, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xa8,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43,
	0x47, 0x50, 0x56, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0c,
	0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x57, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x0b,
	0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x50, 0x0a, 0x12, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x5a, 0x6f,
	0x6e, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe0, 0x01,
	0x0a, 0x08, 0x47, 0x43, 0x47, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x50, 0x68, 0x61, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x59,
	0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x50, 0x68, 0x61, 0x73, 0x65, 0x2e, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x1a, 0x45, 0x0a, 0x17, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x99, 0x01, 0x0a, 0x15, 0x47, 0x43, 0x47, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69,
	0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x0f,
	0x47, 0x43, 0x47, 0x50, 0x56, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x7f, 0x0a, 0x10, 0x47, 0x43, 0x47, 0x44, 0x75, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x75, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x9d, 0x07, 0x0a, 0x07, 0x47, 0x43, 0x47, 0x44, 0x75, 0x65, 0x6c, 0x12, 0x39, 0x0a,
	0x0b, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x43, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x47, 0x61, 0x6d, 0x65, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x11, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x79,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x0f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x18, 0xba, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x71, 0x12, 0x49, 0x0a,
	0x15, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x9c, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x52, 0x12, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67,
	0x50, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x34,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x43, 0x47, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x43, 0x47, 0x50, 0x56, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x1c, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x87, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x19, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x43, 0x47, 0x44, 0x75, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x75,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x42, 0x0a,
	0x0e, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43,
	0x47, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x70, 0x0a, 0x0f, 0x47, 0x43, 0x47, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x70, 0x53, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x02, 0x6f, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x02, 0x6f, 0x70, 0x22, 0x42, 0x0a, 0x0f, 0x47, 0x43, 0x47, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6f, 0x70, 0x53, 0x65, 0x71, 0x22, 0x70, 0x0a, 0x14, 0x47, 0x43, 0x47, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x39, 0x0a, 0x0d, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x43, 0x47, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x0b, 0x6d,
	0x73, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x71, 0x22, 0x0f, 0x0a, 0x0d, 0x47, 0x43, 0x47,
	0x41, 0x73, 0x6b, 0x44, 0x75, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x22, 0x4d, 0x0a, 0x0d, 0x47, 0x43,
	0x47, 0x41, 0x73, 0x6b, 0x44, 0x75, 0x65, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x75, 0x65, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x44,
	0x75, 0x65, 0x6c, 0x52, 0x04, 0x64, 0x75, 0x65, 0x6c, 0x22, 0xda, 0x02, 0x0a, 0x12, 0x47, 0x43,
	0x47, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x4e, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x43, 0x47, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x46, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x1a, 0x3e, 0x0a, 0x10, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61,
	0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xef, 0x01, 0x0a, 0x10, 0x47, 0x43, 0x47, 0x47, 0x61,
	0x6d, 0x65, 0x42, 0x72, 0x69, 0x65, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x55, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x43, 0x47, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x45, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x62, 0x72, 0x69, 0x65,
	0x66, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x72,
	0x69, 0x65, 0x66, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42,
	0x72, 0x69, 0x65, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x77, 0x0a, 0x16, 0x47, 0x43, 0x47, 0x47,
	0x61, 0x6d, 0x65, 0x42, 0x72, 0x69, 0x65, 0x66, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x47, 0x61,
	0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x67, 0x63, 0x67, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x72, 0x69, 0x65, 0x66, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0c, 0x67, 0x63, 0x67, 0x42, 0x72, 0x69, 0x65, 0x66, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x43, 0x47, 0x49, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x22, 0x2c, 0x0a, 0x10, 0x47, 0x43, 0x47, 0x49, 0x6e, 0x69, 0x74,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x33, 0x0a, 0x12, 0x47, 0x43, 0x47, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42,
	0x65, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x71, 0x22, 0x7d, 0x0a, 0x15, 0x47, 0x43, 0x47, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x48, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x68, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x70, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6b, 0x0a, 0x1b, 0x47, 0x43, 0x47, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x22, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x09, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0d, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x17, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a,
	0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x5a, 0x6f, 0x6e, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64,
	0x47, 0x75, 0x69, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x20, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4f, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x47, 0x75,
	0x69, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x22, 0x7d, 0x0a, 0x18, 0x47,
	0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6d, 0x0a, 0x1e, 0x47, 0x43,
	0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x11,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x18, 0x47, 0x43,
	0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58, 0x0a, 0x19, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x65, 0x64, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x66, 0x61, 0x69, 0x6c, 0x41,
	0x64, 0x64, 0x65, 0x64, 0x57, 0x68, 0x65, 0x6e, 0x46, 0x75, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x5e, 0x0a, 0x1c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x18, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43,
	0x61, 0x72, 0x64, 0x57, 0x68, 0x65, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xaa, 0x07, 0x0a, 0x13, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x65, 0x0a, 0x15, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x63, 0x61, 0x72,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x12,
	0x5b, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x72, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x12, 0x49, 0x0a, 0x0b,
	0x68, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x68, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x12, 0x42, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x61, 0x64, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x1d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x6e,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x72, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x6d, 0x43, 0x61, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0x6c, 0x0a, 0x17, 0x43, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x6d, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x5a, 0x0a, 0x0e, 0x48, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x01,
	0x0a, 0x14, 0x47, 0x43, 0x47, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x6e, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x47,
	0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x12, 0x59,
	0x0a, 0x1b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x18, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xaf, 0x01, 0x0a, 0x1b, 0x47, 0x43,
	0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x6c, 0x61,
	0x79, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x47,
	0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x61, 0x6e,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x70,
	0x6c, 0x61, 0x79, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd8, 0x02, 0x0a, 0x15,
	0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0e, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x12, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5a,
	0x0a, 0x1b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x18, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x22,
	0x31, 0x0a, 0x15, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x41, 0x73, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x70, 0x0a, 0x18, 0x47, 0x43, 0x47, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x71, 0x12, 0x35, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x44, 0x75, 0x65, 0x6c,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x22, 0x2b, 0x0a, 0x10, 0x47, 0x43, 0x47, 0x42, 0x61, 0x63, 0x6b, 0x54,
	0x6f, 0x44, 0x75, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x42, 0x61, 0x63,
	0x6b, 0x22, 0x2c, 0x0a, 0x10, 0x47, 0x43, 0x47, 0x42, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x44, 0x75,
	0x65, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x31, 0x0a, 0x14, 0x47, 0x43, 0x47, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x73, 0x6f, 0x6e, 0x53,
	0x74, 0x72, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x43, 0x47, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x78,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x22, 0x8c, 0x02, 0x0a, 0x1d, 0x47, 0x43, 0x47, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x50, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x43, 0x47, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x47,
	0x43, 0x47, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x98, 0x01, 0x0a, 0x13, 0x47,
	0x43, 0x47, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x03, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4f, 0x55, 0x54, 0x10, 0x04, 0x22, 0xf9, 0x01, 0x0a, 0x0d, 0x47, 0x43, 0x47, 0x44, 0x53, 0x44,
	0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64,
	0x42, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49,
	0x64, 0x22, 0xf6, 0x01, 0x0a, 0x0d, 0x47, 0x43, 0x47, 0x44, 0x53, 0x43, 0x61, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x15, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x46, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48,
	0x0a, 0x21, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x78, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1d, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65,
	0x6e, 0x49, 0x64, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xaf, 0x02, 0x0a, 0x0f, 0x47,
	0x43, 0x47, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x31,
	0x0a, 0x09, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x44, 0x53, 0x44,
	0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x64, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x18, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x42,
	0x61, 0x63, 0x6b, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x75,
	0x72, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x75, 0x72, 0x44, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x44, 0x53, 0x43, 0x61, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x13, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x44, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x19,
	0x47, 0x43, 0x47, 0x44, 0x53, 0x43, 0x61, 0x72, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x63, 0x61, 0x72, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x16, 0x47,
	0x43, 0x47, 0x44, 0x53, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64,
	0x22, 0x51, 0x0a, 0x19, 0x47, 0x43, 0x47, 0x44, 0x53, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61, 0x63,
	0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x45, 0x0a, 0x18, 0x47, 0x43, 0x47, 0x44, 0x53, 0x43, 0x61, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x4e, 0x0a, 0x16, 0x47, 0x43,
	0x47, 0x44, 0x53, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x16, 0x47, 0x43,
	0x47, 0x44, 0x53, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61, 0x63,
	0x65, 0x52, 0x73, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x53, 0x0a, 0x16, 0x47, 0x43, 0x47, 0x44, 0x53, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x64, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63,
	0x61, 0x72, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x16, 0x47, 0x43, 0x47,
	0x44, 0x53, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x42, 0x61, 0x63, 0x6b,
	0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x64, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x13, 0x47, 0x43, 0x47, 0x44,
	0x53, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65,
	0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x63,
	0x6b, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x13, 0x47, 0x43, 0x47, 0x44, 0x53, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x64, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x16, 0x47, 0x43, 0x47, 0x44,
	0x53, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x5f, 0x0a, 0x16, 0x47, 0x43, 0x47, 0x44, 0x53, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x73, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x63,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x63, 0x6b,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x8c, 0x01, 0x0a, 0x10, 0x47, 0x43, 0x47, 0x44, 0x53, 0x44, 0x65, 0x63, 0x6b, 0x53, 0x61,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x81, 0x01, 0x0a, 0x10, 0x47, 0x43, 0x47, 0x44, 0x53, 0x44, 0x65, 0x63, 0x6b, 0x53, 0x61, 0x76,
	0x65, 0x52, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x15, 0x47, 0x43, 0x47, 0x44, 0x53, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x75, 0x72, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x64, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64,
	0x65, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x15, 0x47, 0x43, 0x47, 0x44, 0x53, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x75, 0x72, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x63, 0x6b, 0x49,
	0x64, 0x22, 0x33, 0x0a, 0x18, 0x47, 0x43, 0x47, 0x44, 0x53, 0x43, 0x75, 0x72, 0x44, 0x65, 0x63,
	0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x64, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x12, 0x47, 0x43, 0x47, 0x44, 0x53, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x64, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64,
	0x65, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x12, 0x47, 0x43, 0x47, 0x44, 0x53, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x30,
	0x0a, 0x15, 0x47, 0x43, 0x47, 0x44, 0x53, 0x44, 0x65, 0x63, 0x6b, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x63, 0x6b, 0x49, 0x64,
	0x22, 0x57, 0x0a, 0x1a, 0x47, 0x43, 0x47, 0x44, 0x53, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x15, 0x47, 0x43, 0x47,
	0x44, 0x53, 0x44, 0x65, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x51, 0x0a, 0x19, 0x47, 0x43, 0x47, 0x44, 0x53, 0x43,
	0x61, 0x72, 0x64, 0x46, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5f, 0x0a, 0x21, 0x47, 0x43, 0x47,
	0x44, 0x53, 0x54, 0x61, 0x6b, 0x65, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x21, 0x47, 0x43,
	0x47, 0x44, 0x53, 0x54, 0x61, 0x6b, 0x65, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x12, 0x47, 0x43, 0x47, 0x44, 0x53, 0x42, 0x61,
	0x6e, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x82, 0x02, 0x0a, 0x15, 0x47, 0x43, 0x47,
	0x54, 0x43, 0x54, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x75,
	0x65, 0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73,
	0x4c, 0x61, 0x73, 0x74, 0x44, 0x75, 0x65, 0x6c, 0x57, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x44, 0x75, 0x65, 0x6c, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4e, 0x0a,
	0x0e, 0x47, 0x43, 0x47, 0x54, 0x43, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4d, 0x0a,
	0x0e, 0x47, 0x43, 0x47, 0x54, 0x43, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x6e, 0x0a, 0x18,
	0x47, 0x43, 0x47, 0x54, 0x43, 0x54, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x1e,
	0x47, 0x43, 0x47, 0x54, 0x43, 0x54, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x53,
	0x0a, 0x15, 0x74, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x54, 0x43, 0x54, 0x61, 0x76, 0x65, 0x72,
	0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x13,
	0x74, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x6e, 0x0a, 0x20, 0x47, 0x43, 0x47, 0x54, 0x43, 0x54, 0x61, 0x76, 0x65,
	0x72, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x4a, 0x0a, 0x10, 0x74, 0x61, 0x76, 0x65, 0x72,
	0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x54, 0x43, 0x54,
	0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0f, 0x74, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x22, 0x3e, 0x0a, 0x14, 0x47, 0x43, 0x47, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x78, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0x53, 0x0a, 0x1a, 0x47, 0x43, 0x47, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x14, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54,
	0x61, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x1b, 0x47, 0x43, 0x47, 0x47,
	0x72, 0x6f, 0x77, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x6b, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x4d, 0x0a,
	0x1b, 0x47, 0x43, 0x47, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54,
	0x61, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2b, 0x0a, 0x17,
	0x47, 0x43, 0x47, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x17, 0x47, 0x43,
	0x47, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x75, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x15, 0x47, 0x43, 0x47, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x17, 0x47, 0x43, 0x47, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x67, 0x72, 0x65, 0x65, 0x22, 0x5b, 0x0a, 0x17,
	0x47, 0x43, 0x47, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x75, 0x6e, 0x69, 0x73,
	0x68, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x1a, 0x47, 0x43, 0x47,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x67,
	0x72, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x67, 0x72,
	0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x1b, 0x0a, 0x19,
	0x47, 0x43, 0x47, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x43,
	0x47, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x47, 0x43,
	0x47, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x43, 0x47, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x75, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69,
	0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x75, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x67, 0x63, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73,
	0x47, 0x63, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x72,
	0x0a, 0x19, 0x47, 0x43, 0x47, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x47, 0x43, 0x47, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0c, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x47, 0x43, 0x47, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x95, 0x03, 0x0a, 0x0f, 0x47, 0x43, 0x47, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x43, 0x47, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x17, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x77, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x1c, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x19, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x39, 0x0a, 0x16, 0x47, 0x43,
	0x47, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x43, 0x47, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x22, 0x4d, 0x0a, 0x12, 0x47,
	0x43, 0x47, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x73,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x44, 0x0a, 0x12, 0x47, 0x43,
	0x47, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x2e, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x5e, 0x0a, 0x12, 0x47, 0x43, 0x47, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x43, 0x47, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x73, 0x0a, 0x12, 0x47, 0x43, 0x47, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x35,
	0x0a, 0x17, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74,
	0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x14, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x63, 0x0a, 0x10, 0x47, 0x43, 0x47, 0x54, 0x61, 0x76, 0x65,
	0x72, 0x6e, 0x4e, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x16, 0x47,
	0x43, 0x47, 0x54, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x4e, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x3b, 0x0a, 0x0d, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x6e, 0x70,
	0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x54, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x4e, 0x70,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x77, 0x65, 0x65, 0x6b, 0x4e, 0x70, 0x63, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x70, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x43, 0x47, 0x54, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x4e, 0x70, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4e, 0x70, 0x63,
	0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x5f, 0x6e, 0x70, 0x63, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x43, 0x47, 0x54, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x4e, 0x70, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x4e, 0x70, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x82, 0x01, 0x0a, 0x14, 0x47, 0x43, 0x47, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x47, 0x43, 0x47, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x73, 0x70, 0x12, 0x32, 0x0a,
	0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x14, 0x47, 0x43, 0x47, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x6e,
	0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x70, 0x63,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x1a, 0x47, 0x43, 0x47, 0x57, 0x65, 0x65, 0x6b,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x57, 0x65, 0x65, 0x6b,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14,
	0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6e, 0x70, 0x63, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x4e, 0x70, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x8f, 0x01,
	0x0a, 0x21, 0x47, 0x43, 0x47, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x42, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x8e, 0x02, 0x0a, 0x21, 0x47, 0x43, 0x47, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x78, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x65, 0x78, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x66, 0x0a, 0x0c, 0x47, 0x43, 0x47, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x17, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x14, 0x47, 0x43, 0x47, 0x42,
	0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2f, 0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xe6, 0x01, 0x0a, 0x17, 0x47, 0x43, 0x47, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x58, 0x0a,
	0x1a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x42, 0x6f, 0x73,
	0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x17,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x18, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x77, 0x0a, 0x1d, 0x47, 0x43,
	0x47, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x17, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x1d, 0x47, 0x43, 0x47, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x1c, 0x47, 0x43,
	0x47, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x42, 0x0a, 0x0e, 0x62, 0x6f,
	0x73, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x42, 0x6f,
	0x73, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0d, 0x62, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0x43,
	0x0a, 0x1d, 0x47, 0x43, 0x47, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x22, 0x0a, 0x0d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x2a, 0x72, 0x0a, 0x14, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x48,
	0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x47,
	0x43, 0x47, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x48, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x43, 0x47,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x48, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x43, 0x47,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x48, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x48, 0x45, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0x7c, 0x0a, 0x0f, 0x47, 0x43, 0x47, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x43,
	0x47, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x43, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c,
	0x45, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x47, 0x43, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x43, 0x47,
	0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x10, 0x03, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x79, 0x76, 0x61, 0x74, 0x2d, 0x68, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x2f, 0x68, 0x6b, 0x34, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cmd_cmd_gcg_proto_rawDescOnce sync.Once
	file_cmd_cmd_gcg_proto_rawDescData = file_cmd_cmd_gcg_proto_rawDesc
)

func file_cmd_cmd_gcg_proto_rawDescGZIP() []byte {
	file_cmd_cmd_gcg_proto_rawDescOnce.Do(func() {
		file_cmd_cmd_gcg_proto_rawDescData = protoimpl.X.CompressGZIP(file_cmd_cmd_gcg_proto_rawDescData)
	})
	return file_cmd_cmd_gcg_proto_rawDescData
}

var file_cmd_cmd_gcg_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_cmd_cmd_gcg_proto_msgTypes = make([]protoimpl.MessageInfo, 183)
var file_cmd_cmd_gcg_proto_goTypes = []interface{}{
	(GCGSkillHpChangeType)(0),                              // 0: proto.GCGSkillHpChangeType
	(GCGSettleOption)(0),                                   // 1: proto.GCGSettleOption
	(GCGGameCreateFailReasonNotify_GCGGameCreateReason)(0), // 2: proto.GCGGameCreateFailReasonNotify.GCGGameCreateReason
	(*GCGAttackCostInfo)(nil),                              // 3: proto.GCGAttackCostInfo
	(*GCGPlayCardCostInfo)(nil),                            // 4: proto.GCGPlayCardCostInfo
	(*GCGSelectOnStageCostInfo)(nil),                       // 5: proto.GCGSelectOnStageCostInfo
	(*GCGCostReviseInfo)(nil),                              // 6: proto.GCGCostReviseInfo
	(*GCGMsgTokenChange)(nil),                              // 7: proto.GCGMsgTokenChange
	(*GCGMsgPhaseChange)(nil),                              // 8: proto.GCGMsgPhaseChange
	(*GCGMsgAddCards)(nil),                                 // 9: proto.GCGMsgAddCards
	(*GCGMsgRemoveCards)(nil),                              // 10: proto.GCGMsgRemoveCards
	(*GCGMsgMoveCard)(nil),                                 // 11: proto.GCGMsgMoveCard
	(*GCGMsgSelectOnStage)(nil),                            // 12: proto.GCGMsgSelectOnStage
	(*GCGMsgSelectOnStageByEffect)(nil),                    // 13: proto.GCGMsgSelectOnStageByEffect
	(*GCGMsgDiceRoll)(nil),                                 // 14: proto.GCGMsgDiceRoll
	(*GCGMsgDiceReroll)(nil),                               // 15: proto.GCGMsgDiceReroll
	(*GCGMsgPass)(nil),                                     // 16: proto.GCGMsgPass
	(*GCGMsgCharDie)(nil),                                  // 17: proto.GCGMsgCharDie
	(*GCGMsgUseSkill)(nil),                                 // 18: proto.GCGMsgUseSkill
	(*GCGMsgUseSkillEnd)(nil),                              // 19: proto.GCGMsgUseSkillEnd
	(*GCGDamageDetail)(nil),                                // 20: proto.GCGDamageDetail
	(*GCGMsgSkillResult)(nil),                              // 21: proto.GCGMsgSkillResult
	(*GCGLimitsInfo)(nil),                                  // 22: proto.GCGLimitsInfo
	(*GCGSkillLimitsInfo)(nil),                             // 23: proto.GCGSkillLimitsInfo
	(*GCGCardSkillLimitsInfo)(nil),                         // 24: proto.GCGCardSkillLimitsInfo
	(*GCGMsgSkillLimitsChange)(nil),                        // 25: proto.GCGMsgSkillLimitsChange
	(*GCGMsgCostDice)(nil),                                 // 26: proto.GCGMsgCostDice
	(*GCGMsgAddDice)(nil),                                  // 27: proto.GCGMsgAddDice
	(*GCGMsgNewCard)(nil),                                  // 28: proto.GCGMsgNewCard
	(*GCGMsgUpdateController)(nil),                         // 29: proto.GCGMsgUpdateController
	(*GCGMsgModifyAdd)(nil),                                // 30: proto.GCGMsgModifyAdd
	(*GCGMsgModifyRemove)(nil),                             // 31: proto.GCGMsgModifyRemove
	(*GCGMsgPVEIntention)(nil),                             // 32: proto.GCGMsgPVEIntention
	(*GCGMsgPVEIntentionInfo)(nil),                         // 33: proto.GCGMsgPVEIntentionInfo
	(*GCGMsgPVEIntentionChange)(nil),                       // 34: proto.GCGMsgPVEIntentionChange
	(*GCGMsgDuelDataChange)(nil),                           // 35: proto.GCGMsgDuelDataChange
	(*GCGMsgClientPerform)(nil),                            // 36: proto.GCGMsgClientPerform
	(*GCGMsgGameOver)(nil),                                 // 37: proto.GCGMsgGameOver
	(*GCGMsgOpTimer)(nil),                                  // 38: proto.GCGMsgOpTimer
	(*GCGMsgWaitingListChange)(nil),                        // 39: proto.GCGMsgWaitingListChange
	(*GCGMsgCardUpdate)(nil),                               // 40: proto.GCGMsgCardUpdate
	(*GCGMsgCostRevise)(nil),                               // 41: proto.GCGMsgCostRevise
	(*GCGMsgPhaseContinue)(nil),                            // 42: proto.GCGMsgPhaseContinue
	(*GCGMsgNoDamageSkillResult)(nil),                      // 43: proto.GCGMsgNoDamageSkillResult
	(*GCGMsgReactionBegin)(nil),                            // 44: proto.GCGMsgReactionBegin
	(*GCGMsgReactionEnd)(nil),                              // 45: proto.GCGMsgReactionEnd
	(*GCGMessage)(nil),                                     // 46: proto.GCGMessage
	(*GCGMessagePack)(nil),                                 // 47: proto.GCGMessagePack
	(*GCGOperationRedraw)(nil),                             // 48: proto.GCGOperationRedraw
	(*GCGOperationOnStageSelect)(nil),                      // 49: proto.GCGOperationOnStageSelect
	(*GCGOperationReroll)(nil),                             // 50: proto.GCGOperationReroll
	(*GCGOperationAttack)(nil),                             // 51: proto.GCGOperationAttack
	(*GCGOperationPass)(nil),                               // 52: proto.GCGOperationPass
	(*GCGOperationPlayCard)(nil),                           // 53: proto.GCGOperationPlayCard
	(*GCGOperationReboot)(nil),                             // 54: proto.GCGOperationReboot
	(*GCGOperationSurrender)(nil),                          // 55: proto.GCGOperationSurrender
	(*GCGOperation)(nil),                                   // 56: proto.GCGOperation
	(*GCGReplayOperationData)(nil),                         // 57: proto.GCGReplayOperationData
	(*GCGReplayControllerData)(nil),                        // 58: proto.GCGReplayControllerData
	(*GCGOperationReplay)(nil),                             // 59: proto.GCGOperationReplay
	(*GCGToken)(nil),                                       // 60: proto.GCGToken
	(*GCGCard)(nil),                                        // 61: proto.GCGCard
	(*GCGZone)(nil),                                        // 62: proto.GCGZone
	(*GCGWaitingCharacter)(nil),                            // 63: proto.GCGWaitingCharacter
	(*GCGPlayerField)(nil),                                 // 64: proto.GCGPlayerField
	(*GCGPhase)(nil),                                       // 65: proto.GCGPhase
	(*GCGControllerShowInfo)(nil),                          // 66: proto.GCGControllerShowInfo
	(*GCGPVEIntention)(nil),                                // 67: proto.GCGPVEIntention
	(*GCGDuelChallenge)(nil),                               // 68: proto.GCGDuelChallenge
	(*GCGDuel)(nil),                                        // 69: proto.GCGDuel
	(*GCGOperationReq)(nil),                                // 70: proto.GCGOperationReq
	(*GCGOperationRsp)(nil),                                // 71: proto.GCGOperationRsp
	(*GCGMessagePackNotify)(nil),                           // 72: proto.GCGMessagePackNotify
	(*GCGAskDuelReq)(nil),                                  // 73: proto.GCGAskDuelReq
	(*GCGAskDuelRsp)(nil),                                  // 74: proto.GCGAskDuelRsp
	(*GCGPlayerBriefData)(nil),                             // 75: proto.GCGPlayerBriefData
	(*GCGGameBriefData)(nil),                               // 76: proto.GCGGameBriefData
	(*GCGGameBriefDataNotify)(nil),                         // 77: proto.GCGGameBriefDataNotify
	(*GCGInitFinishReq)(nil),                               // 78: proto.GCGInitFinishReq
	(*GCGInitFinishRsp)(nil),                               // 79: proto.GCGInitFinishRsp
	(*GCGHeartBeatNotify)(nil),                             // 80: proto.GCGHeartBeatNotify
	(*GCGSkillPreviewHpInfo)(nil),                          // 81: proto.GCGSkillPreviewHpInfo
	(*GCGSkillPreviewReactionInfo)(nil),                    // 82: proto.GCGSkillPreviewReactionInfo
	(*GCGSkillPreviewElementReactionInfo)(nil),             // 83: proto.GCGSkillPreviewElementReactionInfo
	(*GCGSkillPreviewCardInfo)(nil),                        // 84: proto.GCGSkillPreviewCardInfo
	(*GCGSkillPreviewOnstageChangeInfo)(nil),               // 85: proto.GCGSkillPreviewOnstageChangeInfo
	(*GCGSkillPreviewTokenInfo)(nil),                       // 86: proto.GCGSkillPreviewTokenInfo
	(*GCGSkillPreviewTokenChangeInfo)(nil),                 // 87: proto.GCGSkillPreviewTokenChangeInfo
	(*GCGSkillPreviewExtraInfo)(nil),                       // 88: proto.GCGSkillPreviewExtraInfo
	(*GCGSkillPreviewInfo)(nil),                            // 89: proto.GCGSkillPreviewInfo
	(*GCGChangeOnstageInfo)(nil),                           // 90: proto.GCGChangeOnstageInfo
	(*GCGSkillPreviewPlayCardInfo)(nil),                    // 91: proto.GCGSkillPreviewPlayCardInfo
	(*GCGSkillPreviewNotify)(nil),                          // 92: proto.GCGSkillPreviewNotify
	(*GCGSkillPreviewAskReq)(nil),                          // 93: proto.GCGSkillPreviewAskReq
	(*GCGSkillPreviewAskRsp)(nil),                          // 94: proto.GCGSkillPreviewAskRsp
	(*GCGChallengeUpdateNotify)(nil),                       // 95: proto.GCGChallengeUpdateNotify
	(*GCGBackToDuelReq)(nil),                               // 96: proto.GCGBackToDuelReq
	(*GCGBackToDuelRsp)(nil),                               // 97: proto.GCGBackToDuelRsp
	(*GCGDebugReplayNotify)(nil),                           // 98: proto.GCGDebugReplayNotify
	(*GCGGameMaxNotify)(nil),                               // 99: proto.GCGGameMaxNotify
	(*GCGGameCreateFailReasonNotify)(nil),                  // 100: proto.GCGGameCreateFailReasonNotify
	(*GCGDSDeckData)(nil),                                  // 101: proto.GCGDSDeckData
	(*GCGDSCardData)(nil),                                  // 102: proto.GCGDSCardData
	(*GCGDSDataNotify)(nil),                                // 103: proto.GCGDSDataNotify
	(*GCGDSCardBackUnlockNotify)(nil),                      // 104: proto.GCGDSCardBackUnlockNotify
	(*GCGDSFieldUnlockNotify)(nil),                         // 105: proto.GCGDSFieldUnlockNotify
	(*GCGDSCardFaceUnlockNotify)(nil),                      // 106: proto.GCGDSCardFaceUnlockNotify
	(*GCGDSCardNumChangeNotify)(nil),                       // 107: proto.GCGDSCardNumChangeNotify
	(*GCGDSChangeCardFaceReq)(nil),                         // 108: proto.GCGDSChangeCardFaceReq
	(*GCGDSChangeCardFaceRsp)(nil),                         // 109: proto.GCGDSChangeCardFaceRsp
	(*GCGDSChangeCardBackReq)(nil),                         // 110: proto.GCGDSChangeCardBackReq
	(*GCGDSChangeCardBackRsp)(nil),                         // 111: proto.GCGDSChangeCardBackRsp
	(*GCGDSChangeFieldReq)(nil),                            // 112: proto.GCGDSChangeFieldReq
	(*GCGDSChangeFieldRsp)(nil),                            // 113: proto.GCGDSChangeFieldRsp
	(*GCGDSChangeDeckNameReq)(nil),                         // 114: proto.GCGDSChangeDeckNameReq
	(*GCGDSChangeDeckNameRsp)(nil),                         // 115: proto.GCGDSChangeDeckNameRsp
	(*GCGDSDeckSaveReq)(nil),                               // 116: proto.GCGDSDeckSaveReq
	(*GCGDSDeckSaveRsp)(nil),                               // 117: proto.GCGDSDeckSaveRsp
	(*GCGDSChangeCurDeckReq)(nil),                          // 118: proto.GCGDSChangeCurDeckReq
	(*GCGDSChangeCurDeckRsp)(nil),                          // 119: proto.GCGDSChangeCurDeckRsp
	(*GCGDSCurDeckChangeNotify)(nil),                       // 120: proto.GCGDSCurDeckChangeNotify
	(*GCGDSDeleteDeckReq)(nil),                             // 121: proto.GCGDSDeleteDeckReq
	(*GCGDSDeleteDeckRsp)(nil),                             // 122: proto.GCGDSDeleteDeckRsp
	(*GCGDSDeckUnlockNotify)(nil),                          // 123: proto.GCGDSDeckUnlockNotify
	(*GCGDSCardProficiencyNotify)(nil),                     // 124: proto.GCGDSCardProficiencyNotify
	(*GCGDSDeckUpdateNotify)(nil),                          // 125: proto.GCGDSDeckUpdateNotify
	(*GCGDSCardFaceUpdateNotify)(nil),                      // 126: proto.GCGDSCardFaceUpdateNotify
	(*GCGDSTakeCardProficiencyRewardReq)(nil),              // 127: proto.GCGDSTakeCardProficiencyRewardReq
	(*GCGDSTakeCardProficiencyRewardRsp)(nil),              // 128: proto.GCGDSTakeCardProficiencyRewardRsp
	(*GCGDSBanCardNotify)(nil),                             // 129: proto.GCGDSBanCardNotify
	(*GCGTCTavernInfoNotify)(nil),                          // 130: proto.GCGTCTavernInfoNotify
	(*GCGTCInviteReq)(nil),                                 // 131: proto.GCGTCInviteReq
	(*GCGTCInviteRsp)(nil),                                 // 132: proto.GCGTCInviteRsp
	(*GCGTCTavernChallengeData)(nil),                       // 133: proto.GCGTCTavernChallengeData
	(*GCGTCTavernChallengeDataNotify)(nil),                 // 134: proto.GCGTCTavernChallengeDataNotify
	(*GCGTCTavernChallengeUpdateNotify)(nil),               // 135: proto.GCGTCTavernChallengeUpdateNotify
	(*GCGGrowthLevelNotify)(nil),                           // 136: proto.GCGGrowthLevelNotify
	(*GCGGrowthLevelRewardNotify)(nil),                     // 137: proto.GCGGrowthLevelRewardNotify
	(*GCGGrowthLevelTakeRewardReq)(nil),                    // 138: proto.GCGGrowthLevelTakeRewardReq
	(*GCGGrowthLevelTakeRewardRsp)(nil),                    // 139: proto.GCGGrowthLevelTakeRewardRsp
	(*GCGInviteGuestBattleReq)(nil),                        // 140: proto.GCGInviteGuestBattleReq
	(*GCGInviteGuestBattleRsp)(nil),                        // 141: proto.GCGInviteGuestBattleRsp
	(*GCGInviteBattleNotify)(nil),                          // 142: proto.GCGInviteBattleNotify
	(*GCGApplyInviteBattleReq)(nil),                        // 143: proto.GCGApplyInviteBattleReq
	(*GCGApplyInviteBattleRsp)(nil),                        // 144: proto.GCGApplyInviteBattleRsp
	(*GCGApplyInviteBattleNotify)(nil),                     // 145: proto.GCGApplyInviteBattleNotify
	(*GCGWorldPlayerGCGStateReq)(nil),                      // 146: proto.GCGWorldPlayerGCGStateReq
	(*GCGPlayerGCGState)(nil),                              // 147: proto.GCGPlayerGCGState
	(*GCGWorldPlayerGCGStateRsp)(nil),                      // 148: proto.GCGWorldPlayerGCGStateRsp
	(*GCGSettleNotify)(nil),                                // 149: proto.GCGSettleNotify
	(*GCGResourceStateNotify)(nil),                         // 150: proto.GCGResourceStateNotify
	(*GCGClientSettleReq)(nil),                             // 151: proto.GCGClientSettleReq
	(*GCGClientSettleRsp)(nil),                             // 152: proto.GCGClientSettleRsp
	(*GCGSettleOptionReq)(nil),                             // 153: proto.GCGSettleOptionReq
	(*GCGSettleOptionRsp)(nil),                             // 154: proto.GCGSettleOptionRsp
	(*GCGBasicDataNotify)(nil),                             // 155: proto.GCGBasicDataNotify
	(*GCGTavernNpcInfo)(nil),                               // 156: proto.GCGTavernNpcInfo
	(*GCGTavernNpcInfoNotify)(nil),                         // 157: proto.GCGTavernNpcInfoNotify
	(*GCGStartChallengeReq)(nil),                           // 158: proto.GCGStartChallengeReq
	(*GCGStartChallengeRsp)(nil),                           // 159: proto.GCGStartChallengeRsp
	(*GCGWeekChallengeInfo)(nil),                           // 160: proto.GCGWeekChallengeInfo
	(*GCGWeekChallengeInfoNotify)(nil),                     // 161: proto.GCGWeekChallengeInfoNotify
	(*GCGStartChallengeByCheckRewardReq)(nil),              // 162: proto.GCGStartChallengeByCheckRewardReq
	(*GCGStartChallengeByCheckRewardRsp)(nil),              // 163: proto.GCGStartChallengeByCheckRewardRsp
	(*GCGLevelData)(nil),                                   // 164: proto.GCGLevelData
	(*GCGBossChallengeData)(nil),                           // 165: proto.GCGBossChallengeData
	(*GCGLevelChallengeNotify)(nil),                        // 166: proto.GCGLevelChallengeNotify
	(*GCGLevelChallengeFinishNotify)(nil),                  // 167: proto.GCGLevelChallengeFinishNotify
	(*GCGWorldChallengeUnlockNotify)(nil),                  // 168: proto.GCGWorldChallengeUnlockNotify
	(*GCGBossChallengeUpdateNotify)(nil),                   // 169: proto.GCGBossChallengeUpdateNotify
	(*GCGLevelChallengeDeleteNotify)(nil),                  // 170: proto.GCGLevelChallengeDeleteNotify
	nil,                                                    // 171: proto.GCGAttackCostInfo.CostMapEntry
	nil,                                                    // 172: proto.GCGPlayCardCostInfo.CostMapEntry
	nil,                                                    // 173: proto.GCGSelectOnStageCostInfo.CostMapEntry
	nil,                                                    // 174: proto.GCGMsgPhaseChange.AllowControllerMapEntry
	nil,                                                    // 175: proto.GCGMsgSkillLimitsChange.CardLimitsChangeMapEntry
	nil,                                                    // 176: proto.GCGMsgAddDice.BeforeDiceMapEntry
	nil,                                                    // 177: proto.GCGMsgAddDice.DiceMapEntry
	nil,                                                    // 178: proto.GCGMsgUpdateController.AllowControllerMapEntry
	nil,                                                    // 179: proto.GCGMsgPVEIntentionInfo.IntentionMapEntry
	nil,                                                    // 180: proto.GCGPlayerField.ModifyZoneMapEntry
	nil,                                                    // 181: proto.GCGPhase.AllowControllerMapEntry
	nil,                                                    // 182: proto.GCGPlayerBriefData.CardFaceMapEntry
	nil,                                                    // 183: proto.GCGSkillPreviewInfo.CardTokenChangeMapEntry
	nil,                                                    // 184: proto.GCGSkillPreviewInfo.ReactionInfoMapEntry
	nil,                                                    // 185: proto.GCGSkillPreviewInfo.HpInfoMapEntry
	(GCGReason)(0),                                         // 186: proto.GCGReason
	(GCGPhaseType)(0),                                      // 187: proto.GCGPhaseType
	(GCGZoneType)(0),                                       // 188: proto.GCGZoneType
	(GCGDiceSideType)(0),                                   // 189: proto.GCGDiceSideType
	(GCGIntentionChangeType)(0),                            // 190: proto.GCGIntentionChangeType
	(GCGClientPerformType)(0),                              // 191: proto.GCGClientPerformType
	(GCGEndReason)(0),                                      // 192: proto.GCGEndReason
	(GCGActionType)(0),                                     // 193: proto.GCGActionType
	(*ProfilePicture)(nil),                                 // 194: proto.ProfilePicture
	(GCGGameBusinessType)(0),                               // 195: proto.GCGGameBusinessType
	(*ItemParam)(nil),                                      // 196: proto.ItemParam
	(GCGLevelType)(0),                                      // 197: proto.GCGLevelType
}
var file_cmd_cmd_gcg_proto_depIdxs = []int32{
	171, // 0: proto.GCGAttackCostInfo.cost_map:type_name -> proto.GCGAttackCostInfo.CostMapEntry
	172, // 1: proto.GCGPlayCardCostInfo.cost_map:type_name -> proto.GCGPlayCardCostInfo.CostMapEntry
	173, // 2: proto.GCGSelectOnStageCostInfo.cost_map:type_name -> proto.GCGSelectOnStageCostInfo.CostMapEntry
	4,   // 3: proto.GCGCostReviseInfo.play_card_cost_list:type_name -> proto.GCGPlayCardCostInfo
	5,   // 4: proto.GCGCostReviseInfo.select_on_stage_cost_list:type_name -> proto.GCGSelectOnStageCostInfo
	3,   // 5: proto.GCGCostReviseInfo.attack_cost_list:type_name -> proto.GCGAttackCostInfo
	186, // 6: proto.GCGMsgTokenChange.reason:type_name -> proto.GCGReason
	174, // 7: proto.GCGMsgPhaseChange.allow_controller_map:type_name -> proto.GCGMsgPhaseChange.AllowControllerMapEntry
	187, // 8: proto.GCGMsgPhaseChange.before_phase:type_name -> proto.GCGPhaseType
	187, // 9: proto.GCGMsgPhaseChange.after_phase:type_name -> proto.GCGPhaseType
	188, // 10: proto.GCGMsgAddCards.zone:type_name -> proto.GCGZoneType
	186, // 11: proto.GCGMsgAddCards.reason:type_name -> proto.GCGReason
	188, // 12: proto.GCGMsgRemoveCards.zone:type_name -> proto.GCGZoneType
	186, // 13: proto.GCGMsgRemoveCards.reason:type_name -> proto.GCGReason
	188, // 14: proto.GCGMsgMoveCard.to:type_name -> proto.GCGZoneType
	188, // 15: proto.GCGMsgMoveCard.from:type_name -> proto.GCGZoneType
	186, // 16: proto.GCGMsgMoveCard.reason:type_name -> proto.GCGReason
	186, // 17: proto.GCGMsgSelectOnStage.reason:type_name -> proto.GCGReason
	189, // 18: proto.GCGMsgDiceRoll.dice_side_list:type_name -> proto.GCGDiceSideType
	189, // 19: proto.GCGMsgDiceReroll.dice_side_list:type_name -> proto.GCGDiceSideType
	20,  // 20: proto.GCGMsgSkillResult.detail_list:type_name -> proto.GCGDamageDetail
	22,  // 21: proto.GCGSkillLimitsInfo.limits_list:type_name -> proto.GCGLimitsInfo
	23,  // 22: proto.GCGCardSkillLimitsInfo.skill_limits_list:type_name -> proto.GCGSkillLimitsInfo
	175, // 23: proto.GCGMsgSkillLimitsChange.card_limits_change_map:type_name -> proto.GCGMsgSkillLimitsChange.CardLimitsChangeMapEntry
	186, // 24: proto.GCGMsgCostDice.reason:type_name -> proto.GCGReason
	176, // 25: proto.GCGMsgAddDice.before_dice_map:type_name -> proto.GCGMsgAddDice.BeforeDiceMapEntry
	177, // 26: proto.GCGMsgAddDice.dice_map:type_name -> proto.GCGMsgAddDice.DiceMapEntry
	186, // 27: proto.GCGMsgAddDice.reason:type_name -> proto.GCGReason
	61,  // 28: proto.GCGMsgNewCard.card:type_name -> proto.GCGCard
	178, // 29: proto.GCGMsgUpdateController.allow_controller_map:type_name -> proto.GCGMsgUpdateController.AllowControllerMapEntry
	186, // 30: proto.GCGMsgModifyAdd.reason:type_name -> proto.GCGReason
	186, // 31: proto.GCGMsgModifyRemove.reason:type_name -> proto.GCGReason
	179, // 32: proto.GCGMsgPVEIntentionInfo.intention_map:type_name -> proto.GCGMsgPVEIntentionInfo.IntentionMapEntry
	32,  // 33: proto.GCGMsgPVEIntentionChange.change_intention_list:type_name -> proto.GCGMsgPVEIntention
	190, // 34: proto.GCGMsgPVEIntentionChange.change_type:type_name -> proto.GCGIntentionChangeType
	191, // 35: proto.GCGMsgClientPerform.perform_type:type_name -> proto.GCGClientPerformType
	192, // 36: proto.GCGMsgGameOver.end_reason:type_name -> proto.GCGEndReason
	187, // 37: proto.GCGMsgOpTimer.phase:type_name -> proto.GCGPhaseType
	61,  // 38: proto.GCGMsgCardUpdate.card:type_name -> proto.GCGCard
	6,   // 39: proto.GCGMsgCostRevise.cost_revise:type_name -> proto.GCGCostReviseInfo
	20,  // 40: proto.GCGMsgNoDamageSkillResult.detail_list:type_name -> proto.GCGDamageDetail
	7,   // 41: proto.GCGMessage.token_change:type_name -> proto.GCGMsgTokenChange
	8,   // 42: proto.GCGMessage.phase_change:type_name -> proto.GCGMsgPhaseChange
	9,   // 43: proto.GCGMessage.add_cards:type_name -> proto.GCGMsgAddCards
	10,  // 44: proto.GCGMessage.remove_cards:type_name -> proto.GCGMsgRemoveCards
	12,  // 45: proto.GCGMessage.select_on_stage:type_name -> proto.GCGMsgSelectOnStage
	14,  // 46: proto.GCGMessage.dice_roll:type_name -> proto.GCGMsgDiceRoll
	15,  // 47: proto.GCGMessage.dice_reroll:type_name -> proto.GCGMsgDiceReroll
	16,  // 48: proto.GCGMessage.pass:type_name -> proto.GCGMsgPass
	17,  // 49: proto.GCGMessage.char_die:type_name -> proto.GCGMsgCharDie
	21,  // 50: proto.GCGMessage.skill_result:type_name -> proto.GCGMsgSkillResult
	26,  // 51: proto.GCGMessage.cost_dice:type_name -> proto.GCGMsgCostDice
	27,  // 52: proto.GCGMessage.add_dice:type_name -> proto.GCGMsgAddDice
	11,  // 53: proto.GCGMessage.move_card:type_name -> proto.GCGMsgMoveCard
	18,  // 54: proto.GCGMessage.use_skill:type_name -> proto.GCGMsgUseSkill
	28,  // 55: proto.GCGMessage.new_card:type_name -> proto.GCGMsgNewCard
	29,  // 56: proto.GCGMessage.update_controller:type_name -> proto.GCGMsgUpdateController
	30,  // 57: proto.GCGMessage.modify_add:type_name -> proto.GCGMsgModifyAdd
	31,  // 58: proto.GCGMessage.modify_remove:type_name -> proto.GCGMsgModifyRemove
	19,  // 59: proto.GCGMessage.use_skill_end:type_name -> proto.GCGMsgUseSkillEnd
	35,  // 60: proto.GCGMessage.duel_data_change:type_name -> proto.GCGMsgDuelDataChange
	36,  // 61: proto.GCGMessage.client_perform:type_name -> proto.GCGMsgClientPerform
	37,  // 62: proto.GCGMessage.game_over:type_name -> proto.GCGMsgGameOver
	38,  // 63: proto.GCGMessage.op_timer:type_name -> proto.GCGMsgOpTimer
	39,  // 64: proto.GCGMessage.waiting_list_change:type_name -> proto.GCGMsgWaitingListChange
	40,  // 65: proto.GCGMessage.card_update:type_name -> proto.GCGMsgCardUpdate
	13,  // 66: proto.GCGMessage.select_on_stage_by_effect:type_name -> proto.GCGMsgSelectOnStageByEffect
	41,  // 67: proto.GCGMessage.cost_revise:type_name -> proto.GCGMsgCostRevise
	42,  // 68: proto.GCGMessage.phase_continue:type_name -> proto.GCGMsgPhaseContinue
	33,  // 69: proto.GCGMessage.pve_intention_info:type_name -> proto.GCGMsgPVEIntentionInfo
	34,  // 70: proto.GCGMessage.pve_intention_change:type_name -> proto.GCGMsgPVEIntentionChange
	25,  // 71: proto.GCGMessage.skill_limits_change:type_name -> proto.GCGMsgSkillLimitsChange
	43,  // 72: proto.GCGMessage.no_damage_skill_result:type_name -> proto.GCGMsgNoDamageSkillResult
	44,  // 73: proto.GCGMessage.reaction_begin:type_name -> proto.GCGMsgReactionBegin
	45,  // 74: proto.GCGMessage.reaction_end:type_name -> proto.GCGMsgReactionEnd
	193, // 75: proto.GCGMessagePack.action_type:type_name -> proto.GCGActionType
	46,  // 76: proto.GCGMessagePack.msg_list:type_name -> proto.GCGMessage
	48,  // 77: proto.GCGOperation.op_redraw:type_name -> proto.GCGOperationRedraw
	49,  // 78: proto.GCGOperation.op_select_on_stage:type_name -> proto.GCGOperationOnStageSelect
	50,  // 79: proto.GCGOperation.op_reroll:type_name -> proto.GCGOperationReroll
	51,  // 80: proto.GCGOperation.op_attack:type_name -> proto.GCGOperationAttack
	52,  // 81: proto.GCGOperation.op_pass:type_name -> proto.GCGOperationPass
	53,  // 82: proto.GCGOperation.op_play_card:type_name -> proto.GCGOperationPlayCard
	54,  // 83: proto.GCGOperation.op_reboot:type_name -> proto.GCGOperationReboot
	55,  // 84: proto.GCGOperation.op_surrender:type_name -> proto.GCGOperationSurrender
	56,  // 85: proto.GCGReplayOperationData.op:type_name -> proto.GCGOperation
	57,  // 86: proto.GCGOperationReplay.operation_data_list:type_name -> proto.GCGReplayOperationData
	58,  // 87: proto.GCGOperationReplay.controller_data_list:type_name -> proto.GCGReplayControllerData
	60,  // 88: proto.GCGCard.token_list:type_name -> proto.GCGToken
	23,  // 89: proto.GCGCard.skill_limits_list:type_name -> proto.GCGSkillLimitsInfo
	180, // 90: proto.GCGPlayerField.modify_zone_map:type_name -> proto.GCGPlayerField.ModifyZoneMapEntry
	62,  // 91: proto.GCGPlayerField.summon_zone:type_name -> proto.GCGZone
	62,  // 92: proto.GCGPlayerField.on_stage_zone:type_name -> proto.GCGZone
	62,  // 93: proto.GCGPlayerField.character_zone:type_name -> proto.GCGZone
	62,  // 94: proto.GCGPlayerField.assist_zone:type_name -> proto.GCGZone
	189, // 95: proto.GCGPlayerField.dice_side_list:type_name -> proto.GCGDiceSideType
	62,  // 96: proto.GCGPlayerField.hand_zone:type_name -> proto.GCGZone
	67,  // 97: proto.GCGPlayerField.intention_list:type_name -> proto.GCGPVEIntention
	63,  // 98: proto.GCGPlayerField.waiting_list:type_name -> proto.GCGWaitingCharacter
	187, // 99: proto.GCGPhase.phase_type:type_name -> proto.GCGPhaseType
	181, // 100: proto.GCGPhase.allow_controller_map:type_name -> proto.GCGPhase.AllowControllerMapEntry
	194, // 101: proto.GCGControllerShowInfo.profile_picture:type_name -> proto.ProfilePicture
	6,   // 102: proto.GCGDuel.cost_revise:type_name -> proto.GCGCostReviseInfo
	195, // 103: proto.GCGDuel.business_type:type_name -> proto.GCGGameBusinessType
	61,  // 104: proto.GCGDuel.history_card_list:type_name -> proto.GCGCard
	61,  // 105: proto.GCGDuel.card_list:type_name -> proto.GCGCard
	47,  // 106: proto.GCGDuel.history_msg_pack_list:type_name -> proto.GCGMessagePack
	64,  // 107: proto.GCGDuel.field_list:type_name -> proto.GCGPlayerField
	65,  // 108: proto.GCGDuel.phase:type_name -> proto.GCGPhase
	67,  // 109: proto.GCGDuel.intetion_list:type_name -> proto.GCGPVEIntention
	68,  // 110: proto.GCGDuel.challenge_list:type_name -> proto.GCGDuelChallenge
	66,  // 111: proto.GCGDuel.show_info_list:type_name -> proto.GCGControllerShowInfo
	56,  // 112: proto.GCGOperationReq.op:type_name -> proto.GCGOperation
	47,  // 113: proto.GCGMessagePackNotify.msg_pack_list:type_name -> proto.GCGMessagePack
	69,  // 114: proto.GCGAskDuelRsp.duel:type_name -> proto.GCGDuel
	182, // 115: proto.GCGPlayerBriefData.card_face_map:type_name -> proto.GCGPlayerBriefData.CardFaceMapEntry
	194, // 116: proto.GCGPlayerBriefData.profile_picture:type_name -> proto.ProfilePicture
	195, // 117: proto.GCGGameBriefData.business_type:type_name -> proto.GCGGameBusinessType
	75,  // 118: proto.GCGGameBriefData.player_brief_list:type_name -> proto.GCGPlayerBriefData
	76,  // 119: proto.GCGGameBriefDataNotify.gcg_brief_data:type_name -> proto.GCGGameBriefData
	0,   // 120: proto.GCGSkillPreviewHpInfo.change_type:type_name -> proto.GCGSkillHpChangeType
	82,  // 121: proto.GCGSkillPreviewElementReactionInfo.reaction_list:type_name -> proto.GCGSkillPreviewReactionInfo
	188, // 122: proto.GCGSkillPreviewCardInfo.zone_type:type_name -> proto.GCGZoneType
	86,  // 123: proto.GCGSkillPreviewTokenChangeInfo.token_change_list:type_name -> proto.GCGSkillPreviewTokenInfo
	84,  // 124: proto.GCGSkillPreviewExtraInfo.fail_added_when_full_list:type_name -> proto.GCGSkillPreviewCardInfo
	84,  // 125: proto.GCGSkillPreviewExtraInfo.refresh_card_when_exist_list:type_name -> proto.GCGSkillPreviewCardInfo
	183, // 126: proto.GCGSkillPreviewInfo.card_token_change_map:type_name -> proto.GCGSkillPreviewInfo.CardTokenChangeMapEntry
	184, // 127: proto.GCGSkillPreviewInfo.reaction_info_map:type_name -> proto.GCGSkillPreviewInfo.ReactionInfoMapEntry
	185, // 128: proto.GCGSkillPreviewInfo.hp_info_map:type_name -> proto.GCGSkillPreviewInfo.HpInfoMapEntry
	84,  // 129: proto.GCGSkillPreviewInfo.add_card_list:type_name -> proto.GCGSkillPreviewCardInfo
	88,  // 130: proto.GCGSkillPreviewInfo.extra_info:type_name -> proto.GCGSkillPreviewExtraInfo
	85,  // 131: proto.GCGSkillPreviewInfo.change_onstage_character_list:type_name -> proto.GCGSkillPreviewOnstageChangeInfo
	84,  // 132: proto.GCGSkillPreviewInfo.rm_card_list:type_name -> proto.GCGSkillPreviewCardInfo
	89,  // 133: proto.GCGChangeOnstageInfo.change_onstage_preview_info:type_name -> proto.GCGSkillPreviewInfo
	89,  // 134: proto.GCGSkillPreviewPlayCardInfo.play_card_info:type_name -> proto.GCGSkillPreviewInfo
	91,  // 135: proto.GCGSkillPreviewNotify.play_card_list:type_name -> proto.GCGSkillPreviewPlayCardInfo
	89,  // 136: proto.GCGSkillPreviewNotify.skill_preview_list:type_name -> proto.GCGSkillPreviewInfo
	90,  // 137: proto.GCGSkillPreviewNotify.change_onstage_preview_list:type_name -> proto.GCGChangeOnstageInfo
	68,  // 138: proto.GCGChallengeUpdateNotify.challenge:type_name -> proto.GCGDuelChallenge
	2,   // 139: proto.GCGGameCreateFailReasonNotify.reason:type_name -> proto.GCGGameCreateFailReasonNotify.GCGGameCreateReason
	101, // 140: proto.GCGDSDataNotify.deck_list:type_name -> proto.GCGDSDeckData
	102, // 141: proto.GCGDSDataNotify.card_list:type_name -> proto.GCGDSCardData
	133, // 142: proto.GCGTCTavernChallengeDataNotify.tavern_challenge_list:type_name -> proto.GCGTCTavernChallengeData
	133, // 143: proto.GCGTCTavernChallengeUpdateNotify.tavern_challenge:type_name -> proto.GCGTCTavernChallengeData
	147, // 144: proto.GCGWorldPlayerGCGStateRsp.player_state:type_name -> proto.GCGPlayerGCGState
	192, // 145: proto.GCGSettleNotify.reason:type_name -> proto.GCGEndReason
	195, // 146: proto.GCGSettleNotify.business_type:type_name -> proto.GCGGameBusinessType
	196, // 147: proto.GCGSettleNotify.reward_item_list:type_name -> proto.ItemParam
	1,   // 148: proto.GCGSettleOptionReq.option:type_name -> proto.GCGSettleOption
	1,   // 149: proto.GCGSettleOptionRsp.option:type_name -> proto.GCGSettleOption
	156, // 150: proto.GCGTavernNpcInfoNotify.week_npc_list:type_name -> proto.GCGTavernNpcInfo
	156, // 151: proto.GCGTavernNpcInfoNotify.character_npc:type_name -> proto.GCGTavernNpcInfo
	156, // 152: proto.GCGTavernNpcInfoNotify.const_npc_list:type_name -> proto.GCGTavernNpcInfo
	197, // 153: proto.GCGStartChallengeReq.level_type:type_name -> proto.GCGLevelType
	197, // 154: proto.GCGStartChallengeRsp.level_type:type_name -> proto.GCGLevelType
	160, // 155: proto.GCGWeekChallengeInfoNotify.challenge_info_list:type_name -> proto.GCGWeekChallengeInfo
	197, // 156: proto.GCGStartChallengeByCheckRewardReq.level_type:type_name -> proto.GCGLevelType
	197, // 157: proto.GCGStartChallengeByCheckRewardRsp.level_type:type_name -> proto.GCGLevelType
	165, // 158: proto.GCGLevelChallengeNotify.unlock_boss_challenge_list:type_name -> proto.GCGBossChallengeData
	164, // 159: proto.GCGLevelChallengeNotify.level_list:type_name -> proto.GCGLevelData
	165, // 160: proto.GCGBossChallengeUpdateNotify.boss_challenge:type_name -> proto.GCGBossChallengeData
	24,  // 161: proto.GCGMsgSkillLimitsChange.CardLimitsChangeMapEntry.value:type_name -> proto.GCGCardSkillLimitsInfo
	189, // 162: proto.GCGMsgAddDice.BeforeDiceMapEntry.value:type_name -> proto.GCGDiceSideType
	189, // 163: proto.GCGMsgAddDice.DiceMapEntry.value:type_name -> proto.GCGDiceSideType
	32,  // 164: proto.GCGMsgPVEIntentionInfo.IntentionMapEntry.value:type_name -> proto.GCGMsgPVEIntention
	62,  // 165: proto.GCGPlayerField.ModifyZoneMapEntry.value:type_name -> proto.GCGZone
	87,  // 166: proto.GCGSkillPreviewInfo.CardTokenChangeMapEntry.value:type_name -> proto.GCGSkillPreviewTokenChangeInfo
	83,  // 167: proto.GCGSkillPreviewInfo.ReactionInfoMapEntry.value:type_name -> proto.GCGSkillPreviewElementReactionInfo
	81,  // 168: proto.GCGSkillPreviewInfo.HpInfoMapEntry.value:type_name -> proto.GCGSkillPreviewHpInfo
	169, // [169:169] is the sub-list for method output_type
	169, // [169:169] is the sub-list for method input_type
	169, // [169:169] is the sub-list for extension type_name
	169, // [169:169] is the sub-list for extension extendee
	0,   // [0:169] is the sub-list for field type_name
}

func init() { file_cmd_cmd_gcg_proto_init() }
func file_cmd_cmd_gcg_proto_init() {
	if File_cmd_cmd_gcg_proto != nil {
		return
	}
	file_define_proto_init()
	file_cmd_cmd_gcg_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cmd_cmd_gcg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGAttackCostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGPlayCardCostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGSelectOnStageCostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGCostReviseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgPhaseChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgAddCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgRemoveCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgMoveCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgSelectOnStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgSelectOnStageByEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgDiceRoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgDiceReroll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgPass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgCharDie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgUseSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgUseSkillEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDamageDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgSkillResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGLimitsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGSkillLimitsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGCardSkillLimitsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgSkillLimitsChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgCostDice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgAddDice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgNewCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgUpdateController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgModifyAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgModifyRemove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgPVEIntention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgPVEIntentionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgPVEIntentionChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgDuelDataChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgClientPerform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgGameOver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgOpTimer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgWaitingListChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgCardUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgCostRevise); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgPhaseContinue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgNoDamageSkillResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgReactionBegin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMsgReactionEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMessagePack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGOperationRedraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGOperationOnStageSelect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGOperationReroll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGOperationAttack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGOperationPass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGOperationPlayCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGOperationReboot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGOperationSurrender); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGReplayOperationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGReplayControllerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGOperationReplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGZone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGWaitingCharacter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGPlayerField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGPhase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGControllerShowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGPVEIntention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDuelChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDuel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGOperationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGOperationRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMessagePackNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGAskDuelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGAskDuelRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGPlayerBriefData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGGameBriefData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGGameBriefDataNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGInitFinishReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGInitFinishRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGHeartBeatNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGSkillPreviewHpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGSkillPreviewReactionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGSkillPreviewElementReactionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGSkillPreviewCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGSkillPreviewOnstageChangeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGSkillPreviewTokenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGSkillPreviewTokenChangeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGSkillPreviewExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGSkillPreviewInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGChangeOnstageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGSkillPreviewPlayCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGSkillPreviewNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGSkillPreviewAskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGSkillPreviewAskRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGChallengeUpdateNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGBackToDuelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGBackToDuelRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDebugReplayNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGGameMaxNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGGameCreateFailReasonNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSDeckData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSCardData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSDataNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSCardBackUnlockNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSFieldUnlockNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSCardFaceUnlockNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSCardNumChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSChangeCardFaceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSChangeCardFaceRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSChangeCardBackReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSChangeCardBackRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSChangeFieldReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSChangeFieldRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSChangeDeckNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSChangeDeckNameRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSDeckSaveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSDeckSaveRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSChangeCurDeckReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSChangeCurDeckRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSCurDeckChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSDeleteDeckReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSDeleteDeckRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSDeckUnlockNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSCardProficiencyNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSDeckUpdateNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSCardFaceUpdateNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSTakeCardProficiencyRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSTakeCardProficiencyRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDSBanCardNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGTCTavernInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGTCInviteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGTCInviteRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGTCTavernChallengeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGTCTavernChallengeDataNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGTCTavernChallengeUpdateNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGGrowthLevelNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGGrowthLevelRewardNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGGrowthLevelTakeRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGGrowthLevelTakeRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGInviteGuestBattleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGInviteGuestBattleRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGInviteBattleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGApplyInviteBattleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGApplyInviteBattleRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGApplyInviteBattleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGWorldPlayerGCGStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGPlayerGCGState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGWorldPlayerGCGStateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGResourceStateNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGClientSettleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGClientSettleRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGSettleOptionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGSettleOptionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGBasicDataNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGTavernNpcInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGTavernNpcInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGStartChallengeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGStartChallengeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGWeekChallengeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGWeekChallengeInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGStartChallengeByCheckRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGStartChallengeByCheckRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGLevelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGBossChallengeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGLevelChallengeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGLevelChallengeFinishNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGWorldChallengeUnlockNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGBossChallengeUpdateNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_gcg_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGLevelChallengeDeleteNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cmd_cmd_gcg_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*GCGMessage_TokenChange)(nil),
		(*GCGMessage_PhaseChange)(nil),
		(*GCGMessage_AddCards)(nil),
		(*GCGMessage_RemoveCards)(nil),
		(*GCGMessage_SelectOnStage)(nil),
		(*GCGMessage_DiceRoll)(nil),
		(*GCGMessage_DiceReroll)(nil),
		(*GCGMessage_Pass)(nil),
		(*GCGMessage_CharDie)(nil),
		(*GCGMessage_SkillResult)(nil),
		(*GCGMessage_CostDice)(nil),
		(*GCGMessage_AddDice)(nil),
		(*GCGMessage_MoveCard)(nil),
		(*GCGMessage_UseSkill)(nil),
		(*GCGMessage_NewCard)(nil),
		(*GCGMessage_UpdateController)(nil),
		(*GCGMessage_ModifyAdd)(nil),
		(*GCGMessage_ModifyRemove)(nil),
		(*GCGMessage_UseSkillEnd)(nil),
		(*GCGMessage_DuelDataChange)(nil),
		(*GCGMessage_ClientPerform)(nil),
		(*GCGMessage_GameOver)(nil),
		(*GCGMessage_OpTimer)(nil),
		(*GCGMessage_WaitingListChange)(nil),
		(*GCGMessage_CardUpdate)(nil),
		(*GCGMessage_SelectOnStageByEffect)(nil),
		(*GCGMessage_CostRevise)(nil),
		(*GCGMessage_PhaseContinue)(nil),
		(*GCGMessage_PveIntentionInfo)(nil),
		(*GCGMessage_PveIntentionChange)(nil),
		(*GCGMessage_SkillLimitsChange)(nil),
		(*GCGMessage_NoDamageSkillResult)(nil),
		(*GCGMessage_ReactionBegin)(nil),
		(*GCGMessage_ReactionEnd)(nil),
	}
	file_cmd_cmd_gcg_proto_msgTypes[53].OneofWrappers = []interface{}{
		(*GCGOperation_OpRedraw)(nil),
		(*GCGOperation_OpSelectOnStage)(nil),
		(*GCGOperation_OpReroll)(nil),
		(*GCGOperation_OpAttack)(nil),
		(*GCGOperation_OpPass)(nil),
		(*GCGOperation_OpPlayCard)(nil),
		(*GCGOperation_OpReboot)(nil),
		(*GCGOperation_OpSurrender)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cmd_cmd_gcg_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   183,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cmd_cmd_gcg_proto_goTypes,
		DependencyIndexes: file_cmd_cmd_gcg_proto_depIdxs,
		EnumInfos:         file_cmd_cmd_gcg_proto_enumTypes,
		MessageInfos:      file_cmd_cmd_gcg_proto_msgTypes,
	}.Build()
	File_cmd_cmd_gcg_proto = out.File
	file_cmd_cmd_gcg_proto_rawDesc = nil
	file_cmd_cmd_gcg_proto_goTypes = nil
	file_cmd_cmd_gcg_proto_depIdxs = nil
}
