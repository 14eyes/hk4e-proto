// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: cmd/cmd_battle_pass.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BattlePassUnlockStatus int32

const (
	BattlePassUnlockStatus_BATTLE_PASS_UNLOCK_INVALID BattlePassUnlockStatus = 0
	BattlePassUnlockStatus_BATTLE_PASS_UNLOCK_FREE    BattlePassUnlockStatus = 1
	BattlePassUnlockStatus_BATTLE_PASS_UNLOCK_PAID    BattlePassUnlockStatus = 2
)

// Enum value maps for BattlePassUnlockStatus.
var (
	BattlePassUnlockStatus_name = map[int32]string{
		0: "BATTLE_PASS_UNLOCK_INVALID",
		1: "BATTLE_PASS_UNLOCK_FREE",
		2: "BATTLE_PASS_UNLOCK_PAID",
	}
	BattlePassUnlockStatus_value = map[string]int32{
		"BATTLE_PASS_UNLOCK_INVALID": 0,
		"BATTLE_PASS_UNLOCK_FREE":    1,
		"BATTLE_PASS_UNLOCK_PAID":    2,
	}
)

func (x BattlePassUnlockStatus) Enum() *BattlePassUnlockStatus {
	p := new(BattlePassUnlockStatus)
	*p = x
	return p
}

func (x BattlePassUnlockStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BattlePassUnlockStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_battle_pass_proto_enumTypes[0].Descriptor()
}

func (BattlePassUnlockStatus) Type() protoreflect.EnumType {
	return &file_cmd_cmd_battle_pass_proto_enumTypes[0]
}

func (x BattlePassUnlockStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BattlePassUnlockStatus.Descriptor instead.
func (BattlePassUnlockStatus) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_battle_pass_proto_rawDescGZIP(), []int{0}
}

type BattlePassMission_MissionStatus int32

const (
	BattlePassMission_MISSION_INVALID     BattlePassMission_MissionStatus = 0
	BattlePassMission_MISSION_UNFINISHED  BattlePassMission_MissionStatus = 1
	BattlePassMission_MISSION_FINISHED    BattlePassMission_MissionStatus = 2
	BattlePassMission_MISSION_POINT_TAKEN BattlePassMission_MissionStatus = 3
)

// Enum value maps for BattlePassMission_MissionStatus.
var (
	BattlePassMission_MissionStatus_name = map[int32]string{
		0: "MISSION_INVALID",
		1: "MISSION_UNFINISHED",
		2: "MISSION_FINISHED",
		3: "MISSION_POINT_TAKEN",
	}
	BattlePassMission_MissionStatus_value = map[string]int32{
		"MISSION_INVALID":     0,
		"MISSION_UNFINISHED":  1,
		"MISSION_FINISHED":    2,
		"MISSION_POINT_TAKEN": 3,
	}
)

func (x BattlePassMission_MissionStatus) Enum() *BattlePassMission_MissionStatus {
	p := new(BattlePassMission_MissionStatus)
	*p = x
	return p
}

func (x BattlePassMission_MissionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BattlePassMission_MissionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_battle_pass_proto_enumTypes[1].Descriptor()
}

func (BattlePassMission_MissionStatus) Type() protoreflect.EnumType {
	return &file_cmd_cmd_battle_pass_proto_enumTypes[1]
}

func (x BattlePassMission_MissionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BattlePassMission_MissionStatus.Descriptor instead.
func (BattlePassMission_MissionStatus) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_battle_pass_proto_rawDescGZIP(), []int{1, 0}
}

type BattlePassCycle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CycleIdx  uint32 `protobuf:"varint,3,opt,name=cycle_idx,json=cycleIdx,proto3" json:"cycle_idx,omitempty"`
	EndTime   uint32 `protobuf:"varint,10,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	BeginTime uint32 `protobuf:"varint,13,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
}

func (x *BattlePassCycle) Reset() {
	*x = BattlePassCycle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_battle_pass_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePassCycle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePassCycle) ProtoMessage() {}

func (x *BattlePassCycle) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_battle_pass_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePassCycle.ProtoReflect.Descriptor instead.
func (*BattlePassCycle) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_battle_pass_proto_rawDescGZIP(), []int{0}
}

func (x *BattlePassCycle) GetCycleIdx() uint32 {
	if x != nil {
		return x.CycleIdx
	}
	return 0
}

func (x *BattlePassCycle) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *BattlePassCycle) GetBeginTime() uint32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

type BattlePassMission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurProgress           uint32                          `protobuf:"varint,13,opt,name=cur_progress,json=curProgress,proto3" json:"cur_progress,omitempty"`
	MissionStatus         BattlePassMission_MissionStatus `protobuf:"varint,15,opt,name=mission_status,json=missionStatus,proto3,enum=proto.BattlePassMission_MissionStatus" json:"mission_status,omitempty"`
	MissionId             uint32                          `protobuf:"varint,11,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"`
	RewardBattlePassPoint uint32                          `protobuf:"varint,3,opt,name=reward_battle_pass_point,json=rewardBattlePassPoint,proto3" json:"reward_battle_pass_point,omitempty"`
	MissionType           uint32                          `protobuf:"varint,12,opt,name=mission_type,json=missionType,proto3" json:"mission_type,omitempty"`
	TotalProgress         uint32                          `protobuf:"varint,6,opt,name=total_progress,json=totalProgress,proto3" json:"total_progress,omitempty"`
}

func (x *BattlePassMission) Reset() {
	*x = BattlePassMission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_battle_pass_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePassMission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePassMission) ProtoMessage() {}

func (x *BattlePassMission) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_battle_pass_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePassMission.ProtoReflect.Descriptor instead.
func (*BattlePassMission) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_battle_pass_proto_rawDescGZIP(), []int{1}
}

func (x *BattlePassMission) GetCurProgress() uint32 {
	if x != nil {
		return x.CurProgress
	}
	return 0
}

func (x *BattlePassMission) GetMissionStatus() BattlePassMission_MissionStatus {
	if x != nil {
		return x.MissionStatus
	}
	return BattlePassMission_MISSION_INVALID
}

func (x *BattlePassMission) GetMissionId() uint32 {
	if x != nil {
		return x.MissionId
	}
	return 0
}

func (x *BattlePassMission) GetRewardBattlePassPoint() uint32 {
	if x != nil {
		return x.RewardBattlePassPoint
	}
	return 0
}

func (x *BattlePassMission) GetMissionType() uint32 {
	if x != nil {
		return x.MissionType
	}
	return 0
}

func (x *BattlePassMission) GetTotalProgress() uint32 {
	if x != nil {
		return x.TotalProgress
	}
	return 0
}

type BattlePassRewardTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level        uint32                 `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	UnlockStatus BattlePassUnlockStatus `protobuf:"varint,2,opt,name=unlock_status,json=unlockStatus,proto3,enum=proto.BattlePassUnlockStatus" json:"unlock_status,omitempty"`
	RewardId     uint32                 `protobuf:"varint,7,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
}

func (x *BattlePassRewardTag) Reset() {
	*x = BattlePassRewardTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_battle_pass_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePassRewardTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePassRewardTag) ProtoMessage() {}

func (x *BattlePassRewardTag) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_battle_pass_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePassRewardTag.ProtoReflect.Descriptor instead.
func (*BattlePassRewardTag) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_battle_pass_proto_rawDescGZIP(), []int{2}
}

func (x *BattlePassRewardTag) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *BattlePassRewardTag) GetUnlockStatus() BattlePassUnlockStatus {
	if x != nil {
		return x.UnlockStatus
	}
	return BattlePassUnlockStatus_BATTLE_PASS_UNLOCK_INVALID
}

func (x *BattlePassRewardTag) GetRewardId() uint32 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

type BattlePassProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NormalProductId  string `protobuf:"bytes,13,opt,name=normal_product_id,json=normalProductId,proto3" json:"normal_product_id,omitempty"`
	ExtraProductId   string `protobuf:"bytes,10,opt,name=extra_product_id,json=extraProductId,proto3" json:"extra_product_id,omitempty"`
	UpgradeProductId string `protobuf:"bytes,6,opt,name=upgrade_product_id,json=upgradeProductId,proto3" json:"upgrade_product_id,omitempty"`
}

func (x *BattlePassProduct) Reset() {
	*x = BattlePassProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_battle_pass_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePassProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePassProduct) ProtoMessage() {}

func (x *BattlePassProduct) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_battle_pass_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePassProduct.ProtoReflect.Descriptor instead.
func (*BattlePassProduct) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_battle_pass_proto_rawDescGZIP(), []int{3}
}

func (x *BattlePassProduct) GetNormalProductId() string {
	if x != nil {
		return x.NormalProductId
	}
	return ""
}

func (x *BattlePassProduct) GetExtraProductId() string {
	if x != nil {
		return x.ExtraProductId
	}
	return ""
}

func (x *BattlePassProduct) GetUpgradeProductId() string {
	if x != nil {
		return x.UpgradeProductId
	}
	return ""
}

type BattlePassSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level                  uint32                 `protobuf:"varint,14,opt,name=level,proto3" json:"level,omitempty"`
	BeginTime              uint32                 `protobuf:"varint,2,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	EndTime                uint32                 `protobuf:"varint,15,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Point                  uint32                 `protobuf:"varint,1,opt,name=point,proto3" json:"point,omitempty"`
	CurCycle               *BattlePassCycle       `protobuf:"bytes,4,opt,name=cur_cycle,json=curCycle,proto3" json:"cur_cycle,omitempty"`
	UnlockStatus           BattlePassUnlockStatus `protobuf:"varint,7,opt,name=unlock_status,json=unlockStatus,proto3,enum=proto.BattlePassUnlockStatus" json:"unlock_status,omitempty"`
	RewardTakenList        []*BattlePassRewardTag `protobuf:"bytes,11,rep,name=reward_taken_list,json=rewardTakenList,proto3" json:"reward_taken_list,omitempty"`
	CurCyclePoints         uint32                 `protobuf:"varint,10,opt,name=cur_cycle_points,json=curCyclePoints,proto3" json:"cur_cycle_points,omitempty"`
	PaidPlatformFlags      uint32                 `protobuf:"varint,12,opt,name=paid_platform_flags,json=paidPlatformFlags,proto3" json:"paid_platform_flags,omitempty"`
	ProductInfo            *BattlePassProduct     `protobuf:"bytes,13,opt,name=product_info,json=productInfo,proto3" json:"product_info,omitempty"`
	IsExtraPaidRewardTaken bool                   `protobuf:"varint,6,opt,name=is_extra_paid_reward_taken,json=isExtraPaidRewardTaken,proto3" json:"is_extra_paid_reward_taken,omitempty"`
	IsViewed               bool                   `protobuf:"varint,3,opt,name=is_viewed,json=isViewed,proto3" json:"is_viewed,omitempty"`
	ScheduleId             uint32                 `protobuf:"varint,9,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *BattlePassSchedule) Reset() {
	*x = BattlePassSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_battle_pass_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePassSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePassSchedule) ProtoMessage() {}

func (x *BattlePassSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_battle_pass_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePassSchedule.ProtoReflect.Descriptor instead.
func (*BattlePassSchedule) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_battle_pass_proto_rawDescGZIP(), []int{4}
}

func (x *BattlePassSchedule) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *BattlePassSchedule) GetBeginTime() uint32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *BattlePassSchedule) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *BattlePassSchedule) GetPoint() uint32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *BattlePassSchedule) GetCurCycle() *BattlePassCycle {
	if x != nil {
		return x.CurCycle
	}
	return nil
}

func (x *BattlePassSchedule) GetUnlockStatus() BattlePassUnlockStatus {
	if x != nil {
		return x.UnlockStatus
	}
	return BattlePassUnlockStatus_BATTLE_PASS_UNLOCK_INVALID
}

func (x *BattlePassSchedule) GetRewardTakenList() []*BattlePassRewardTag {
	if x != nil {
		return x.RewardTakenList
	}
	return nil
}

func (x *BattlePassSchedule) GetCurCyclePoints() uint32 {
	if x != nil {
		return x.CurCyclePoints
	}
	return 0
}

func (x *BattlePassSchedule) GetPaidPlatformFlags() uint32 {
	if x != nil {
		return x.PaidPlatformFlags
	}
	return 0
}

func (x *BattlePassSchedule) GetProductInfo() *BattlePassProduct {
	if x != nil {
		return x.ProductInfo
	}
	return nil
}

func (x *BattlePassSchedule) GetIsExtraPaidRewardTaken() bool {
	if x != nil {
		return x.IsExtraPaidRewardTaken
	}
	return false
}

func (x *BattlePassSchedule) GetIsViewed() bool {
	if x != nil {
		return x.IsViewed
	}
	return false
}

func (x *BattlePassSchedule) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type BattlePassAllDataNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HaveCurSchedule bool                 `protobuf:"varint,2,opt,name=have_cur_schedule,json=haveCurSchedule,proto3" json:"have_cur_schedule,omitempty"`
	MissionList     []*BattlePassMission `protobuf:"bytes,4,rep,name=mission_list,json=missionList,proto3" json:"mission_list,omitempty"`
	CurSchedule     *BattlePassSchedule  `protobuf:"bytes,1,opt,name=cur_schedule,json=curSchedule,proto3" json:"cur_schedule,omitempty"`
}

func (x *BattlePassAllDataNotify) Reset() {
	*x = BattlePassAllDataNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_battle_pass_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePassAllDataNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePassAllDataNotify) ProtoMessage() {}

func (x *BattlePassAllDataNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_battle_pass_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePassAllDataNotify.ProtoReflect.Descriptor instead.
func (*BattlePassAllDataNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_battle_pass_proto_rawDescGZIP(), []int{5}
}

func (x *BattlePassAllDataNotify) GetHaveCurSchedule() bool {
	if x != nil {
		return x.HaveCurSchedule
	}
	return false
}

func (x *BattlePassAllDataNotify) GetMissionList() []*BattlePassMission {
	if x != nil {
		return x.MissionList
	}
	return nil
}

func (x *BattlePassAllDataNotify) GetCurSchedule() *BattlePassSchedule {
	if x != nil {
		return x.CurSchedule
	}
	return nil
}

type BattlePassMissionUpdateNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissionList []*BattlePassMission `protobuf:"bytes,1,rep,name=mission_list,json=missionList,proto3" json:"mission_list,omitempty"`
}

func (x *BattlePassMissionUpdateNotify) Reset() {
	*x = BattlePassMissionUpdateNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_battle_pass_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePassMissionUpdateNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePassMissionUpdateNotify) ProtoMessage() {}

func (x *BattlePassMissionUpdateNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_battle_pass_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePassMissionUpdateNotify.ProtoReflect.Descriptor instead.
func (*BattlePassMissionUpdateNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_battle_pass_proto_rawDescGZIP(), []int{6}
}

func (x *BattlePassMissionUpdateNotify) GetMissionList() []*BattlePassMission {
	if x != nil {
		return x.MissionList
	}
	return nil
}

type BattlePassMissionDelNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelMissionIdList []uint32 `protobuf:"varint,10,rep,packed,name=del_mission_id_list,json=delMissionIdList,proto3" json:"del_mission_id_list,omitempty"`
}

func (x *BattlePassMissionDelNotify) Reset() {
	*x = BattlePassMissionDelNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_battle_pass_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePassMissionDelNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePassMissionDelNotify) ProtoMessage() {}

func (x *BattlePassMissionDelNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_battle_pass_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePassMissionDelNotify.ProtoReflect.Descriptor instead.
func (*BattlePassMissionDelNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_battle_pass_proto_rawDescGZIP(), []int{7}
}

func (x *BattlePassMissionDelNotify) GetDelMissionIdList() []uint32 {
	if x != nil {
		return x.DelMissionIdList
	}
	return nil
}

type BattlePassCurScheduleUpdateNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HaveCurSchedule bool                `protobuf:"varint,11,opt,name=have_cur_schedule,json=haveCurSchedule,proto3" json:"have_cur_schedule,omitempty"`
	CurSchedule     *BattlePassSchedule `protobuf:"bytes,1,opt,name=cur_schedule,json=curSchedule,proto3" json:"cur_schedule,omitempty"`
}

func (x *BattlePassCurScheduleUpdateNotify) Reset() {
	*x = BattlePassCurScheduleUpdateNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_battle_pass_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePassCurScheduleUpdateNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePassCurScheduleUpdateNotify) ProtoMessage() {}

func (x *BattlePassCurScheduleUpdateNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_battle_pass_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePassCurScheduleUpdateNotify.ProtoReflect.Descriptor instead.
func (*BattlePassCurScheduleUpdateNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_battle_pass_proto_rawDescGZIP(), []int{8}
}

func (x *BattlePassCurScheduleUpdateNotify) GetHaveCurSchedule() bool {
	if x != nil {
		return x.HaveCurSchedule
	}
	return false
}

func (x *BattlePassCurScheduleUpdateNotify) GetCurSchedule() *BattlePassSchedule {
	if x != nil {
		return x.CurSchedule
	}
	return nil
}

type BattlePassRewardTakeOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag       *BattlePassRewardTag `protobuf:"bytes,10,opt,name=tag,proto3" json:"tag,omitempty"`
	OptionIdx uint32               `protobuf:"varint,14,opt,name=option_idx,json=optionIdx,proto3" json:"option_idx,omitempty"`
}

func (x *BattlePassRewardTakeOption) Reset() {
	*x = BattlePassRewardTakeOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_battle_pass_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePassRewardTakeOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePassRewardTakeOption) ProtoMessage() {}

func (x *BattlePassRewardTakeOption) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_battle_pass_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePassRewardTakeOption.ProtoReflect.Descriptor instead.
func (*BattlePassRewardTakeOption) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_battle_pass_proto_rawDescGZIP(), []int{9}
}

func (x *BattlePassRewardTakeOption) GetTag() *BattlePassRewardTag {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *BattlePassRewardTakeOption) GetOptionIdx() uint32 {
	if x != nil {
		return x.OptionIdx
	}
	return 0
}

type TakeBattlePassRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TakeOptionList []*BattlePassRewardTakeOption `protobuf:"bytes,12,rep,name=take_option_list,json=takeOptionList,proto3" json:"take_option_list,omitempty"`
}

func (x *TakeBattlePassRewardReq) Reset() {
	*x = TakeBattlePassRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_battle_pass_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeBattlePassRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeBattlePassRewardReq) ProtoMessage() {}

func (x *TakeBattlePassRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_battle_pass_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeBattlePassRewardReq.ProtoReflect.Descriptor instead.
func (*TakeBattlePassRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_battle_pass_proto_rawDescGZIP(), []int{10}
}

func (x *TakeBattlePassRewardReq) GetTakeOptionList() []*BattlePassRewardTakeOption {
	if x != nil {
		return x.TakeOptionList
	}
	return nil
}

type TakeBattlePassRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemList       []*ItemParam                  `protobuf:"bytes,7,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
	Retcode        int32                         `protobuf:"varint,13,opt,name=retcode,proto3" json:"retcode,omitempty"`
	TakeOptionList []*BattlePassRewardTakeOption `protobuf:"bytes,9,rep,name=take_option_list,json=takeOptionList,proto3" json:"take_option_list,omitempty"`
}

func (x *TakeBattlePassRewardRsp) Reset() {
	*x = TakeBattlePassRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_battle_pass_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeBattlePassRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeBattlePassRewardRsp) ProtoMessage() {}

func (x *TakeBattlePassRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_battle_pass_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeBattlePassRewardRsp.ProtoReflect.Descriptor instead.
func (*TakeBattlePassRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_battle_pass_proto_rawDescGZIP(), []int{11}
}

func (x *TakeBattlePassRewardRsp) GetItemList() []*ItemParam {
	if x != nil {
		return x.ItemList
	}
	return nil
}

func (x *TakeBattlePassRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *TakeBattlePassRewardRsp) GetTakeOptionList() []*BattlePassRewardTakeOption {
	if x != nil {
		return x.TakeOptionList
	}
	return nil
}

type TakeBattlePassMissionPointReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissionIdList []uint32 `protobuf:"varint,5,rep,packed,name=mission_id_list,json=missionIdList,proto3" json:"mission_id_list,omitempty"`
}

func (x *TakeBattlePassMissionPointReq) Reset() {
	*x = TakeBattlePassMissionPointReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_battle_pass_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeBattlePassMissionPointReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeBattlePassMissionPointReq) ProtoMessage() {}

func (x *TakeBattlePassMissionPointReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_battle_pass_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeBattlePassMissionPointReq.ProtoReflect.Descriptor instead.
func (*TakeBattlePassMissionPointReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_battle_pass_proto_rawDescGZIP(), []int{12}
}

func (x *TakeBattlePassMissionPointReq) GetMissionIdList() []uint32 {
	if x != nil {
		return x.MissionIdList
	}
	return nil
}

type TakeBattlePassMissionPointRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode       int32    `protobuf:"varint,4,opt,name=retcode,proto3" json:"retcode,omitempty"`
	MissionIdList []uint32 `protobuf:"varint,11,rep,packed,name=mission_id_list,json=missionIdList,proto3" json:"mission_id_list,omitempty"`
}

func (x *TakeBattlePassMissionPointRsp) Reset() {
	*x = TakeBattlePassMissionPointRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_battle_pass_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeBattlePassMissionPointRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeBattlePassMissionPointRsp) ProtoMessage() {}

func (x *TakeBattlePassMissionPointRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_battle_pass_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeBattlePassMissionPointRsp.ProtoReflect.Descriptor instead.
func (*TakeBattlePassMissionPointRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_battle_pass_proto_rawDescGZIP(), []int{13}
}

func (x *TakeBattlePassMissionPointRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *TakeBattlePassMissionPointRsp) GetMissionIdList() []uint32 {
	if x != nil {
		return x.MissionIdList
	}
	return nil
}

type GetBattlePassProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattlePassProductPlayType uint32 `protobuf:"varint,10,opt,name=battle_pass_product_play_type,json=battlePassProductPlayType,proto3" json:"battle_pass_product_play_type,omitempty"`
}

func (x *GetBattlePassProductReq) Reset() {
	*x = GetBattlePassProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_battle_pass_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBattlePassProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBattlePassProductReq) ProtoMessage() {}

func (x *GetBattlePassProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_battle_pass_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBattlePassProductReq.ProtoReflect.Descriptor instead.
func (*GetBattlePassProductReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_battle_pass_proto_rawDescGZIP(), []int{14}
}

func (x *GetBattlePassProductReq) GetBattlePassProductPlayType() uint32 {
	if x != nil {
		return x.BattlePassProductPlayType
	}
	return 0
}

type GetBattlePassProductRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode                   int32  `protobuf:"varint,14,opt,name=retcode,proto3" json:"retcode,omitempty"`
	PriceTier                 string `protobuf:"bytes,6,opt,name=price_tier,json=priceTier,proto3" json:"price_tier,omitempty"`
	BattlePassProductPlayType uint32 `protobuf:"varint,2,opt,name=battle_pass_product_play_type,json=battlePassProductPlayType,proto3" json:"battle_pass_product_play_type,omitempty"`
	ProductId                 string `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	CurScheduleId             uint32 `protobuf:"varint,11,opt,name=cur_schedule_id,json=curScheduleId,proto3" json:"cur_schedule_id,omitempty"`
}

func (x *GetBattlePassProductRsp) Reset() {
	*x = GetBattlePassProductRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_battle_pass_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBattlePassProductRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBattlePassProductRsp) ProtoMessage() {}

func (x *GetBattlePassProductRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_battle_pass_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBattlePassProductRsp.ProtoReflect.Descriptor instead.
func (*GetBattlePassProductRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_battle_pass_proto_rawDescGZIP(), []int{15}
}

func (x *GetBattlePassProductRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GetBattlePassProductRsp) GetPriceTier() string {
	if x != nil {
		return x.PriceTier
	}
	return ""
}

func (x *GetBattlePassProductRsp) GetBattlePassProductPlayType() uint32 {
	if x != nil {
		return x.BattlePassProductPlayType
	}
	return 0
}

func (x *GetBattlePassProductRsp) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *GetBattlePassProductRsp) GetCurScheduleId() uint32 {
	if x != nil {
		return x.CurScheduleId
	}
	return 0
}

type SetBattlePassViewedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,6,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *SetBattlePassViewedReq) Reset() {
	*x = SetBattlePassViewedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_battle_pass_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBattlePassViewedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBattlePassViewedReq) ProtoMessage() {}

func (x *SetBattlePassViewedReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_battle_pass_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBattlePassViewedReq.ProtoReflect.Descriptor instead.
func (*SetBattlePassViewedReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_battle_pass_proto_rawDescGZIP(), []int{16}
}

func (x *SetBattlePassViewedReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type SetBattlePassViewedRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,2,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Retcode    int32  `protobuf:"varint,3,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *SetBattlePassViewedRsp) Reset() {
	*x = SetBattlePassViewedRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_battle_pass_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBattlePassViewedRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBattlePassViewedRsp) ProtoMessage() {}

func (x *SetBattlePassViewedRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_battle_pass_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBattlePassViewedRsp.ProtoReflect.Descriptor instead.
func (*SetBattlePassViewedRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_battle_pass_proto_rawDescGZIP(), []int{17}
}

func (x *SetBattlePassViewedRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *SetBattlePassViewedRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type BattlePassBuySuccNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId      uint32       `protobuf:"varint,4,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	ProductPlayType uint32       `protobuf:"varint,11,opt,name=product_play_type,json=productPlayType,proto3" json:"product_play_type,omitempty"`
	AddPoint        uint32       `protobuf:"varint,12,opt,name=add_point,json=addPoint,proto3" json:"add_point,omitempty"`
	ItemList        []*ItemParam `protobuf:"bytes,9,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
}

func (x *BattlePassBuySuccNotify) Reset() {
	*x = BattlePassBuySuccNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_battle_pass_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePassBuySuccNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePassBuySuccNotify) ProtoMessage() {}

func (x *BattlePassBuySuccNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_battle_pass_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePassBuySuccNotify.ProtoReflect.Descriptor instead.
func (*BattlePassBuySuccNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_battle_pass_proto_rawDescGZIP(), []int{18}
}

func (x *BattlePassBuySuccNotify) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *BattlePassBuySuccNotify) GetProductPlayType() uint32 {
	if x != nil {
		return x.ProductPlayType
	}
	return 0
}

func (x *BattlePassBuySuccNotify) GetAddPoint() uint32 {
	if x != nil {
		return x.AddPoint
	}
	return 0
}

func (x *BattlePassBuySuccNotify) GetItemList() []*ItemParam {
	if x != nil {
		return x.ItemList
	}
	return nil
}

type BuyBattlePassLevelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuyLevel uint32 `protobuf:"varint,8,opt,name=buy_level,json=buyLevel,proto3" json:"buy_level,omitempty"`
}

func (x *BuyBattlePassLevelReq) Reset() {
	*x = BuyBattlePassLevelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_battle_pass_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyBattlePassLevelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyBattlePassLevelReq) ProtoMessage() {}

func (x *BuyBattlePassLevelReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_battle_pass_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyBattlePassLevelReq.ProtoReflect.Descriptor instead.
func (*BuyBattlePassLevelReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_battle_pass_proto_rawDescGZIP(), []int{19}
}

func (x *BuyBattlePassLevelReq) GetBuyLevel() uint32 {
	if x != nil {
		return x.BuyLevel
	}
	return 0
}

type BuyBattlePassLevelRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode  int32  `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
	BuyLevel uint32 `protobuf:"varint,13,opt,name=buy_level,json=buyLevel,proto3" json:"buy_level,omitempty"`
}

func (x *BuyBattlePassLevelRsp) Reset() {
	*x = BuyBattlePassLevelRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_battle_pass_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyBattlePassLevelRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyBattlePassLevelRsp) ProtoMessage() {}

func (x *BuyBattlePassLevelRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_battle_pass_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyBattlePassLevelRsp.ProtoReflect.Descriptor instead.
func (*BuyBattlePassLevelRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_battle_pass_proto_rawDescGZIP(), []int{20}
}

func (x *BuyBattlePassLevelRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *BuyBattlePassLevelRsp) GetBuyLevel() uint32 {
	if x != nil {
		return x.BuyLevel
	}
	return 0
}

var File_cmd_cmd_battle_pass_proto protoreflect.FileDescriptor

var file_cmd_cmd_battle_pass_proto_rawDesc = []byte{
	0x0a, 0x19, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x6d, 0x64, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x68, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x43, 0x79,
	0x63, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x78,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x94, 0x03, 0x0a, 0x11, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x6b, 0x0a, 0x0d, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e, 0x10,
	0x03, 0x22, 0x8c, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x42, 0x0a, 0x0d, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x22, 0x97, 0x01, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0xcc, 0x04, 0x0a, 0x12, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x52, 0x08, 0x63, 0x75, 0x72, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x0d,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0c, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x67, 0x52, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54,
	0x61, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x5f,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x70, 0x61, 0x69, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3a, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x69, 0x64,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x69, 0x64,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x17, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x63, 0x75,
	0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x68, 0x61, 0x76, 0x65, 0x43, 0x75, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x0c, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x0b, 0x63, 0x75, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x5c, 0x0a, 0x1d,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x3b, 0x0a,
	0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x1a, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2d, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x5f,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x21, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x43, 0x75, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2a, 0x0a,
	0x11, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x76, 0x65, 0x43, 0x75,
	0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x75, 0x72,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x69, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x67, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x78, 0x22, 0x66, 0x0a, 0x17, 0x54, 0x61, 0x6b, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x4b, 0x0a,
	0x10, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x61, 0x6b, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x74, 0x61, 0x6b, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x17, 0x54,
	0x61, 0x6b, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x4b, 0x0a, 0x10, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x74, 0x61,
	0x6b, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x1d,
	0x54, 0x61, 0x6b, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a,
	0x0f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x1d, 0x54, 0x61, 0x6b, 0x65, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x40, 0x0a, 0x1d, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x1d, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x19, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x75, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x53,
	0x0a, 0x16, 0x53, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x56,
	0x69, 0x65, 0x77, 0x65, 0x64, 0x52, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x42, 0x75, 0x79, 0x53, 0x75, 0x63, 0x63, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x61, 0x64, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x15, 0x42, 0x75, 0x79, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x4e,
	0x0a, 0x15, 0x42, 0x75, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x2a, 0x72,
	0x0a, 0x16, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x46,
	0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x50, 0x41, 0x49, 0x44,
	0x10, 0x02, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x74, 0x65, 0x79, 0x76, 0x61, 0x74, 0x2d, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2f, 0x68,
	0x6b, 0x34, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cmd_cmd_battle_pass_proto_rawDescOnce sync.Once
	file_cmd_cmd_battle_pass_proto_rawDescData = file_cmd_cmd_battle_pass_proto_rawDesc
)

func file_cmd_cmd_battle_pass_proto_rawDescGZIP() []byte {
	file_cmd_cmd_battle_pass_proto_rawDescOnce.Do(func() {
		file_cmd_cmd_battle_pass_proto_rawDescData = protoimpl.X.CompressGZIP(file_cmd_cmd_battle_pass_proto_rawDescData)
	})
	return file_cmd_cmd_battle_pass_proto_rawDescData
}

var file_cmd_cmd_battle_pass_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_cmd_cmd_battle_pass_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_cmd_cmd_battle_pass_proto_goTypes = []interface{}{
	(BattlePassUnlockStatus)(0),               // 0: proto.BattlePassUnlockStatus
	(BattlePassMission_MissionStatus)(0),      // 1: proto.BattlePassMission.MissionStatus
	(*BattlePassCycle)(nil),                   // 2: proto.BattlePassCycle
	(*BattlePassMission)(nil),                 // 3: proto.BattlePassMission
	(*BattlePassRewardTag)(nil),               // 4: proto.BattlePassRewardTag
	(*BattlePassProduct)(nil),                 // 5: proto.BattlePassProduct
	(*BattlePassSchedule)(nil),                // 6: proto.BattlePassSchedule
	(*BattlePassAllDataNotify)(nil),           // 7: proto.BattlePassAllDataNotify
	(*BattlePassMissionUpdateNotify)(nil),     // 8: proto.BattlePassMissionUpdateNotify
	(*BattlePassMissionDelNotify)(nil),        // 9: proto.BattlePassMissionDelNotify
	(*BattlePassCurScheduleUpdateNotify)(nil), // 10: proto.BattlePassCurScheduleUpdateNotify
	(*BattlePassRewardTakeOption)(nil),        // 11: proto.BattlePassRewardTakeOption
	(*TakeBattlePassRewardReq)(nil),           // 12: proto.TakeBattlePassRewardReq
	(*TakeBattlePassRewardRsp)(nil),           // 13: proto.TakeBattlePassRewardRsp
	(*TakeBattlePassMissionPointReq)(nil),     // 14: proto.TakeBattlePassMissionPointReq
	(*TakeBattlePassMissionPointRsp)(nil),     // 15: proto.TakeBattlePassMissionPointRsp
	(*GetBattlePassProductReq)(nil),           // 16: proto.GetBattlePassProductReq
	(*GetBattlePassProductRsp)(nil),           // 17: proto.GetBattlePassProductRsp
	(*SetBattlePassViewedReq)(nil),            // 18: proto.SetBattlePassViewedReq
	(*SetBattlePassViewedRsp)(nil),            // 19: proto.SetBattlePassViewedRsp
	(*BattlePassBuySuccNotify)(nil),           // 20: proto.BattlePassBuySuccNotify
	(*BuyBattlePassLevelReq)(nil),             // 21: proto.BuyBattlePassLevelReq
	(*BuyBattlePassLevelRsp)(nil),             // 22: proto.BuyBattlePassLevelRsp
	(*ItemParam)(nil),                         // 23: proto.ItemParam
}
var file_cmd_cmd_battle_pass_proto_depIdxs = []int32{
	1,  // 0: proto.BattlePassMission.mission_status:type_name -> proto.BattlePassMission.MissionStatus
	0,  // 1: proto.BattlePassRewardTag.unlock_status:type_name -> proto.BattlePassUnlockStatus
	2,  // 2: proto.BattlePassSchedule.cur_cycle:type_name -> proto.BattlePassCycle
	0,  // 3: proto.BattlePassSchedule.unlock_status:type_name -> proto.BattlePassUnlockStatus
	4,  // 4: proto.BattlePassSchedule.reward_taken_list:type_name -> proto.BattlePassRewardTag
	5,  // 5: proto.BattlePassSchedule.product_info:type_name -> proto.BattlePassProduct
	3,  // 6: proto.BattlePassAllDataNotify.mission_list:type_name -> proto.BattlePassMission
	6,  // 7: proto.BattlePassAllDataNotify.cur_schedule:type_name -> proto.BattlePassSchedule
	3,  // 8: proto.BattlePassMissionUpdateNotify.mission_list:type_name -> proto.BattlePassMission
	6,  // 9: proto.BattlePassCurScheduleUpdateNotify.cur_schedule:type_name -> proto.BattlePassSchedule
	4,  // 10: proto.BattlePassRewardTakeOption.tag:type_name -> proto.BattlePassRewardTag
	11, // 11: proto.TakeBattlePassRewardReq.take_option_list:type_name -> proto.BattlePassRewardTakeOption
	23, // 12: proto.TakeBattlePassRewardRsp.item_list:type_name -> proto.ItemParam
	11, // 13: proto.TakeBattlePassRewardRsp.take_option_list:type_name -> proto.BattlePassRewardTakeOption
	23, // 14: proto.BattlePassBuySuccNotify.item_list:type_name -> proto.ItemParam
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_cmd_cmd_battle_pass_proto_init() }
func file_cmd_cmd_battle_pass_proto_init() {
	if File_cmd_cmd_battle_pass_proto != nil {
		return
	}
	file_define_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cmd_cmd_battle_pass_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePassCycle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_battle_pass_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePassMission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_battle_pass_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePassRewardTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_battle_pass_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePassProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_battle_pass_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePassSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_battle_pass_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePassAllDataNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_battle_pass_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePassMissionUpdateNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_battle_pass_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePassMissionDelNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_battle_pass_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePassCurScheduleUpdateNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_battle_pass_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePassRewardTakeOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_battle_pass_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeBattlePassRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_battle_pass_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeBattlePassRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_battle_pass_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeBattlePassMissionPointReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_battle_pass_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeBattlePassMissionPointRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_battle_pass_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBattlePassProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_battle_pass_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBattlePassProductRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_battle_pass_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBattlePassViewedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_battle_pass_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBattlePassViewedRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_battle_pass_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePassBuySuccNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_battle_pass_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyBattlePassLevelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_battle_pass_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyBattlePassLevelRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cmd_cmd_battle_pass_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cmd_cmd_battle_pass_proto_goTypes,
		DependencyIndexes: file_cmd_cmd_battle_pass_proto_depIdxs,
		EnumInfos:         file_cmd_cmd_battle_pass_proto_enumTypes,
		MessageInfos:      file_cmd_cmd_battle_pass_proto_msgTypes,
	}.Build()
	File_cmd_cmd_battle_pass_proto = out.File
	file_cmd_cmd_battle_pass_proto_rawDesc = nil
	file_cmd_cmd_battle_pass_proto_goTypes = nil
	file_cmd_cmd_battle_pass_proto_depIdxs = nil
}
