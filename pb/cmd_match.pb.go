// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: cmd/cmd_match.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlayerMatchAgreedResultNotify_Reason int32

const (
	PlayerMatchAgreedResultNotify_SUCC                          PlayerMatchAgreedResultNotify_Reason = 0
	PlayerMatchAgreedResultNotify_TARGET_SCENE_CANNOT_ENTER     PlayerMatchAgreedResultNotify_Reason = 1
	PlayerMatchAgreedResultNotify_SELF_MP_UNAVAILABLE           PlayerMatchAgreedResultNotify_Reason = 2
	PlayerMatchAgreedResultNotify_OTHER_DATA_VERSION_NOT_LATEST PlayerMatchAgreedResultNotify_Reason = 3
	PlayerMatchAgreedResultNotify_DATA_VERSION_NOT_LATEST       PlayerMatchAgreedResultNotify_Reason = 4
)

// Enum value maps for PlayerMatchAgreedResultNotify_Reason.
var (
	PlayerMatchAgreedResultNotify_Reason_name = map[int32]string{
		0: "SUCC",
		1: "TARGET_SCENE_CANNOT_ENTER",
		2: "SELF_MP_UNAVAILABLE",
		3: "OTHER_DATA_VERSION_NOT_LATEST",
		4: "DATA_VERSION_NOT_LATEST",
	}
	PlayerMatchAgreedResultNotify_Reason_value = map[string]int32{
		"SUCC":                          0,
		"TARGET_SCENE_CANNOT_ENTER":     1,
		"SELF_MP_UNAVAILABLE":           2,
		"OTHER_DATA_VERSION_NOT_LATEST": 3,
		"DATA_VERSION_NOT_LATEST":       4,
	}
)

func (x PlayerMatchAgreedResultNotify_Reason) Enum() *PlayerMatchAgreedResultNotify_Reason {
	p := new(PlayerMatchAgreedResultNotify_Reason)
	*p = x
	return p
}

func (x PlayerMatchAgreedResultNotify_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerMatchAgreedResultNotify_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_match_proto_enumTypes[0].Descriptor()
}

func (PlayerMatchAgreedResultNotify_Reason) Type() protoreflect.EnumType {
	return &file_cmd_cmd_match_proto_enumTypes[0]
}

func (x PlayerMatchAgreedResultNotify_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerMatchAgreedResultNotify_Reason.Descriptor instead.
func (PlayerMatchAgreedResultNotify_Reason) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_match_proto_rawDescGZIP(), []int{13, 0}
}

type PlayerStartMatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchType                MatchType `protobuf:"varint,3,opt,name=match_type,json=matchType,proto3,enum=proto.MatchType" json:"match_type,omitempty"`
	MechanicusDifficultLevel uint32    `protobuf:"varint,12,opt,name=mechanicus_difficult_level,json=mechanicusDifficultLevel,proto3" json:"mechanicus_difficult_level,omitempty"`
	MatchParamList           []uint32  `protobuf:"varint,11,rep,packed,name=match_param_list,json=matchParamList,proto3" json:"match_param_list,omitempty"`
	DungeonId                uint32    `protobuf:"varint,1,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	MpPlayId                 uint32    `protobuf:"varint,15,opt,name=mp_play_id,json=mpPlayId,proto3" json:"mp_play_id,omitempty"`
	MatchId                  uint32    `protobuf:"varint,6,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
}

func (x *PlayerStartMatchReq) Reset() {
	*x = PlayerStartMatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_match_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStartMatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStartMatchReq) ProtoMessage() {}

func (x *PlayerStartMatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_match_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStartMatchReq.ProtoReflect.Descriptor instead.
func (*PlayerStartMatchReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_match_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerStartMatchReq) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_MATCH_TYPE_NONE
}

func (x *PlayerStartMatchReq) GetMechanicusDifficultLevel() uint32 {
	if x != nil {
		return x.MechanicusDifficultLevel
	}
	return 0
}

func (x *PlayerStartMatchReq) GetMatchParamList() []uint32 {
	if x != nil {
		return x.MatchParamList
	}
	return nil
}

func (x *PlayerStartMatchReq) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *PlayerStartMatchReq) GetMpPlayId() uint32 {
	if x != nil {
		return x.MpPlayId
	}
	return 0
}

func (x *PlayerStartMatchReq) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

type PlayerStartMatchRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode                  int32     `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	PunishEndTime            uint32    `protobuf:"varint,5,opt,name=punish_end_time,json=punishEndTime,proto3" json:"punish_end_time,omitempty"`
	Param                    uint32    `protobuf:"varint,4,opt,name=param,proto3" json:"param,omitempty"`
	MpPlayId                 uint32    `protobuf:"varint,13,opt,name=mp_play_id,json=mpPlayId,proto3" json:"mp_play_id,omitempty"`
	MechanicusDifficultLevel uint32    `protobuf:"varint,2,opt,name=mechanicus_difficult_level,json=mechanicusDifficultLevel,proto3" json:"mechanicus_difficult_level,omitempty"`
	DungeonId                uint32    `protobuf:"varint,3,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	MatchId                  uint32    `protobuf:"varint,8,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	MatchType                MatchType `protobuf:"varint,7,opt,name=match_type,json=matchType,proto3,enum=proto.MatchType" json:"match_type,omitempty"`
}

func (x *PlayerStartMatchRsp) Reset() {
	*x = PlayerStartMatchRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_match_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStartMatchRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStartMatchRsp) ProtoMessage() {}

func (x *PlayerStartMatchRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_match_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStartMatchRsp.ProtoReflect.Descriptor instead.
func (*PlayerStartMatchRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_match_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerStartMatchRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *PlayerStartMatchRsp) GetPunishEndTime() uint32 {
	if x != nil {
		return x.PunishEndTime
	}
	return 0
}

func (x *PlayerStartMatchRsp) GetParam() uint32 {
	if x != nil {
		return x.Param
	}
	return 0
}

func (x *PlayerStartMatchRsp) GetMpPlayId() uint32 {
	if x != nil {
		return x.MpPlayId
	}
	return 0
}

func (x *PlayerStartMatchRsp) GetMechanicusDifficultLevel() uint32 {
	if x != nil {
		return x.MechanicusDifficultLevel
	}
	return 0
}

func (x *PlayerStartMatchRsp) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *PlayerStartMatchRsp) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *PlayerStartMatchRsp) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_MATCH_TYPE_NONE
}

type PlayerMatchInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId                  uint32    `protobuf:"varint,8,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	MatchBeginTime           uint32    `protobuf:"varint,4,opt,name=match_begin_time,json=matchBeginTime,proto3" json:"match_begin_time,omitempty"`
	DungeonId                uint32    `protobuf:"varint,10,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	MatchType                MatchType `protobuf:"varint,11,opt,name=match_type,json=matchType,proto3,enum=proto.MatchType" json:"match_type,omitempty"`
	MechanicusDifficultLevel uint32    `protobuf:"varint,12,opt,name=mechanicus_difficult_level,json=mechanicusDifficultLevel,proto3" json:"mechanicus_difficult_level,omitempty"`
	MatchParamList           []uint32  `protobuf:"varint,6,rep,packed,name=match_param_list,json=matchParamList,proto3" json:"match_param_list,omitempty"`
	EstimateMatchCostTime    uint32    `protobuf:"varint,3,opt,name=estimate_match_cost_time,json=estimateMatchCostTime,proto3" json:"estimate_match_cost_time,omitempty"`
	MpPlayId                 uint32    `protobuf:"varint,5,opt,name=mp_play_id,json=mpPlayId,proto3" json:"mp_play_id,omitempty"`
	HostUid                  uint32    `protobuf:"varint,13,opt,name=host_uid,json=hostUid,proto3" json:"host_uid,omitempty"`
}

func (x *PlayerMatchInfoNotify) Reset() {
	*x = PlayerMatchInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_match_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMatchInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMatchInfoNotify) ProtoMessage() {}

func (x *PlayerMatchInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_match_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMatchInfoNotify.ProtoReflect.Descriptor instead.
func (*PlayerMatchInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_match_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerMatchInfoNotify) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *PlayerMatchInfoNotify) GetMatchBeginTime() uint32 {
	if x != nil {
		return x.MatchBeginTime
	}
	return 0
}

func (x *PlayerMatchInfoNotify) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *PlayerMatchInfoNotify) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_MATCH_TYPE_NONE
}

func (x *PlayerMatchInfoNotify) GetMechanicusDifficultLevel() uint32 {
	if x != nil {
		return x.MechanicusDifficultLevel
	}
	return 0
}

func (x *PlayerMatchInfoNotify) GetMatchParamList() []uint32 {
	if x != nil {
		return x.MatchParamList
	}
	return nil
}

func (x *PlayerMatchInfoNotify) GetEstimateMatchCostTime() uint32 {
	if x != nil {
		return x.EstimateMatchCostTime
	}
	return 0
}

func (x *PlayerMatchInfoNotify) GetMpPlayId() uint32 {
	if x != nil {
		return x.MpPlayId
	}
	return 0
}

func (x *PlayerMatchInfoNotify) GetHostUid() uint32 {
	if x != nil {
		return x.HostUid
	}
	return 0
}

type PlayerCancelMatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchType MatchType `protobuf:"varint,11,opt,name=match_type,json=matchType,proto3,enum=proto.MatchType" json:"match_type,omitempty"`
}

func (x *PlayerCancelMatchReq) Reset() {
	*x = PlayerCancelMatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_match_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerCancelMatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerCancelMatchReq) ProtoMessage() {}

func (x *PlayerCancelMatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_match_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerCancelMatchReq.ProtoReflect.Descriptor instead.
func (*PlayerCancelMatchReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_match_proto_rawDescGZIP(), []int{3}
}

func (x *PlayerCancelMatchReq) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_MATCH_TYPE_NONE
}

type PlayerCancelMatchRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode   int32     `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
	MatchType MatchType `protobuf:"varint,7,opt,name=match_type,json=matchType,proto3,enum=proto.MatchType" json:"match_type,omitempty"`
}

func (x *PlayerCancelMatchRsp) Reset() {
	*x = PlayerCancelMatchRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_match_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerCancelMatchRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerCancelMatchRsp) ProtoMessage() {}

func (x *PlayerCancelMatchRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_match_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerCancelMatchRsp.ProtoReflect.Descriptor instead.
func (*PlayerCancelMatchRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_match_proto_rawDescGZIP(), []int{4}
}

func (x *PlayerCancelMatchRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *PlayerCancelMatchRsp) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_MATCH_TYPE_NONE
}

type PlayerMatchStopNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason  MatchReason `protobuf:"varint,1,opt,name=reason,proto3,enum=proto.MatchReason" json:"reason,omitempty"`
	HostUid uint32      `protobuf:"varint,12,opt,name=host_uid,json=hostUid,proto3" json:"host_uid,omitempty"`
}

func (x *PlayerMatchStopNotify) Reset() {
	*x = PlayerMatchStopNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_match_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMatchStopNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMatchStopNotify) ProtoMessage() {}

func (x *PlayerMatchStopNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_match_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMatchStopNotify.ProtoReflect.Descriptor instead.
func (*PlayerMatchStopNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_match_proto_rawDescGZIP(), []int{5}
}

func (x *PlayerMatchStopNotify) GetReason() MatchReason {
	if x != nil {
		return x.Reason
	}
	return MatchReason_MATCH_NONE
}

func (x *PlayerMatchStopNotify) GetHostUid() uint32 {
	if x != nil {
		return x.HostUid
	}
	return 0
}

type MatchPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAgreed   bool              `protobuf:"varint,9,opt,name=is_agreed,json=isAgreed,proto3" json:"is_agreed,omitempty"`
	PlayerInfo *OnlinePlayerInfo `protobuf:"bytes,2,opt,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"`
}

func (x *MatchPlayerInfo) Reset() {
	*x = MatchPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_match_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchPlayerInfo) ProtoMessage() {}

func (x *MatchPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_match_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchPlayerInfo.ProtoReflect.Descriptor instead.
func (*MatchPlayerInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_match_proto_rawDescGZIP(), []int{6}
}

func (x *MatchPlayerInfo) GetIsAgreed() bool {
	if x != nil {
		return x.IsAgreed
	}
	return false
}

func (x *MatchPlayerInfo) GetPlayerInfo() *OnlinePlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type GeneralMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchParam uint32             `protobuf:"varint,1,opt,name=match_param,json=matchParam,proto3" json:"match_param,omitempty"`
	MatchId    uint32             `protobuf:"varint,9,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	PlayerList []*MatchPlayerInfo `protobuf:"bytes,5,rep,name=player_list,json=playerList,proto3" json:"player_list,omitempty"`
}

func (x *GeneralMatchInfo) Reset() {
	*x = GeneralMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_match_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralMatchInfo) ProtoMessage() {}

func (x *GeneralMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_match_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralMatchInfo.ProtoReflect.Descriptor instead.
func (*GeneralMatchInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_match_proto_rawDescGZIP(), []int{7}
}

func (x *GeneralMatchInfo) GetMatchParam() uint32 {
	if x != nil {
		return x.MatchParam
	}
	return 0
}

func (x *GeneralMatchInfo) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *GeneralMatchInfo) GetPlayerList() []*MatchPlayerInfo {
	if x != nil {
		return x.PlayerList
	}
	return nil
}

type GCGMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerList []*MatchPlayerInfo `protobuf:"bytes,13,rep,name=player_list,json=playerList,proto3" json:"player_list,omitempty"`
}

func (x *GCGMatchInfo) Reset() {
	*x = GCGMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_match_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMatchInfo) ProtoMessage() {}

func (x *GCGMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_match_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMatchInfo.ProtoReflect.Descriptor instead.
func (*GCGMatchInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_match_proto_rawDescGZIP(), []int{8}
}

func (x *GCGMatchInfo) GetPlayerList() []*MatchPlayerInfo {
	if x != nil {
		return x.PlayerList
	}
	return nil
}

type PlayerMatchSuccNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeneralMatchInfo         *GeneralMatchInfo `protobuf:"bytes,7,opt,name=general_match_info,json=generalMatchInfo,proto3" json:"general_match_info,omitempty"`
	MpPlayId                 uint32            `protobuf:"varint,15,opt,name=mp_play_id,json=mpPlayId,proto3" json:"mp_play_id,omitempty"`
	HostUid                  uint32            `protobuf:"varint,3,opt,name=host_uid,json=hostUid,proto3" json:"host_uid,omitempty"`
	MatchType                MatchType         `protobuf:"varint,5,opt,name=match_type,json=matchType,proto3,enum=proto.MatchType" json:"match_type,omitempty"`
	GcgMatchInfo             *GCGMatchInfo     `protobuf:"bytes,11,opt,name=gcg_match_info,json=gcgMatchInfo,proto3" json:"gcg_match_info,omitempty"`
	ConfirmEndTime           uint32            `protobuf:"varint,2,opt,name=confirm_end_time,json=confirmEndTime,proto3" json:"confirm_end_time,omitempty"`
	DungeonId                uint32            `protobuf:"varint,6,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	MechanicusDifficultLevel uint32            `protobuf:"varint,1,opt,name=mechanicus_difficult_level,json=mechanicusDifficultLevel,proto3" json:"mechanicus_difficult_level,omitempty"`
}

func (x *PlayerMatchSuccNotify) Reset() {
	*x = PlayerMatchSuccNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_match_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMatchSuccNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMatchSuccNotify) ProtoMessage() {}

func (x *PlayerMatchSuccNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_match_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMatchSuccNotify.ProtoReflect.Descriptor instead.
func (*PlayerMatchSuccNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_match_proto_rawDescGZIP(), []int{9}
}

func (x *PlayerMatchSuccNotify) GetGeneralMatchInfo() *GeneralMatchInfo {
	if x != nil {
		return x.GeneralMatchInfo
	}
	return nil
}

func (x *PlayerMatchSuccNotify) GetMpPlayId() uint32 {
	if x != nil {
		return x.MpPlayId
	}
	return 0
}

func (x *PlayerMatchSuccNotify) GetHostUid() uint32 {
	if x != nil {
		return x.HostUid
	}
	return 0
}

func (x *PlayerMatchSuccNotify) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_MATCH_TYPE_NONE
}

func (x *PlayerMatchSuccNotify) GetGcgMatchInfo() *GCGMatchInfo {
	if x != nil {
		return x.GcgMatchInfo
	}
	return nil
}

func (x *PlayerMatchSuccNotify) GetConfirmEndTime() uint32 {
	if x != nil {
		return x.ConfirmEndTime
	}
	return 0
}

func (x *PlayerMatchSuccNotify) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *PlayerMatchSuccNotify) GetMechanicusDifficultLevel() uint32 {
	if x != nil {
		return x.MechanicusDifficultLevel
	}
	return 0
}

type PlayerConfirmMatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchType MatchType `protobuf:"varint,12,opt,name=match_type,json=matchType,proto3,enum=proto.MatchType" json:"match_type,omitempty"`
	IsAgreed  bool      `protobuf:"varint,10,opt,name=is_agreed,json=isAgreed,proto3" json:"is_agreed,omitempty"`
}

func (x *PlayerConfirmMatchReq) Reset() {
	*x = PlayerConfirmMatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_match_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerConfirmMatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerConfirmMatchReq) ProtoMessage() {}

func (x *PlayerConfirmMatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_match_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerConfirmMatchReq.ProtoReflect.Descriptor instead.
func (*PlayerConfirmMatchReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_match_proto_rawDescGZIP(), []int{10}
}

func (x *PlayerConfirmMatchReq) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_MATCH_TYPE_NONE
}

func (x *PlayerConfirmMatchReq) GetIsAgreed() bool {
	if x != nil {
		return x.IsAgreed
	}
	return false
}

type PlayerConfirmMatchRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchType MatchType `protobuf:"varint,9,opt,name=match_type,json=matchType,proto3,enum=proto.MatchType" json:"match_type,omitempty"`
	MatchId   uint32    `protobuf:"varint,4,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	IsAgreed  bool      `protobuf:"varint,11,opt,name=is_agreed,json=isAgreed,proto3" json:"is_agreed,omitempty"`
	Retcode   int32     `protobuf:"varint,10,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *PlayerConfirmMatchRsp) Reset() {
	*x = PlayerConfirmMatchRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_match_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerConfirmMatchRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerConfirmMatchRsp) ProtoMessage() {}

func (x *PlayerConfirmMatchRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_match_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerConfirmMatchRsp.ProtoReflect.Descriptor instead.
func (*PlayerConfirmMatchRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_match_proto_rawDescGZIP(), []int{11}
}

func (x *PlayerConfirmMatchRsp) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_MATCH_TYPE_NONE
}

func (x *PlayerConfirmMatchRsp) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *PlayerConfirmMatchRsp) GetIsAgreed() bool {
	if x != nil {
		return x.IsAgreed
	}
	return false
}

func (x *PlayerConfirmMatchRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type PlayerAllowEnterMpAfterAgreeMatchNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetUid uint32 `protobuf:"varint,1,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
}

func (x *PlayerAllowEnterMpAfterAgreeMatchNotify) Reset() {
	*x = PlayerAllowEnterMpAfterAgreeMatchNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_match_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerAllowEnterMpAfterAgreeMatchNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAllowEnterMpAfterAgreeMatchNotify) ProtoMessage() {}

func (x *PlayerAllowEnterMpAfterAgreeMatchNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_match_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAllowEnterMpAfterAgreeMatchNotify.ProtoReflect.Descriptor instead.
func (*PlayerAllowEnterMpAfterAgreeMatchNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_match_proto_rawDescGZIP(), []int{12}
}

func (x *PlayerAllowEnterMpAfterAgreeMatchNotify) GetTargetUid() uint32 {
	if x != nil {
		return x.TargetUid
	}
	return 0
}

type PlayerMatchAgreedResultNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetUid uint32                               `protobuf:"varint,14,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
	MatchType MatchType                            `protobuf:"varint,3,opt,name=match_type,json=matchType,proto3,enum=proto.MatchType" json:"match_type,omitempty"`
	Reason    PlayerMatchAgreedResultNotify_Reason `protobuf:"varint,8,opt,name=reason,proto3,enum=proto.PlayerMatchAgreedResultNotify_Reason" json:"reason,omitempty"`
}

func (x *PlayerMatchAgreedResultNotify) Reset() {
	*x = PlayerMatchAgreedResultNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_match_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMatchAgreedResultNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMatchAgreedResultNotify) ProtoMessage() {}

func (x *PlayerMatchAgreedResultNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_match_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMatchAgreedResultNotify.ProtoReflect.Descriptor instead.
func (*PlayerMatchAgreedResultNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_match_proto_rawDescGZIP(), []int{13}
}

func (x *PlayerMatchAgreedResultNotify) GetTargetUid() uint32 {
	if x != nil {
		return x.TargetUid
	}
	return 0
}

func (x *PlayerMatchAgreedResultNotify) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_MATCH_TYPE_NONE
}

func (x *PlayerMatchAgreedResultNotify) GetReason() PlayerMatchAgreedResultNotify_Reason {
	if x != nil {
		return x.Reason
	}
	return PlayerMatchAgreedResultNotify_SUCC
}

type PlayerApplyEnterMpAfterMatchAgreedNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcPlayerInfo *OnlinePlayerInfo `protobuf:"bytes,11,opt,name=src_player_info,json=srcPlayerInfo,proto3" json:"src_player_info,omitempty"`
	MatchserverId uint32            `protobuf:"varint,10,opt,name=matchserver_id,json=matchserverId,proto3" json:"matchserver_id,omitempty"`
	MatchType     MatchType         `protobuf:"varint,3,opt,name=match_type,json=matchType,proto3,enum=proto.MatchType" json:"match_type,omitempty"`
}

func (x *PlayerApplyEnterMpAfterMatchAgreedNotify) Reset() {
	*x = PlayerApplyEnterMpAfterMatchAgreedNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_match_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerApplyEnterMpAfterMatchAgreedNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerApplyEnterMpAfterMatchAgreedNotify) ProtoMessage() {}

func (x *PlayerApplyEnterMpAfterMatchAgreedNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_match_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerApplyEnterMpAfterMatchAgreedNotify.ProtoReflect.Descriptor instead.
func (*PlayerApplyEnterMpAfterMatchAgreedNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_match_proto_rawDescGZIP(), []int{14}
}

func (x *PlayerApplyEnterMpAfterMatchAgreedNotify) GetSrcPlayerInfo() *OnlinePlayerInfo {
	if x != nil {
		return x.SrcPlayerInfo
	}
	return nil
}

func (x *PlayerApplyEnterMpAfterMatchAgreedNotify) GetMatchserverId() uint32 {
	if x != nil {
		return x.MatchserverId
	}
	return 0
}

func (x *PlayerApplyEnterMpAfterMatchAgreedNotify) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_MATCH_TYPE_NONE
}

type PlayerGeneralMatchDismissNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UidList []uint32    `protobuf:"varint,3,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"`
	Reason  MatchReason `protobuf:"varint,13,opt,name=reason,proto3,enum=proto.MatchReason" json:"reason,omitempty"`
	MatchId uint32      `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
}

func (x *PlayerGeneralMatchDismissNotify) Reset() {
	*x = PlayerGeneralMatchDismissNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_match_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGeneralMatchDismissNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGeneralMatchDismissNotify) ProtoMessage() {}

func (x *PlayerGeneralMatchDismissNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_match_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGeneralMatchDismissNotify.ProtoReflect.Descriptor instead.
func (*PlayerGeneralMatchDismissNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_match_proto_rawDescGZIP(), []int{15}
}

func (x *PlayerGeneralMatchDismissNotify) GetUidList() []uint32 {
	if x != nil {
		return x.UidList
	}
	return nil
}

func (x *PlayerGeneralMatchDismissNotify) GetReason() MatchReason {
	if x != nil {
		return x.Reason
	}
	return MatchReason_MATCH_NONE
}

func (x *PlayerGeneralMatchDismissNotify) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

type PlayerGeneralMatchConfirmNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId uint32 `protobuf:"varint,8,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	IsAgree bool   `protobuf:"varint,13,opt,name=is_agree,json=isAgree,proto3" json:"is_agree,omitempty"`
	Uid     uint32 `protobuf:"varint,14,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *PlayerGeneralMatchConfirmNotify) Reset() {
	*x = PlayerGeneralMatchConfirmNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_match_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGeneralMatchConfirmNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGeneralMatchConfirmNotify) ProtoMessage() {}

func (x *PlayerGeneralMatchConfirmNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_match_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGeneralMatchConfirmNotify.ProtoReflect.Descriptor instead.
func (*PlayerGeneralMatchConfirmNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_match_proto_rawDescGZIP(), []int{16}
}

func (x *PlayerGeneralMatchConfirmNotify) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *PlayerGeneralMatchConfirmNotify) GetIsAgree() bool {
	if x != nil {
		return x.IsAgree
	}
	return false
}

func (x *PlayerGeneralMatchConfirmNotify) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type PlayerGetForceQuitBanInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlayerGetForceQuitBanInfoReq) Reset() {
	*x = PlayerGetForceQuitBanInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_match_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGetForceQuitBanInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGetForceQuitBanInfoReq) ProtoMessage() {}

func (x *PlayerGetForceQuitBanInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_match_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGetForceQuitBanInfoReq.ProtoReflect.Descriptor instead.
func (*PlayerGetForceQuitBanInfoReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_match_proto_rawDescGZIP(), []int{17}
}

type PlayerGetForceQuitBanInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode    int32  `protobuf:"varint,4,opt,name=retcode,proto3" json:"retcode,omitempty"`
	MatchId    uint32 `protobuf:"varint,8,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	ExpireTime uint32 `protobuf:"varint,13,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (x *PlayerGetForceQuitBanInfoRsp) Reset() {
	*x = PlayerGetForceQuitBanInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_match_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGetForceQuitBanInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGetForceQuitBanInfoRsp) ProtoMessage() {}

func (x *PlayerGetForceQuitBanInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_match_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGetForceQuitBanInfoRsp.ProtoReflect.Descriptor instead.
func (*PlayerGetForceQuitBanInfoRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_match_proto_rawDescGZIP(), []int{18}
}

func (x *PlayerGetForceQuitBanInfoRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *PlayerGetForceQuitBanInfoRsp) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *PlayerGetForceQuitBanInfoRsp) GetExpireTime() uint32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

type ServerTryCancelGeneralMatchNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId uint32 `protobuf:"varint,9,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
}

func (x *ServerTryCancelGeneralMatchNotify) Reset() {
	*x = ServerTryCancelGeneralMatchNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_match_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerTryCancelGeneralMatchNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerTryCancelGeneralMatchNotify) ProtoMessage() {}

func (x *ServerTryCancelGeneralMatchNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_match_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerTryCancelGeneralMatchNotify.ProtoReflect.Descriptor instead.
func (*ServerTryCancelGeneralMatchNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_match_proto_rawDescGZIP(), []int{19}
}

func (x *ServerTryCancelGeneralMatchNotify) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

type PlayerGCGMatchDismissNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId uint32      `protobuf:"varint,11,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Reason  MatchReason `protobuf:"varint,5,opt,name=reason,proto3,enum=proto.MatchReason" json:"reason,omitempty"`
	UidList []uint32    `protobuf:"varint,7,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"`
}

func (x *PlayerGCGMatchDismissNotify) Reset() {
	*x = PlayerGCGMatchDismissNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_match_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGCGMatchDismissNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGCGMatchDismissNotify) ProtoMessage() {}

func (x *PlayerGCGMatchDismissNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_match_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGCGMatchDismissNotify.ProtoReflect.Descriptor instead.
func (*PlayerGCGMatchDismissNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_match_proto_rawDescGZIP(), []int{20}
}

func (x *PlayerGCGMatchDismissNotify) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *PlayerGCGMatchDismissNotify) GetReason() MatchReason {
	if x != nil {
		return x.Reason
	}
	return MatchReason_MATCH_NONE
}

func (x *PlayerGCGMatchDismissNotify) GetUidList() []uint32 {
	if x != nil {
		return x.UidList
	}
	return nil
}

type PlayerGCGMatchConfirmNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     uint32 `protobuf:"varint,10,opt,name=uid,proto3" json:"uid,omitempty"`
	IsAgree bool   `protobuf:"varint,5,opt,name=is_agree,json=isAgree,proto3" json:"is_agree,omitempty"`
	MatchId uint32 `protobuf:"varint,14,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
}

func (x *PlayerGCGMatchConfirmNotify) Reset() {
	*x = PlayerGCGMatchConfirmNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_match_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGCGMatchConfirmNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGCGMatchConfirmNotify) ProtoMessage() {}

func (x *PlayerGCGMatchConfirmNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_match_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGCGMatchConfirmNotify.ProtoReflect.Descriptor instead.
func (*PlayerGCGMatchConfirmNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_match_proto_rawDescGZIP(), []int{21}
}

func (x *PlayerGCGMatchConfirmNotify) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlayerGCGMatchConfirmNotify) GetIsAgree() bool {
	if x != nil {
		return x.IsAgree
	}
	return false
}

func (x *PlayerGCGMatchConfirmNotify) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

var File_cmd_cmd_match_proto protoreflect.FileDescriptor

var file_cmd_cmd_match_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x6d, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x02, 0x0a, 0x13, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x12, 0x2f, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75,
	0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69,
	0x63, 0x75, 0x73, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x70,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x22, 0xb4, 0x02, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x49,
	0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75,
	0x73, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0x86, 0x03, 0x0a, 0x15, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x6d, 0x65, 0x63,
	0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6d,
	0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x18, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x70,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74,
	0x55, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x0a, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0x61, 0x0a, 0x14,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2f,
	0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x5e, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x6f, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x55, 0x69, 0x64, 0x22,
	0x68, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x67, 0x72, 0x65, 0x65, 0x64, 0x12,
	0x38, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x87, 0x01, 0x0a, 0x10, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x0c, 0x47, 0x43, 0x47, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8a, 0x03, 0x0a,
	0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x63, 0x63,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x45, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a,
	0x0a, 0x6d, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x68,
	0x6f, 0x73, 0x74, 0x55, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x67, 0x63, 0x67, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x67, 0x63, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x6d,
	0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x18, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x65, 0x0a, 0x15, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x12, 0x2f, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x67, 0x72, 0x65, 0x65, 0x64,
	0x22, 0x9a, 0x01, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x0a, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x72,
	0x65, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x67, 0x72,
	0x65, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x48, 0x0a,
	0x27, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x4d, 0x70, 0x41, 0x66, 0x74, 0x65, 0x72, 0x41, 0x67, 0x72, 0x65, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x55, 0x69, 0x64, 0x22, 0xc1, 0x02, 0x0a, 0x1d, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x67, 0x72, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x67, 0x72,
	0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x8a,
	0x01, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x55, 0x43,
	0x43, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x4d, 0x50, 0x5f, 0x55, 0x4e,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x10, 0x03, 0x12, 0x1b,
	0x0a, 0x17, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x10, 0x04, 0x22, 0xc3, 0x01, 0x0a, 0x28,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x4d, 0x70, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x67, 0x72, 0x65,
	0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x72, 0x63, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x83, 0x01, 0x0a, 0x1f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x1f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x72, 0x65,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x67, 0x72, 0x65, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x65, 0x74, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x51, 0x75, 0x69, 0x74, 0x42, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x22, 0x74, 0x0a, 0x1c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x65, 0x74, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x51, 0x75, 0x69, 0x74, 0x42, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3e, 0x0a, 0x21, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x72, 0x79, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x1b, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x47, 0x43, 0x47, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x07, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x1b, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x47, 0x43, 0x47, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x41, 0x67, 0x72, 0x65, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74,
	0x65, 0x79, 0x76, 0x61, 0x74, 0x2d, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2f, 0x68, 0x6b, 0x34,
	0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_cmd_cmd_match_proto_rawDescOnce sync.Once
	file_cmd_cmd_match_proto_rawDescData = file_cmd_cmd_match_proto_rawDesc
)

func file_cmd_cmd_match_proto_rawDescGZIP() []byte {
	file_cmd_cmd_match_proto_rawDescOnce.Do(func() {
		file_cmd_cmd_match_proto_rawDescData = protoimpl.X.CompressGZIP(file_cmd_cmd_match_proto_rawDescData)
	})
	return file_cmd_cmd_match_proto_rawDescData
}

var file_cmd_cmd_match_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cmd_cmd_match_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_cmd_cmd_match_proto_goTypes = []interface{}{
	(PlayerMatchAgreedResultNotify_Reason)(0),        // 0: proto.PlayerMatchAgreedResultNotify.Reason
	(*PlayerStartMatchReq)(nil),                      // 1: proto.PlayerStartMatchReq
	(*PlayerStartMatchRsp)(nil),                      // 2: proto.PlayerStartMatchRsp
	(*PlayerMatchInfoNotify)(nil),                    // 3: proto.PlayerMatchInfoNotify
	(*PlayerCancelMatchReq)(nil),                     // 4: proto.PlayerCancelMatchReq
	(*PlayerCancelMatchRsp)(nil),                     // 5: proto.PlayerCancelMatchRsp
	(*PlayerMatchStopNotify)(nil),                    // 6: proto.PlayerMatchStopNotify
	(*MatchPlayerInfo)(nil),                          // 7: proto.MatchPlayerInfo
	(*GeneralMatchInfo)(nil),                         // 8: proto.GeneralMatchInfo
	(*GCGMatchInfo)(nil),                             // 9: proto.GCGMatchInfo
	(*PlayerMatchSuccNotify)(nil),                    // 10: proto.PlayerMatchSuccNotify
	(*PlayerConfirmMatchReq)(nil),                    // 11: proto.PlayerConfirmMatchReq
	(*PlayerConfirmMatchRsp)(nil),                    // 12: proto.PlayerConfirmMatchRsp
	(*PlayerAllowEnterMpAfterAgreeMatchNotify)(nil),  // 13: proto.PlayerAllowEnterMpAfterAgreeMatchNotify
	(*PlayerMatchAgreedResultNotify)(nil),            // 14: proto.PlayerMatchAgreedResultNotify
	(*PlayerApplyEnterMpAfterMatchAgreedNotify)(nil), // 15: proto.PlayerApplyEnterMpAfterMatchAgreedNotify
	(*PlayerGeneralMatchDismissNotify)(nil),          // 16: proto.PlayerGeneralMatchDismissNotify
	(*PlayerGeneralMatchConfirmNotify)(nil),          // 17: proto.PlayerGeneralMatchConfirmNotify
	(*PlayerGetForceQuitBanInfoReq)(nil),             // 18: proto.PlayerGetForceQuitBanInfoReq
	(*PlayerGetForceQuitBanInfoRsp)(nil),             // 19: proto.PlayerGetForceQuitBanInfoRsp
	(*ServerTryCancelGeneralMatchNotify)(nil),        // 20: proto.ServerTryCancelGeneralMatchNotify
	(*PlayerGCGMatchDismissNotify)(nil),              // 21: proto.PlayerGCGMatchDismissNotify
	(*PlayerGCGMatchConfirmNotify)(nil),              // 22: proto.PlayerGCGMatchConfirmNotify
	(MatchType)(0),                                   // 23: proto.MatchType
	(MatchReason)(0),                                 // 24: proto.MatchReason
	(*OnlinePlayerInfo)(nil),                         // 25: proto.OnlinePlayerInfo
}
var file_cmd_cmd_match_proto_depIdxs = []int32{
	23, // 0: proto.PlayerStartMatchReq.match_type:type_name -> proto.MatchType
	23, // 1: proto.PlayerStartMatchRsp.match_type:type_name -> proto.MatchType
	23, // 2: proto.PlayerMatchInfoNotify.match_type:type_name -> proto.MatchType
	23, // 3: proto.PlayerCancelMatchReq.match_type:type_name -> proto.MatchType
	23, // 4: proto.PlayerCancelMatchRsp.match_type:type_name -> proto.MatchType
	24, // 5: proto.PlayerMatchStopNotify.reason:type_name -> proto.MatchReason
	25, // 6: proto.MatchPlayerInfo.player_info:type_name -> proto.OnlinePlayerInfo
	7,  // 7: proto.GeneralMatchInfo.player_list:type_name -> proto.MatchPlayerInfo
	7,  // 8: proto.GCGMatchInfo.player_list:type_name -> proto.MatchPlayerInfo
	8,  // 9: proto.PlayerMatchSuccNotify.general_match_info:type_name -> proto.GeneralMatchInfo
	23, // 10: proto.PlayerMatchSuccNotify.match_type:type_name -> proto.MatchType
	9,  // 11: proto.PlayerMatchSuccNotify.gcg_match_info:type_name -> proto.GCGMatchInfo
	23, // 12: proto.PlayerConfirmMatchReq.match_type:type_name -> proto.MatchType
	23, // 13: proto.PlayerConfirmMatchRsp.match_type:type_name -> proto.MatchType
	23, // 14: proto.PlayerMatchAgreedResultNotify.match_type:type_name -> proto.MatchType
	0,  // 15: proto.PlayerMatchAgreedResultNotify.reason:type_name -> proto.PlayerMatchAgreedResultNotify.Reason
	25, // 16: proto.PlayerApplyEnterMpAfterMatchAgreedNotify.src_player_info:type_name -> proto.OnlinePlayerInfo
	23, // 17: proto.PlayerApplyEnterMpAfterMatchAgreedNotify.match_type:type_name -> proto.MatchType
	24, // 18: proto.PlayerGeneralMatchDismissNotify.reason:type_name -> proto.MatchReason
	24, // 19: proto.PlayerGCGMatchDismissNotify.reason:type_name -> proto.MatchReason
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_cmd_cmd_match_proto_init() }
func file_cmd_cmd_match_proto_init() {
	if File_cmd_cmd_match_proto != nil {
		return
	}
	file_define_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cmd_cmd_match_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerStartMatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_match_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerStartMatchRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_match_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerMatchInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_match_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerCancelMatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_match_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerCancelMatchRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_match_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerMatchStopNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_match_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_match_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_match_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_match_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerMatchSuccNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_match_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerConfirmMatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_match_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerConfirmMatchRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_match_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerAllowEnterMpAfterAgreeMatchNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_match_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerMatchAgreedResultNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_match_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerApplyEnterMpAfterMatchAgreedNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_match_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGeneralMatchDismissNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_match_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGeneralMatchConfirmNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_match_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGetForceQuitBanInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_match_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGetForceQuitBanInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_match_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerTryCancelGeneralMatchNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_match_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGCGMatchDismissNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_match_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGCGMatchConfirmNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cmd_cmd_match_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cmd_cmd_match_proto_goTypes,
		DependencyIndexes: file_cmd_cmd_match_proto_depIdxs,
		EnumInfos:         file_cmd_cmd_match_proto_enumTypes,
		MessageInfos:      file_cmd_cmd_match_proto_msgTypes,
	}.Build()
	File_cmd_cmd_match_proto = out.File
	file_cmd_cmd_match_proto_rawDesc = nil
	file_cmd_cmd_match_proto_goTypes = nil
	file_cmd_cmd_match_proto_depIdxs = nil
}
