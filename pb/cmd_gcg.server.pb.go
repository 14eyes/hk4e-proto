// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: server_only/cmd_gcg.server.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GCGStatisticSpecifyItemType int32

const (
	GCGStatisticSpecifyItemType_SPECIFY_INIT                      GCGStatisticSpecifyItemType = 0
	GCGStatisticSpecifyItemType_DIE_CHARACTER_NUM                 GCGStatisticSpecifyItemType = 1
	GCGStatisticSpecifyItemType_ALIVE_CHARACTER_HP_SUM            GCGStatisticSpecifyItemType = 2
	GCGStatisticSpecifyItemType_BEING_DAMAGE_SUM                  GCGStatisticSpecifyItemType = 3
	GCGStatisticSpecifyItemType_BEING_HEAL_SUM                    GCGStatisticSpecifyItemType = 4
	GCGStatisticSpecifyItemType_SHIELD_REDUCE_SUM                 GCGStatisticSpecifyItemType = 5
	GCGStatisticSpecifyItemType_REST_ENERGY                       GCGStatisticSpecifyItemType = 6
	GCGStatisticSpecifyItemType_REST_THINK_REST_VIRTUAL_DICE_SUM  GCGStatisticSpecifyItemType = 7
	GCGStatisticSpecifyItemType_REST_DISCARD_INTENTION_SUM        GCGStatisticSpecifyItemType = 8
	GCGStatisticSpecifyItemType_REST_DISCARD_INTENTION_DAMAGE_SUM GCGStatisticSpecifyItemType = 9
	GCGStatisticSpecifyItemType_ELEMENT_REACTION_TIMES            GCGStatisticSpecifyItemType = 10
	GCGStatisticSpecifyItemType_ONE_HIT_DAMAGE_VEC                GCGStatisticSpecifyItemType = 11
	GCGStatisticSpecifyItemType_PLAY_CARD_TIMES                   GCGStatisticSpecifyItemType = 12
	GCGStatisticSpecifyItemType_SUMMON_TIMES                      GCGStatisticSpecifyItemType = 13
	GCGStatisticSpecifyItemType_SKILL_TAG_Q_TIMES                 GCGStatisticSpecifyItemType = 14
	GCGStatisticSpecifyItemType_ONE_OPERATION_KILL_COUNT_VEC      GCGStatisticSpecifyItemType = 15
	GCGStatisticSpecifyItemType_CHARACTER_DIE_TIMES               GCGStatisticSpecifyItemType = 16
	GCGStatisticSpecifyItemType_BEING_DAMAGE_OVERFLOW_SUM         GCGStatisticSpecifyItemType = 17
)

// Enum value maps for GCGStatisticSpecifyItemType.
var (
	GCGStatisticSpecifyItemType_name = map[int32]string{
		0:  "SPECIFY_INIT",
		1:  "DIE_CHARACTER_NUM",
		2:  "ALIVE_CHARACTER_HP_SUM",
		3:  "BEING_DAMAGE_SUM",
		4:  "BEING_HEAL_SUM",
		5:  "SHIELD_REDUCE_SUM",
		6:  "REST_ENERGY",
		7:  "REST_THINK_REST_VIRTUAL_DICE_SUM",
		8:  "REST_DISCARD_INTENTION_SUM",
		9:  "REST_DISCARD_INTENTION_DAMAGE_SUM",
		10: "ELEMENT_REACTION_TIMES",
		11: "ONE_HIT_DAMAGE_VEC",
		12: "PLAY_CARD_TIMES",
		13: "SUMMON_TIMES",
		14: "SKILL_TAG_Q_TIMES",
		15: "ONE_OPERATION_KILL_COUNT_VEC",
		16: "CHARACTER_DIE_TIMES",
		17: "BEING_DAMAGE_OVERFLOW_SUM",
	}
	GCGStatisticSpecifyItemType_value = map[string]int32{
		"SPECIFY_INIT":                      0,
		"DIE_CHARACTER_NUM":                 1,
		"ALIVE_CHARACTER_HP_SUM":            2,
		"BEING_DAMAGE_SUM":                  3,
		"BEING_HEAL_SUM":                    4,
		"SHIELD_REDUCE_SUM":                 5,
		"REST_ENERGY":                       6,
		"REST_THINK_REST_VIRTUAL_DICE_SUM":  7,
		"REST_DISCARD_INTENTION_SUM":        8,
		"REST_DISCARD_INTENTION_DAMAGE_SUM": 9,
		"ELEMENT_REACTION_TIMES":            10,
		"ONE_HIT_DAMAGE_VEC":                11,
		"PLAY_CARD_TIMES":                   12,
		"SUMMON_TIMES":                      13,
		"SKILL_TAG_Q_TIMES":                 14,
		"ONE_OPERATION_KILL_COUNT_VEC":      15,
		"CHARACTER_DIE_TIMES":               16,
		"BEING_DAMAGE_OVERFLOW_SUM":         17,
	}
)

func (x GCGStatisticSpecifyItemType) Enum() *GCGStatisticSpecifyItemType {
	p := new(GCGStatisticSpecifyItemType)
	*p = x
	return p
}

func (x GCGStatisticSpecifyItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCGStatisticSpecifyItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_only_cmd_gcg_server_proto_enumTypes[0].Descriptor()
}

func (GCGStatisticSpecifyItemType) Type() protoreflect.EnumType {
	return &file_server_only_cmd_gcg_server_proto_enumTypes[0]
}

func (x GCGStatisticSpecifyItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GCGStatisticSpecifyItemType.Descriptor instead.
func (GCGStatisticSpecifyItemType) EnumDescriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{0}
}

type GCGStatisticCommonItemType int32

const (
	GCGStatisticCommonItemType_COMMON_INIT         GCGStatisticCommonItemType = 0
	GCGStatisticCommonItemType_CONTROLLER_A_WIN    GCGStatisticCommonItemType = 1
	GCGStatisticCommonItemType_ROUND_NUM           GCGStatisticCommonItemType = 2
	GCGStatisticCommonItemType_WINNER_REST_DICE    GCGStatisticCommonItemType = 3
	GCGStatisticCommonItemType_PHASE_MAIN_TIME_USE GCGStatisticCommonItemType = 4
)

// Enum value maps for GCGStatisticCommonItemType.
var (
	GCGStatisticCommonItemType_name = map[int32]string{
		0: "COMMON_INIT",
		1: "CONTROLLER_A_WIN",
		2: "ROUND_NUM",
		3: "WINNER_REST_DICE",
		4: "PHASE_MAIN_TIME_USE",
	}
	GCGStatisticCommonItemType_value = map[string]int32{
		"COMMON_INIT":         0,
		"CONTROLLER_A_WIN":    1,
		"ROUND_NUM":           2,
		"WINNER_REST_DICE":    3,
		"PHASE_MAIN_TIME_USE": 4,
	}
)

func (x GCGStatisticCommonItemType) Enum() *GCGStatisticCommonItemType {
	p := new(GCGStatisticCommonItemType)
	*p = x
	return p
}

func (x GCGStatisticCommonItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCGStatisticCommonItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_only_cmd_gcg_server_proto_enumTypes[1].Descriptor()
}

func (GCGStatisticCommonItemType) Type() protoreflect.EnumType {
	return &file_server_only_cmd_gcg_server_proto_enumTypes[1]
}

func (x GCGStatisticCommonItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GCGStatisticCommonItemType.Descriptor instead.
func (GCGStatisticCommonItemType) EnumDescriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{1}
}

type ServerGCGVerify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameUid     uint32 `protobuf:"varint,1,opt,name=game_uid,json=gameUid,proto3" json:"game_uid,omitempty"`
	VerifyCode  uint32 `protobuf:"varint,2,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`
	AppId       uint32 `protobuf:"varint,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ThreadIndex uint32 `protobuf:"varint,4,opt,name=thread_index,json=threadIndex,proto3" json:"thread_index,omitempty"`
}

func (x *ServerGCGVerify) Reset() {
	*x = ServerGCGVerify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGVerify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGVerify) ProtoMessage() {}

func (x *ServerGCGVerify) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGVerify.ProtoReflect.Descriptor instead.
func (*ServerGCGVerify) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{0}
}

func (x *ServerGCGVerify) GetGameUid() uint32 {
	if x != nil {
		return x.GameUid
	}
	return 0
}

func (x *ServerGCGVerify) GetVerifyCode() uint32 {
	if x != nil {
		return x.VerifyCode
	}
	return 0
}

func (x *ServerGCGVerify) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *ServerGCGVerify) GetThreadIndex() uint32 {
	if x != nil {
		return x.ThreadIndex
	}
	return 0
}

type ServerGCGOperationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   uint32        `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Op    *GCGOperation `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"`
	OpSeq uint32        `protobuf:"varint,3,opt,name=op_seq,json=opSeq,proto3" json:"op_seq,omitempty"`
}

func (x *ServerGCGOperationReq) Reset() {
	*x = ServerGCGOperationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGOperationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGOperationReq) ProtoMessage() {}

func (x *ServerGCGOperationReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGOperationReq.ProtoReflect.Descriptor instead.
func (*ServerGCGOperationReq) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{1}
}

func (x *ServerGCGOperationReq) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ServerGCGOperationReq) GetOp() *GCGOperation {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *ServerGCGOperationReq) GetOpSeq() uint32 {
	if x != nil {
		return x.OpSeq
	}
	return 0
}

type ServerGCGOperationRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32  `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	OpSeq   uint32 `protobuf:"varint,2,opt,name=op_seq,json=opSeq,proto3" json:"op_seq,omitempty"`
}

func (x *ServerGCGOperationRsp) Reset() {
	*x = ServerGCGOperationRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGOperationRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGOperationRsp) ProtoMessage() {}

func (x *ServerGCGOperationRsp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGOperationRsp.ProtoReflect.Descriptor instead.
func (*ServerGCGOperationRsp) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{2}
}

func (x *ServerGCGOperationRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ServerGCGOperationRsp) GetOpSeq() uint32 {
	if x != nil {
		return x.OpSeq
	}
	return 0
}

type ServerGCGAskDuelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *ServerGCGAskDuelReq) Reset() {
	*x = ServerGCGAskDuelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGAskDuelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGAskDuelReq) ProtoMessage() {}

func (x *ServerGCGAskDuelReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGAskDuelReq.ProtoReflect.Descriptor instead.
func (*ServerGCGAskDuelReq) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{3}
}

func (x *ServerGCGAskDuelReq) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type ServerGCGNewGameInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId         uint32            `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ThreadIndex   uint32            `protobuf:"varint,2,opt,name=thread_index,json=threadIndex,proto3" json:"thread_index,omitempty"`
	GameBriefData *GCGGameBriefData `protobuf:"bytes,3,opt,name=game_brief_data,json=gameBriefData,proto3" json:"game_brief_data,omitempty"`
	CreateTime    uint32            `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	TryCreateTime uint32            `protobuf:"varint,5,opt,name=try_create_time,json=tryCreateTime,proto3" json:"try_create_time,omitempty"`
}

func (x *ServerGCGNewGameInfoNotify) Reset() {
	*x = ServerGCGNewGameInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGNewGameInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGNewGameInfoNotify) ProtoMessage() {}

func (x *ServerGCGNewGameInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGNewGameInfoNotify.ProtoReflect.Descriptor instead.
func (*ServerGCGNewGameInfoNotify) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{4}
}

func (x *ServerGCGNewGameInfoNotify) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *ServerGCGNewGameInfoNotify) GetThreadIndex() uint32 {
	if x != nil {
		return x.ThreadIndex
	}
	return 0
}

func (x *ServerGCGNewGameInfoNotify) GetGameBriefData() *GCGGameBriefData {
	if x != nil {
		return x.GameBriefData
	}
	return nil
}

func (x *ServerGCGNewGameInfoNotify) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ServerGCGNewGameInfoNotify) GetTryCreateTime() uint32 {
	if x != nil {
		return x.TryCreateTime
	}
	return 0
}

type ServerGCGGMCommandReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgList []string `protobuf:"bytes,1,rep,name=msg_list,json=msgList,proto3" json:"msg_list,omitempty"`
}

func (x *ServerGCGGMCommandReq) Reset() {
	*x = ServerGCGGMCommandReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGGMCommandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGGMCommandReq) ProtoMessage() {}

func (x *ServerGCGGMCommandReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGGMCommandReq.ProtoReflect.Descriptor instead.
func (*ServerGCGGMCommandReq) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{5}
}

func (x *ServerGCGGMCommandReq) GetMsgList() []string {
	if x != nil {
		return x.MsgList
	}
	return nil
}

type ServerGCGGMCommandRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode         int32  `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	RetMsg          string `protobuf:"bytes,2,opt,name=ret_msg,json=retMsg,proto3" json:"ret_msg,omitempty"`
	RetExtraContent string `protobuf:"bytes,3,opt,name=ret_extra_content,json=retExtraContent,proto3" json:"ret_extra_content,omitempty"`
}

func (x *ServerGCGGMCommandRsp) Reset() {
	*x = ServerGCGGMCommandRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGGMCommandRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGGMCommandRsp) ProtoMessage() {}

func (x *ServerGCGGMCommandRsp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGGMCommandRsp.ProtoReflect.Descriptor instead.
func (*ServerGCGGMCommandRsp) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{6}
}

func (x *ServerGCGGMCommandRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ServerGCGGMCommandRsp) GetRetMsg() string {
	if x != nil {
		return x.RetMsg
	}
	return ""
}

func (x *ServerGCGGMCommandRsp) GetRetExtraContent() string {
	if x != nil {
		return x.RetExtraContent
	}
	return ""
}

type ServerGCGInitFinishReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *ServerGCGInitFinishReq) Reset() {
	*x = ServerGCGInitFinishReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGInitFinishReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGInitFinishReq) ProtoMessage() {}

func (x *ServerGCGInitFinishReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGInitFinishReq.ProtoReflect.Descriptor instead.
func (*ServerGCGInitFinishReq) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{7}
}

func (x *ServerGCGInitFinishReq) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type ServerGCGSyncReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameUid    uint32 `protobuf:"varint,1,opt,name=game_uid,json=gameUid,proto3" json:"game_uid,omitempty"`
	VerifyCode uint32 `protobuf:"varint,2,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`
	IsLogin    bool   `protobuf:"varint,3,opt,name=is_login,json=isLogin,proto3" json:"is_login,omitempty"`
}

func (x *ServerGCGSyncReq) Reset() {
	*x = ServerGCGSyncReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGSyncReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGSyncReq) ProtoMessage() {}

func (x *ServerGCGSyncReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGSyncReq.ProtoReflect.Descriptor instead.
func (*ServerGCGSyncReq) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{8}
}

func (x *ServerGCGSyncReq) GetGameUid() uint32 {
	if x != nil {
		return x.GameUid
	}
	return 0
}

func (x *ServerGCGSyncReq) GetVerifyCode() uint32 {
	if x != nil {
		return x.VerifyCode
	}
	return 0
}

func (x *ServerGCGSyncReq) GetIsLogin() bool {
	if x != nil {
		return x.IsLogin
	}
	return false
}

type ServerGCGSyncRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode     int32  `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	GameUid     uint32 `protobuf:"varint,2,opt,name=game_uid,json=gameUid,proto3" json:"game_uid,omitempty"`
	VerifyCode  uint32 `protobuf:"varint,3,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`
	AppId       uint32 `protobuf:"varint,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ThreadIndex uint32 `protobuf:"varint,5,opt,name=thread_index,json=threadIndex,proto3" json:"thread_index,omitempty"`
	IsLogin     bool   `protobuf:"varint,6,opt,name=is_login,json=isLogin,proto3" json:"is_login,omitempty"`
}

func (x *ServerGCGSyncRsp) Reset() {
	*x = ServerGCGSyncRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGSyncRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGSyncRsp) ProtoMessage() {}

func (x *ServerGCGSyncRsp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGSyncRsp.ProtoReflect.Descriptor instead.
func (*ServerGCGSyncRsp) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{9}
}

func (x *ServerGCGSyncRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ServerGCGSyncRsp) GetGameUid() uint32 {
	if x != nil {
		return x.GameUid
	}
	return 0
}

func (x *ServerGCGSyncRsp) GetVerifyCode() uint32 {
	if x != nil {
		return x.VerifyCode
	}
	return 0
}

func (x *ServerGCGSyncRsp) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *ServerGCGSyncRsp) GetThreadIndex() uint32 {
	if x != nil {
		return x.ThreadIndex
	}
	return 0
}

func (x *ServerGCGSyncRsp) GetIsLogin() bool {
	if x != nil {
		return x.IsLogin
	}
	return false
}

type GCGPlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfo *OnlinePlayerInfo `protobuf:"bytes,1,opt,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"`
	DuelExtra  *GCGDuelExtra     `protobuf:"bytes,2,opt,name=duel_extra,json=duelExtra,proto3" json:"duel_extra,omitempty"`
}

func (x *GCGPlayerData) Reset() {
	*x = GCGPlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGPlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGPlayerData) ProtoMessage() {}

func (x *GCGPlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGPlayerData.ProtoReflect.Descriptor instead.
func (*GCGPlayerData) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{10}
}

func (x *GCGPlayerData) GetPlayerInfo() *OnlinePlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *GCGPlayerData) GetDuelExtra() *GCGDuelExtra {
	if x != nil {
		return x.DuelExtra
	}
	return nil
}

type ServerGCGCreateSingleGameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId          uint32              `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	BusinessType    GCGGameBusinessType `protobuf:"varint,2,opt,name=business_type,json=businessType,proto3,enum=proto.GCGGameBusinessType" json:"business_type,omitempty"`
	PlayerData      *GCGPlayerData      `protobuf:"bytes,3,opt,name=player_data,json=playerData,proto3" json:"player_data,omitempty"`
	CustomParamList []uint32            `protobuf:"varint,4,rep,packed,name=custom_param_list,json=customParamList,proto3" json:"custom_param_list,omitempty"`
	TryCreateTime   uint32              `protobuf:"varint,5,opt,name=try_create_time,json=tryCreateTime,proto3" json:"try_create_time,omitempty"`
}

func (x *ServerGCGCreateSingleGameReq) Reset() {
	*x = ServerGCGCreateSingleGameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGCreateSingleGameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGCreateSingleGameReq) ProtoMessage() {}

func (x *ServerGCGCreateSingleGameReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGCreateSingleGameReq.ProtoReflect.Descriptor instead.
func (*ServerGCGCreateSingleGameReq) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{11}
}

func (x *ServerGCGCreateSingleGameReq) GetGameId() uint32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *ServerGCGCreateSingleGameReq) GetBusinessType() GCGGameBusinessType {
	if x != nil {
		return x.BusinessType
	}
	return GCGGameBusinessType_GCG_GAME_NONE
}

func (x *ServerGCGCreateSingleGameReq) GetPlayerData() *GCGPlayerData {
	if x != nil {
		return x.PlayerData
	}
	return nil
}

func (x *ServerGCGCreateSingleGameReq) GetCustomParamList() []uint32 {
	if x != nil {
		return x.CustomParamList
	}
	return nil
}

func (x *ServerGCGCreateSingleGameReq) GetTryCreateTime() uint32 {
	if x != nil {
		return x.TryCreateTime
	}
	return 0
}

type ServerGCGCreateSingleGameRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32  `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	GameId  uint32 `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (x *ServerGCGCreateSingleGameRsp) Reset() {
	*x = ServerGCGCreateSingleGameRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGCreateSingleGameRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGCreateSingleGameRsp) ProtoMessage() {}

func (x *ServerGCGCreateSingleGameRsp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGCreateSingleGameRsp.ProtoReflect.Descriptor instead.
func (*ServerGCGCreateSingleGameRsp) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{12}
}

func (x *ServerGCGCreateSingleGameRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ServerGCGCreateSingleGameRsp) GetGameId() uint32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

type ServerGCGGiveUpGameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameUid      uint32              `protobuf:"varint,1,opt,name=game_uid,json=gameUid,proto3" json:"game_uid,omitempty"`
	GameId       uint32              `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	VerifyCode   uint32              `protobuf:"varint,3,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`
	BusinessType GCGGameBusinessType `protobuf:"varint,4,opt,name=business_type,json=businessType,proto3,enum=proto.GCGGameBusinessType" json:"business_type,omitempty"`
}

func (x *ServerGCGGiveUpGameReq) Reset() {
	*x = ServerGCGGiveUpGameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGGiveUpGameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGGiveUpGameReq) ProtoMessage() {}

func (x *ServerGCGGiveUpGameReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGGiveUpGameReq.ProtoReflect.Descriptor instead.
func (*ServerGCGGiveUpGameReq) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{13}
}

func (x *ServerGCGGiveUpGameReq) GetGameUid() uint32 {
	if x != nil {
		return x.GameUid
	}
	return 0
}

func (x *ServerGCGGiveUpGameReq) GetGameId() uint32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *ServerGCGGiveUpGameReq) GetVerifyCode() uint32 {
	if x != nil {
		return x.VerifyCode
	}
	return 0
}

func (x *ServerGCGGiveUpGameReq) GetBusinessType() GCGGameBusinessType {
	if x != nil {
		return x.BusinessType
	}
	return GCGGameBusinessType_GCG_GAME_NONE
}

type ServerGCGGiveUpGameRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode     int32  `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	GameUid     uint32 `protobuf:"varint,2,opt,name=game_uid,json=gameUid,proto3" json:"game_uid,omitempty"`
	GameId      uint32 `protobuf:"varint,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	VerifyCode  uint32 `protobuf:"varint,4,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`
	AppId       uint32 `protobuf:"varint,5,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ThreadIndex uint32 `protobuf:"varint,6,opt,name=thread_index,json=threadIndex,proto3" json:"thread_index,omitempty"`
}

func (x *ServerGCGGiveUpGameRsp) Reset() {
	*x = ServerGCGGiveUpGameRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGGiveUpGameRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGGiveUpGameRsp) ProtoMessage() {}

func (x *ServerGCGGiveUpGameRsp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGGiveUpGameRsp.ProtoReflect.Descriptor instead.
func (*ServerGCGGiveUpGameRsp) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{14}
}

func (x *ServerGCGGiveUpGameRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ServerGCGGiveUpGameRsp) GetGameUid() uint32 {
	if x != nil {
		return x.GameUid
	}
	return 0
}

func (x *ServerGCGGiveUpGameRsp) GetGameId() uint32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *ServerGCGGiveUpGameRsp) GetVerifyCode() uint32 {
	if x != nil {
		return x.VerifyCode
	}
	return 0
}

func (x *ServerGCGGiveUpGameRsp) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *ServerGCGGiveUpGameRsp) GetThreadIndex() uint32 {
	if x != nil {
		return x.ThreadIndex
	}
	return 0
}

type ServerGCGSkillPreviewAskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *ServerGCGSkillPreviewAskReq) Reset() {
	*x = ServerGCGSkillPreviewAskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGSkillPreviewAskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGSkillPreviewAskReq) ProtoMessage() {}

func (x *ServerGCGSkillPreviewAskReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGSkillPreviewAskReq.ProtoReflect.Descriptor instead.
func (*ServerGCGSkillPreviewAskReq) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{15}
}

func (x *ServerGCGSkillPreviewAskReq) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type ServerGCGSkillPreviewAskRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *ServerGCGSkillPreviewAskRsp) Reset() {
	*x = ServerGCGSkillPreviewAskRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGSkillPreviewAskRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGSkillPreviewAskRsp) ProtoMessage() {}

func (x *ServerGCGSkillPreviewAskRsp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGSkillPreviewAskRsp.ProtoReflect.Descriptor instead.
func (*ServerGCGSkillPreviewAskRsp) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{16}
}

func (x *ServerGCGSkillPreviewAskRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type ServerGCGCreateMultiGameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId        uint32              `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	BusinessType  GCGGameBusinessType `protobuf:"varint,2,opt,name=business_type,json=businessType,proto3,enum=proto.GCGGameBusinessType" json:"business_type,omitempty"`
	PlayerData_1  *GCGPlayerData      `protobuf:"bytes,3,opt,name=player_data_1,json=playerData1,proto3" json:"player_data_1,omitempty"`
	PlayerData_2  *GCGPlayerData      `protobuf:"bytes,4,opt,name=player_data_2,json=playerData2,proto3" json:"player_data_2,omitempty"`
	TryCreateTime uint32              `protobuf:"varint,5,opt,name=try_create_time,json=tryCreateTime,proto3" json:"try_create_time,omitempty"`
}

func (x *ServerGCGCreateMultiGameReq) Reset() {
	*x = ServerGCGCreateMultiGameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGCreateMultiGameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGCreateMultiGameReq) ProtoMessage() {}

func (x *ServerGCGCreateMultiGameReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGCreateMultiGameReq.ProtoReflect.Descriptor instead.
func (*ServerGCGCreateMultiGameReq) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{17}
}

func (x *ServerGCGCreateMultiGameReq) GetGameId() uint32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *ServerGCGCreateMultiGameReq) GetBusinessType() GCGGameBusinessType {
	if x != nil {
		return x.BusinessType
	}
	return GCGGameBusinessType_GCG_GAME_NONE
}

func (x *ServerGCGCreateMultiGameReq) GetPlayerData_1() *GCGPlayerData {
	if x != nil {
		return x.PlayerData_1
	}
	return nil
}

func (x *ServerGCGCreateMultiGameReq) GetPlayerData_2() *GCGPlayerData {
	if x != nil {
		return x.PlayerData_2
	}
	return nil
}

func (x *ServerGCGCreateMultiGameReq) GetTryCreateTime() uint32 {
	if x != nil {
		return x.TryCreateTime
	}
	return 0
}

type ServerGCGCreateMultiGameRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32  `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	GameId  uint32 `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (x *ServerGCGCreateMultiGameRsp) Reset() {
	*x = ServerGCGCreateMultiGameRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGCreateMultiGameRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGCreateMultiGameRsp) ProtoMessage() {}

func (x *ServerGCGCreateMultiGameRsp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGCreateMultiGameRsp.ProtoReflect.Descriptor instead.
func (*ServerGCGCreateMultiGameRsp) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{18}
}

func (x *ServerGCGCreateMultiGameRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ServerGCGCreateMultiGameRsp) GetGameId() uint32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

type ServerGCGAddBothAITaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId       uint64 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	SubtaskId    uint32 `protobuf:"varint,2,opt,name=subtask_id,json=subtaskId,proto3" json:"subtask_id,omitempty"`
	GameType     uint32 `protobuf:"varint,3,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`
	LevelId      uint32 `protobuf:"varint,4,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	CardGroup1Id uint32 `protobuf:"varint,5,opt,name=card_group1_id,json=cardGroup1Id,proto3" json:"card_group1_id,omitempty"`
	CardGroup2Id uint32 `protobuf:"varint,6,opt,name=card_group2_id,json=cardGroup2Id,proto3" json:"card_group2_id,omitempty"`
}

func (x *ServerGCGAddBothAITaskReq) Reset() {
	*x = ServerGCGAddBothAITaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGAddBothAITaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGAddBothAITaskReq) ProtoMessage() {}

func (x *ServerGCGAddBothAITaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGAddBothAITaskReq.ProtoReflect.Descriptor instead.
func (*ServerGCGAddBothAITaskReq) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{19}
}

func (x *ServerGCGAddBothAITaskReq) GetTaskId() uint64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *ServerGCGAddBothAITaskReq) GetSubtaskId() uint32 {
	if x != nil {
		return x.SubtaskId
	}
	return 0
}

func (x *ServerGCGAddBothAITaskReq) GetGameType() uint32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *ServerGCGAddBothAITaskReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *ServerGCGAddBothAITaskReq) GetCardGroup1Id() uint32 {
	if x != nil {
		return x.CardGroup1Id
	}
	return 0
}

func (x *ServerGCGAddBothAITaskReq) GetCardGroup2Id() uint32 {
	if x != nil {
		return x.CardGroup2Id
	}
	return 0
}

type ServerGCGAddBothAITaskRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode   int32  `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	TaskId    uint32 `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	SubtaskId uint32 `protobuf:"varint,3,opt,name=subtask_id,json=subtaskId,proto3" json:"subtask_id,omitempty"`
}

func (x *ServerGCGAddBothAITaskRsp) Reset() {
	*x = ServerGCGAddBothAITaskRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGAddBothAITaskRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGAddBothAITaskRsp) ProtoMessage() {}

func (x *ServerGCGAddBothAITaskRsp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGAddBothAITaskRsp.ProtoReflect.Descriptor instead.
func (*ServerGCGAddBothAITaskRsp) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{20}
}

func (x *ServerGCGAddBothAITaskRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ServerGCGAddBothAITaskRsp) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *ServerGCGAddBothAITaskRsp) GetSubtaskId() uint32 {
	if x != nil {
		return x.SubtaskId
	}
	return 0
}

type GCGMatchPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchPlayer  *MatchPlayer  `protobuf:"bytes,1,opt,name=match_player,json=matchPlayer,proto3" json:"match_player,omitempty"`
	GcgDuelExtra *GCGDuelExtra `protobuf:"bytes,2,opt,name=gcg_duel_extra,json=gcgDuelExtra,proto3" json:"gcg_duel_extra,omitempty"`
}

func (x *GCGMatchPlayerInfo) Reset() {
	*x = GCGMatchPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGMatchPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGMatchPlayerInfo) ProtoMessage() {}

func (x *GCGMatchPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGMatchPlayerInfo.ProtoReflect.Descriptor instead.
func (*GCGMatchPlayerInfo) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{21}
}

func (x *GCGMatchPlayerInfo) GetMatchPlayer() *MatchPlayer {
	if x != nil {
		return x.MatchPlayer
	}
	return nil
}

func (x *GCGMatchPlayerInfo) GetGcgDuelExtra() *GCGDuelExtra {
	if x != nil {
		return x.GcgDuelExtra
	}
	return nil
}

type ServerGCGCreateMatchGameNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId            uint32                `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	GcgMatchPlayerList []*GCGMatchPlayerInfo `protobuf:"bytes,2,rep,name=gcg_match_player_list,json=gcgMatchPlayerList,proto3" json:"gcg_match_player_list,omitempty"`
	TryCreateTime      uint32                `protobuf:"varint,3,opt,name=try_create_time,json=tryCreateTime,proto3" json:"try_create_time,omitempty"`
}

func (x *ServerGCGCreateMatchGameNotify) Reset() {
	*x = ServerGCGCreateMatchGameNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGCreateMatchGameNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGCreateMatchGameNotify) ProtoMessage() {}

func (x *ServerGCGCreateMatchGameNotify) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGCreateMatchGameNotify.ProtoReflect.Descriptor instead.
func (*ServerGCGCreateMatchGameNotify) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{22}
}

func (x *ServerGCGCreateMatchGameNotify) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *ServerGCGCreateMatchGameNotify) GetGcgMatchPlayerList() []*GCGMatchPlayerInfo {
	if x != nil {
		return x.GcgMatchPlayerList
	}
	return nil
}

func (x *ServerGCGCreateMatchGameNotify) GetTryCreateTime() uint32 {
	if x != nil {
		return x.TryCreateTime
	}
	return 0
}

type ServerGCGCreateMatchAIGameNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId            uint32                `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	GcgMatchPlayerList []*GCGMatchPlayerInfo `protobuf:"bytes,2,rep,name=gcg_match_player_list,json=gcgMatchPlayerList,proto3" json:"gcg_match_player_list,omitempty"`
	AiInfo             *OnlinePlayerInfo     `protobuf:"bytes,3,opt,name=ai_info,json=aiInfo,proto3" json:"ai_info,omitempty"`
	TryCreateTime      uint32                `protobuf:"varint,4,opt,name=try_create_time,json=tryCreateTime,proto3" json:"try_create_time,omitempty"`
}

func (x *ServerGCGCreateMatchAIGameNotify) Reset() {
	*x = ServerGCGCreateMatchAIGameNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGCreateMatchAIGameNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGCreateMatchAIGameNotify) ProtoMessage() {}

func (x *ServerGCGCreateMatchAIGameNotify) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGCreateMatchAIGameNotify.ProtoReflect.Descriptor instead.
func (*ServerGCGCreateMatchAIGameNotify) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{23}
}

func (x *ServerGCGCreateMatchAIGameNotify) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *ServerGCGCreateMatchAIGameNotify) GetGcgMatchPlayerList() []*GCGMatchPlayerInfo {
	if x != nil {
		return x.GcgMatchPlayerList
	}
	return nil
}

func (x *ServerGCGCreateMatchAIGameNotify) GetAiInfo() *OnlinePlayerInfo {
	if x != nil {
		return x.AiInfo
	}
	return nil
}

func (x *ServerGCGCreateMatchAIGameNotify) GetTryCreateTime() uint32 {
	if x != nil {
		return x.TryCreateTime
	}
	return 0
}

type ServerGCGMatchFinishNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServerGCGMatchFinishNotify) Reset() {
	*x = ServerGCGMatchFinishNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGMatchFinishNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGMatchFinishNotify) ProtoMessage() {}

func (x *ServerGCGMatchFinishNotify) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGMatchFinishNotify.ProtoReflect.Descriptor instead.
func (*ServerGCGMatchFinishNotify) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{24}
}

type ServerGCGBackToDuelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameUid           uint32 `protobuf:"varint,1,opt,name=game_uid,json=gameUid,proto3" json:"game_uid,omitempty"`
	VerifyCode        uint32 `protobuf:"varint,2,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`
	ClientDataVersion uint32 `protobuf:"varint,3,opt,name=client_data_version,json=clientDataVersion,proto3" json:"client_data_version,omitempty"`
}

func (x *ServerGCGBackToDuelReq) Reset() {
	*x = ServerGCGBackToDuelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGBackToDuelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGBackToDuelReq) ProtoMessage() {}

func (x *ServerGCGBackToDuelReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGBackToDuelReq.ProtoReflect.Descriptor instead.
func (*ServerGCGBackToDuelReq) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{25}
}

func (x *ServerGCGBackToDuelReq) GetGameUid() uint32 {
	if x != nil {
		return x.GameUid
	}
	return 0
}

func (x *ServerGCGBackToDuelReq) GetVerifyCode() uint32 {
	if x != nil {
		return x.VerifyCode
	}
	return 0
}

func (x *ServerGCGBackToDuelReq) GetClientDataVersion() uint32 {
	if x != nil {
		return x.ClientDataVersion
	}
	return 0
}

type ServerGCGBackToDuelRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode           int32  `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	GameUid           uint32 `protobuf:"varint,2,opt,name=game_uid,json=gameUid,proto3" json:"game_uid,omitempty"`
	VerifyCode        uint32 `protobuf:"varint,3,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`
	AppId             uint32 `protobuf:"varint,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ThreadIndex       uint32 `protobuf:"varint,5,opt,name=thread_index,json=threadIndex,proto3" json:"thread_index,omitempty"`
	ClientDataVersion uint32 `protobuf:"varint,6,opt,name=client_data_version,json=clientDataVersion,proto3" json:"client_data_version,omitempty"`
}

func (x *ServerGCGBackToDuelRsp) Reset() {
	*x = ServerGCGBackToDuelRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGBackToDuelRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGBackToDuelRsp) ProtoMessage() {}

func (x *ServerGCGBackToDuelRsp) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGBackToDuelRsp.ProtoReflect.Descriptor instead.
func (*ServerGCGBackToDuelRsp) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{26}
}

func (x *ServerGCGBackToDuelRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ServerGCGBackToDuelRsp) GetGameUid() uint32 {
	if x != nil {
		return x.GameUid
	}
	return 0
}

func (x *ServerGCGBackToDuelRsp) GetVerifyCode() uint32 {
	if x != nil {
		return x.VerifyCode
	}
	return 0
}

func (x *ServerGCGBackToDuelRsp) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *ServerGCGBackToDuelRsp) GetThreadIndex() uint32 {
	if x != nil {
		return x.ThreadIndex
	}
	return 0
}

func (x *ServerGCGBackToDuelRsp) GetClientDataVersion() uint32 {
	if x != nil {
		return x.ClientDataVersion
	}
	return 0
}

type ServerGCGMessagePackNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verify      *ServerGCGVerify  `protobuf:"bytes,1,opt,name=verify,proto3" json:"verify,omitempty"`
	ServerSeq   uint32            `protobuf:"varint,2,opt,name=server_seq,json=serverSeq,proto3" json:"server_seq,omitempty"`
	MsgPackList []*GCGMessagePack `protobuf:"bytes,3,rep,name=msg_pack_list,json=msgPackList,proto3" json:"msg_pack_list,omitempty"`
}

func (x *ServerGCGMessagePackNotify) Reset() {
	*x = ServerGCGMessagePackNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGMessagePackNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGMessagePackNotify) ProtoMessage() {}

func (x *ServerGCGMessagePackNotify) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGMessagePackNotify.ProtoReflect.Descriptor instead.
func (*ServerGCGMessagePackNotify) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{27}
}

func (x *ServerGCGMessagePackNotify) GetVerify() *ServerGCGVerify {
	if x != nil {
		return x.Verify
	}
	return nil
}

func (x *ServerGCGMessagePackNotify) GetServerSeq() uint32 {
	if x != nil {
		return x.ServerSeq
	}
	return 0
}

func (x *ServerGCGMessagePackNotify) GetMsgPackList() []*GCGMessagePack {
	if x != nil {
		return x.MsgPackList
	}
	return nil
}

type ServerGCGHeartBeatNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verify    *ServerGCGVerify `protobuf:"bytes,1,opt,name=verify,proto3" json:"verify,omitempty"`
	ServerSeq uint32           `protobuf:"varint,2,opt,name=server_seq,json=serverSeq,proto3" json:"server_seq,omitempty"`
}

func (x *ServerGCGHeartBeatNotify) Reset() {
	*x = ServerGCGHeartBeatNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGHeartBeatNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGHeartBeatNotify) ProtoMessage() {}

func (x *ServerGCGHeartBeatNotify) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGHeartBeatNotify.ProtoReflect.Descriptor instead.
func (*ServerGCGHeartBeatNotify) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{28}
}

func (x *ServerGCGHeartBeatNotify) GetVerify() *ServerGCGVerify {
	if x != nil {
		return x.Verify
	}
	return nil
}

func (x *ServerGCGHeartBeatNotify) GetServerSeq() uint32 {
	if x != nil {
		return x.ServerSeq
	}
	return 0
}

type ServerGCGSkillPreviewNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verify                   *ServerGCGVerify               `protobuf:"bytes,1,opt,name=verify,proto3" json:"verify,omitempty"`
	ControllerId             uint32                         `protobuf:"varint,2,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	OnstageCardGuid          uint32                         `protobuf:"varint,3,opt,name=onstage_card_guid,json=onstageCardGuid,proto3" json:"onstage_card_guid,omitempty"`
	SkillPreviewList         []*GCGSkillPreviewInfo         `protobuf:"bytes,4,rep,name=skill_preview_list,json=skillPreviewList,proto3" json:"skill_preview_list,omitempty"`
	ChangeOnstagePreviewList []*GCGChangeOnstageInfo        `protobuf:"bytes,5,rep,name=change_onstage_preview_list,json=changeOnstagePreviewList,proto3" json:"change_onstage_preview_list,omitempty"`
	PlayCardList             []*GCGSkillPreviewPlayCardInfo `protobuf:"bytes,6,rep,name=play_card_list,json=playCardList,proto3" json:"play_card_list,omitempty"`
}

func (x *ServerGCGSkillPreviewNotify) Reset() {
	*x = ServerGCGSkillPreviewNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGSkillPreviewNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGSkillPreviewNotify) ProtoMessage() {}

func (x *ServerGCGSkillPreviewNotify) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGSkillPreviewNotify.ProtoReflect.Descriptor instead.
func (*ServerGCGSkillPreviewNotify) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{29}
}

func (x *ServerGCGSkillPreviewNotify) GetVerify() *ServerGCGVerify {
	if x != nil {
		return x.Verify
	}
	return nil
}

func (x *ServerGCGSkillPreviewNotify) GetControllerId() uint32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *ServerGCGSkillPreviewNotify) GetOnstageCardGuid() uint32 {
	if x != nil {
		return x.OnstageCardGuid
	}
	return 0
}

func (x *ServerGCGSkillPreviewNotify) GetSkillPreviewList() []*GCGSkillPreviewInfo {
	if x != nil {
		return x.SkillPreviewList
	}
	return nil
}

func (x *ServerGCGSkillPreviewNotify) GetChangeOnstagePreviewList() []*GCGChangeOnstageInfo {
	if x != nil {
		return x.ChangeOnstagePreviewList
	}
	return nil
}

func (x *ServerGCGSkillPreviewNotify) GetPlayCardList() []*GCGSkillPreviewPlayCardInfo {
	if x != nil {
		return x.PlayCardList
	}
	return nil
}

type ServerGCGChallengeUpdateNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verify    *ServerGCGVerify  `protobuf:"bytes,1,opt,name=verify,proto3" json:"verify,omitempty"`
	ServerSeq uint32            `protobuf:"varint,2,opt,name=server_seq,json=serverSeq,proto3" json:"server_seq,omitempty"`
	Challenge *GCGDuelChallenge `protobuf:"bytes,3,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (x *ServerGCGChallengeUpdateNotify) Reset() {
	*x = ServerGCGChallengeUpdateNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_only_cmd_gcg_server_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGCGChallengeUpdateNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGCGChallengeUpdateNotify) ProtoMessage() {}

func (x *ServerGCGChallengeUpdateNotify) ProtoReflect() protoreflect.Message {
	mi := &file_server_only_cmd_gcg_server_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGCGChallengeUpdateNotify.ProtoReflect.Descriptor instead.
func (*ServerGCGChallengeUpdateNotify) Descriptor() ([]byte, []int) {
	return file_server_only_cmd_gcg_server_proto_rawDescGZIP(), []int{30}
}

func (x *ServerGCGChallengeUpdateNotify) GetVerify() *ServerGCGVerify {
	if x != nil {
		return x.Verify
	}
	return nil
}

func (x *ServerGCGChallengeUpdateNotify) GetServerSeq() uint32 {
	if x != nil {
		return x.ServerSeq
	}
	return 0
}

func (x *ServerGCGChallengeUpdateNotify) GetChallenge() *GCGDuelChallenge {
	if x != nil {
		return x.Challenge
	}
	return nil
}

var File_server_only_cmd_gcg_server_proto protoreflect.FileDescriptor

var file_server_only_cmd_gcg_server_proto_rawDesc = []byte{
	0x0a, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x2f, 0x63, 0x6d,
	0x64, 0x5f, 0x67, 0x63, 0x67, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x6d, 0x64,
	0x5f, 0x67, 0x63, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x6d, 0x64, 0x5f, 0x67, 0x63, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x2f, 0x63, 0x6d, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x43, 0x47, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x67, 0x61, 0x6d, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x65, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43, 0x47, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02,
	0x6f, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6f, 0x70, 0x53, 0x65, 0x71, 0x22, 0x48, 0x0a, 0x15, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x43, 0x47, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x6f, 0x70, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x70,
	0x53, 0x65, 0x71, 0x22, 0x27, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43, 0x47,
	0x41, 0x73, 0x6b, 0x44, 0x75, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xe0, 0x01, 0x0a,
	0x1a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43, 0x47, 0x4e, 0x65, 0x77, 0x47, 0x61, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3f, 0x0a, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x72,
	0x69, 0x65, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x72,
	0x69, 0x65, 0x66, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x42, 0x72, 0x69,
	0x65, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x79, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x32, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43, 0x47, 0x47, 0x4d, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x76, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43, 0x47,
	0x47, 0x4d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x12,
	0x2a, 0x0a, 0x11, 0x72, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x32, 0x0a, 0x16, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43, 0x47, 0x49, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x69, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43, 0x47, 0x53, 0x79, 0x6e, 0x63,
	0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0xbd, 0x01, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43, 0x47, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x61, 0x6d,
	0x65, 0x55, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x7d, 0x0a, 0x0d, 0x47, 0x43,
	0x47, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0b, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x0a, 0x64, 0x75, 0x65, 0x6c, 0x5f, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x43, 0x47, 0x44, 0x75, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x09,
	0x64, 0x75, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x22, 0x83, 0x02, 0x0a, 0x1c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x43, 0x47, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x43, 0x47, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x79, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x51, 0x0a, 0x1c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43, 0x47, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43, 0x47,
	0x47, 0x69, 0x76, 0x65, 0x55, 0x70, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x67, 0x61, 0x6d, 0x65, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x43, 0x47, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43,
	0x47, 0x47, 0x69, 0x76, 0x65, 0x55, 0x70, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65,
	0x55, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x2f, 0x0a, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x41, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x37, 0x0a, 0x1b, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x41, 0x73, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x93, 0x02, 0x0a, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43, 0x47, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x47, 0x61, 0x6d,
	0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x31, 0x12, 0x38, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x32, 0x12,
	0x26, 0x0a, 0x0f, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x43, 0x47, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0xd7, 0x01, 0x0a, 0x19, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x43, 0x47, 0x41, 0x64, 0x64, 0x42, 0x6f, 0x74, 0x68, 0x41, 0x49,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x31, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x63, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x31, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x32, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x19, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43, 0x47,
	0x41, 0x64, 0x64, 0x42, 0x6f, 0x74, 0x68, 0x41, 0x49, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x47, 0x43, 0x47, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0c, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x39, 0x0a, 0x0e, 0x67, 0x63, 0x67, 0x5f, 0x64, 0x75, 0x65, 0x6c, 0x5f, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x43, 0x47, 0x44, 0x75, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x0c, 0x67,
	0x63, 0x67, 0x44, 0x75, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x22, 0xb1, 0x01, 0x0a, 0x1e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43, 0x47, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x15, 0x67, 0x63, 0x67,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x43, 0x47, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x12, 0x67, 0x63, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x79, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xe5, 0x01, 0x0a, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43, 0x47, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x49, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x4c, 0x0a, 0x15, 0x67, 0x63, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x67, 0x63, 0x67, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x07, 0x61, 0x69, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x61, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x26, 0x0a, 0x0f, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x43, 0x47, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x22, 0x84, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x43, 0x47, 0x42, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x44, 0x75, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd8, 0x01, 0x0a,
	0x16, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43, 0x47, 0x42, 0x61, 0x63, 0x6b, 0x54, 0x6f,
	0x44, 0x75, 0x65, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa6, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x43, 0x47, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x63, 0x6b,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2e, 0x0a, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43, 0x47, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x06,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x0d, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x52, 0x0b, 0x6d, 0x73, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x69, 0x0a, 0x18, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43, 0x47, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2e, 0x0a, 0x06,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43, 0x47, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x52, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x71, 0x22, 0x8e, 0x03, 0x0a, 0x1b,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2e, 0x0a, 0x06, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43, 0x47, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x52, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x12,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x1b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x6e, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x18, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4f, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x48, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x70, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa6, 0x01, 0x0a,
	0x1e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43, 0x47, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x2e, 0x0a, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43,
	0x47, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x71, 0x12, 0x35,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x43, 0x47, 0x44, 0x75, 0x65,
	0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2a, 0xed, 0x03, 0x0a, 0x1b, 0x47, 0x43, 0x47, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x59,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x49, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x41, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45,
	0x52, 0x5f, 0x48, 0x50, 0x5f, 0x53, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x45,
	0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x55, 0x4d, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x42, 0x45, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x5f, 0x53,
	0x55, 0x4d, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x52,
	0x45, 0x44, 0x55, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x4d, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x52,
	0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20,
	0x52, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x48, 0x49, 0x4e, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x5f,
	0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x4d,
	0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x4d,
	0x10, 0x08, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x4d,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x55, 0x4d, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4c, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x53, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x4e, 0x45, 0x5f, 0x48, 0x49, 0x54,
	0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x45, 0x43, 0x10, 0x0b, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53,
	0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x55, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x53, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x54, 0x41,
	0x47, 0x5f, 0x51, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x10, 0x0e, 0x12, 0x20, 0x0a, 0x1c, 0x4f,
	0x4e, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4c,
	0x4c, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x56, 0x45, 0x43, 0x10, 0x0f, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x45, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x53, 0x10, 0x10, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x45, 0x49, 0x4e, 0x47, 0x5f,
	0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x5f,
	0x53, 0x55, 0x4d, 0x10, 0x11, 0x2a, 0x81, 0x01, 0x0a, 0x1a, 0x47, 0x43, 0x47, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x4c, 0x45, 0x52, 0x5f, 0x41, 0x5f, 0x57, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52,
	0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x49,
	0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x49, 0x43, 0x45, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x04, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x79, 0x76, 0x61, 0x74, 0x2d, 0x68,
	0x65, 0x6c, 0x70, 0x65, 0x72, 0x2f, 0x68, 0x6b, 0x34, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_only_cmd_gcg_server_proto_rawDescOnce sync.Once
	file_server_only_cmd_gcg_server_proto_rawDescData = file_server_only_cmd_gcg_server_proto_rawDesc
)

func file_server_only_cmd_gcg_server_proto_rawDescGZIP() []byte {
	file_server_only_cmd_gcg_server_proto_rawDescOnce.Do(func() {
		file_server_only_cmd_gcg_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_only_cmd_gcg_server_proto_rawDescData)
	})
	return file_server_only_cmd_gcg_server_proto_rawDescData
}

var file_server_only_cmd_gcg_server_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_server_only_cmd_gcg_server_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_server_only_cmd_gcg_server_proto_goTypes = []interface{}{
	(GCGStatisticSpecifyItemType)(0),         // 0: proto.GCGStatisticSpecifyItemType
	(GCGStatisticCommonItemType)(0),          // 1: proto.GCGStatisticCommonItemType
	(*ServerGCGVerify)(nil),                  // 2: proto.ServerGCGVerify
	(*ServerGCGOperationReq)(nil),            // 3: proto.ServerGCGOperationReq
	(*ServerGCGOperationRsp)(nil),            // 4: proto.ServerGCGOperationRsp
	(*ServerGCGAskDuelReq)(nil),              // 5: proto.ServerGCGAskDuelReq
	(*ServerGCGNewGameInfoNotify)(nil),       // 6: proto.ServerGCGNewGameInfoNotify
	(*ServerGCGGMCommandReq)(nil),            // 7: proto.ServerGCGGMCommandReq
	(*ServerGCGGMCommandRsp)(nil),            // 8: proto.ServerGCGGMCommandRsp
	(*ServerGCGInitFinishReq)(nil),           // 9: proto.ServerGCGInitFinishReq
	(*ServerGCGSyncReq)(nil),                 // 10: proto.ServerGCGSyncReq
	(*ServerGCGSyncRsp)(nil),                 // 11: proto.ServerGCGSyncRsp
	(*GCGPlayerData)(nil),                    // 12: proto.GCGPlayerData
	(*ServerGCGCreateSingleGameReq)(nil),     // 13: proto.ServerGCGCreateSingleGameReq
	(*ServerGCGCreateSingleGameRsp)(nil),     // 14: proto.ServerGCGCreateSingleGameRsp
	(*ServerGCGGiveUpGameReq)(nil),           // 15: proto.ServerGCGGiveUpGameReq
	(*ServerGCGGiveUpGameRsp)(nil),           // 16: proto.ServerGCGGiveUpGameRsp
	(*ServerGCGSkillPreviewAskReq)(nil),      // 17: proto.ServerGCGSkillPreviewAskReq
	(*ServerGCGSkillPreviewAskRsp)(nil),      // 18: proto.ServerGCGSkillPreviewAskRsp
	(*ServerGCGCreateMultiGameReq)(nil),      // 19: proto.ServerGCGCreateMultiGameReq
	(*ServerGCGCreateMultiGameRsp)(nil),      // 20: proto.ServerGCGCreateMultiGameRsp
	(*ServerGCGAddBothAITaskReq)(nil),        // 21: proto.ServerGCGAddBothAITaskReq
	(*ServerGCGAddBothAITaskRsp)(nil),        // 22: proto.ServerGCGAddBothAITaskRsp
	(*GCGMatchPlayerInfo)(nil),               // 23: proto.GCGMatchPlayerInfo
	(*ServerGCGCreateMatchGameNotify)(nil),   // 24: proto.ServerGCGCreateMatchGameNotify
	(*ServerGCGCreateMatchAIGameNotify)(nil), // 25: proto.ServerGCGCreateMatchAIGameNotify
	(*ServerGCGMatchFinishNotify)(nil),       // 26: proto.ServerGCGMatchFinishNotify
	(*ServerGCGBackToDuelReq)(nil),           // 27: proto.ServerGCGBackToDuelReq
	(*ServerGCGBackToDuelRsp)(nil),           // 28: proto.ServerGCGBackToDuelRsp
	(*ServerGCGMessagePackNotify)(nil),       // 29: proto.ServerGCGMessagePackNotify
	(*ServerGCGHeartBeatNotify)(nil),         // 30: proto.ServerGCGHeartBeatNotify
	(*ServerGCGSkillPreviewNotify)(nil),      // 31: proto.ServerGCGSkillPreviewNotify
	(*ServerGCGChallengeUpdateNotify)(nil),   // 32: proto.ServerGCGChallengeUpdateNotify
	(*GCGOperation)(nil),                     // 33: proto.GCGOperation
	(*GCGGameBriefData)(nil),                 // 34: proto.GCGGameBriefData
	(*OnlinePlayerInfo)(nil),                 // 35: proto.OnlinePlayerInfo
	(*GCGDuelExtra)(nil),                     // 36: proto.GCGDuelExtra
	(GCGGameBusinessType)(0),                 // 37: proto.GCGGameBusinessType
	(*MatchPlayer)(nil),                      // 38: proto.MatchPlayer
	(*GCGMessagePack)(nil),                   // 39: proto.GCGMessagePack
	(*GCGSkillPreviewInfo)(nil),              // 40: proto.GCGSkillPreviewInfo
	(*GCGChangeOnstageInfo)(nil),             // 41: proto.GCGChangeOnstageInfo
	(*GCGSkillPreviewPlayCardInfo)(nil),      // 42: proto.GCGSkillPreviewPlayCardInfo
	(*GCGDuelChallenge)(nil),                 // 43: proto.GCGDuelChallenge
}
var file_server_only_cmd_gcg_server_proto_depIdxs = []int32{
	33, // 0: proto.ServerGCGOperationReq.op:type_name -> proto.GCGOperation
	34, // 1: proto.ServerGCGNewGameInfoNotify.game_brief_data:type_name -> proto.GCGGameBriefData
	35, // 2: proto.GCGPlayerData.player_info:type_name -> proto.OnlinePlayerInfo
	36, // 3: proto.GCGPlayerData.duel_extra:type_name -> proto.GCGDuelExtra
	37, // 4: proto.ServerGCGCreateSingleGameReq.business_type:type_name -> proto.GCGGameBusinessType
	12, // 5: proto.ServerGCGCreateSingleGameReq.player_data:type_name -> proto.GCGPlayerData
	37, // 6: proto.ServerGCGGiveUpGameReq.business_type:type_name -> proto.GCGGameBusinessType
	37, // 7: proto.ServerGCGCreateMultiGameReq.business_type:type_name -> proto.GCGGameBusinessType
	12, // 8: proto.ServerGCGCreateMultiGameReq.player_data_1:type_name -> proto.GCGPlayerData
	12, // 9: proto.ServerGCGCreateMultiGameReq.player_data_2:type_name -> proto.GCGPlayerData
	38, // 10: proto.GCGMatchPlayerInfo.match_player:type_name -> proto.MatchPlayer
	36, // 11: proto.GCGMatchPlayerInfo.gcg_duel_extra:type_name -> proto.GCGDuelExtra
	23, // 12: proto.ServerGCGCreateMatchGameNotify.gcg_match_player_list:type_name -> proto.GCGMatchPlayerInfo
	23, // 13: proto.ServerGCGCreateMatchAIGameNotify.gcg_match_player_list:type_name -> proto.GCGMatchPlayerInfo
	35, // 14: proto.ServerGCGCreateMatchAIGameNotify.ai_info:type_name -> proto.OnlinePlayerInfo
	2,  // 15: proto.ServerGCGMessagePackNotify.verify:type_name -> proto.ServerGCGVerify
	39, // 16: proto.ServerGCGMessagePackNotify.msg_pack_list:type_name -> proto.GCGMessagePack
	2,  // 17: proto.ServerGCGHeartBeatNotify.verify:type_name -> proto.ServerGCGVerify
	2,  // 18: proto.ServerGCGSkillPreviewNotify.verify:type_name -> proto.ServerGCGVerify
	40, // 19: proto.ServerGCGSkillPreviewNotify.skill_preview_list:type_name -> proto.GCGSkillPreviewInfo
	41, // 20: proto.ServerGCGSkillPreviewNotify.change_onstage_preview_list:type_name -> proto.GCGChangeOnstageInfo
	42, // 21: proto.ServerGCGSkillPreviewNotify.play_card_list:type_name -> proto.GCGSkillPreviewPlayCardInfo
	2,  // 22: proto.ServerGCGChallengeUpdateNotify.verify:type_name -> proto.ServerGCGVerify
	43, // 23: proto.ServerGCGChallengeUpdateNotify.challenge:type_name -> proto.GCGDuelChallenge
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_server_only_cmd_gcg_server_proto_init() }
func file_server_only_cmd_gcg_server_proto_init() {
	if File_server_only_cmd_gcg_server_proto != nil {
		return
	}
	file_define_proto_init()
	file_cmd_cmd_gcg_common_proto_init()
	file_cmd_cmd_gcg_proto_init()
	file_server_only_cmd_match_server_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_server_only_cmd_gcg_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGVerify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGOperationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGOperationRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGAskDuelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGNewGameInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGGMCommandReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGGMCommandRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGInitFinishReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGSyncReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGSyncRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGPlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGCreateSingleGameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGCreateSingleGameRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGGiveUpGameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGGiveUpGameRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGSkillPreviewAskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGSkillPreviewAskRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGCreateMultiGameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGCreateMultiGameRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGAddBothAITaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGAddBothAITaskRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGMatchPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGCreateMatchGameNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGCreateMatchAIGameNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGMatchFinishNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGBackToDuelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGBackToDuelRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGMessagePackNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGHeartBeatNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGSkillPreviewNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_only_cmd_gcg_server_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGCGChallengeUpdateNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_only_cmd_gcg_server_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_server_only_cmd_gcg_server_proto_goTypes,
		DependencyIndexes: file_server_only_cmd_gcg_server_proto_depIdxs,
		EnumInfos:         file_server_only_cmd_gcg_server_proto_enumTypes,
		MessageInfos:      file_server_only_cmd_gcg_server_proto_msgTypes,
	}.Build()
	File_server_only_cmd_gcg_server_proto = out.File
	file_server_only_cmd_gcg_server_proto_rawDesc = nil
	file_server_only_cmd_gcg_server_proto_goTypes = nil
	file_server_only_cmd_gcg_server_proto_depIdxs = nil
}
