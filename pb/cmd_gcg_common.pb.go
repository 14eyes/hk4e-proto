// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: cmd/cmd_gcg_common.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GCGActionType int32

const (
	GCGActionType_GCG_ACTION_NONE                  GCGActionType = 0
	GCGActionType_GCG_ACTION_SPECIAL_PHASE         GCGActionType = 1
	GCGActionType_GCG_ACTION_NEXT_PHASE            GCGActionType = 2
	GCGActionType_GCG_ACTION_DRAW                  GCGActionType = 3
	GCGActionType_GCG_ACTION_REDRAW                GCGActionType = 4
	GCGActionType_GCG_ACTION_SELECT_ONSTAGE        GCGActionType = 5
	GCGActionType_GCG_ACTION_ROLL                  GCGActionType = 6
	GCGActionType_GCG_ACTION_REROLL                GCGActionType = 7
	GCGActionType_GCG_ACTION_ATTACK                GCGActionType = 8
	GCGActionType_GCG_ACTION_PLAY_CARD             GCGActionType = 9
	GCGActionType_GCG_ACTION_PASS                  GCGActionType = 10
	GCGActionType_GCG_ACTION_REBOOT                GCGActionType = 11
	GCGActionType_GCG_ACTION_GAME_OVER             GCGActionType = 12
	GCGActionType_GCG_ACTION_TRIGGER               GCGActionType = 13
	GCGActionType_GCG_ACTION_PHASE_EXIT            GCGActionType = 14
	GCGActionType_GCG_ACTION_CUSTOM                GCGActionType = 15
	GCGActionType_GCG_ACTION_NOTIFY_COST           GCGActionType = 16
	GCGActionType_GCG_ACTION_AFTER_OPERATION       GCGActionType = 17
	GCGActionType_GCG_ACTION_USE_SKILL             GCGActionType = 18
	GCGActionType_GCG_ACTION_NOTIFY_SKILL_PREVIEW  GCGActionType = 19
	GCGActionType_GCG_ACTION_PREVIEW_ATTACK        GCGActionType = 20
	GCGActionType_GCG_ACTION_PREVIEW_AFTER_ATTACK  GCGActionType = 21
	GCGActionType_GCG_ACTION_SEND_MESSAGE          GCGActionType = 22
	GCGActionType_GCG_ACTION_WAITING_CHARACTER     GCGActionType = 23
	GCGActionType_GCG_ACTION_TRIGGER_SKILL         GCGActionType = 24
	GCGActionType_GCG_ACTION_BEFORE_NEXT_OPERATION GCGActionType = 25
)

// Enum value maps for GCGActionType.
var (
	GCGActionType_name = map[int32]string{
		0:  "GCG_ACTION_NONE",
		1:  "GCG_ACTION_SPECIAL_PHASE",
		2:  "GCG_ACTION_NEXT_PHASE",
		3:  "GCG_ACTION_DRAW",
		4:  "GCG_ACTION_REDRAW",
		5:  "GCG_ACTION_SELECT_ONSTAGE",
		6:  "GCG_ACTION_ROLL",
		7:  "GCG_ACTION_REROLL",
		8:  "GCG_ACTION_ATTACK",
		9:  "GCG_ACTION_PLAY_CARD",
		10: "GCG_ACTION_PASS",
		11: "GCG_ACTION_REBOOT",
		12: "GCG_ACTION_GAME_OVER",
		13: "GCG_ACTION_TRIGGER",
		14: "GCG_ACTION_PHASE_EXIT",
		15: "GCG_ACTION_CUSTOM",
		16: "GCG_ACTION_NOTIFY_COST",
		17: "GCG_ACTION_AFTER_OPERATION",
		18: "GCG_ACTION_USE_SKILL",
		19: "GCG_ACTION_NOTIFY_SKILL_PREVIEW",
		20: "GCG_ACTION_PREVIEW_ATTACK",
		21: "GCG_ACTION_PREVIEW_AFTER_ATTACK",
		22: "GCG_ACTION_SEND_MESSAGE",
		23: "GCG_ACTION_WAITING_CHARACTER",
		24: "GCG_ACTION_TRIGGER_SKILL",
		25: "GCG_ACTION_BEFORE_NEXT_OPERATION",
	}
	GCGActionType_value = map[string]int32{
		"GCG_ACTION_NONE":                  0,
		"GCG_ACTION_SPECIAL_PHASE":         1,
		"GCG_ACTION_NEXT_PHASE":            2,
		"GCG_ACTION_DRAW":                  3,
		"GCG_ACTION_REDRAW":                4,
		"GCG_ACTION_SELECT_ONSTAGE":        5,
		"GCG_ACTION_ROLL":                  6,
		"GCG_ACTION_REROLL":                7,
		"GCG_ACTION_ATTACK":                8,
		"GCG_ACTION_PLAY_CARD":             9,
		"GCG_ACTION_PASS":                  10,
		"GCG_ACTION_REBOOT":                11,
		"GCG_ACTION_GAME_OVER":             12,
		"GCG_ACTION_TRIGGER":               13,
		"GCG_ACTION_PHASE_EXIT":            14,
		"GCG_ACTION_CUSTOM":                15,
		"GCG_ACTION_NOTIFY_COST":           16,
		"GCG_ACTION_AFTER_OPERATION":       17,
		"GCG_ACTION_USE_SKILL":             18,
		"GCG_ACTION_NOTIFY_SKILL_PREVIEW":  19,
		"GCG_ACTION_PREVIEW_ATTACK":        20,
		"GCG_ACTION_PREVIEW_AFTER_ATTACK":  21,
		"GCG_ACTION_SEND_MESSAGE":          22,
		"GCG_ACTION_WAITING_CHARACTER":     23,
		"GCG_ACTION_TRIGGER_SKILL":         24,
		"GCG_ACTION_BEFORE_NEXT_OPERATION": 25,
	}
)

func (x GCGActionType) Enum() *GCGActionType {
	p := new(GCGActionType)
	*p = x
	return p
}

func (x GCGActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCGActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gcg_common_proto_enumTypes[0].Descriptor()
}

func (GCGActionType) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gcg_common_proto_enumTypes[0]
}

func (x GCGActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GCGActionType.Descriptor instead.
func (GCGActionType) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_common_proto_rawDescGZIP(), []int{0}
}

type GCGControllerValue int32

const (
	GCGControllerValue_GCG_CONTROLLER_NONE GCGControllerValue = 0
	GCGControllerValue_GCG_CONTROLLER_A    GCGControllerValue = 1
	GCGControllerValue_GCG_CONTROLLER_B    GCGControllerValue = 2
)

// Enum value maps for GCGControllerValue.
var (
	GCGControllerValue_name = map[int32]string{
		0: "GCG_CONTROLLER_NONE",
		1: "GCG_CONTROLLER_A",
		2: "GCG_CONTROLLER_B",
	}
	GCGControllerValue_value = map[string]int32{
		"GCG_CONTROLLER_NONE": 0,
		"GCG_CONTROLLER_A":    1,
		"GCG_CONTROLLER_B":    2,
	}
)

func (x GCGControllerValue) Enum() *GCGControllerValue {
	p := new(GCGControllerValue)
	*p = x
	return p
}

func (x GCGControllerValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCGControllerValue) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gcg_common_proto_enumTypes[1].Descriptor()
}

func (GCGControllerValue) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gcg_common_proto_enumTypes[1]
}

func (x GCGControllerValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GCGControllerValue.Descriptor instead.
func (GCGControllerValue) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_common_proto_rawDescGZIP(), []int{1}
}

type GCGDiceSideType int32

const (
	GCGDiceSideType_GCG_DICE_SIDE_INVALID GCGDiceSideType = 0
	GCGDiceSideType_GCG_DICE_SIDE_CRYO    GCGDiceSideType = 1
	GCGDiceSideType_GCG_DICE_SIDE_HYDRO   GCGDiceSideType = 2
	GCGDiceSideType_GCG_DICE_SIDE_PYRO    GCGDiceSideType = 3
	GCGDiceSideType_GCG_DICE_SIDE_ELECTRO GCGDiceSideType = 4
	GCGDiceSideType_GCG_DICE_SIDE_GEO     GCGDiceSideType = 5
	GCGDiceSideType_GCG_DICE_SIDE_DENDRO  GCGDiceSideType = 6
	GCGDiceSideType_GCG_DICE_SIDE_ANEMO   GCGDiceSideType = 7
	GCGDiceSideType_GCG_DICE_SIDE_PAIMON  GCGDiceSideType = 8
)

// Enum value maps for GCGDiceSideType.
var (
	GCGDiceSideType_name = map[int32]string{
		0: "GCG_DICE_SIDE_INVALID",
		1: "GCG_DICE_SIDE_CRYO",
		2: "GCG_DICE_SIDE_HYDRO",
		3: "GCG_DICE_SIDE_PYRO",
		4: "GCG_DICE_SIDE_ELECTRO",
		5: "GCG_DICE_SIDE_GEO",
		6: "GCG_DICE_SIDE_DENDRO",
		7: "GCG_DICE_SIDE_ANEMO",
		8: "GCG_DICE_SIDE_PAIMON",
	}
	GCGDiceSideType_value = map[string]int32{
		"GCG_DICE_SIDE_INVALID": 0,
		"GCG_DICE_SIDE_CRYO":    1,
		"GCG_DICE_SIDE_HYDRO":   2,
		"GCG_DICE_SIDE_PYRO":    3,
		"GCG_DICE_SIDE_ELECTRO": 4,
		"GCG_DICE_SIDE_GEO":     5,
		"GCG_DICE_SIDE_DENDRO":  6,
		"GCG_DICE_SIDE_ANEMO":   7,
		"GCG_DICE_SIDE_PAIMON":  8,
	}
)

func (x GCGDiceSideType) Enum() *GCGDiceSideType {
	p := new(GCGDiceSideType)
	*p = x
	return p
}

func (x GCGDiceSideType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCGDiceSideType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gcg_common_proto_enumTypes[2].Descriptor()
}

func (GCGDiceSideType) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gcg_common_proto_enumTypes[2]
}

func (x GCGDiceSideType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GCGDiceSideType.Descriptor instead.
func (GCGDiceSideType) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_common_proto_rawDescGZIP(), []int{2}
}

type GCGZoneType int32

const (
	GCGZoneType_GCG_ZONE_INVALID   GCGZoneType = 0
	GCGZoneType_GCG_ZONE_DECK      GCGZoneType = 1
	GCGZoneType_GCG_ZONE_HAND      GCGZoneType = 2
	GCGZoneType_GCG_ZONE_CHARACTER GCGZoneType = 3
	GCGZoneType_GCG_ZONE_MODIFY    GCGZoneType = 4
	GCGZoneType_GCG_ZONE_SUMMON    GCGZoneType = 5
	GCGZoneType_GCG_ZONE_ASSIST    GCGZoneType = 7
	GCGZoneType_GCG_ZONE_ONSTAGE   GCGZoneType = 8
	GCGZoneType_GCG_ZONE_RULE      GCGZoneType = 9
)

// Enum value maps for GCGZoneType.
var (
	GCGZoneType_name = map[int32]string{
		0: "GCG_ZONE_INVALID",
		1: "GCG_ZONE_DECK",
		2: "GCG_ZONE_HAND",
		3: "GCG_ZONE_CHARACTER",
		4: "GCG_ZONE_MODIFY",
		5: "GCG_ZONE_SUMMON",
		7: "GCG_ZONE_ASSIST",
		8: "GCG_ZONE_ONSTAGE",
		9: "GCG_ZONE_RULE",
	}
	GCGZoneType_value = map[string]int32{
		"GCG_ZONE_INVALID":   0,
		"GCG_ZONE_DECK":      1,
		"GCG_ZONE_HAND":      2,
		"GCG_ZONE_CHARACTER": 3,
		"GCG_ZONE_MODIFY":    4,
		"GCG_ZONE_SUMMON":    5,
		"GCG_ZONE_ASSIST":    7,
		"GCG_ZONE_ONSTAGE":   8,
		"GCG_ZONE_RULE":      9,
	}
)

func (x GCGZoneType) Enum() *GCGZoneType {
	p := new(GCGZoneType)
	*p = x
	return p
}

func (x GCGZoneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCGZoneType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gcg_common_proto_enumTypes[3].Descriptor()
}

func (GCGZoneType) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gcg_common_proto_enumTypes[3]
}

func (x GCGZoneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GCGZoneType.Descriptor instead.
func (GCGZoneType) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_common_proto_rawDescGZIP(), []int{3}
}

type GCGPhaseType int32

const (
	GCGPhaseType_GCG_PHASE_INVALID  GCGPhaseType = 0
	GCGPhaseType_GCG_PHASE_START    GCGPhaseType = 1
	GCGPhaseType_GCG_PHASE_DRAW     GCGPhaseType = 2
	GCGPhaseType_GCG_PHASE_ON_STAGE GCGPhaseType = 3
	GCGPhaseType_GCG_PHASE_DICE     GCGPhaseType = 4
	GCGPhaseType_GCG_PHASE_MAIN     GCGPhaseType = 5
	GCGPhaseType_GCG_PHASE_END      GCGPhaseType = 6
	GCGPhaseType_GCG_PHASE_DIE      GCGPhaseType = 7
	GCGPhaseType_GCG_PHASE_FIN      GCGPhaseType = 8
	GCGPhaseType_GCG_PHASE_PRE_MAIN GCGPhaseType = 9
	GCGPhaseType_GCG_PHASE_REROLL   GCGPhaseType = 10
)

// Enum value maps for GCGPhaseType.
var (
	GCGPhaseType_name = map[int32]string{
		0:  "GCG_PHASE_INVALID",
		1:  "GCG_PHASE_START",
		2:  "GCG_PHASE_DRAW",
		3:  "GCG_PHASE_ON_STAGE",
		4:  "GCG_PHASE_DICE",
		5:  "GCG_PHASE_MAIN",
		6:  "GCG_PHASE_END",
		7:  "GCG_PHASE_DIE",
		8:  "GCG_PHASE_FIN",
		9:  "GCG_PHASE_PRE_MAIN",
		10: "GCG_PHASE_REROLL",
	}
	GCGPhaseType_value = map[string]int32{
		"GCG_PHASE_INVALID":  0,
		"GCG_PHASE_START":    1,
		"GCG_PHASE_DRAW":     2,
		"GCG_PHASE_ON_STAGE": 3,
		"GCG_PHASE_DICE":     4,
		"GCG_PHASE_MAIN":     5,
		"GCG_PHASE_END":      6,
		"GCG_PHASE_DIE":      7,
		"GCG_PHASE_FIN":      8,
		"GCG_PHASE_PRE_MAIN": 9,
		"GCG_PHASE_REROLL":   10,
	}
)

func (x GCGPhaseType) Enum() *GCGPhaseType {
	p := new(GCGPhaseType)
	*p = x
	return p
}

func (x GCGPhaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCGPhaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gcg_common_proto_enumTypes[4].Descriptor()
}

func (GCGPhaseType) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gcg_common_proto_enumTypes[4]
}

func (x GCGPhaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GCGPhaseType.Descriptor instead.
func (GCGPhaseType) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_common_proto_rawDescGZIP(), []int{4}
}

type GCGTargetType int32

const (
	GCGTargetType_GCG_TARGET_NONE GCGTargetType = 0
	GCGTargetType_GCG_TARGET_CARD GCGTargetType = 1
	GCGTargetType_GCG_TARGET_DICE GCGTargetType = 2
)

// Enum value maps for GCGTargetType.
var (
	GCGTargetType_name = map[int32]string{
		0: "GCG_TARGET_NONE",
		1: "GCG_TARGET_CARD",
		2: "GCG_TARGET_DICE",
	}
	GCGTargetType_value = map[string]int32{
		"GCG_TARGET_NONE": 0,
		"GCG_TARGET_CARD": 1,
		"GCG_TARGET_DICE": 2,
	}
)

func (x GCGTargetType) Enum() *GCGTargetType {
	p := new(GCGTargetType)
	*p = x
	return p
}

func (x GCGTargetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCGTargetType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gcg_common_proto_enumTypes[5].Descriptor()
}

func (GCGTargetType) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gcg_common_proto_enumTypes[5]
}

func (x GCGTargetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GCGTargetType.Descriptor instead.
func (GCGTargetType) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_common_proto_rawDescGZIP(), []int{5}
}

type GCGCardState int32

const (
	GCGCardState_GCG_CARD_STATE_HIDE GCGCardState = 0
	GCGCardState_GCG_CARD_STATE_SELF GCGCardState = 1
	GCGCardState_GCG_CARD_STATE_SHOW GCGCardState = 2
)

// Enum value maps for GCGCardState.
var (
	GCGCardState_name = map[int32]string{
		0: "GCG_CARD_STATE_HIDE",
		1: "GCG_CARD_STATE_SELF",
		2: "GCG_CARD_STATE_SHOW",
	}
	GCGCardState_value = map[string]int32{
		"GCG_CARD_STATE_HIDE": 0,
		"GCG_CARD_STATE_SELF": 1,
		"GCG_CARD_STATE_SHOW": 2,
	}
)

func (x GCGCardState) Enum() *GCGCardState {
	p := new(GCGCardState)
	*p = x
	return p
}

func (x GCGCardState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCGCardState) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gcg_common_proto_enumTypes[6].Descriptor()
}

func (GCGCardState) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gcg_common_proto_enumTypes[6]
}

func (x GCGCardState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GCGCardState.Descriptor instead.
func (GCGCardState) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_common_proto_rawDescGZIP(), []int{6}
}

type GCGReason int32

const (
	GCGReason_GCG_REASON_DEFAULT          GCGReason = 0
	GCGReason_GCG_REASON_EFFECT           GCGReason = 1
	GCGReason_GCG_REASON_COST             GCGReason = 2
	GCGReason_GCG_REASON_GM               GCGReason = 3
	GCGReason_GCG_REASON_ATTACK           GCGReason = 4
	GCGReason_GCG_REASON_REBOOT           GCGReason = 5
	GCGReason_GCG_REASON_PLAY_CARD        GCGReason = 6
	GCGReason_GCG_REASON_QUICKLY_ONSTAGE  GCGReason = 7
	GCGReason_GCG_REASON_REMOVE_AFTER_DIE GCGReason = 8
	GCGReason_GCG_REASON_INIT             GCGReason = 9
	GCGReason_GCG_REASON_EFFECT_DAMAGE    GCGReason = 10
	GCGReason_GCG_REASON_EFFECT_HEAL      GCGReason = 11
	GCGReason_GCG_REASON_EFFECT_REVIVE    GCGReason = 12
)

// Enum value maps for GCGReason.
var (
	GCGReason_name = map[int32]string{
		0:  "GCG_REASON_DEFAULT",
		1:  "GCG_REASON_EFFECT",
		2:  "GCG_REASON_COST",
		3:  "GCG_REASON_GM",
		4:  "GCG_REASON_ATTACK",
		5:  "GCG_REASON_REBOOT",
		6:  "GCG_REASON_PLAY_CARD",
		7:  "GCG_REASON_QUICKLY_ONSTAGE",
		8:  "GCG_REASON_REMOVE_AFTER_DIE",
		9:  "GCG_REASON_INIT",
		10: "GCG_REASON_EFFECT_DAMAGE",
		11: "GCG_REASON_EFFECT_HEAL",
		12: "GCG_REASON_EFFECT_REVIVE",
	}
	GCGReason_value = map[string]int32{
		"GCG_REASON_DEFAULT":          0,
		"GCG_REASON_EFFECT":           1,
		"GCG_REASON_COST":             2,
		"GCG_REASON_GM":               3,
		"GCG_REASON_ATTACK":           4,
		"GCG_REASON_REBOOT":           5,
		"GCG_REASON_PLAY_CARD":        6,
		"GCG_REASON_QUICKLY_ONSTAGE":  7,
		"GCG_REASON_REMOVE_AFTER_DIE": 8,
		"GCG_REASON_INIT":             9,
		"GCG_REASON_EFFECT_DAMAGE":    10,
		"GCG_REASON_EFFECT_HEAL":      11,
		"GCG_REASON_EFFECT_REVIVE":    12,
	}
)

func (x GCGReason) Enum() *GCGReason {
	p := new(GCGReason)
	*p = x
	return p
}

func (x GCGReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCGReason) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gcg_common_proto_enumTypes[7].Descriptor()
}

func (GCGReason) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gcg_common_proto_enumTypes[7]
}

func (x GCGReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GCGReason.Descriptor instead.
func (GCGReason) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_common_proto_rawDescGZIP(), []int{7}
}

type GCGClientPerformType int32

const (
	GCGClientPerformType_GCG_PERFORM_INVALID       GCGClientPerformType = 0
	GCGClientPerformType_GCG_PERFORM_CARD_EXCHANGE GCGClientPerformType = 1
	GCGClientPerformType_GCG_PERFORM_FIRST_HAND    GCGClientPerformType = 2
	GCGClientPerformType_GCG_PERFORM_REROLL        GCGClientPerformType = 3
)

// Enum value maps for GCGClientPerformType.
var (
	GCGClientPerformType_name = map[int32]string{
		0: "GCG_PERFORM_INVALID",
		1: "GCG_PERFORM_CARD_EXCHANGE",
		2: "GCG_PERFORM_FIRST_HAND",
		3: "GCG_PERFORM_REROLL",
	}
	GCGClientPerformType_value = map[string]int32{
		"GCG_PERFORM_INVALID":       0,
		"GCG_PERFORM_CARD_EXCHANGE": 1,
		"GCG_PERFORM_FIRST_HAND":    2,
		"GCG_PERFORM_REROLL":        3,
	}
)

func (x GCGClientPerformType) Enum() *GCGClientPerformType {
	p := new(GCGClientPerformType)
	*p = x
	return p
}

func (x GCGClientPerformType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCGClientPerformType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gcg_common_proto_enumTypes[8].Descriptor()
}

func (GCGClientPerformType) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gcg_common_proto_enumTypes[8]
}

func (x GCGClientPerformType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GCGClientPerformType.Descriptor instead.
func (GCGClientPerformType) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_common_proto_rawDescGZIP(), []int{8}
}

type GCGEndReason int32

const (
	GCGEndReason_GCG_END_REASON_DEFAULT      GCGEndReason = 0
	GCGEndReason_GCG_END_REASON_DIE          GCGEndReason = 1
	GCGEndReason_GCG_END_REASON_SURRENDER    GCGEndReason = 2
	GCGEndReason_GCG_END_REASON_DISCONNECTED GCGEndReason = 3
	GCGEndReason_GCG_END_REASON_ROUND_LIMIT  GCGEndReason = 4
	GCGEndReason_GCG_END_REASON_GM           GCGEndReason = 5
	GCGEndReason_GCG_END_REASON_NO_PLAYER    GCGEndReason = 6
	GCGEndReason_GCG_END_REASON_GIVE_UP      GCGEndReason = 7
	GCGEndReason_GCG_END_REASON_INIT_TIMEOUT GCGEndReason = 8
	GCGEndReason_GCG_END_REASON_EFFECT       GCGEndReason = 9
)

// Enum value maps for GCGEndReason.
var (
	GCGEndReason_name = map[int32]string{
		0: "GCG_END_REASON_DEFAULT",
		1: "GCG_END_REASON_DIE",
		2: "GCG_END_REASON_SURRENDER",
		3: "GCG_END_REASON_DISCONNECTED",
		4: "GCG_END_REASON_ROUND_LIMIT",
		5: "GCG_END_REASON_GM",
		6: "GCG_END_REASON_NO_PLAYER",
		7: "GCG_END_REASON_GIVE_UP",
		8: "GCG_END_REASON_INIT_TIMEOUT",
		9: "GCG_END_REASON_EFFECT",
	}
	GCGEndReason_value = map[string]int32{
		"GCG_END_REASON_DEFAULT":      0,
		"GCG_END_REASON_DIE":          1,
		"GCG_END_REASON_SURRENDER":    2,
		"GCG_END_REASON_DISCONNECTED": 3,
		"GCG_END_REASON_ROUND_LIMIT":  4,
		"GCG_END_REASON_GM":           5,
		"GCG_END_REASON_NO_PLAYER":    6,
		"GCG_END_REASON_GIVE_UP":      7,
		"GCG_END_REASON_INIT_TIMEOUT": 8,
		"GCG_END_REASON_EFFECT":       9,
	}
)

func (x GCGEndReason) Enum() *GCGEndReason {
	p := new(GCGEndReason)
	*p = x
	return p
}

func (x GCGEndReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCGEndReason) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gcg_common_proto_enumTypes[9].Descriptor()
}

func (GCGEndReason) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gcg_common_proto_enumTypes[9]
}

func (x GCGEndReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GCGEndReason.Descriptor instead.
func (GCGEndReason) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_common_proto_rawDescGZIP(), []int{9}
}

type GCGTavernNPCState int32

const (
	GCGTavernNPCState_GCG_TRAVERN_NPC_STATE_NONE  GCGTavernNPCState = 0
	GCGTavernNPCState_GCG_TRAVERN_NPC_STATE_DUEL  GCGTavernNPCState = 1
	GCGTavernNPCState_GCG_TRAVERN_NPC_STATE_STAND GCGTavernNPCState = 2
)

// Enum value maps for GCGTavernNPCState.
var (
	GCGTavernNPCState_name = map[int32]string{
		0: "GCG_TRAVERN_NPC_STATE_NONE",
		1: "GCG_TRAVERN_NPC_STATE_DUEL",
		2: "GCG_TRAVERN_NPC_STATE_STAND",
	}
	GCGTavernNPCState_value = map[string]int32{
		"GCG_TRAVERN_NPC_STATE_NONE":  0,
		"GCG_TRAVERN_NPC_STATE_DUEL":  1,
		"GCG_TRAVERN_NPC_STATE_STAND": 2,
	}
)

func (x GCGTavernNPCState) Enum() *GCGTavernNPCState {
	p := new(GCGTavernNPCState)
	*p = x
	return p
}

func (x GCGTavernNPCState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCGTavernNPCState) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gcg_common_proto_enumTypes[10].Descriptor()
}

func (GCGTavernNPCState) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gcg_common_proto_enumTypes[10]
}

func (x GCGTavernNPCState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GCGTavernNPCState.Descriptor instead.
func (GCGTavernNPCState) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_common_proto_rawDescGZIP(), []int{10}
}

type GCGGameBusinessType int32

const (
	GCGGameBusinessType_GCG_GAME_NONE             GCGGameBusinessType = 0
	GCGGameBusinessType_GCG_GAME_GM               GCGGameBusinessType = 1
	GCGGameBusinessType_GCG_GAME_MATCH            GCGGameBusinessType = 2
	GCGGameBusinessType_GCG_GAME_PVP              GCGGameBusinessType = 3
	GCGGameBusinessType_GCG_GAME_TAVERN_CHALLENGE GCGGameBusinessType = 4
	GCGGameBusinessType_GCG_GAME_CONST_CHALLENGE  GCGGameBusinessType = 5
	GCGGameBusinessType_GCG_GAME_WORLD_CHALLENGE  GCGGameBusinessType = 6
	GCGGameBusinessType_GCG_GAME_BOSS_CHALLENGE   GCGGameBusinessType = 7
	GCGGameBusinessType_GCG_GAME_WEEK_CHALLENGE   GCGGameBusinessType = 8
	GCGGameBusinessType_GCG_GAME_BREAK_CHALLENGE  GCGGameBusinessType = 9
	GCGGameBusinessType_GCG_GAME_QUEST            GCGGameBusinessType = 10
	GCGGameBusinessType_GCG_GAME_GUIDE_GROUP      GCGGameBusinessType = 11
)

// Enum value maps for GCGGameBusinessType.
var (
	GCGGameBusinessType_name = map[int32]string{
		0:  "GCG_GAME_NONE",
		1:  "GCG_GAME_GM",
		2:  "GCG_GAME_MATCH",
		3:  "GCG_GAME_PVP",
		4:  "GCG_GAME_TAVERN_CHALLENGE",
		5:  "GCG_GAME_CONST_CHALLENGE",
		6:  "GCG_GAME_WORLD_CHALLENGE",
		7:  "GCG_GAME_BOSS_CHALLENGE",
		8:  "GCG_GAME_WEEK_CHALLENGE",
		9:  "GCG_GAME_BREAK_CHALLENGE",
		10: "GCG_GAME_QUEST",
		11: "GCG_GAME_GUIDE_GROUP",
	}
	GCGGameBusinessType_value = map[string]int32{
		"GCG_GAME_NONE":             0,
		"GCG_GAME_GM":               1,
		"GCG_GAME_MATCH":            2,
		"GCG_GAME_PVP":              3,
		"GCG_GAME_TAVERN_CHALLENGE": 4,
		"GCG_GAME_CONST_CHALLENGE":  5,
		"GCG_GAME_WORLD_CHALLENGE":  6,
		"GCG_GAME_BOSS_CHALLENGE":   7,
		"GCG_GAME_WEEK_CHALLENGE":   8,
		"GCG_GAME_BREAK_CHALLENGE":  9,
		"GCG_GAME_QUEST":            10,
		"GCG_GAME_GUIDE_GROUP":      11,
	}
)

func (x GCGGameBusinessType) Enum() *GCGGameBusinessType {
	p := new(GCGGameBusinessType)
	*p = x
	return p
}

func (x GCGGameBusinessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCGGameBusinessType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gcg_common_proto_enumTypes[11].Descriptor()
}

func (GCGGameBusinessType) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gcg_common_proto_enumTypes[11]
}

func (x GCGGameBusinessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GCGGameBusinessType.Descriptor instead.
func (GCGGameBusinessType) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_common_proto_rawDescGZIP(), []int{11}
}

type GCGChallengeType int32

const (
	GCGChallengeType_GCG_CHALLENGE_NONE  GCGChallengeType = 0
	GCGChallengeType_GCG_CHALLENGE_CONST GCGChallengeType = 1
	GCGChallengeType_GCG_CHALLENGE_WEEK  GCGChallengeType = 2
	GCGChallengeType_GCG_CHALLENGE_WORLD GCGChallengeType = 3
)

// Enum value maps for GCGChallengeType.
var (
	GCGChallengeType_name = map[int32]string{
		0: "GCG_CHALLENGE_NONE",
		1: "GCG_CHALLENGE_CONST",
		2: "GCG_CHALLENGE_WEEK",
		3: "GCG_CHALLENGE_WORLD",
	}
	GCGChallengeType_value = map[string]int32{
		"GCG_CHALLENGE_NONE":  0,
		"GCG_CHALLENGE_CONST": 1,
		"GCG_CHALLENGE_WEEK":  2,
		"GCG_CHALLENGE_WORLD": 3,
	}
)

func (x GCGChallengeType) Enum() *GCGChallengeType {
	p := new(GCGChallengeType)
	*p = x
	return p
}

func (x GCGChallengeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCGChallengeType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gcg_common_proto_enumTypes[12].Descriptor()
}

func (GCGChallengeType) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gcg_common_proto_enumTypes[12]
}

func (x GCGChallengeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GCGChallengeType.Descriptor instead.
func (GCGChallengeType) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_common_proto_rawDescGZIP(), []int{12}
}

type GCGLevelType int32

const (
	GCGLevelType_GCG_LEVEL_NONE        GCGLevelType = 0
	GCGLevelType_GCG_LEVEL_CONST       GCGLevelType = 1
	GCGLevelType_GCG_LEVEL_WEEK        GCGLevelType = 2
	GCGLevelType_GCG_LEVEL_WORLD       GCGLevelType = 3
	GCGLevelType_GCG_LEVEL_BOSS        GCGLevelType = 4
	GCGLevelType_GCG_LEVEL_CHARACTER   GCGLevelType = 5
	GCGLevelType_GCG_LEVEL_BREAK       GCGLevelType = 6
	GCGLevelType_GCG_LEVEL_QUEST       GCGLevelType = 7
	GCGLevelType_GCG_LEVEL_GUIDE_GROUP GCGLevelType = 8
)

// Enum value maps for GCGLevelType.
var (
	GCGLevelType_name = map[int32]string{
		0: "GCG_LEVEL_NONE",
		1: "GCG_LEVEL_CONST",
		2: "GCG_LEVEL_WEEK",
		3: "GCG_LEVEL_WORLD",
		4: "GCG_LEVEL_BOSS",
		5: "GCG_LEVEL_CHARACTER",
		6: "GCG_LEVEL_BREAK",
		7: "GCG_LEVEL_QUEST",
		8: "GCG_LEVEL_GUIDE_GROUP",
	}
	GCGLevelType_value = map[string]int32{
		"GCG_LEVEL_NONE":        0,
		"GCG_LEVEL_CONST":       1,
		"GCG_LEVEL_WEEK":        2,
		"GCG_LEVEL_WORLD":       3,
		"GCG_LEVEL_BOSS":        4,
		"GCG_LEVEL_CHARACTER":   5,
		"GCG_LEVEL_BREAK":       6,
		"GCG_LEVEL_QUEST":       7,
		"GCG_LEVEL_GUIDE_GROUP": 8,
	}
)

func (x GCGLevelType) Enum() *GCGLevelType {
	p := new(GCGLevelType)
	*p = x
	return p
}

func (x GCGLevelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCGLevelType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gcg_common_proto_enumTypes[13].Descriptor()
}

func (GCGLevelType) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gcg_common_proto_enumTypes[13]
}

func (x GCGLevelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GCGLevelType.Descriptor instead.
func (GCGLevelType) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_common_proto_rawDescGZIP(), []int{13}
}

type GCGIntentionChangeType int32

const (
	GCGIntentionChangeType_GCG_INTENTION_CHANGE_NONE GCGIntentionChangeType = 0
	GCGIntentionChangeType_GCG_INTENTION_CHANGE_RM   GCGIntentionChangeType = 1
)

// Enum value maps for GCGIntentionChangeType.
var (
	GCGIntentionChangeType_name = map[int32]string{
		0: "GCG_INTENTION_CHANGE_NONE",
		1: "GCG_INTENTION_CHANGE_RM",
	}
	GCGIntentionChangeType_value = map[string]int32{
		"GCG_INTENTION_CHANGE_NONE": 0,
		"GCG_INTENTION_CHANGE_RM":   1,
	}
)

func (x GCGIntentionChangeType) Enum() *GCGIntentionChangeType {
	p := new(GCGIntentionChangeType)
	*p = x
	return p
}

func (x GCGIntentionChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCGIntentionChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_gcg_common_proto_enumTypes[14].Descriptor()
}

func (GCGIntentionChangeType) Type() protoreflect.EnumType {
	return &file_cmd_cmd_gcg_common_proto_enumTypes[14]
}

func (x GCGIntentionChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GCGIntentionChangeType.Descriptor instead.
func (GCGIntentionChangeType) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_gcg_common_proto_rawDescGZIP(), []int{14}
}

var File_cmd_cmd_gcg_common_proto protoreflect.FileDescriptor

var file_cmd_cmd_gcg_common_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x6d, 0x64, 0x5f, 0x67, 0x63, 0x67, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2a, 0xd7, 0x05, 0x0a, 0x0d, 0x47, 0x43, 0x47, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x43, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x43, 0x47, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x50,
	0x48, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x43, 0x47, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x43, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x52, 0x41, 0x57, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x43, 0x47, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x44, 0x52, 0x41, 0x57, 0x10, 0x04, 0x12, 0x1d, 0x0a,
	0x19, 0x47, 0x43, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4c, 0x45,
	0x43, 0x54, 0x5f, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f,
	0x47, 0x43, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x10,
	0x06, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x43, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x52, 0x4f, 0x4c, 0x4c, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x43, 0x47, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x10, 0x08, 0x12,
	0x18, 0x0a, 0x14, 0x47, 0x43, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x43, 0x47,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x0a, 0x12, 0x15,
	0x0a, 0x11, 0x47, 0x43, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x42,
	0x4f, 0x4f, 0x54, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x43, 0x47, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x0c, 0x12,
	0x16, 0x0a, 0x12, 0x47, 0x43, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x43, 0x47, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x54,
	0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x43, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x0f, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x43, 0x47,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x43,
	0x4f, 0x53, 0x54, 0x10, 0x10, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x43, 0x47, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x43, 0x47, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x12, 0x12,
	0x23, 0x0a, 0x1f, 0x47, 0x43, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x59, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49,
	0x45, 0x57, 0x10, 0x13, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x43, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43,
	0x4b, 0x10, 0x14, 0x12, 0x23, 0x0a, 0x1f, 0x47, 0x43, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f,
	0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x10, 0x15, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x43, 0x47, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x10, 0x16, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x43, 0x47, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x52,
	0x41, 0x43, 0x54, 0x45, 0x52, 0x10, 0x17, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x43, 0x47, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x10, 0x18, 0x12, 0x24, 0x0a, 0x20, 0x47, 0x43, 0x47, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x19, 0x2a, 0x59, 0x0a, 0x12, 0x47,
	0x43, 0x47, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x43, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x4c, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x43,
	0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x47, 0x43, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c,
	0x45, 0x52, 0x5f, 0x42, 0x10, 0x02, 0x2a, 0xf4, 0x01, 0x0a, 0x0f, 0x47, 0x43, 0x47, 0x44, 0x69,
	0x63, 0x65, 0x53, 0x69, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x43,
	0x47, 0x5f, 0x44, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x43, 0x47, 0x5f, 0x44, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x52, 0x59, 0x4f, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x47, 0x43, 0x47, 0x5f, 0x44, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x48,
	0x59, 0x44, 0x52, 0x4f, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x43, 0x47, 0x5f, 0x44, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x50, 0x59, 0x52, 0x4f, 0x10, 0x03, 0x12, 0x19,
	0x0a, 0x15, 0x47, 0x43, 0x47, 0x5f, 0x44, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f,
	0x45, 0x4c, 0x45, 0x43, 0x54, 0x52, 0x4f, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x43, 0x47,
	0x5f, 0x44, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x47, 0x45, 0x4f, 0x10, 0x05,
	0x12, 0x18, 0x0a, 0x14, 0x47, 0x43, 0x47, 0x5f, 0x44, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x49, 0x44,
	0x45, 0x5f, 0x44, 0x45, 0x4e, 0x44, 0x52, 0x4f, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x43,
	0x47, 0x5f, 0x44, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x4e, 0x45, 0x4d,
	0x4f, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x43, 0x47, 0x5f, 0x44, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x49, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x49, 0x4d, 0x4f, 0x4e, 0x10, 0x08, 0x2a, 0xc9, 0x01,
	0x0a, 0x0b, 0x47, 0x43, 0x47, 0x5a, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x47, 0x43, 0x47, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x43, 0x47, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f,
	0x44, 0x45, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x43, 0x47, 0x5f, 0x5a, 0x4f,
	0x4e, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x43, 0x47,
	0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x43, 0x47, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x4d, 0x4f,
	0x44, 0x49, 0x46, 0x59, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x43, 0x47, 0x5f, 0x5a, 0x4f,
	0x4e, 0x45, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x47,
	0x43, 0x47, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x10, 0x07,
	0x12, 0x14, 0x0a, 0x10, 0x47, 0x43, 0x47, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x4e, 0x53,
	0x54, 0x41, 0x47, 0x45, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x43, 0x47, 0x5f, 0x5a, 0x4f,
	0x4e, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10, 0x09, 0x2a, 0xf5, 0x01, 0x0a, 0x0c, 0x47, 0x43,
	0x47, 0x50, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x43,
	0x47, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x43, 0x47, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x43, 0x47, 0x5f, 0x50, 0x48,
	0x41, 0x53, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x43,
	0x47, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45,
	0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x43, 0x47, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f,
	0x44, 0x49, 0x43, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x43, 0x47, 0x5f, 0x50, 0x48,
	0x41, 0x53, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x43,
	0x47, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x11, 0x0a,
	0x0d, 0x47, 0x43, 0x47, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x44, 0x49, 0x45, 0x10, 0x07,
	0x12, 0x11, 0x0a, 0x0d, 0x47, 0x43, 0x47, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x46, 0x49,
	0x4e, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x43, 0x47, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45,
	0x5f, 0x50, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x47,
	0x43, 0x47, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x52, 0x4f, 0x4c, 0x4c, 0x10,
	0x0a, 0x2a, 0x4e, 0x0a, 0x0d, 0x47, 0x43, 0x47, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x43, 0x47, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x43, 0x47, 0x5f, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x47, 0x43, 0x47, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x49, 0x43, 0x45, 0x10,
	0x02, 0x2a, 0x59, 0x0a, 0x0c, 0x47, 0x43, 0x47, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x43, 0x47, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x48, 0x49, 0x44, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x43,
	0x47, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x4c,
	0x46, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x43, 0x47, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x10, 0x02, 0x2a, 0xd8, 0x02, 0x0a,
	0x09, 0x47, 0x43, 0x47, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x43,
	0x47, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x43, 0x47, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x43, 0x47,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x47, 0x43, 0x47, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x4d, 0x10,
	0x03, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x43, 0x47, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x43, 0x47, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x10, 0x05, 0x12,
	0x18, 0x0a, 0x14, 0x47, 0x43, 0x47, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x43, 0x47,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x4c, 0x59, 0x5f,
	0x4f, 0x4e, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x43, 0x47,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x41,
	0x46, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x45, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x43,
	0x47, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x09, 0x12,
	0x1c, 0x0a, 0x18, 0x47, 0x43, 0x47, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x46,
	0x46, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x0a, 0x12, 0x1a, 0x0a,
	0x16, 0x47, 0x43, 0x47, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x46, 0x46, 0x45,
	0x43, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x43, 0x47,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x52,
	0x45, 0x56, 0x49, 0x56, 0x45, 0x10, 0x0c, 0x2a, 0x82, 0x01, 0x0a, 0x14, 0x47, 0x43, 0x47, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x13, 0x47, 0x43, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x43, 0x47,
	0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x45, 0x58,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x43, 0x47, 0x5f,
	0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x48, 0x41,
	0x4e, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x43, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x46,
	0x4f, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x52, 0x4f, 0x4c, 0x4c, 0x10, 0x03, 0x2a, 0xae, 0x02, 0x0a,
	0x0c, 0x47, 0x43, 0x47, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x16, 0x47, 0x43, 0x47, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x43, 0x47,
	0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x45, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x43, 0x47, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x1f, 0x0a, 0x1b, 0x47, 0x43, 0x47, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x43, 0x47, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x04,
	0x12, 0x15, 0x0a, 0x11, 0x47, 0x43, 0x47, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x47, 0x4d, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x43, 0x47, 0x5f, 0x45,
	0x4e, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x43, 0x47, 0x5f, 0x45, 0x4e, 0x44,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x5f, 0x55, 0x50, 0x10,
	0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x43, 0x47, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54,
	0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x43, 0x47, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x09, 0x2a, 0x74, 0x0a,
	0x11, 0x47, 0x43, 0x47, 0x54, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x4e, 0x50, 0x43, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x43, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x56, 0x45, 0x52,
	0x4e, 0x5f, 0x4e, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x43, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x56, 0x45, 0x52,
	0x4e, 0x5f, 0x4e, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x55, 0x45, 0x4c,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x43, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x56, 0x45, 0x52,
	0x4e, 0x5f, 0x4e, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e,
	0x44, 0x10, 0x02, 0x2a, 0xc0, 0x02, 0x0a, 0x13, 0x47, 0x43, 0x47, 0x47, 0x61, 0x6d, 0x65, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x47,
	0x43, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x47, 0x43, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x47, 0x4d, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x47, 0x43, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x43, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x50, 0x56, 0x50, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x43, 0x47, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x54, 0x41, 0x56, 0x45, 0x52, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e,
	0x47, 0x45, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x43, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45,
	0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x43, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x57,
	0x4f, 0x52, 0x4c, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x06,
	0x12, 0x1b, 0x0a, 0x17, 0x47, 0x43, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x4f, 0x53,
	0x53, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x07, 0x12, 0x1b, 0x0a,
	0x17, 0x47, 0x43, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x43,
	0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x43,
	0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x5f, 0x43, 0x48, 0x41,
	0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x43, 0x47, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14,
	0x47, 0x43, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x10, 0x0b, 0x2a, 0x74, 0x0a, 0x10, 0x47, 0x43, 0x47, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x43,
	0x47, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x43, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45,
	0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x47,
	0x43, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x57, 0x45, 0x45,
	0x4b, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x43, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c,
	0x45, 0x4e, 0x47, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x10, 0x03, 0x2a, 0xd2, 0x01, 0x0a,
	0x0c, 0x47, 0x43, 0x47, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x0e, 0x47, 0x43, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x43, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x43,
	0x4f, 0x4e, 0x53, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x43, 0x47, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x43,
	0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x10, 0x03, 0x12,
	0x12, 0x0a, 0x0e, 0x47, 0x43, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x42, 0x4f, 0x53,
	0x53, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x43, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f,
	0x47, 0x43, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x10,
	0x06, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x43, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x43, 0x47, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0x08, 0x2a, 0x54, 0x0a, 0x16, 0x47, 0x43, 0x47, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x47,
	0x43, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x43,
	0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x52, 0x4d, 0x10, 0x01, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x79, 0x76, 0x61, 0x74, 0x2d, 0x68, 0x65, 0x6c,
	0x70, 0x65, 0x72, 0x2f, 0x68, 0x6b, 0x34, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cmd_cmd_gcg_common_proto_rawDescOnce sync.Once
	file_cmd_cmd_gcg_common_proto_rawDescData = file_cmd_cmd_gcg_common_proto_rawDesc
)

func file_cmd_cmd_gcg_common_proto_rawDescGZIP() []byte {
	file_cmd_cmd_gcg_common_proto_rawDescOnce.Do(func() {
		file_cmd_cmd_gcg_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_cmd_cmd_gcg_common_proto_rawDescData)
	})
	return file_cmd_cmd_gcg_common_proto_rawDescData
}

var file_cmd_cmd_gcg_common_proto_enumTypes = make([]protoimpl.EnumInfo, 15)
var file_cmd_cmd_gcg_common_proto_goTypes = []interface{}{
	(GCGActionType)(0),          // 0: proto.GCGActionType
	(GCGControllerValue)(0),     // 1: proto.GCGControllerValue
	(GCGDiceSideType)(0),        // 2: proto.GCGDiceSideType
	(GCGZoneType)(0),            // 3: proto.GCGZoneType
	(GCGPhaseType)(0),           // 4: proto.GCGPhaseType
	(GCGTargetType)(0),          // 5: proto.GCGTargetType
	(GCGCardState)(0),           // 6: proto.GCGCardState
	(GCGReason)(0),              // 7: proto.GCGReason
	(GCGClientPerformType)(0),   // 8: proto.GCGClientPerformType
	(GCGEndReason)(0),           // 9: proto.GCGEndReason
	(GCGTavernNPCState)(0),      // 10: proto.GCGTavernNPCState
	(GCGGameBusinessType)(0),    // 11: proto.GCGGameBusinessType
	(GCGChallengeType)(0),       // 12: proto.GCGChallengeType
	(GCGLevelType)(0),           // 13: proto.GCGLevelType
	(GCGIntentionChangeType)(0), // 14: proto.GCGIntentionChangeType
}
var file_cmd_cmd_gcg_common_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_cmd_cmd_gcg_common_proto_init() }
func file_cmd_cmd_gcg_common_proto_init() {
	if File_cmd_cmd_gcg_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cmd_cmd_gcg_common_proto_rawDesc,
			NumEnums:      15,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cmd_cmd_gcg_common_proto_goTypes,
		DependencyIndexes: file_cmd_cmd_gcg_common_proto_depIdxs,
		EnumInfos:         file_cmd_cmd_gcg_common_proto_enumTypes,
	}.Build()
	File_cmd_cmd_gcg_common_proto = out.File
	file_cmd_cmd_gcg_common_proto_rawDesc = nil
	file_cmd_cmd_gcg_common_proto_goTypes = nil
	file_cmd_cmd_gcg_common_proto_depIdxs = nil
}
