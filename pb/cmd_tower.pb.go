// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: cmd/cmd_tower.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TowerLevelEndNotify_ContinueStateType int32

const (
	TowerLevelEndNotify_CONTINUE_STATE_CAN_NOT_CONTINUE     TowerLevelEndNotify_ContinueStateType = 0
	TowerLevelEndNotify_CONTINUE_STATE_CAN_ENTER_NEXT_LEVEL TowerLevelEndNotify_ContinueStateType = 1
	TowerLevelEndNotify_CONTINUE_STATE_CAN_ENTER_NEXT_FLOOR TowerLevelEndNotify_ContinueStateType = 2
)

// Enum value maps for TowerLevelEndNotify_ContinueStateType.
var (
	TowerLevelEndNotify_ContinueStateType_name = map[int32]string{
		0: "CONTINUE_STATE_CAN_NOT_CONTINUE",
		1: "CONTINUE_STATE_CAN_ENTER_NEXT_LEVEL",
		2: "CONTINUE_STATE_CAN_ENTER_NEXT_FLOOR",
	}
	TowerLevelEndNotify_ContinueStateType_value = map[string]int32{
		"CONTINUE_STATE_CAN_NOT_CONTINUE":     0,
		"CONTINUE_STATE_CAN_ENTER_NEXT_LEVEL": 1,
		"CONTINUE_STATE_CAN_ENTER_NEXT_FLOOR": 2,
	}
)

func (x TowerLevelEndNotify_ContinueStateType) Enum() *TowerLevelEndNotify_ContinueStateType {
	p := new(TowerLevelEndNotify_ContinueStateType)
	*p = x
	return p
}

func (x TowerLevelEndNotify_ContinueStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TowerLevelEndNotify_ContinueStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_tower_proto_enumTypes[0].Descriptor()
}

func (TowerLevelEndNotify_ContinueStateType) Type() protoreflect.EnumType {
	return &file_cmd_cmd_tower_proto_enumTypes[0]
}

func (x TowerLevelEndNotify_ContinueStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TowerLevelEndNotify_ContinueStateType.Descriptor instead.
func (TowerLevelEndNotify_ContinueStateType) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{21, 0}
}

type TowerTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TowerTeamId    uint32   `protobuf:"varint,3,opt,name=tower_team_id,json=towerTeamId,proto3" json:"tower_team_id,omitempty"`
	AvatarGuidList []uint64 `protobuf:"varint,14,rep,packed,name=avatar_guid_list,json=avatarGuidList,proto3" json:"avatar_guid_list,omitempty"`
}

func (x *TowerTeam) Reset() {
	*x = TowerTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerTeam) ProtoMessage() {}

func (x *TowerTeam) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerTeam.ProtoReflect.Descriptor instead.
func (*TowerTeam) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{0}
}

func (x *TowerTeam) GetTowerTeamId() uint32 {
	if x != nil {
		return x.TowerTeamId
	}
	return 0
}

func (x *TowerTeam) GetAvatarGuidList() []uint64 {
	if x != nil {
		return x.AvatarGuidList
	}
	return nil
}

type TowerLevelRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SatisfiedCondList []uint32 `protobuf:"varint,13,rep,packed,name=satisfied_cond_list,json=satisfiedCondList,proto3" json:"satisfied_cond_list,omitempty"`
	LevelId           uint32   `protobuf:"varint,10,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *TowerLevelRecord) Reset() {
	*x = TowerLevelRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerLevelRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerLevelRecord) ProtoMessage() {}

func (x *TowerLevelRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerLevelRecord.ProtoReflect.Descriptor instead.
func (*TowerLevelRecord) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{1}
}

func (x *TowerLevelRecord) GetSatisfiedCondList() []uint32 {
	if x != nil {
		return x.SatisfiedCondList
	}
	return nil
}

func (x *TowerLevelRecord) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type TowerFloorRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FloorStarRewardProgress uint32              `protobuf:"varint,15,opt,name=floor_star_reward_progress,json=floorStarRewardProgress,proto3" json:"floor_star_reward_progress,omitempty"`
	PassedLevelMap          map[uint32]uint32   `protobuf:"bytes,8,rep,name=passed_level_map,json=passedLevelMap,proto3" json:"passed_level_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FloorId                 uint32              `protobuf:"varint,12,opt,name=floor_id,json=floorId,proto3" json:"floor_id,omitempty"`
	PassedLevelRecordList   []*TowerLevelRecord `protobuf:"bytes,2,rep,name=passed_level_record_list,json=passedLevelRecordList,proto3" json:"passed_level_record_list,omitempty"`
}

func (x *TowerFloorRecord) Reset() {
	*x = TowerFloorRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerFloorRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerFloorRecord) ProtoMessage() {}

func (x *TowerFloorRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerFloorRecord.ProtoReflect.Descriptor instead.
func (*TowerFloorRecord) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{2}
}

func (x *TowerFloorRecord) GetFloorStarRewardProgress() uint32 {
	if x != nil {
		return x.FloorStarRewardProgress
	}
	return 0
}

func (x *TowerFloorRecord) GetPassedLevelMap() map[uint32]uint32 {
	if x != nil {
		return x.PassedLevelMap
	}
	return nil
}

func (x *TowerFloorRecord) GetFloorId() uint32 {
	if x != nil {
		return x.FloorId
	}
	return 0
}

func (x *TowerFloorRecord) GetPassedLevelRecordList() []*TowerLevelRecord {
	if x != nil {
		return x.PassedLevelRecordList
	}
	return nil
}

type TowerCurLevelRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TowerTeamList []*TowerTeam `protobuf:"bytes,8,rep,name=tower_team_list,json=towerTeamList,proto3" json:"tower_team_list,omitempty"`
	IsEmpty       bool         `protobuf:"varint,6,opt,name=is_empty,json=isEmpty,proto3" json:"is_empty,omitempty"`
	BuffIdList    []uint32     `protobuf:"varint,4,rep,packed,name=buff_id_list,json=buffIdList,proto3" json:"buff_id_list,omitempty"`
	IsUpperPart   bool         `protobuf:"varint,2,opt,name=is_upper_part,json=isUpperPart,proto3" json:"is_upper_part,omitempty"`
	CurLevelIndex uint32       `protobuf:"varint,1,opt,name=cur_level_index,json=curLevelIndex,proto3" json:"cur_level_index,omitempty"`
	CurFloorId    uint32       `protobuf:"varint,15,opt,name=cur_floor_id,json=curFloorId,proto3" json:"cur_floor_id,omitempty"`
}

func (x *TowerCurLevelRecord) Reset() {
	*x = TowerCurLevelRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerCurLevelRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerCurLevelRecord) ProtoMessage() {}

func (x *TowerCurLevelRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerCurLevelRecord.ProtoReflect.Descriptor instead.
func (*TowerCurLevelRecord) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{3}
}

func (x *TowerCurLevelRecord) GetTowerTeamList() []*TowerTeam {
	if x != nil {
		return x.TowerTeamList
	}
	return nil
}

func (x *TowerCurLevelRecord) GetIsEmpty() bool {
	if x != nil {
		return x.IsEmpty
	}
	return false
}

func (x *TowerCurLevelRecord) GetBuffIdList() []uint32 {
	if x != nil {
		return x.BuffIdList
	}
	return nil
}

func (x *TowerCurLevelRecord) GetIsUpperPart() bool {
	if x != nil {
		return x.IsUpperPart
	}
	return false
}

func (x *TowerCurLevelRecord) GetCurLevelIndex() uint32 {
	if x != nil {
		return x.CurLevelIndex
	}
	return 0
}

func (x *TowerCurLevelRecord) GetCurFloorId() uint32 {
	if x != nil {
		return x.CurFloorId
	}
	return 0
}

type TowerBriefDataNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalStarNum            uint32 `protobuf:"varint,11,opt,name=total_star_num,json=totalStarNum,proto3" json:"total_star_num,omitempty"`
	LastFloorIndex          uint32 `protobuf:"varint,8,opt,name=last_floor_index,json=lastFloorIndex,proto3" json:"last_floor_index,omitempty"`
	ScheduleStartTime       uint32 `protobuf:"varint,15,opt,name=schedule_start_time,json=scheduleStartTime,proto3" json:"schedule_start_time,omitempty"`
	NextScheduleChangeTime  uint32 `protobuf:"varint,6,opt,name=next_schedule_change_time,json=nextScheduleChangeTime,proto3" json:"next_schedule_change_time,omitempty"`
	IsFinishedEntranceFloor bool   `protobuf:"varint,14,opt,name=is_finished_entrance_floor,json=isFinishedEntranceFloor,proto3" json:"is_finished_entrance_floor,omitempty"`
	LastLevelIndex          uint32 `protobuf:"varint,4,opt,name=last_level_index,json=lastLevelIndex,proto3" json:"last_level_index,omitempty"`
	TowerScheduleId         uint32 `protobuf:"varint,5,opt,name=tower_schedule_id,json=towerScheduleId,proto3" json:"tower_schedule_id,omitempty"`
}

func (x *TowerBriefDataNotify) Reset() {
	*x = TowerBriefDataNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerBriefDataNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerBriefDataNotify) ProtoMessage() {}

func (x *TowerBriefDataNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerBriefDataNotify.ProtoReflect.Descriptor instead.
func (*TowerBriefDataNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{4}
}

func (x *TowerBriefDataNotify) GetTotalStarNum() uint32 {
	if x != nil {
		return x.TotalStarNum
	}
	return 0
}

func (x *TowerBriefDataNotify) GetLastFloorIndex() uint32 {
	if x != nil {
		return x.LastFloorIndex
	}
	return 0
}

func (x *TowerBriefDataNotify) GetScheduleStartTime() uint32 {
	if x != nil {
		return x.ScheduleStartTime
	}
	return 0
}

func (x *TowerBriefDataNotify) GetNextScheduleChangeTime() uint32 {
	if x != nil {
		return x.NextScheduleChangeTime
	}
	return 0
}

func (x *TowerBriefDataNotify) GetIsFinishedEntranceFloor() bool {
	if x != nil {
		return x.IsFinishedEntranceFloor
	}
	return false
}

func (x *TowerBriefDataNotify) GetLastLevelIndex() uint32 {
	if x != nil {
		return x.LastLevelIndex
	}
	return 0
}

func (x *TowerBriefDataNotify) GetTowerScheduleId() uint32 {
	if x != nil {
		return x.TowerScheduleId
	}
	return 0
}

type TowerFloorRecordChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinishedEntranceFloor bool                `protobuf:"varint,11,opt,name=is_finished_entrance_floor,json=isFinishedEntranceFloor,proto3" json:"is_finished_entrance_floor,omitempty"`
	TowerFloorRecordList    []*TowerFloorRecord `protobuf:"bytes,8,rep,name=tower_floor_record_list,json=towerFloorRecordList,proto3" json:"tower_floor_record_list,omitempty"`
}

func (x *TowerFloorRecordChangeNotify) Reset() {
	*x = TowerFloorRecordChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerFloorRecordChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerFloorRecordChangeNotify) ProtoMessage() {}

func (x *TowerFloorRecordChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerFloorRecordChangeNotify.ProtoReflect.Descriptor instead.
func (*TowerFloorRecordChangeNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{5}
}

func (x *TowerFloorRecordChangeNotify) GetIsFinishedEntranceFloor() bool {
	if x != nil {
		return x.IsFinishedEntranceFloor
	}
	return false
}

func (x *TowerFloorRecordChangeNotify) GetTowerFloorRecordList() []*TowerFloorRecord {
	if x != nil {
		return x.TowerFloorRecordList
	}
	return nil
}

type TowerCurLevelRecordChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurLevelRecord *TowerCurLevelRecord `protobuf:"bytes,10,opt,name=cur_level_record,json=curLevelRecord,proto3" json:"cur_level_record,omitempty"`
}

func (x *TowerCurLevelRecordChangeNotify) Reset() {
	*x = TowerCurLevelRecordChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerCurLevelRecordChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerCurLevelRecordChangeNotify) ProtoMessage() {}

func (x *TowerCurLevelRecordChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerCurLevelRecordChangeNotify.ProtoReflect.Descriptor instead.
func (*TowerCurLevelRecordChangeNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{6}
}

func (x *TowerCurLevelRecordChangeNotify) GetCurLevelRecord() *TowerCurLevelRecord {
	if x != nil {
		return x.CurLevelRecord
	}
	return nil
}

type TowerDailyRewardProgressChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DailyFloorId    uint32 `protobuf:"varint,15,opt,name=daily_floor_id,json=dailyFloorId,proto3" json:"daily_floor_id,omitempty"`
	DailyLevelIndex uint32 `protobuf:"varint,9,opt,name=daily_level_index,json=dailyLevelIndex,proto3" json:"daily_level_index,omitempty"`
}

func (x *TowerDailyRewardProgressChangeNotify) Reset() {
	*x = TowerDailyRewardProgressChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerDailyRewardProgressChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerDailyRewardProgressChangeNotify) ProtoMessage() {}

func (x *TowerDailyRewardProgressChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerDailyRewardProgressChangeNotify.ProtoReflect.Descriptor instead.
func (*TowerDailyRewardProgressChangeNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{7}
}

func (x *TowerDailyRewardProgressChangeNotify) GetDailyFloorId() uint32 {
	if x != nil {
		return x.DailyFloorId
	}
	return 0
}

func (x *TowerDailyRewardProgressChangeNotify) GetDailyLevelIndex() uint32 {
	if x != nil {
		return x.DailyLevelIndex
	}
	return 0
}

type TowerTeamSelectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TowerTeamList []*TowerTeam `protobuf:"bytes,11,rep,name=tower_team_list,json=towerTeamList,proto3" json:"tower_team_list,omitempty"`
	FloorId       uint32       `protobuf:"varint,10,opt,name=floor_id,json=floorId,proto3" json:"floor_id,omitempty"`
}

func (x *TowerTeamSelectReq) Reset() {
	*x = TowerTeamSelectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerTeamSelectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerTeamSelectReq) ProtoMessage() {}

func (x *TowerTeamSelectReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerTeamSelectReq.ProtoReflect.Descriptor instead.
func (*TowerTeamSelectReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{8}
}

func (x *TowerTeamSelectReq) GetTowerTeamList() []*TowerTeam {
	if x != nil {
		return x.TowerTeamList
	}
	return nil
}

func (x *TowerTeamSelectReq) GetFloorId() uint32 {
	if x != nil {
		return x.FloorId
	}
	return 0
}

type TowerTeamSelectRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,8,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *TowerTeamSelectRsp) Reset() {
	*x = TowerTeamSelectRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerTeamSelectRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerTeamSelectRsp) ProtoMessage() {}

func (x *TowerTeamSelectRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerTeamSelectRsp.ProtoReflect.Descriptor instead.
func (*TowerTeamSelectRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{9}
}

func (x *TowerTeamSelectRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type TowerAllDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsInteract bool `protobuf:"varint,2,opt,name=is_interact,json=isInteract,proto3" json:"is_interact,omitempty"`
}

func (x *TowerAllDataReq) Reset() {
	*x = TowerAllDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerAllDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerAllDataReq) ProtoMessage() {}

func (x *TowerAllDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerAllDataReq.ProtoReflect.Descriptor instead.
func (*TowerAllDataReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{10}
}

func (x *TowerAllDataReq) GetIsInteract() bool {
	if x != nil {
		return x.IsInteract
	}
	return false
}

type TowerMonthlyBrief struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TowerScheduleId uint32 `protobuf:"varint,15,opt,name=tower_schedule_id,json=towerScheduleId,proto3" json:"tower_schedule_id,omitempty"`
	BestFloorIndex  uint32 `protobuf:"varint,6,opt,name=best_floor_index,json=bestFloorIndex,proto3" json:"best_floor_index,omitempty"`
	BestLevelIndex  uint32 `protobuf:"varint,3,opt,name=best_level_index,json=bestLevelIndex,proto3" json:"best_level_index,omitempty"`
	TotalStarCount  uint32 `protobuf:"varint,12,opt,name=total_star_count,json=totalStarCount,proto3" json:"total_star_count,omitempty"`
}

func (x *TowerMonthlyBrief) Reset() {
	*x = TowerMonthlyBrief{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerMonthlyBrief) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerMonthlyBrief) ProtoMessage() {}

func (x *TowerMonthlyBrief) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerMonthlyBrief.ProtoReflect.Descriptor instead.
func (*TowerMonthlyBrief) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{11}
}

func (x *TowerMonthlyBrief) GetTowerScheduleId() uint32 {
	if x != nil {
		return x.TowerScheduleId
	}
	return 0
}

func (x *TowerMonthlyBrief) GetBestFloorIndex() uint32 {
	if x != nil {
		return x.BestFloorIndex
	}
	return 0
}

func (x *TowerMonthlyBrief) GetBestLevelIndex() uint32 {
	if x != nil {
		return x.BestLevelIndex
	}
	return 0
}

func (x *TowerMonthlyBrief) GetTotalStarCount() uint32 {
	if x != nil {
		return x.TotalStarCount
	}
	return 0
}

type TowerAllDataRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TowerScheduleId               uint32               `protobuf:"varint,10,opt,name=tower_schedule_id,json=towerScheduleId,proto3" json:"tower_schedule_id,omitempty"`
	DailyLevelIndex               uint32               `protobuf:"varint,9,opt,name=daily_level_index,json=dailyLevelIndex,proto3" json:"daily_level_index,omitempty"`
	SkipFloorGrantedRewardItemMap map[uint32]uint32    `protobuf:"bytes,12,rep,name=skip_floor_granted_reward_item_map,json=skipFloorGrantedRewardItemMap,proto3" json:"skip_floor_granted_reward_item_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IsFirstInteract               bool                 `protobuf:"varint,3,opt,name=is_first_interact,json=isFirstInteract,proto3" json:"is_first_interact,omitempty"`
	IsFinishedEntranceFloor       bool                 `protobuf:"varint,1,opt,name=is_finished_entrance_floor,json=isFinishedEntranceFloor,proto3" json:"is_finished_entrance_floor,omitempty"`
	TowerFloorRecordList          []*TowerFloorRecord  `protobuf:"bytes,5,rep,name=tower_floor_record_list,json=towerFloorRecordList,proto3" json:"tower_floor_record_list,omitempty"`
	DailyFloorId                  uint32               `protobuf:"varint,11,opt,name=daily_floor_id,json=dailyFloorId,proto3" json:"daily_floor_id,omitempty"`
	CommemorativeRewardId         uint32               `protobuf:"varint,13,opt,name=commemorative_reward_id,json=commemorativeRewardId,proto3" json:"commemorative_reward_id,omitempty"`
	LastScheduleMonthlyBrief      *TowerMonthlyBrief   `protobuf:"bytes,1222,opt,name=last_schedule_monthly_brief,json=lastScheduleMonthlyBrief,proto3" json:"last_schedule_monthly_brief,omitempty"`
	NextScheduleChangeTime        uint32               `protobuf:"varint,6,opt,name=next_schedule_change_time,json=nextScheduleChangeTime,proto3" json:"next_schedule_change_time,omitempty"`
	ValidTowerRecordNum           uint32               `protobuf:"varint,7,opt,name=valid_tower_record_num,json=validTowerRecordNum,proto3" json:"valid_tower_record_num,omitempty"`
	SkipToFloorIndex              uint32               `protobuf:"varint,2,opt,name=skip_to_floor_index,json=skipToFloorIndex,proto3" json:"skip_to_floor_index,omitempty"`
	FloorOpenTimeMap              map[uint32]uint32    `protobuf:"bytes,4,rep,name=floor_open_time_map,json=floorOpenTimeMap,proto3" json:"floor_open_time_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CurLevelRecord                *TowerCurLevelRecord `protobuf:"bytes,15,opt,name=cur_level_record,json=curLevelRecord,proto3" json:"cur_level_record,omitempty"`
	Retcode                       int32                `protobuf:"varint,8,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ScheduleStartTime             uint32               `protobuf:"varint,914,opt,name=schedule_start_time,json=scheduleStartTime,proto3" json:"schedule_start_time,omitempty"`
	MonthlyBrief                  *TowerMonthlyBrief   `protobuf:"bytes,14,opt,name=monthly_brief,json=monthlyBrief,proto3" json:"monthly_brief,omitempty"`
}

func (x *TowerAllDataRsp) Reset() {
	*x = TowerAllDataRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerAllDataRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerAllDataRsp) ProtoMessage() {}

func (x *TowerAllDataRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerAllDataRsp.ProtoReflect.Descriptor instead.
func (*TowerAllDataRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{12}
}

func (x *TowerAllDataRsp) GetTowerScheduleId() uint32 {
	if x != nil {
		return x.TowerScheduleId
	}
	return 0
}

func (x *TowerAllDataRsp) GetDailyLevelIndex() uint32 {
	if x != nil {
		return x.DailyLevelIndex
	}
	return 0
}

func (x *TowerAllDataRsp) GetSkipFloorGrantedRewardItemMap() map[uint32]uint32 {
	if x != nil {
		return x.SkipFloorGrantedRewardItemMap
	}
	return nil
}

func (x *TowerAllDataRsp) GetIsFirstInteract() bool {
	if x != nil {
		return x.IsFirstInteract
	}
	return false
}

func (x *TowerAllDataRsp) GetIsFinishedEntranceFloor() bool {
	if x != nil {
		return x.IsFinishedEntranceFloor
	}
	return false
}

func (x *TowerAllDataRsp) GetTowerFloorRecordList() []*TowerFloorRecord {
	if x != nil {
		return x.TowerFloorRecordList
	}
	return nil
}

func (x *TowerAllDataRsp) GetDailyFloorId() uint32 {
	if x != nil {
		return x.DailyFloorId
	}
	return 0
}

func (x *TowerAllDataRsp) GetCommemorativeRewardId() uint32 {
	if x != nil {
		return x.CommemorativeRewardId
	}
	return 0
}

func (x *TowerAllDataRsp) GetLastScheduleMonthlyBrief() *TowerMonthlyBrief {
	if x != nil {
		return x.LastScheduleMonthlyBrief
	}
	return nil
}

func (x *TowerAllDataRsp) GetNextScheduleChangeTime() uint32 {
	if x != nil {
		return x.NextScheduleChangeTime
	}
	return 0
}

func (x *TowerAllDataRsp) GetValidTowerRecordNum() uint32 {
	if x != nil {
		return x.ValidTowerRecordNum
	}
	return 0
}

func (x *TowerAllDataRsp) GetSkipToFloorIndex() uint32 {
	if x != nil {
		return x.SkipToFloorIndex
	}
	return 0
}

func (x *TowerAllDataRsp) GetFloorOpenTimeMap() map[uint32]uint32 {
	if x != nil {
		return x.FloorOpenTimeMap
	}
	return nil
}

func (x *TowerAllDataRsp) GetCurLevelRecord() *TowerCurLevelRecord {
	if x != nil {
		return x.CurLevelRecord
	}
	return nil
}

func (x *TowerAllDataRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *TowerAllDataRsp) GetScheduleStartTime() uint32 {
	if x != nil {
		return x.ScheduleStartTime
	}
	return 0
}

func (x *TowerAllDataRsp) GetMonthlyBrief() *TowerMonthlyBrief {
	if x != nil {
		return x.MonthlyBrief
	}
	return nil
}

type TowerEnterLevelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterPointId uint32 `protobuf:"varint,3,opt,name=enter_point_id,json=enterPointId,proto3" json:"enter_point_id,omitempty"`
}

func (x *TowerEnterLevelReq) Reset() {
	*x = TowerEnterLevelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerEnterLevelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerEnterLevelReq) ProtoMessage() {}

func (x *TowerEnterLevelReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerEnterLevelReq.ProtoReflect.Descriptor instead.
func (*TowerEnterLevelReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{13}
}

func (x *TowerEnterLevelReq) GetEnterPointId() uint32 {
	if x != nil {
		return x.EnterPointId
	}
	return 0
}

type TowerEnterLevelRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TowerBuffIdList []uint32 `protobuf:"varint,10,rep,packed,name=tower_buff_id_list,json=towerBuffIdList,proto3" json:"tower_buff_id_list,omitempty"`
	Retcode         int32    `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	LevelIndex      uint32   `protobuf:"varint,14,opt,name=level_index,json=levelIndex,proto3" json:"level_index,omitempty"`
	FloorId         uint32   `protobuf:"varint,5,opt,name=floor_id,json=floorId,proto3" json:"floor_id,omitempty"`
}

func (x *TowerEnterLevelRsp) Reset() {
	*x = TowerEnterLevelRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerEnterLevelRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerEnterLevelRsp) ProtoMessage() {}

func (x *TowerEnterLevelRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerEnterLevelRsp.ProtoReflect.Descriptor instead.
func (*TowerEnterLevelRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{14}
}

func (x *TowerEnterLevelRsp) GetTowerBuffIdList() []uint32 {
	if x != nil {
		return x.TowerBuffIdList
	}
	return nil
}

func (x *TowerEnterLevelRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *TowerEnterLevelRsp) GetLevelIndex() uint32 {
	if x != nil {
		return x.LevelIndex
	}
	return 0
}

func (x *TowerEnterLevelRsp) GetFloorId() uint32 {
	if x != nil {
		return x.FloorId
	}
	return 0
}

type TowerBuffSelectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TowerBuffId uint32 `protobuf:"varint,5,opt,name=tower_buff_id,json=towerBuffId,proto3" json:"tower_buff_id,omitempty"`
}

func (x *TowerBuffSelectReq) Reset() {
	*x = TowerBuffSelectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerBuffSelectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerBuffSelectReq) ProtoMessage() {}

func (x *TowerBuffSelectReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerBuffSelectReq.ProtoReflect.Descriptor instead.
func (*TowerBuffSelectReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{15}
}

func (x *TowerBuffSelectReq) GetTowerBuffId() uint32 {
	if x != nil {
		return x.TowerBuffId
	}
	return 0
}

type TowerBuffSelectRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode     int32  `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
	TowerBuffId uint32 `protobuf:"varint,13,opt,name=tower_buff_id,json=towerBuffId,proto3" json:"tower_buff_id,omitempty"`
}

func (x *TowerBuffSelectRsp) Reset() {
	*x = TowerBuffSelectRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerBuffSelectRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerBuffSelectRsp) ProtoMessage() {}

func (x *TowerBuffSelectRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerBuffSelectRsp.ProtoReflect.Descriptor instead.
func (*TowerBuffSelectRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{16}
}

func (x *TowerBuffSelectRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *TowerBuffSelectRsp) GetTowerBuffId() uint32 {
	if x != nil {
		return x.TowerBuffId
	}
	return 0
}

type TowerSurrenderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TowerSurrenderReq) Reset() {
	*x = TowerSurrenderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerSurrenderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerSurrenderReq) ProtoMessage() {}

func (x *TowerSurrenderReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerSurrenderReq.ProtoReflect.Descriptor instead.
func (*TowerSurrenderReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{17}
}

type TowerSurrenderRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,9,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *TowerSurrenderRsp) Reset() {
	*x = TowerSurrenderRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerSurrenderRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerSurrenderRsp) ProtoMessage() {}

func (x *TowerSurrenderRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerSurrenderRsp.ProtoReflect.Descriptor instead.
func (*TowerSurrenderRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{18}
}

func (x *TowerSurrenderRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type TowerGetFloorStarRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FloorId uint32 `protobuf:"varint,15,opt,name=floor_id,json=floorId,proto3" json:"floor_id,omitempty"`
}

func (x *TowerGetFloorStarRewardReq) Reset() {
	*x = TowerGetFloorStarRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerGetFloorStarRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerGetFloorStarRewardReq) ProtoMessage() {}

func (x *TowerGetFloorStarRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerGetFloorStarRewardReq.ProtoReflect.Descriptor instead.
func (*TowerGetFloorStarRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{19}
}

func (x *TowerGetFloorStarRewardReq) GetFloorId() uint32 {
	if x != nil {
		return x.FloorId
	}
	return 0
}

type TowerGetFloorStarRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32  `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
	FloorId uint32 `protobuf:"varint,9,opt,name=floor_id,json=floorId,proto3" json:"floor_id,omitempty"`
}

func (x *TowerGetFloorStarRewardRsp) Reset() {
	*x = TowerGetFloorStarRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerGetFloorStarRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerGetFloorStarRewardRsp) ProtoMessage() {}

func (x *TowerGetFloorStarRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerGetFloorStarRewardRsp.ProtoReflect.Descriptor instead.
func (*TowerGetFloorStarRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{20}
}

func (x *TowerGetFloorStarRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *TowerGetFloorStarRewardRsp) GetFloorId() uint32 {
	if x != nil {
		return x.FloorId
	}
	return 0
}

type TowerLevelEndNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextFloorId          uint32       `protobuf:"varint,4,opt,name=next_floor_id,json=nextFloorId,proto3" json:"next_floor_id,omitempty"`
	RewardItemList       []*ItemParam `protobuf:"bytes,12,rep,name=reward_item_list,json=rewardItemList,proto3" json:"reward_item_list,omitempty"`
	ContinueState        uint32       `protobuf:"varint,15,opt,name=continue_state,json=continueState,proto3" json:"continue_state,omitempty"`
	IsSuccess            bool         `protobuf:"varint,5,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	FinishedStarCondList []uint32     `protobuf:"varint,6,rep,packed,name=finished_star_cond_list,json=finishedStarCondList,proto3" json:"finished_star_cond_list,omitempty"`
}

func (x *TowerLevelEndNotify) Reset() {
	*x = TowerLevelEndNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerLevelEndNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerLevelEndNotify) ProtoMessage() {}

func (x *TowerLevelEndNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerLevelEndNotify.ProtoReflect.Descriptor instead.
func (*TowerLevelEndNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{21}
}

func (x *TowerLevelEndNotify) GetNextFloorId() uint32 {
	if x != nil {
		return x.NextFloorId
	}
	return 0
}

func (x *TowerLevelEndNotify) GetRewardItemList() []*ItemParam {
	if x != nil {
		return x.RewardItemList
	}
	return nil
}

func (x *TowerLevelEndNotify) GetContinueState() uint32 {
	if x != nil {
		return x.ContinueState
	}
	return 0
}

func (x *TowerLevelEndNotify) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *TowerLevelEndNotify) GetFinishedStarCondList() []uint32 {
	if x != nil {
		return x.FinishedStarCondList
	}
	return nil
}

type TowerLevelStarCondData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFail        bool   `protobuf:"varint,15,opt,name=is_fail,json=isFail,proto3" json:"is_fail,omitempty"`
	CondValue     uint32 `protobuf:"varint,9,opt,name=cond_value,json=condValue,proto3" json:"cond_value,omitempty"`
	IsPause       bool   `protobuf:"varint,13,opt,name=is_pause,json=isPause,proto3" json:"is_pause,omitempty"`
	StarCondIndex uint32 `protobuf:"varint,6,opt,name=star_cond_index,json=starCondIndex,proto3" json:"star_cond_index,omitempty"`
}

func (x *TowerLevelStarCondData) Reset() {
	*x = TowerLevelStarCondData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerLevelStarCondData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerLevelStarCondData) ProtoMessage() {}

func (x *TowerLevelStarCondData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerLevelStarCondData.ProtoReflect.Descriptor instead.
func (*TowerLevelStarCondData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{22}
}

func (x *TowerLevelStarCondData) GetIsFail() bool {
	if x != nil {
		return x.IsFail
	}
	return false
}

func (x *TowerLevelStarCondData) GetCondValue() uint32 {
	if x != nil {
		return x.CondValue
	}
	return 0
}

func (x *TowerLevelStarCondData) GetIsPause() bool {
	if x != nil {
		return x.IsPause
	}
	return false
}

func (x *TowerLevelStarCondData) GetStarCondIndex() uint32 {
	if x != nil {
		return x.StarCondIndex
	}
	return 0
}

type TowerLevelStarCondNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelIndex   uint32                    `protobuf:"varint,14,opt,name=level_index,json=levelIndex,proto3" json:"level_index,omitempty"`
	FloorId      uint32                    `protobuf:"varint,11,opt,name=floor_id,json=floorId,proto3" json:"floor_id,omitempty"`
	CondDataList []*TowerLevelStarCondData `protobuf:"bytes,9,rep,name=cond_data_list,json=condDataList,proto3" json:"cond_data_list,omitempty"`
}

func (x *TowerLevelStarCondNotify) Reset() {
	*x = TowerLevelStarCondNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerLevelStarCondNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerLevelStarCondNotify) ProtoMessage() {}

func (x *TowerLevelStarCondNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerLevelStarCondNotify.ProtoReflect.Descriptor instead.
func (*TowerLevelStarCondNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{23}
}

func (x *TowerLevelStarCondNotify) GetLevelIndex() uint32 {
	if x != nil {
		return x.LevelIndex
	}
	return 0
}

func (x *TowerLevelStarCondNotify) GetFloorId() uint32 {
	if x != nil {
		return x.FloorId
	}
	return 0
}

func (x *TowerLevelStarCondNotify) GetCondDataList() []*TowerLevelStarCondData {
	if x != nil {
		return x.CondDataList
	}
	return nil
}

type TowerMiddleLevelChangeTeamNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TowerMiddleLevelChangeTeamNotify) Reset() {
	*x = TowerMiddleLevelChangeTeamNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerMiddleLevelChangeTeamNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerMiddleLevelChangeTeamNotify) ProtoMessage() {}

func (x *TowerMiddleLevelChangeTeamNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerMiddleLevelChangeTeamNotify.ProtoReflect.Descriptor instead.
func (*TowerMiddleLevelChangeTeamNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{24}
}

type TowerFightRecordPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId uint32 `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	Data     uint32 `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TowerFightRecordPair) Reset() {
	*x = TowerFightRecordPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerFightRecordPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerFightRecordPair) ProtoMessage() {}

func (x *TowerFightRecordPair) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerFightRecordPair.ProtoReflect.Descriptor instead.
func (*TowerFightRecordPair) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{25}
}

func (x *TowerFightRecordPair) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *TowerFightRecordPair) GetData() uint32 {
	if x != nil {
		return x.Data
	}
	return 0
}

type TowerMonthlyCombatRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MostKillAvatarPair            *TowerFightRecordPair   `protobuf:"bytes,14,opt,name=most_kill_avatar_pair,json=mostKillAvatarPair,proto3" json:"most_kill_avatar_pair,omitempty"`
	MostCastNormalSkillAvatarPair *TowerFightRecordPair   `protobuf:"bytes,8,opt,name=most_cast_normal_skill_avatar_pair,json=mostCastNormalSkillAvatarPair,proto3" json:"most_cast_normal_skill_avatar_pair,omitempty"`
	MostRevealAvatarList          []*TowerFightRecordPair `protobuf:"bytes,6,rep,name=most_reveal_avatar_list,json=mostRevealAvatarList,proto3" json:"most_reveal_avatar_list,omitempty"`
	MostCastEnergySkillAvatarPair *TowerFightRecordPair   `protobuf:"bytes,4,opt,name=most_cast_energy_skill_avatar_pair,json=mostCastEnergySkillAvatarPair,proto3" json:"most_cast_energy_skill_avatar_pair,omitempty"`
	HighestDpsAvatrPair           *TowerFightRecordPair   `protobuf:"bytes,12,opt,name=highest_dps_avatr_pair,json=highestDpsAvatrPair,proto3" json:"highest_dps_avatr_pair,omitempty"`
	MostTakeDamageAvatarPair      *TowerFightRecordPair   `protobuf:"bytes,9,opt,name=most_take_damage_avatar_pair,json=mostTakeDamageAvatarPair,proto3" json:"most_take_damage_avatar_pair,omitempty"`
}

func (x *TowerMonthlyCombatRecord) Reset() {
	*x = TowerMonthlyCombatRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerMonthlyCombatRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerMonthlyCombatRecord) ProtoMessage() {}

func (x *TowerMonthlyCombatRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerMonthlyCombatRecord.ProtoReflect.Descriptor instead.
func (*TowerMonthlyCombatRecord) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{26}
}

func (x *TowerMonthlyCombatRecord) GetMostKillAvatarPair() *TowerFightRecordPair {
	if x != nil {
		return x.MostKillAvatarPair
	}
	return nil
}

func (x *TowerMonthlyCombatRecord) GetMostCastNormalSkillAvatarPair() *TowerFightRecordPair {
	if x != nil {
		return x.MostCastNormalSkillAvatarPair
	}
	return nil
}

func (x *TowerMonthlyCombatRecord) GetMostRevealAvatarList() []*TowerFightRecordPair {
	if x != nil {
		return x.MostRevealAvatarList
	}
	return nil
}

func (x *TowerMonthlyCombatRecord) GetMostCastEnergySkillAvatarPair() *TowerFightRecordPair {
	if x != nil {
		return x.MostCastEnergySkillAvatarPair
	}
	return nil
}

func (x *TowerMonthlyCombatRecord) GetHighestDpsAvatrPair() *TowerFightRecordPair {
	if x != nil {
		return x.HighestDpsAvatrPair
	}
	return nil
}

func (x *TowerMonthlyCombatRecord) GetMostTakeDamageAvatarPair() *TowerFightRecordPair {
	if x != nil {
		return x.MostTakeDamageAvatarPair
	}
	return nil
}

type TowerMonthlyDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonthlyCombatRecord *TowerMonthlyCombatRecord `protobuf:"bytes,2,opt,name=monthly_combat_record,json=monthlyCombatRecord,proto3" json:"monthly_combat_record,omitempty"`
	MonthlyBrief        *TowerMonthlyBrief        `protobuf:"bytes,12,opt,name=monthly_brief,json=monthlyBrief,proto3" json:"monthly_brief,omitempty"`
}

func (x *TowerMonthlyDetail) Reset() {
	*x = TowerMonthlyDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerMonthlyDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerMonthlyDetail) ProtoMessage() {}

func (x *TowerMonthlyDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerMonthlyDetail.ProtoReflect.Descriptor instead.
func (*TowerMonthlyDetail) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{27}
}

func (x *TowerMonthlyDetail) GetMonthlyCombatRecord() *TowerMonthlyCombatRecord {
	if x != nil {
		return x.MonthlyCombatRecord
	}
	return nil
}

func (x *TowerMonthlyDetail) GetMonthlyBrief() *TowerMonthlyBrief {
	if x != nil {
		return x.MonthlyBrief
	}
	return nil
}

type TowerRecordHandbookReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TowerRecordHandbookReq) Reset() {
	*x = TowerRecordHandbookReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerRecordHandbookReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerRecordHandbookReq) ProtoMessage() {}

func (x *TowerRecordHandbookReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerRecordHandbookReq.ProtoReflect.Descriptor instead.
func (*TowerRecordHandbookReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{28}
}

type TowerRecordHandbookRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode           int32                 `protobuf:"varint,7,opt,name=retcode,proto3" json:"retcode,omitempty"`
	MonthlyDetailList []*TowerMonthlyDetail `protobuf:"bytes,14,rep,name=monthly_detail_list,json=monthlyDetailList,proto3" json:"monthly_detail_list,omitempty"`
}

func (x *TowerRecordHandbookRsp) Reset() {
	*x = TowerRecordHandbookRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_tower_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerRecordHandbookRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerRecordHandbookRsp) ProtoMessage() {}

func (x *TowerRecordHandbookRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_tower_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerRecordHandbookRsp.ProtoReflect.Descriptor instead.
func (*TowerRecordHandbookRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_tower_proto_rawDescGZIP(), []int{29}
}

func (x *TowerRecordHandbookRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *TowerRecordHandbookRsp) GetMonthlyDetailList() []*TowerMonthlyDetail {
	if x != nil {
		return x.MonthlyDetailList
	}
	return nil
}

var File_cmd_cmd_tower_proto protoreflect.FileDescriptor

var file_cmd_cmd_tower_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x6d, 0x64, 0x5f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x59, 0x0a, 0x09, 0x54, 0x6f,
	0x77, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x74, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x75, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x10, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x61, 0x74,
	0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x64, 0x22, 0xd6, 0x02, 0x0a, 0x10, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x6c,
	0x6f, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x6c, 0x6f,
	0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x66,
	0x6c, 0x6f, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x55, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x6c,
	0x6f, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70,
	0x61, 0x73, 0x73, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x18, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x15, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x41, 0x0a, 0x13, 0x50, 0x61,
	0x73, 0x73, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfa, 0x01,
	0x0a, 0x13, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x0f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x0d, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x75,
	0x66, 0x66, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x55, 0x70, 0x70, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x5f,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x63, 0x75, 0x72, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x64, 0x22, 0xe4, 0x02, 0x0a, 0x14, 0x54,
	0x6f, 0x77, 0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0xab, 0x01, 0x0a, 0x1c, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x6f, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12,
	0x4e, 0x0a, 0x17, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x6c,
	0x6f, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x14, 0x74, 0x6f, 0x77, 0x65, 0x72,
	0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x67, 0x0a, 0x1f, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x75, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x78, 0x0a, 0x24, 0x54, 0x6f, 0x77, 0x65,
	0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x69, 0x0a, 0x12, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x38, 0x0a, 0x0f, 0x74, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x0d, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x2e, 0x0a,
	0x12, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x32, 0x0a,
	0x0f, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x22, 0xbd, 0x01, 0x0a, 0x11, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62,
	0x65, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a,
	0x10, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xc4, 0x09, 0x0a, 0x0f, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x84, 0x01,
	0x0a, 0x22, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x73, 0x70, 0x2e, 0x53, 0x6b, 0x69, 0x70, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1d, 0x73, 0x6b, 0x69, 0x70, 0x46, 0x6c, 0x6f, 0x6f, 0x72,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x4d, 0x61, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x4e, 0x0a,
	0x17, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x6f,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x14, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x6c,
	0x6f, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x46, 0x6c, 0x6f, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x1b, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x18, 0xc6, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x42, 0x72, 0x69, 0x65, 0x66, 0x52, 0x18, 0x6c, 0x61, 0x73,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x39, 0x0a, 0x19, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x74, 0x6f,
	0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x5b, 0x0a, 0x13, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x41,
	0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x73, 0x70, 0x2e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x4f,
	0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x10, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61,
	0x70, 0x12, 0x44, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x92, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x62, 0x72,
	0x69, 0x65, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x42, 0x72,
	0x69, 0x65, 0x66, 0x52, 0x0c, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x42, 0x72, 0x69, 0x65,
	0x66, 0x1a, 0x50, 0x0a, 0x22, 0x53, 0x6b, 0x69, 0x70, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x12, 0x54, 0x6f, 0x77, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x24,
	0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x12, 0x74,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x75,
	0x66, 0x66, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x38,
	0x0a, 0x12, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x75,
	0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x77,
	0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x12, 0x54, 0x6f, 0x77, 0x65,
	0x72, 0x42, 0x75, 0x66, 0x66, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x49, 0x64, 0x22, 0x13, 0x0a, 0x11,
	0x54, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x22, 0x2d, 0x0a, 0x11, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x37, 0x0a, 0x1a, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x1a, 0x54, 0x6f, 0x77,
	0x65, 0x72, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x64, 0x22, 0xff, 0x02, 0x0a,
	0x13, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x64, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x65, 0x78,
	0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x54, 0x49,
	0x4e, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23,
	0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x41, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x52, 0x10, 0x02, 0x22, 0x93,
	0x01, 0x0a, 0x16, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x61,
	0x72, 0x43, 0x6f, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x46, 0x61,
	0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x74, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x9b, 0x01, 0x0a, 0x18, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x43, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f,
	0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x22, 0x0a, 0x20, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x22, 0x47, 0x0a, 0x14, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xbd, 0x04, 0x0a, 0x18, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x4e, 0x0a, 0x15,
	0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x69, 0x72, 0x52, 0x12, 0x6d, 0x6f, 0x73, 0x74, 0x4b, 0x69,
	0x6c, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x61, 0x69, 0x72, 0x12, 0x66, 0x0a, 0x22,
	0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x70, 0x61,
	0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x50, 0x61, 0x69, 0x72, 0x52, 0x1d, 0x6d, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x73, 0x74, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x52, 0x0a, 0x17, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76,
	0x65, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f,
	0x77, 0x65, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x14, 0x6d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x22, 0x6d, 0x6f, 0x73, 0x74,
	0x5f, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77,
	0x65, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x1d, 0x6d, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x61, 0x69, 0x72,
	0x12, 0x50, 0x0a, 0x16, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x70, 0x73, 0x5f,
	0x61, 0x76, 0x61, 0x74, 0x72, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x69, 0x72, 0x52, 0x13, 0x68,
	0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x44, 0x70, 0x73, 0x41, 0x76, 0x61, 0x74, 0x72, 0x50, 0x61,
	0x69, 0x72, 0x12, 0x5b, 0x0a, 0x1c, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x5f,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x70, 0x61,
	0x69, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x50, 0x61, 0x69, 0x72, 0x52, 0x18, 0x6d, 0x6f, 0x73, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x61, 0x69, 0x72, 0x22,
	0xa8, 0x01, 0x0a, 0x12, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x53, 0x0a, 0x15, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f,
	0x77, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x13, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43,
	0x6f, 0x6d, 0x62, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x42, 0x72, 0x69, 0x65, 0x66, 0x52, 0x0c, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x42, 0x72, 0x69, 0x65, 0x66, 0x22, 0x18, 0x0a, 0x16, 0x54, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x6f,
	0x6b, 0x52, 0x65, 0x71, 0x22, 0x7d, 0x0a, 0x16, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f,
	0x77, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x74, 0x65, 0x79, 0x76, 0x61, 0x74, 0x2d, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2f,
	0x68, 0x6b, 0x34, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cmd_cmd_tower_proto_rawDescOnce sync.Once
	file_cmd_cmd_tower_proto_rawDescData = file_cmd_cmd_tower_proto_rawDesc
)

func file_cmd_cmd_tower_proto_rawDescGZIP() []byte {
	file_cmd_cmd_tower_proto_rawDescOnce.Do(func() {
		file_cmd_cmd_tower_proto_rawDescData = protoimpl.X.CompressGZIP(file_cmd_cmd_tower_proto_rawDescData)
	})
	return file_cmd_cmd_tower_proto_rawDescData
}

var file_cmd_cmd_tower_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cmd_cmd_tower_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_cmd_cmd_tower_proto_goTypes = []interface{}{
	(TowerLevelEndNotify_ContinueStateType)(0),   // 0: proto.TowerLevelEndNotify.ContinueStateType
	(*TowerTeam)(nil),                            // 1: proto.TowerTeam
	(*TowerLevelRecord)(nil),                     // 2: proto.TowerLevelRecord
	(*TowerFloorRecord)(nil),                     // 3: proto.TowerFloorRecord
	(*TowerCurLevelRecord)(nil),                  // 4: proto.TowerCurLevelRecord
	(*TowerBriefDataNotify)(nil),                 // 5: proto.TowerBriefDataNotify
	(*TowerFloorRecordChangeNotify)(nil),         // 6: proto.TowerFloorRecordChangeNotify
	(*TowerCurLevelRecordChangeNotify)(nil),      // 7: proto.TowerCurLevelRecordChangeNotify
	(*TowerDailyRewardProgressChangeNotify)(nil), // 8: proto.TowerDailyRewardProgressChangeNotify
	(*TowerTeamSelectReq)(nil),                   // 9: proto.TowerTeamSelectReq
	(*TowerTeamSelectRsp)(nil),                   // 10: proto.TowerTeamSelectRsp
	(*TowerAllDataReq)(nil),                      // 11: proto.TowerAllDataReq
	(*TowerMonthlyBrief)(nil),                    // 12: proto.TowerMonthlyBrief
	(*TowerAllDataRsp)(nil),                      // 13: proto.TowerAllDataRsp
	(*TowerEnterLevelReq)(nil),                   // 14: proto.TowerEnterLevelReq
	(*TowerEnterLevelRsp)(nil),                   // 15: proto.TowerEnterLevelRsp
	(*TowerBuffSelectReq)(nil),                   // 16: proto.TowerBuffSelectReq
	(*TowerBuffSelectRsp)(nil),                   // 17: proto.TowerBuffSelectRsp
	(*TowerSurrenderReq)(nil),                    // 18: proto.TowerSurrenderReq
	(*TowerSurrenderRsp)(nil),                    // 19: proto.TowerSurrenderRsp
	(*TowerGetFloorStarRewardReq)(nil),           // 20: proto.TowerGetFloorStarRewardReq
	(*TowerGetFloorStarRewardRsp)(nil),           // 21: proto.TowerGetFloorStarRewardRsp
	(*TowerLevelEndNotify)(nil),                  // 22: proto.TowerLevelEndNotify
	(*TowerLevelStarCondData)(nil),               // 23: proto.TowerLevelStarCondData
	(*TowerLevelStarCondNotify)(nil),             // 24: proto.TowerLevelStarCondNotify
	(*TowerMiddleLevelChangeTeamNotify)(nil),     // 25: proto.TowerMiddleLevelChangeTeamNotify
	(*TowerFightRecordPair)(nil),                 // 26: proto.TowerFightRecordPair
	(*TowerMonthlyCombatRecord)(nil),             // 27: proto.TowerMonthlyCombatRecord
	(*TowerMonthlyDetail)(nil),                   // 28: proto.TowerMonthlyDetail
	(*TowerRecordHandbookReq)(nil),               // 29: proto.TowerRecordHandbookReq
	(*TowerRecordHandbookRsp)(nil),               // 30: proto.TowerRecordHandbookRsp
	nil,                                          // 31: proto.TowerFloorRecord.PassedLevelMapEntry
	nil,                                          // 32: proto.TowerAllDataRsp.SkipFloorGrantedRewardItemMapEntry
	nil,                                          // 33: proto.TowerAllDataRsp.FloorOpenTimeMapEntry
	(*ItemParam)(nil),                            // 34: proto.ItemParam
}
var file_cmd_cmd_tower_proto_depIdxs = []int32{
	31, // 0: proto.TowerFloorRecord.passed_level_map:type_name -> proto.TowerFloorRecord.PassedLevelMapEntry
	2,  // 1: proto.TowerFloorRecord.passed_level_record_list:type_name -> proto.TowerLevelRecord
	1,  // 2: proto.TowerCurLevelRecord.tower_team_list:type_name -> proto.TowerTeam
	3,  // 3: proto.TowerFloorRecordChangeNotify.tower_floor_record_list:type_name -> proto.TowerFloorRecord
	4,  // 4: proto.TowerCurLevelRecordChangeNotify.cur_level_record:type_name -> proto.TowerCurLevelRecord
	1,  // 5: proto.TowerTeamSelectReq.tower_team_list:type_name -> proto.TowerTeam
	32, // 6: proto.TowerAllDataRsp.skip_floor_granted_reward_item_map:type_name -> proto.TowerAllDataRsp.SkipFloorGrantedRewardItemMapEntry
	3,  // 7: proto.TowerAllDataRsp.tower_floor_record_list:type_name -> proto.TowerFloorRecord
	12, // 8: proto.TowerAllDataRsp.last_schedule_monthly_brief:type_name -> proto.TowerMonthlyBrief
	33, // 9: proto.TowerAllDataRsp.floor_open_time_map:type_name -> proto.TowerAllDataRsp.FloorOpenTimeMapEntry
	4,  // 10: proto.TowerAllDataRsp.cur_level_record:type_name -> proto.TowerCurLevelRecord
	12, // 11: proto.TowerAllDataRsp.monthly_brief:type_name -> proto.TowerMonthlyBrief
	34, // 12: proto.TowerLevelEndNotify.reward_item_list:type_name -> proto.ItemParam
	23, // 13: proto.TowerLevelStarCondNotify.cond_data_list:type_name -> proto.TowerLevelStarCondData
	26, // 14: proto.TowerMonthlyCombatRecord.most_kill_avatar_pair:type_name -> proto.TowerFightRecordPair
	26, // 15: proto.TowerMonthlyCombatRecord.most_cast_normal_skill_avatar_pair:type_name -> proto.TowerFightRecordPair
	26, // 16: proto.TowerMonthlyCombatRecord.most_reveal_avatar_list:type_name -> proto.TowerFightRecordPair
	26, // 17: proto.TowerMonthlyCombatRecord.most_cast_energy_skill_avatar_pair:type_name -> proto.TowerFightRecordPair
	26, // 18: proto.TowerMonthlyCombatRecord.highest_dps_avatr_pair:type_name -> proto.TowerFightRecordPair
	26, // 19: proto.TowerMonthlyCombatRecord.most_take_damage_avatar_pair:type_name -> proto.TowerFightRecordPair
	27, // 20: proto.TowerMonthlyDetail.monthly_combat_record:type_name -> proto.TowerMonthlyCombatRecord
	12, // 21: proto.TowerMonthlyDetail.monthly_brief:type_name -> proto.TowerMonthlyBrief
	28, // 22: proto.TowerRecordHandbookRsp.monthly_detail_list:type_name -> proto.TowerMonthlyDetail
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_cmd_cmd_tower_proto_init() }
func file_cmd_cmd_tower_proto_init() {
	if File_cmd_cmd_tower_proto != nil {
		return
	}
	file_define_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cmd_cmd_tower_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerLevelRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerFloorRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerCurLevelRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerBriefDataNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerFloorRecordChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerCurLevelRecordChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerDailyRewardProgressChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerTeamSelectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerTeamSelectRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerAllDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerMonthlyBrief); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerAllDataRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerEnterLevelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerEnterLevelRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerBuffSelectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerBuffSelectRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerSurrenderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerSurrenderRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerGetFloorStarRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerGetFloorStarRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerLevelEndNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerLevelStarCondData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerLevelStarCondNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerMiddleLevelChangeTeamNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerFightRecordPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerMonthlyCombatRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerMonthlyDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerRecordHandbookReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_tower_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerRecordHandbookRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cmd_cmd_tower_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cmd_cmd_tower_proto_goTypes,
		DependencyIndexes: file_cmd_cmd_tower_proto_depIdxs,
		EnumInfos:         file_cmd_cmd_tower_proto_enumTypes,
		MessageInfos:      file_cmd_cmd_tower_proto_msgTypes,
	}.Build()
	File_cmd_cmd_tower_proto = out.File
	file_cmd_cmd_tower_proto_rawDesc = nil
	file_cmd_cmd_tower_proto_goTypes = nil
	file_cmd_cmd_tower_proto_depIdxs = nil
}
