// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: cmd/cmd_investigation.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Investigation_State int32

const (
	Investigation_INVALID      Investigation_State = 0
	Investigation_IN_PROGRESS  Investigation_State = 1
	Investigation_COMPLETE     Investigation_State = 2
	Investigation_REWARD_TAKEN Investigation_State = 3
)

// Enum value maps for Investigation_State.
var (
	Investigation_State_name = map[int32]string{
		0: "INVALID",
		1: "IN_PROGRESS",
		2: "COMPLETE",
		3: "REWARD_TAKEN",
	}
	Investigation_State_value = map[string]int32{
		"INVALID":      0,
		"IN_PROGRESS":  1,
		"COMPLETE":     2,
		"REWARD_TAKEN": 3,
	}
)

func (x Investigation_State) Enum() *Investigation_State {
	p := new(Investigation_State)
	*p = x
	return p
}

func (x Investigation_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Investigation_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_investigation_proto_enumTypes[0].Descriptor()
}

func (Investigation_State) Type() protoreflect.EnumType {
	return &file_cmd_cmd_investigation_proto_enumTypes[0]
}

func (x Investigation_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Investigation_State.Descriptor instead.
func (Investigation_State) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_investigation_proto_rawDescGZIP(), []int{0, 0}
}

type InvestigationTarget_State int32

const (
	InvestigationTarget_INVALID      InvestigationTarget_State = 0
	InvestigationTarget_IN_PROGRESS  InvestigationTarget_State = 1
	InvestigationTarget_COMPLETE     InvestigationTarget_State = 2
	InvestigationTarget_REWARD_TAKEN InvestigationTarget_State = 3
)

// Enum value maps for InvestigationTarget_State.
var (
	InvestigationTarget_State_name = map[int32]string{
		0: "INVALID",
		1: "IN_PROGRESS",
		2: "COMPLETE",
		3: "REWARD_TAKEN",
	}
	InvestigationTarget_State_value = map[string]int32{
		"INVALID":      0,
		"IN_PROGRESS":  1,
		"COMPLETE":     2,
		"REWARD_TAKEN": 3,
	}
)

func (x InvestigationTarget_State) Enum() *InvestigationTarget_State {
	p := new(InvestigationTarget_State)
	*p = x
	return p
}

func (x InvestigationTarget_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvestigationTarget_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_investigation_proto_enumTypes[1].Descriptor()
}

func (InvestigationTarget_State) Type() protoreflect.EnumType {
	return &file_cmd_cmd_investigation_proto_enumTypes[1]
}

func (x InvestigationTarget_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvestigationTarget_State.Descriptor instead.
func (InvestigationTarget_State) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_investigation_proto_rawDescGZIP(), []int{1, 0}
}

type InvestigationMonster_LockState int32

const (
	InvestigationMonster_LOCK_NONE  InvestigationMonster_LockState = 0
	InvestigationMonster_LOCK_QUEST InvestigationMonster_LockState = 1
)

// Enum value maps for InvestigationMonster_LockState.
var (
	InvestigationMonster_LockState_name = map[int32]string{
		0: "LOCK_NONE",
		1: "LOCK_QUEST",
	}
	InvestigationMonster_LockState_value = map[string]int32{
		"LOCK_NONE":  0,
		"LOCK_QUEST": 1,
	}
)

func (x InvestigationMonster_LockState) Enum() *InvestigationMonster_LockState {
	p := new(InvestigationMonster_LockState)
	*p = x
	return p
}

func (x InvestigationMonster_LockState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvestigationMonster_LockState) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_investigation_proto_enumTypes[2].Descriptor()
}

func (InvestigationMonster_LockState) Type() protoreflect.EnumType {
	return &file_cmd_cmd_investigation_proto_enumTypes[2]
}

func (x InvestigationMonster_LockState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvestigationMonster_LockState.Descriptor instead.
func (InvestigationMonster_LockState) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_investigation_proto_rawDescGZIP(), []int{8, 0}
}

type Investigation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalProgress uint32              `protobuf:"varint,5,opt,name=total_progress,json=totalProgress,proto3" json:"total_progress,omitempty"`
	State         Investigation_State `protobuf:"varint,2,opt,name=state,proto3,enum=proto.Investigation_State" json:"state,omitempty"`
	Progress      uint32              `protobuf:"varint,13,opt,name=progress,proto3" json:"progress,omitempty"`
	Id            uint32              `protobuf:"varint,9,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Investigation) Reset() {
	*x = Investigation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_investigation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Investigation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Investigation) ProtoMessage() {}

func (x *Investigation) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_investigation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Investigation.ProtoReflect.Descriptor instead.
func (*Investigation) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_investigation_proto_rawDescGZIP(), []int{0}
}

func (x *Investigation) GetTotalProgress() uint32 {
	if x != nil {
		return x.TotalProgress
	}
	return 0
}

func (x *Investigation) GetState() Investigation_State {
	if x != nil {
		return x.State
	}
	return Investigation_INVALID
}

func (x *Investigation) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *Investigation) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type InvestigationTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestId         uint32                    `protobuf:"varint,15,opt,name=quest_id,json=questId,proto3" json:"quest_id,omitempty"`
	State           InvestigationTarget_State `protobuf:"varint,2,opt,name=state,proto3,enum=proto.InvestigationTarget_State" json:"state,omitempty"`
	Progress        uint32                    `protobuf:"varint,8,opt,name=progress,proto3" json:"progress,omitempty"`
	TotalProgress   uint32                    `protobuf:"varint,7,opt,name=total_progress,json=totalProgress,proto3" json:"total_progress,omitempty"`
	InvestigationId uint32                    `protobuf:"varint,3,opt,name=investigation_id,json=investigationId,proto3" json:"investigation_id,omitempty"`
}

func (x *InvestigationTarget) Reset() {
	*x = InvestigationTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_investigation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvestigationTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvestigationTarget) ProtoMessage() {}

func (x *InvestigationTarget) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_investigation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvestigationTarget.ProtoReflect.Descriptor instead.
func (*InvestigationTarget) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_investigation_proto_rawDescGZIP(), []int{1}
}

func (x *InvestigationTarget) GetQuestId() uint32 {
	if x != nil {
		return x.QuestId
	}
	return 0
}

func (x *InvestigationTarget) GetState() InvestigationTarget_State {
	if x != nil {
		return x.State
	}
	return InvestigationTarget_INVALID
}

func (x *InvestigationTarget) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *InvestigationTarget) GetTotalProgress() uint32 {
	if x != nil {
		return x.TotalProgress
	}
	return 0
}

func (x *InvestigationTarget) GetInvestigationId() uint32 {
	if x != nil {
		return x.InvestigationId
	}
	return 0
}

type PlayerInvestigationAllInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestigationList       []*Investigation       `protobuf:"bytes,15,rep,name=investigation_list,json=investigationList,proto3" json:"investigation_list,omitempty"`
	InvestigationTargetList []*InvestigationTarget `protobuf:"bytes,12,rep,name=investigation_target_list,json=investigationTargetList,proto3" json:"investigation_target_list,omitempty"`
}

func (x *PlayerInvestigationAllInfoNotify) Reset() {
	*x = PlayerInvestigationAllInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_investigation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInvestigationAllInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInvestigationAllInfoNotify) ProtoMessage() {}

func (x *PlayerInvestigationAllInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_investigation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInvestigationAllInfoNotify.ProtoReflect.Descriptor instead.
func (*PlayerInvestigationAllInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_investigation_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerInvestigationAllInfoNotify) GetInvestigationList() []*Investigation {
	if x != nil {
		return x.InvestigationList
	}
	return nil
}

func (x *PlayerInvestigationAllInfoNotify) GetInvestigationTargetList() []*InvestigationTarget {
	if x != nil {
		return x.InvestigationTargetList
	}
	return nil
}

type TakeInvestigationRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TakeInvestigationRewardReq) Reset() {
	*x = TakeInvestigationRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_investigation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeInvestigationRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeInvestigationRewardReq) ProtoMessage() {}

func (x *TakeInvestigationRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_investigation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeInvestigationRewardReq.ProtoReflect.Descriptor instead.
func (*TakeInvestigationRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_investigation_proto_rawDescGZIP(), []int{3}
}

func (x *TakeInvestigationRewardReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TakeInvestigationRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32  `protobuf:"varint,4,opt,name=retcode,proto3" json:"retcode,omitempty"`
	Id      uint32 `protobuf:"varint,12,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TakeInvestigationRewardRsp) Reset() {
	*x = TakeInvestigationRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_investigation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeInvestigationRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeInvestigationRewardRsp) ProtoMessage() {}

func (x *TakeInvestigationRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_investigation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeInvestigationRewardRsp.ProtoReflect.Descriptor instead.
func (*TakeInvestigationRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_investigation_proto_rawDescGZIP(), []int{4}
}

func (x *TakeInvestigationRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *TakeInvestigationRewardRsp) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TakeInvestigationTargetRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestId uint32 `protobuf:"varint,11,opt,name=quest_id,json=questId,proto3" json:"quest_id,omitempty"`
}

func (x *TakeInvestigationTargetRewardReq) Reset() {
	*x = TakeInvestigationTargetRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_investigation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeInvestigationTargetRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeInvestigationTargetRewardReq) ProtoMessage() {}

func (x *TakeInvestigationTargetRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_investigation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeInvestigationTargetRewardReq.ProtoReflect.Descriptor instead.
func (*TakeInvestigationTargetRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_investigation_proto_rawDescGZIP(), []int{5}
}

func (x *TakeInvestigationTargetRewardReq) GetQuestId() uint32 {
	if x != nil {
		return x.QuestId
	}
	return 0
}

type TakeInvestigationTargetRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32  `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	QuestId uint32 `protobuf:"varint,2,opt,name=quest_id,json=questId,proto3" json:"quest_id,omitempty"`
}

func (x *TakeInvestigationTargetRewardRsp) Reset() {
	*x = TakeInvestigationTargetRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_investigation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeInvestigationTargetRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeInvestigationTargetRewardRsp) ProtoMessage() {}

func (x *TakeInvestigationTargetRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_investigation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeInvestigationTargetRewardRsp.ProtoReflect.Descriptor instead.
func (*TakeInvestigationTargetRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_investigation_proto_rawDescGZIP(), []int{6}
}

func (x *TakeInvestigationTargetRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *TakeInvestigationTargetRewardRsp) GetQuestId() uint32 {
	if x != nil {
		return x.QuestId
	}
	return 0
}

type GetInvestigationMonsterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityIdList []uint32 `protobuf:"varint,3,rep,packed,name=city_id_list,json=cityIdList,proto3" json:"city_id_list,omitempty"`
	IsForMark  bool     `protobuf:"varint,4,opt,name=is_for_mark,json=isForMark,proto3" json:"is_for_mark,omitempty"`
}

func (x *GetInvestigationMonsterReq) Reset() {
	*x = GetInvestigationMonsterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_investigation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInvestigationMonsterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvestigationMonsterReq) ProtoMessage() {}

func (x *GetInvestigationMonsterReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_investigation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvestigationMonsterReq.ProtoReflect.Descriptor instead.
func (*GetInvestigationMonsterReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_investigation_proto_rawDescGZIP(), []int{7}
}

func (x *GetInvestigationMonsterReq) GetCityIdList() []uint32 {
	if x != nil {
		return x.CityIdList
	}
	return nil
}

func (x *GetInvestigationMonsterReq) GetIsForMark() bool {
	if x != nil {
		return x.IsForMark
	}
	return false
}

type InvestigationMonster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAlive                     bool                           `protobuf:"varint,9,opt,name=is_alive,json=isAlive,proto3" json:"is_alive,omitempty"`
	RefreshInterval             uint32                         `protobuf:"varint,3,opt,name=refresh_interval,json=refreshInterval,proto3" json:"refresh_interval,omitempty"`
	Id                          uint32                         `protobuf:"varint,13,opt,name=id,proto3" json:"id,omitempty"`
	Level                       uint32                         `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	BossChestNum                uint32                         `protobuf:"varint,1,opt,name=boss_chest_num,json=bossChestNum,proto3" json:"boss_chest_num,omitempty"`
	WeeklyBossResinDiscountInfo *WeeklyBossResinDiscountInfo   `protobuf:"bytes,12,opt,name=weekly_boss_resin_discount_info,json=weeklyBossResinDiscountInfo,proto3" json:"weekly_boss_resin_discount_info,omitempty"`
	MonsterId                   uint32                         `protobuf:"varint,301,opt,name=monster_id,json=monsterId,proto3" json:"monster_id,omitempty"`
	Pos                         *Vector                        `protobuf:"bytes,14,opt,name=pos,proto3" json:"pos,omitempty"`
	Resin                       uint32                         `protobuf:"varint,8,opt,name=resin,proto3" json:"resin,omitempty"`
	MaxBossChestNum             uint32                         `protobuf:"varint,4,opt,name=max_boss_chest_num,json=maxBossChestNum,proto3" json:"max_boss_chest_num,omitempty"`
	NextRefreshTime             uint32                         `protobuf:"varint,11,opt,name=next_refresh_time,json=nextRefreshTime,proto3" json:"next_refresh_time,omitempty"`
	GroupId                     uint32                         `protobuf:"varint,285,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	SceneId                     uint32                         `protobuf:"varint,10,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	IsAreaLocked                bool                           `protobuf:"varint,15,opt,name=is_area_locked,json=isAreaLocked,proto3" json:"is_area_locked,omitempty"`
	LockState                   InvestigationMonster_LockState `protobuf:"varint,2,opt,name=lock_state,json=lockState,proto3,enum=proto.InvestigationMonster_LockState" json:"lock_state,omitempty"`
	NextBossChestRefreshTime    uint32                         `protobuf:"varint,7,opt,name=next_boss_chest_refresh_time,json=nextBossChestRefreshTime,proto3" json:"next_boss_chest_refresh_time,omitempty"`
	CityId                      uint32                         `protobuf:"varint,6,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
}

func (x *InvestigationMonster) Reset() {
	*x = InvestigationMonster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_investigation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvestigationMonster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvestigationMonster) ProtoMessage() {}

func (x *InvestigationMonster) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_investigation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvestigationMonster.ProtoReflect.Descriptor instead.
func (*InvestigationMonster) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_investigation_proto_rawDescGZIP(), []int{8}
}

func (x *InvestigationMonster) GetIsAlive() bool {
	if x != nil {
		return x.IsAlive
	}
	return false
}

func (x *InvestigationMonster) GetRefreshInterval() uint32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *InvestigationMonster) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InvestigationMonster) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *InvestigationMonster) GetBossChestNum() uint32 {
	if x != nil {
		return x.BossChestNum
	}
	return 0
}

func (x *InvestigationMonster) GetWeeklyBossResinDiscountInfo() *WeeklyBossResinDiscountInfo {
	if x != nil {
		return x.WeeklyBossResinDiscountInfo
	}
	return nil
}

func (x *InvestigationMonster) GetMonsterId() uint32 {
	if x != nil {
		return x.MonsterId
	}
	return 0
}

func (x *InvestigationMonster) GetPos() *Vector {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *InvestigationMonster) GetResin() uint32 {
	if x != nil {
		return x.Resin
	}
	return 0
}

func (x *InvestigationMonster) GetMaxBossChestNum() uint32 {
	if x != nil {
		return x.MaxBossChestNum
	}
	return 0
}

func (x *InvestigationMonster) GetNextRefreshTime() uint32 {
	if x != nil {
		return x.NextRefreshTime
	}
	return 0
}

func (x *InvestigationMonster) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *InvestigationMonster) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *InvestigationMonster) GetIsAreaLocked() bool {
	if x != nil {
		return x.IsAreaLocked
	}
	return false
}

func (x *InvestigationMonster) GetLockState() InvestigationMonster_LockState {
	if x != nil {
		return x.LockState
	}
	return InvestigationMonster_LOCK_NONE
}

func (x *InvestigationMonster) GetNextBossChestRefreshTime() uint32 {
	if x != nil {
		return x.NextBossChestRefreshTime
	}
	return 0
}

func (x *InvestigationMonster) GetCityId() uint32 {
	if x != nil {
		return x.CityId
	}
	return 0
}

type GetInvestigationMonsterRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterList []*InvestigationMonster `protobuf:"bytes,10,rep,name=monster_list,json=monsterList,proto3" json:"monster_list,omitempty"`
	Retcode     int32                   `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	IsForMark   bool                    `protobuf:"varint,2,opt,name=is_for_mark,json=isForMark,proto3" json:"is_for_mark,omitempty"`
}

func (x *GetInvestigationMonsterRsp) Reset() {
	*x = GetInvestigationMonsterRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_investigation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInvestigationMonsterRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvestigationMonsterRsp) ProtoMessage() {}

func (x *GetInvestigationMonsterRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_investigation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvestigationMonsterRsp.ProtoReflect.Descriptor instead.
func (*GetInvestigationMonsterRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_investigation_proto_rawDescGZIP(), []int{9}
}

func (x *GetInvestigationMonsterRsp) GetMonsterList() []*InvestigationMonster {
	if x != nil {
		return x.MonsterList
	}
	return nil
}

func (x *GetInvestigationMonsterRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GetInvestigationMonsterRsp) GetIsForMark() bool {
	if x != nil {
		return x.IsForMark
	}
	return false
}

type PlayerInvestigationNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestigationList []*Investigation `protobuf:"bytes,1,rep,name=investigation_list,json=investigationList,proto3" json:"investigation_list,omitempty"`
}

func (x *PlayerInvestigationNotify) Reset() {
	*x = PlayerInvestigationNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_investigation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInvestigationNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInvestigationNotify) ProtoMessage() {}

func (x *PlayerInvestigationNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_investigation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInvestigationNotify.ProtoReflect.Descriptor instead.
func (*PlayerInvestigationNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_investigation_proto_rawDescGZIP(), []int{10}
}

func (x *PlayerInvestigationNotify) GetInvestigationList() []*Investigation {
	if x != nil {
		return x.InvestigationList
	}
	return nil
}

type PlayerInvestigationTargetNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestigationTargetList []*InvestigationTarget `protobuf:"bytes,1,rep,name=investigation_target_list,json=investigationTargetList,proto3" json:"investigation_target_list,omitempty"`
}

func (x *PlayerInvestigationTargetNotify) Reset() {
	*x = PlayerInvestigationTargetNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_investigation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInvestigationTargetNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInvestigationTargetNotify) ProtoMessage() {}

func (x *PlayerInvestigationTargetNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_investigation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInvestigationTargetNotify.ProtoReflect.Descriptor instead.
func (*PlayerInvestigationTargetNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_investigation_proto_rawDescGZIP(), []int{11}
}

func (x *PlayerInvestigationTargetNotify) GetInvestigationTargetList() []*InvestigationTarget {
	if x != nil {
		return x.InvestigationTargetList
	}
	return nil
}

type MarkTargetInvestigationMonsterNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId                uint32 `protobuf:"varint,11,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	MonsterId              uint32 `protobuf:"varint,4,opt,name=monster_id,json=monsterId,proto3" json:"monster_id,omitempty"`
	GroupId                uint32 `protobuf:"varint,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	InvestigationMonsterId uint32 `protobuf:"varint,12,opt,name=investigation_monster_id,json=investigationMonsterId,proto3" json:"investigation_monster_id,omitempty"`
}

func (x *MarkTargetInvestigationMonsterNotify) Reset() {
	*x = MarkTargetInvestigationMonsterNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_investigation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkTargetInvestigationMonsterNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkTargetInvestigationMonsterNotify) ProtoMessage() {}

func (x *MarkTargetInvestigationMonsterNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_investigation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkTargetInvestigationMonsterNotify.ProtoReflect.Descriptor instead.
func (*MarkTargetInvestigationMonsterNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_investigation_proto_rawDescGZIP(), []int{12}
}

func (x *MarkTargetInvestigationMonsterNotify) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *MarkTargetInvestigationMonsterNotify) GetMonsterId() uint32 {
	if x != nil {
		return x.MonsterId
	}
	return 0
}

func (x *MarkTargetInvestigationMonsterNotify) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *MarkTargetInvestigationMonsterNotify) GetInvestigationMonsterId() uint32 {
	if x != nil {
		return x.InvestigationMonsterId
	}
	return 0
}

type InvestigationMonsterUpdateNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestigationMonster *InvestigationMonster `protobuf:"bytes,5,opt,name=investigation_monster,json=investigationMonster,proto3" json:"investigation_monster,omitempty"`
}

func (x *InvestigationMonsterUpdateNotify) Reset() {
	*x = InvestigationMonsterUpdateNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_investigation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvestigationMonsterUpdateNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvestigationMonsterUpdateNotify) ProtoMessage() {}

func (x *InvestigationMonsterUpdateNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_investigation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvestigationMonsterUpdateNotify.ProtoReflect.Descriptor instead.
func (*InvestigationMonsterUpdateNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_investigation_proto_rawDescGZIP(), []int{13}
}

func (x *InvestigationMonsterUpdateNotify) GetInvestigationMonster() *InvestigationMonster {
	if x != nil {
		return x.InvestigationMonster
	}
	return nil
}

type InvestigationQuestDailyNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InvestigationQuestDailyNotify) Reset() {
	*x = InvestigationQuestDailyNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_investigation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvestigationQuestDailyNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvestigationQuestDailyNotify) ProtoMessage() {}

func (x *InvestigationQuestDailyNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_investigation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvestigationQuestDailyNotify.ProtoReflect.Descriptor instead.
func (*InvestigationQuestDailyNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_investigation_proto_rawDescGZIP(), []int{14}
}

type InvestigationReadQuestDailyNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InvestigationReadQuestDailyNotify) Reset() {
	*x = InvestigationReadQuestDailyNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_investigation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvestigationReadQuestDailyNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvestigationReadQuestDailyNotify) ProtoMessage() {}

func (x *InvestigationReadQuestDailyNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_investigation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvestigationReadQuestDailyNotify.ProtoReflect.Descriptor instead.
func (*InvestigationReadQuestDailyNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_investigation_proto_rawDescGZIP(), []int{15}
}

var File_cmd_cmd_investigation_proto protoreflect.FileDescriptor

var file_cmd_cmd_investigation_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x6d, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xdb, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x45, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x03,
	0x22, 0x9d, 0x02, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x03,
	0x22, 0xbf, 0x01, 0x0a, 0x20, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x43, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x19, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x17, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x2c, 0x0a, 0x1a, 0x54, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x46, 0x0a, 0x1a, 0x54, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3d, 0x0a, 0x20, 0x54, 0x61, 0x6b, 0x65,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x20, 0x54, 0x61, 0x6b, 0x65, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x5e, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x20,
	0x0a, 0x0c, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x72, 0x6b,
	0x22, 0xea, 0x05, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41,
	0x6c, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62,
	0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x68, 0x0a, 0x1f, 0x77,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x6e,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x65,
	0x6b, 0x6c, 0x79, 0x42, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x73, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1b, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79,
	0x42, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x73, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x69, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x73, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x12,
	0x6d, 0x61, 0x78, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x42, 0x6f, 0x73,
	0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x9d, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x69, 0x73, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x12, 0x44, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18,
	0x6e, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x22, 0x2a, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0d,
	0x0a, 0x09, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x22, 0x96, 0x01,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0c,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x0b, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x46,
	0x6f, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x22, 0x60, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x43, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x79, 0x0a, 0x1f, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x56, 0x0a, 0x19, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x17, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x24, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x20, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x50, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x52, 0x14, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x22, 0x1f, 0x0a, 0x1d, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x22, 0x23, 0x0a, 0x21, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x79, 0x76, 0x61, 0x74, 0x2d, 0x68, 0x65, 0x6c,
	0x70, 0x65, 0x72, 0x2f, 0x68, 0x6b, 0x34, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cmd_cmd_investigation_proto_rawDescOnce sync.Once
	file_cmd_cmd_investigation_proto_rawDescData = file_cmd_cmd_investigation_proto_rawDesc
)

func file_cmd_cmd_investigation_proto_rawDescGZIP() []byte {
	file_cmd_cmd_investigation_proto_rawDescOnce.Do(func() {
		file_cmd_cmd_investigation_proto_rawDescData = protoimpl.X.CompressGZIP(file_cmd_cmd_investigation_proto_rawDescData)
	})
	return file_cmd_cmd_investigation_proto_rawDescData
}

var file_cmd_cmd_investigation_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_cmd_cmd_investigation_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_cmd_cmd_investigation_proto_goTypes = []interface{}{
	(Investigation_State)(0),                     // 0: proto.Investigation.State
	(InvestigationTarget_State)(0),               // 1: proto.InvestigationTarget.State
	(InvestigationMonster_LockState)(0),          // 2: proto.InvestigationMonster.LockState
	(*Investigation)(nil),                        // 3: proto.Investigation
	(*InvestigationTarget)(nil),                  // 4: proto.InvestigationTarget
	(*PlayerInvestigationAllInfoNotify)(nil),     // 5: proto.PlayerInvestigationAllInfoNotify
	(*TakeInvestigationRewardReq)(nil),           // 6: proto.TakeInvestigationRewardReq
	(*TakeInvestigationRewardRsp)(nil),           // 7: proto.TakeInvestigationRewardRsp
	(*TakeInvestigationTargetRewardReq)(nil),     // 8: proto.TakeInvestigationTargetRewardReq
	(*TakeInvestigationTargetRewardRsp)(nil),     // 9: proto.TakeInvestigationTargetRewardRsp
	(*GetInvestigationMonsterReq)(nil),           // 10: proto.GetInvestigationMonsterReq
	(*InvestigationMonster)(nil),                 // 11: proto.InvestigationMonster
	(*GetInvestigationMonsterRsp)(nil),           // 12: proto.GetInvestigationMonsterRsp
	(*PlayerInvestigationNotify)(nil),            // 13: proto.PlayerInvestigationNotify
	(*PlayerInvestigationTargetNotify)(nil),      // 14: proto.PlayerInvestigationTargetNotify
	(*MarkTargetInvestigationMonsterNotify)(nil), // 15: proto.MarkTargetInvestigationMonsterNotify
	(*InvestigationMonsterUpdateNotify)(nil),     // 16: proto.InvestigationMonsterUpdateNotify
	(*InvestigationQuestDailyNotify)(nil),        // 17: proto.InvestigationQuestDailyNotify
	(*InvestigationReadQuestDailyNotify)(nil),    // 18: proto.InvestigationReadQuestDailyNotify
	(*WeeklyBossResinDiscountInfo)(nil),          // 19: proto.WeeklyBossResinDiscountInfo
	(*Vector)(nil),                               // 20: proto.Vector
}
var file_cmd_cmd_investigation_proto_depIdxs = []int32{
	0,  // 0: proto.Investigation.state:type_name -> proto.Investigation.State
	1,  // 1: proto.InvestigationTarget.state:type_name -> proto.InvestigationTarget.State
	3,  // 2: proto.PlayerInvestigationAllInfoNotify.investigation_list:type_name -> proto.Investigation
	4,  // 3: proto.PlayerInvestigationAllInfoNotify.investigation_target_list:type_name -> proto.InvestigationTarget
	19, // 4: proto.InvestigationMonster.weekly_boss_resin_discount_info:type_name -> proto.WeeklyBossResinDiscountInfo
	20, // 5: proto.InvestigationMonster.pos:type_name -> proto.Vector
	2,  // 6: proto.InvestigationMonster.lock_state:type_name -> proto.InvestigationMonster.LockState
	11, // 7: proto.GetInvestigationMonsterRsp.monster_list:type_name -> proto.InvestigationMonster
	3,  // 8: proto.PlayerInvestigationNotify.investigation_list:type_name -> proto.Investigation
	4,  // 9: proto.PlayerInvestigationTargetNotify.investigation_target_list:type_name -> proto.InvestigationTarget
	11, // 10: proto.InvestigationMonsterUpdateNotify.investigation_monster:type_name -> proto.InvestigationMonster
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_cmd_cmd_investigation_proto_init() }
func file_cmd_cmd_investigation_proto_init() {
	if File_cmd_cmd_investigation_proto != nil {
		return
	}
	file_define_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cmd_cmd_investigation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Investigation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_investigation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvestigationTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_investigation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInvestigationAllInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_investigation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeInvestigationRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_investigation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeInvestigationRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_investigation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeInvestigationTargetRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_investigation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeInvestigationTargetRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_investigation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInvestigationMonsterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_investigation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvestigationMonster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_investigation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInvestigationMonsterRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_investigation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInvestigationNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_investigation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInvestigationTargetNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_investigation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkTargetInvestigationMonsterNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_investigation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvestigationMonsterUpdateNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_investigation_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvestigationQuestDailyNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_investigation_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvestigationReadQuestDailyNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cmd_cmd_investigation_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cmd_cmd_investigation_proto_goTypes,
		DependencyIndexes: file_cmd_cmd_investigation_proto_depIdxs,
		EnumInfos:         file_cmd_cmd_investigation_proto_enumTypes,
		MessageInfos:      file_cmd_cmd_investigation_proto_msgTypes,
	}.Build()
	File_cmd_cmd_investigation_proto = out.File
	file_cmd_cmd_investigation_proto_rawDesc = nil
	file_cmd_cmd_investigation_proto_goTypes = nil
	file_cmd_cmd_investigation_proto_depIdxs = nil
}
