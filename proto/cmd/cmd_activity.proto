syntax = "proto3";

package proto;

option go_package = "github.com/teyvat-helper/hk4e-proto/pb";

import "define.proto";
import "cmd/cmd_gallery.proto";
import "cmd/cmd_ugc.proto";
import "cmd/cmd_multistage_play.proto";

enum RogueCellState {
  ROGUE_CELL_NONE = 0;
  ROGUE_CELL_BATTLE = 1;
  ROGUE_CELL_SUCCESS = 2;
  ROGUE_CELL_FINISH = 3;
  ROGUE_CELL_TAKEN_CHEST = 4;
}

enum RogueEliteCellDifficultyType {
  ROGUE_ELITE_NORMAL = 0;
  ROGUE_ELITE_HARD = 1;
}

enum RogueDiaryAvatarDisableStatus {
  ROGUE_DIARY_AVATAR_DISABLE_NONE = 0;
  ROGUE_DIARY_AVATAR_DISABLE_DEATH = 1;
  ROGUE_DIARY_AVATAR_DISABLE_TIRED = 2;
  ROGUE_DIARY_AVATAR_DISABLE_DUPLICATED = 3;
}

enum ActivityPushTipsState {
  ACTIVITY_PUSH_TIPS_STATE_NONE = 0;
  ACTIVITY_PUSH_TIPS_STATE_START = 1;
  ACTIVITY_PUSH_TIPS_STATE_READ = 2;
}

message GetActivityScheduleReq {
}

message ActivityScheduleInfo {
  uint32 schedule_id = 13;
  bool is_open = 2;
  uint32 activity_id = 14;
  uint32 end_time = 1;
  uint32 begin_time = 10;
}

message GetActivityScheduleRsp {
  repeated ActivityScheduleInfo activity_schedule_list = 9;
  int32 retcode = 13;
  uint32 remain_fly_sea_lamp_num = 4;
}

message GetActivityInfoReq {
  repeated uint32 activity_id_list = 4;
}

message ActivityInfo {
  bool is_finished = 6;
  uint32 activity_type = 4;
  uint32 begin_time = 8;
  repeated uint32 taken_reward_list = 329;
  bool is_hidden = 919;
  bool is_quick_open = 1449;
  repeated uint32 meet_cond_list = 10;
  map<uint32, uint32> activity_coin_map = 682;
  bool is_banner_cleared = 102;
  uint32 cur_score = 1906;
  uint32 first_day_start_time = 592;
  uint32 activity_id = 12;
  bool is_play_open_anim = 13;
  uint32 end_time = 5;
  uint32 score_limit = 1958;
  map<uint32, uint32> wish_gift_num_map = 1399;
  uint32 selected_avatar_reward_id = 1290;
  bool is_common_content_closed = 1963;
  repeated uint32 expire_cond_list = 3;
  repeated ActivityPushTipsData activity_push_tips_data_list = 864;
  repeated ActivityWatcherInfo watcher_info_list = 2;
  uint32 schedule_id = 15;
  bool is_starting = 9;
  oneof detail {
    SeaLampActivityDetailInfo sam_lamp_info = 7;
    CrucibleActivityDetailInfo crucible_info = 14;
    SalesmanActivityDetailInfo salesman_info = 11;
    TrialAvatarActivityDetailInfo trial_avatar_info = 1;
    DeliveryActivityDetailInfo delivery_info = 1092;
    AsterActivityDetailInfo aster_info = 557;
    FlightActivityDetailInfo flight_info = 1365;
    DragonSpineActivityDetailInfo dragon_spine_info = 1727;
    EffigyActivityDetailInfo effigy_info = 391;
    TreasureMapActivityDetailInfo treasure_map_info = 1114;
    BlessingActivityDetailInfo blessing_info = 1869;
    SeaLampActivityInfo sea_lamp_info = 494;
    ExpeditionActivityDetailInfo expedition_info = 202;
    ArenaChallengeActivityDetailInfo arena_challenge_info = 859;
    FleurFairActivityDetailInfo fleur_fair_info = 857;
    WaterSpiritActivityDetailInfo water_spirit_info = 1675;
    ChannelerSlabActivityDetailInfo challneler_slab_info = 1015;
    MistTrialActivityDetailInfo mist_trial_activity_info = 156;
    HideAndSeekActivityDetailInfo hide_and_seek_info = 427;
    FindHilichurlDetailInfo find_hilichurl_info = 1411;
    SummerTimeDetailInfo summer_time_info = 1372;
    BuoyantCombatDetailInfo buoyant_combat_info = 1842;
    EchoShellDetailInfo echo_shell_info = 1113;
    BounceConjuringActivityDetailInfo bounce_conjuring_info = 767;
    BlitzRushActivityDetailInfo blitz_rush_info = 794;
    ChessActivityDetailInfo chess_info = 927;
    SumoActivityDetailInfo sumo_info = 1261;
    MoonfinTrialActivityDetailInfo moonfin_trial_info = 1588;
    LunaRiteDetailInfo luna_rite_info = 814;
    PlantFlowerActivityDetailInfo plant_flower_info = 54;
    MusicGameActivityDetailInfo music_game_info = 460;
    RoguelikeDungeonActivityDetailInfo roguelike_dungoen_info = 219;
    DigActivityDetailInfo dig_info = 403;
    HachiActivityDetailInfo hachi_info = 491;
    WinterCampActivityDetailInfo winter_camp_info = 1083;
    PotionActivityDetailInfo potion_info = 1273;
    TanukiTravelActivityDetailInfo tanuki_travel_activity_info = 1796;
    LanternRiteActivityDetailInfo lantern_rite_activity_info = 1876;
    MichiaeMatsuriActivityDetailInfo michiae_matsuri_info = 194;
    BartenderActivityDetailInfo bartender_info = 1725;
    UgcActivityDetailInfo ugc_info = 703;
    CrystalLinkActivityDetailInfo crystal_link_info = 1226;
    IrodoriActivityDetailInfo irodori_info = 750;
    PhotoActivityDetailInfo photo_info = 328;
    SpiceActivityDetailInfo spice_info = 1891;
    GachaActivityDetailInfo gacha_info = 825;
    LuminanceStoneChallengeActivityDetailInfo luminance_stone_challenge_info = 1308;
    RogueDiaryActivityDetailInfo rogue_diary_info = 812;
    SummerTimeV2DetailInfo summer_time_v2_info = 622;
    IslandPartyDetailInfo island_party_info = 1885;
    GearActivityDetailInfo gear_info = 722;
    GravenInnocenceDetailInfo graven_innocence_info = 1911;
    InstableSprayDetailInfo instable_spray_info = 1043;
    MuqadasPotionActivityDetailInfo muqadas_potion_info = 1157;
    TreasureSeelieActivityDetailInfo treasure_seelie_info = 966;
    RockBoardExploreDetailInfo rock_board_explore_info = 1078;
    VintageActivityDetailInfo vintage_info = 445;
    WindFieldDetailInfo wind_field_info = 352;
    FungusFighterDetailInfo fungus_fighter_info = 490;
    CharAmusementDetailInfo char_amusement_info = 1496;
    EffigyChallengeV2DetailInfo effigy_challenge_info = 1025;
    CoinCollectDetailInfo coin_collect_info = 1679;
    BrickBreakerDetailInfo brick_breaker_info = 1369;
    DuelHeartDetailInfo duel_heart_info = 1173;
    SeaLampV3DetailInfo sea_lamp_v3_info = 251;
    TeamChainDetailInfo team_chain_info = 1547;
    ElectroherculesBattleDetailInfo electrohercules_battle_info = 1630;
  }
}

message GetActivityInfoRsp {
  int32 retcode = 13;
  repeated ActivityInfo activity_info_list = 5;
  repeated uint32 activated_sale_id_list = 11;
  repeated Uint32Pair disable_transfer_point_interaction_list = 10;
}

message ActivityPlayOpenAnimNotify {
  uint32 activity_id = 8;
}

message ActivityInfoNotify {
  ActivityInfo activity_info = 9;
}

message ActivityScheduleInfoNotify {
  repeated ActivityScheduleInfo activity_schedule_list = 12;
  uint32 remain_fly_sea_lamp_num = 6;
}

message ActivityWatcherInfo {
  bool is_taken_reward = 8;
  uint32 cur_progress = 2;
  uint32 total_progress = 4;
  uint32 watcher_id = 5;
}

message ActivityTakeWatcherRewardReq {
  uint32 activity_id = 4;
  uint32 watcher_id = 14;
}

message ActivityTakeWatcherRewardRsp {
  uint32 activity_id = 14;
  uint32 watcher_id = 7;
  int32 retcode = 9;
}

message ActivityUpdateWatcherNotify {
  ActivityWatcherInfo watcher_info = 2;
  uint32 activity_id = 1;
}

message ActivitySelectAvatarCardReq {
  uint32 activity_id = 15;
  uint32 reward_id = 10;
}

message ActivitySelectAvatarCardRsp {
  uint32 activity_id = 4;
  int32 retcode = 3;
  uint32 reward_id = 9;
}

message ActivityCoinInfoNotify {
  uint32 schedule_id = 8;
  uint32 activity_id = 10;
  map<uint32, uint32> activity_coin_map = 2;
}

message SeaLampActivityDetailInfo {
  uint32 phase_id = 14;
  repeated uint32 taken_phase_reward_list = 1;
  repeated uint32 taken_contribution_reward_list = 7;
  uint32 progress = 8;
  uint32 contribution = 15;
  uint32 factor = 13;
  uint32 days = 4;
}

message SeaLampFlyLampReq {
  uint32 item_id = 9;
  int32 param = 10;
  Vector pos = 7;
  uint32 item_num = 5;
}

message SeaLampFlyLampRsp {
  uint32 item_num = 9;
  uint32 item_id = 15;
  int32 retcode = 14;
}

message SeaLampTakeContributionRewardReq {
  uint32 activity_id = 4;
  uint32 config_id = 10;
}

message SeaLampTakeContributionRewardRsp {
  uint32 config_id = 9;
  int32 retcode = 7;
}

message SeaLampTakePhaseRewardReq {
  uint32 phase_id = 12;
  uint32 activity_id = 11;
}

message SeaLampTakePhaseRewardRsp {
  uint32 phase_id = 2;
  int32 retcode = 6;
}

message SeaLampContributeItemReq {
  uint32 activity_id = 8;
  repeated ItemParam item_list = 1;
}

message SeaLampContributeItemRsp {
  uint32 add_contribution = 7;
  uint32 add_progress = 1;
  uint32 total_contribution = 14;
  int32 retcode = 6;
}

message SeaLampSectionInfo {
  uint32 section_id = 11;
}

message SeaLampActivityInfo {
  bool is_mechanicus_open = 14;
  uint32 day_index = 1;
  repeated SeaLampSectionInfo section_info_list = 6;
  uint32 popularity = 10;
  uint32 sea_lamp_coin = 15;
  uint32 first_day_start_time = 11;
  uint32 mechanicus_id = 9;
  bool is_mechanicus_feature_close = 12;
  bool is_content_closed = 5;
}

message SeaLampFlyLampNotify {
  Vector pos = 11;
  uint32 item_num = 10;
  uint32 item_id = 7;
  int32 param = 5;
}

message SeaLampCoinNotify {
  uint32 sea_lamp_coin = 8;
}

message SeaLampPopularityNotify {
  uint32 popularity = 4;
}

message AnnounceData {
  string count_down_text = 9;
  string center_system_text = 8;
  uint32 count_down_frequency = 1;
  uint32 config_id = 7;
  uint32 begin_time = 4;
  uint32 center_system_frequency = 11;
  string dungeon_confirm_text = 2;
  bool is_center_system_last_5_every_minutes = 14;
  uint32 end_time = 10;
}

message LoadActivityTerrainNotify {
  uint32 activity_id = 3;
}

message ServerAnnounceNotify {
  repeated AnnounceData announce_data_list = 11;
}

message ServerAnnounceRevokeNotify {
  repeated uint32 config_id_list = 15;
}

message ActivityBannerNotify {
  uint32 schedule_id = 1;
  uint32 activity_id = 3;
}

message ActivityBannerClearReq {
  uint32 schedule_id = 15;
  uint32 activity_id = 12;
}

message ActivityBannerClearRsp {
  uint32 activity_id = 4;
  int32 retcode = 6;
  uint32 schedule_id = 11;
}

message SalesmanActivityDetailInfo {
  uint32 special_reward_preview_id = 3;
  SalesmanStatusType status = 4;
  uint32 last_deliver_time = 2;
  map<uint32, uint32> selected_reward_id_map = 5;
  uint32 deliver_count = 11;
  bool is_has_taken_special_reward = 7;
  uint32 day_index = 12;
  uint32 cond_day_count = 6;
  uint32 day_reward_id = 9;
  bool is_today_has_delivered = 13;
}

message SalesmanDeliverItemReq {
  uint32 schedule_id = 4;
}

message SalesmanDeliverItemRsp {
  uint32 schedule_id = 9;
  int32 retcode = 15;
}

message SalesmanTakeRewardReq {
  uint32 position = 8;
  uint32 schedule_id = 7;
}

message SalesmanTakeRewardRsp {
  uint32 position = 13;
  uint32 schedule_id = 7;
  uint32 reward_id = 9;
  int32 retcode = 11;
}

message ActivityCondStateChangeNotify {
  repeated uint32 activated_sale_id_list = 9;
  uint32 activity_id = 4;
  uint32 schedule_id = 5;
  repeated uint32 expire_cond_list = 11;
  repeated Uint32Pair disable_transfer_point_interaction_list = 12;
  repeated uint32 meet_cond_list = 1;
}

message SalesmanTakeSpecialRewardReq {
  uint32 schedule_id = 13;
}

message SalesmanTakeSpecialRewardRsp {
  int32 retcode = 12;
  uint32 schedule_id = 5;
}

message GetAuthSalesmanInfoReq {
  uint32 schedule_id = 8;
}

message GetAuthSalesmanInfoRsp {
  uint32 day_reward_id = 5;
  int32 retcode = 6;
  uint32 schedule_id = 11;
}

message TrialAvatarActivityRewardDetailInfo {
  bool passed_dungeon = 2;
  uint32 trial_avatar_index_id = 4;
  bool received_reward = 5;
  uint32 reward_id = 7;
}

message TrialAvatarActivityDetailInfo {
  repeated TrialAvatarActivityRewardDetailInfo reward_info_list = 13;
}

message EnterTrialAvatarActivityDungeonReq {
  uint32 enter_point_id = 10;
  uint32 trial_avatar_index_id = 5;
  uint32 activity_id = 14;
}

message EnterTrialAvatarActivityDungeonRsp {
  int32 retcode = 11;
  uint32 trial_avatar_index_id = 13;
  uint32 activity_id = 10;
}

message ReceivedTrialAvatarActivityRewardReq {
  uint32 trial_avatar_index_id = 4;
}

message ReceivedTrialAvatarActivityRewardRsp {
  uint32 activity_id = 13;
  int32 retcode = 3;
  uint32 trial_avatar_index_id = 9;
}

message TrialAvatarFirstPassDungeonNotify {
  uint32 trial_avatar_index_id = 10;
}

message TrialAvatarInDungeonIndexNotify {
  uint32 trial_avatar_index_id = 14;
}

message CrucibleBattleUidInfo {
  ProfilePicture profile_picture = 15;
  uint32 uid = 4;
  string nickname = 5;
  string online_id = 13;
  uint32 icon = 11;
}

message CrucibleActivityDetailInfo {
  uint32 cost_time = 5;
  uint32 battle_world_level = 12;
  repeated CrucibleBattleUidInfo uid_info_list = 3;
  Vector pos = 9;
}

message DeliveryActivityDetailInfo {
  uint32 day_index = 14;
  bool is_taken_reward = 13;
  repeated uint32 finished_delivery_quest_index = 4;
}

message TakeDeliveryDailyRewardReq {
  uint32 schedule_id = 9;
}

message TakeDeliveryDailyRewardRsp {
  uint32 schedule_id = 5;
  int32 retcode = 7;
}

message FinishDeliveryNotify {
  uint32 finished_quest_index = 1;
  uint32 schedule_id = 10;
  uint32 day_index = 12;
}

message AsterLittleDetailInfo {
  bool is_open = 4;
  AsterLittleStageState stage_state = 7;
  uint32 stage_id = 1;
  uint32 begin_time = 6;
  uint32 stage_begin_time = 5;
}

message AsterMidCampInfo {
  Vector pos = 3;
  uint32 camp_id = 8;
}

message AsterMidDetailInfo {
  uint32 begin_time = 10;
  repeated AsterMidCampInfo camp_list = 7;
  bool is_open = 4;
  uint32 collect_count = 11;
}

message AsterLargeDetailInfo {
  bool is_open = 3;
  uint32 begin_time = 13;
}

message AsterProgressDetailInfo {
  uint32 last_auto_add_time = 3;
  uint32 count = 1;
}

message AsterActivityDetailInfo {
  AsterLittleDetailInfo aster_little = 7;
  uint32 aster_credit = 14;
  AsterLargeDetailInfo aster_large = 9;
  bool is_special_reward_taken = 1;
  bool is_content_closed = 13;
  uint32 content_close_time = 8;
  uint32 aster_token = 5;
  AsterMidDetailInfo aster_mid = 6;
  AsterProgressDetailInfo aster_progress = 2;
}

message SelectAsterMidDifficultyReq {
  uint32 gadget_entity_id = 13;
  uint32 schedule_id = 1;
  uint32 difficulty_id = 5;
}

message SelectAsterMidDifficultyRsp {
  int32 retcode = 15;
  uint32 schedule_id = 2;
  uint32 gadget_entity_id = 5;
  uint32 difficulty_id = 14;
}

message AsterProgressInfoNotify {
  AsterProgressDetailInfo info = 1;
}

message AsterLittleInfoNotify {
  AsterLittleDetailInfo info = 1;
}

message AsterMidInfoNotify {
  AsterMidDetailInfo info = 4;
}

message AsterMiscInfoNotify {
  uint32 aster_token = 2;
  uint32 aster_credit = 15;
}

message TakeAsterSpecialRewardReq {
  uint32 schedule_id = 5;
}

message TakeAsterSpecialRewardRsp {
  int32 retcode = 12;
  uint32 schedule_id = 14;
}

message AsterLargeInfoNotify {
  AsterLargeDetailInfo info = 10;
}

message FlightDailyRecord {
  uint32 group_id = 4;
  bool is_touched = 1;
  repeated uint32 watcher_id_list = 11;
  uint32 best_score = 7;
  uint32 start_time = 3;
}

message FlightActivityDetailInfo {
  uint32 preview_reward_id = 15;
  uint32 min_open_player_level = 11;
  repeated FlightDailyRecord daily_record_list = 1;
}

message FlightActivitySettleNotify {
  bool is_new_record = 1;
  uint32 medal_level = 6;
  uint32 left_time = 13;
  uint32 collect_num = 9;
  uint32 total_num = 5;
  uint32 group_id = 8;
  uint32 score = 10;
  bool is_success = 4;
}

message FlightActivityRestartReq {
  uint32 group_id = 4;
  uint32 schedule_id = 10;
}

message FlightActivityRestartRsp {
  uint32 group_id = 11;
  uint32 schedule_id = 10;
  int32 retcode = 15;
}

message AsterMidCampInfoNotify {
  repeated AsterMidCampInfo camp_list = 5;
}

message DragonSpineActivityDetailInfo {
  bool is_content_closed = 10;
  repeated DragonSpineChapterInfo chapter_info_list = 4;
  uint32 weapon_enhance_level = 2;
  uint32 content_finish_time = 15;
  uint32 shimmering_essence = 13;
  uint32 warm_essence = 11;
  uint32 wondrous_essence = 7;
}

message DragonSpineChapterInfo {
  uint32 progress = 14;
  uint32 open_time = 6;
  bool is_open = 11;
  uint32 chapter_id = 9;
  uint32 finished_mission_num = 10;
}

message DragonSpineChapterOpenNotify {
  uint32 schedule_id = 12;
  uint32 chapter_id = 10;
}

message DragonSpineChapterProgressChangeNotify {
  uint32 schedule_id = 7;
  uint32 chapter_id = 11;
  uint32 cur_progress = 5;
}

message DragonSpineChapterFinishNotify {
  uint32 schedule_id = 13;
  uint32 chapter_id = 11;
  uint32 weapon_enhance_level = 14;
}

message DragonSpineCoinChangeNotify {
  uint32 shimmering_essence = 4;
  uint32 warm_essence = 13;
  uint32 schedule_id = 12;
  uint32 wondrous_essence = 11;
}

message ActivitySaleChangeNotify {
  uint32 sale_id = 5;
  bool is_close = 1;
}

message EffigyDailyInfo {
  uint32 challenge_max_score = 6;
  bool is_first_pass_reward_taken = 12;
  uint32 challenge_total_score = 15;
  uint32 challenge_id = 1;
  uint32 challenge_count = 3;
  uint32 day_index = 14;
  uint32 begin_time = 2;
}

message EffigyActivityDetailInfo {
  uint32 cur_score = 5;
  repeated EffigyDailyInfo daily_info_list = 14;
  uint32 last_difficulty_id = 9;
  repeated uint32 taken_reward_index_list = 2;
}

message StartEffigyChallengeReq {
  uint32 difficulty_id = 9;
  repeated uint32 condition_id_list = 6;
  uint32 challenge_id = 1;
  uint32 point_id = 12;
}

message StartEffigyChallengeRsp {
  repeated uint32 condition_id_list = 2;
  int32 retcode = 8;
  uint32 challenge_id = 15;
  uint32 difficulty_id = 10;
  uint32 point_id = 12;
}

message EffigyChallengeInfoNotify {
  uint32 difficulty_id = 9;
  repeated uint32 condition_id_list = 11;
  uint32 challenge_score = 14;
  uint32 challenge_id = 8;
}

message EffigyChallengeDungeonResultInfo {
  uint32 challenge_score = 7;
  bool is_in_time_limit = 8;
  uint32 challenge_id = 6;
  bool is_success = 15;
  uint32 challenge_max_score = 13;
}

message EffigyChallengeResultNotify {
  bool is_success = 5;
  uint32 challenge_max_score = 12;
  uint32 challenge_score = 3;
  uint32 challenge_id = 7;
}

message TakeEffigyFirstPassRewardReq {
  uint32 challenge_id = 6;
}

message TakeEffigyFirstPassRewardRsp {
  uint32 challenge_id = 2;
  int32 retcode = 7;
}

message TakeEffigyRewardReq {
  uint32 reward_index = 14;
}

message TakeEffigyRewardRsp {
  int32 retcode = 15;
  uint32 reward_index = 7;
}

message SelectEffigyChallengeConditionReq {
  uint32 difficulty_id = 15;
  uint32 challenge_id = 7;
  repeated uint32 condition_id_list = 9;
}

message SelectEffigyChallengeConditionRsp {
  repeated uint32 condition_id_list = 12;
  int32 retcode = 6;
  uint32 difficulty_id = 7;
  uint32 challenge_id = 2;
}

message RestartEffigyChallengeReq {
}

message RestartEffigyChallengeRsp {
  int32 retcode = 2;
}

message TreasureMapRegionInfo {
  uint32 start_time = 6;
  uint32 current_progress = 11;
  bool is_done_mp_spot = 3;
  uint32 scene_id = 2;
  uint32 goal_points = 12;
  bool is_find_mp_spot = 4;
  uint32 region_radius = 1;
  Vector region_center_pos = 9;
  uint32 region_id = 5;
}

message TreasureMapBonusChallengeInfo {
  bool is_done = 5;
  uint32 config_id = 10;
  bool is_active = 1;
  map<uint32, bool> fragment_map = 12;
  uint32 solution_id = 8;
}

message TreasureMapActivityDetailInfo {
  uint32 active_region_index = 1;
  repeated TreasureMapRegionInfo region_info_list = 6;
  bool is_mp_challenge_touched = 7;
  uint32 treasure_close_time = 10;
  repeated TreasureMapBonusChallengeInfo bonus_challenge_list = 5;
  uint32 currency_num = 2;
  uint32 preview_reward_id = 14;
  uint32 min_open_player_level = 8;
  uint32 total_mp_spot_num = 13;
}

message TreasureMapRegionInfoNotify {
  TreasureMapRegionInfo region_info = 14;
}

message TreasureMapCurrencyNotify {
  uint32 currency_num = 8;
}

message TreasureMapRegionActiveNotify {
  uint32 active_region_index = 14;
}

message TreasureMapMpChallengeNotify {
}

message TreasureMapBonusChallengeNotify {
  TreasureMapBonusChallengeInfo info = 5;
}

message TreasureMapGuideTaskDoneNotify {
}

message TreasureMapPreTaskDoneNotify {
}

message BlessingActivityDetailInfo {
  uint32 cur_day_scan_type = 9;
  bool is_content_closed = 11;
  map<uint32, uint32> pic_num_map = 15;
  uint32 content_close_time = 2;
  uint32 cur_day_scan_num = 4;
  uint32 redeem_reward_num = 1;
  bool is_activated = 13;
  uint32 next_refresh_time = 6;
}

message BlessingScanReq {
  uint32 entity_id = 11;
}

message BlessingScanRsp {
  uint32 scan_pic_id = 4;
  int32 retcode = 11;
  uint32 cur_day_scan_num = 1;
}

message BlessingRedeemRewardReq {
}

message BlessingRedeemRewardRsp {
  map<uint32, uint32> pic_num_map = 12;
  int32 retcode = 15;
}

message BlessingFriendPicData {
  map<uint32, uint32> pic_num_map = 4;
  uint32 avatar_id = 5;
  string remark_name = 11;
  string nickname = 14;
  string signature = 1;
  ProfilePicture profile_picture = 6;
  uint32 uid = 9;
}

message BlessingRecvPicRecord {
  string nickname = 1;
  string remark_name = 2;
  uint32 pic_id = 3;
  uint32 uid = 5;
  uint32 avatar_id = 6;
  string signature = 10;
  uint32 index = 14;
  bool is_recv = 7;
  ProfilePicture profile_picture = 9;
}

message BlessingGetFriendPicListReq {
}

message BlessingGetFriendPicListRsp {
  int32 retcode = 2;
  repeated BlessingFriendPicData friend_pic_data_list = 6;
}

message BlessingGiveFriendPicReq {
  uint32 uid = 11;
  uint32 pic_id = 3;
}

message BlessingGiveFriendPicRsp {
  uint32 pic_id = 10;
  int32 retcode = 11;
  uint32 uid = 13;
}

message BlessingAcceptGivePicReq {
  uint32 index = 9;
  uint32 uid = 1;
}

message BlessingAcceptGivePicRsp {
  uint32 pic_id = 1;
  int32 retcode = 13;
  uint32 index = 5;
  uint32 uid = 14;
}

message BlessingGetAllRecvPicRecordListReq {
}

message BlessingGetAllRecvPicRecordListRsp {
  repeated BlessingRecvPicRecord recv_pic_record_list = 15;
  int32 retcode = 9;
}

message BlessingRecvFriendPicNotify {
  uint32 uid = 15;
  uint32 pic_id = 5;
}

message BlessingAcceptAllGivePicReq {
}

message BlessingAcceptAllGivePicRsp {
  int32 retcode = 11;
  map<uint32, uint32> accept_pic_num_map = 14;
  repeated uint32 accept_index_list = 5;
}

message ExpeditionPathInfo {
  uint32 mark_id = 12;
  uint32 start_time = 9;
  uint32 assist_avatar_id = 7;
  float bonus_probability = 4;
  ExpeditionState state = 15;
  repeated uint32 avatar_id_list = 2;
  uint32 assist_costume_id = 5;
  uint32 path_id = 8;
  uint32 challenge_id = 11;
  uint32 assist_uid = 10;
}

message ExpeditionChallengeInfo {
  bool is_finished = 5;
  uint32 id = 11;
  uint32 open_time = 9;
}

message ExpeditionActivityDetailInfo {
  uint32 cur_challenge_id = 5;
  repeated ExpeditionChallengeInfo challenge_info_list = 10;
  uint32 expedition_count = 2;
  uint32 content_close_time = 4;
  bool is_content_closed = 8;
  repeated ExpeditionPathInfo path_info_list = 15;
}

message ExpeditionStartReq {
  repeated uint32 avatar_id_list = 1;
  uint32 assist_uid = 5;
  uint32 assist_avatar_id = 8;
  uint32 path_id = 7;
}

message ExpeditionStartRsp {
  uint32 assist_uid = 1;
  uint32 path_id = 7;
  repeated uint32 avatar_id_list = 4;
  int32 retcode = 12;
  uint32 assist_avatar_id = 2;
}

message ExpeditionRecallReq {
  uint32 path_id = 13;
}

message ExpeditionRecallRsp {
  uint32 path_id = 1;
  int32 retcode = 8;
}

message ExpeditionTakeRewardReq {
  uint32 path_id = 3;
}

message ExpeditionTakeRewardRsp {
  int32 retcode = 13;
  bool is_bonus = 11;
  uint32 reward_level = 1;
  uint32 path_id = 9;
}

message ExpeditionAssistInfo {
  string online_id = 14;
  uint32 assist_time = 1;
  uint32 costume_id = 6;
  string target_nick_name = 4;
  uint32 avatar_id = 12;
}

message GetExpeditionAssistInfoListReq {
}

message GetExpeditionAssistInfoListRsp {
  repeated ExpeditionAssistInfo assist_info_list = 6;
  int32 retcode = 7;
}

message SetCurExpeditionChallengeIdReq {
  uint32 id = 5;
}

message SetCurExpeditionChallengeIdRsp {
  uint32 id = 14;
  int32 retcode = 3;
}

message ExpeditionChallengeEnterRegionNotify {
  uint32 id = 5;
  bool is_puzzle_finished = 10;
}

message ExpeditionChallengeFinishedNotify {
  uint32 id = 13;
}

message WaterSpiritActivityDetailInfo {
  map<uint32, uint32> search_time_map = 9;
  uint32 region_search_id = 2;
  uint32 mp_play_id = 15;
}

message FleurFairChapterInfo {
  uint32 open_time = 15;
  uint32 chapter_id = 11;
}

message FleurFairBalloonInfo {
  uint32 best_score = 4;
}

message FleurFairFallInfo {
  uint32 best_score = 10;
}

message FleurFairMusicRecord {
  uint32 max_combo = 1;
  uint32 max_score = 11;
  bool is_unlock = 12;
}

message FleurFairMusicGameInfo {
  map<uint32, FleurFairMusicRecord> music_record_map = 10;
}

message FleurFairMinigameInfo {
  uint32 minigame_id = 13;
  bool is_open = 8;
  uint32 open_time = 15;
  oneof detail {
    FleurFairBalloonInfo balloon_info = 12;
    FleurFairFallInfo fall_info = 11;
    FleurFairMusicGameInfo music_info = 9;
  }
}

message FleurFairDungeonSectionInfo {
  uint32 section_id = 10;
  uint32 open_time = 13;
  bool is_open = 1;
}

message FleurFairActivityDetailInfo {
  bool is_content_closed = 4;
  uint32 dungeon_punish_over_time = 6;
  uint32 content_close_time = 15;
  uint32 obtained_token = 13;
  repeated FleurFairChapterInfo chapter_info_list = 14;
  map<uint32, FleurFairMinigameInfo> minigame_info_map = 9;
  map<uint32, FleurFairDungeonSectionInfo> dungeon_section_info_map = 3;
  bool is_dungeon_unlocked = 11;
}

message FleurFairBalloonSettleInfo {
  BalloonSettleInfo settle_info = 10;
  bool is_new_record = 7;
}

message FleurFairFallSettleInfo {
  FallSettleInfo settle_info = 4;
  bool is_new_record = 10;
}

message FleurFairBalloonSettleNotify {
  uint32 minigame_id = 9;
  map<uint32, FleurFairBalloonSettleInfo> settle_info_map = 15;
}

message FleurFairFallSettleNotify {
  uint32 minigame_id = 15;
  map<uint32, FleurFairFallSettleInfo> settle_info_map = 11;
}

message FleurFairMusicGameSettleReq {
  uint32 score = 3;
  uint32 combo = 6;
  uint32 correct_hit = 10;
  uint32 music_basic_id = 11;
}

message FleurFairMusicGameSettleRsp {
  bool is_unlock_next_level = 4;
  bool is_new_record = 12;
  int32 retcode = 5;
  uint32 music_basic_id = 9;
}

message FleurFairMusicGameStartReq {
  uint32 music_basic_id = 2;
}

message FleurFairMusicGameStartRsp {
  int32 retcode = 3;
  uint32 music_basic_id = 7;
}

message FleurFairReplayMiniGameReq {
  uint32 minigame_id = 5;
}

message FleurFairReplayMiniGameRsp {
  int32 retcode = 14;
  uint32 minigame_id = 8;
}

message ArenaChallengeMonsterLevel {
  uint32 arena_challenge_level = 7;
  uint32 arena_challenge_id = 15;
}

message ArenaChallengeActivityDetailInfo {
  bool is_finish_any_level = 14;
  map<uint32, uint32> level_open_time_map = 3;
  uint32 world_level = 15;
  repeated ArenaChallengeMonsterLevel level_list = 9;
}

message StartArenaChallengeLevelReq {
  uint32 arena_challenge_id = 4;
  uint32 gadget_entity_id = 5;
  uint32 arena_challenge_level = 2;
}

message StartArenaChallengeLevelRsp {
  uint32 arena_challenge_level = 1;
  int32 retcode = 9;
  uint32 gadget_entity_id = 3;
  uint32 arena_challenge_id = 6;
}

message ArenaChallengeChildChallengeInfo {
  uint32 challenge_id = 12;
  uint32 challenge_type = 5;
  uint32 challenge_index = 4;
  bool is_success = 7;
  bool is_settled = 11;
}

message ArenaChallengeFinishNotify {
  uint32 arena_challenge_level = 13;
  uint32 arena_challenge_id = 3;
  repeated ArenaChallengeChildChallengeInfo child_challenge_list = 2;
  bool is_success = 12;
}

message WaterSpritePhaseFinishNotify {
}

message ActivityTakeWatcherRewardBatchReq {
  repeated uint32 watcher_id_list = 11;
  uint32 activity_id = 3;
}

message ActivityTakeWatcherRewardBatchRsp {
  repeated uint32 watcher_id_list = 6;
  int32 retcode = 15;
  uint32 activity_id = 7;
  repeated ItemParam item_list = 1;
}

message ChannelerSlabCamp {
  uint32 reward_id = 11;
  Vector pos = 8;
  uint32 buff_num = 7;
  uint32 group_id = 3;
}

message ChannelerSlabChallenge {
  uint32 active_camp_index = 5;
  repeated ChannelerSlabCamp camp_list = 14;
}

message ChannelerSlabOneoffDungeon {
  bool is_done = 8;
  uint32 dungeon_id = 12;
  uint32 reward_id = 13;
}

message ChannelerSlabChallengeStage {
  uint32 open_time = 3;
  repeated ChannelerSlabChallenge challenge_list = 14;
  bool is_open = 7;
  uint32 stage_id = 9;
  ChannelerSlabOneoffDungeon dungeon_info = 13;
}

message ChannellerSlabBuffSchemeInfo {
  map<uint32, uint32> slot_map = 9;
  uint32 total_energy = 13;
  uint32 self_energy = 15;
}

message ChannellerSlabAssistInfo {
  uint32 uid = 10;
  uint32 avatar_level = 12;
  uint32 avatar_id = 6;
}

message ChannellerSlabBuffInfo {
  ChannellerSlabBuffSchemeInfo mp_buff_scheme_info = 6;
  repeated uint32 buff_id_list = 8;
  ChannellerSlabBuffSchemeInfo single_buff_scheme_info = 7;
  repeated ChannellerSlabAssistInfo assist_info_list = 15;
}

message ChannellerSlabLoopDungeonInfo {
  uint32 score = 7;
  uint32 dungeon_index = 4;
  uint32 open_time = 12;
  bool is_first_pass_reward_taken = 9;
  repeated uint32 last_condition_id_list = 14;
  bool is_open = 1;
}

message ChannellerSlabLoopDungeonStageInfo {
  repeated ChannellerSlabLoopDungeonInfo dungeon_info_list = 15;
  repeated uint32 taken_reward_index_list = 5;
  bool is_open = 11;
  uint32 last_difficulty_id = 6;
  uint32 open_time = 3;
}

message ChannelerSlabActivityDetailInfo {
  ChannellerSlabBuffInfo buff_info = 1;
  ChannellerSlabLoopDungeonStageInfo loop_dungeon_stage_info = 7;
  repeated ChannelerSlabChallengeStage stage_list = 15;
  uint32 play_end_time = 3;
}

message ChannelerSlabStageActiveChallengeIndexNotify {
  uint32 stage_id = 15;
  uint32 challenge_index = 12;
  uint32 active_camp_index = 6;
}

message ChannelerSlabStageOneoffDungeonNotify {
  uint32 stage_id = 2;
  bool is_done = 8;
}

message ChannellerSlabWearBuffReq {
  uint32 buff_id = 3;
  bool is_mp = 5;
  uint32 slot_id = 13;
}

message ChannellerSlabWearBuffRsp {
  uint32 buff_id = 15;
  int32 retcode = 1;
  bool is_mp = 9;
  uint32 slot_id = 8;
}

message ChannellerSlabTakeoffBuffReq {
  bool is_mp = 10;
  uint32 slot_id = 12;
  uint32 buff_id = 9;
}

message ChannellerSlabTakeoffBuffRsp {
  int32 retcode = 3;
  bool is_mp = 13;
  uint32 buff_id = 14;
  uint32 slot_id = 8;
}

message ChannellerSlabEnterLoopDungeonReq {
  uint32 point_id = 9;
  uint32 dungeon_index = 10;
  repeated uint32 condition_id_list = 5;
  uint32 difficulty_id = 12;
}

message ChannellerSlabEnterLoopDungeonRsp {
  int32 retcode = 9;
  uint32 point_id = 12;
  repeated uint32 condition_id_list = 6;
  uint32 dungeon_index = 15;
  uint32 difficulty_id = 3;
}

message ChannellerSlabLoopDungeonTakeFirstPassRewardReq {
  uint32 dungeon_index = 10;
}

message ChannellerSlabLoopDungeonTakeFirstPassRewardRsp {
  int32 retcode = 10;
  uint32 dungeon_index = 8;
}

message ChannellerSlabLoopDungeonTakeScoreRewardReq {
  uint32 reward_index = 8;
}

message ChannellerSlabLoopDungeonTakeScoreRewardRsp {
  uint32 reward_index = 12;
  int32 retcode = 5;
}

message ChannellerSlabLoopDungeonChallengeInfoNotify {
  uint32 dungeon_index = 12;
  uint32 challenge_score = 4;
  uint32 difficulty_id = 2;
  repeated uint32 condition_id_list = 3;
  repeated uint32 scheme_buff_id_list = 6;
}

message ChannellerSlabLoopDungeonSelectConditionReq {
  uint32 dungeon_index = 4;
  repeated uint32 condition_id_list = 3;
  uint32 difficulty_id = 8;
}

message ChannellerSlabLoopDungeonSelectConditionRsp {
  int32 retcode = 9;
  uint32 dungeon_index = 5;
  repeated uint32 condition_id_list = 13;
  uint32 difficulty_id = 14;
}

message ChannellerSlabLoopDungeonResultInfo {
  bool is_success = 11;
  uint32 challenge_max_score = 8;
  uint32 dungeon_index = 7;
  bool is_in_time_limit = 10;
  uint32 challenge_score = 12;
}

message ChannellerSlabOneOffDungeonInfoReq {
}

message ChannellerSlabOneOffDungeonInfoRsp {
  repeated uint32 scheme_buff_id_list = 3;
  int32 retcode = 15;
}

message ChannellerSlabOneOffDungeonInfoNotify {
  repeated uint32 scheme_buff_id_list = 6;
}

message ChannellerSlabSaveAssistInfoReq {
  repeated ChannellerSlabAssistInfo assist_info_list = 8;
}

message ChannellerSlabSaveAssistInfoRsp {
  repeated ChannellerSlabAssistInfo assist_info_list = 8;
  int32 retcode = 11;
}

message MistTrialBestAvatar {
  AvatarType avatar_type = 6;
  uint32 costume_id = 14;
  uint32 avatar_id = 5;
}

message MistTrialLevelData {
  MistTrialBestAvatar best_hit_avatar = 14;
  uint32 level_id = 7;
  uint32 open_time = 1;
  bool is_open = 12;
  repeated MistTrialBestAvatar best_avatar_list = 6;
  uint32 first_pass_time = 2;
}

message MistTrialActivityDetailInfo {
  repeated MistTrialLevelData trial_level_data_list = 5;
}

message MistTrialSelectAvatarAndEnterDungeonReq {
  message SelectAvatarIndex {
    oneof detail {
      uint32 mist_trial_avatar_id = 8;
      uint64 formal_avatar_guid = 6;
    }
  }

  uint32 enter_point_id = 7;
  repeated uint32 select_trial_avatar_id_list = 10;
  uint32 trial_id = 4;
  repeated SelectAvatarIndex select_avatar_index_list = 6;
}

message MistTrialSelectAvatarAndEnterDungeonRsp {
  uint32 trial_id = 1;
  int32 retcode = 2;
}

message MistTrialMissionInfo {
  uint32 param = 9;
  uint32 watcher_list_id = 13;
}

message MistTrialGetChallengeMissionReq {
  uint32 trial_id = 9;
}

message MistTrialGetChallengeMissionRsp {
  uint32 trial_id = 1;
  repeated MistTrialMissionInfo mission_info_list = 15;
  int32 retcode = 11;
}

message MistTrialDunegonFailNotify {
  int32 dungeon_id = 9;
}

message ChannellerSlabCheckEnterLoopDungeonReq {
}

message ChannellerSlabCheckEnterLoopDungeonRsp {
  int32 retcode = 10;
}

message HideAndSeekMapInfo {
  repeated uint32 match_lock_reason_list = 11;
  uint32 id = 7;
}

message HideAndSeekActivityDetailInfo {
  repeated uint32 chosen_map_list = 5;
  repeated uint32 unlock_map_list = 13;
  repeated uint32 chosen_hunter_skill_list = 4;
  repeated HideAndSeekMapInfo open_map_info_list = 1;
  repeated uint32 chosen_hider_skill_list = 6;
}

message HideAndSeekSelectSkillReq {
  repeated uint32 skill_list = 13;
}

message HideAndSeekSelectSkillRsp {
  int32 retcode = 4;
  repeated uint32 skill_list = 12;
}

message ActivityTakeScoreRewardReq {
  uint32 reward_config_id = 12;
  uint32 activity_id = 9;
}

message ActivityTakeScoreRewardRsp {
  uint32 activity_id = 13;
  int32 retcode = 9;
  uint32 reward_config_id = 15;
}

message ActivityTakeAllScoreRewardReq {
  uint32 activity_id = 9;
}

message ActivityTakeAllScoreRewardRsp {
  repeated uint32 reward_config_list = 14;
  int32 retcode = 15;
  uint32 activity_id = 7;
}

message HideAndSeekChooseMapReq {
  repeated uint32 map_list = 3;
}

message HideAndSeekChooseMapRsp {
  repeated uint32 map_list = 3;
  int32 retcode = 11;
}

message FindHilichurlDayContentInfo {
  uint32 start_time = 1;
}

message FindHilichurlDetailInfo {
  repeated FindHilichurlDayContentInfo day_content_info_list = 1;
  uint32 min_open_player_level = 12;
  bool is_end_quest_accept = 7;
  uint32 content_close_time = 6;
  bool is_content_closed = 9;
  uint32 player_day_index = 4;
  uint32 day_index = 15;
}

message CommonPlayerTipsNotify {
  uint32 notify_type = 3;
  repeated string text_map_id_list = 9;
}

message FindHilichurlFinishSecondQuestNotify {
  uint32 day_index = 11;
}

message FindHilichurlAcceptQuestNotify {
}

message SummerTimeSprintBoatRecord {
  uint32 best_score = 3;
  uint32 start_time = 13;
  bool is_touched = 7;
  repeated uint32 watcher_id_list = 10;
  uint32 group_id = 2;
}

message SummerTimeSprintBoatInfo {
  repeated SummerTimeSprintBoatRecord record_list = 7;
}

message SummerTimeDetailInfo {
  map<uint32, SummerTimeStageInfo> stage_map = 3;
  uint32 content_close_time = 11;
  bool is_content_closed = 13;
  SummerTimeSprintBoatInfo sprint_boat_info = 4;
}

message SummerTimeStageInfo {
  bool is_open = 13;
  uint32 open_time = 10;
  uint32 stage_id = 1;
}

message SummerTimeFloatSignalPositionNotify {
  Vector position = 1;
  bool is_transfer_anchor = 5;
  uint32 float_signal_id = 7;
}

message SummerTimeFloatSignalUpdateNotify {
  bool is_transfer_anchor = 4;
  uint32 float_signal_id = 8;
  Vector position = 10;
}

message SummerTimeSprintBoatSettleNotify {
  uint32 total_num = 13;
  uint32 group_id = 12;
  bool is_success = 15;
  uint32 collect_num = 6;
  uint32 left_time = 8;
  uint32 medal_level = 2;
  uint32 score = 10;
  bool is_new_record = 7;
}

message SummerTimeSprintBoatRestartReq {
  uint32 group_id = 10;
  uint32 schedule_id = 14;
}

message SummerTimeSprintBoatRestartRsp {
  int32 retcode = 10;
  uint32 schedule_id = 5;
  uint32 group_id = 4;
}

message BuoyantCombatDailyInfo {
  uint32 start_time = 2;
  uint32 best_score = 13;
}

message BuoyantCombatDetailInfo {
  repeated BuoyantCombatDailyInfo daily_info_list = 8;
}

message StartBuoyantCombatGalleryReq {
  uint32 gallery_id = 15;
  uint32 gallery_level = 13;
}

message StartBuoyantCombatGalleryRsp {
  uint32 gallery_level = 12;
  int32 retcode = 5;
  uint32 gallery_id = 8;
}

message BuoyantCombatSettleInfo {
  bool is_new_record = 1;
  BuoyantCombatGallerySettleInfo settle_info = 3;
}

message BuoyantCombatSettleNotify {
  uint32 gallery_id = 8;
  BuoyantCombatSettleInfo settle_info = 11;
}

message SetLimitOptimizationNotify {
  bool is_active = 3;
}

message SummerTimeDungeonInfo {
  uint32 taken_chest_count = 15;
  uint32 total_chest_count = 12;
  uint32 taken_shell_count = 14;
  uint32 dungeon_id = 4;
  uint32 total_shell_count = 13;
}

message EchoShellDetailInfo {
  repeated SummerTimeDungeonInfo summer_time_dungeon_list = 8;
  repeated uint32 shell_list = 13;
  repeated uint32 pass_dungeon_list = 4;
  repeated uint32 taken_reward_list = 2;
}

message EchoShellUpdateNotify {
  uint32 shell_id = 1;
}

message EchoShellTakeRewardReq {
  uint32 reward_id = 10;
}

message EchoShellTakeRewardRsp {
  uint32 reward_id = 6;
  int32 retcode = 10;
}

message BounceConjuringChapterInfo {
  uint32 best_score = 12;
  uint32 open_time = 9;
  uint32 chapter_id = 13;
}

message BounceConjuringActivityDetailInfo {
  repeated BounceConjuringChapterInfo chapter_info_list = 8;
  bool is_content_closed = 12;
  uint32 content_close_time = 7;
}

message BounceConjuringSettleNotify {
  bool is_new_record = 14;
  map<uint32, BounceConjuringGallerySettleInfo> settle_info_map = 4;
  uint32 total_score = 2;
  uint32 chapter_id = 13;
}

message BlitzRushStage {
  bool is_open = 13;
  uint32 open_time = 11;
}

message ParkourLevelInfo {
  uint32 best_record = 12;
  bool is_open = 9;
  uint32 open_time = 7;
  Vector pos = 2;
}

message BlitzRushActivityDetailInfo {
  repeated BlitzRushStage stage_list = 10;
  uint32 content_close_time = 14;
  bool is_content_closed = 2;
  repeated ParkourLevelInfo parkour_level_info_list = 6;
}

message BlitzRushParkourRestartReq {
  uint32 schedule_id = 13;
  uint32 group_id = 2;
}

message BlitzRushParkourRestartRsp {
  int32 retcode = 14;
  uint32 group_id = 15;
  uint32 schedule_id = 1;
}

message ChessActivityDetailInfo {
  uint32 level = 4;
  bool is_teach_dungeon_finished = 9;
  uint32 content_close_time = 14;
  uint32 obtained_exp = 8;
  bool is_content_closed = 5;
  uint32 available_exp = 2;
  uint32 exp = 13;
  repeated uint32 finished_map_id_list = 1;
  uint32 punish_over_time = 3;
}

message EnterChessDungeonReq {
  uint32 map_id = 12;
}

message EnterChessDungeonRsp {
  int32 retcode = 8;
  uint32 map_id = 13;
}

message TreasureMapHostInfoNotify {
  repeated uint32 mp_challenge_region_list = 8;
}

message SumoActivityDetailInfo {
  uint32 difficulty_id = 11;
  map<uint32, SumoStageData> sumo_stage_map = 13;
  uint32 last_stage_id = 14;
}

message SumoAvatarInfo {
  bool is_trial = 2;
  uint64 avatar_id = 1;
}

message SumoTeamData {
  repeated uint32 skill_id_list = 14;
  repeated SumoAvatarInfo avatar_info_list = 3;
}

message SumoStageData {
  uint32 max_score = 1;
  uint32 open_time = 5;
  uint32 stage_id = 3;
  repeated SumoTeamData team_list = 7;
  bool is_open = 11;
}

message SumoSaveTeamReq {
  uint32 activity_id = 11;
  uint32 stage_id = 13;
  uint32 difficulty_id = 7;
  repeated SumoTeamData team_list = 12;
}

message SumoSaveTeamRsp {
  uint32 stage_id = 9;
  int32 retcode = 2;
  uint32 activity_id = 11;
  repeated SumoTeamData team_list = 13;
  uint32 difficulty_id = 10;
}

message SumoSelectTeamAndEnterDungeonReq {
  uint32 activity_id = 1;
  uint32 stage_id = 7;
  uint32 difficulty_id = 4;
  repeated SumoTeamData team_list = 10;
}

message SumoSelectTeamAndEnterDungeonRsp {
  int32 retcode = 1;
  uint32 activity_id = 14;
  uint32 difficulty_id = 12;
  uint32 stage_id = 9;
  repeated SumoTeamData team_list = 2;
}

message SumoDungeonSettleNotify {
  uint32 final_score = 7;
  uint32 difficulty_id = 14;
  uint32 kill_elite_monster_num = 15;
  uint32 stage_id = 12;
  uint32 kill_monster_num = 4;
  bool is_new_record = 5;
}

message SumoDungeonAvatar {
  uint64 avatar_guid = 11;
  bool is_avlive = 13;
  bool is_trial = 4;
}

message SumoDungeonTeam {
  repeated SumoDungeonAvatar dungeon_avatar_list = 15;
}

message SumoEnterDungeonNotify {
  uint32 activity_id = 15;
  repeated SumoDungeonTeam dungeon_team_list = 11;
  uint32 no_switch_punish_time = 10;
  uint32 next_valid_switch_time = 13;
  uint32 stage_id = 7;
  uint32 cur_team_index = 5;
}

message SumoSwitchTeamReq {
  uint32 stage_id = 9;
  uint32 activity_id = 5;
}

message SumoSwitchTeamRsp {
  uint32 next_valid_switch_time = 7;
  repeated SumoDungeonTeam dungeon_team_list = 10;
  uint32 activity_id = 6;
  int32 retcode = 14;
  uint32 cur_team_index = 11;
  uint32 stage_id = 5;
}

message SumoLeaveDungeonNotify {
}

message SumoRestartDungeonReq {
}

message SumoRestartDungeonRsp {
  int32 retcode = 11;
  uint32 dungeon_id = 4;
  uint32 point_id = 12;
}

message ActivityDisableTransferPointInteractionNotify {
  bool is_disable = 10;
  Uint32Pair scene_point_pair = 5;
}

message SumoSetNoSwitchPunishTimeNotify {
  uint32 cur_team_index = 15;
  uint32 stage_id = 13;
  repeated SumoDungeonTeam dungeon_team_list = 11;
  uint32 no_switch_punish_time = 2;
  uint32 next_valid_switch_time = 14;
  uint32 activity_id = 9;
}

message MoonfinTrialLevelInfo {
  uint32 best_record = 3;
  uint32 open_time = 1;
}

message MoonfinTrialActivityDetailInfo {
  map<uint32, MoonfinTrialLevelInfo> level_info_map = 5;
  uint32 special_fish_count = 11;
}

message FishingGallerySettleNotify {
  uint32 gallery_id = 6;
  uint32 level_id = 15;
  FishingGallerySettleInfo settle_info = 13;
}

message LunaRiteHintPoint {
  uint32 area_id = 11;
  uint32 index = 7;
  LunaRiteHintPointType type = 2;
  Vector pos = 10;
}

message LunaRiteAreaInfo {
  repeated uint32 sacrifice_list = 11;
  LunaRiteHintStatusType hint_status = 7;
  repeated uint32 sacrifice_reward_list = 4;
  uint32 area_id = 8;
  uint32 challenge_index = 6;
}

message LunaRiteDetailInfo {
  repeated LunaRiteHintPoint hint_point = 3;
  repeated LunaRiteAreaInfo area_info_list = 13;
}

message LunaRiteSacrificeReq {
  uint32 area_id = 15;
  uint32 index = 14;
}

message LunaRiteSacrificeRsp {
  uint32 area_id = 13;
  repeated uint32 sacrifice_list = 14;
  uint32 index = 8;
  int32 retcode = 9;
}

message LunaRiteTakeSacrificeRewardReq {
  uint32 area_id = 11;
  uint32 index = 3;
}

message LunaRiteTakeSacrificeRewardRsp {
  uint32 index = 11;
  repeated uint32 sacrifice_reward_list = 2;
  uint32 sacrifice_reward_index = 14;
  uint32 area_id = 6;
  int32 retcode = 12;
}

message LunaRiteHintPointReq {
  uint32 area_id = 13;
}

message LunaRiteHintPointRsp {
  LunaRiteHintStatusType hint_status = 4;
  uint32 area_id = 5;
  int32 retcode = 13;
  repeated LunaRiteHintPoint hint_point = 9;
}

message LunaRiteHintPointRemoveNotify {
  repeated uint32 hint_point_index = 14;
}

message LunaRiteGroupBundleRegisterNotify {
  uint32 group_link_bundle_id = 11;
}

message LunaRiteAreaFinishNotify {
  uint32 area_id = 2;
}

message PlantFlowerActivityDetailInfo {
  bool is_content_closed = 3;
  map<uint32, uint32> wish_flower_num_map = 10;
  uint32 today_seed_reward_id = 11;
  uint32 day_index = 1;
  bool is_today_has_awarded = 13;
  map<uint32, uint32> used_flower_num_map = 7;
}

message PlantFlowerGetSeedInfoReq {
  uint32 schedule_id = 6;
}

message PlantFlowerGetSeedInfoRsp {
  int32 retcode = 15;
  uint32 schedule_id = 12;
  uint32 seed_reward_id = 5;
}

message PlantFlowerTakeSeedRewardReq {
  uint32 schedule_id = 12;
}

message PlantFlowerTakeSeedRewardRsp {
  int32 retcode = 2;
  uint32 schedule_id = 13;
}

message PlantFlowerSetFlowerWishReq {
  map<uint32, uint32> flower_num_map = 12;
  uint32 schedule_id = 5;
}

message PlantFlowerSetFlowerWishRsp {
  uint32 schedule_id = 7;
  int32 retcode = 8;
}

message PlantFlowerGetFriendFlowerWishListReq {
  uint32 schedule_id = 7;
}

message PlantFlowerFriendFlowerWishData {
  ProfilePicture profile_picture = 3;
  uint32 uid = 5;
  string nickname = 14;
  map<uint32, uint32> flower_num_map = 12;
}

message PlantFlowerGetFriendFlowerWishListRsp {
  int32 retcode = 6;
  uint32 schedule_id = 2;
  repeated PlantFlowerFriendFlowerWishData friend_flower_wish_list = 9;
}

message PlantFlowerGiveFriendFlowerReq {
  uint32 schedule_id = 11;
  uint32 uid = 13;
  map<uint32, uint32> flower_num_map = 12;
}

message PlantFlowerGiveFriendFlowerRsp {
  repeated uint32 limit_flower_list = 5;
  int32 retcode = 3;
  uint32 schedule_id = 14;
}

message PlantFlowerGetRecvFlowerListReq {
  uint32 schedule_id = 1;
}

message PlantFlowerRecvFlowerData {
  ProfilePicture profile_picture = 13;
  string nickname = 5;
  uint32 uid = 9;
  map<uint32, uint32> flower_num_map = 14;
}

message PlantFlowerGetRecvFlowerListRsp {
  uint32 schedule_id = 6;
  int32 retcode = 1;
  repeated PlantFlowerRecvFlowerData recv_flower_list = 4;
}

message PlantFlowerHaveRecvFlowerNotify {
  uint32 schedule_id = 10;
}

message PlantFlowerAcceptGiveFlowerReq {
  uint32 schedule_id = 2;
  uint32 uid = 12;
}

message PlantFlowerAcceptFlowerResultInfo {
  map<uint32, uint32> unaccept_flower_num_map = 4;
  uint32 uid = 7;
  map<uint32, uint32> accept_flower_num_map = 10;
}

message PlantFlowerAcceptGiveFlowerRsp {
  uint32 schedule_id = 1;
  PlantFlowerAcceptFlowerResultInfo accept_flower_result_info = 15;
  int32 retcode = 12;
}

message PlantFlowerAcceptAllGiveFlowerReq {
  uint32 schedule_id = 11;
}

message PlantFlowerAcceptAllGiveFlowerRsp {
  uint32 schedule_id = 10;
  int32 retcode = 11;
  repeated PlantFlowerAcceptFlowerResultInfo accept_flower_result_info_list = 13;
}

message PlantFlowerGetCanGiveFriendFlowerReq {
  uint32 schedule_id = 15;
}

message PlantFlowerGetCanGiveFriendFlowerRsp {
  map<uint32, uint32> flower_num_map = 6;
  uint32 schedule_id = 4;
  int32 retcode = 3;
}

message PlantFlowerEditFlowerCombinationReq {
  CustomGadgetTreeInfo flower_combination_info = 10;
  uint32 entity_id = 14;
  uint32 schedule_id = 9;
}

message PlantFlowerEditFlowerCombinationRsp {
  uint32 schedule_id = 13;
  int32 retcode = 6;
}

message MusicGameRecord {
  bool is_unlock = 9;
  uint32 max_score = 11;
  uint32 max_combo = 6;
}

message MusicGameActivityDetailInfo {
  repeated UgcMusicBriefInfo ugc_record_list = 4;
  repeated UgcMusicBriefInfo ugc_search_list = 7;
  map<uint32, MusicGameRecord> music_game_record_map = 8;
}

message MusicGameSettleReq {
  repeated uint32 button_list = 384;
  uint32 delay = 795;
  repeated uint32 note_list = 4;
  uint32 score_rating = 15;
  uint32 score = 9;
  uint64 ugc_guid = 6;
  uint32 restart_times = 13;
  bool is_custom_delay = 422;
  uint32 max_combo = 5;
  uint32 is_full_combo = 1058;
  float speed = 409;
  bool is_save_score = 3;
  uint32 combo = 1;
  uint32 music_basic_id = 7;
  uint32 star_rating = 2;
  uint32 volume = 1953;
  uint32 correct_hit = 14;
  bool is_custom_speed = 1285;
}

message MusicGameSettleRsp {
  int32 retcode = 11;
  uint32 music_basic_id = 5;
  bool is_new_record = 6;
  bool is_unlock_next_level = 2;
  uint64 ugc_guid = 10;
}

message MusicGameStartReq {
  uint32 music_basic_id = 2;
  bool is_save_score = 11;
  uint64 ugc_guid = 3;
}

message MusicGameStartRsp {
  uint32 music_basic_id = 4;
  int32 retcode = 1;
  uint64 ugc_guid = 15;
}

message RogueAvatarInfo {
  bool is_onstage = 5;
  bool is_alive = 3;
  uint32 avatar_id = 14;
}

message RogueShowAvatarTeamInfo {
  repeated RogueAvatarInfo avatar_list = 12;
}

message RoguelikeShikigamiRecord {
  uint32 id = 6;
  uint32 level = 3;
}

message RogueEffectRecord {
  uint32 source_id = 6;
  repeated uint32 extra_param_list = 9;
  uint32 count = 10;
  bool is_new = 5;
}

message RoguelikeRuneRecord {
  uint32 left_count = 14;
  uint32 rune_id = 6;
  uint32 max_count = 4;
}

message RogueStageInfo {
  RogueShowAvatarTeamInfo avatar_team = 2;
  bool is_passed = 5;
  uint32 stage_id = 7;
  uint32 revise_monster_level = 205;
  repeated RoguelikeRuneRecord rune_record_list = 6;
  bool is_open = 1;
  uint32 cur_level = 4;
  uint32 cached_coin_c_num = 1409;
  bool is_taken_reward = 11;
  bool is_in_combat = 12;
  uint32 cached_coin_b_num = 14;
  uint32 explore_cell_num = 15;
  uint32 coin_c_num = 8;
  bool is_explored = 9;
  uint32 max_passed_level = 3;
}

message RoguelikeDungeonActivityDetailInfo {
  repeated RogueStageInfo stage_list = 8;
  repeated RoguelikeShikigamiRecord shikigami_list = 5;
  repeated uint32 equipped_rune_list = 14;
  uint32 content_close_time = 6;
  bool is_content_closed = 10;
  repeated uint32 rune_list = 2;
}

message DoRoguelikeDungeonCardGachaReq {
  uint32 dungeon_id = 13;
  uint32 cell_id = 6;
}

message DoRoguelikeDungeonCardGachaRsp {
  bool is_can_refresh = 8;
  repeated uint32 card_list = 15;
  int32 retcode = 5;
}

message RefreshRoguelikeDungeonCardReq {
}

message RefreshRoguelikeDungeonCardRsp {
  int32 retcode = 3;
  repeated uint32 res_card_list = 9;
}

message SelectRoguelikeDungeonCardReq {
  uint32 card_id = 13;
}

message SelectRoguelikeDungeonCardRsp {
  uint32 card_id = 9;
  int32 retcode = 8;
}

message EquipRoguelikeRuneReq {
  repeated uint32 rune_list = 3;
}

message EquipRoguelikeRuneRsp {
  int32 retcode = 14;
  repeated uint32 rune_list = 1;
}

message TriggerRoguelikeRuneReq {
  uint32 rune_id = 8;
}

message TriggerRoguelikeRuneRsp {
  uint32 available_count = 4;
  uint32 rune_id = 14;
  int32 retcode = 8;
}

message TriggerRoguelikeCurseNotify {
  repeated uint32 effect_param_list = 14;
  uint32 curse_group_id = 9;
  bool is_trigger_curse = 13;
  uint32 curse_level = 3;
}

message UpgradeRoguelikeShikigamiReq {
  uint32 upgrade_level = 6;
  uint32 shikigami_group_id = 15;
}

message UpgradeRoguelikeShikigamiRsp {
  int32 retcode = 10;
  uint32 shikigami_group_id = 14;
  uint32 cur_level = 4;
}

message RoguelikeSelectAvatarAndEnterDungeonReq {
  repeated uint64 onstage_avatar_guid_list = 14;
  uint32 stage_id = 4;
  repeated uint64 backstage_avatar_guid_list = 11;
}

message RoguelikeSelectAvatarAndEnterDungeonRsp {
  uint32 stage_id = 15;
  int32 retcode = 1;
}

message RoguelikeGiveUpReq {
  uint32 stage_id = 9;
}

message RoguelikeGiveUpRsp {
  int32 retcode = 4;
  uint32 stage_id = 7;
  oneof info {
    RoguelikeDungeonSettleInfo settle_info = 8;
  }
}

message RoguelikeTakeStageFirstPassRewardReq {
  uint32 stage_id = 1;
}

message RoguelikeTakeStageFirstPassRewardRsp {
  uint32 stage_id = 14;
  int32 retcode = 5;
}

message GiveUpRoguelikeDungeonCardReq {
}

message GiveUpRoguelikeDungeonCardRsp {
  int32 retcode = 8;
}

message RogueCellInfo {
  uint32 cell_config_id = 14;
  uint32 dungeon_id = 4;
  uint32 cell_id = 9;
  uint32 cell_type = 13;
  RogueCellState state = 10;
}

message EnterRoguelikeDungeonNotify {
  bool is_mist_clear = 14;
  uint32 dungeon_weight_config_id = 2;
  repeated RoguelikeRuneRecord rune_record_list = 6;
  repeated uint64 onstage_avatar_guid_list = 9;
  bool is_first_enter = 205;
  repeated uint32 explored_cell_list = 3;
  map<uint32, RogueCellInfo> cell_info_map = 11;
  uint32 dungeon_id = 1;
  uint32 refresh_cost_item_count = 1999;
  float bonus_resource_prop = 13;
  uint32 revise_monster_level = 1541;
  uint32 stage_id = 15;
  repeated uint64 backstage_avatar_guid_list = 10;
  uint32 cur_cell_id = 12;
  uint32 refresh_cost_item_id = 7;
  uint32 cur_level = 8;
}

message StartRogueEliteCellChallengeReq {
  RogueEliteCellDifficultyType difficulty = 1;
  uint32 dungeon_id = 11;
  uint32 cell_id = 4;
}

message StartRogueEliteCellChallengeRsp {
  uint32 dungeon_id = 12;
  uint32 cell_id = 9;
  int32 retcode = 10;
}

message StartRogueNormalCellChallengeReq {
  uint32 dungeon_id = 3;
  uint32 cell_id = 8;
}

message StartRogueNormalCellChallengeRsp {
  uint32 dungeon_id = 10;
  uint32 cell_id = 2;
  int32 retcode = 6;
}

message RogueCellUpdateNotify {
  RogueCellInfo cell_info = 7;
}

message RogueDungeonPlayerCellChangeNotify {
  uint32 old_cell_id = 10;
  uint32 cell_id = 7;
}

message RogueHealAvatarsReq {
  uint32 dungeon_id = 1;
  uint32 cell_id = 3;
}

message RogueHealAvatarsRsp {
  uint32 dungeon_id = 10;
  int32 retcode = 9;
  uint32 cell_id = 14;
}

message RogueResumeDungeonReq {
  uint32 stage_id = 12;
}

message RogueResumeDungeonRsp {
  uint32 stage_id = 12;
  int32 retcode = 15;
}

message ClearRoguelikeCurseNotify {
  map<uint32, uint32> clear_curse_map = 10;
  bool is_clear_all = 11;
  uint32 card_id = 8;
  bool is_curse_all_clear = 1;
}

message RoguelikeCardGachaNotify {
  repeated uint32 card_list = 10;
  bool is_can_refresh = 11;
}

message RogueSwitchAvatarReq {
  uint32 cell_id = 15;
  repeated uint64 onstage_avatar_guid_list = 3;
  uint64 cur_avatar_guid = 11;
  uint32 dungeon_id = 6;
}

message RogueSwitchAvatarRsp {
  uint64 cur_avatar_guid = 4;
  repeated uint64 backstage_avatar_guid_list = 8;
  uint32 dungeon_id = 14;
  uint32 cell_id = 3;
  int32 retcode = 12;
  repeated uint64 onstage_avatar_guid_list = 9;
}

message DisableRoguelikeTrapNotify {
  uint32 card_id = 13;
}

message RoguelikeRuneRecordUpdateNotify {
  repeated RoguelikeRuneRecord rune_record_list = 11;
}

message RoguelikeMistClearNotify {
}

message RoguelikeEffectDataNotify {
  repeated RogueEffectRecord curse_list = 7;
  repeated RogueEffectRecord card_list = 4;
}

message RoguelikeEffectViewReq {
  repeated uint32 view_curse_list = 10;
  repeated uint32 view_card_list = 2;
}

message RoguelikeEffectViewRsp {
  int32 retcode = 2;
}

message RoguelikeResourceBonusPropUpdateNotify {
  float bonus_resource_prop = 12;
}

message RoguelikeSettleCoinInfo {
  uint32 coin_c = 8;
  uint32 coin_b = 10;
  uint32 cell_num = 1;
}

message RoguelikeDungeonSettleInfo {
  uint32 stage_id = 5;
  bool is_final_level = 15;
  map<uint32, RoguelikeSettleCoinInfo> finished_challenge_cell_num_map = 3;
  bool is_coin_c_reach_limit = 13;
  uint32 cur_level = 9;
  uint32 total_coin_b_num = 6;
  uint32 total_coin_c_num = 10;
}

message RoguelikeRefreshCardCostUpdateNotify {
  uint32 item_count = 5;
  uint32 item_id = 1;
}

message DigMarkPoint {
  Vector pos = 1;
  uint32 bundle_id = 13;
  Vector rot = 3;
}

message DigActivityDetailInfo {
  repeated uint32 stage_id_list = 15;
  repeated DigMarkPoint dig_mark_point_list = 11;
  uint32 stage_id = 8;
}

message DigActivityMarkPointChangeNotify {
  repeated DigMarkPoint dig_mark_point_list = 11;
}

message DigActivityChangeGadgetStateReq {
  uint32 entity_id = 10;
}

message DigActivityChangeGadgetStateRsp {
  uint32 entity_id = 15;
  int32 retcode = 6;
}

message HachiActivityDetailInfo {
  map<uint32, HachiStageInfo> stage_map = 6;
}

message HachiStageInfo {
  bool is_open = 8;
  bool is_finished = 12;
  uint32 open_time = 5;
  uint32 stage_id = 14;
}

message WinterCampStageInfo {
  uint32 cur_progress = 12;
  uint32 id = 6;
  uint32 open_time = 8;
  bool is_finished = 10;
  uint32 total_progress = 9;
  Vector pos = 5;
}

message WinterCampRaceStageInfo {
  uint32 open_time = 5;
  uint32 id = 1;
  Vector pos = 14;
  uint32 max_score = 2;
}

message WinterCampActivityDetailInfo {
  repeated WinterCampRaceStageInfo race_info_list = 9;
  WinterCampStageInfo battle_info = 10;
  repeated uint32 wish_id_list = 8;
  repeated uint32 battle_taken_reward_list = 14;
  repeated uint32 explore_taken_reward_list = 6;
  bool is_content_closed = 15;
  WinterCampStageInfo explore_info = 11;
  repeated ItemParam used_item_list = 2;
}

message WinterCampStageInfoChangeNotify {
  WinterCampStageInfo explore_info = 12;
  WinterCampStageInfo battle_info = 4;
}

message WinterCampRaceScoreNotify {
  uint32 id = 5;
  uint32 max_score = 14;
}

message WinterCampGiveFriendItemReq {
  uint32 uid = 12;
  repeated ItemParam item_list = 11;
}

message WinterCampGiveFriendItemRsp {
  repeated uint32 limit_item_id_list = 11;
  int32 retcode = 3;
}

message WinterCampSetWishListReq {
  repeated uint32 item_id_list = 4;
}

message WinterCampSetWishListRsp {
  int32 retcode = 4;
  repeated uint32 item_id_list = 7;
}

message WinterCampFriendWishData {
  string nickname = 14;
  uint32 uid = 12;
  ProfilePicture profile_picture = 5;
  repeated uint32 item_id_list = 9;
}

message WinterCampGetFriendWishListReq {
}

message WinterCampGetFriendWishListRsp {
  int32 retcode = 12;
  repeated WinterCampFriendWishData wish_data_list = 5;
}

message WinterCampRecvItemNotify {
  WinterCampRecvItemData recv_item_data = 14;
}

message WinterCampAcceptItemResultInfo {
  repeated ItemParam accept_item_list = 2;
  uint32 uid = 6;
  repeated ItemParam unaccept_item_list = 9;
}

message WinterCampAcceptGiveItemReq {
  uint32 uid = 11;
}

message WinterCampAcceptGiveItemRsp {
  int32 retcode = 14;
  WinterCampAcceptItemResultInfo accept_item_result_info = 3;
}

message WinterCampAcceptAllGiveItemReq {
}

message WinterCampAcceptAllGiveItemRsp {
  int32 retcode = 6;
  repeated WinterCampAcceptItemResultInfo accept_item_result_info = 14;
}

message WinterCampGetCanGiveFriendItemReq {
}

message WinterCampGetCanGiveFriendItemRsp {
  repeated ItemParam item_list = 8;
  int32 retcode = 11;
}

message WinterCampRecvItemData {
  repeated ItemParam item_list = 2;
  uint32 uid = 8;
  ProfilePicture profile_picture = 1;
  string nickname = 12;
}

message WinterCampGetRecvItemListReq {
}

message WinterCampGetRecvItemListRsp {
  repeated WinterCampRecvItemData recv_item_data_list = 8;
  int32 retcode = 6;
}

message WinterCampEditSnowmanCombinationReq {
  uint32 entity_id = 9;
  CustomGadgetTreeInfo combination_info = 6;
}

message WinterCampEditSnowmanCombinationRsp {
  int32 retcode = 10;
}

message WinterCampTriathlonSettleNotify {
  uint32 limited_coin = 9;
  uint32 normal_coin = 2;
  bool is_new_record = 7;
  bool is_success = 3;
  uint32 gallery_id = 13;
  uint32 remain_time = 4;
  uint32 score = 11;
  uint32 race_id = 15;
}

message WinterCampTakeExploreRewardReq {
  uint32 id = 8;
}

message WinterCampTakeExploreRewardRsp {
  int32 retcode = 2;
  uint32 id = 15;
}

message WinterCampTakeBattleRewardReq {
  uint32 id = 2;
}

message WinterCampTakeBattleRewardRsp {
  int32 retcode = 6;
  uint32 id = 15;
}

message WinterCampTriathlonRestartReq {
  uint32 gallery_id = 6;
}

message WinterCampTriathlonRestartRsp {
  int32 retcode = 10;
  uint32 gallery_id = 14;
}

message MistTrialSettleNotify {
  repeated MistTrialBestAvatar best_avatar_list = 2;
  map<uint32, uint32> exhibition_list_data_result_map = 14;
  MistTrialBestAvatar best_hit_avatar = 4;
  uint32 first_pass_time = 7;
  map<uint32, uint32> exhibition_list_data_record_map = 15;
  uint32 dungeon_scene_id = 5;
}

message MistTrialGetDungeonExhibitionDataReq {
  uint32 trial_id = 13;
}

message MistTrialGetDungeonExhibitionDataRsp {
  uint32 trial_id = 12;
  int32 retcode = 4;
}

message PotionLevelData {
  uint32 level_id = 10;
  uint32 score = 7;
  uint32 mode_id = 5;
  uint32 difficulty_level = 2;
}

message PotionStageData {
  uint32 stage_id = 11;
  repeated uint32 cool_down_buff_id_list = 2;
  bool is_open = 15;
  repeated PotionLevelData level_list = 14;
  repeated uint32 cool_down_avatar_id_list = 13;
}

message PotionActivityDetailInfo {
  repeated PotionStageData stage_list = 10;
}

message PotionResetChallengeReq {
  uint32 stage_id = 1;
}

message PotionResetChallengeRsp {
  int32 retcode = 11;
  PotionStageData stage_data = 14;
}

message PotionAvatarInfo {
  bool is_trial = 6;
  uint64 avatar_id = 8;
}

message PotionEnterDungeonReq {
  repeated uint32 buff_id_list = 15;
  uint32 level_id = 5;
  repeated PotionAvatarInfo avatar_info_list = 14;
  uint32 mode_id = 2;
  uint32 stage_id = 13;
}

message PotionEnterDungeonRsp {
  int32 retcode = 11;
}

message PotionDungeonAvatar {
  uint64 avatar_guid = 8;
  bool is_trial = 2;
}

message PotionEnterDungeonNotify {
  uint32 stage_id = 13;
  uint32 difficulty_level = 7;
  repeated PotionDungeonAvatar dungeon_avatar_list = 6;
  uint32 level_id = 8;
  uint32 mode_id = 5;
}

message PotionSaveDungeonResultReq {
  uint32 level_id = 8;
  uint32 stage_id = 7;
}

message PotionSaveDungeonResultRsp {
  int32 retcode = 5;
}

message PotionRestartDungeonReq {
}

message PotionRestartDungeonRsp {
  int32 retcode = 4;
}

message PotionDungeonResultInfo {
  uint32 final_score = 8;
  uint32 left_time = 9;
  uint32 difficulty_level = 14;
  uint32 mode_id = 11;
  uint32 level_id = 4;
  uint32 stage_id = 2;
}

message TanukiTravelLevelData {
  bool is_open = 5;
  uint32 route_id = 9;
  bool is_finish = 15;
}

message TanukiTravelActivityDetailInfo {
  repeated TanukiTravelLevelData tanuki_travel_level_data_list = 4;
  bool is_content_closed = 11;
  uint32 finished_level_index = 10;
}

message TanukiTravelFinishGuideQuestNotify {
  uint32 activity_id = 14;
}

message LanternProjectionLevelInfo {
  uint32 min_finish_time = 1;
  uint32 id = 2;
  bool is_finished = 7;
  bool is_can_start = 9;
  bool is_show_tips = 10;
}

message LanternProjectionInfo {
  repeated ClientInputType view_switch_tips_list = 12;
  repeated LanternProjectionLevelInfo level_list = 6;
  repeated uint32 open_stage_list = 10;
  repeated ClientInputType view_input_tips_list = 13;
}

message SalvageBundleChallengeInfo {
  repeated uint32 finished_bundle_list = 13;
}

message SalvageScoreChallengeInfo {
  uint32 salvage_challenge_id = 13;
  uint32 max_score = 7;
}

message SalvageChallengeInfo {
  uint32 challenge_type = 5;
  bool is_unlock = 12;
  oneof challenge_detail {
    SalvageBundleChallengeInfo bundle_info = 11;
    SalvageScoreChallengeInfo score_challenge_info = 13;
    uint32 boss_challenge_id = 2;
  }
}

message SalvageStageInfo {
  repeated SalvageChallengeInfo challenge_info_list = 9;
  bool is_open = 10;
  uint32 stage_id = 2;
}

message LanternRiteFireworksChallengeInfo {
  bool is_full_score = 13;
  uint32 best_score = 7;
  uint32 challenge_id = 3;
}

message LanternRiteFireworksStageInfo {
  bool is_open = 8;
  repeated LanternRiteFireworksChallengeInfo challenge_info_list = 9;
  uint32 stage_id = 15;
}

message LanternRiteFireworksInfo {
  repeated LanternRiteFireworksStageInfo stage_info_list = 6;
}

message LanternRiteActivityDetailInfo {
  LanternProjectionInfo projection_info = 13;
  repeated SalvageStageInfo stage_info_list = 5;
  LanternRiteFireworksInfo fireworks_info = 8;
  bool is_mini_eldritch_dungeon_open = 2;
  bool is_content_closed = 14;
  bool is_taken_skin_reward = 6;
}

message FinishLanternProjectionReq {
  uint32 finish_time = 3;
  uint32 level_id = 11;
}

message FinishLanternProjectionRsp {
  int32 retcode = 13;
}

message ViewLanternProjectionTipsReq {
  bool is_input_tips = 9;
  ClientInputType input_type = 10;
}

message ViewLanternProjectionTipsRsp {
  int32 retcode = 4;
}

message ViewLanternProjectionLevelTipsReq {
  uint32 level_id = 7;
}

message ViewLanternProjectionLevelTipsRsp {
  int32 retcode = 15;
}

message SalvagePreventSettleInfo {
  bool is_new_record = 8;
  SalvagePreventGallerySettleInfo settle_info = 14;
}

message SalvagePreventSettleNotify {
  uint32 gallery_id = 13;
  SalvagePreventSettleInfo settle_info = 12;
}

message SalvageEscortSettleInfo {
  SalvageEscortGallerySettleInfo settle_info = 3;
  bool is_new_record = 2;
}

message SalvageEscortSettleNotify {
  uint32 gallery_id = 14;
  SalvageEscortSettleInfo settle_info = 15;
}

message LanternRiteTakeSkinRewardReq {
}

message LanternRiteTakeSkinRewardRsp {
  int32 retcode = 6;
}

message SalvagePreventRestartReq {
  uint32 gallery_id = 13;
}

message SalvagePreventRestartRsp {
  int32 retcode = 10;
  uint32 gallery_id = 12;
}

message SalvageEscortRestartReq {
  uint32 gallery_id = 4;
}

message SalvageEscortRestartRsp {
  uint32 gallery_id = 14;
  int32 retcode = 5;
}

message LanternRiteStartFireworksReformReq {
  uint32 stage_id = 2;
  uint32 challenge_id = 7;
}

message LanternRiteFireworksReformFactorInfo {
  uint32 factor_value = 5;
  uint32 factor_id = 13;
}

message LanternRiteFireworksReformSkillInfo {
  uint32 skill_id = 2;
  bool is_unlock = 11;
  uint32 unlock_challenge_time = 1;
  uint32 unlock_challenge_id = 14;
}

message LanternRiteStartFireworksReformRsp {
  repeated LanternRiteFireworksReformFactorInfo factor_info_list = 15;
  uint32 fire_element_addition_ratio = 13;
  uint32 stamina_value = 2;
  repeated LanternRiteFireworksReformSkillInfo skill_info_list = 8;
  uint32 reform_score = 6;
  uint32 stage_id = 12;
  uint32 challenge_id = 11;
  uint32 fire_element_value = 14;
  int32 retcode = 7;
}

message LanternRiteDoFireworksReformReq {
  uint32 stage_id = 12;
  uint32 skill_id = 11;
  uint32 challenge_id = 10;
  uint32 factor_id = 13;
}

message LanternRiteDoFireworksReformRsp {
  uint32 stage_id = 7;
  bool is_lucky = 13;
  uint32 challenge_id = 8;
  repeated LanternRiteFireworksReformFactorInfo factor_info_list = 2;
  uint32 stamina_value = 10;
  uint32 reform_score = 15;
  uint32 fire_element_value = 11;
  int32 retcode = 3;
  uint32 fire_element_addition_ratio = 12;
}

message LanternRiteEndFireworksReformReq {
  uint32 stage_id = 9;
  uint32 challenge_id = 1;
}

message LanternRiteEndFireworksReformRsp {
  bool is_full_score = 10;
  int32 retcode = 1;
  bool is_unlock_fireworks = 6;
  uint32 stage_id = 15;
  bool is_unlock_new_skill = 12;
  bool is_stamina_up = 4;
  uint32 final_score = 13;
  uint32 challenge_id = 5;
  bool is_new_record = 9;
}

message UpdateSalvageBundleMarkReq {
  uint32 stage_id = 14;
  uint32 challenge_type = 13;
}

message UpdateSalvageBundleMarkRsp {
  uint32 challenge_type = 1;
  int32 retcode = 4;
  uint32 stage_id = 7;
}

message MichiaeMatsuriStage {
  bool is_open = 11;
  uint32 open_time = 5;
  uint32 stage_id = 12;
}

message MichiaeMatsuriChestPositionInfo {
  Vector pos = 10;
  uint32 group_id = 2;
  uint32 config_id = 11;
}

message MichiaeMatsuriChallengePositionInfo {
  uint32 group_id = 4;
  uint32 gadget_id = 7;
  Vector pos = 8;
}

message MichiaeMatsuriActivityDetailInfo {
  repeated MichiaeMatsuriChallengePositionInfo challenge_pos_list = 6;
  uint32 gain_crystal_exp = 13;
  repeated uint32 unlocked_crystal_skill_list = 2;
  repeated MichiaeMatsuriChestPositionInfo chest_pos_list = 10;
  repeated MichiaeMatsuriStage stage_list = 14;
}

message MichiaeMatsuriDarkPressureLevelUpdateNotify {
  uint32 dark_pressure_level = 8;
}

message MichiaeMatsuriInteractStatueReq {
  uint32 statue_entity_id = 7;
}

message MichiaeMatsuriInteractStatueRsp {
  int32 retcode = 10;
}

message MichiaeMatsuriUnlockCrystalSkillReq {
  uint32 crystal_skill_id = 1;
}

message MichiaeMatsuriUnlockCrystalSkillRsp {
  uint32 crystal_skill_id = 1;
  int32 retcode = 14;
}

message MichiaeMatsuriStartBossChallengeReq {
  uint32 difficulty = 5;
  uint32 gadget_entity_id = 15;
}

message MichiaeMatsuriStartBossChallengeRsp {
  int32 retcode = 15;
}

message MichiaeMatsuriStartDarkChallengeReq {
  uint32 worktop_entity_id = 2;
}

message MichiaeMatsuriStartDarkChallengeRsp {
  int32 retcode = 2;
}

message MichiaeMatsuriRemoveChestMarkNotify {
  uint32 config_id = 9;
  uint32 group_id = 11;
}

message MichiaeMatsuriRemoveChallengeMarkNotify {
  uint32 gadget_id = 9;
  uint32 group_id = 2;
}

message MichiaeMatsuriGainCrystalExpUpdateNotify {
  uint32 gain_crystal_exp = 2;
  uint32 activity_id = 3;
}

message BartenderTaskInfo {
  uint32 id = 1;
  bool is_finish = 14;
}

message BartenderLevelInfo {
  bool is_finish = 7;
  uint32 max_score = 9;
  uint32 id = 4;
}

message BartenderActivityDetailInfo {
  repeated uint32 unlock_item_list = 3;
  bool is_develop_module_open = 13;
  bool is_content_closed = 6;
  repeated BartenderLevelInfo unlock_level_list = 5;
  repeated uint32 unlock_formula_list = 14;
  repeated BartenderTaskInfo unlock_task_list = 2;
}

message BartenderCompleteOrderReq {
  uint32 cup_type = 14;
  uint32 qte_count = 7;
  uint32 quest_id = 11;
  repeated ItemParam item_list = 10;
  bool is_view_formula = 9;
  repeated uint32 optional_order_list = 6;
  uint32 retry_count = 3;
}

message BartenderCompleteOrderRsp {
  bool is_new = 10;
  uint32 finish_order_id = 3;
  int32 retcode = 4;
  uint32 formula_id = 6;
  uint32 quest_id = 15;
  repeated uint32 affix_list = 2;
}

message BartenderCancelOrderReq {
  uint32 quest_id = 3;
}

message BartenderCancelOrderRsp {
  int32 retcode = 9;
  uint32 quest_id = 3;
}

message BartenderGetFormulaReq {
  repeated ItemParam item_list = 7;
  uint32 quest_id = 4;
}

message BartenderGetFormulaRsp {
  bool is_new = 12;
  int32 retcode = 6;
  repeated uint32 affix_list = 8;
  uint32 formula_id = 11;
}

message BartenderStartLevelReq {
  uint32 level_id = 5;
}

message BartenderStartLevelRsp {
  int32 retcode = 5;
  repeated uint32 order_list = 13;
  uint32 level_id = 10;
  uint32 time = 8;
}

message BartenderCancelLevelReq {
  uint32 level_id = 13;
}

message BartenderCancelLevelRsp {
  uint32 level_id = 2;
  int32 retcode = 14;
}

message BartenderLevelProgressNotify {
  bool is_new_record = 9;
  bool is_finish = 3;
  uint32 level_id = 15;
  uint32 score = 8;
}

message BartenderFinishLevelReq {
  uint32 level_id = 6;
}

message BartenderFinishLevelRsp {
  int32 retcode = 6;
  uint32 level_id = 1;
}

message OfficialCustomDungeon {
  uint32 dungeon_id = 11;
  uint32 win_times = 3;
}

message UgcActivityDetailInfo {
  bool is_ugc_feature_closed = 10;
  uint32 custom_dungeon_group_id = 12;
  repeated OfficialCustomDungeon official_custom_dungeon_list = 5;
  bool is_enable_ugc = 11;
}

message CrystalLinkActivityDetailInfo {
  repeated CrystalLinkLevelInfo level_info_list = 3;
  uint32 difficulty_id = 7;
}

message CrystalLinkLevelInfo {
  repeated CrystalLinkTeamInfo team_info_list = 10;
  bool is_open = 9;
  uint32 level_id = 14;
  uint32 best_score = 5;
}

message CrystalLinkTeamInfo {
  repeated CrystalLinkBuffInfo buff_info_list = 2;
  repeated CrystalLinkAvatarInfo avatar_info_list = 11;
}

message CrystalLinkAvatarInfo {
  uint64 avatar_id = 3;
  bool is_trial = 13;
}

message CrystalLinkBuffInfo {
  uint32 effect_buff_id = 1;
  uint32 cond_buff_id = 10;
}

message CrystalLinkEnterDungeonReq {
  uint32 level_id = 7;
  repeated CrystalLinkTeamInfo team_info_list = 13;
  uint32 difficulty_id = 10;
}

message CrystalLinkEnterDungeonRsp {
  uint32 level_id = 1;
  uint32 difficulty_id = 14;
  int32 retcode = 6;
  repeated CrystalLinkTeamInfo team_info_list = 8;
}

message CrystalLinkDungeonAvatarInfo {
  bool is_trial = 8;
  uint64 avatar_guid = 11;
}

message CrystalLinkDungeonInfoNotify {
  repeated CrystalLinkBuffInfo buff_info_list = 8;
  uint32 level_id = 1;
  bool is_upper_part = 15;
  uint32 difficulty_id = 11;
  repeated CrystalLinkDungeonAvatarInfo dungeon_avatar_info_list = 3;
  uint32 init_gallery_progress = 7;
}

message CrystalLinkRestartDungeonReq {
}

message CrystalLinkRestartDungeonRsp {
  int32 retcode = 1;
}

message QuickOpenActivityReq {
  uint32 activity_id = 1;
}

message QuickOpenActivityRsp {
  int32 retcode = 2;
  uint32 activity_id = 4;
}

message IrodoriChessMapData {
  uint32 map_id = 6;
  IrodoriChessEntranceDetailInfo entrance_detail_info = 7;
  repeated uint32 equiped_card_list = 3;
  uint32 best_score = 8;
}

message IrodoriChessLevelData {
  uint32 open_time = 8;
  uint32 level_id = 15;
  IrodoriChessMapData hard_map_data = 7;
  IrodoriChessMapData normal_map_data = 11;
}

message IrodoriChessData {
  bool is_open = 8;
  repeated IrodoriChessLevelData level_data_list = 1;
}

message IrodoriFlowerData {
  repeated uint32 finished_theme_list = 1;
  repeated ItemParam used_flower_list = 7;
}

message IrodoriPoetryThemeData {
  repeated uint32 scanned_index_list = 1;
  repeated uint32 line_id_list = 4;
  uint32 max_progress = 2;
  uint32 theme_id = 13;
  uint32 progress = 5;
  uint32 min_progress = 12;
  uint32 selected_line_id = 9;
}

message IrodoriPoetryData {
  repeated IrodoriPoetryThemeData theme_data_list = 3;
  uint32 cur_theme_id = 14;
}

message IrodoriMasterLevelDetailInfo {
  bool is_finish = 1;
  uint32 diffculty = 2;
  uint32 min_finish_time = 8;
  bool is_have_try = 7;
}

message IrodoriMasterLevelInfo {
  repeated IrodoriMasterLevelDetailInfo detail_info = 11;
  uint32 level_id = 14;
}

message IrodoriActivityDetailInfo {
  repeated IrodoriMasterLevelInfo master_level_list = 11;
  IrodoriFlowerData flower_data = 6;
  IrodoriPoetryData poetry_data = 8;
  IrodoriChessData chess_data = 14;
}

message IrodoriEditFlowerCombinationReq {
  uint32 entity_id = 13;
  CustomGadgetTreeInfo combination_info = 1;
}

message IrodoriEditFlowerCombinationRsp {
  bool is_already_finished = 4;
  bool is_can_take_reward = 3;
  int32 retcode = 1;
}

message IrodoriScanEntityReq {
  uint32 entity_id = 11;
}

message IrodoriScanEntityRsp {
  IrodoriPoetryThemeData theme_data = 10;
  int32 retcode = 5;
  bool is_get_inspiration = 1;
}

message IrodoriFillPoetryReq {
  uint32 theme_id = 9;
  uint32 line_id = 13;
}

message IrodoriFillPoetryRsp {
  IrodoriPoetryThemeData theme_data = 13;
  int32 retcode = 12;
}

message IrodoriChessEquipCardReq {
  bool is_hard_map = 2;
  uint32 level_id = 12;
  uint32 card_id = 9;
}

message IrodoriChessEquipCardRsp {
  int32 retcode = 2;
  uint32 card_id = 8;
  uint32 level_id = 5;
  bool is_hard_map = 12;
}

message IrodoriChessUnequipCardReq {
  uint32 card_id = 8;
  uint32 level_id = 5;
  bool is_hard_map = 10;
}

message IrodoriChessUnequipCardRsp {
  bool is_hard_map = 10;
  uint32 card_id = 13;
  uint32 level_id = 14;
  int32 retcode = 11;
}

message EnterIrodoriChessDungeonReq {
  bool is_hard_map = 1;
  uint32 level_id = 11;
}

message EnterIrodoriChessDungeonRsp {
  int32 retcode = 5;
  bool is_hard_map = 7;
  uint32 level_id = 13;
}

message IrodoriMasterStartGalleryReq {
  uint32 level_id = 12;
  uint32 difficulty = 4;
}

message IrodoriMasterStartGalleryRsp {
  int32 retcode = 12;
}

message IrodoriMasterGalleryCgEndNotify {
  uint32 level_id = 15;
  uint32 gallery_id = 4;
}

message IrodoriMasterGallerySettleNotify {
  IrodoriMasterGallerySettleInfo settle_info = 13;
  uint32 gallery_id = 5;
}

message PhotoPosData {
  Vector center = 15;
  uint32 open_time = 2;
  bool is_view = 4;
  uint32 pos_id = 9;
  bool is_open = 6;
}

message PhotoActivityDetailInfo {
  bool is_content_closed = 4;
  repeated PhotoPosData photo_pos_data_list = 12;
}

message PhotoActivityFinishReq {
  uint32 pos_id = 15;
  uint32 check_root_id = 2;
  bool is_succ = 5;
}

message PhotoActivityFinishRsp {
  int32 retcode = 1;
  uint32 pos_id = 8;
}

message PhotoActivityClientViewReq {
  uint32 pos_id = 13;
}

message PhotoActivityClientViewRsp {
  int32 retcode = 3;
  uint32 pos_id = 8;
}

message SpiceStageData {
  bool is_open = 12;
  uint32 success_times = 1;
  uint32 stage_id = 6;
}

message SpiceActivityDetailInfo {
  uint32 current_increase_avatar_fetter_times = 15;
  repeated SpiceStageData spice_stage_data_list = 7;
  uint32 increase_avatar_fetter_limit_times = 13;
}

message SpiceActivityFinishMakeSpiceReq {
  uint32 left_turns = 4;
  bool is_success = 9;
  repeated uint32 left_material_id_list = 12;
  uint32 stage_id = 15;
}

message SpiceActivityFinishMakeSpiceRsp {
  uint32 stage_id = 13;
  int32 retcode = 14;
  bool is_success = 3;
}

message SpiceActivityProcessFoodReq {
  repeated ItemParam normal_food_list = 1;
}

message SpiceActivityProcessFoodRsp {
  int32 retcode = 9;
  repeated ItemParam special_food_list = 14;
  repeated ItemParam normal_food_list = 1;
}

message SpiceActivityGivingRecordNotify {
  uint32 current_increase_avatar_fetter_times = 3;
  uint32 increase_avatar_fetter_limit_times = 7;
  uint32 avatar_id = 11;
}

message GachaStageData {
  uint32 stage_id = 15;
  map<uint32, uint32> target_num_map = 14;
  bool is_open = 13;
}

message GachaActivityDetailInfo {
  repeated uint32 have_get_robot_list = 6;
  repeated GachaStageData gacha_stage_data_list = 4;
  map<uint32, uint32> have_reward_robot_num_map = 8;
  uint32 tech_create_robot_id = 3;
  map<uint32, uint32> robot_num_map = 5;
  uint32 robot_finish_num = 12;
}

message GachaActivityPercentNotify {
  uint32 item_stage = 14;
  map<uint32, uint32> target_num_map = 6;
  uint32 sub_item_stage = 2;
  uint32 percent = 13;
}

message GachaActivityUpdateElemNotify {
  uint32 elem_type = 10;
}

message GachaActivityCreateRobotReq {
}

message GachaActivityCreateRobotRsp {
  uint32 robot_id = 1;
  int32 retcode = 3;
}

message GachaActivityTakeRewardReq {
  map<uint32, uint32> robot_num_map = 12;
}

message GachaActivityTakeRewardRsp {
  map<uint32, uint32> robot_num_map = 3;
  int32 retcode = 13;
}

message GachaActivityResetReq {
  uint32 stage_id = 2;
}

message GachaActivityResetRsp {
  int32 retcode = 13;
  uint32 stage_id = 6;
}

message GachaActivityNextStageReq {
}

message GachaActivityNextStageRsp {
  uint32 stage_id = 13;
  int32 retcode = 15;
}

message ActivityGiveFriendGiftReq {
  uint32 uid = 5;
  uint32 schedule_id = 1;
  map<uint32, uint32> gift_num_map = 4;
}

message ActivityGiveFriendGiftRsp {
  repeated uint32 limit_gift_list = 3;
  uint32 schedule_id = 4;
  int32 retcode = 10;
}

message ActivityRecvGiftData {
  uint32 uid = 15;
  string nickname = 3;
  string remark_name = 10;
  ProfilePicture profile_picture = 14;
  map<uint32, uint32> gift_num_map = 8;
}

message ActivityGetRecvGiftListReq {
  uint32 schedule_id = 8;
}

message ActivityGetRecvGiftListRsp {
  int32 retcode = 15;
  repeated ActivityRecvGiftData recv_gift_list = 11;
  uint32 schedule_id = 6;
}

message ActivityHaveRecvGiftNotify {
  uint32 schedule_id = 7;
}

message ActivityAcceptGiftResultInfo {
  map<uint32, uint32> unaccept_gift_num_map = 3;
  uint32 uid = 6;
  map<uint32, uint32> accept_gift_num_map = 13;
}

message ActivityAcceptGiveGiftReq {
  uint32 schedule_id = 3;
  uint32 uid = 12;
}

message ActivityAcceptGiveGiftRsp {
  ActivityAcceptGiftResultInfo accept_gift_result_info = 4;
  int32 retcode = 11;
  uint32 schedule_id = 10;
}

message ActivityAcceptAllGiveGiftReq {
  uint32 schedule_id = 3;
}

message ActivityAcceptAllGiveGiftRsp {
  repeated ActivityAcceptGiftResultInfo accept_gift_result_info_list = 5;
  uint32 schedule_id = 10;
  int32 retcode = 9;
}

message ActivityGetCanGiveFriendGiftReq {
  uint32 schedule_id = 8;
}

message ActivityGetCanGiveFriendGiftRsp {
  uint32 schedule_id = 7;
  int32 retcode = 3;
  map<uint32, uint32> gift_num_map = 14;
}

message ActivitySetGiftWishReq {
  map<uint32, uint32> gift_num_map = 2;
  uint32 schedule_id = 14;
}

message ActivitySetGiftWishRsp {
  uint32 schedule_id = 15;
  int32 retcode = 7;
}

message ActivityFriendGiftWishData {
  string nickname = 7;
  string remark_name = 3;
  ProfilePicture profile_picture = 11;
  map<uint32, uint32> gift_num_map = 9;
  uint32 uid = 8;
}

message ActivityGetFriendGiftWishListReq {
  uint32 schedule_id = 6;
}

message ActivityGetFriendGiftWishListRsp {
  int32 retcode = 6;
  repeated ActivityFriendGiftWishData friend_gift_wish_list = 11;
  uint32 schedule_id = 10;
}

message LuminanceStoneChallengeActivityDetailInfo {
  uint32 best_score = 11;
  bool is_content_closed = 6;
  bool is_final_gallery_complete = 12;
  uint32 current_stage_id = 15;
}

message LuminanceStoneChallengeSettleInfo {
  LuminanceStoneChallengeGallerySettleInfo settle_info = 13;
  bool is_new_record = 12;
}

message LuminanceStoneChallengeSettleNotify {
  uint32 gallery_id = 10;
  LuminanceStoneChallengeSettleInfo settle_info = 13;
}

message RogueDiaryDungeonRecord {
  bool is_finish = 10;
  uint32 max_round = 5;
  uint32 finish_time = 15;
  uint32 difficulty = 13;
}

message RogueDiaryStageInfo {
  uint32 stage_id = 1;
  RogueDiaryDungeonRecord best_record = 12;
  bool is_have_try = 10;
}

message RogueDiaryProgress {
  uint32 difficulty = 7;
  repeated uint32 optional_card_list = 4;
  bool is_enter_dungeon = 9;
  uint32 stage_id = 12;
  uint32 cur_round = 3;
}

message RogueDiaryActivityDetailInfo {
  repeated RogueDiaryStageInfo stage_list = 11;
  bool is_have_progress = 10;
  bool is_content_closed = 2;
  RogueDiaryProgress cur_progress = 7;
}

message RogueDiaryAvatar {
  ActivityDungeonAvatar avatar = 2;
  uint32 level = 14;
  uint32 tired_round = 13;
  repeated RogueDiaryAvatarDisableStatus disable_status_list = 9;
}

message RogueDiaryRoomInfo {
  repeated Uint32Pair monster_list = 1;
  bool is_boss = 3;
  uint32 config_id = 7;
}

message StartRogueDiaryPlayReq {
  uint32 difficulty = 1;
  uint32 stage_id = 12;
}

message StartRogueDiaryPlayRsp {
  int32 retcode = 11;
  repeated RogueDiaryAvatar trial_avatar_list = 13;
  repeated uint32 rand_card_list = 12;
  repeated RogueDiaryAvatar avatar_list = 9;
}

message ResetRogueDiaryPlayReq {
  uint32 stage_id = 5;
}

message ResetRogueDiaryPlayRsp {
  int32 retcode = 11;
}

message EnterRogueDiaryDungeonReq {
  repeated uint32 chosen_card_list = 9;
  repeated RogueDiaryAvatar chosen_avatar_list = 11;
}

message EnterRogueDiaryDungeonRsp {
  int32 retcode = 9;
}

message ResumeRogueDiaryDungeonReq {
  uint32 stage_id = 2;
}

message ResumeRogueDiaryDungeonRsp {
  int32 retcode = 15;
}

message RogueDiaryDungeonInfoNotify {
  uint32 stage_id = 12;
  repeated uint32 round_monster_list = 15;
  uint32 time = 4;
  uint32 cur_room = 5;
  uint32 cur_round = 6;
  uint32 coin = 11;
  uint32 difficulty = 8;
  uint32 dungeon_id = 14;
  repeated RogueDiaryRoomInfo room_list = 7;
  repeated uint32 round_card_list = 10;
}

message RogueDiaryDungeonSettleNotify {
  uint32 explore_time = 1;
  bool is_finish = 3;
  uint32 cur_round = 2;
}

message StartRogueDiaryRoomReq {
  uint32 room_difficulty = 13;
  bool is_select_hard = 1;
}

message StartRogueDiaryRoomRsp {
  int32 retcode = 4;
}

message RogueDiaryTiredAvatarNotify {
  repeated RogueDiaryAvatar optianal_tired_avatar_list = 10;
  uint32 reserve_avatar_num = 6;
  uint32 tired_type = 8;
  bool is_need_show = 7;
}

message ReserveRogueDiaryAvatarReq {
  repeated RogueDiaryAvatar reserve_avatar_list = 6;
}

message ReserveRogueDiaryAvatarRsp {
  int32 retcode = 13;
}

message GetRogueDairyRepairInfoReq {
}

message GetRogueDairyRepairInfoRsp {
  int32 retcode = 3;
}

message RefreshRogueDiaryCardReq {
  repeated uint32 refresh_card_list = 8;
}

message RefreshRogueDiaryCardRsp {
  repeated uint32 rand_card_list = 15;
  int32 retcode = 1;
}

message RogueFinishRepairReq {
  repeated uint32 chosen_card_list = 1;
  repeated RogueDiaryAvatar chosen_avatar_list = 8;
}

message RogueFinishRepairRsp {
  int32 retcode = 3;
}

message TryInterruptRogueDiaryDungeonReq {
}

message TryInterruptRogueDiaryDungeonRsp {
  int32 retcode = 4;
}

message RogueDiaryRepairInfoNotify {
  uint32 stage_id = 8;
  repeated uint32 select_card_list = 14;
  repeated RogueDiaryAvatar avatar_list = 13;
  repeated RogueDiaryRoomInfo room_list = 2;
  repeated uint32 rand_card_list = 10;
  repeated RogueDiaryAvatar select_avatar_list = 9;
  repeated uint32 chosen_card_list = 15;
  repeated RogueDiaryAvatar trial_avatar_list = 11;
}

message RetryCurRogueDiaryDungeonReq {
}

message RetryCurRogueDiaryDungeonRsp {
  int32 retcode = 5;
}

message RogueDiaryReviveAvatarReq {
  RogueDiaryAvatar revive_avatar = 2;
}

message RogueDiaryReviveAvatarRsp {
  int32 retcode = 8;
}

message TryEnterNextRogueDiaryDungeonReq {
}

message TryEnterNextRogueDiaryDungeonRsp {
  int32 retcode = 4;
}

message RogueDiaryCoinAddNotify {
  uint32 num = 10;
}

message SummerTimeV2DetailInfo {
  repeated SummerTimeV2DungeonStageInfo dungeon_stage_info_list = 13;
  uint32 cur_dungeon_reward_limit = 10;
  bool is_content_closed = 4;
  uint32 taken_reward_count = 5;
  repeated SummerTimeV2BoatStageInfo boat_stage_info_list = 15;
}

message SummerTimeV2DungeonStageInfo {
  uint32 stage_id = 10;
  bool is_open = 3;
  uint32 open_time = 12;
  bool is_prev_dungeon_succeed = 15;
}

message SummerTimeV2BoatStageInfo {
  uint32 open_time = 7;
  bool is_open = 14;
  uint32 stage_id = 10;
  uint32 best_score = 13;
}

message SummerTimeV2BoatSettleNotify {
  SummerTimeV2BoatGallerySettleInfo settle_info = 11;
  uint32 stage_id = 7;
  bool is_new_record = 2;
  uint32 gallery_id = 1;
}

message ActivityPushTipsData {
  ActivityPushTipsState state = 10;
  uint32 activity_push_tips_id = 4;
}

message ActivityPushTipsInfoNotify {
  uint32 schedule_id = 14;
  repeated ActivityPushTipsData activity_push_tips_data_list = 3;
  uint32 activity_id = 10;
}

message ActivityReadPushTipsReq {
  repeated uint32 activity_push_tips_id_list = 14;
  uint32 activity_id = 7;
}

message ActivityReadPushTipsRsp {
  int32 retcode = 9;
}

message SummerTimeV2RestartBoatGalleryReq {
  uint32 gallery_id = 5;
}

message SummerTimeV2RestartBoatGalleryRsp {
  uint32 gallery_id = 13;
  int32 retcode = 8;
}

message SummerTimeV2RestartDungeonReq {
}

message SummerTimeV2RestartDungeonRsp {
  int32 retcode = 3;
}

message IslandPartyStageData {
  uint32 stage_id = 13;
  bool is_open = 14;
  uint32 best_score = 4;
}

message IslandPartyDetailInfo {
  repeated IslandPartyStageData stage_data_list = 15;
}

message IslandPartySettleNotify {
  bool is_new_record = 13;
  GalleryStopReason reason = 1;
  repeated IslandPartyGallerySettleInfo settle_info_list = 8;
  repeated ExhibitionDisplayInfo score_list = 6;
  uint32 time_remain = 15;
}

message GearLevelData {
  uint32 shortest_time = 8;
  uint32 open_time = 11;
  uint32 last_duration = 5;
  uint32 level_id = 12;
  bool is_finished = 9;
  bool is_open = 3;
}

message JigsawPictureData {
  bool is_finished = 7;
  uint32 shortest_time = 10;
  bool is_open = 5;
  uint32 last_duration = 6;
}

message GearActivityDetailInfo {
  repeated GearLevelData gear_level_data_list = 14;
  JigsawPictureData jigsaw_picture_data = 8;
}

message GearActivityStartPlayGearReq {
  uint32 level_id = 5;
}

message GearActivityStartPlayGearRsp {
  uint32 level_id = 9;
  int32 retcode = 2;
}

message GearColumnInfo {
  uint32 gear_column_index = 7;
  bool is_overturn = 3;
  bool has_gear = 2;
  uint32 gear_id = 11;
  uint32 placement_layer = 6;
}

message GearActivityFinishPlayGearReq {
  bool is_success = 4;
  bool use_clue = 12;
  repeated GearColumnInfo gear_column_info_list = 9;
  uint32 level_id = 5;
}

message GearActivityFinishPlayGearRsp {
  int32 retcode = 2;
  bool is_success = 15;
  uint32 level_id = 3;
}

message GearActivityStartPlayPictureReq {
}

message GearActivityStartPlayPictureRsp {
  int32 retcode = 6;
}

message GearActivityFinishPlayPictureReq {
  bool is_success = 8;
}

message GearActivityFinishPlayPictureRsp {
  int32 retcode = 12;
  bool is_success = 6;
}

message GravenInnocencePhotoStageInfo {
  bool is_finished = 11;
  uint32 stage_id = 6;
  bool is_open = 9;
}

message GravenInnocencePhotoObjectInfo {
  uint32 object_id = 1;
  uint32 finish_time = 4;
  uint32 param = 14;
}

message GravenInnocencePhotoInfo {
  repeated GravenInnocencePhotoStageInfo stage_info_list = 5;
  repeated GravenInnocencePhotoObjectInfo object_info_list = 7;
}

message GravenInnocenceCampStageInfo {
  bool is_open = 15;
  uint32 level_id = 10;
  uint32 stage_id = 9;
  bool is_finished = 3;
}

message GravenInnocenceCampInfo {
  repeated GravenInnocenceCampStageInfo stage_info_list = 5;
}

message GravenInnocenceRaceLevelInfo {
  uint32 level_id = 13;
  uint32 max_score = 14;
  bool is_open = 1;
}

message GravenInnocenceRaceInfo {
  repeated GravenInnocenceRaceLevelInfo level_info_list = 11;
}

message GravenInnocenceCarveStageInfo {
  uint32 stage_id = 9;
  bool is_open = 1;
}

message GravenInnocenceCarveInfo {
  repeated GravenInnocenceCarveStageInfo stage_info_list = 10;
  uint32 can_edit_count = 7;
  repeated uint32 has_edit_config_id_list = 6;
}

message GravenInnocenceDetailInfo {
  bool is_content_closed = 8;
  GravenInnocenceRaceInfo race_info = 10;
  GravenInnocencePhotoInfo photo_info = 7;
  GravenInnocenceCarveInfo carve_info = 13;
  GravenInnocenceCampInfo camp_info = 12;
}

message GravenInnocenceRaceSettleNotify {
  bool is_new_record = 4;
  uint32 gallery_id = 6;
  uint32 score = 5;
  GalleryStopReason reason = 2;
  uint32 total_coint_count = 13;
  uint32 remain_time = 10;
  uint32 challenge_progress = 1;
  uint32 coin_count = 8;
  bool is_success = 7;
  uint32 level_id = 11;
}

message GravenInnocenceRaceRestartReq {
  uint32 gallery_id = 6;
}

message GravenInnocenceRaceRestartRsp {
  int32 retcode = 8;
  uint32 gallery_id = 6;
}

message GravenInnocenceEditCarveCombinationReq {
  uint32 entity_id = 2;
  CustomGadgetTreeInfo combination_info = 11;
}

message GravenInnocenceEditCarveCombinationRsp {
  int32 retcode = 5;
}

message GravenInnocencePhotoFinishReq {
  uint32 param = 1;
  uint32 object_id = 4;
}

message GravenInnocencePhotoFinishRsp {
  uint32 object_id = 6;
  uint32 param = 11;
  int32 retcode = 12;
}

message GravenInnocencePhotoReminderNotify {
  uint32 group_bundle_id = 14;
  uint32 reminder_id = 6;
}

message InstableSprayTeamInfo {
  repeated InstableSprayAvatarInfo avatar_info_list = 13;
}

message InstableSprayStageInfo {
  bool is_finished = 10;
  uint32 max_score = 3;
  uint32 stage_id = 4;
  repeated InstableSprayTeamInfo team_info_list = 6;
}

message InstableSprayDetailInfo {
  repeated InstableSprayStageInfo stage_info_list = 9;
}

message InstableSprayAvatarInfo {
  bool is_trial = 8;
  uint64 avatar_id = 2;
}

message InstableSprayEnterDungeonReq {
  uint32 stage_id = 13;
  uint32 difficulty = 2;
  repeated InstableSprayAvatarInfo avatar_info_list = 7;
}

message InstableSprayEnterDungeonRsp {
  uint32 level_id = 11;
  int32 retcode = 9;
}

message InstableSpraySwitchTeamReq {
  repeated InstableSprayAvatarInfo avatar_info_list = 13;
}

message InstableSpraySwitchTeamRsp {
  uint32 level_id = 1;
  int32 retcode = 8;
}

message InstableSprayLevelFinishNotify {
  bool is_need_switch_team = 11;
  bool is_skip_black_screen = 7;
  uint32 round = 15;
  uint32 stage_id = 8;
  uint32 level_id = 10;
}

message InstableSprayRestartDungeonReq {
  repeated InstableSprayAvatarInfo avatar_info_list = 6;
}

message InstableSprayRestartDungeonRsp {
  uint32 level_id = 1;
  int32 retcode = 13;
}

message MuqadasPotionLevelData {
  uint32 level_id = 15;
  uint32 max_score = 9;
  bool is_open = 10;
}

message MuqadasPotionActivityDetailInfo {
  repeated MuqadasPotionLevelData muqadas_potion_level_data_list = 8;
}

message MuqadasPotionActivityEnterDungeonReq {
  uint32 level_id = 12;
}

message MuqadasPotionActivityEnterDungeonRsp {
  int32 retcode = 6;
  uint32 level_id = 9;
}

message MuqadasPotionDungeonSettleNotify {
  uint32 final_score = 11;
  uint32 capture_weakness_count = 15;
  bool is_success = 6;
  uint32 level_id = 10;
  bool is_new_record = 2;
}

message MuqadasPotionRestartDungeonReq {
}

message MuqadasPotionRestartDungeonRsp {
  int32 retcode = 5;
}

message MuqadasPotionCaptureWeaknessReq {
  uint32 capture_weakness_count = 10;
  uint32 level_id = 15;
}

message MuqadasPotionCaptureWeaknessRsp {
  int32 retcode = 12;
}

message TreasureSeelieRegionData {
  bool is_done = 12;
  uint32 open_day = 6;
  uint32 opened_chest_num = 10;
  float region_radius = 7;
  bool is_open = 9;
  uint32 open_time = 8;
  Vector region_center_pos = 11;
  uint32 scene_id = 13;
  uint32 total_chest_num = 15;
  uint32 region_id = 1;
}

message TreasureSeelieActivityDetailInfo {
  uint32 treasure_close_time = 10;
  bool is_content_closed = 8;
  repeated TreasureSeelieRegionData region_data_list = 14;
}

message TreasureSeelieCollectOrbsNotify {
  uint32 current_num = 11;
  uint32 total_num = 5;
}

message RockBoardExploreStageData {
  bool is_finish = 6;
  uint32 open_time = 7;
  bool is_open = 5;
  uint32 stage_id = 3;
}

message RockBoardExploreDetailInfo {
  repeated RockBoardExploreStageData stage_data_list = 9;
}

message VintageHuntingStageData {
  uint32 open_time = 10;
  bool is_finish = 3;
  bool is_open = 9;
  uint32 record_value = 12;
  uint32 stage_id = 7;
}

message VintagePresentLevelData {
  uint32 present_id = 10;
  bool is_open = 11;
  bool is_finish = 5;
  uint32 stage_id = 1;
}

message VintagePresentStageData {
  uint32 open_time = 1;
  uint32 stage_id = 15;
  bool is_finish = 13;
  bool is_open = 10;
  map<uint32, VintagePresentLevelData> present_level_map = 2;
}

message VintageBoothUsedItemData {
  bool is_open = 7;
  uint32 gadget_id = 8;
}

message VintageCampChallengeLevelData {
  uint32 stage_id = 14;
  uint32 level_id = 11;
  bool is_finish = 8;
  bool is_open = 6;
}

message VintageCampChallengeStageData {
  bool is_open = 5;
  uint32 max_finished_level = 11;
  uint32 open_time = 3;
  bool is_finish = 10;
  uint32 stage_id = 4;
  map<uint32, VintageCampChallengeLevelData> camp_level_map = 2;
}

message VintageMarketTraderInfo {
  uint32 trader_id = 7;
  repeated ItemParam available_item_list = 9;
}

message VintageMarketDealInfo {
  map<uint32, VintageMarketTraderInfo> trader_item_info_map = 13;
}

message VintageMarketStoreInfo {
  repeated uint32 cur_attr_list = 5;
  repeated uint32 next_aim_attr_list = 14;
  repeated uint32 strategy_list = 2;
  uint32 slot_count = 3;
  uint32 store_id = 10;
}

message VintageMarketStoreOpInfo {
  repeated uint32 strategy_list = 5;
  uint32 help_uid = 9;
  uint32 store_id = 2;
  uint32 help_skill_id = 7;
  repeated uint32 add_attr_list = 15;
}

message VintageMarketInfo {
  bool is_help_module_open = 1485;
  bool is_store_content_interrupt = 15;
  VintageMarketDealInfo deal_info = 11;
  uint32 store_round = 7;
  repeated uint32 store_round_income_list = 207;
  bool is_store_content_finish = 5;
  repeated uint32 cur_env_event_list = 8;
  bool is_market_content_open = 10;
  uint32 next_can_use_help_round = 1800;
  bool is_market_content_finish = 2;
  repeated uint32 viewed_strategy_list = 14;
  uint32 prev_coin_c_num = 3;
  map<uint32, bool> bargain_info_map = 6;
  uint32 dividend_reward_count = 1798;
  repeated uint32 cur_npc_event_list = 4;
  bool is_help_in_cd = 366;
  uint32 prev_coin_b_num = 1;
  repeated VintageMarketStoreInfo open_store_list = 9;
  uint32 help_skill_id = 760;
  bool is_round_tips_view = 12;
  bool is_strategy_module_open = 876;
  repeated uint32 unlock_strategy_list = 13;
}

message VintageActivityDetailInfo {
  VintageMarketInfo market_info = 2;
  map<uint32, VintageHuntingStageData> hunting_stage_map = 7;
  VintageBoothUsedItemData booth_data = 5;
  map<uint32, VintageCampChallengeStageData> camp_stage_map = 13;
  map<uint32, VintagePresentStageData> present_stage_map = 4;
  bool is_content_closed = 11;
}

message VintageMarketDeliverItemReq {
  repeated ItemParam deliver_item_list = 3;
  uint32 trader_id = 5;
}

message VintageMarketDeliverItemRsp {
  int32 retcode = 6;
  uint32 trader_id = 3;
}

message VintageHuntingFirstStageSettleInfo {
  uint32 elite_cnt = 10;
  uint32 timid_cnt = 2;
  uint32 brutal_cnt = 6;
  uint32 score = 14;
}

message VintageHuntingSecondStageSettleInfo {
  map<uint32, uint32> animal_count_map = 6;
  uint32 capture_animal_num = 7;
  uint32 total_num = 15;
}

message VintageHuntingThirdStageSettleInfo {
  uint32 left_time = 13;
  bool is_success = 9;
}

message SceneGalleryVintageHuntingSettleNotify {
  bool has_new_watcher = 11;
  uint32 stage_id = 9;
  uint32 total_watcher_num = 12;
  uint32 finished_watcher_num = 6;
  bool is_new_record = 1;
  oneof info {
    VintageHuntingFirstStageSettleInfo first_stage_info = 4;
    VintageHuntingSecondStageSettleInfo second_stage_info = 10;
    VintageHuntingThirdStageSettleInfo third_stage_info = 8;
  }
}

message VintagePresentFinishNoify {
  uint32 present_id = 7;
}

message VintageDecorateBoothReq {
  uint32 entity_id = 6;
  CustomGadgetTreeInfo combination_info = 11;
}

message VintageDecorateBoothRsp {
  int32 retcode = 1;
}

message VintageHuntingStartGalleryReq {
  uint32 stage_id = 7;
}

message VintageHuntingStartGalleryRsp {
  int32 retcode = 4;
}

message VintageCampGroupBundleRegisterNotify {
  uint32 group_bundle_id = 10;
}

message VintageCampStageFinishNotify {
  uint32 stage_id = 11;
}

message VintageMarketStartStorePlayReq {
  uint32 store_round = 5;
}

message VintageMarketStartStorePlayRsp {
  uint32 prev_round_coin_b = 7;
  uint32 store_round = 2;
  uint32 prev_round_coin_c = 5;
  int32 retcode = 8;
}

message VintageMarketFinishStorePlayReq {
  uint32 store_round = 9;
  repeated VintageMarketStoreOpInfo store_op_list = 3;
}

message VintageMarketFinishStorePlayRsp {
  repeated uint32 trigger_env_event_list = 8;
  uint32 store_round = 12;
  repeated uint32 trigger_npc_event_list = 10;
  repeated uint32 low_attr_store_list = 11;
  uint32 round_coin_b_income = 9;
  uint32 round_delta_coin_c = 1;
  map<uint32, uint32> store_income_map = 3;
  int32 retcode = 7;
  uint32 round_total_income = 14;
  uint32 display_return_coin_b = 15;
}

message VintagePresentFinishNotify {
  uint32 present_id = 3;
}

message VintageMarketStoreUnlockSlotReq {
  uint32 store_id = 10;
}

message VintageMarketStoreUnlockSlotRsp {
  int32 retcode = 1;
  uint32 slot_count = 6;
  uint32 store_id = 10;
}

message VintageMarketStoreChooseStrategyReq {
  uint32 store_id = 6;
  repeated VintageMarketStoreOpInfo store_op_list = 9;
  repeated uint32 strategy_list = 8;
}

message VintageMarketStoreChooseStrategyRsp {
  uint32 store_id = 15;
  int32 retcode = 9;
  repeated uint32 strategy_list = 2;
}

message VintageMarketStoreViewStrategyReq {
  uint32 strategy_id = 1;
  repeated uint32 strategy_list = 14;
}

message VintageMarketStoreViewStrategyRsp {
  int32 retcode = 2;
  repeated uint32 strategy_list = 3;
  uint32 strategy_id = 14;
}

message VintageMarketDividendFinishNotify {
  uint32 coin_a = 5;
  uint32 coin_c = 11;
}

message VintageMarketNpcEventFinishNotify {
  repeated uint32 unlock_strategy_list = 15;
  uint32 coin_c = 12;
  uint32 coin_a = 4;
}

message WindFieldDetailInfo {
  repeated WindFieldStageInfo stage_info_list = 11;
}

message WindFieldStageInfo {
  bool is_open = 12;
  uint32 open_time = 14;
  uint32 stage_id = 8;
}

message WindFieldRestartDungeonReq {
}

message WindFieldRestartDungeonRsp {
  int32 retcode = 5;
}

message FungusDetail {
  bool is_cultivate = 5;
  uint32 capture_order = 6;
  uint32 name_id = 14;
  uint32 min_cultivate_step = 1;
  uint32 fungus_id = 9;
}

message FungusPlotStageDetail {
  bool is_open = 3;
  uint32 stage_id = 15;
}

message FungusTrainingDungeonDetail {
  bool is_open = 13;
  uint32 dungeon_id = 12;
  uint32 best_score = 9;
}

message FungusFighterMonsterDetail {
  uint32 fungus_id = 2;
  float cur_hp_percentage = 7;
  bool is_alive = 9;
}

message FungusTrainingMonsterPreviewDetail {
  uint32 monster_id = 8;
  uint32 level = 10;
  repeated uint32 affix_list = 7;
}

message FungusTrainingPoolPreviewDetail {
  uint32 pool_id = 8;
  repeated FungusTrainingMonsterPreviewDetail monster_preview_detail_list = 6;
}

message FungusTrainingProgressDetail {
  uint32 cur_round = 9;
  uint32 dungeon_id = 10;
  repeated FungusTrainingPoolPreviewDetail monster_pool_preview_list = 5;
  repeated FungusFighterMonsterDetail monster_detail_list = 6;
  uint32 total_used_time = 7;
  repeated uint32 backup_monster_list = 4;
  repeated uint32 choosen_monster_list = 8;
}

message FungusFighterDetailInfo {
  repeated FungusPlotStageDetail plot_stage_detail_list = 6;
  repeated FungusDetail fungus_detail_list = 4;
  repeated uint32 unlock_camp_id_list = 12;
  repeated FungusTrainingProgressDetail training_dungeon_progress_detail_list = 3;
  repeated FungusTrainingDungeonDetail training_dungeon_detail_list = 15;
  repeated uint32 finish_camp_id_list = 1;
  repeated uint32 unlock_cultivate_id_list = 8;
}

message EnterFungusFighterPlotDungeonReq {
  uint32 dungeon_id = 14;
  repeated uint32 fungus_id_list = 8;
}

message EnterFungusFighterPlotDungeonRsp {
  int32 retcode = 10;
  uint32 dungeon_id = 15;
  repeated uint32 fungus_id_list = 2;
}

message FungusFighterPlotInfoNotify {
  repeated uint32 fungus_id_list = 11;
  uint32 dungeon_id = 4;
}

message FungusCultivateReq {
  uint32 cultivate_id = 8;
  uint32 copy_step = 7;
  uint32 exchange_step = 11;
  uint32 cultivate_step = 13;
  uint32 rotate_step = 15;
  uint32 undo_step = 6;
  uint32 time = 2;
  uint32 place_step = 10;
}

message FungusCultivateRsp {
  uint32 cultivate_id = 4;
  bool is_new_record = 13;
  int32 retcode = 10;
}

message FungusRenameReq {
  uint32 name_id = 1;
  uint32 fungus_id = 11;
}

message FungusRenameRsp {
  int32 retcode = 5;
  uint32 fungus_id = 15;
  uint32 name_id = 12;
}

message EnterFungusFighterTrainingDungeonReq {
  uint32 dungeon_id = 3;
}

message EnterFungusFighterTrainingDungeonRsp {
  int32 retcode = 7;
  uint32 dungeon_id = 11;
}

message FungusFighterRuntimeDataNotify {
  FungusTrainingProgressDetail progress_detail = 7;
}

message FungusFighterTrainingSelectFungusReq {
  repeated uint32 backup_fungus_id_list = 11;
  repeated uint32 fight_fungus_id_list = 7;
}

message FungusFighterTrainingSelectFungusRsp {
  int32 retcode = 7;
}

message FungusFighterTrainingGallerySettleNotify {
  bool is_new_record = 14;
  uint32 total_used_time = 4;
  GalleryStopReason reason = 5;
  uint32 dead_fungus_num = 1;
  uint32 settle_round = 15;
  bool is_final_settle = 10;
  uint32 gadget_life_percentage = 11;
  uint32 final_score = 9;
}

message FungusFighterClearTrainingRuntimeDataReq {
  uint32 dungeon_id = 6;
}

message FungusFighterClearTrainingRuntimeDataRsp {
  int32 retcode = 8;
}

message FungusFighterUseBackupFungusReq {
  repeated uint32 backup_fungus_id_list = 1;
}

message FungusFighterUseBackupFungusRsp {
  int32 retcode = 12;
}

message FungusFighterRestartTraningDungeonReq {
}

message FungusFighterRestartTraningDungeonRsp {
  int32 retcode = 11;
}

message CharAmusementStageData {
  uint32 finish_time = 15;
  bool is_open = 12;
  uint32 stage_id = 6;
}

message CharAmusementDetailInfo {
  repeated CharAmusementStageData stage_data_list = 1;
}

message CharAmusementSettleNotify {
  bool is_succ = 3;
  uint32 finish_time = 14;
  bool is_new_record = 2;
}

message EffigyChallengeV2LevelData {
  uint32 challenge_mode_difficulty_pass = 1;
  uint32 level_id = 5;
  uint32 challenge_mode_last_choose_skill_no = 10;
  uint32 best_cost_time = 12;
  bool is_level_open = 7;
  uint32 challenge_mode_difficulty_open = 13;
}

message EffigyChallengeV2DetailInfo {
  repeated EffigyChallengeV2LevelData level_data_list = 3;
}

message EffigyChallengeV2EnterDungeonReq {
  uint32 challenge_mode_difficulty = 7;
  uint32 level_id = 12;
  uint32 challenge_mode_skill_no = 11;
}

message EffigyChallengeV2EnterDungeonRsp {
  uint32 challenge_mode_skill_no = 11;
  int32 retcode = 10;
  uint32 challenge_mode_difficulty = 14;
  uint32 level_id = 13;
}

message EffigyChallengeV2RestartDungeonReq {
}

message EffigyChallengeV2RestartDungeonRsp {
  int32 retcode = 5;
}

message EffigyChallengeV2ChooseSkillReq {
  uint32 level_id = 6;
  uint32 challenge_mode_skill_no = 7;
}

message EffigyChallengeV2ChooseSkillRsp {
  uint32 level_id = 15;
  int32 retcode = 9;
  uint32 challenge_mode_skill_no = 3;
}

message EffigyChallengeV2DungeonInfoNotify {
  uint32 challenge_mode_difficulty = 2;
  uint32 skill_no = 4;
  uint32 level_id = 13;
}

message CoinCollectTeamInfoData {
  repeated uint32 avatar_costume_id_list = 12;
  uint32 player_uid = 2;
  bool is_host = 14;
  uint32 choose_skill_no = 4;
  repeated uint32 avatar_lv_list = 10;
  repeated uint32 avatar_id_list = 9;
}

message CoinCollectLevelData {
  uint32 level_id = 3;
  repeated CoinCollectTeamInfoData double_best_team_info_list = 12;
  uint32 last_choose_skill_no = 9;
  uint32 single_best_collect_num = 15;
  bool is_have_watched_cutscene = 1;
  uint32 single_best_pass_time_ms = 2;
  bool is_have_play_single_level = 11;
  bool is_level_open = 8;
  bool is_have_play_double_level = 6;
  CoinCollectTeamInfoData single_best_team_info = 13;
  uint32 double_best_collect_num = 14;
  uint32 double_best_pass_time_ms = 10;
}

message CoinCollectDetailInfo {
  repeated CoinCollectLevelData level_data_list = 10;
}

message CoinCollectChooseSkillReq {
  uint32 choose_skill_no = 5;
  uint32 level_id = 2;
}

message CoinCollectChooseSkillRsp {
  uint32 level_id = 4;
  uint32 choose_skill_no = 6;
  int32 retcode = 5;
}

message RestartCoinCollectPlaySingleModeReq {
  uint32 level_id = 2;
}

message RestartCoinCollectPlaySingleModeRsp {
  int32 retcode = 8;
  uint32 level_id = 11;
}

message EndCoinCollectPlaySingleModeReq {
  uint32 multistage_play_index = 15;
}

message EndCoinCollectPlaySingleModeRsp {
  int32 retcode = 13;
}

message CoinCollectPrepareReq {
}

message CoinCollectPrepareRsp {
  int32 retcode = 1;
}

message CoinCollectInterruptPlayReq {
  uint32 gallery_id = 13;
}

message CoinCollectInterruptPlayRsp {
  int32 retcode = 2;
  uint32 gallery_id = 8;
}

message CoinCollectCheckDoubleStartPlayReq {
  uint32 level_id = 11;
}

message CoinCollectCheckDoubleStartPlayRsp {
  uint32 level_id = 3;
  int32 retcode = 9;
}

message BrickBreakerLevelInfo {
  bool is_finish = 5;
  uint32 level_id = 12;
  bool is_can_start = 1;
  uint32 max_score = 15;
  repeated uint32 chosen_skill_list = 11;
  repeated uint32 chosen_avatar_list = 6;
}

message BrickBreakerActivityStageInfo {
  bool is_dungeon_level_unlock = 14;
  bool is_world_level_unlock = 13;
  uint32 stage_id = 10;
}

message BrickBreakerDetailInfo {
  repeated BrickBreakerLevelInfo dungeon_level_info_list = 15;
  repeated BrickBreakerActivityStageInfo stage_info_list = 14;
  repeated BrickBreakerLevelInfo world_level_info_list = 8;
  map<uint32, uint32> skill_info_map = 9;
}

message SingleStartBrickBreakerReq {
  bool is_dungeon = 11;
  repeated uint32 chosen_avatar_list = 13;
  repeated uint32 chosen_skill_list = 7;
  uint32 level_id = 6;
}

message SingleStartBrickBreakerRsp {
  uint32 level_id = 5;
  int32 retcode = 11;
  bool is_dungeon = 12;
}

message SingleRestartBrickBreakerReq {
  uint32 level_id = 3;
  bool is_dungeon = 6;
}

message SingleRestartBrickBreakerRsp {
  uint32 level_id = 13;
  bool is_dungeon = 1;
  int32 retcode = 14;
}

message BrickBreakerSettleNotify {
  enum SettleReason {
    SETTLE_REASON_TIME_OUT = 0;
    SETTLE_PLAY_END = 1;
    SETTLE_PLAYER_QUIT = 2;
    SETTLE_LIFE_COUNT = 3;
  }

  uint32 gallery_id = 6;
  uint32 score = 14;
  uint32 level_id = 1;
  bool is_new_record = 13;
  repeated Uint32Pair update_skill_list = 10;
  SettleReason reason = 5;
  bool is_single_mode = 9;
  uint32 combo = 12;
  uint32 time = 15;
  bool is_dungeon = 11;
}

message BrickBreakerTwiceStartReq {
}

message BrickBreakerTwiceStartRsp {
  int32 retcode = 13;
}

message BrickBreakerQuitReq {
}

message BrickBreakerQuitRsp {
  int32 retcode = 10;
}

message SeaLampV3RaceLevelInfo {
  bool is_open = 2;
  uint32 max_score = 3;
  uint32 level_id = 10;
}

message SeaLampV3RaceInfo {
  repeated SeaLampV3RaceLevelInfo level_info_list = 9;
}

message SeaLampV3ShadowLevelInfo {
  bool is_open = 4;
  uint32 level_id = 3;
  uint32 min_finish_time = 6;
}

message SeaLampV3ShadowStageInfo {
  uint32 stage_id = 2;
  bool is_open = 6;
  repeated SeaLampV3ShadowLevelInfo level_info_list = 14;
}

message SeaLampV3ShadowInfo {
  repeated SeaLampV3ShadowStageInfo stage_info_list = 2;
}

message SeaLampV3CampStageInfo {
  bool is_finished = 14;
  uint32 level_id = 12;
  bool is_open = 6;
  uint32 stage_id = 1;
}

message SeaLampV3CampInfo {
  repeated SeaLampV3CampStageInfo stage_info_list = 15;
}

message SeaLampV3DetailInfo {
  SeaLampV3ShadowInfo shadow_info = 3;
  SeaLampV3CampInfo camp_info = 8;
  SeaLampV3RaceInfo race_info = 10;
}

message LanV3BoatGameStartSingleReq {
}

message LanV3BoatGameStartSingleRsp {
  int32 retcode = 14;
}

message LanV3BoatGameTransferFinishNotify {
  bool is_reenter = 5;
}

message LanV3RaceSettleNotify {
  uint32 remain_time = 10;
  uint32 gallery_id = 4;
  uint32 level_id = 13;
  uint32 coin_count = 14;
  uint32 total_coint_count = 5;
  bool is_new_record = 2;
  bool is_success = 1;
  uint32 score = 7;
}

message LanV3RaceRestartReq {
  uint32 gallery_id = 13;
}

message LanV3RaceRestartRsp {
  int32 retcode = 1;
  uint32 gallery_id = 3;
}

message LanV3BoatInterruptSettleStageReq {
}

message LanV3BoatInterruptSettleStageRsp {
  int32 retcode = 15;
}

message LanV3ShadowFinishLevelReq {
  uint32 finish_time = 6;
  uint32 level_id = 15;
}

message LanV3ShadowFinishLevelRsp {
  int32 retcode = 3;
}

message DuelHeartLevelDifficultyInfo {
  bool is_open = 6;
  uint32 cost_time = 9;
  uint32 difficulty = 12;
}

message DuelHeartLevelInfo {
  bool is_cg_viewed = 5;
  repeated DuelHeartLevelDifficultyInfo difficulty_info_list = 13;
  uint32 level_id = 4;
  bool is_open = 11;
}

message DuelHeartDetailInfo {
  repeated DuelHeartLevelInfo level_info_list = 14;
}

message DuelHeartEnterDungeonReq {
  uint32 level_id = 12;
}

message DuelHeartEnterDungeonRsp {
  int32 retcode = 5;
}

message DuelHeartRestartDungeonReq {
}

message DuelHeartRestartDungeonRsp {
  int32 retcode = 5;
}

message DuelHeartSelectDifficultyReq {
  uint32 difficulty = 4;
}

message DuelHeartSelectDifficultyRsp {
  int32 retcode = 2;
}

message DuelHeartSettleNotify {
  bool is_succ = 1;
  bool is_new_record = 5;
  uint32 cost_time = 13;
}

message DuelHeartCgEndNotify {
}

message TeamChainStageData {
  uint32 best_score = 14;
  bool is_open = 12;
  uint32 stage_id = 15;
}

message TeamChainDetailInfo {
  repeated TeamChainStageData stage_data_list = 14;
  bool is_token_costume_reward = 4;
}

message TeamChainChooseAvatarInfo {
  bool is_trial_avatar = 11;
  uint32 avatar_id = 15;
}

message TeamChainChooseTeamInfo {
  repeated uint32 skill_no_list = 3;
  repeated TeamChainChooseAvatarInfo avatar_info_list = 6;
}

message TeamChainEnterDungeonReq {
  uint32 stage_id = 7;
  uint32 difficulty = 11;
  repeated TeamChainChooseTeamInfo team_info_list = 6;
}

message TeamChainEnterDungeonRsp {
  int32 retcode = 11;
}

message TeamChainRestartDungeonReq {
  repeated TeamChainChooseTeamInfo team_info_list = 11;
}

message TeamChainRestartDungeonRsp {
  int32 retcode = 8;
}

message TeamChainDungeonInfoNotify {
  repeated uint32 skill_no_list = 13;
  uint32 stage_id = 5;
}

message TeamChainTakeCostumeRewardReq {
}

message TeamChainTakeCostumeRewardRsp {
  int32 retcode = 9;
}

message ElectroherculesBattleLevelInfo {
  bool is_finish = 7;
  uint32 min_finish_time = 9;
  uint32 level_id = 3;
}

message ElectroherculesBattleStageInfo {
  bool is_stage_open = 4;
  repeated ElectroherculesBattleLevelInfo level_info_list = 9;
  uint32 stage_id = 6;
}

message ElectroherculesBattleDetailInfo {
  repeated ElectroherculesBattleStageInfo stage_info_list = 15;
}

message ElectroherculesBattleSelectDifficultyReq {
  uint32 stage_id = 11;
  uint32 diffculty = 14;
}

message ElectroherculesBattleSelectDifficultyRsp {
  uint32 stage_id = 6;
  int32 retcode = 14;
  uint32 diffculty = 3;
  uint32 gallery_id = 12;
}

message ElectroherculesBattleSettleNotify {
  bool is_new_record = 11;
  uint32 diffculty = 9;
  uint32 gallery_id = 14;
  uint32 finish_time = 15;
  uint32 stage_id = 3;
}
