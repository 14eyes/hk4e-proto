syntax = "proto3";

package proto;

option go_package = "github.com/teyvat-helper/hk4e-proto/pb";

import "define.proto";

enum MultistagePlayType {
  MULTISTAGE_PLAY_TYPE_NON = 0;
  MULTISTAGE_PLAY_TYPE_MECHANICUS = 1;
  MULTISTAGE_PLAY_TYPE_FLEUR_FAIR = 2;
  MULTISTAGE_PLAY_TYPE_HIDE_AND_SEEK = 3;
  MULTISTAGE_PLAY_TYPE_BOUNCE_CONJURING = 4;
  MULTISTAGE_PLAY_TYPE_CHESS = 5;
  MULTISTAGE_PLAY_TYPE_IRODORI_CHESS = 6;
  MULTISTAGE_PLAY_TYPE_CHAR_AMUSEMENT = 7;
  MULTISTAGE_PLAY_TYPE_BRICK_BREAKER = 8;
  MULTISTAGE_PLAY_TYPE_COIN_COLLECT = 9;
  MULTISTAGE_PLAY_TYPE_LAN_V3_BOAT = 10;
}

enum InBattleMechanicusStageType {
  IN_BATTLE_MECHANICUS_STAGE_NONE = 0;
  IN_BATTLE_MECHANICUS_STAGE_BUILD = 1;
  IN_BATTLE_MECHANICUS_STAGE_CARD_FLIP = 2;
  IN_BATTLE_MECHANICUS_STAGE_KILL = 3;
}

enum InBattleMechanicusCardChallengeState {
  IN_BATTLE_MECHANICUS_CARD_CHALLENGE_NONE = 0;
  IN_BATTLE_MECHANICUS_CARD_CHALLENGE_ON_GOING = 1;
  IN_BATTLE_MECHANICUS_CARD_CHALLENGE_FAIL = 2;
  IN_BATTLE_MECHANICUS_CARD_CHALLENGE_SUCCESS = 3;
}

enum HideAndSeekStageType {
  HIDE_AND_SEEK_STAGE_PREPARE = 0;
  HIDE_AND_SEEK_STAGE_PICK = 1;
  HIDE_AND_SEEK_STAGE_GAME = 2;
  HIDE_AND_SEEK_STAGE_HIDE = 3;
  HIDE_AND_SEEK_STAGE_SEEK = 4;
  HIDE_AND_SEEK_STAGE_SETTLE = 5;
}

enum BrickBreakerStageType {
  BRICK_BREAKER_STAGE_PREPARE = 0;
  BRICK_BREAKER_STAGE_PICK = 1;
  BRICK_BREAKER_STAGE_GAME = 2;
  BRICK_BREAKER_STAGE_PLAY = 3;
  BRICK_BREAKER_STAGE_SETTLE = 4;
}

enum LanV3BoatKickReason {
  LAN_V3_KICK_REASON_NONE = 0;
  LAN_V3_KICK_REASON_EXIT_VEHICLE = 1;
  LAN_V3_KICK_REASON_AVATAR_DIE = 2;
  LAN_V3_KICK_REASON_SLOW_ENTER = 3;
}

message InBattleMechanicusBuildingInfo {
  uint32 building_id = 8;
  uint32 level = 7;
  uint32 cost_points = 2;
  uint32 refund_points = 11;
}

message InBattleMechanicusPlayerInfo {
  uint32 pick_card_id = 5;
  uint32 uid = 14;
  repeated InBattleMechanicusBuildingInfo building_list = 4;
  bool is_card_confirmed = 13;
  uint32 building_points = 3;
}

message InBattleMechanicusMonsterInfo {
  uint32 monster_id = 1;
  uint32 level = 14;
  uint32 count = 13;
}

message InBattleMechanicusCardInfo {
  uint32 rand_effect_id = 12;
  uint32 end_round = 3;
  InBattleMechanicusCardChallengeState challenge_state = 5;
  uint32 cost_points = 1;
  uint32 card_id = 11;
  uint32 begin_round = 8;
}

message InBattleMechanicusInfo {
  uint32 left_monster = 5;
  uint32 wait_seconds = 13;
  repeated uint32 entrance_list = 410;
  repeated uint32 exit_list = 115;
  repeated InBattleMechanicusCardInfo history_card_list = 11;
  uint32 max_excape_monster_num = 10;
  uint32 building_stage_duration = 4;
  uint64 duration_ms = 8;
  InBattleMechanicusStageType stage = 9;
  uint32 total_round = 12;
  repeated InBattleMechanicusMonsterInfo monster_list = 14;
  uint32 excaped_monster_num = 6;
  uint32 round = 3;
  repeated InBattleMechanicusCardInfo pick_card_list = 15;
  repeated InBattleMechanicusPlayerInfo player_list = 7;
  uint64 wait_begin_time_us = 1;
  uint64 begin_time_ms = 2;
}

message InBattleFleurFairInfo {
  repeated uint32 gallery_id_list = 5;
  uint32 gallery_stage_index = 6;
  uint32 preview_stage_index = 8;
  repeated uint32 ability_group_id_list = 2;
  uint32 preview_display_duration = 12;
}

message CharAmusementAvatarInfo {
  uint32 uid = 11;
  uint32 punish_time = 7;
  repeated uint32 avatar_id_list = 10;
}

message CharAmusementInfo {
  uint32 total_cost_time = 11;
  uint32 stage_id = 2;
  uint32 level_id = 10;
  uint32 preview_stage_index = 4;
  repeated CharAmusementAvatarInfo avatar_info_list = 5;
}

message BrickBreakerStageInfo {
  uint32 level_id = 15;
  BrickBreakerStageType stage_type = 1;
  repeated BrickBreakerPlayerBattleInfo battle_info_list = 2;
}

message CoinCollectStageInfo {
  uint32 level_id = 3;
  uint32 play_index = 15;
  repeated CoinCollectPlayerInfo player_info_list = 9;
}

message LanV3BoatStageInfo {
  repeated uint32 player_uid_list = 2;
  uint32 map_id = 10;
  bool is_single = 13;
}

message MultistagePlayInfo {
  uint32 play_index = 13;
  uint32 play_type = 11;
  uint32 stage_type = 10;
  uint32 duration = 8;
  uint32 group_id = 12;
  uint32 begin_time = 9;
  uint32 stage_index = 1;
  oneof detail {
    InBattleMechanicusInfo mechanicus_info = 1334;
    InBattleFleurFairInfo fleur_fair_info = 1064;
    HideAndSeekStageInfo hide_and_seek_info = 108;
    InBattleChessInfo chess_info = 1758;
    InBattleIrodoriChessInfo irodori_chess_info = 531;
    CharAmusementInfo char_amusement_info = 324;
    BrickBreakerStageInfo brick_breaker_info = 1964;
    CoinCollectStageInfo coin_collect_info = 1067;
    LanV3BoatStageInfo lan_v3_boat_info = 1801;
  }
}

message MultistagePlayInfoNotify {
  MultistagePlayInfo info = 13;
}

message MultistagePlayFinishStageReq {
  uint32 group_id = 12;
  uint32 play_index = 15;
}

message InBattleMechanicusExcapeMonsterNotify {
  uint32 excaped_monster_num = 4;
}

message InBattleMechanicusLeftMonsterNotify {
  uint32 left_monster = 14;
}

message InBattleMechanicusBuildingPointsNotify {
  map<uint32, uint32> player_building_points_map = 4;
}

message InBattleMechanicusPickCardReq {
  uint32 group_id = 11;
  uint32 play_index = 7;
  uint32 card_id = 1;
}

message InBattleMechanicusPickCardRsp {
  int32 retcode = 11;
  uint32 card_id = 2;
  uint32 play_index = 4;
  uint32 group_id = 9;
}

message InBattleMechanicusPickCardNotify {
  uint32 player_uid = 6;
  uint32 group_id = 7;
  uint32 play_index = 8;
  uint32 card_id = 10;
}

message InBattleMechanicusConfirmCardReq {
  uint32 play_index = 6;
  uint32 card_id = 1;
  uint32 group_id = 3;
}

message InBattleMechanicusConfirmCardRsp {
  uint32 play_index = 2;
  uint32 card_id = 14;
  int32 retcode = 11;
  uint32 group_id = 6;
}

message InBattleMechanicusConfirmCardNotify {
  uint32 play_index = 11;
  uint32 card_id = 13;
  uint32 group_id = 10;
  uint32 player_uid = 2;
}

message InBattleMechanicusCardResultNotify {
  uint32 wait_seconds = 6;
  uint32 group_id = 2;
  repeated InBattleMechanicusCardInfo card_list = 9;
  uint64 wait_begin_time_us = 7;
  map<uint32, uint32> player_confirmed_card_map = 12;
  uint32 play_index = 8;
}

message MultistagePlayFinishStageRsp {
  int32 retcode = 11;
  uint32 group_id = 12;
  uint32 play_index = 6;
}

message MultistageSettleWatcherInfo {
  uint32 total_progress = 13;
  uint32 cur_progress = 5;
  uint32 watcher_id = 7;
  bool is_inverse = 12;
}

message InBattleMechanicusSettleNotify {
  uint32 group_id = 15;
  uint64 scene_time_ms = 11;
  uint32 difficulty_percentage = 6;
  uint32 total_token = 7;
  repeated MultistageSettleWatcherInfo watcher_list = 3;
  uint32 real_token = 13;
  bool is_success = 2;
  uint32 play_index = 14;
}

message InBattleMechanicusSettleInfo {
  uint64 scene_time_ms = 15;
  uint32 total_token = 4;
  uint32 real_token = 8;
  repeated MultistageSettleWatcherInfo watcher_list = 7;
  bool is_success = 6;
  uint32 play_index = 3;
  uint32 difficulty_percentage = 10;
  uint32 group_id = 13;
}

message MultistagePlaySettleNotify {
  uint32 play_index = 14;
  uint32 group_id = 4;
  oneof detail {
    InBattleMechanicusSettleInfo mechanicus_settle_info = 1402;
    InBattleChessSettleInfo chess_settle_info = 1283;
    InBattleIrodoriChessSettleInfo irodori_chess_settle_info = 612;
  }
}

message MultistagePlayStageEndNotify {
  uint32 group_id = 15;
  uint32 play_index = 9;
}

message MultistagePlayEndNotify {
  uint32 group_id = 5;
  uint32 play_index = 13;
}

message FleurFairBuffEnergyNotify {
  uint32 energy = 4;
}

message FleurFairGallerySettleInfo {
  uint32 energy = 2;
  uint32 gallery_stage_index = 11;
  map<uint32, int32> energy_stat_map = 6;
  uint32 gallery_stage_count = 9;
  bool is_success = 1;
}

message FleurFairPlayerStatInfo {
  string online_id = 11;
  uint32 uid = 8;
  ProfilePicture profile_picture = 1;
  uint32 stat_id = 3;
  uint32 head_image = 6;
  string nick_name = 15;
  int32 param = 5;
}

message FleurFairBossSettleInfo {
  uint32 reward_token_num = 15;
  repeated FleurFairPlayerStatInfo stat_info_list = 1;
  bool is_success = 10;
  uint32 energy = 12;
  uint32 cost_time = 8;
}

message FleurFairStageSettleNotify {
  uint32 stage_type = 10;
  oneof detail {
    FleurFairGallerySettleInfo gallery_settle_info = 13;
    FleurFairBossSettleInfo boss_settle_info = 14;
  }
}

message FleurFairFinishGalleryStageNotify {
}

message HideAndSeekPlayerBattleInfo {
  uint32 costume_id = 3;
  repeated uint32 skill_list = 15;
  bool is_ready = 12;
  uint32 avatar_id = 6;
}

message HideAndSeekStageInfo {
  uint32 map_id = 8;
  bool is_record_score = 3;
  HideAndSeekStageType stage_type = 7;
  map<uint32, HideAndSeekPlayerBattleInfo> battle_info_map = 2;
  repeated uint32 hider_uid_list = 1;
  uint32 hunter_uid = 10;
}

message HideAndSeekSelectAvatarReq {
  uint32 avatar_id = 8;
}

message HideAndSeekSelectAvatarRsp {
  int32 retcode = 2;
  uint32 avatar_id = 3;
}

message HideAndSeekSetReadyReq {
}

message HideAndSeekSetReadyRsp {
  int32 retcode = 11;
}

message HideAndSeekSettleInfo {
  uint32 uid = 2;
  ProfilePicture profile_picture = 1;
  repeated ExhibitionDisplayInfo card_list = 8;
  string nickname = 3;
  uint32 head_image = 4;
  string online_id = 10;
}

message HideAndSeekSettleNotify {
  enum SettleReason {
    SETTLE_REASON_TIME_OUT = 0;
    SETTLE_PLAY_END = 1;
    SETTLE_PLAYER_QUIT = 2;
  }

  uint32 cost_time = 2;
  repeated HideAndSeekSettleInfo settle_info_list = 8;
  repeated uint32 winner_list = 15;
  SettleReason reason = 4;
  uint32 play_index = 13;
  bool is_record_score = 6;
  repeated ExhibitionDisplayInfo score_list = 9;
  uint32 stage_type = 14;
}

message HideAndSeekPlayerReadyNotify {
  repeated uint32 uid_list = 5;
}

message HideAndSeekPlayerSetAvatarNotify {
  uint32 avatar_id = 2;
  uint32 costume_id = 13;
  uint32 uid = 5;
}

message ChessCardInfo {
  uint32 effect_stack = 12;
  uint32 card_id = 11;
}

message InBattleChessInfo {
  repeated uint32 ban_card_tag_list = 2;
  uint32 round = 4;
  repeated ChessCardInfo selected_card_info_list = 9;
  ChessMysteryInfo mystery_info = 1;
  map<uint32, ChessPlayerInfo> player_info_map = 8;
  uint32 max_escapable_monsters = 6;
  uint32 excaped_monsters = 12;
  uint32 total_round = 14;
  uint32 left_monsters = 15;
}

message InBattleChessSettleInfo {
  bool is_success = 7;
  uint32 chess_exp = 11;
  uint32 chess_level = 13;
  uint32 old_chess_level = 10;
  repeated ExhibitionDisplayInfo score_list = 1;
  uint64 scene_time_ms = 14;
  uint32 old_chess_exp = 2;
}

message ChessPlayerInfo {
  uint32 uid = 5;
  uint32 free_refresh_limit = 10;
  repeated ChessNormalCardInfo candidate_card_info_list = 3;
  uint32 building_points = 12;
  uint32 candidate_index = 6;
  uint32 free_refresh_count = 13;
  uint32 refresh_cost = 7;
}

message ChessMonsterInfo {
  uint32 monster_id = 12;
  uint32 level = 2;
  repeated uint32 affix_list = 13;
}

message ChessEntranceInfo {
  repeated ChessMonsterInfo monster_info_list = 14;
  uint32 entrance_index = 15;
  uint32 entrance_point_id = 8;
}

message ChessEntranceDetailInfo {
  repeated ChessEntranceInfo info_list = 4;
}

message ChessMysteryInfo {
  map<uint32, uint32> entrance_point_map = 13;
  repeated uint32 exit_point_id_list = 3;
  map<uint32, ChessEntranceDetailInfo> detail_info_map = 5;
}

message ChessNormalCardInfo {
  uint32 card_id = 2;
  uint32 cost_points = 15;
  bool is_attach_curse = 6;
}

message ChessPickCardReq {
  uint32 card_id = 1;
  uint32 card_index = 4;
}

message ChessPickCardRsp {
  uint32 card_index = 11;
  uint32 card_id = 1;
  int32 retcode = 4;
}

message ChessPickCardNotify {
  uint32 curse_card_id = 13;
  ChessNormalCardInfo normal_card_info = 1;
}

message ChessManualRefreshCardsReq {
}

message ChessManualRefreshCardsRsp {
  int32 retcode = 12;
}

message ChessPlayerInfoNotify {
  ChessPlayerInfo player_info = 10;
}

message ChessLeftMonstersNotify {
  uint32 left_monsters = 6;
}

message ChessEscapedMonstersNotify {
  uint32 excaped_monsters = 14;
}

message ChessSelectedCardsNotify {
  repeated ChessCardInfo selected_card_info_list = 4;
}

message GlobalBuildingInfoNotify {
  uint32 current_num = 5;
  repeated BuildingInfo building_list = 3;
  uint32 max_num = 13;
}

message InBattleIrodoriChessInfo {
  IrodoriChessMysteryInfo mystery_info = 3;
  uint32 left_monsters = 12;
  repeated uint32 selected_card_id_list = 13;
  uint32 building_points = 7;
  uint32 settle_score = 4;
}

message IrodoriChessMonsterInfo {
  uint32 grant_points = 6;
  uint32 level = 13;
  uint32 monster_id = 14;
  repeated uint32 affix_list = 11;
}

message IrodoriChessEntranceInfo {
  repeated IrodoriChessMonsterInfo monster_info_list = 6;
  uint32 entrance_point_id = 4;
}

message IrodoriChessEntranceDetailInfo {
  repeated IrodoriChessEntranceInfo info_list = 15;
}

message IrodoriChessMysteryInfo {
  IrodoriChessEntranceDetailInfo entrance_detail_info = 5;
  repeated uint32 entrance_point_id_list = 2;
  repeated uint32 exit_point_id_list = 13;
}

message InBattleIrodoriChessSettleInfo {
  bool is_new_record = 5;
  bool is_activity_end = 2;
  uint64 scene_time_ms = 1;
  uint32 settle_score = 3;
  bool is_perfect = 12;
  uint32 kill_monster_num = 7;
}

message IrodoriChessPlayerInfo {
  uint32 uid = 4;
  uint32 building_points = 9;
  uint32 settle_score = 3;
}

message IrodoriChessPlayerInfoNotify {
  IrodoriChessPlayerInfo player_info = 6;
}

message IrodoriChessLeftMonsterNotify {
  uint32 left_monsters = 8;
}

message BrickBreakerPlayerBattleInfo {
  repeated uint32 skill_list = 10;
  bool is_ready = 14;
  bool is_changing = 11;
  uint32 uid = 15;
  repeated uint32 avatar_id = 9;
  repeated uint32 costume_id = 13;
  string nickname = 3;
}

message BrickBreakerPlayerReadyNotify {
  repeated uint32 uid_list = 14;
}

message BrickBreakerPlayerSetAvatarNotify {
  repeated uint32 avatar_id_list = 8;
  repeated uint32 costume_id_list = 11;
  uint32 uid = 9;
}

message BrickBreakerPlayerSetSkillNotify {
  uint32 uid = 8;
  repeated uint32 skill_id_list = 14;
}

message BrickBreakerSetReadyReq {
}

message BrickBreakerSetReadyRsp {
  int32 retcode = 2;
}

message BrickBreakerSelectAvatarReq {
  repeated uint32 avatar_id = 2;
}

message BrickBreakerSelectAvatarRsp {
  repeated uint32 avatar_id = 8;
  int32 retcode = 4;
}

message BrickBreakerSelectSkillReq {
  repeated uint32 skill_id = 6;
}

message BrickBreakerSelectSkillRsp {
  int32 retcode = 10;
  repeated uint32 skill_id = 11;
}

message BrickBreakerSetChangingReq {
  bool is_changing = 11;
}

message BrickBreakerSetChangingRsp {
  int32 retcode = 2;
}

message BrickBreakerPlayerSetChangingNotify {
  uint32 uid = 15;
  bool is_changing = 7;
}

message CoinCollectTeamAvatarInfo {
  uint32 costume_id = 4;
  uint32 avatar_id = 10;
}

message CoinCollectPlayerInfo {
  uint32 choose_skill_no = 5;
  uint32 player_uid = 12;
  string player_name = 11;
  bool is_prepare = 14;
  repeated CoinCollectTeamAvatarInfo avatar_info_list = 10;
}

message CoinCollectPrepareStageNotify {
  CoinCollectStageInfo coin_collect_info = 3;
}

message LanV3BoatSettleInfo {
  uint32 uid = 8;
  string online_id = 13;
  uint32 head_image = 10;
  string nickname = 14;
  ProfilePicture profile_picture = 12;
  repeated ExhibitionDisplayInfo card_list = 1;
}

message LanV3BoatSettleNotify {
  bool is_gallery_succ = 10;
  repeated uint32 winner_uid_list = 2;
  bool is_single = 8;
  uint32 stage_type = 12;
  repeated ExhibitionDisplayInfo score_list = 1;
  repeated LanV3BoatSettleInfo settle_info_list = 13;
  uint32 play_index = 4;
}
